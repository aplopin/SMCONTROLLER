
SMCONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c00  08012260  08012260  00013260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e60  08014e60  00016088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014e60  08014e60  00015e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e68  08014e68  00016088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014e68  08014e68  00015e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014e6c  08014e6c  00015e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08014e70  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00016088  2**0
                  CONTENTS
 10 .bss          00008a24  20000088  20000088  00016088  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20008aac  20008aac  00016088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00016088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b16e  00000000  00000000  000160b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065b5  00000000  00000000  00041226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023e8  00000000  00000000  000477e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001cbf  00000000  00000000  00049bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fb35  00000000  00000000  0004b887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035ef7  00000000  00000000  0005b3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb62b  00000000  00000000  000912b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018c8de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a404  00000000  00000000  0018c924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00196d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012248 	.word	0x08012248

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08012248 	.word	0x08012248

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <udpSocketInit>:
void udpClientSend();

/** Функция инициализации UDP сетевого интерфейса
 */
void udpSocketInit(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
	/* Переменная ошибок работы UDP интерфейса */
	err_t err;

	/* Новый UDP управляющий блок */
	upcb = udp_new();
 80005a2:	f00e f95f 	bl	800e864 <udp_new>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a13      	ldr	r2, [pc, #76]	@ (80005f8 <udpSocketInit+0x5c>)
 80005aa:	6013      	str	r3, [r2, #0]

	/* Связать IP адрес и порт */
	ip_addr_t myIPaddr;

	/* IP адрес устройства */
	IP_ADDR4(&myIPaddr, 192, 168, 1, 156);
 80005ac:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <udpSocketInit+0x60>)
 80005ae:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 1556);
 80005b0:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <udpSocketInit+0x5c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f107 0108 	add.w	r1, r7, #8
 80005b8:	f240 6214 	movw	r2, #1556	@ 0x614
 80005bc:	4618      	mov	r0, r3
 80005be:	f00e f83b 	bl	800e638 <udp_bind>

	/* Конфигурация IP адреса и порта назначения - ПК */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 1, 2);
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <udpSocketInit+0x64>)
 80005c4:	607b      	str	r3, [r7, #4]
	err = udp_connect(upcb, &DestIPaddr, 1555);
 80005c6:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <udpSocketInit+0x5c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	1d39      	adds	r1, r7, #4
 80005cc:	f240 6213 	movw	r2, #1555	@ 0x613
 80005d0:	4618      	mov	r0, r3
 80005d2:	f00e f8b9 	bl	800e748 <udp_connect>
 80005d6:	4603      	mov	r3, r0
 80005d8:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 80005da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d106      	bne.n	80005f0 <udpSocketInit+0x54>
	{
		/* Передача указателя на функцию обработчика входящих пакетов в структуру UDP интерфейса */
		udp_recv(upcb, udpReceiveCallback, NULL);
 80005e2:	4b05      	ldr	r3, [pc, #20]	@ (80005f8 <udpSocketInit+0x5c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2200      	movs	r2, #0
 80005e8:	4906      	ldr	r1, [pc, #24]	@ (8000604 <udpSocketInit+0x68>)
 80005ea:	4618      	mov	r0, r3
 80005ec:	f00e f91a 	bl	800e824 <udp_recv>
	}
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200000a4 	.word	0x200000a4
 80005fc:	9c01a8c0 	.word	0x9c01a8c0
 8000600:	0201a8c0 	.word	0x0201a8c0
 8000604:	08000609 	.word	0x08000609

08000608 <udpReceiveCallback>:

/** Функция обработки принятых пакетов UDP
 */
void udpReceiveCallback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b0c5      	sub	sp, #276	@ 0x114
 800060c:	af00      	add	r7, sp, #0
 800060e:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 8000612:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 8000616:	6020      	str	r0, [r4, #0]
 8000618:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800061c:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8000620:	6001      	str	r1, [r0, #0]
 8000622:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000626:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800062a:	600a      	str	r2, [r1, #0]
 800062c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000630:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000634:	6013      	str	r3, [r2, #0]
	strncpy(rxBuf, (char *)p->payload, p->len);
 8000636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800063a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	6859      	ldr	r1, [r3, #4]
 8000642:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000646:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	895b      	ldrh	r3, [r3, #10]
 800064e:	461a      	mov	r2, r3
 8000650:	4810      	ldr	r0, [pc, #64]	@ (8000694 <udpReceiveCallback+0x8c>)
 8000652:	f010 fdbe 	bl	80111d2 <strncpy>
	counter ++;
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <udpReceiveCallback+0x90>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	4a0e      	ldr	r2, [pc, #56]	@ (8000698 <udpReceiveCallback+0x90>)
 800065e:	6013      	str	r3, [r2, #0]
	pbuf_free(p);
 8000660:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000664:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000668:	6818      	ldr	r0, [r3, #0]
 800066a:	f007 fe67 	bl	800833c <pbuf_free>

	char data[256];
	sprintf(data, "UDP: Message has been delivered. Echo: counter = %d;\n", counter);
 800066e:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <udpReceiveCallback+0x90>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4909      	ldr	r1, [pc, #36]	@ (800069c <udpReceiveCallback+0x94>)
 8000678:	4618      	mov	r0, r3
 800067a:	f010 fd13 	bl	80110a4 <siprintf>

	udpClientSend(data);
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f80c 	bl	80006a0 <udpClientSend>
}
 8000688:	bf00      	nop
 800068a:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800068e:	46bd      	mov	sp, r7
 8000690:	bd90      	pop	{r4, r7, pc}
 8000692:	bf00      	nop
 8000694:	200000a8 	.word	0x200000a8
 8000698:	20000128 	.word	0x20000128
 800069c:	08012260 	.word	0x08012260

080006a0 <udpClientSend>:

/** Функция отправки сообщения по UDP
 */
void udpClientSend(char *buf)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0c4      	sub	sp, #272	@ 0x110
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006ae:	6018      	str	r0, [r3, #0]
	struct pbuf *txBuf;
	char data[256];

	int len = sprintf(data, "%s\n", (char *)buf);
 80006b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006b8:	f107 0008 	add.w	r0, r7, #8
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4917      	ldr	r1, [pc, #92]	@ (800071c <udpClientSend+0x7c>)
 80006c0:	f010 fcf0 	bl	80110a4 <siprintf>
 80006c4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

	/* Выделить память под данные в буфере */
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 80006c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80006d2:	4619      	mov	r1, r3
 80006d4:	2036      	movs	r0, #54	@ 0x36
 80006d6:	f007 fb4d 	bl	8007d74 <pbuf_alloc>
 80006da:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

	if (txBuf != NULL)
 80006de:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d014      	beq.n	8000710 <udpClientSend+0x70>
	{
		pbuf_take(txBuf, data, len);
 80006e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	4619      	mov	r1, r3
 80006f2:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80006f6:	f008 f88d 	bl	8008814 <pbuf_take>
		udp_send(upcb, txBuf);
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <udpClientSend+0x80>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8000702:	4618      	mov	r0, r3
 8000704:	f00d fdae 	bl	800e264 <udp_send>
    	pbuf_free(txBuf);
 8000708:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800070c:	f007 fe16 	bl	800833c <pbuf_free>
	}
}
 8000710:	bf00      	nop
 8000712:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	08012298 	.word	0x08012298
 8000720:	200000a4 	.word	0x200000a4

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000728:	f001 fa64 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072c:	f000 f820 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000730:	f000 fb98 	bl	8000e64 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000734:	f000 f886 	bl	8000844 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000738:	f000 f8d6 	bl	80008e8 <MX_CAN1_Init>
  MX_DAC_Init();
 800073c:	f000 f908 	bl	8000950 <MX_DAC_Init>
  MX_I2C1_Init();
 8000740:	f000 f93a 	bl	80009b8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000744:	f000 f99c 	bl	8000a80 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000748:	f000 fa42 	bl	8000bd0 <MX_TIM3_Init>
  MX_TIM13_Init();
 800074c:	f000 faba 	bl	8000cc4 <MX_TIM13_Init>
  MX_USART1_UART_Init();
 8000750:	f000 fb06 	bl	8000d60 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000754:	f000 fb58 	bl	8000e08 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8000758:	f000 f95c 	bl	8000a14 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 800075c:	f000 fb2a 	bl	8000db4 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000760:	f005 fd92 	bl	8006288 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  /* Инициализация UDP сокета */
  udpSocketInit();
 8000764:	f7ff ff1a 	bl	800059c <udpSocketInit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Ethernet */
	  MX_LWIP_Process();
 8000768:	f005 fece 	bl	8006508 <MX_LWIP_Process>
 800076c:	e7fc      	b.n	8000768 <main+0x44>
	...

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	@ 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	@ 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f010 fd1f 	bl	80111c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b28      	ldr	r3, [pc, #160]	@ (800083c <SystemClock_Config+0xcc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	4a27      	ldr	r2, [pc, #156]	@ (800083c <SystemClock_Config+0xcc>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a4:	4b25      	ldr	r3, [pc, #148]	@ (800083c <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b22      	ldr	r3, [pc, #136]	@ (8000840 <SystemClock_Config+0xd0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a21      	ldr	r2, [pc, #132]	@ (8000840 <SystemClock_Config+0xd0>)
 80007ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000840 <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007cc:	2301      	movs	r3, #1
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e0:	2304      	movs	r3, #4
 80007e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007e4:	23a8      	movs	r3, #168	@ 0xa8
 80007e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ec:	2307      	movs	r3, #7
 80007ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 fdd7 	bl	80043a8 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000800:	f000 fc54 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000810:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2105      	movs	r1, #5
 8000822:	4618      	mov	r0, r3
 8000824:	f004 f838 	bl	8004898 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800082e:	f000 fc3d 	bl	80010ac <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3750      	adds	r7, #80	@ 0x50
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000856:	4b21      	ldr	r3, [pc, #132]	@ (80008dc <MX_ADC1_Init+0x98>)
 8000858:	4a21      	ldr	r2, [pc, #132]	@ (80008e0 <MX_ADC1_Init+0x9c>)
 800085a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800085c:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <MX_ADC1_Init+0x98>)
 800085e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000862:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000864:	4b1d      	ldr	r3, [pc, #116]	@ (80008dc <MX_ADC1_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <MX_ADC1_Init+0x98>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000870:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <MX_ADC1_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000876:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <MX_ADC1_Init+0x98>)
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800087e:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <MX_ADC1_Init+0x98>)
 8000880:	2200      	movs	r2, #0
 8000882:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_ADC1_Init+0x98>)
 8000886:	4a17      	ldr	r2, [pc, #92]	@ (80008e4 <MX_ADC1_Init+0xa0>)
 8000888:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_ADC1_Init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_ADC1_Init+0x98>)
 8000892:	2201      	movs	r2, #1
 8000894:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_ADC1_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_ADC1_Init+0x98>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008a4:	480d      	ldr	r0, [pc, #52]	@ (80008dc <MX_ADC1_Init+0x98>)
 80008a6:	f001 fa3b 	bl	8001d20 <HAL_ADC_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008b0:	f000 fbfc 	bl	80010ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c0:	463b      	mov	r3, r7
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_ADC1_Init+0x98>)
 80008c6:	f001 fa6f 	bl	8001da8 <HAL_ADC_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008d0:	f000 fbec 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000012c 	.word	0x2000012c
 80008e0:	40012000 	.word	0x40012000
 80008e4:	0f000001 	.word	0x0f000001

080008e8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <MX_CAN1_Init+0x60>)
 80008ee:	4a17      	ldr	r2, [pc, #92]	@ (800094c <MX_CAN1_Init+0x64>)
 80008f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80008f2:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_CAN1_Init+0x60>)
 80008f4:	2210      	movs	r2, #16
 80008f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008f8:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <MX_CAN1_Init+0x60>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008fe:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <MX_CAN1_Init+0x60>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000904:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <MX_CAN1_Init+0x60>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_CAN1_Init+0x60>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000910:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <MX_CAN1_Init+0x60>)
 8000912:	2200      	movs	r2, #0
 8000914:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000916:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_CAN1_Init+0x60>)
 8000918:	2200      	movs	r2, #0
 800091a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800091c:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <MX_CAN1_Init+0x60>)
 800091e:	2200      	movs	r2, #0
 8000920:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_CAN1_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000928:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <MX_CAN1_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_CAN1_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	@ (8000948 <MX_CAN1_Init+0x60>)
 8000936:	f001 fc55 	bl	80021e4 <HAL_CAN_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000940:	f000 fbb4 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000174 	.word	0x20000174
 800094c:	40006400 	.word	0x40006400

08000950 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_DAC_Init+0x60>)
 8000960:	4a14      	ldr	r2, [pc, #80]	@ (80009b4 <MX_DAC_Init+0x64>)
 8000962:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000964:	4812      	ldr	r0, [pc, #72]	@ (80009b0 <MX_DAC_Init+0x60>)
 8000966:	f001 fe4a 	bl	80025fe <HAL_DAC_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000970:	f000 fb9c 	bl	80010ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000974:	2300      	movs	r3, #0
 8000976:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	4619      	mov	r1, r3
 8000982:	480b      	ldr	r0, [pc, #44]	@ (80009b0 <MX_DAC_Init+0x60>)
 8000984:	f001 fe5d 	bl	8002642 <HAL_DAC_ConfigChannel>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800098e:	f000 fb8d 	bl	80010ac <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	2210      	movs	r2, #16
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_DAC_Init+0x60>)
 800099a:	f001 fe52 	bl	8002642 <HAL_DAC_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80009a4:	f000 fb82 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000019c 	.word	0x2000019c
 80009b4:	40007400 	.word	0x40007400

080009b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_I2C1_Init+0x50>)
 80009be:	4a13      	ldr	r2, [pc, #76]	@ (8000a0c <MX_I2C1_Init+0x54>)
 80009c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_I2C1_Init+0x50>)
 80009c4:	4a12      	ldr	r2, [pc, #72]	@ (8000a10 <MX_I2C1_Init+0x58>)
 80009c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_I2C1_Init+0x50>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_I2C1_Init+0x50>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_I2C1_Init+0x50>)
 80009d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <MX_I2C1_Init+0x50>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_I2C1_Init+0x50>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009e8:	4b07      	ldr	r3, [pc, #28]	@ (8000a08 <MX_I2C1_Init+0x50>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_I2C1_Init+0x50>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <MX_I2C1_Init+0x50>)
 80009f6:	f003 fa83 	bl	8003f00 <HAL_I2C_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a00:	f000 fb54 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200001b0 	.word	0x200001b0
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	000186a0 	.word	0x000186a0

08000a14 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a18:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_SPI3_Init+0x64>)
 8000a1a:	4a18      	ldr	r2, [pc, #96]	@ (8000a7c <MX_SPI3_Init+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <MX_SPI3_Init+0x64>)
 8000a20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a24:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_SPI3_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_SPI3_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_SPI3_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_SPI3_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_SPI3_Init+0x64>)
 8000a40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a44:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_SPI3_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <MX_SPI3_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_SPI3_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <MX_SPI3_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_SPI3_Init+0x64>)
 8000a60:	220a      	movs	r2, #10
 8000a62:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <MX_SPI3_Init+0x64>)
 8000a66:	f004 f937 	bl	8004cd8 <HAL_SPI_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000a70:	f000 fb1c 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000204 	.word	0x20000204
 8000a7c:	40003c00 	.word	0x40003c00

08000a80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b092      	sub	sp, #72	@ 0x48
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
 8000aa0:	615a      	str	r2, [r3, #20]
 8000aa2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f010 fb89 	bl	80111c2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ab0:	4b45      	ldr	r3, [pc, #276]	@ (8000bc8 <MX_TIM1_Init+0x148>)
 8000ab2:	4a46      	ldr	r2, [pc, #280]	@ (8000bcc <MX_TIM1_Init+0x14c>)
 8000ab4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ab6:	4b44      	ldr	r3, [pc, #272]	@ (8000bc8 <MX_TIM1_Init+0x148>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abc:	4b42      	ldr	r3, [pc, #264]	@ (8000bc8 <MX_TIM1_Init+0x148>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ac2:	4b41      	ldr	r3, [pc, #260]	@ (8000bc8 <MX_TIM1_Init+0x148>)
 8000ac4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ac8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aca:	4b3f      	ldr	r3, [pc, #252]	@ (8000bc8 <MX_TIM1_Init+0x148>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ad0:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc8 <MX_TIM1_Init+0x148>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad6:	4b3c      	ldr	r3, [pc, #240]	@ (8000bc8 <MX_TIM1_Init+0x148>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000adc:	483a      	ldr	r0, [pc, #232]	@ (8000bc8 <MX_TIM1_Init+0x148>)
 8000ade:	f004 f9d3 	bl	8004e88 <HAL_TIM_PWM_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000ae8:	f000 fae0 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000af4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000af8:	4619      	mov	r1, r3
 8000afa:	4833      	ldr	r0, [pc, #204]	@ (8000bc8 <MX_TIM1_Init+0x148>)
 8000afc:	f004 fd32 	bl	8005564 <HAL_TIMEx_MasterConfigSynchronization>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000b06:	f000 fad1 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b0a:	2360      	movs	r3, #96	@ 0x60
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b16:	2300      	movs	r3, #0
 8000b18:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4826      	ldr	r0, [pc, #152]	@ (8000bc8 <MX_TIM1_Init+0x148>)
 8000b30:	f004 f9fa 	bl	8004f28 <HAL_TIM_PWM_ConfigChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000b3a:	f000 fab7 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b42:	2204      	movs	r2, #4
 8000b44:	4619      	mov	r1, r3
 8000b46:	4820      	ldr	r0, [pc, #128]	@ (8000bc8 <MX_TIM1_Init+0x148>)
 8000b48:	f004 f9ee 	bl	8004f28 <HAL_TIM_PWM_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000b52:	f000 faab 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5a:	2208      	movs	r2, #8
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481a      	ldr	r0, [pc, #104]	@ (8000bc8 <MX_TIM1_Init+0x148>)
 8000b60:	f004 f9e2 	bl	8004f28 <HAL_TIM_PWM_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000b6a:	f000 fa9f 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b72:	220c      	movs	r2, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	4814      	ldr	r0, [pc, #80]	@ (8000bc8 <MX_TIM1_Init+0x148>)
 8000b78:	f004 f9d6 	bl	8004f28 <HAL_TIM_PWM_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000b82:	f000 fa93 	bl	80010ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4807      	ldr	r0, [pc, #28]	@ (8000bc8 <MX_TIM1_Init+0x148>)
 8000baa:	f004 fd57 	bl	800565c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000bb4:	f000 fa7a 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bb8:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <MX_TIM1_Init+0x148>)
 8000bba:	f000 fc5f 	bl	800147c <HAL_TIM_MspPostInit>

}
 8000bbe:	bf00      	nop
 8000bc0:	3748      	adds	r7, #72	@ 0x48
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000025c 	.word	0x2000025c
 8000bcc:	40010000 	.word	0x40010000

08000bd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd6:	f107 0320 	add.w	r3, r7, #32
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
 8000bee:	615a      	str	r2, [r3, #20]
 8000bf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bf2:	4b32      	ldr	r3, [pc, #200]	@ (8000cbc <MX_TIM3_Init+0xec>)
 8000bf4:	4a32      	ldr	r2, [pc, #200]	@ (8000cc0 <MX_TIM3_Init+0xf0>)
 8000bf6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bf8:	4b30      	ldr	r3, [pc, #192]	@ (8000cbc <MX_TIM3_Init+0xec>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8000cbc <MX_TIM3_Init+0xec>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c04:	4b2d      	ldr	r3, [pc, #180]	@ (8000cbc <MX_TIM3_Init+0xec>)
 8000c06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000cbc <MX_TIM3_Init+0xec>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c12:	4b2a      	ldr	r3, [pc, #168]	@ (8000cbc <MX_TIM3_Init+0xec>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c18:	4828      	ldr	r0, [pc, #160]	@ (8000cbc <MX_TIM3_Init+0xec>)
 8000c1a:	f004 f935 	bl	8004e88 <HAL_TIM_PWM_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000c24:	f000 fa42 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	4619      	mov	r1, r3
 8000c36:	4821      	ldr	r0, [pc, #132]	@ (8000cbc <MX_TIM3_Init+0xec>)
 8000c38:	f004 fc94 	bl	8005564 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000c42:	f000 fa33 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c46:	2360      	movs	r3, #96	@ 0x60
 8000c48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4817      	ldr	r0, [pc, #92]	@ (8000cbc <MX_TIM3_Init+0xec>)
 8000c5e:	f004 f963 	bl	8004f28 <HAL_TIM_PWM_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000c68:	f000 fa20 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2204      	movs	r2, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4812      	ldr	r0, [pc, #72]	@ (8000cbc <MX_TIM3_Init+0xec>)
 8000c74:	f004 f958 	bl	8004f28 <HAL_TIM_PWM_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c7e:	f000 fa15 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2208      	movs	r2, #8
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <MX_TIM3_Init+0xec>)
 8000c8a:	f004 f94d 	bl	8004f28 <HAL_TIM_PWM_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000c94:	f000 fa0a 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4807      	ldr	r0, [pc, #28]	@ (8000cbc <MX_TIM3_Init+0xec>)
 8000ca0:	f004 f942 	bl	8004f28 <HAL_TIM_PWM_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000caa:	f000 f9ff 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cae:	4803      	ldr	r0, [pc, #12]	@ (8000cbc <MX_TIM3_Init+0xec>)
 8000cb0:	f000 fbe4 	bl	800147c <HAL_TIM_MspPostInit>

}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	@ 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200002a4 	.word	0x200002a4
 8000cc0:	40000400 	.word	0x40000400

08000cc4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	615a      	str	r2, [r3, #20]
 8000cda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <MX_TIM13_Init+0x94>)
 8000cde:	4a1f      	ldr	r2, [pc, #124]	@ (8000d5c <MX_TIM13_Init+0x98>)
 8000ce0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <MX_TIM13_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <MX_TIM13_Init+0x94>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <MX_TIM13_Init+0x94>)
 8000cf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cf4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf6:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <MX_TIM13_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <MX_TIM13_Init+0x94>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000d02:	4815      	ldr	r0, [pc, #84]	@ (8000d58 <MX_TIM13_Init+0x94>)
 8000d04:	f004 f871 	bl	8004dea <HAL_TIM_Base_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8000d0e:	f000 f9cd 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000d12:	4811      	ldr	r0, [pc, #68]	@ (8000d58 <MX_TIM13_Init+0x94>)
 8000d14:	f004 f8b8 	bl	8004e88 <HAL_TIM_PWM_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000d1e:	f000 f9c5 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d22:	2360      	movs	r3, #96	@ 0x60
 8000d24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	4807      	ldr	r0, [pc, #28]	@ (8000d58 <MX_TIM13_Init+0x94>)
 8000d3a:	f004 f8f5 	bl	8004f28 <HAL_TIM_PWM_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000d44:	f000 f9b2 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000d48:	4803      	ldr	r0, [pc, #12]	@ (8000d58 <MX_TIM13_Init+0x94>)
 8000d4a:	f000 fb97 	bl	800147c <HAL_TIM_MspPostInit>

}
 8000d4e:	bf00      	nop
 8000d50:	3720      	adds	r7, #32
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200002ec 	.word	0x200002ec
 8000d5c:	40001c00 	.word	0x40001c00

08000d60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d64:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <MX_USART1_UART_Init+0x4c>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	@ (8000db0 <MX_USART1_UART_Init+0x50>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <MX_USART1_UART_Init+0x4c>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <MX_USART1_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <MX_USART1_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <MX_USART1_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <MX_USART1_UART_Init+0x4c>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <MX_USART1_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <MX_USART1_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_USART1_UART_Init+0x4c>)
 8000d98:	f004 fcb2 	bl	8005700 <HAL_UART_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000da2:	f000 f983 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000334 	.word	0x20000334
 8000db0:	40011000 	.word	0x40011000

08000db4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <MX_USART3_UART_Init+0x50>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dec:	f004 fc88 	bl	8005700 <HAL_UART_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000df6:	f000 f959 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000037c 	.word	0x2000037c
 8000e04:	40004800 	.word	0x40004800

08000e08 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e0e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e16:	2204      	movs	r2, #4
 8000e18:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e28:	2202      	movs	r2, #2
 8000e2a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e38:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4c:	f003 f99c 	bl	8004188 <HAL_PCD_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e56:	f000 f929 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200003c4 	.word	0x200003c4

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	@ 0x30
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	4b85      	ldr	r3, [pc, #532]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a84      	ldr	r2, [pc, #528]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000e84:	f043 0310 	orr.w	r3, r3, #16
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b82      	ldr	r3, [pc, #520]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0310 	and.w	r3, r3, #16
 8000e92:	61bb      	str	r3, [r7, #24]
 8000e94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	4b7e      	ldr	r3, [pc, #504]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a7d      	ldr	r2, [pc, #500]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b7b      	ldr	r3, [pc, #492]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	4b77      	ldr	r3, [pc, #476]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a76      	ldr	r2, [pc, #472]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b74      	ldr	r3, [pc, #464]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b70      	ldr	r3, [pc, #448]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a6f      	ldr	r2, [pc, #444]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b6d      	ldr	r3, [pc, #436]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	4b69      	ldr	r3, [pc, #420]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a68      	ldr	r2, [pc, #416]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b66      	ldr	r3, [pc, #408]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b62      	ldr	r3, [pc, #392]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a61      	ldr	r2, [pc, #388]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b5f      	ldr	r3, [pc, #380]	@ (8001094 <MX_GPIO_Init+0x230>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ZERO_POS2_Pin|DIR1_Pin|DIR2_Pin|DIR3_Pin
 8000f22:	2200      	movs	r2, #0
 8000f24:	f249 5188 	movw	r1, #38280	@ 0x9588
 8000f28:	485b      	ldr	r0, [pc, #364]	@ (8001098 <MX_GPIO_Init+0x234>)
 8000f2a:	f002 ffcf 	bl	8003ecc <HAL_GPIO_WritePin>
                          |DIR4_Pin|DIR5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ACK_LINE0_Pin|ACK_LINE1_Pin|ACK_LINE2_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000f34:	4859      	ldr	r0, [pc, #356]	@ (800109c <MX_GPIO_Init+0x238>)
 8000f36:	f002 ffc9 	bl	8003ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR6_Pin|DIR7_Pin|DIR8_Pin|SPI3_NSS1_Pin
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 4147 	mov.w	r1, #50944	@ 0xc700
 8000f40:	4857      	ldr	r0, [pc, #348]	@ (80010a0 <MX_GPIO_Init+0x23c>)
 8000f42:	f002 ffc3 	bl	8003ecc <HAL_GPIO_WritePin>
                          |SPI3_NSS0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATE_Pin|SPI3_NSS2_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8000f4c:	4855      	ldr	r0, [pc, #340]	@ (80010a4 <MX_GPIO_Init+0x240>)
 8000f4e:	f002 ffbd 	bl	8003ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(READY_GPIO_Port, READY_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2108      	movs	r1, #8
 8000f56:	4854      	ldr	r0, [pc, #336]	@ (80010a8 <MX_GPIO_Init+0x244>)
 8000f58:	f002 ffb8 	bl	8003ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ZERO_POS3_Pin ZERO_POS1_Pin ZERO_POS4_Pin */
  GPIO_InitStruct.Pin = ZERO_POS3_Pin|ZERO_POS1_Pin|ZERO_POS4_Pin;
 8000f5c:	2345      	movs	r3, #69	@ 0x45
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	484a      	ldr	r0, [pc, #296]	@ (8001098 <MX_GPIO_Init+0x234>)
 8000f70:	f002 fe10 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZERO_POS2_Pin DIR1_Pin DIR2_Pin DIR3_Pin
                           DIR4_Pin DIR5_Pin */
  GPIO_InitStruct.Pin = ZERO_POS2_Pin|DIR1_Pin|DIR2_Pin|DIR3_Pin
 8000f74:	f249 5388 	movw	r3, #38280	@ 0x9588
 8000f78:	61fb      	str	r3, [r7, #28]
                          |DIR4_Pin|DIR5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4842      	ldr	r0, [pc, #264]	@ (8001098 <MX_GPIO_Init+0x234>)
 8000f8e:	f002 fe01 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_4_LS3_P_Pin EXTI_5_LS3_N_Pin EXTI_1_LS1_N_Pin */
  GPIO_InitStruct.Pin = EXTI_4_LS3_P_Pin|EXTI_5_LS3_N_Pin|EXTI_1_LS1_N_Pin;
 8000f92:	2332      	movs	r3, #50	@ 0x32
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	483c      	ldr	r0, [pc, #240]	@ (8001098 <MX_GPIO_Init+0x234>)
 8000fa8:	f002 fdf4 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACK_LINE0_Pin ACK_LINE1_Pin ACK_LINE2_Pin */
  GPIO_InitStruct.Pin = ACK_LINE0_Pin|ACK_LINE1_Pin|ACK_LINE2_Pin;
 8000fac:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4835      	ldr	r0, [pc, #212]	@ (800109c <MX_GPIO_Init+0x238>)
 8000fc6:	f002 fde5 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_0_LS1_P_Pin EXTI_2_LS2_P_Pin EXTI_3_LS2_N_Pin EXTI_6_LS4_P_Pin
                           EXTI_8_LS5_P_Pin EXTI_9_LS5_N_Pin */
  GPIO_InitStruct.Pin = EXTI_0_LS1_P_Pin|EXTI_2_LS2_P_Pin|EXTI_3_LS2_N_Pin|EXTI_6_LS4_P_Pin
 8000fca:	f240 334d 	movw	r3, #845	@ 0x34d
 8000fce:	61fb      	str	r3, [r7, #28]
                          |EXTI_8_LS5_P_Pin|EXTI_9_LS5_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	482e      	ldr	r0, [pc, #184]	@ (800109c <MX_GPIO_Init+0x238>)
 8000fe2:	f002 fdd7 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR6_Pin DIR7_Pin DIR8_Pin SPI3_NSS1_Pin
                           SPI3_NSS0_Pin */
  GPIO_InitStruct.Pin = DIR6_Pin|DIR7_Pin|DIR8_Pin|SPI3_NSS1_Pin
 8000fe6:	f44f 4347 	mov.w	r3, #50944	@ 0xc700
 8000fea:	61fb      	str	r3, [r7, #28]
                          |SPI3_NSS0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4828      	ldr	r0, [pc, #160]	@ (80010a0 <MX_GPIO_Init+0x23c>)
 8001000:	f002 fdc8 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_10_LS6_P_Pin EXTI_11_LS6_N_Pin EXTI_12_LS7_P_Pin EXTI_13_LS7_N_Pin
                           EXTI_14_LS8_P_Pin EXTI_15_LS8_N_Pin EXTI_7_LS4_N_Pin */
  GPIO_InitStruct.Pin = EXTI_10_LS6_P_Pin|EXTI_11_LS6_N_Pin|EXTI_12_LS7_P_Pin|EXTI_13_LS7_N_Pin
 8001004:	f64f 4380 	movw	r3, #64640	@ 0xfc80
 8001008:	61fb      	str	r3, [r7, #28]
                          |EXTI_14_LS8_P_Pin|EXTI_15_LS8_N_Pin|EXTI_7_LS4_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	4823      	ldr	r0, [pc, #140]	@ (80010a8 <MX_GPIO_Init+0x244>)
 800101c:	f002 fdba 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATE_Pin SPI3_NSS2_Pin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|SPI3_NSS2_Pin;
 8001020:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	481a      	ldr	r0, [pc, #104]	@ (80010a4 <MX_GPIO_Init+0x240>)
 800103a:	f002 fdab 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : STARTUP_OPTION1_Pin ZERO_POS8_Pin ZERO_POS7_Pin ZERO_POS6_Pin */
  GPIO_InitStruct.Pin = STARTUP_OPTION1_Pin|ZERO_POS8_Pin|ZERO_POS7_Pin|ZERO_POS6_Pin;
 800103e:	2374      	movs	r3, #116	@ 0x74
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4815      	ldr	r0, [pc, #84]	@ (80010a8 <MX_GPIO_Init+0x244>)
 8001052:	f002 fd9f 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_Pin */
  GPIO_InitStruct.Pin = READY_Pin;
 8001056:	2308      	movs	r3, #8
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(READY_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	480e      	ldr	r0, [pc, #56]	@ (80010a8 <MX_GPIO_Init+0x244>)
 800106e:	f002 fd91 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZERO_POS5_Pin */
  GPIO_InitStruct.Pin = ZERO_POS5_Pin;
 8001072:	2320      	movs	r3, #32
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ZERO_POS5_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	4806      	ldr	r0, [pc, #24]	@ (80010a0 <MX_GPIO_Init+0x23c>)
 8001086:	f002 fd85 	bl	8003b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800108a:	bf00      	nop
 800108c:	3730      	adds	r7, #48	@ 0x30
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40021000 	.word	0x40021000
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020c00 	.word	0x40020c00

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <Error_Handler+0x8>

080010b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <HAL_MspInit+0x4c>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001104 <HAL_MspInit+0x4c>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <HAL_MspInit+0x4c>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <HAL_MspInit+0x4c>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <HAL_MspInit+0x4c>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a17      	ldr	r2, [pc, #92]	@ (8001184 <HAL_ADC_MspInit+0x7c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d127      	bne.n	800117a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <HAL_ADC_MspInit+0x80>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	4a15      	ldr	r2, [pc, #84]	@ (8001188 <HAL_ADC_MspInit+0x80>)
 8001134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001138:	6453      	str	r3, [r2, #68]	@ 0x44
 800113a:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <HAL_ADC_MspInit+0x80>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <HAL_ADC_MspInit+0x80>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a0e      	ldr	r2, [pc, #56]	@ (8001188 <HAL_ADC_MspInit+0x80>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <HAL_ADC_MspInit+0x80>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001162:	2309      	movs	r3, #9
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001166:	2303      	movs	r3, #3
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	@ (800118c <HAL_ADC_MspInit+0x84>)
 8001176:	f002 fd0d 	bl	8003b94 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800117a:	bf00      	nop
 800117c:	3728      	adds	r7, #40	@ 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40012000 	.word	0x40012000
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000

08001190 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <HAL_CAN_MspInit+0x84>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d12b      	bne.n	800120a <HAL_CAN_MspInit+0x7a>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <HAL_CAN_MspInit+0x88>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	4a17      	ldr	r2, [pc, #92]	@ (8001218 <HAL_CAN_MspInit+0x88>)
 80011bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <HAL_CAN_MspInit+0x88>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_CAN_MspInit+0x88>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a10      	ldr	r2, [pc, #64]	@ (8001218 <HAL_CAN_MspInit+0x88>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <HAL_CAN_MspInit+0x88>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011ea:	2303      	movs	r3, #3
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011fa:	2309      	movs	r3, #9
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	@ (800121c <HAL_CAN_MspInit+0x8c>)
 8001206:	f002 fcc5 	bl	8003b94 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	@ 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40006400 	.word	0x40006400
 8001218:	40023800 	.word	0x40023800
 800121c:	40020c00 	.word	0x40020c00

08001220 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a17      	ldr	r2, [pc, #92]	@ (800129c <HAL_DAC_MspInit+0x7c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d127      	bne.n	8001292 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <HAL_DAC_MspInit+0x80>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	4a15      	ldr	r2, [pc, #84]	@ (80012a0 <HAL_DAC_MspInit+0x80>)
 800124c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001250:	6413      	str	r3, [r2, #64]	@ 0x40
 8001252:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <HAL_DAC_MspInit+0x80>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <HAL_DAC_MspInit+0x80>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a0e      	ldr	r2, [pc, #56]	@ (80012a0 <HAL_DAC_MspInit+0x80>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <HAL_DAC_MspInit+0x80>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800127a:	2330      	movs	r3, #48	@ 0x30
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127e:	2303      	movs	r3, #3
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <HAL_DAC_MspInit+0x84>)
 800128e:	f002 fc81 	bl	8003b94 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	@ 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40007400 	.word	0x40007400
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020000 	.word	0x40020000

080012a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a19      	ldr	r2, [pc, #100]	@ (800132c <HAL_I2C_MspInit+0x84>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d12b      	bne.n	8001322 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a17      	ldr	r2, [pc, #92]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e6:	23c0      	movs	r3, #192	@ 0xc0
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ea:	2312      	movs	r3, #18
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f6:	2304      	movs	r3, #4
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	480c      	ldr	r0, [pc, #48]	@ (8001334 <HAL_I2C_MspInit+0x8c>)
 8001302:	f002 fc47 	bl	8003b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	4a08      	ldr	r2, [pc, #32]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 8001310:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001314:	6413      	str	r3, [r2, #64]	@ 0x40
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	@ 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40005400 	.word	0x40005400
 8001330:	40023800 	.word	0x40023800
 8001334:	40020400 	.word	0x40020400

08001338 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a19      	ldr	r2, [pc, #100]	@ (80013bc <HAL_SPI_MspInit+0x84>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d12c      	bne.n	80013b4 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <HAL_SPI_MspInit+0x88>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	4a17      	ldr	r2, [pc, #92]	@ (80013c0 <HAL_SPI_MspInit+0x88>)
 8001364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001368:	6413      	str	r3, [r2, #64]	@ 0x40
 800136a:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <HAL_SPI_MspInit+0x88>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <HAL_SPI_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a10      	ldr	r2, [pc, #64]	@ (80013c0 <HAL_SPI_MspInit+0x88>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <HAL_SPI_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001392:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013a4:	2306      	movs	r3, #6
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <HAL_SPI_MspInit+0x8c>)
 80013b0:	f002 fbf0 	bl	8003b94 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	@ 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40003c00 	.word	0x40003c00
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020800 	.word	0x40020800

080013c8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a15      	ldr	r2, [pc, #84]	@ (800142c <HAL_TIM_PWM_MspInit+0x64>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d10e      	bne.n	80013f8 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <HAL_TIM_PWM_MspInit+0x68>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	4a13      	ldr	r2, [pc, #76]	@ (8001430 <HAL_TIM_PWM_MspInit+0x68>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <HAL_TIM_PWM_MspInit+0x68>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013f6:	e012      	b.n	800141e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <HAL_TIM_PWM_MspInit+0x6c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d10d      	bne.n	800141e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <HAL_TIM_PWM_MspInit+0x68>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	4a09      	ldr	r2, [pc, #36]	@ (8001430 <HAL_TIM_PWM_MspInit+0x68>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6413      	str	r3, [r2, #64]	@ 0x40
 8001412:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <HAL_TIM_PWM_MspInit+0x68>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40010000 	.word	0x40010000
 8001430:	40023800 	.word	0x40023800
 8001434:	40000400 	.word	0x40000400

08001438 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0b      	ldr	r2, [pc, #44]	@ (8001474 <HAL_TIM_Base_MspInit+0x3c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10d      	bne.n	8001466 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_TIM_Base_MspInit+0x40>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	4a09      	ldr	r2, [pc, #36]	@ (8001478 <HAL_TIM_Base_MspInit+0x40>)
 8001454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001458:	6413      	str	r3, [r2, #64]	@ 0x40
 800145a:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <HAL_TIM_Base_MspInit+0x40>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40001c00 	.word	0x40001c00
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	@ 0x30
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a45      	ldr	r2, [pc, #276]	@ (80015b0 <HAL_TIM_MspPostInit+0x134>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d11f      	bne.n	80014de <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	4b44      	ldr	r3, [pc, #272]	@ (80015b4 <HAL_TIM_MspPostInit+0x138>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a43      	ldr	r2, [pc, #268]	@ (80015b4 <HAL_TIM_MspPostInit+0x138>)
 80014a8:	f043 0310 	orr.w	r3, r3, #16
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b41      	ldr	r3, [pc, #260]	@ (80015b4 <HAL_TIM_MspPostInit+0x138>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	61bb      	str	r3, [r7, #24]
 80014b8:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = STEP1_TIM1_CH1_Pin|STEP2_TIM1_CH2_Pin|STEP3_TIM1_CH3_Pin|STEP4_TIM1_CH4_Pin;
 80014ba:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4619      	mov	r1, r3
 80014d6:	4838      	ldr	r0, [pc, #224]	@ (80015b8 <HAL_TIM_MspPostInit+0x13c>)
 80014d8:	f002 fb5c 	bl	8003b94 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80014dc:	e064      	b.n	80015a8 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a36      	ldr	r2, [pc, #216]	@ (80015bc <HAL_TIM_MspPostInit+0x140>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d13c      	bne.n	8001562 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	4b31      	ldr	r3, [pc, #196]	@ (80015b4 <HAL_TIM_MspPostInit+0x138>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f0:	4a30      	ldr	r2, [pc, #192]	@ (80015b4 <HAL_TIM_MspPostInit+0x138>)
 80014f2:	f043 0302 	orr.w	r3, r3, #2
 80014f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f8:	4b2e      	ldr	r3, [pc, #184]	@ (80015b4 <HAL_TIM_MspPostInit+0x138>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	4b2a      	ldr	r3, [pc, #168]	@ (80015b4 <HAL_TIM_MspPostInit+0x138>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150c:	4a29      	ldr	r2, [pc, #164]	@ (80015b4 <HAL_TIM_MspPostInit+0x138>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6313      	str	r3, [r2, #48]	@ 0x30
 8001514:	4b27      	ldr	r3, [pc, #156]	@ (80015b4 <HAL_TIM_MspPostInit+0x138>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP7_TIM3_CH3_Pin|STEP8_TIM3_CH4_Pin|STEP5_TIM3_CH1_Pin;
 8001520:	2313      	movs	r3, #19
 8001522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001530:	2302      	movs	r3, #2
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	4821      	ldr	r0, [pc, #132]	@ (80015c0 <HAL_TIM_MspPostInit+0x144>)
 800153c:	f002 fb2a 	bl	8003b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STEP6_TIM3_CH2_Pin;
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001550:	2302      	movs	r3, #2
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(STEP6_TIM3_CH2_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	481a      	ldr	r0, [pc, #104]	@ (80015c4 <HAL_TIM_MspPostInit+0x148>)
 800155c:	f002 fb1a 	bl	8003b94 <HAL_GPIO_Init>
}
 8001560:	e022      	b.n	80015a8 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM13)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a18      	ldr	r2, [pc, #96]	@ (80015c8 <HAL_TIM_MspPostInit+0x14c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d11d      	bne.n	80015a8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <HAL_TIM_MspPostInit+0x138>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001574:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <HAL_TIM_MspPostInit+0x138>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6313      	str	r3, [r2, #48]	@ 0x30
 800157c:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <HAL_TIM_MspPostInit+0x138>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GATE_LASER_TIM13_CH1_Pin;
 8001588:	2340      	movs	r3, #64	@ 0x40
 800158a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001598:	2309      	movs	r3, #9
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GATE_LASER_TIM13_CH1_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	480a      	ldr	r0, [pc, #40]	@ (80015cc <HAL_TIM_MspPostInit+0x150>)
 80015a4:	f002 faf6 	bl	8003b94 <HAL_GPIO_Init>
}
 80015a8:	bf00      	nop
 80015aa:	3730      	adds	r7, #48	@ 0x30
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40010000 	.word	0x40010000
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40000400 	.word	0x40000400
 80015c0:	40020400 	.word	0x40020400
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40001c00 	.word	0x40001c00
 80015cc:	40020000 	.word	0x40020000

080015d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	@ 0x30
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a33      	ldr	r2, [pc, #204]	@ (80016bc <HAL_UART_MspInit+0xec>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d12d      	bne.n	800164e <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	4b32      	ldr	r3, [pc, #200]	@ (80016c0 <HAL_UART_MspInit+0xf0>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	4a31      	ldr	r2, [pc, #196]	@ (80016c0 <HAL_UART_MspInit+0xf0>)
 80015fc:	f043 0310 	orr.w	r3, r3, #16
 8001600:	6453      	str	r3, [r2, #68]	@ 0x44
 8001602:	4b2f      	ldr	r3, [pc, #188]	@ (80016c0 <HAL_UART_MspInit+0xf0>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	4b2b      	ldr	r3, [pc, #172]	@ (80016c0 <HAL_UART_MspInit+0xf0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a2a      	ldr	r2, [pc, #168]	@ (80016c0 <HAL_UART_MspInit+0xf0>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b28      	ldr	r3, [pc, #160]	@ (80016c0 <HAL_UART_MspInit+0xf0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800162a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800163c:	2307      	movs	r3, #7
 800163e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	481f      	ldr	r0, [pc, #124]	@ (80016c4 <HAL_UART_MspInit+0xf4>)
 8001648:	f002 faa4 	bl	8003b94 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800164c:	e031      	b.n	80016b2 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a1d      	ldr	r2, [pc, #116]	@ (80016c8 <HAL_UART_MspInit+0xf8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d12c      	bne.n	80016b2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <HAL_UART_MspInit+0xf0>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <HAL_UART_MspInit+0xf0>)
 8001662:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001666:	6413      	str	r3, [r2, #64]	@ 0x40
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_UART_MspInit+0xf0>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <HAL_UART_MspInit+0xf0>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167c:	4a10      	ldr	r2, [pc, #64]	@ (80016c0 <HAL_UART_MspInit+0xf0>)
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	6313      	str	r3, [r2, #48]	@ 0x30
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <HAL_UART_MspInit+0xf0>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001690:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016a2:	2307      	movs	r3, #7
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	4807      	ldr	r0, [pc, #28]	@ (80016cc <HAL_UART_MspInit+0xfc>)
 80016ae:	f002 fa71 	bl	8003b94 <HAL_GPIO_Init>
}
 80016b2:	bf00      	nop
 80016b4:	3730      	adds	r7, #48	@ 0x30
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40011000 	.word	0x40011000
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40004800 	.word	0x40004800
 80016cc:	40020c00 	.word	0x40020c00

080016d0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	@ 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016f0:	d132      	bne.n	8001758 <HAL_PCD_MspInit+0x88>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <HAL_PCD_MspInit+0x90>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a19      	ldr	r2, [pc, #100]	@ (8001760 <HAL_PCD_MspInit+0x90>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <HAL_PCD_MspInit+0x90>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800170e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001720:	230a      	movs	r3, #10
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	480e      	ldr	r0, [pc, #56]	@ (8001764 <HAL_PCD_MspInit+0x94>)
 800172c:	f002 fa32 	bl	8003b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_PCD_MspInit+0x90>)
 8001732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001734:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <HAL_PCD_MspInit+0x90>)
 8001736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800173a:	6353      	str	r3, [r2, #52]	@ 0x34
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <HAL_PCD_MspInit+0x90>)
 8001742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001744:	4a06      	ldr	r2, [pc, #24]	@ (8001760 <HAL_PCD_MspInit+0x90>)
 8001746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800174a:	6453      	str	r3, [r2, #68]	@ 0x44
 800174c:	4b04      	ldr	r3, [pc, #16]	@ (8001760 <HAL_PCD_MspInit+0x90>)
 800174e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	@ 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40023800 	.word	0x40023800
 8001764:	40020000 	.word	0x40020000

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <NMI_Handler+0x4>

08001770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <HardFault_Handler+0x4>

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <MemManage_Handler+0x4>

08001780 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <UsageFault_Handler+0x4>

08001790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017be:	f000 fa6b 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <ETH_IRQHandler+0x10>)
 80017ce:	f001 faf3 	bl	8002db8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200053cc 	.word	0x200053cc

080017dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return 1;
 80017e0:	2301      	movs	r3, #1
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_kill>:

int _kill(int pid, int sig)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017f6:	4b05      	ldr	r3, [pc, #20]	@ (800180c <_kill+0x20>)
 80017f8:	2216      	movs	r2, #22
 80017fa:	601a      	str	r2, [r3, #0]
  return -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	20008a9c 	.word	0x20008a9c

08001810 <_exit>:

void _exit (int status)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ffe5 	bl	80017ec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001822:	bf00      	nop
 8001824:	e7fd      	b.n	8001822 <_exit+0x12>

08001826 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e00a      	b.n	800184e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001838:	f3af 8000 	nop.w
 800183c:	4601      	mov	r1, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	60ba      	str	r2, [r7, #8]
 8001844:	b2ca      	uxtb	r2, r1
 8001846:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	dbf0      	blt.n	8001838 <_read+0x12>
  }

  return len;
 8001856:	687b      	ldr	r3, [r7, #4]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	e009      	b.n	8001886 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	60ba      	str	r2, [r7, #8]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	dbf1      	blt.n	8001872 <_write+0x12>
  }
  return len;
 800188e:	687b      	ldr	r3, [r7, #4]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_close>:

int _close(int file)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c0:	605a      	str	r2, [r3, #4]
  return 0;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_isatty>:

int _isatty(int file)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018d8:	2301      	movs	r3, #1
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b085      	sub	sp, #20
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001908:	4a14      	ldr	r2, [pc, #80]	@ (800195c <_sbrk+0x5c>)
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <_sbrk+0x60>)
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001914:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <_sbrk+0x64>)
 800191e:	4a12      	ldr	r2, [pc, #72]	@ (8001968 <_sbrk+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	d205      	bcs.n	800193c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001930:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <_sbrk+0x6c>)
 8001932:	220c      	movs	r2, #12
 8001934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e009      	b.n	8001950 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001942:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	4a06      	ldr	r2, [pc, #24]	@ (8001964 <_sbrk+0x64>)
 800194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	20020000 	.word	0x20020000
 8001960:	00004000 	.word	0x00004000
 8001964:	200008a8 	.word	0x200008a8
 8001968:	20008ab0 	.word	0x20008ab0
 800196c:	20008a9c 	.word	0x20008a9c

08001970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <SystemInit+0x20>)
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800197a:	4a05      	ldr	r2, [pc, #20]	@ (8001990 <SystemInit+0x20>)
 800197c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001994:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001998:	f7ff ffea 	bl	8001970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800199c:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800199e:	490d      	ldr	r1, [pc, #52]	@ (80019d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019a0:	4a0d      	ldr	r2, [pc, #52]	@ (80019d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019b4:	4c0a      	ldr	r4, [pc, #40]	@ (80019e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c2:	f00f fc5f 	bl	8011284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c6:	f7fe fead 	bl	8000724 <main>
  bx  lr    
 80019ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80019d8:	08014e70 	.word	0x08014e70
  ldr r2, =_sbss
 80019dc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80019e0:	20008aac 	.word	0x20008aac

080019e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC_IRQHandler>

080019e6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00b      	beq.n	8001a0e <LAN8742_RegisterBusIO+0x28>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d007      	beq.n	8001a0e <LAN8742_RegisterBusIO+0x28>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <LAN8742_RegisterBusIO+0x28>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	e014      	b.n	8001a3e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d139      	bne.n	8001ada <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2220      	movs	r2, #32
 8001a78:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e01c      	b.n	8001aba <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	f107 020c 	add.w	r2, r7, #12
 8001a88:	2112      	movs	r1, #18
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	4798      	blx	r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	da03      	bge.n	8001a9c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001a94:	f06f 0304 	mvn.w	r3, #4
 8001a98:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001a9a:	e00b      	b.n	8001ab4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d105      	bne.n	8001ab4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
         break;
 8001ab2:	e005      	b.n	8001ac0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b1f      	cmp	r3, #31
 8001abe:	d9df      	bls.n	8001a80 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b1f      	cmp	r3, #31
 8001ac6:	d902      	bls.n	8001ace <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001ac8:	f06f 0302 	mvn.w	r3, #2
 8001acc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001ada:	693b      	ldr	r3, [r7, #16]
 }
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6810      	ldr	r0, [r2, #0]
 8001af8:	f107 020c 	add.w	r2, r7, #12
 8001afc:	2101      	movs	r1, #1
 8001afe:	4798      	blx	r3
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	da02      	bge.n	8001b0c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b06:	f06f 0304 	mvn.w	r3, #4
 8001b0a:	e06e      	b.n	8001bea <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6810      	ldr	r0, [r2, #0]
 8001b14:	f107 020c 	add.w	r2, r7, #12
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4798      	blx	r3
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	da02      	bge.n	8001b28 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b22:	f06f 0304 	mvn.w	r3, #4
 8001b26:	e060      	b.n	8001bea <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e059      	b.n	8001bea <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6810      	ldr	r0, [r2, #0]
 8001b3e:	f107 020c 	add.w	r2, r7, #12
 8001b42:	2100      	movs	r1, #0
 8001b44:	4798      	blx	r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da02      	bge.n	8001b52 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b4c:	f06f 0304 	mvn.w	r3, #4
 8001b50:	e04b      	b.n	8001bea <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d11b      	bne.n	8001b94 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <LAN8742_GetLinkState+0x90>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b70:	2302      	movs	r3, #2
 8001b72:	e03a      	b.n	8001bea <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e033      	b.n	8001bea <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	e02c      	b.n	8001bea <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001b90:	2305      	movs	r3, #5
 8001b92:	e02a      	b.n	8001bea <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6810      	ldr	r0, [r2, #0]
 8001b9c:	f107 020c 	add.w	r2, r7, #12
 8001ba0:	211f      	movs	r1, #31
 8001ba2:	4798      	blx	r3
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	da02      	bge.n	8001bb0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001baa:	f06f 0304 	mvn.w	r3, #4
 8001bae:	e01c      	b.n	8001bea <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001bba:	2306      	movs	r3, #6
 8001bbc:	e015      	b.n	8001bea <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f003 031c 	and.w	r3, r3, #28
 8001bc4:	2b18      	cmp	r3, #24
 8001bc6:	d101      	bne.n	8001bcc <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e00e      	b.n	8001bea <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 031c 	and.w	r3, r3, #28
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d101      	bne.n	8001bda <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e007      	b.n	8001bea <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f003 031c 	and.w	r3, r3, #28
 8001be0:	2b14      	cmp	r3, #20
 8001be2:	d101      	bne.n	8001be8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001be4:	2304      	movs	r3, #4
 8001be6:	e000      	b.n	8001bea <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001be8:	2305      	movs	r3, #5
    }
  }
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c34 <HAL_Init+0x40>)
 8001bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <HAL_Init+0x40>)
 8001c0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	@ (8001c34 <HAL_Init+0x40>)
 8001c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 fcad 	bl	800257c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	200f      	movs	r0, #15
 8001c24:	f000 f808 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fa46 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023c00 	.word	0x40023c00

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <HAL_InitTick+0x54>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <HAL_InitTick+0x58>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fcc5 	bl	80025e6 <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00e      	b.n	8001c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d80a      	bhi.n	8001c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 fc8d 	bl	8002592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4a06      	ldr	r2, [pc, #24]	@ (8001c94 <HAL_InitTick+0x5c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <HAL_IncTick+0x20>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <HAL_IncTick+0x24>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a04      	ldr	r2, [pc, #16]	@ (8001cbc <HAL_IncTick+0x24>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	200008ac 	.word	0x200008ac

08001cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	@ (8001cd4 <HAL_GetTick+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	200008ac 	.word	0x200008ac

08001cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff ffee 	bl	8001cc0 <HAL_GetTick>
 8001ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d005      	beq.n	8001cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <HAL_Delay+0x44>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cfe:	bf00      	nop
 8001d00:	f7ff ffde 	bl	8001cc0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d8f7      	bhi.n	8001d00 <HAL_Delay+0x28>
  {
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000008 	.word	0x20000008

08001d20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e033      	b.n	8001d9e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff f9e2 	bl	8001108 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d118      	bne.n	8001d90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d66:	f023 0302 	bic.w	r3, r3, #2
 8001d6a:	f043 0202 	orr.w	r2, r3, #2
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f93a 	bl	8001fec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	f023 0303 	bic.w	r3, r3, #3
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d8e:	e001      	b.n	8001d94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x1c>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e105      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x228>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b09      	cmp	r3, #9
 8001dd2:	d925      	bls.n	8001e20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68d9      	ldr	r1, [r3, #12]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	3b1e      	subs	r3, #30
 8001dea:	2207      	movs	r2, #7
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43da      	mvns	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	400a      	ands	r2, r1
 8001df8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68d9      	ldr	r1, [r3, #12]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4403      	add	r3, r0
 8001e12:	3b1e      	subs	r3, #30
 8001e14:	409a      	lsls	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	e022      	b.n	8001e66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6919      	ldr	r1, [r3, #16]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	2207      	movs	r2, #7
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	400a      	ands	r2, r1
 8001e42:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6919      	ldr	r1, [r3, #16]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	4603      	mov	r3, r0
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4403      	add	r3, r0
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d824      	bhi.n	8001eb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3b05      	subs	r3, #5
 8001e80:	221f      	movs	r2, #31
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3b05      	subs	r3, #5
 8001eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eb6:	e04c      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b0c      	cmp	r3, #12
 8001ebe:	d824      	bhi.n	8001f0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	3b23      	subs	r3, #35	@ 0x23
 8001ed2:	221f      	movs	r2, #31
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43da      	mvns	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	400a      	ands	r2, r1
 8001ee0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b23      	subs	r3, #35	@ 0x23
 8001efc:	fa00 f203 	lsl.w	r2, r0, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f08:	e023      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	3b41      	subs	r3, #65	@ 0x41
 8001f1c:	221f      	movs	r2, #31
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	400a      	ands	r2, r1
 8001f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	4618      	mov	r0, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	3b41      	subs	r3, #65	@ 0x41
 8001f46:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f52:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <HAL_ADC_ConfigChannel+0x234>)
 8001f54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a21      	ldr	r2, [pc, #132]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x238>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d109      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x1cc>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b12      	cmp	r3, #18
 8001f66:	d105      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a19      	ldr	r2, [pc, #100]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x238>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d123      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x21e>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b10      	cmp	r3, #16
 8001f84:	d003      	beq.n	8001f8e <HAL_ADC_ConfigChannel+0x1e6>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b11      	cmp	r3, #17
 8001f8c:	d11b      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b10      	cmp	r3, #16
 8001fa0:	d111      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x23c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a10      	ldr	r2, [pc, #64]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x240>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	0c9a      	lsrs	r2, r3, #18
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fb8:	e002      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f9      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40012300 	.word	0x40012300
 8001fe0:	40012000 	.word	0x40012000
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	431bde83 	.word	0x431bde83

08001fec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ff4:	4b79      	ldr	r3, [pc, #484]	@ (80021dc <ADC_Init+0x1f0>)
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	431a      	orrs	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	021a      	lsls	r2, r3, #8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6899      	ldr	r1, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207e:	4a58      	ldr	r2, [pc, #352]	@ (80021e0 <ADC_Init+0x1f4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d022      	beq.n	80020ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002092:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6899      	ldr	r1, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6899      	ldr	r1, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	e00f      	b.n	80020ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0202 	bic.w	r2, r2, #2
 80020f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6899      	ldr	r1, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7e1b      	ldrb	r3, [r3, #24]
 8002104:	005a      	lsls	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01b      	beq.n	8002150 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002126:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002136:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6859      	ldr	r1, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002142:	3b01      	subs	r3, #1
 8002144:	035a      	lsls	r2, r3, #13
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	e007      	b.n	8002160 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800215e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800216e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	3b01      	subs	r3, #1
 800217c:	051a      	lsls	r2, r3, #20
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6899      	ldr	r1, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021a2:	025a      	lsls	r2, r3, #9
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6899      	ldr	r1, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	029a      	lsls	r2, r3, #10
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40012300 	.word	0x40012300
 80021e0:	0f000001 	.word	0x0f000001

080021e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0ed      	b.n	80023d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d102      	bne.n	8002208 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe ffc4 	bl	8001190 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002218:	f7ff fd52 	bl	8001cc0 <HAL_GetTick>
 800221c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800221e:	e012      	b.n	8002246 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002220:	f7ff fd4e 	bl	8001cc0 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b0a      	cmp	r3, #10
 800222c:	d90b      	bls.n	8002246 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2205      	movs	r2, #5
 800223e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0c5      	b.n	80023d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0e5      	beq.n	8002220 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0202 	bic.w	r2, r2, #2
 8002262:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002264:	f7ff fd2c 	bl	8001cc0 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800226a:	e012      	b.n	8002292 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800226c:	f7ff fd28 	bl	8001cc0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b0a      	cmp	r3, #10
 8002278:	d90b      	bls.n	8002292 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2205      	movs	r2, #5
 800228a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e09f      	b.n	80023d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e5      	bne.n	800226c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7e1b      	ldrb	r3, [r3, #24]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d108      	bne.n	80022ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	e007      	b.n	80022ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7e5b      	ldrb	r3, [r3, #25]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	e007      	b.n	80022f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7e9b      	ldrb	r3, [r3, #26]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d108      	bne.n	800230e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0220 	orr.w	r2, r2, #32
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e007      	b.n	800231e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0220 	bic.w	r2, r2, #32
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7edb      	ldrb	r3, [r3, #27]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d108      	bne.n	8002338 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0210 	bic.w	r2, r2, #16
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e007      	b.n	8002348 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0210 	orr.w	r2, r2, #16
 8002346:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7f1b      	ldrb	r3, [r3, #28]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d108      	bne.n	8002362 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0208 	orr.w	r2, r2, #8
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e007      	b.n	8002372 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0208 	bic.w	r2, r2, #8
 8002370:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	7f5b      	ldrb	r3, [r3, #29]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d108      	bne.n	800238c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0204 	orr.w	r2, r2, #4
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	e007      	b.n	800239c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0204 	bic.w	r2, r2, #4
 800239a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	ea42 0103 	orr.w	r1, r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	1e5a      	subs	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023f8:	4013      	ands	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002404:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800240c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240e:	4a04      	ldr	r2, [pc, #16]	@ (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	60d3      	str	r3, [r2, #12]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002428:	4b04      	ldr	r3, [pc, #16]	@ (800243c <__NVIC_GetPriorityGrouping+0x18>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	f003 0307 	and.w	r3, r3, #7
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	2b00      	cmp	r3, #0
 8002450:	db0b      	blt.n	800246a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	4907      	ldr	r1, [pc, #28]	@ (8002478 <__NVIC_EnableIRQ+0x38>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	2001      	movs	r0, #1
 8002462:	fa00 f202 	lsl.w	r2, r0, r2
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000e100 	.word	0xe000e100

0800247c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	db0a      	blt.n	80024a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	490c      	ldr	r1, [pc, #48]	@ (80024c8 <__NVIC_SetPriority+0x4c>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	0112      	lsls	r2, r2, #4
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	440b      	add	r3, r1
 80024a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a4:	e00a      	b.n	80024bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4908      	ldr	r1, [pc, #32]	@ (80024cc <__NVIC_SetPriority+0x50>)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	3b04      	subs	r3, #4
 80024b4:	0112      	lsls	r2, r2, #4
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	440b      	add	r3, r1
 80024ba:	761a      	strb	r2, [r3, #24]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000e100 	.word	0xe000e100
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	@ 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f1c3 0307 	rsb	r3, r3, #7
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	bf28      	it	cs
 80024ee:	2304      	movcs	r3, #4
 80024f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d902      	bls.n	8002500 <NVIC_EncodePriority+0x30>
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3b03      	subs	r3, #3
 80024fe:	e000      	b.n	8002502 <NVIC_EncodePriority+0x32>
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	f04f 32ff 	mov.w	r2, #4294967295
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	401a      	ands	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43d9      	mvns	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	4313      	orrs	r3, r2
         );
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	@ 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002548:	d301      	bcc.n	800254e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254a:	2301      	movs	r3, #1
 800254c:	e00f      	b.n	800256e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254e:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <SysTick_Config+0x40>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002556:	210f      	movs	r1, #15
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f7ff ff8e 	bl	800247c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002560:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <SysTick_Config+0x40>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002566:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <SysTick_Config+0x40>)
 8002568:	2207      	movs	r2, #7
 800256a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	e000e010 	.word	0xe000e010

0800257c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ff29 	bl	80023dc <__NVIC_SetPriorityGrouping>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a4:	f7ff ff3e 	bl	8002424 <__NVIC_GetPriorityGrouping>
 80025a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	6978      	ldr	r0, [r7, #20]
 80025b0:	f7ff ff8e 	bl	80024d0 <NVIC_EncodePriority>
 80025b4:	4602      	mov	r2, r0
 80025b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff5d 	bl	800247c <__NVIC_SetPriority>
}
 80025c2:	bf00      	nop
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff31 	bl	8002440 <__NVIC_EnableIRQ>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ffa2 	bl	8002538 <SysTick_Config>
 80025f4:	4603      	mov	r3, r0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e014      	b.n	800263a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	791b      	ldrb	r3, [r3, #4]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d105      	bne.n	8002626 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7fe fdfd 	bl	8001220 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2202      	movs	r2, #2
 800262a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002642:	b480      	push	{r7}
 8002644:	b089      	sub	sp, #36	@ 0x24
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <HAL_DAC_ConfigChannel+0x1c>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e042      	b.n	80026e8 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	795b      	ldrb	r3, [r3, #5]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_DAC_ConfigChannel+0x2c>
 800266a:	2302      	movs	r3, #2
 800266c:	e03c      	b.n	80026e8 <HAL_DAC_ConfigChannel+0xa6>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2202      	movs	r2, #2
 8002678:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	22c0      	movs	r2, #192	@ 0xc0
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43da      	mvns	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	400a      	ands	r2, r1
 80026d8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80026e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3724      	adds	r7, #36	@ 0x24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e08a      	b.n	800281c <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800270c:	2b00      	cmp	r3, #0
 800270e:	d106      	bne.n	800271e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2223      	movs	r2, #35	@ 0x23
 8002714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f004 f8b9 	bl	8006890 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b40      	ldr	r3, [pc, #256]	@ (8002824 <HAL_ETH_Init+0x130>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002726:	4a3f      	ldr	r2, [pc, #252]	@ (8002824 <HAL_ETH_Init+0x130>)
 8002728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800272c:	6453      	str	r3, [r2, #68]	@ 0x44
 800272e:	4b3d      	ldr	r3, [pc, #244]	@ (8002824 <HAL_ETH_Init+0x130>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800273a:	4b3b      	ldr	r3, [pc, #236]	@ (8002828 <HAL_ETH_Init+0x134>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4a3a      	ldr	r2, [pc, #232]	@ (8002828 <HAL_ETH_Init+0x134>)
 8002740:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002744:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002746:	4b38      	ldr	r3, [pc, #224]	@ (8002828 <HAL_ETH_Init+0x134>)
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	4936      	ldr	r1, [pc, #216]	@ (8002828 <HAL_ETH_Init+0x134>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002754:	4b34      	ldr	r3, [pc, #208]	@ (8002828 <HAL_ETH_Init+0x134>)
 8002756:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800276e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002770:	f7ff faa6 	bl	8001cc0 <HAL_GetTick>
 8002774:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002776:	e011      	b.n	800279c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002778:	f7ff faa2 	bl	8001cc0 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002786:	d909      	bls.n	800279c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2204      	movs	r2, #4
 800278c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	22e0      	movs	r2, #224	@ 0xe0
 8002794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e03f      	b.n	800281c <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1e4      	bne.n	8002778 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 ff32 	bl	8003618 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 ffdd 	bl	8003774 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f001 f833 	bl	8003826 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	461a      	mov	r2, r3
 80027c6:	2100      	movs	r1, #0
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 ff9b 	bl	8003704 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80027dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80027f2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002806:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2210      	movs	r2, #16
 8002816:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40023800 	.word	0x40023800
 8002828:	40013800 	.word	0x40013800

0800282c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800283a:	2b10      	cmp	r3, #16
 800283c:	d161      	bne.n	8002902 <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2223      	movs	r2, #35	@ 0x23
 8002842:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2204      	movs	r2, #4
 8002850:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fa2c 	bl	8002cb0 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002860:	2001      	movs	r0, #1
 8002862:	f7ff fa39 	bl	8001cd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002880:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002884:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800289c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fd56 	bl	8003350 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0208 	orr.w	r2, r2, #8
 80028b2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028bc:	2001      	movs	r0, #1
 80028be:	f7ff fa0b 	bl	8001cd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0204 	orr.w	r2, r2, #4
 80028d8:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80028ec:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80028f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028f4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2223      	movs	r2, #35	@ 0x23
 80028fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	e000      	b.n	8002904 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
  }
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800291a:	2b23      	cmp	r3, #35	@ 0x23
 800291c:	d170      	bne.n	8002a00 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2223      	movs	r2, #35	@ 0x23
 8002922:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8002938:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 800293c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002940:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002954:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002958:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	f023 0302 	bic.w	r3, r3, #2
 800296c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002970:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0204 	bic.w	r2, r2, #4
 8002980:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800298a:	2001      	movs	r0, #1
 800298c:	f7ff f9a4 	bl	8001cd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fcd9 	bl	8003350 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0208 	bic.w	r2, r2, #8
 80029ac:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7ff f98e 	bl	8001cd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	e00e      	b.n	80029e8 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	3212      	adds	r2, #18
 80029d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	3301      	adds	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d9ed      	bls.n	80029ca <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2210      	movs	r2, #16
 80029f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	e000      	b.n	8002a02 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
  }
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a22:	f043 0201 	orr.w	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e07c      	b.n	8002b2a <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a36:	2b23      	cmp	r3, #35	@ 0x23
 8002a38:	d176      	bne.n	8002b28 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 ff60 	bl	8003904 <ETH_Prepare_Tx_Descriptors>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a50:	f043 0202 	orr.w	r2, r3, #2
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e065      	b.n	8002b2a <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8002a5e:	f3bf 8f4f 	dsb	sy
}
 8002a62:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	3206      	adds	r2, #6
 8002a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a70:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d904      	bls.n	8002a8e <HAL_ETH_Transmit+0x84>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a88:	1f1a      	subs	r2, r3, #4
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3106      	adds	r1, #6
 8002a9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002aa2:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002aa4:	f7ff f90c 	bl	8001cc0 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002aaa:	e037      	b.n	8002b1c <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d011      	beq.n	8002ae2 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac4:	f043 0208 	orr.w	r2, r3, #8
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e023      	b.n	8002b2a <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae8:	d018      	beq.n	8002b1c <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002aea:	f7ff f8e9 	bl	8001cc0 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d302      	bcc.n	8002b00 <HAL_ETH_Transmit+0xf6>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10d      	bne.n	8002b1c <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b06:	f043 0204 	orr.w	r2, r3, #4
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002b16:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e006      	b.n	8002b2a <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	dbc3      	blt.n	8002aac <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	e000      	b.n	8002b2a <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
  }
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b088      	sub	sp, #32
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b50:	f043 0201 	orr.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0a4      	b.n	8002ca8 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b64:	2b23      	cmp	r3, #35	@ 0x23
 8002b66:	d001      	beq.n	8002b6c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e09d      	b.n	8002ca8 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b70:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	3212      	adds	r2, #18
 8002b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b7c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b82:	f1c3 0304 	rsb	r3, r3, #4
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002b88:	e066      	b.n	8002c58 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d007      	beq.n	8002ba6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <HAL_ETH_ReadData+0x88>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d03c      	beq.n	8002c34 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0c1b      	lsrs	r3, r3, #16
 8002bd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002bdc:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	f003 fff4 	bl	8006c00 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	441a      	add	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2200      	movs	r2, #0
 8002c32:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	3301      	adds	r3, #1
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d902      	bls.n	8002c46 <HAL_ETH_ReadData+0x114>
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	3b04      	subs	r3, #4
 8002c44:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	3212      	adds	r2, #18
 8002c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c50:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	3301      	adds	r3, #1
 8002c56:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	db06      	blt.n	8002c6e <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d202      	bcs.n	8002c6e <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d08d      	beq.n	8002b8a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	441a      	add	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f814 	bl	8002cb0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002c8e:	7cfb      	ldrb	r3, [r7, #19]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d108      	bne.n	8002ca6 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e000      	b.n	8002ca8 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cc4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	3212      	adds	r2, #18
 8002ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cd6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002cd8:	e044      	b.n	8002d64 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d112      	bne.n	8002d08 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002ce2:	f107 0308 	add.w	r3, r7, #8
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f003 ff5a 	bl	8006ba0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	74fb      	strb	r3, [r7, #19]
 8002cf6:	e007      	b.n	8002d08 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	461a      	mov	r2, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002d08:	7cfb      	ldrb	r3, [r7, #19]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d02a      	beq.n	8002d64 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d108      	bne.n	8002d28 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	6053      	str	r3, [r2, #4]
 8002d26:	e005      	b.n	8002d34 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	3301      	adds	r3, #1
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d902      	bls.n	8002d52 <ETH_UpdateDescriptor+0xa2>
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	3b04      	subs	r3, #4
 8002d50:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	3212      	adds	r2, #18
 8002d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5c:	617b      	str	r3, [r7, #20]
      desccount--;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <ETH_UpdateDescriptor+0xc0>
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1b4      	bne.n	8002cda <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d01a      	beq.n	8002db0 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d84:	f3bf 8f5f 	dmb	sy
}
 8002d88:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6919      	ldr	r1, [r3, #16]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	18ca      	adds	r2, r1, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002da2:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002db0:	bf00      	nop
 8002db2:	3720      	adds	r7, #32
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc6:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002de0:	4b4b      	ldr	r3, [pc, #300]	@ (8002f10 <HAL_ETH_IRQHandler+0x158>)
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00e      	beq.n	8002e0e <HAL_ETH_IRQHandler+0x56>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b43      	ldr	r3, [pc, #268]	@ (8002f14 <HAL_ETH_IRQHandler+0x15c>)
 8002e06:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f891 	bl	8002f30 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00f      	beq.n	8002e38 <HAL_ETH_IRQHandler+0x80>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002e30:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f872 	bl	8002f1c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d042      	beq.n	8002ec8 <HAL_ETH_IRQHandler+0x110>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d03d      	beq.n	8002ec8 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e52:	f043 0208 	orr.w	r2, r3, #8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01a      	beq.n	8002e9c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	4b29      	ldr	r3, [pc, #164]	@ (8002f18 <HAL_ETH_IRQHandler+0x160>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002e8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e90:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	22e0      	movs	r2, #224	@ 0xe0
 8002e96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002e9a:	e012      	b.n	8002ec2 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002eaa:	4013      	ands	r3, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002ec0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f83e 	bl	8002f44 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f838 	bl	8002f58 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002efa:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <HAL_ETH_IRQHandler+0x158>)
 8002efc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002f00:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f832 	bl	8002f6c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40013c00 	.word	0x40013c00
 8002f14:	00010040 	.word	0x00010040
 8002f18:	007e2000 	.word	0x007e2000

08002f1c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f003 031c 	and.w	r3, r3, #28
 8002f9c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	02db      	lsls	r3, r3, #11
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	019b      	lsls	r3, r3, #6
 8002fae:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f023 0302 	bic.w	r3, r3, #2
 8002fbe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002fd0:	f7fe fe76 	bl	8001cc0 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002fd6:	e00d      	b.n	8002ff4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002fd8:	f7fe fe72 	bl	8001cc0 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe6:	d301      	bcc.n	8002fec <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e010      	b.n	800300e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1ec      	bne.n	8002fd8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	b29b      	uxth	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f003 031c 	and.w	r3, r3, #28
 8003032:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	02db      	lsls	r3, r3, #11
 8003038:	b29b      	uxth	r3, r3
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	019b      	lsls	r3, r3, #6
 8003044:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003070:	f7fe fe26 	bl	8001cc0 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003076:	e00d      	b.n	8003094 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003078:	f7fe fe22 	bl	8001cc0 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003086:	d301      	bcc.n	800308c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e009      	b.n	80030a0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1ec      	bne.n	8003078 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0e6      	b.n	800328a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	bf14      	ite	ne
 80030ca:	2301      	movne	r3, #1
 80030cc:	2300      	moveq	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003126:	2b00      	cmp	r3, #0
 8003128:	bf0c      	ite	eq
 800312a:	2301      	moveq	r3, #1
 800312c:	2300      	movne	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	461a      	mov	r2, r3
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	461a      	mov	r2, r3
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	bf0c      	ite	eq
 800317a:	2301      	moveq	r3, #1
 800317c:	2300      	movne	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf14      	ite	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	2300      	moveq	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bf14      	ite	ne
 80031d6:	2301      	movne	r3, #1
 80031d8:	2300      	moveq	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf14      	ite	ne
 80031f0:	2301      	movne	r3, #1
 80031f2:	2300      	moveq	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	bf14      	ite	ne
 800320a:	2301      	movne	r3, #1
 800320c:	2300      	moveq	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf0c      	ite	eq
 8003226:	2301      	moveq	r3, #1
 8003228:	2300      	movne	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	461a      	mov	r2, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	b29a      	uxth	r2, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e00b      	b.n	80032c2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d105      	bne.n	80032c0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80032b4:	6839      	ldr	r1, [r7, #0]
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f870 	bl	800339c <ETH_SetMACConfig>

    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 031c 	bic.w	r3, r3, #28
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80032e4:	f001 fcc4 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 80032e8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4a14      	ldr	r2, [pc, #80]	@ (8003340 <HAL_ETH_SetMDIOClockRange+0x74>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d804      	bhi.n	80032fc <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f043 0308 	orr.w	r3, r3, #8
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	e019      	b.n	8003330 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4a11      	ldr	r2, [pc, #68]	@ (8003344 <HAL_ETH_SetMDIOClockRange+0x78>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d204      	bcs.n	800330e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f043 030c 	orr.w	r3, r3, #12
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	e010      	b.n	8003330 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4a0d      	ldr	r2, [pc, #52]	@ (8003348 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d90c      	bls.n	8003330 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	4a0c      	ldr	r2, [pc, #48]	@ (800334c <HAL_ETH_SetMDIOClockRange+0x80>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d804      	bhi.n	8003328 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f043 0304 	orr.w	r3, r3, #4
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	e003      	b.n	8003330 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f043 0310 	orr.w	r3, r3, #16
 800332e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	611a      	str	r2, [r3, #16]
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	02160ebf 	.word	0x02160ebf
 8003344:	03938700 	.word	0x03938700
 8003348:	05f5e0ff 	.word	0x05f5e0ff
 800334c:	08f0d17f 	.word	0x08f0d17f

08003350 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800336e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003372:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003380:	2001      	movs	r0, #1
 8003382:	f7fe fca9 	bl	8001cd8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003390:	6193      	str	r3, [r2, #24]
}
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4b53      	ldr	r3, [pc, #332]	@ (8003500 <ETH_SetMACConfig+0x164>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	7b9b      	ldrb	r3, [r3, #14]
 80033ba:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	7c12      	ldrb	r2, [r2, #16]
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	d102      	bne.n	80033ca <ETH_SetMACConfig+0x2e>
 80033c4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80033c8:	e000      	b.n	80033cc <ETH_SetMACConfig+0x30>
 80033ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80033cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	7c52      	ldrb	r2, [r2, #17]
 80033d2:	2a00      	cmp	r2, #0
 80033d4:	d102      	bne.n	80033dc <ETH_SetMACConfig+0x40>
 80033d6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80033da:	e000      	b.n	80033de <ETH_SetMACConfig+0x42>
 80033dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80033e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	7fdb      	ldrb	r3, [r3, #31]
 80033ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80033ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80033f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	7f92      	ldrb	r2, [r2, #30]
 80033f8:	2a00      	cmp	r2, #0
 80033fa:	d102      	bne.n	8003402 <ETH_SetMACConfig+0x66>
 80033fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003400:	e000      	b.n	8003404 <ETH_SetMACConfig+0x68>
 8003402:	2200      	movs	r2, #0
                        macconf->Speed |
 8003404:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	7f1b      	ldrb	r3, [r3, #28]
 800340a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800340c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003412:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	791b      	ldrb	r3, [r3, #4]
 8003418:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800341a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003422:	2a00      	cmp	r2, #0
 8003424:	d102      	bne.n	800342c <ETH_SetMACConfig+0x90>
 8003426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800342a:	e000      	b.n	800342e <ETH_SetMACConfig+0x92>
 800342c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800342e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	7bdb      	ldrb	r3, [r3, #15]
 8003434:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003436:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800343c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003444:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003446:	4313      	orrs	r3, r2
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800345e:	2001      	movs	r0, #1
 8003460:	f7fe fc3a 	bl	8001cd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800347a:	4013      	ands	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003482:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800348a:	2a00      	cmp	r2, #0
 800348c:	d101      	bne.n	8003492 <ETH_SetMACConfig+0xf6>
 800348e:	2280      	movs	r2, #128	@ 0x80
 8003490:	e000      	b.n	8003494 <ETH_SetMACConfig+0xf8>
 8003492:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003494:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800349a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80034a2:	2a01      	cmp	r2, #1
 80034a4:	d101      	bne.n	80034aa <ETH_SetMACConfig+0x10e>
 80034a6:	2208      	movs	r2, #8
 80034a8:	e000      	b.n	80034ac <ETH_SetMACConfig+0x110>
 80034aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80034ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80034b4:	2a01      	cmp	r2, #1
 80034b6:	d101      	bne.n	80034bc <ETH_SetMACConfig+0x120>
 80034b8:	2204      	movs	r2, #4
 80034ba:	e000      	b.n	80034be <ETH_SetMACConfig+0x122>
 80034bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80034be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80034c6:	2a01      	cmp	r2, #1
 80034c8:	d101      	bne.n	80034ce <ETH_SetMACConfig+0x132>
 80034ca:	2202      	movs	r2, #2
 80034cc:	e000      	b.n	80034d0 <ETH_SetMACConfig+0x134>
 80034ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80034d0:	4313      	orrs	r3, r2
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034e8:	2001      	movs	r0, #1
 80034ea:	f7fe fbf5 	bl	8001cd8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	619a      	str	r2, [r3, #24]
}
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	fd20810f 	.word	0xfd20810f

08003504 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4b3d      	ldr	r3, [pc, #244]	@ (8003614 <ETH_SetDMAConfig+0x110>)
 800351e:	4013      	ands	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	7b1b      	ldrb	r3, [r3, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d102      	bne.n	8003530 <ETH_SetDMAConfig+0x2c>
 800352a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800352e:	e000      	b.n	8003532 <ETH_SetDMAConfig+0x2e>
 8003530:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	7b5b      	ldrb	r3, [r3, #13]
 8003536:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003538:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	7f52      	ldrb	r2, [r2, #29]
 800353e:	2a00      	cmp	r2, #0
 8003540:	d102      	bne.n	8003548 <ETH_SetDMAConfig+0x44>
 8003542:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003546:	e000      	b.n	800354a <ETH_SetDMAConfig+0x46>
 8003548:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800354a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	7b9b      	ldrb	r3, [r3, #14]
 8003550:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003552:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003558:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	7f1b      	ldrb	r3, [r3, #28]
 800355e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003560:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	7f9b      	ldrb	r3, [r3, #30]
 8003566:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003568:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800356e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003576:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003578:	4313      	orrs	r3, r2
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003588:	461a      	mov	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800359a:	2001      	movs	r0, #1
 800359c:	f7fe fb9c 	bl	8001cd8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035a8:	461a      	mov	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	791b      	ldrb	r3, [r3, #4]
 80035b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80035be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80035c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80035ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80035d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035f8:	2001      	movs	r0, #1
 80035fa:	f7fe fb6d 	bl	8001cd8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6013      	str	r3, [r2, #0]
}
 800360c:	bf00      	nop
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	f8de3f23 	.word	0xf8de3f23

08003618 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b0a6      	sub	sp, #152	@ 0x98
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800362c:	2300      	movs	r3, #0
 800362e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003636:	2301      	movs	r3, #1
 8003638:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800363c:	2300      	movs	r3, #0
 800363e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003642:	2301      	movs	r3, #1
 8003644:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800364e:	2300      	movs	r3, #0
 8003650:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003654:	2300      	movs	r3, #0
 8003656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800365a:	2300      	movs	r3, #0
 800365c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800365e:	2300      	movs	r3, #0
 8003660:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003664:	2300      	movs	r3, #0
 8003666:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003674:	2300      	movs	r3, #0
 8003676:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800367a:	2300      	movs	r3, #0
 800367c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003680:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003684:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003686:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800368a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800368c:	2300      	movs	r3, #0
 800368e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003692:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003696:	4619      	mov	r1, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff fe7f 	bl	800339c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800369e:	2301      	movs	r3, #1
 80036a0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80036a2:	2301      	movs	r3, #1
 80036a4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80036c0:	2300      	movs	r3, #0
 80036c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80036ca:	2301      	movs	r3, #1
 80036cc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80036ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036d2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80036d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80036d8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80036da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036de:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80036ee:	f107 0308 	add.w	r3, r7, #8
 80036f2:	4619      	mov	r1, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ff05 	bl	8003504 <ETH_SetDMAConfig>
}
 80036fa:	bf00      	nop
 80036fc:	3798      	adds	r7, #152	@ 0x98
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3305      	adds	r3, #5
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	3204      	adds	r2, #4
 800371c:	7812      	ldrb	r2, [r2, #0]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	4b11      	ldr	r3, [pc, #68]	@ (800376c <ETH_MACAddressConfig+0x68>)
 8003726:	4413      	add	r3, r2
 8003728:	461a      	mov	r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3303      	adds	r3, #3
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	061a      	lsls	r2, r3, #24
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3302      	adds	r3, #2
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	041b      	lsls	r3, r3, #16
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3301      	adds	r3, #1
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	4313      	orrs	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	7812      	ldrb	r2, [r2, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <ETH_MACAddressConfig+0x6c>)
 8003756:	4413      	add	r3, r2
 8003758:	461a      	mov	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	6013      	str	r3, [r2, #0]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40028040 	.word	0x40028040
 8003770:	40028044 	.word	0x40028044

08003774 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e03e      	b.n	8003800 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68d9      	ldr	r1, [r3, #12]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	440b      	add	r3, r1
 8003792:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2200      	movs	r2, #0
 800379e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2200      	movs	r2, #0
 80037a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2200      	movs	r2, #0
 80037aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	3206      	adds	r2, #6
 80037b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d80c      	bhi.n	80037e4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68d9      	ldr	r1, [r3, #12]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	440b      	add	r3, r1
 80037dc:	461a      	mov	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	e004      	b.n	80037ee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	461a      	mov	r2, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3301      	adds	r3, #1
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d9bd      	bls.n	8003782 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003818:	611a      	str	r2, [r3, #16]
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	e048      	b.n	80038c6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6919      	ldr	r1, [r3, #16]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	440b      	add	r3, r1
 8003844:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2200      	movs	r2, #0
 8003850:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2200      	movs	r2, #0
 8003856:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2200      	movs	r2, #0
 800385c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2200      	movs	r2, #0
 8003862:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2200      	movs	r2, #0
 8003868:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003870:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	3212      	adds	r2, #18
 8003892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d80c      	bhi.n	80038b6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6919      	ldr	r1, [r3, #16]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	440b      	add	r3, r1
 80038ae:	461a      	mov	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	60da      	str	r2, [r3, #12]
 80038b4:	e004      	b.n	80038c0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	461a      	mov	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3301      	adds	r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d9b3      	bls.n	8003834 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038f6:	60da      	str	r2, [r3, #12]
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003904:	b480      	push	{r7}
 8003906:	b091      	sub	sp, #68	@ 0x44
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	3318      	adds	r3, #24
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800392a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800392e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003936:	2300      	movs	r3, #0
 8003938:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800393a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003942:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003946:	d007      	beq.n	8003958 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800394a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800394c:	3304      	adds	r3, #4
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003958:	2302      	movs	r3, #2
 800395a:	e115      	b.n	8003b88 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 800395c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395e:	3301      	adds	r3, #1
 8003960:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800396c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003974:	f023 031f 	bic.w	r3, r3, #31
 8003978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800397a:	6852      	ldr	r2, [r2, #4]
 800397c:	431a      	orrs	r2, r3
 800397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003980:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d008      	beq.n	80039a0 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800398e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	431a      	orrs	r2, r3
 800399c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80039ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039bc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80039ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80039d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80039de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e0:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80039e2:	e084      	b.n	8003aee <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80039e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d006      	beq.n	8003a04 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80039f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80039fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e005      	b.n	8003a10 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a12:	3301      	adds	r3, #1
 8003a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d902      	bls.n	8003a22 <ETH_Prepare_Tx_Descriptors+0x11e>
 8003a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a1e:	3b04      	subs	r3, #4
 8003a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a2a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a38:	d007      	beq.n	8003a4a <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a3e:	3304      	adds	r3, #4
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d029      	beq.n	8003a9e <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a56:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003a58:	2300      	movs	r3, #0
 8003a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a5c:	e019      	b.n	8003a92 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8003a5e:	f3bf 8f5f 	dmb	sy
}
 8003a62:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a72:	3301      	adds	r3, #1
 8003a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d902      	bls.n	8003a82 <ETH_Prepare_Tx_Descriptors+0x17e>
 8003a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a7e:	3b04      	subs	r3, #4
 8003a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a8a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8e:	3301      	adds	r3, #1
 8003a90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d3e1      	bcc.n	8003a5e <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e074      	b.n	8003b88 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa8:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aac:	3301      	adds	r3, #1
 8003aae:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003abe:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003ac8:	f023 031f 	bic.w	r3, r3, #31
 8003acc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ace:	6852      	ldr	r2, [r2, #4]
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad4:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad8:	3301      	adds	r3, #1
 8003ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003adc:	f3bf 8f5f 	dmb	sy
}
 8003ae0:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aec:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f47f af76 	bne.w	80039e4 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d006      	beq.n	8003b0c <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	e005      	b.n	8003b18 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b16:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b22:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	6a3a      	ldr	r2, [r7, #32]
 8003b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003b2e:	f3bf 8f5f 	dmb	sy
}
 8003b32:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b48:	3304      	adds	r3, #4
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b54:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b56:	f3ef 8310 	mrs	r3, PRIMASK
 8003b5a:	613b      	str	r3, [r7, #16]
  return(result);
 8003b5c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	2301      	movs	r3, #1
 8003b62:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f383 8810 	msr	PRIMASK, r3
}
 8003b6a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b72:	4413      	add	r3, r2
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f383 8810 	msr	PRIMASK, r3
}
 8003b84:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3744      	adds	r7, #68	@ 0x44
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b089      	sub	sp, #36	@ 0x24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	e16b      	b.n	8003e88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	f040 815a 	bne.w	8003e82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d005      	beq.n	8003be6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d130      	bne.n	8003c48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 0201 	and.w	r2, r3, #1
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d017      	beq.n	8003c84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	2203      	movs	r2, #3
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 0303 	and.w	r3, r3, #3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d123      	bne.n	8003cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	08da      	lsrs	r2, r3, #3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3208      	adds	r2, #8
 8003c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	220f      	movs	r2, #15
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	08da      	lsrs	r2, r3, #3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3208      	adds	r2, #8
 8003cd2:	69b9      	ldr	r1, [r7, #24]
 8003cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 0203 	and.w	r2, r3, #3
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80b4 	beq.w	8003e82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	4b60      	ldr	r3, [pc, #384]	@ (8003ea0 <HAL_GPIO_Init+0x30c>)
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	4a5f      	ldr	r2, [pc, #380]	@ (8003ea0 <HAL_GPIO_Init+0x30c>)
 8003d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d2a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ea0 <HAL_GPIO_Init+0x30c>)
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d36:	4a5b      	ldr	r2, [pc, #364]	@ (8003ea4 <HAL_GPIO_Init+0x310>)
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	220f      	movs	r2, #15
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4013      	ands	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a52      	ldr	r2, [pc, #328]	@ (8003ea8 <HAL_GPIO_Init+0x314>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02b      	beq.n	8003dba <HAL_GPIO_Init+0x226>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a51      	ldr	r2, [pc, #324]	@ (8003eac <HAL_GPIO_Init+0x318>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d025      	beq.n	8003db6 <HAL_GPIO_Init+0x222>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a50      	ldr	r2, [pc, #320]	@ (8003eb0 <HAL_GPIO_Init+0x31c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01f      	beq.n	8003db2 <HAL_GPIO_Init+0x21e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a4f      	ldr	r2, [pc, #316]	@ (8003eb4 <HAL_GPIO_Init+0x320>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d019      	beq.n	8003dae <HAL_GPIO_Init+0x21a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a4e      	ldr	r2, [pc, #312]	@ (8003eb8 <HAL_GPIO_Init+0x324>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <HAL_GPIO_Init+0x216>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a4d      	ldr	r2, [pc, #308]	@ (8003ebc <HAL_GPIO_Init+0x328>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00d      	beq.n	8003da6 <HAL_GPIO_Init+0x212>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a4c      	ldr	r2, [pc, #304]	@ (8003ec0 <HAL_GPIO_Init+0x32c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d007      	beq.n	8003da2 <HAL_GPIO_Init+0x20e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4b      	ldr	r2, [pc, #300]	@ (8003ec4 <HAL_GPIO_Init+0x330>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d101      	bne.n	8003d9e <HAL_GPIO_Init+0x20a>
 8003d9a:	2307      	movs	r3, #7
 8003d9c:	e00e      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	e00c      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003da2:	2306      	movs	r3, #6
 8003da4:	e00a      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003da6:	2305      	movs	r3, #5
 8003da8:	e008      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003daa:	2304      	movs	r3, #4
 8003dac:	e006      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003dae:	2303      	movs	r3, #3
 8003db0:	e004      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e002      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	f002 0203 	and.w	r2, r2, #3
 8003dc2:	0092      	lsls	r2, r2, #2
 8003dc4:	4093      	lsls	r3, r2
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dcc:	4935      	ldr	r1, [pc, #212]	@ (8003ea4 <HAL_GPIO_Init+0x310>)
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	089b      	lsrs	r3, r3, #2
 8003dd2:	3302      	adds	r3, #2
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dda:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dfe:	4a32      	ldr	r2, [pc, #200]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e04:	4b30      	ldr	r3, [pc, #192]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e28:	4a27      	ldr	r2, [pc, #156]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e2e:	4b26      	ldr	r3, [pc, #152]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e52:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e58:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e7c:	4a12      	ldr	r2, [pc, #72]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3301      	adds	r3, #1
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	2b0f      	cmp	r3, #15
 8003e8c:	f67f ae90 	bls.w	8003bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	3724      	adds	r7, #36	@ 0x24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40013800 	.word	0x40013800
 8003ea8:	40020000 	.word	0x40020000
 8003eac:	40020400 	.word	0x40020400
 8003eb0:	40020800 	.word	0x40020800
 8003eb4:	40020c00 	.word	0x40020c00
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40021400 	.word	0x40021400
 8003ec0:	40021800 	.word	0x40021800
 8003ec4:	40021c00 	.word	0x40021c00
 8003ec8:	40013c00 	.word	0x40013c00

08003ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	807b      	strh	r3, [r7, #2]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003edc:	787b      	ldrb	r3, [r7, #1]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ee2:	887a      	ldrh	r2, [r7, #2]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ee8:	e003      	b.n	8003ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003eea:	887b      	ldrh	r3, [r7, #2]
 8003eec:	041a      	lsls	r2, r3, #16
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	619a      	str	r2, [r3, #24]
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e12b      	b.n	800416a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fd f9be 	bl	80012a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2224      	movs	r2, #36	@ 0x24
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f64:	f000 fe90 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 8003f68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4a81      	ldr	r2, [pc, #516]	@ (8004174 <HAL_I2C_Init+0x274>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d807      	bhi.n	8003f84 <HAL_I2C_Init+0x84>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4a80      	ldr	r2, [pc, #512]	@ (8004178 <HAL_I2C_Init+0x278>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	bf94      	ite	ls
 8003f7c:	2301      	movls	r3, #1
 8003f7e:	2300      	movhi	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	e006      	b.n	8003f92 <HAL_I2C_Init+0x92>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4a7d      	ldr	r2, [pc, #500]	@ (800417c <HAL_I2C_Init+0x27c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	bf94      	ite	ls
 8003f8c:	2301      	movls	r3, #1
 8003f8e:	2300      	movhi	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e0e7      	b.n	800416a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a78      	ldr	r2, [pc, #480]	@ (8004180 <HAL_I2C_Init+0x280>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	0c9b      	lsrs	r3, r3, #18
 8003fa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4a6a      	ldr	r2, [pc, #424]	@ (8004174 <HAL_I2C_Init+0x274>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d802      	bhi.n	8003fd4 <HAL_I2C_Init+0xd4>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	e009      	b.n	8003fe8 <HAL_I2C_Init+0xe8>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003fda:	fb02 f303 	mul.w	r3, r2, r3
 8003fde:	4a69      	ldr	r2, [pc, #420]	@ (8004184 <HAL_I2C_Init+0x284>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	099b      	lsrs	r3, r3, #6
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	430b      	orrs	r3, r1
 8003fee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ffa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	495c      	ldr	r1, [pc, #368]	@ (8004174 <HAL_I2C_Init+0x274>)
 8004004:	428b      	cmp	r3, r1
 8004006:	d819      	bhi.n	800403c <HAL_I2C_Init+0x13c>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	1e59      	subs	r1, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	fbb1 f3f3 	udiv	r3, r1, r3
 8004016:	1c59      	adds	r1, r3, #1
 8004018:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800401c:	400b      	ands	r3, r1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_I2C_Init+0x138>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1e59      	subs	r1, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004030:	3301      	adds	r3, #1
 8004032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004036:	e051      	b.n	80040dc <HAL_I2C_Init+0x1dc>
 8004038:	2304      	movs	r3, #4
 800403a:	e04f      	b.n	80040dc <HAL_I2C_Init+0x1dc>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d111      	bne.n	8004068 <HAL_I2C_Init+0x168>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1e58      	subs	r0, r3, #1
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	440b      	add	r3, r1
 8004052:	fbb0 f3f3 	udiv	r3, r0, r3
 8004056:	3301      	adds	r3, #1
 8004058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405c:	2b00      	cmp	r3, #0
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e012      	b.n	800408e <HAL_I2C_Init+0x18e>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	1e58      	subs	r0, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6859      	ldr	r1, [r3, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	0099      	lsls	r1, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	fbb0 f3f3 	udiv	r3, r0, r3
 800407e:	3301      	adds	r3, #1
 8004080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004084:	2b00      	cmp	r3, #0
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_Init+0x196>
 8004092:	2301      	movs	r3, #1
 8004094:	e022      	b.n	80040dc <HAL_I2C_Init+0x1dc>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10e      	bne.n	80040bc <HAL_I2C_Init+0x1bc>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1e58      	subs	r0, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6859      	ldr	r1, [r3, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	440b      	add	r3, r1
 80040ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b0:	3301      	adds	r3, #1
 80040b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040ba:	e00f      	b.n	80040dc <HAL_I2C_Init+0x1dc>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1e58      	subs	r0, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	0099      	lsls	r1, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d2:	3301      	adds	r3, #1
 80040d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	6809      	ldr	r1, [r1, #0]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69da      	ldr	r2, [r3, #28]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800410a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6911      	ldr	r1, [r2, #16]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68d2      	ldr	r2, [r2, #12]
 8004116:	4311      	orrs	r1, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	430b      	orrs	r3, r1
 800411e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	000186a0 	.word	0x000186a0
 8004178:	001e847f 	.word	0x001e847f
 800417c:	003d08ff 	.word	0x003d08ff
 8004180:	431bde83 	.word	0x431bde83
 8004184:	10624dd3 	.word	0x10624dd3

08004188 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af02      	add	r7, sp, #8
 800418e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e101      	b.n	800439e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7fd fa8b 	bl	80016d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2203      	movs	r2, #3
 80041be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041c8:	d102      	bne.n	80041d0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f001 fdbb 	bl	8005d50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	7c1a      	ldrb	r2, [r3, #16]
 80041e2:	f88d 2000 	strb.w	r2, [sp]
 80041e6:	3304      	adds	r3, #4
 80041e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041ea:	f001 fd4d 	bl	8005c88 <USB_CoreInit>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0ce      	b.n	800439e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f001 fdb3 	bl	8005d72 <USB_SetCurrentMode>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2202      	movs	r2, #2
 8004216:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e0bf      	b.n	800439e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]
 8004222:	e04a      	b.n	80042ba <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004224:	7bfa      	ldrb	r2, [r7, #15]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	3315      	adds	r3, #21
 8004234:	2201      	movs	r2, #1
 8004236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	3314      	adds	r3, #20
 8004248:	7bfa      	ldrb	r2, [r7, #15]
 800424a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800424c:	7bfa      	ldrb	r2, [r7, #15]
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	b298      	uxth	r0, r3
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	332e      	adds	r3, #46	@ 0x2e
 8004260:	4602      	mov	r2, r0
 8004262:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	3318      	adds	r3, #24
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	331c      	adds	r3, #28
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800428c:	7bfa      	ldrb	r2, [r7, #15]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	3320      	adds	r3, #32
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042a0:	7bfa      	ldrb	r2, [r7, #15]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	3324      	adds	r3, #36	@ 0x24
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	3301      	adds	r3, #1
 80042b8:	73fb      	strb	r3, [r7, #15]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	791b      	ldrb	r3, [r3, #4]
 80042be:	7bfa      	ldrb	r2, [r7, #15]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d3af      	bcc.n	8004224 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042c4:	2300      	movs	r3, #0
 80042c6:	73fb      	strb	r3, [r7, #15]
 80042c8:	e044      	b.n	8004354 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80042f2:	7bfa      	ldrb	r2, [r7, #15]
 80042f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004338:	7bfa      	ldrb	r2, [r7, #15]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	3301      	adds	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	791b      	ldrb	r3, [r3, #4]
 8004358:	7bfa      	ldrb	r2, [r7, #15]
 800435a:	429a      	cmp	r2, r3
 800435c:	d3b5      	bcc.n	80042ca <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	7c1a      	ldrb	r2, [r3, #16]
 8004366:	f88d 2000 	strb.w	r2, [sp]
 800436a:	3304      	adds	r3, #4
 800436c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800436e:	f001 fd4d 	bl	8005e0c <USB_DevInit>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e00c      	b.n	800439e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f001 ff15 	bl	80061c6 <USB_DevDisconnect>

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e267      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d075      	beq.n	80044b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043c6:	4b88      	ldr	r3, [pc, #544]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d00c      	beq.n	80043ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d2:	4b85      	ldr	r3, [pc, #532]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d112      	bne.n	8004404 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043de:	4b82      	ldr	r3, [pc, #520]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043ea:	d10b      	bne.n	8004404 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	4b7e      	ldr	r3, [pc, #504]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d05b      	beq.n	80044b0 <HAL_RCC_OscConfig+0x108>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d157      	bne.n	80044b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e242      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800440c:	d106      	bne.n	800441c <HAL_RCC_OscConfig+0x74>
 800440e:	4b76      	ldr	r3, [pc, #472]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a75      	ldr	r2, [pc, #468]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e01d      	b.n	8004458 <HAL_RCC_OscConfig+0xb0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0x98>
 8004426:	4b70      	ldr	r3, [pc, #448]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a6f      	ldr	r2, [pc, #444]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 800442c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b6d      	ldr	r3, [pc, #436]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a6c      	ldr	r2, [pc, #432]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e00b      	b.n	8004458 <HAL_RCC_OscConfig+0xb0>
 8004440:	4b69      	ldr	r3, [pc, #420]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a68      	ldr	r2, [pc, #416]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b66      	ldr	r3, [pc, #408]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a65      	ldr	r2, [pc, #404]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fd fc2e 	bl	8001cc0 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004468:	f7fd fc2a 	bl	8001cc0 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	@ 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e207      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	4b5b      	ldr	r3, [pc, #364]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0xc0>
 8004486:	e014      	b.n	80044b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fd fc1a 	bl	8001cc0 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004490:	f7fd fc16 	bl	8001cc0 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	@ 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1f3      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a2:	4b51      	ldr	r3, [pc, #324]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0xe8>
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d063      	beq.n	8004586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044be:	4b4a      	ldr	r3, [pc, #296]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00b      	beq.n	80044e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ca:	4b47      	ldr	r3, [pc, #284]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d11c      	bne.n	8004510 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d6:	4b44      	ldr	r3, [pc, #272]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d116      	bne.n	8004510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e2:	4b41      	ldr	r3, [pc, #260]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_RCC_OscConfig+0x152>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e1c7      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fa:	4b3b      	ldr	r3, [pc, #236]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4937      	ldr	r1, [pc, #220]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450e:	e03a      	b.n	8004586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d020      	beq.n	800455a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004518:	4b34      	ldr	r3, [pc, #208]	@ (80045ec <HAL_RCC_OscConfig+0x244>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fd fbcf 	bl	8001cc0 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004526:	f7fd fbcb 	bl	8001cc0 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e1a8      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004538:	4b2b      	ldr	r3, [pc, #172]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004544:	4b28      	ldr	r3, [pc, #160]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4925      	ldr	r1, [pc, #148]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
 8004558:	e015      	b.n	8004586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455a:	4b24      	ldr	r3, [pc, #144]	@ (80045ec <HAL_RCC_OscConfig+0x244>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fd fbae 	bl	8001cc0 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004568:	f7fd fbaa 	bl	8001cc0 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e187      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457a:	4b1b      	ldr	r3, [pc, #108]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d036      	beq.n	8004600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d016      	beq.n	80045c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459a:	4b15      	ldr	r3, [pc, #84]	@ (80045f0 <HAL_RCC_OscConfig+0x248>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fd fb8e 	bl	8001cc0 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a8:	f7fd fb8a 	bl	8001cc0 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e167      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ba:	4b0b      	ldr	r3, [pc, #44]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80045bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0x200>
 80045c6:	e01b      	b.n	8004600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c8:	4b09      	ldr	r3, [pc, #36]	@ (80045f0 <HAL_RCC_OscConfig+0x248>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fd fb77 	bl	8001cc0 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d4:	e00e      	b.n	80045f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d6:	f7fd fb73 	bl	8001cc0 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d907      	bls.n	80045f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e150      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
 80045e8:	40023800 	.word	0x40023800
 80045ec:	42470000 	.word	0x42470000
 80045f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f4:	4b88      	ldr	r3, [pc, #544]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80045f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1ea      	bne.n	80045d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8097 	beq.w	800473c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460e:	2300      	movs	r3, #0
 8004610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004612:	4b81      	ldr	r3, [pc, #516]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10f      	bne.n	800463e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	4b7d      	ldr	r3, [pc, #500]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004626:	4a7c      	ldr	r2, [pc, #496]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800462c:	6413      	str	r3, [r2, #64]	@ 0x40
 800462e:	4b7a      	ldr	r3, [pc, #488]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463e:	4b77      	ldr	r3, [pc, #476]	@ (800481c <HAL_RCC_OscConfig+0x474>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d118      	bne.n	800467c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800464a:	4b74      	ldr	r3, [pc, #464]	@ (800481c <HAL_RCC_OscConfig+0x474>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a73      	ldr	r2, [pc, #460]	@ (800481c <HAL_RCC_OscConfig+0x474>)
 8004650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004656:	f7fd fb33 	bl	8001cc0 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465e:	f7fd fb2f 	bl	8001cc0 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e10c      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004670:	4b6a      	ldr	r3, [pc, #424]	@ (800481c <HAL_RCC_OscConfig+0x474>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d106      	bne.n	8004692 <HAL_RCC_OscConfig+0x2ea>
 8004684:	4b64      	ldr	r3, [pc, #400]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004688:	4a63      	ldr	r2, [pc, #396]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004690:	e01c      	b.n	80046cc <HAL_RCC_OscConfig+0x324>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b05      	cmp	r3, #5
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x30c>
 800469a:	4b5f      	ldr	r3, [pc, #380]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469e:	4a5e      	ldr	r2, [pc, #376]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046a0:	f043 0304 	orr.w	r3, r3, #4
 80046a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046a6:	4b5c      	ldr	r3, [pc, #368]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80046b2:	e00b      	b.n	80046cc <HAL_RCC_OscConfig+0x324>
 80046b4:	4b58      	ldr	r3, [pc, #352]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b8:	4a57      	ldr	r2, [pc, #348]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	6713      	str	r3, [r2, #112]	@ 0x70
 80046c0:	4b55      	ldr	r3, [pc, #340]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c4:	4a54      	ldr	r2, [pc, #336]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046c6:	f023 0304 	bic.w	r3, r3, #4
 80046ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d015      	beq.n	8004700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d4:	f7fd faf4 	bl	8001cc0 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046da:	e00a      	b.n	80046f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046dc:	f7fd faf0 	bl	8001cc0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e0cb      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f2:	4b49      	ldr	r3, [pc, #292]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0ee      	beq.n	80046dc <HAL_RCC_OscConfig+0x334>
 80046fe:	e014      	b.n	800472a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004700:	f7fd fade 	bl	8001cc0 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004706:	e00a      	b.n	800471e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004708:	f7fd fada 	bl	8001cc0 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e0b5      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471e:	4b3e      	ldr	r3, [pc, #248]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1ee      	bne.n	8004708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800472a:	7dfb      	ldrb	r3, [r7, #23]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d105      	bne.n	800473c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004730:	4b39      	ldr	r3, [pc, #228]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004734:	4a38      	ldr	r2, [pc, #224]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800473a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80a1 	beq.w	8004888 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004746:	4b34      	ldr	r3, [pc, #208]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b08      	cmp	r3, #8
 8004750:	d05c      	beq.n	800480c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d141      	bne.n	80047de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475a:	4b31      	ldr	r3, [pc, #196]	@ (8004820 <HAL_RCC_OscConfig+0x478>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7fd faae 	bl	8001cc0 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004768:	f7fd faaa 	bl	8001cc0 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e087      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477a:	4b27      	ldr	r3, [pc, #156]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69da      	ldr	r2, [r3, #28]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	019b      	lsls	r3, r3, #6
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	3b01      	subs	r3, #1
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a8:	061b      	lsls	r3, r3, #24
 80047aa:	491b      	ldr	r1, [pc, #108]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004820 <HAL_RCC_OscConfig+0x478>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b6:	f7fd fa83 	bl	8001cc0 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047be:	f7fd fa7f 	bl	8001cc0 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e05c      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d0:	4b11      	ldr	r3, [pc, #68]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x416>
 80047dc:	e054      	b.n	8004888 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047de:	4b10      	ldr	r3, [pc, #64]	@ (8004820 <HAL_RCC_OscConfig+0x478>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7fd fa6c 	bl	8001cc0 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ec:	f7fd fa68 	bl	8001cc0 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e045      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fe:	4b06      	ldr	r3, [pc, #24]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x444>
 800480a:	e03d      	b.n	8004888 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d107      	bne.n	8004824 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e038      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
 8004818:	40023800 	.word	0x40023800
 800481c:	40007000 	.word	0x40007000
 8004820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004824:	4b1b      	ldr	r3, [pc, #108]	@ (8004894 <HAL_RCC_OscConfig+0x4ec>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d028      	beq.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d121      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484a:	429a      	cmp	r2, r3
 800484c:	d11a      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004854:	4013      	ands	r3, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800485a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800485c:	4293      	cmp	r3, r2
 800485e:	d111      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486a:	085b      	lsrs	r3, r3, #1
 800486c:	3b01      	subs	r3, #1
 800486e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d107      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800

08004898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0cc      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048ac:	4b68      	ldr	r3, [pc, #416]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d90c      	bls.n	80048d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ba:	4b65      	ldr	r3, [pc, #404]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b63      	ldr	r3, [pc, #396]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0b8      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d020      	beq.n	8004922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ec:	4b59      	ldr	r3, [pc, #356]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a58      	ldr	r2, [pc, #352]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004904:	4b53      	ldr	r3, [pc, #332]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4a52      	ldr	r2, [pc, #328]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800490e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004910:	4b50      	ldr	r3, [pc, #320]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	494d      	ldr	r1, [pc, #308]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d044      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	4b47      	ldr	r3, [pc, #284]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d119      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e07f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d003      	beq.n	8004956 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004952:	2b03      	cmp	r3, #3
 8004954:	d107      	bne.n	8004966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004956:	4b3f      	ldr	r3, [pc, #252]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e06f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004966:	4b3b      	ldr	r3, [pc, #236]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e067      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004976:	4b37      	ldr	r3, [pc, #220]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f023 0203 	bic.w	r2, r3, #3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	4934      	ldr	r1, [pc, #208]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	4313      	orrs	r3, r2
 8004986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004988:	f7fd f99a 	bl	8001cc0 <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004990:	f7fd f996 	bl	8001cc0 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e04f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 020c 	and.w	r2, r3, #12
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d1eb      	bne.n	8004990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049b8:	4b25      	ldr	r3, [pc, #148]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d20c      	bcs.n	80049e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c6:	4b22      	ldr	r3, [pc, #136]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	4b20      	ldr	r3, [pc, #128]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e032      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ec:	4b19      	ldr	r3, [pc, #100]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4916      	ldr	r1, [pc, #88]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a0a:	4b12      	ldr	r3, [pc, #72]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	490e      	ldr	r1, [pc, #56]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a1e:	f000 f821 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8004a22:	4602      	mov	r2, r0
 8004a24:	4b0b      	ldr	r3, [pc, #44]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	490a      	ldr	r1, [pc, #40]	@ (8004a58 <HAL_RCC_ClockConfig+0x1c0>)
 8004a30:	5ccb      	ldrb	r3, [r1, r3]
 8004a32:	fa22 f303 	lsr.w	r3, r2, r3
 8004a36:	4a09      	ldr	r2, [pc, #36]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a3a:	4b09      	ldr	r3, [pc, #36]	@ (8004a60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fd f8fa 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023c00 	.word	0x40023c00
 8004a54:	40023800 	.word	0x40023800
 8004a58:	08014c7c 	.word	0x08014c7c
 8004a5c:	20000000 	.word	0x20000000
 8004a60:	20000004 	.word	0x20000004

08004a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a68:	b094      	sub	sp, #80	@ 0x50
 8004a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a7c:	4b79      	ldr	r3, [pc, #484]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d00d      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	f200 80e1 	bhi.w	8004c50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x34>
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d003      	beq.n	8004a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a96:	e0db      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a98:	4b73      	ldr	r3, [pc, #460]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a9c:	e0db      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a9e:	4b73      	ldr	r3, [pc, #460]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x208>)
 8004aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aa2:	e0d8      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aae:	4b6d      	ldr	r3, [pc, #436]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d063      	beq.n	8004b82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aba:	4b6a      	ldr	r3, [pc, #424]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	099b      	lsrs	r3, r3, #6
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ac4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ace:	2300      	movs	r3, #0
 8004ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	462b      	mov	r3, r5
 8004ada:	f04f 0000 	mov.w	r0, #0
 8004ade:	f04f 0100 	mov.w	r1, #0
 8004ae2:	0159      	lsls	r1, r3, #5
 8004ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ae8:	0150      	lsls	r0, r2, #5
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4621      	mov	r1, r4
 8004af0:	1a51      	subs	r1, r2, r1
 8004af2:	6139      	str	r1, [r7, #16]
 8004af4:	4629      	mov	r1, r5
 8004af6:	eb63 0301 	sbc.w	r3, r3, r1
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b08:	4659      	mov	r1, fp
 8004b0a:	018b      	lsls	r3, r1, #6
 8004b0c:	4651      	mov	r1, sl
 8004b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b12:	4651      	mov	r1, sl
 8004b14:	018a      	lsls	r2, r1, #6
 8004b16:	4651      	mov	r1, sl
 8004b18:	ebb2 0801 	subs.w	r8, r2, r1
 8004b1c:	4659      	mov	r1, fp
 8004b1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b36:	4690      	mov	r8, r2
 8004b38:	4699      	mov	r9, r3
 8004b3a:	4623      	mov	r3, r4
 8004b3c:	eb18 0303 	adds.w	r3, r8, r3
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	462b      	mov	r3, r5
 8004b44:	eb49 0303 	adc.w	r3, r9, r3
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b56:	4629      	mov	r1, r5
 8004b58:	024b      	lsls	r3, r1, #9
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b60:	4621      	mov	r1, r4
 8004b62:	024a      	lsls	r2, r1, #9
 8004b64:	4610      	mov	r0, r2
 8004b66:	4619      	mov	r1, r3
 8004b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b74:	f7fb fb7c 	bl	8000270 <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b80:	e058      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b82:	4b38      	ldr	r3, [pc, #224]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	099b      	lsrs	r3, r3, #6
 8004b88:	2200      	movs	r2, #0
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b92:	623b      	str	r3, [r7, #32]
 8004b94:	2300      	movs	r3, #0
 8004b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	f04f 0000 	mov.w	r0, #0
 8004ba4:	f04f 0100 	mov.w	r1, #0
 8004ba8:	0159      	lsls	r1, r3, #5
 8004baa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bae:	0150      	lsls	r0, r2, #5
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bba:	4649      	mov	r1, r9
 8004bbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bd4:	ebb2 040a 	subs.w	r4, r2, sl
 8004bd8:	eb63 050b 	sbc.w	r5, r3, fp
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	00eb      	lsls	r3, r5, #3
 8004be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bea:	00e2      	lsls	r2, r4, #3
 8004bec:	4614      	mov	r4, r2
 8004bee:	461d      	mov	r5, r3
 8004bf0:	4643      	mov	r3, r8
 8004bf2:	18e3      	adds	r3, r4, r3
 8004bf4:	603b      	str	r3, [r7, #0]
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	eb45 0303 	adc.w	r3, r5, r3
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	028b      	lsls	r3, r1, #10
 8004c0e:	4621      	mov	r1, r4
 8004c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c14:	4621      	mov	r1, r4
 8004c16:	028a      	lsls	r2, r1, #10
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c1e:	2200      	movs	r2, #0
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	61fa      	str	r2, [r7, #28]
 8004c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c28:	f7fb fb22 	bl	8000270 <__aeabi_uldivmod>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4613      	mov	r3, r2
 8004c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c34:	4b0b      	ldr	r3, [pc, #44]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	0c1b      	lsrs	r3, r3, #16
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	3301      	adds	r3, #1
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c4e:	e002      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c50:	4b05      	ldr	r3, [pc, #20]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3750      	adds	r7, #80	@ 0x50
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c62:	bf00      	nop
 8004c64:	40023800 	.word	0x40023800
 8004c68:	00f42400 	.word	0x00f42400
 8004c6c:	007a1200 	.word	0x007a1200

08004c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c74:	4b03      	ldr	r3, [pc, #12]	@ (8004c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c76:	681b      	ldr	r3, [r3, #0]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000000 	.word	0x20000000

08004c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c8c:	f7ff fff0 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4b05      	ldr	r3, [pc, #20]	@ (8004ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	0a9b      	lsrs	r3, r3, #10
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	4903      	ldr	r1, [pc, #12]	@ (8004cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	08014c8c 	.word	0x08014c8c

08004cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cb4:	f7ff ffdc 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b05      	ldr	r3, [pc, #20]	@ (8004cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	0b5b      	lsrs	r3, r3, #13
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	4903      	ldr	r1, [pc, #12]	@ (8004cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cc6:	5ccb      	ldrb	r3, [r1, r3]
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	08014c8c 	.word	0x08014c8c

08004cd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e07b      	b.n	8004de2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d108      	bne.n	8004d04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cfa:	d009      	beq.n	8004d10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	61da      	str	r2, [r3, #28]
 8004d02:	e005      	b.n	8004d10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc fb04 	bl	8001338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d94:	ea42 0103 	orr.w	r1, r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	0c1b      	lsrs	r3, r3, #16
 8004dae:	f003 0104 	and.w	r1, r3, #4
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db6:	f003 0210 	and.w	r2, r3, #16
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b082      	sub	sp, #8
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e041      	b.n	8004e80 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d106      	bne.n	8004e16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7fc fb11 	bl	8001438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3304      	adds	r3, #4
 8004e26:	4619      	mov	r1, r3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f000 f93f 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e041      	b.n	8004f1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fc fa8a 	bl	80013c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	f000 f8f0 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e0ae      	b.n	80050a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b0c      	cmp	r3, #12
 8004f52:	f200 809f 	bhi.w	8005094 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f56:	a201      	add	r2, pc, #4	@ (adr r2, 8004f5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004f91 	.word	0x08004f91
 8004f60:	08005095 	.word	0x08005095
 8004f64:	08005095 	.word	0x08005095
 8004f68:	08005095 	.word	0x08005095
 8004f6c:	08004fd1 	.word	0x08004fd1
 8004f70:	08005095 	.word	0x08005095
 8004f74:	08005095 	.word	0x08005095
 8004f78:	08005095 	.word	0x08005095
 8004f7c:	08005013 	.word	0x08005013
 8004f80:	08005095 	.word	0x08005095
 8004f84:	08005095 	.word	0x08005095
 8004f88:	08005095 	.word	0x08005095
 8004f8c:	08005053 	.word	0x08005053
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 f934 	bl	8005204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0208 	orr.w	r2, r2, #8
 8004faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0204 	bic.w	r2, r2, #4
 8004fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6999      	ldr	r1, [r3, #24]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	691a      	ldr	r2, [r3, #16]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	619a      	str	r2, [r3, #24]
      break;
 8004fce:	e064      	b.n	800509a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 f984 	bl	80052e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6999      	ldr	r1, [r3, #24]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	021a      	lsls	r2, r3, #8
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	619a      	str	r2, [r3, #24]
      break;
 8005010:	e043      	b.n	800509a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f9d9 	bl	80053d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0208 	orr.w	r2, r2, #8
 800502c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0204 	bic.w	r2, r2, #4
 800503c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69d9      	ldr	r1, [r3, #28]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	61da      	str	r2, [r3, #28]
      break;
 8005050:	e023      	b.n	800509a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68b9      	ldr	r1, [r7, #8]
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fa2d 	bl	80054b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800506c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800507c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69d9      	ldr	r1, [r3, #28]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	021a      	lsls	r2, r3, #8
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	61da      	str	r2, [r3, #28]
      break;
 8005092:	e002      	b.n	800509a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	75fb      	strb	r3, [r7, #23]
      break;
 8005098:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a46      	ldr	r2, [pc, #280]	@ (80051d8 <TIM_Base_SetConfig+0x12c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d013      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ca:	d00f      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a43      	ldr	r2, [pc, #268]	@ (80051dc <TIM_Base_SetConfig+0x130>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00b      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a42      	ldr	r2, [pc, #264]	@ (80051e0 <TIM_Base_SetConfig+0x134>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d007      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a41      	ldr	r2, [pc, #260]	@ (80051e4 <TIM_Base_SetConfig+0x138>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a40      	ldr	r2, [pc, #256]	@ (80051e8 <TIM_Base_SetConfig+0x13c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d108      	bne.n	80050fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a35      	ldr	r2, [pc, #212]	@ (80051d8 <TIM_Base_SetConfig+0x12c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d02b      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510c:	d027      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a32      	ldr	r2, [pc, #200]	@ (80051dc <TIM_Base_SetConfig+0x130>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d023      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a31      	ldr	r2, [pc, #196]	@ (80051e0 <TIM_Base_SetConfig+0x134>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01f      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a30      	ldr	r2, [pc, #192]	@ (80051e4 <TIM_Base_SetConfig+0x138>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d01b      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2f      	ldr	r2, [pc, #188]	@ (80051e8 <TIM_Base_SetConfig+0x13c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d017      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2e      	ldr	r2, [pc, #184]	@ (80051ec <TIM_Base_SetConfig+0x140>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2d      	ldr	r2, [pc, #180]	@ (80051f0 <TIM_Base_SetConfig+0x144>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00f      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a2c      	ldr	r2, [pc, #176]	@ (80051f4 <TIM_Base_SetConfig+0x148>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00b      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2b      	ldr	r2, [pc, #172]	@ (80051f8 <TIM_Base_SetConfig+0x14c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d007      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2a      	ldr	r2, [pc, #168]	@ (80051fc <TIM_Base_SetConfig+0x150>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a29      	ldr	r2, [pc, #164]	@ (8005200 <TIM_Base_SetConfig+0x154>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a10      	ldr	r2, [pc, #64]	@ (80051d8 <TIM_Base_SetConfig+0x12c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_Base_SetConfig+0xf8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a12      	ldr	r2, [pc, #72]	@ (80051e8 <TIM_Base_SetConfig+0x13c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d103      	bne.n	80051ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d105      	bne.n	80051ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f023 0201 	bic.w	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	611a      	str	r2, [r3, #16]
  }
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40010000 	.word	0x40010000
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800
 80051e4:	40000c00 	.word	0x40000c00
 80051e8:	40010400 	.word	0x40010400
 80051ec:	40014000 	.word	0x40014000
 80051f0:	40014400 	.word	0x40014400
 80051f4:	40014800 	.word	0x40014800
 80051f8:	40001800 	.word	0x40001800
 80051fc:	40001c00 	.word	0x40001c00
 8005200:	40002000 	.word	0x40002000

08005204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	f023 0201 	bic.w	r2, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0303 	bic.w	r3, r3, #3
 800523a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 0302 	bic.w	r3, r3, #2
 800524c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a20      	ldr	r2, [pc, #128]	@ (80052dc <TIM_OC1_SetConfig+0xd8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_OC1_SetConfig+0x64>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a1f      	ldr	r2, [pc, #124]	@ (80052e0 <TIM_OC1_SetConfig+0xdc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d10c      	bne.n	8005282 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f023 0308 	bic.w	r3, r3, #8
 800526e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f023 0304 	bic.w	r3, r3, #4
 8005280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a15      	ldr	r2, [pc, #84]	@ (80052dc <TIM_OC1_SetConfig+0xd8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_OC1_SetConfig+0x8e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a14      	ldr	r2, [pc, #80]	@ (80052e0 <TIM_OC1_SetConfig+0xdc>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d111      	bne.n	80052b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	621a      	str	r2, [r3, #32]
}
 80052d0:	bf00      	nop
 80052d2:	371c      	adds	r7, #28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40010400 	.word	0x40010400

080052e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	f023 0210 	bic.w	r2, r3, #16
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800531a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f023 0320 	bic.w	r3, r3, #32
 800532e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a22      	ldr	r2, [pc, #136]	@ (80053c8 <TIM_OC2_SetConfig+0xe4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d003      	beq.n	800534c <TIM_OC2_SetConfig+0x68>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a21      	ldr	r2, [pc, #132]	@ (80053cc <TIM_OC2_SetConfig+0xe8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d10d      	bne.n	8005368 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005366:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a17      	ldr	r2, [pc, #92]	@ (80053c8 <TIM_OC2_SetConfig+0xe4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_OC2_SetConfig+0x94>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a16      	ldr	r2, [pc, #88]	@ (80053cc <TIM_OC2_SetConfig+0xe8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d113      	bne.n	80053a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800537e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005386:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	621a      	str	r2, [r3, #32]
}
 80053ba:	bf00      	nop
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40010400 	.word	0x40010400

080053d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0303 	bic.w	r3, r3, #3
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a21      	ldr	r2, [pc, #132]	@ (80054b0 <TIM_OC3_SetConfig+0xe0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d003      	beq.n	8005436 <TIM_OC3_SetConfig+0x66>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a20      	ldr	r2, [pc, #128]	@ (80054b4 <TIM_OC3_SetConfig+0xe4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d10d      	bne.n	8005452 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800543c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a16      	ldr	r2, [pc, #88]	@ (80054b0 <TIM_OC3_SetConfig+0xe0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d003      	beq.n	8005462 <TIM_OC3_SetConfig+0x92>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a15      	ldr	r2, [pc, #84]	@ (80054b4 <TIM_OC3_SetConfig+0xe4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d113      	bne.n	800548a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	621a      	str	r2, [r3, #32]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	40010000 	.word	0x40010000
 80054b4:	40010400 	.word	0x40010400

080054b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	021b      	lsls	r3, r3, #8
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	031b      	lsls	r3, r3, #12
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a12      	ldr	r2, [pc, #72]	@ (800555c <TIM_OC4_SetConfig+0xa4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <TIM_OC4_SetConfig+0x68>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a11      	ldr	r2, [pc, #68]	@ (8005560 <TIM_OC4_SetConfig+0xa8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d109      	bne.n	8005534 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	019b      	lsls	r3, r3, #6
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	621a      	str	r2, [r3, #32]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40010000 	.word	0x40010000
 8005560:	40010400 	.word	0x40010400

08005564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005578:	2302      	movs	r3, #2
 800557a:	e05a      	b.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a21      	ldr	r2, [pc, #132]	@ (8005640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d022      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c8:	d01d      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005644 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d018      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005648 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1a      	ldr	r2, [pc, #104]	@ (800564c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00e      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a18      	ldr	r2, [pc, #96]	@ (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a17      	ldr	r2, [pc, #92]	@ (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a15      	ldr	r2, [pc, #84]	@ (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d10c      	bne.n	8005620 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800560c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	4313      	orrs	r3, r2
 8005616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40010000 	.word	0x40010000
 8005644:	40000400 	.word	0x40000400
 8005648:	40000800 	.word	0x40000800
 800564c:	40000c00 	.word	0x40000c00
 8005650:	40010400 	.word	0x40010400
 8005654:	40014000 	.word	0x40014000
 8005658:	40001800 	.word	0x40001800

0800565c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005674:	2302      	movs	r3, #2
 8005676:	e03d      	b.n	80056f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e042      	b.n	8005798 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fb ff52 	bl	80015d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2224      	movs	r2, #36	@ 0x24
 8005730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f82b 	bl	80057a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695a      	ldr	r2, [r3, #20]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057a4:	b0c0      	sub	sp, #256	@ 0x100
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80057b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057bc:	68d9      	ldr	r1, [r3, #12]
 80057be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	ea40 0301 	orr.w	r3, r0, r1
 80057c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	431a      	orrs	r2, r3
 80057e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80057f8:	f021 010c 	bic.w	r1, r1, #12
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005806:	430b      	orrs	r3, r1
 8005808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800580a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800581a:	6999      	ldr	r1, [r3, #24]
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	ea40 0301 	orr.w	r3, r0, r1
 8005826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b8f      	ldr	r3, [pc, #572]	@ (8005a6c <UART_SetConfig+0x2cc>)
 8005830:	429a      	cmp	r2, r3
 8005832:	d005      	beq.n	8005840 <UART_SetConfig+0xa0>
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4b8d      	ldr	r3, [pc, #564]	@ (8005a70 <UART_SetConfig+0x2d0>)
 800583c:	429a      	cmp	r2, r3
 800583e:	d104      	bne.n	800584a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005840:	f7ff fa36 	bl	8004cb0 <HAL_RCC_GetPCLK2Freq>
 8005844:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005848:	e003      	b.n	8005852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800584a:	f7ff fa1d 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 800584e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800585c:	f040 810c 	bne.w	8005a78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005864:	2200      	movs	r2, #0
 8005866:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800586a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800586e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005872:	4622      	mov	r2, r4
 8005874:	462b      	mov	r3, r5
 8005876:	1891      	adds	r1, r2, r2
 8005878:	65b9      	str	r1, [r7, #88]	@ 0x58
 800587a:	415b      	adcs	r3, r3
 800587c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800587e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005882:	4621      	mov	r1, r4
 8005884:	eb12 0801 	adds.w	r8, r2, r1
 8005888:	4629      	mov	r1, r5
 800588a:	eb43 0901 	adc.w	r9, r3, r1
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800589a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800589e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058a2:	4690      	mov	r8, r2
 80058a4:	4699      	mov	r9, r3
 80058a6:	4623      	mov	r3, r4
 80058a8:	eb18 0303 	adds.w	r3, r8, r3
 80058ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058b0:	462b      	mov	r3, r5
 80058b2:	eb49 0303 	adc.w	r3, r9, r3
 80058b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80058c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80058ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80058ce:	460b      	mov	r3, r1
 80058d0:	18db      	adds	r3, r3, r3
 80058d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80058d4:	4613      	mov	r3, r2
 80058d6:	eb42 0303 	adc.w	r3, r2, r3
 80058da:	657b      	str	r3, [r7, #84]	@ 0x54
 80058dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80058e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80058e4:	f7fa fcc4 	bl	8000270 <__aeabi_uldivmod>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4b61      	ldr	r3, [pc, #388]	@ (8005a74 <UART_SetConfig+0x2d4>)
 80058ee:	fba3 2302 	umull	r2, r3, r3, r2
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	011c      	lsls	r4, r3, #4
 80058f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005900:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005908:	4642      	mov	r2, r8
 800590a:	464b      	mov	r3, r9
 800590c:	1891      	adds	r1, r2, r2
 800590e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005910:	415b      	adcs	r3, r3
 8005912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005918:	4641      	mov	r1, r8
 800591a:	eb12 0a01 	adds.w	sl, r2, r1
 800591e:	4649      	mov	r1, r9
 8005920:	eb43 0b01 	adc.w	fp, r3, r1
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005938:	4692      	mov	sl, r2
 800593a:	469b      	mov	fp, r3
 800593c:	4643      	mov	r3, r8
 800593e:	eb1a 0303 	adds.w	r3, sl, r3
 8005942:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005946:	464b      	mov	r3, r9
 8005948:	eb4b 0303 	adc.w	r3, fp, r3
 800594c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800595c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005964:	460b      	mov	r3, r1
 8005966:	18db      	adds	r3, r3, r3
 8005968:	643b      	str	r3, [r7, #64]	@ 0x40
 800596a:	4613      	mov	r3, r2
 800596c:	eb42 0303 	adc.w	r3, r2, r3
 8005970:	647b      	str	r3, [r7, #68]	@ 0x44
 8005972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800597a:	f7fa fc79 	bl	8000270 <__aeabi_uldivmod>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4611      	mov	r1, r2
 8005984:	4b3b      	ldr	r3, [pc, #236]	@ (8005a74 <UART_SetConfig+0x2d4>)
 8005986:	fba3 2301 	umull	r2, r3, r3, r1
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	2264      	movs	r2, #100	@ 0x64
 800598e:	fb02 f303 	mul.w	r3, r2, r3
 8005992:	1acb      	subs	r3, r1, r3
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800599a:	4b36      	ldr	r3, [pc, #216]	@ (8005a74 <UART_SetConfig+0x2d4>)
 800599c:	fba3 2302 	umull	r2, r3, r3, r2
 80059a0:	095b      	lsrs	r3, r3, #5
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80059a8:	441c      	add	r4, r3
 80059aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80059b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80059bc:	4642      	mov	r2, r8
 80059be:	464b      	mov	r3, r9
 80059c0:	1891      	adds	r1, r2, r2
 80059c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80059c4:	415b      	adcs	r3, r3
 80059c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80059cc:	4641      	mov	r1, r8
 80059ce:	1851      	adds	r1, r2, r1
 80059d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80059d2:	4649      	mov	r1, r9
 80059d4:	414b      	adcs	r3, r1
 80059d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80059e4:	4659      	mov	r1, fp
 80059e6:	00cb      	lsls	r3, r1, #3
 80059e8:	4651      	mov	r1, sl
 80059ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ee:	4651      	mov	r1, sl
 80059f0:	00ca      	lsls	r2, r1, #3
 80059f2:	4610      	mov	r0, r2
 80059f4:	4619      	mov	r1, r3
 80059f6:	4603      	mov	r3, r0
 80059f8:	4642      	mov	r2, r8
 80059fa:	189b      	adds	r3, r3, r2
 80059fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a00:	464b      	mov	r3, r9
 8005a02:	460a      	mov	r2, r1
 8005a04:	eb42 0303 	adc.w	r3, r2, r3
 8005a08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a20:	460b      	mov	r3, r1
 8005a22:	18db      	adds	r3, r3, r3
 8005a24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a26:	4613      	mov	r3, r2
 8005a28:	eb42 0303 	adc.w	r3, r2, r3
 8005a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a36:	f7fa fc1b 	bl	8000270 <__aeabi_uldivmod>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a74 <UART_SetConfig+0x2d4>)
 8005a40:	fba3 1302 	umull	r1, r3, r3, r2
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	2164      	movs	r1, #100	@ 0x64
 8005a48:	fb01 f303 	mul.w	r3, r1, r3
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	3332      	adds	r3, #50	@ 0x32
 8005a52:	4a08      	ldr	r2, [pc, #32]	@ (8005a74 <UART_SetConfig+0x2d4>)
 8005a54:	fba2 2303 	umull	r2, r3, r2, r3
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	f003 0207 	and.w	r2, r3, #7
 8005a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4422      	add	r2, r4
 8005a66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a68:	e106      	b.n	8005c78 <UART_SetConfig+0x4d8>
 8005a6a:	bf00      	nop
 8005a6c:	40011000 	.word	0x40011000
 8005a70:	40011400 	.word	0x40011400
 8005a74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a8a:	4642      	mov	r2, r8
 8005a8c:	464b      	mov	r3, r9
 8005a8e:	1891      	adds	r1, r2, r2
 8005a90:	6239      	str	r1, [r7, #32]
 8005a92:	415b      	adcs	r3, r3
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a9a:	4641      	mov	r1, r8
 8005a9c:	1854      	adds	r4, r2, r1
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	eb43 0501 	adc.w	r5, r3, r1
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	00eb      	lsls	r3, r5, #3
 8005aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ab2:	00e2      	lsls	r2, r4, #3
 8005ab4:	4614      	mov	r4, r2
 8005ab6:	461d      	mov	r5, r3
 8005ab8:	4643      	mov	r3, r8
 8005aba:	18e3      	adds	r3, r4, r3
 8005abc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ac0:	464b      	mov	r3, r9
 8005ac2:	eb45 0303 	adc.w	r3, r5, r3
 8005ac6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ad6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ada:	f04f 0200 	mov.w	r2, #0
 8005ade:	f04f 0300 	mov.w	r3, #0
 8005ae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	008b      	lsls	r3, r1, #2
 8005aea:	4621      	mov	r1, r4
 8005aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005af0:	4621      	mov	r1, r4
 8005af2:	008a      	lsls	r2, r1, #2
 8005af4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005af8:	f7fa fbba 	bl	8000270 <__aeabi_uldivmod>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4b60      	ldr	r3, [pc, #384]	@ (8005c84 <UART_SetConfig+0x4e4>)
 8005b02:	fba3 2302 	umull	r2, r3, r3, r2
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	011c      	lsls	r4, r3, #4
 8005b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b1c:	4642      	mov	r2, r8
 8005b1e:	464b      	mov	r3, r9
 8005b20:	1891      	adds	r1, r2, r2
 8005b22:	61b9      	str	r1, [r7, #24]
 8005b24:	415b      	adcs	r3, r3
 8005b26:	61fb      	str	r3, [r7, #28]
 8005b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b2c:	4641      	mov	r1, r8
 8005b2e:	1851      	adds	r1, r2, r1
 8005b30:	6139      	str	r1, [r7, #16]
 8005b32:	4649      	mov	r1, r9
 8005b34:	414b      	adcs	r3, r1
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b44:	4659      	mov	r1, fp
 8005b46:	00cb      	lsls	r3, r1, #3
 8005b48:	4651      	mov	r1, sl
 8005b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b4e:	4651      	mov	r1, sl
 8005b50:	00ca      	lsls	r2, r1, #3
 8005b52:	4610      	mov	r0, r2
 8005b54:	4619      	mov	r1, r3
 8005b56:	4603      	mov	r3, r0
 8005b58:	4642      	mov	r2, r8
 8005b5a:	189b      	adds	r3, r3, r2
 8005b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b60:	464b      	mov	r3, r9
 8005b62:	460a      	mov	r2, r1
 8005b64:	eb42 0303 	adc.w	r3, r2, r3
 8005b68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b84:	4649      	mov	r1, r9
 8005b86:	008b      	lsls	r3, r1, #2
 8005b88:	4641      	mov	r1, r8
 8005b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b8e:	4641      	mov	r1, r8
 8005b90:	008a      	lsls	r2, r1, #2
 8005b92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b96:	f7fa fb6b 	bl	8000270 <__aeabi_uldivmod>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	4b38      	ldr	r3, [pc, #224]	@ (8005c84 <UART_SetConfig+0x4e4>)
 8005ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	2264      	movs	r2, #100	@ 0x64
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
 8005bae:	1acb      	subs	r3, r1, r3
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	3332      	adds	r3, #50	@ 0x32
 8005bb4:	4a33      	ldr	r2, [pc, #204]	@ (8005c84 <UART_SetConfig+0x4e4>)
 8005bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bc0:	441c      	add	r4, r3
 8005bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bca:	677a      	str	r2, [r7, #116]	@ 0x74
 8005bcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	464b      	mov	r3, r9
 8005bd4:	1891      	adds	r1, r2, r2
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	415b      	adcs	r3, r3
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005be0:	4641      	mov	r1, r8
 8005be2:	1851      	adds	r1, r2, r1
 8005be4:	6039      	str	r1, [r7, #0]
 8005be6:	4649      	mov	r1, r9
 8005be8:	414b      	adcs	r3, r1
 8005bea:	607b      	str	r3, [r7, #4]
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005bf8:	4659      	mov	r1, fp
 8005bfa:	00cb      	lsls	r3, r1, #3
 8005bfc:	4651      	mov	r1, sl
 8005bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c02:	4651      	mov	r1, sl
 8005c04:	00ca      	lsls	r2, r1, #3
 8005c06:	4610      	mov	r0, r2
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	189b      	adds	r3, r3, r2
 8005c10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c12:	464b      	mov	r3, r9
 8005c14:	460a      	mov	r2, r1
 8005c16:	eb42 0303 	adc.w	r3, r2, r3
 8005c1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c26:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c28:	f04f 0200 	mov.w	r2, #0
 8005c2c:	f04f 0300 	mov.w	r3, #0
 8005c30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c34:	4649      	mov	r1, r9
 8005c36:	008b      	lsls	r3, r1, #2
 8005c38:	4641      	mov	r1, r8
 8005c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c3e:	4641      	mov	r1, r8
 8005c40:	008a      	lsls	r2, r1, #2
 8005c42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c46:	f7fa fb13 	bl	8000270 <__aeabi_uldivmod>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c84 <UART_SetConfig+0x4e4>)
 8005c50:	fba3 1302 	umull	r1, r3, r3, r2
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	2164      	movs	r1, #100	@ 0x64
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	3332      	adds	r3, #50	@ 0x32
 8005c62:	4a08      	ldr	r2, [pc, #32]	@ (8005c84 <UART_SetConfig+0x4e4>)
 8005c64:	fba2 2303 	umull	r2, r3, r2, r3
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	f003 020f 	and.w	r2, r3, #15
 8005c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4422      	add	r2, r4
 8005c76:	609a      	str	r2, [r3, #8]
}
 8005c78:	bf00      	nop
 8005c7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c84:	51eb851f 	.word	0x51eb851f

08005c88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c88:	b084      	sub	sp, #16
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	f107 001c 	add.w	r0, r7, #28
 8005c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d123      	bne.n	8005cea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005cb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d105      	bne.n	8005cde <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 faa0 	bl	8006224 <USB_CoreReset>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	73fb      	strb	r3, [r7, #15]
 8005ce8:	e01b      	b.n	8005d22 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fa94 	bl	8006224 <USB_CoreReset>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d106      	bne.n	8005d16 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d14:	e005      	b.n	8005d22 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d22:	7fbb      	ldrb	r3, [r7, #30]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d10b      	bne.n	8005d40 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f043 0206 	orr.w	r2, r3, #6
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f043 0220 	orr.w	r2, r3, #32
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d4c:	b004      	add	sp, #16
 8005d4e:	4770      	bx	lr

08005d50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f023 0201 	bic.w	r2, r3, #1
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d115      	bne.n	8005dc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005da0:	200a      	movs	r0, #10
 8005da2:	f7fb ff99 	bl	8001cd8 <HAL_Delay>
      ms += 10U;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	330a      	adds	r3, #10
 8005daa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fa2b 	bl	8006208 <USB_GetMode>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d01e      	beq.n	8005df6 <USB_SetCurrentMode+0x84>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2bc7      	cmp	r3, #199	@ 0xc7
 8005dbc:	d9f0      	bls.n	8005da0 <USB_SetCurrentMode+0x2e>
 8005dbe:	e01a      	b.n	8005df6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d115      	bne.n	8005df2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005dd2:	200a      	movs	r0, #10
 8005dd4:	f7fb ff80 	bl	8001cd8 <HAL_Delay>
      ms += 10U;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	330a      	adds	r3, #10
 8005ddc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa12 	bl	8006208 <USB_GetMode>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <USB_SetCurrentMode+0x84>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2bc7      	cmp	r3, #199	@ 0xc7
 8005dee:	d9f0      	bls.n	8005dd2 <USB_SetCurrentMode+0x60>
 8005df0:	e001      	b.n	8005df6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e005      	b.n	8005e02 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2bc8      	cmp	r3, #200	@ 0xc8
 8005dfa:	d101      	bne.n	8005e00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b086      	sub	sp, #24
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005e1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e26:	2300      	movs	r3, #0
 8005e28:	613b      	str	r3, [r7, #16]
 8005e2a:	e009      	b.n	8005e40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	3340      	adds	r3, #64	@ 0x40
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	2200      	movs	r2, #0
 8005e38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	613b      	str	r3, [r7, #16]
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	2b0e      	cmp	r3, #14
 8005e44:	d9f2      	bls.n	8005e2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d11c      	bne.n	8005e88 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e5c:	f043 0302 	orr.w	r3, r3, #2
 8005e60:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e66:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e72:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e86:	e00b      	b.n	8005ea0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e98:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d10d      	bne.n	8005ed0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f968 	bl	8006194 <USB_SetDevSpeed>
 8005ec4:	e008      	b.n	8005ed8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f963 	bl	8006194 <USB_SetDevSpeed>
 8005ece:	e003      	b.n	8005ed8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ed0:	2103      	movs	r1, #3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f95e 	bl	8006194 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ed8:	2110      	movs	r1, #16
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f8fa 	bl	80060d4 <USB_FlushTxFifo>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f924 	bl	8006138 <USB_FlushRxFifo>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f00:	461a      	mov	r2, r3
 8005f02:	2300      	movs	r3, #0
 8005f04:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	2300      	movs	r3, #0
 8005f10:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	e043      	b.n	8005fac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f3a:	d118      	bne.n	8005f6e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	e013      	b.n	8005f80 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f64:	461a      	mov	r2, r3
 8005f66:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	e008      	b.n	8005f80 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	2300      	movs	r3, #0
 8005f90:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005fa4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	613b      	str	r3, [r7, #16]
 8005fac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d3b5      	bcc.n	8005f24 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	613b      	str	r3, [r7, #16]
 8005fbc:	e043      	b.n	8006046 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fd4:	d118      	bne.n	8006008 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	e013      	b.n	800601a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ffe:	461a      	mov	r2, r3
 8006000:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	e008      	b.n	800601a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006014:	461a      	mov	r2, r3
 8006016:	2300      	movs	r3, #0
 8006018:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006026:	461a      	mov	r2, r3
 8006028:	2300      	movs	r3, #0
 800602a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006038:	461a      	mov	r2, r3
 800603a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800603e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	3301      	adds	r3, #1
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800604a:	461a      	mov	r2, r3
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	4293      	cmp	r3, r2
 8006050:	d3b5      	bcc.n	8005fbe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006064:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006072:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006074:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006078:	2b00      	cmp	r3, #0
 800607a:	d105      	bne.n	8006088 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	f043 0210 	orr.w	r2, r3, #16
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	699a      	ldr	r2, [r3, #24]
 800608c:	4b10      	ldr	r3, [pc, #64]	@ (80060d0 <USB_DevInit+0x2c4>)
 800608e:	4313      	orrs	r3, r2
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006094:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	f043 0208 	orr.w	r2, r3, #8
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80060a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d107      	bne.n	80060c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060b8:	f043 0304 	orr.w	r3, r3, #4
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060cc:	b004      	add	sp, #16
 80060ce:	4770      	bx	lr
 80060d0:	803c3800 	.word	0x803c3800

080060d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3301      	adds	r3, #1
 80060e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060ee:	d901      	bls.n	80060f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e01b      	b.n	800612c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	daf2      	bge.n	80060e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	019b      	lsls	r3, r3, #6
 8006104:	f043 0220 	orr.w	r2, r3, #32
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3301      	adds	r3, #1
 8006110:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006118:	d901      	bls.n	800611e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e006      	b.n	800612c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b20      	cmp	r3, #32
 8006128:	d0f0      	beq.n	800610c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3301      	adds	r3, #1
 8006148:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006150:	d901      	bls.n	8006156 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e018      	b.n	8006188 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	daf2      	bge.n	8006144 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2210      	movs	r2, #16
 8006166:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3301      	adds	r3, #1
 800616c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006174:	d901      	bls.n	800617a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e006      	b.n	8006188 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0310 	and.w	r3, r3, #16
 8006182:	2b10      	cmp	r3, #16
 8006184:	d0f0      	beq.n	8006168 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	68f9      	ldr	r1, [r7, #12]
 80061b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061b4:	4313      	orrs	r3, r2
 80061b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b085      	sub	sp, #20
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80061e0:	f023 0303 	bic.w	r3, r3, #3
 80061e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061f4:	f043 0302 	orr.w	r3, r3, #2
 80061f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	f003 0301 	and.w	r3, r3, #1
}
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3301      	adds	r3, #1
 8006234:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800623c:	d901      	bls.n	8006242 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e01b      	b.n	800627a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	daf2      	bge.n	8006230 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f043 0201 	orr.w	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3301      	adds	r3, #1
 800625e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006266:	d901      	bls.n	800626c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e006      	b.n	800627a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b01      	cmp	r3, #1
 8006276:	d0f0      	beq.n	800625a <USB_CoreReset+0x36>

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
	...

08006288 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800628e:	4b87      	ldr	r3, [pc, #540]	@ (80064ac <MX_LWIP_Init+0x224>)
 8006290:	22c0      	movs	r2, #192	@ 0xc0
 8006292:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006294:	4b85      	ldr	r3, [pc, #532]	@ (80064ac <MX_LWIP_Init+0x224>)
 8006296:	22a8      	movs	r2, #168	@ 0xa8
 8006298:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800629a:	4b84      	ldr	r3, [pc, #528]	@ (80064ac <MX_LWIP_Init+0x224>)
 800629c:	2201      	movs	r2, #1
 800629e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 156;
 80062a0:	4b82      	ldr	r3, [pc, #520]	@ (80064ac <MX_LWIP_Init+0x224>)
 80062a2:	229c      	movs	r2, #156	@ 0x9c
 80062a4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80062a6:	4b82      	ldr	r3, [pc, #520]	@ (80064b0 <MX_LWIP_Init+0x228>)
 80062a8:	22ff      	movs	r2, #255	@ 0xff
 80062aa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80062ac:	4b80      	ldr	r3, [pc, #512]	@ (80064b0 <MX_LWIP_Init+0x228>)
 80062ae:	22ff      	movs	r2, #255	@ 0xff
 80062b0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80062b2:	4b7f      	ldr	r3, [pc, #508]	@ (80064b0 <MX_LWIP_Init+0x228>)
 80062b4:	22ff      	movs	r2, #255	@ 0xff
 80062b6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80062b8:	4b7d      	ldr	r3, [pc, #500]	@ (80064b0 <MX_LWIP_Init+0x228>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80062be:	4b7d      	ldr	r3, [pc, #500]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 80062c0:	22c0      	movs	r2, #192	@ 0xc0
 80062c2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80062c4:	4b7b      	ldr	r3, [pc, #492]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 80062c6:	22a8      	movs	r2, #168	@ 0xa8
 80062c8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80062ca:	4b7a      	ldr	r3, [pc, #488]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 80062cc:	2201      	movs	r2, #1
 80062ce:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80062d0:	4b78      	ldr	r3, [pc, #480]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 80062d2:	2201      	movs	r2, #1
 80062d4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80062d6:	f000 fd02 	bl	8006cde <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80062da:	4b74      	ldr	r3, [pc, #464]	@ (80064ac <MX_LWIP_Init+0x224>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	061a      	lsls	r2, r3, #24
 80062e0:	4b72      	ldr	r3, [pc, #456]	@ (80064ac <MX_LWIP_Init+0x224>)
 80062e2:	785b      	ldrb	r3, [r3, #1]
 80062e4:	041b      	lsls	r3, r3, #16
 80062e6:	431a      	orrs	r2, r3
 80062e8:	4b70      	ldr	r3, [pc, #448]	@ (80064ac <MX_LWIP_Init+0x224>)
 80062ea:	789b      	ldrb	r3, [r3, #2]
 80062ec:	021b      	lsls	r3, r3, #8
 80062ee:	4313      	orrs	r3, r2
 80062f0:	4a6e      	ldr	r2, [pc, #440]	@ (80064ac <MX_LWIP_Init+0x224>)
 80062f2:	78d2      	ldrb	r2, [r2, #3]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	061a      	lsls	r2, r3, #24
 80062f8:	4b6c      	ldr	r3, [pc, #432]	@ (80064ac <MX_LWIP_Init+0x224>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	0619      	lsls	r1, r3, #24
 80062fe:	4b6b      	ldr	r3, [pc, #428]	@ (80064ac <MX_LWIP_Init+0x224>)
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	041b      	lsls	r3, r3, #16
 8006304:	4319      	orrs	r1, r3
 8006306:	4b69      	ldr	r3, [pc, #420]	@ (80064ac <MX_LWIP_Init+0x224>)
 8006308:	789b      	ldrb	r3, [r3, #2]
 800630a:	021b      	lsls	r3, r3, #8
 800630c:	430b      	orrs	r3, r1
 800630e:	4967      	ldr	r1, [pc, #412]	@ (80064ac <MX_LWIP_Init+0x224>)
 8006310:	78c9      	ldrb	r1, [r1, #3]
 8006312:	430b      	orrs	r3, r1
 8006314:	021b      	lsls	r3, r3, #8
 8006316:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800631a:	431a      	orrs	r2, r3
 800631c:	4b63      	ldr	r3, [pc, #396]	@ (80064ac <MX_LWIP_Init+0x224>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	0619      	lsls	r1, r3, #24
 8006322:	4b62      	ldr	r3, [pc, #392]	@ (80064ac <MX_LWIP_Init+0x224>)
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	041b      	lsls	r3, r3, #16
 8006328:	4319      	orrs	r1, r3
 800632a:	4b60      	ldr	r3, [pc, #384]	@ (80064ac <MX_LWIP_Init+0x224>)
 800632c:	789b      	ldrb	r3, [r3, #2]
 800632e:	021b      	lsls	r3, r3, #8
 8006330:	430b      	orrs	r3, r1
 8006332:	495e      	ldr	r1, [pc, #376]	@ (80064ac <MX_LWIP_Init+0x224>)
 8006334:	78c9      	ldrb	r1, [r1, #3]
 8006336:	430b      	orrs	r3, r1
 8006338:	0a1b      	lsrs	r3, r3, #8
 800633a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800633e:	431a      	orrs	r2, r3
 8006340:	4b5a      	ldr	r3, [pc, #360]	@ (80064ac <MX_LWIP_Init+0x224>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	0619      	lsls	r1, r3, #24
 8006346:	4b59      	ldr	r3, [pc, #356]	@ (80064ac <MX_LWIP_Init+0x224>)
 8006348:	785b      	ldrb	r3, [r3, #1]
 800634a:	041b      	lsls	r3, r3, #16
 800634c:	4319      	orrs	r1, r3
 800634e:	4b57      	ldr	r3, [pc, #348]	@ (80064ac <MX_LWIP_Init+0x224>)
 8006350:	789b      	ldrb	r3, [r3, #2]
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	430b      	orrs	r3, r1
 8006356:	4955      	ldr	r1, [pc, #340]	@ (80064ac <MX_LWIP_Init+0x224>)
 8006358:	78c9      	ldrb	r1, [r1, #3]
 800635a:	430b      	orrs	r3, r1
 800635c:	0e1b      	lsrs	r3, r3, #24
 800635e:	4313      	orrs	r3, r2
 8006360:	4a55      	ldr	r2, [pc, #340]	@ (80064b8 <MX_LWIP_Init+0x230>)
 8006362:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006364:	4b52      	ldr	r3, [pc, #328]	@ (80064b0 <MX_LWIP_Init+0x228>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	061a      	lsls	r2, r3, #24
 800636a:	4b51      	ldr	r3, [pc, #324]	@ (80064b0 <MX_LWIP_Init+0x228>)
 800636c:	785b      	ldrb	r3, [r3, #1]
 800636e:	041b      	lsls	r3, r3, #16
 8006370:	431a      	orrs	r2, r3
 8006372:	4b4f      	ldr	r3, [pc, #316]	@ (80064b0 <MX_LWIP_Init+0x228>)
 8006374:	789b      	ldrb	r3, [r3, #2]
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	4313      	orrs	r3, r2
 800637a:	4a4d      	ldr	r2, [pc, #308]	@ (80064b0 <MX_LWIP_Init+0x228>)
 800637c:	78d2      	ldrb	r2, [r2, #3]
 800637e:	4313      	orrs	r3, r2
 8006380:	061a      	lsls	r2, r3, #24
 8006382:	4b4b      	ldr	r3, [pc, #300]	@ (80064b0 <MX_LWIP_Init+0x228>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	0619      	lsls	r1, r3, #24
 8006388:	4b49      	ldr	r3, [pc, #292]	@ (80064b0 <MX_LWIP_Init+0x228>)
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	041b      	lsls	r3, r3, #16
 800638e:	4319      	orrs	r1, r3
 8006390:	4b47      	ldr	r3, [pc, #284]	@ (80064b0 <MX_LWIP_Init+0x228>)
 8006392:	789b      	ldrb	r3, [r3, #2]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	430b      	orrs	r3, r1
 8006398:	4945      	ldr	r1, [pc, #276]	@ (80064b0 <MX_LWIP_Init+0x228>)
 800639a:	78c9      	ldrb	r1, [r1, #3]
 800639c:	430b      	orrs	r3, r1
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80063a4:	431a      	orrs	r2, r3
 80063a6:	4b42      	ldr	r3, [pc, #264]	@ (80064b0 <MX_LWIP_Init+0x228>)
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	0619      	lsls	r1, r3, #24
 80063ac:	4b40      	ldr	r3, [pc, #256]	@ (80064b0 <MX_LWIP_Init+0x228>)
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	041b      	lsls	r3, r3, #16
 80063b2:	4319      	orrs	r1, r3
 80063b4:	4b3e      	ldr	r3, [pc, #248]	@ (80064b0 <MX_LWIP_Init+0x228>)
 80063b6:	789b      	ldrb	r3, [r3, #2]
 80063b8:	021b      	lsls	r3, r3, #8
 80063ba:	430b      	orrs	r3, r1
 80063bc:	493c      	ldr	r1, [pc, #240]	@ (80064b0 <MX_LWIP_Init+0x228>)
 80063be:	78c9      	ldrb	r1, [r1, #3]
 80063c0:	430b      	orrs	r3, r1
 80063c2:	0a1b      	lsrs	r3, r3, #8
 80063c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80063c8:	431a      	orrs	r2, r3
 80063ca:	4b39      	ldr	r3, [pc, #228]	@ (80064b0 <MX_LWIP_Init+0x228>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	0619      	lsls	r1, r3, #24
 80063d0:	4b37      	ldr	r3, [pc, #220]	@ (80064b0 <MX_LWIP_Init+0x228>)
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	041b      	lsls	r3, r3, #16
 80063d6:	4319      	orrs	r1, r3
 80063d8:	4b35      	ldr	r3, [pc, #212]	@ (80064b0 <MX_LWIP_Init+0x228>)
 80063da:	789b      	ldrb	r3, [r3, #2]
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	430b      	orrs	r3, r1
 80063e0:	4933      	ldr	r1, [pc, #204]	@ (80064b0 <MX_LWIP_Init+0x228>)
 80063e2:	78c9      	ldrb	r1, [r1, #3]
 80063e4:	430b      	orrs	r3, r1
 80063e6:	0e1b      	lsrs	r3, r3, #24
 80063e8:	4313      	orrs	r3, r2
 80063ea:	4a34      	ldr	r2, [pc, #208]	@ (80064bc <MX_LWIP_Init+0x234>)
 80063ec:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80063ee:	4b31      	ldr	r3, [pc, #196]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	061a      	lsls	r2, r3, #24
 80063f4:	4b2f      	ldr	r3, [pc, #188]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 80063f6:	785b      	ldrb	r3, [r3, #1]
 80063f8:	041b      	lsls	r3, r3, #16
 80063fa:	431a      	orrs	r2, r3
 80063fc:	4b2d      	ldr	r3, [pc, #180]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 80063fe:	789b      	ldrb	r3, [r3, #2]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	4313      	orrs	r3, r2
 8006404:	4a2b      	ldr	r2, [pc, #172]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 8006406:	78d2      	ldrb	r2, [r2, #3]
 8006408:	4313      	orrs	r3, r2
 800640a:	061a      	lsls	r2, r3, #24
 800640c:	4b29      	ldr	r3, [pc, #164]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	0619      	lsls	r1, r3, #24
 8006412:	4b28      	ldr	r3, [pc, #160]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	041b      	lsls	r3, r3, #16
 8006418:	4319      	orrs	r1, r3
 800641a:	4b26      	ldr	r3, [pc, #152]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 800641c:	789b      	ldrb	r3, [r3, #2]
 800641e:	021b      	lsls	r3, r3, #8
 8006420:	430b      	orrs	r3, r1
 8006422:	4924      	ldr	r1, [pc, #144]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 8006424:	78c9      	ldrb	r1, [r1, #3]
 8006426:	430b      	orrs	r3, r1
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800642e:	431a      	orrs	r2, r3
 8006430:	4b20      	ldr	r3, [pc, #128]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	0619      	lsls	r1, r3, #24
 8006436:	4b1f      	ldr	r3, [pc, #124]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 8006438:	785b      	ldrb	r3, [r3, #1]
 800643a:	041b      	lsls	r3, r3, #16
 800643c:	4319      	orrs	r1, r3
 800643e:	4b1d      	ldr	r3, [pc, #116]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 8006440:	789b      	ldrb	r3, [r3, #2]
 8006442:	021b      	lsls	r3, r3, #8
 8006444:	430b      	orrs	r3, r1
 8006446:	491b      	ldr	r1, [pc, #108]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 8006448:	78c9      	ldrb	r1, [r1, #3]
 800644a:	430b      	orrs	r3, r1
 800644c:	0a1b      	lsrs	r3, r3, #8
 800644e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006452:	431a      	orrs	r2, r3
 8006454:	4b17      	ldr	r3, [pc, #92]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	0619      	lsls	r1, r3, #24
 800645a:	4b16      	ldr	r3, [pc, #88]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	041b      	lsls	r3, r3, #16
 8006460:	4319      	orrs	r1, r3
 8006462:	4b14      	ldr	r3, [pc, #80]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 8006464:	789b      	ldrb	r3, [r3, #2]
 8006466:	021b      	lsls	r3, r3, #8
 8006468:	430b      	orrs	r3, r1
 800646a:	4912      	ldr	r1, [pc, #72]	@ (80064b4 <MX_LWIP_Init+0x22c>)
 800646c:	78c9      	ldrb	r1, [r1, #3]
 800646e:	430b      	orrs	r3, r1
 8006470:	0e1b      	lsrs	r3, r3, #24
 8006472:	4313      	orrs	r3, r2
 8006474:	4a12      	ldr	r2, [pc, #72]	@ (80064c0 <MX_LWIP_Init+0x238>)
 8006476:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006478:	4b12      	ldr	r3, [pc, #72]	@ (80064c4 <MX_LWIP_Init+0x23c>)
 800647a:	9302      	str	r3, [sp, #8]
 800647c:	4b12      	ldr	r3, [pc, #72]	@ (80064c8 <MX_LWIP_Init+0x240>)
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	2300      	movs	r3, #0
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	4b0e      	ldr	r3, [pc, #56]	@ (80064c0 <MX_LWIP_Init+0x238>)
 8006486:	4a0d      	ldr	r2, [pc, #52]	@ (80064bc <MX_LWIP_Init+0x234>)
 8006488:	490b      	ldr	r1, [pc, #44]	@ (80064b8 <MX_LWIP_Init+0x230>)
 800648a:	4810      	ldr	r0, [pc, #64]	@ (80064cc <MX_LWIP_Init+0x244>)
 800648c:	f001 f912 	bl	80076b4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006490:	480e      	ldr	r0, [pc, #56]	@ (80064cc <MX_LWIP_Init+0x244>)
 8006492:	f001 fac1 	bl	8007a18 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006496:	480d      	ldr	r0, [pc, #52]	@ (80064cc <MX_LWIP_Init+0x244>)
 8006498:	f001 face 	bl	8007a38 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800649c:	490c      	ldr	r1, [pc, #48]	@ (80064d0 <MX_LWIP_Init+0x248>)
 800649e:	480b      	ldr	r0, [pc, #44]	@ (80064cc <MX_LWIP_Init+0x244>)
 80064a0:	f001 fbcc 	bl	8007c3c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80064a4:	bf00      	nop
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	200008f4 	.word	0x200008f4
 80064b0:	200008f8 	.word	0x200008f8
 80064b4:	200008fc 	.word	0x200008fc
 80064b8:	200008e8 	.word	0x200008e8
 80064bc:	200008ec 	.word	0x200008ec
 80064c0:	200008f0 	.word	0x200008f0
 80064c4:	08010cd5 	.word	0x08010cd5
 80064c8:	080067f1 	.word	0x080067f1
 80064cc:	200008b4 	.word	0x200008b4
 80064d0:	08006525 	.word	0x08006525

080064d4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80064dc:	f7fb fbf0 	bl	8001cc0 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	4b08      	ldr	r3, [pc, #32]	@ (8006504 <Ethernet_Link_Periodic_Handle+0x30>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	2b63      	cmp	r3, #99	@ 0x63
 80064ea:	d907      	bls.n	80064fc <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80064ec:	f7fb fbe8 	bl	8001cc0 <HAL_GetTick>
 80064f0:	4603      	mov	r3, r0
 80064f2:	4a04      	ldr	r2, [pc, #16]	@ (8006504 <Ethernet_Link_Periodic_Handle+0x30>)
 80064f4:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fac6 	bl	8006a88 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80064fc:	bf00      	nop
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	200008b0 	.word	0x200008b0

08006508 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800650c:	4804      	ldr	r0, [pc, #16]	@ (8006520 <MX_LWIP_Process+0x18>)
 800650e:	f000 f94f 	bl	80067b0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8006512:	f007 fca3 	bl	800de5c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8006516:	4802      	ldr	r0, [pc, #8]	@ (8006520 <MX_LWIP_Process+0x18>)
 8006518:	f7ff ffdc 	bl	80064d4 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800651c:	bf00      	nop
 800651e:	bd80      	pop	{r7, pc}
 8006520:	200008b4 	.word	0x200008b4

08006524 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006544:	4b44      	ldr	r3, [pc, #272]	@ (8006658 <low_level_init+0x120>)
 8006546:	4a45      	ldr	r2, [pc, #276]	@ (800665c <low_level_init+0x124>)
 8006548:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x50;
 800654a:	2350      	movs	r3, #80	@ 0x50
 800654c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x39;
 800654e:	2339      	movs	r3, #57	@ 0x39
 8006550:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x64;
 8006552:	2364      	movs	r3, #100	@ 0x64
 8006554:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xFD;
 8006556:	23fd      	movs	r3, #253	@ 0xfd
 8006558:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x60;
 800655a:	2360      	movs	r3, #96	@ 0x60
 800655c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800655e:	2300      	movs	r3, #0
 8006560:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006562:	4a3d      	ldr	r2, [pc, #244]	@ (8006658 <low_level_init+0x120>)
 8006564:	f107 0308 	add.w	r3, r7, #8
 8006568:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800656a:	4b3b      	ldr	r3, [pc, #236]	@ (8006658 <low_level_init+0x120>)
 800656c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006570:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006572:	4b39      	ldr	r3, [pc, #228]	@ (8006658 <low_level_init+0x120>)
 8006574:	4a3a      	ldr	r2, [pc, #232]	@ (8006660 <low_level_init+0x128>)
 8006576:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006578:	4b37      	ldr	r3, [pc, #220]	@ (8006658 <low_level_init+0x120>)
 800657a:	4a3a      	ldr	r2, [pc, #232]	@ (8006664 <low_level_init+0x12c>)
 800657c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800657e:	4b36      	ldr	r3, [pc, #216]	@ (8006658 <low_level_init+0x120>)
 8006580:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006584:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006586:	4834      	ldr	r0, [pc, #208]	@ (8006658 <low_level_init+0x120>)
 8006588:	f7fc f8b4 	bl	80026f4 <HAL_ETH_Init>
 800658c:	4603      	mov	r3, r0
 800658e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006590:	2238      	movs	r2, #56	@ 0x38
 8006592:	2100      	movs	r1, #0
 8006594:	4834      	ldr	r0, [pc, #208]	@ (8006668 <low_level_init+0x130>)
 8006596:	f00a fe14 	bl	80111c2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800659a:	4b33      	ldr	r3, [pc, #204]	@ (8006668 <low_level_init+0x130>)
 800659c:	2221      	movs	r2, #33	@ 0x21
 800659e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80065a0:	4b31      	ldr	r3, [pc, #196]	@ (8006668 <low_level_init+0x130>)
 80065a2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80065a6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80065a8:	4b2f      	ldr	r3, [pc, #188]	@ (8006668 <low_level_init+0x130>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80065ae:	482f      	ldr	r0, [pc, #188]	@ (800666c <low_level_init+0x134>)
 80065b0:	f000 ff48 	bl	8007444 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2206      	movs	r2, #6
 80065b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80065bc:	4b26      	ldr	r3, [pc, #152]	@ (8006658 <low_level_init+0x120>)
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	781a      	ldrb	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80065c8:	4b23      	ldr	r3, [pc, #140]	@ (8006658 <low_level_init+0x120>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	785a      	ldrb	r2, [r3, #1]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80065d4:	4b20      	ldr	r3, [pc, #128]	@ (8006658 <low_level_init+0x120>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	789a      	ldrb	r2, [r3, #2]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80065e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006658 <low_level_init+0x120>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	78da      	ldrb	r2, [r3, #3]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80065ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006658 <low_level_init+0x120>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	791a      	ldrb	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80065f8:	4b17      	ldr	r3, [pc, #92]	@ (8006658 <low_level_init+0x120>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	795a      	ldrb	r2, [r3, #5]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800660a:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006612:	f043 030a 	orr.w	r3, r3, #10
 8006616:	b2da      	uxtb	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800661e:	4914      	ldr	r1, [pc, #80]	@ (8006670 <low_level_init+0x138>)
 8006620:	4814      	ldr	r0, [pc, #80]	@ (8006674 <low_level_init+0x13c>)
 8006622:	f7fb f9e0 	bl	80019e6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8006626:	4813      	ldr	r0, [pc, #76]	@ (8006674 <low_level_init+0x13c>)
 8006628:	f7fb fa0f 	bl	8001a4a <LAN8742_Init>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d006      	beq.n	8006640 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 fad2 	bl	8007bdc <netif_set_link_down>
    netif_set_down(netif);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 fa69 	bl	8007b10 <netif_set_down>
 800663e:	e008      	b.n	8006652 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d103      	bne.n	800664e <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa1e 	bl	8006a88 <ethernet_link_check_state>
 800664c:	e001      	b.n	8006652 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800664e:	f7fa fd2d 	bl	80010ac <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	200053cc 	.word	0x200053cc
 800665c:	40028000 	.word	0x40028000
 8006660:	2000532c 	.word	0x2000532c
 8006664:	2000528c 	.word	0x2000528c
 8006668:	2000547c 	.word	0x2000547c
 800666c:	08014c94 	.word	0x08014c94
 8006670:	2000000c 	.word	0x2000000c
 8006674:	200054b4 	.word	0x200054b4

08006678 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b092      	sub	sp, #72	@ 0x48
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8006686:	2300      	movs	r3, #0
 8006688:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006690:	f107 030c 	add.w	r3, r7, #12
 8006694:	2230      	movs	r2, #48	@ 0x30
 8006696:	2100      	movs	r1, #0
 8006698:	4618      	mov	r0, r3
 800669a:	f00a fd92 	bl	80111c2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800669e:	f107 030c 	add.w	r3, r7, #12
 80066a2:	2230      	movs	r2, #48	@ 0x30
 80066a4:	2100      	movs	r1, #0
 80066a6:	4618      	mov	r0, r3
 80066a8:	f00a fd8b 	bl	80111c2 <memset>

  for(q = p; q != NULL; q = q->next)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80066b0:	e045      	b.n	800673e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80066b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d902      	bls.n	80066be <low_level_output+0x46>
      return ERR_IF;
 80066b8:	f06f 030b 	mvn.w	r3, #11
 80066bc:	e055      	b.n	800676a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80066be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c0:	6859      	ldr	r1, [r3, #4]
 80066c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066c4:	4613      	mov	r3, r2
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	4413      	add	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	3348      	adds	r3, #72	@ 0x48
 80066ce:	443b      	add	r3, r7
 80066d0:	3b3c      	subs	r3, #60	@ 0x3c
 80066d2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80066d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066d6:	895b      	ldrh	r3, [r3, #10]
 80066d8:	4619      	mov	r1, r3
 80066da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066dc:	4613      	mov	r3, r2
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	3348      	adds	r3, #72	@ 0x48
 80066e6:	443b      	add	r3, r7
 80066e8:	3b38      	subs	r3, #56	@ 0x38
 80066ea:	6019      	str	r1, [r3, #0]

    if(i>0)
 80066ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d011      	beq.n	8006716 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80066f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066f4:	1e5a      	subs	r2, r3, #1
 80066f6:	f107 000c 	add.w	r0, r7, #12
 80066fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80066fc:	460b      	mov	r3, r1
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	440b      	add	r3, r1
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	18c1      	adds	r1, r0, r3
 8006706:	4613      	mov	r3, r2
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	3348      	adds	r3, #72	@ 0x48
 8006710:	443b      	add	r3, r7
 8006712:	3b34      	subs	r3, #52	@ 0x34
 8006714:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800671e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006720:	4613      	mov	r3, r2
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	4413      	add	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	3348      	adds	r3, #72	@ 0x48
 800672a:	443b      	add	r3, r7
 800672c:	3b34      	subs	r3, #52	@ 0x34
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006734:	3301      	adds	r3, #1
 8006736:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8006738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	643b      	str	r3, [r7, #64]	@ 0x40
 800673e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1b6      	bne.n	80066b2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	891b      	ldrh	r3, [r3, #8]
 8006748:	461a      	mov	r2, r3
 800674a:	4b0a      	ldr	r3, [pc, #40]	@ (8006774 <low_level_output+0xfc>)
 800674c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800674e:	4a09      	ldr	r2, [pc, #36]	@ (8006774 <low_level_output+0xfc>)
 8006750:	f107 030c 	add.w	r3, r7, #12
 8006754:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006756:	4a07      	ldr	r2, [pc, #28]	@ (8006774 <low_level_output+0xfc>)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800675c:	2214      	movs	r2, #20
 800675e:	4905      	ldr	r1, [pc, #20]	@ (8006774 <low_level_output+0xfc>)
 8006760:	4805      	ldr	r0, [pc, #20]	@ (8006778 <low_level_output+0x100>)
 8006762:	f7fc f952 	bl	8002a0a <HAL_ETH_Transmit>

  return errval;
 8006766:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800676a:	4618      	mov	r0, r3
 800676c:	3748      	adds	r7, #72	@ 0x48
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	2000547c 	.word	0x2000547c
 8006778:	200053cc 	.word	0x200053cc

0800677c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006784:	2300      	movs	r3, #0
 8006786:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006788:	4b07      	ldr	r3, [pc, #28]	@ (80067a8 <low_level_input+0x2c>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d105      	bne.n	800679c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006790:	f107 030c 	add.w	r3, r7, #12
 8006794:	4619      	mov	r1, r3
 8006796:	4805      	ldr	r0, [pc, #20]	@ (80067ac <low_level_input+0x30>)
 8006798:	f7fc f9cb 	bl	8002b32 <HAL_ETH_ReadData>
  }

  return p;
 800679c:	68fb      	ldr	r3, [r7, #12]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20005288 	.word	0x20005288
 80067ac:	200053cc 	.word	0x200053cc

080067b0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff ffdd 	bl	800677c <low_level_input>
 80067c2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	4798      	blx	r3
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f001 fdae 	bl	800833c <pbuf_free>
      }
    }
  } while(p!=NULL);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1ea      	bne.n	80067bc <ethernetif_input+0xc>
}
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d106      	bne.n	800680c <ethernetif_init+0x1c>
 80067fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006838 <ethernetif_init+0x48>)
 8006800:	f240 126f 	movw	r2, #367	@ 0x16f
 8006804:	490d      	ldr	r1, [pc, #52]	@ (800683c <ethernetif_init+0x4c>)
 8006806:	480e      	ldr	r0, [pc, #56]	@ (8006840 <ethernetif_init+0x50>)
 8006808:	f00a fc3a 	bl	8011080 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2273      	movs	r2, #115	@ 0x73
 8006810:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2274      	movs	r2, #116	@ 0x74
 8006818:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a09      	ldr	r2, [pc, #36]	@ (8006844 <ethernetif_init+0x54>)
 8006820:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a08      	ldr	r2, [pc, #32]	@ (8006848 <ethernetif_init+0x58>)
 8006826:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7ff fe85 	bl	8006538 <low_level_init>

  return ERR_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	0801229c 	.word	0x0801229c
 800683c:	080122b8 	.word	0x080122b8
 8006840:	080122c8 	.word	0x080122c8
 8006844:	0800f18d 	.word	0x0800f18d
 8006848:	08006679 	.word	0x08006679

0800684c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006858:	68f9      	ldr	r1, [r7, #12]
 800685a:	4807      	ldr	r0, [pc, #28]	@ (8006878 <pbuf_free_custom+0x2c>)
 800685c:	f000 fed4 	bl	8007608 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006860:	4b06      	ldr	r3, [pc, #24]	@ (800687c <pbuf_free_custom+0x30>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d102      	bne.n	800686e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006868:	4b04      	ldr	r3, [pc, #16]	@ (800687c <pbuf_free_custom+0x30>)
 800686a:	2200      	movs	r2, #0
 800686c:	701a      	strb	r2, [r3, #0]
  }
}
 800686e:	bf00      	nop
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	08014c94 	.word	0x08014c94
 800687c:	20005288 	.word	0x20005288

08006880 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006884:	f7fb fa1c 	bl	8001cc0 <HAL_GetTick>
 8006888:	4603      	mov	r3, r0
}
 800688a:	4618      	mov	r0, r3
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08e      	sub	sp, #56	@ 0x38
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	605a      	str	r2, [r3, #4]
 80068a2:	609a      	str	r2, [r3, #8]
 80068a4:	60da      	str	r2, [r3, #12]
 80068a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a4a      	ldr	r2, [pc, #296]	@ (80069d8 <HAL_ETH_MspInit+0x148>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	f040 808d 	bne.w	80069ce <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80068b4:	2300      	movs	r3, #0
 80068b6:	623b      	str	r3, [r7, #32]
 80068b8:	4b48      	ldr	r3, [pc, #288]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 80068ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068bc:	4a47      	ldr	r2, [pc, #284]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 80068be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80068c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80068c4:	4b45      	ldr	r3, [pc, #276]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 80068c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068cc:	623b      	str	r3, [r7, #32]
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	2300      	movs	r3, #0
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	4b41      	ldr	r3, [pc, #260]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 80068d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d8:	4a40      	ldr	r2, [pc, #256]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 80068da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068de:	6313      	str	r3, [r2, #48]	@ 0x30
 80068e0:	4b3e      	ldr	r3, [pc, #248]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 80068e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80068e8:	61fb      	str	r3, [r7, #28]
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	2300      	movs	r3, #0
 80068ee:	61bb      	str	r3, [r7, #24]
 80068f0:	4b3a      	ldr	r3, [pc, #232]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 80068f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f4:	4a39      	ldr	r2, [pc, #228]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 80068f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80068fc:	4b37      	ldr	r3, [pc, #220]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 80068fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006908:	2300      	movs	r3, #0
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	4b33      	ldr	r3, [pc, #204]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 800690e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006910:	4a32      	ldr	r2, [pc, #200]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 8006912:	f043 0304 	orr.w	r3, r3, #4
 8006916:	6313      	str	r3, [r2, #48]	@ 0x30
 8006918:	4b30      	ldr	r3, [pc, #192]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 800691a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006924:	2300      	movs	r3, #0
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	4b2c      	ldr	r3, [pc, #176]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 800692a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800692c:	4a2b      	ldr	r2, [pc, #172]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 800692e:	f043 0301 	orr.w	r3, r3, #1
 8006932:	6313      	str	r3, [r2, #48]	@ 0x30
 8006934:	4b29      	ldr	r3, [pc, #164]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 8006936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	613b      	str	r3, [r7, #16]
 800693e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	4b25      	ldr	r3, [pc, #148]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 8006946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006948:	4a24      	ldr	r2, [pc, #144]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 800694a:	f043 0302 	orr.w	r3, r3, #2
 800694e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006950:	4b22      	ldr	r3, [pc, #136]	@ (80069dc <HAL_ETH_MspInit+0x14c>)
 8006952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800695c:	2332      	movs	r3, #50	@ 0x32
 800695e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006960:	2302      	movs	r3, #2
 8006962:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006964:	2300      	movs	r3, #0
 8006966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006968:	2303      	movs	r3, #3
 800696a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800696c:	230b      	movs	r3, #11
 800696e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006974:	4619      	mov	r1, r3
 8006976:	481a      	ldr	r0, [pc, #104]	@ (80069e0 <HAL_ETH_MspInit+0x150>)
 8006978:	f7fd f90c 	bl	8003b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800697c:	2386      	movs	r3, #134	@ 0x86
 800697e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006980:	2302      	movs	r3, #2
 8006982:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006984:	2300      	movs	r3, #0
 8006986:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006988:	2303      	movs	r3, #3
 800698a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800698c:	230b      	movs	r3, #11
 800698e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006994:	4619      	mov	r1, r3
 8006996:	4813      	ldr	r0, [pc, #76]	@ (80069e4 <HAL_ETH_MspInit+0x154>)
 8006998:	f7fd f8fc 	bl	8003b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800699c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80069a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069a2:	2302      	movs	r3, #2
 80069a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a6:	2300      	movs	r3, #0
 80069a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069aa:	2303      	movs	r3, #3
 80069ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80069ae:	230b      	movs	r3, #11
 80069b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069b6:	4619      	mov	r1, r3
 80069b8:	480b      	ldr	r0, [pc, #44]	@ (80069e8 <HAL_ETH_MspInit+0x158>)
 80069ba:	f7fd f8eb 	bl	8003b94 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80069be:	2200      	movs	r2, #0
 80069c0:	2100      	movs	r1, #0
 80069c2:	203d      	movs	r0, #61	@ 0x3d
 80069c4:	f7fb fde5 	bl	8002592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80069c8:	203d      	movs	r0, #61	@ 0x3d
 80069ca:	f7fb fdfe 	bl	80025ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80069ce:	bf00      	nop
 80069d0:	3738      	adds	r7, #56	@ 0x38
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	40028000 	.word	0x40028000
 80069dc:	40023800 	.word	0x40023800
 80069e0:	40020800 	.word	0x40020800
 80069e4:	40020000 	.word	0x40020000
 80069e8:	40020400 	.word	0x40020400

080069ec <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80069f0:	4802      	ldr	r0, [pc, #8]	@ (80069fc <ETH_PHY_IO_Init+0x10>)
 80069f2:	f7fc fc6b 	bl	80032cc <HAL_ETH_SetMDIOClockRange>

  return 0;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	200053cc 	.word	0x200053cc

08006a00 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
  return 0;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	68f9      	ldr	r1, [r7, #12]
 8006a22:	4807      	ldr	r0, [pc, #28]	@ (8006a40 <ETH_PHY_IO_ReadReg+0x30>)
 8006a24:	f7fc faac 	bl	8002f80 <HAL_ETH_ReadPHYRegister>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a32:	e000      	b.n	8006a36 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	200053cc 	.word	0x200053cc

08006a44 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	68f9      	ldr	r1, [r7, #12]
 8006a56:	4807      	ldr	r0, [pc, #28]	@ (8006a74 <ETH_PHY_IO_WriteReg+0x30>)
 8006a58:	f7fc fadd 	bl	8003016 <HAL_ETH_WritePHYRegister>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006a62:	f04f 33ff 	mov.w	r3, #4294967295
 8006a66:	e000      	b.n	8006a6a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	200053cc 	.word	0x200053cc

08006a78 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006a7c:	f7fb f920 	bl	8001cc0 <HAL_GetTick>
 8006a80:	4603      	mov	r3, r0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	bd80      	pop	{r7, pc}
	...

08006a88 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b0a0      	sub	sp, #128	@ 0x80
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006a90:	f107 030c 	add.w	r3, r7, #12
 8006a94:	2264      	movs	r2, #100	@ 0x64
 8006a96:	2100      	movs	r1, #0
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f00a fb92 	bl	80111c2 <memset>
  int32_t PHYLinkState = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006aaa:	2300      	movs	r3, #0
 8006aac:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006aae:	483a      	ldr	r0, [pc, #232]	@ (8006b98 <ethernet_link_check_state+0x110>)
 8006ab0:	f7fb f818 	bl	8001ae4 <LAN8742_GetLinkState>
 8006ab4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006abc:	089b      	lsrs	r3, r3, #2
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00c      	beq.n	8006ae2 <ethernet_link_check_state+0x5a>
 8006ac8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	dc09      	bgt.n	8006ae2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8006ace:	4833      	ldr	r0, [pc, #204]	@ (8006b9c <ethernet_link_check_state+0x114>)
 8006ad0:	f7fb ff1c 	bl	800290c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 f81b 	bl	8007b10 <netif_set_down>
    netif_set_link_down(netif);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 f87e 	bl	8007bdc <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8006ae0:	e055      	b.n	8006b8e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d14e      	bne.n	8006b8e <ethernet_link_check_state+0x106>
 8006af0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	dd4b      	ble.n	8006b8e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8006af6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006af8:	3b02      	subs	r3, #2
 8006afa:	2b03      	cmp	r3, #3
 8006afc:	d82a      	bhi.n	8006b54 <ethernet_link_check_state+0xcc>
 8006afe:	a201      	add	r2, pc, #4	@ (adr r2, 8006b04 <ethernet_link_check_state+0x7c>)
 8006b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b04:	08006b15 	.word	0x08006b15
 8006b08:	08006b27 	.word	0x08006b27
 8006b0c:	08006b37 	.word	0x08006b37
 8006b10:	08006b47 	.word	0x08006b47
      duplex = ETH_FULLDUPLEX_MODE;
 8006b14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006b18:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006b1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006b1e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006b20:	2301      	movs	r3, #1
 8006b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006b24:	e017      	b.n	8006b56 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006b26:	2300      	movs	r3, #0
 8006b28:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006b2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006b2e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006b30:	2301      	movs	r3, #1
 8006b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006b34:	e00f      	b.n	8006b56 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8006b36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006b3a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006b40:	2301      	movs	r3, #1
 8006b42:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006b44:	e007      	b.n	8006b56 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006b46:	2300      	movs	r3, #0
 8006b48:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006b52:	e000      	b.n	8006b56 <ethernet_link_check_state+0xce>
      break;
 8006b54:	bf00      	nop
    if(linkchanged)
 8006b56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d018      	beq.n	8006b8e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006b5c:	f107 030c 	add.w	r3, r7, #12
 8006b60:	4619      	mov	r1, r3
 8006b62:	480e      	ldr	r0, [pc, #56]	@ (8006b9c <ethernet_link_check_state+0x114>)
 8006b64:	f7fc faa0 	bl	80030a8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006b68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b6a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8006b6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b6e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006b70:	f107 030c 	add.w	r3, r7, #12
 8006b74:	4619      	mov	r1, r3
 8006b76:	4809      	ldr	r0, [pc, #36]	@ (8006b9c <ethernet_link_check_state+0x114>)
 8006b78:	f7fc fb8d 	bl	8003296 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006b7c:	4807      	ldr	r0, [pc, #28]	@ (8006b9c <ethernet_link_check_state+0x114>)
 8006b7e:	f7fb fe55 	bl	800282c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 ff58 	bl	8007a38 <netif_set_up>
      netif_set_link_up(netif);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fff3 	bl	8007b74 <netif_set_link_up>
}
 8006b8e:	bf00      	nop
 8006b90:	3780      	adds	r7, #128	@ 0x80
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	200054b4 	.word	0x200054b4
 8006b9c:	200053cc 	.word	0x200053cc

08006ba0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006ba8:	4812      	ldr	r0, [pc, #72]	@ (8006bf4 <HAL_ETH_RxAllocateCallback+0x54>)
 8006baa:	f000 fcbf 	bl	800752c <memp_malloc_pool>
 8006bae:	60f8      	str	r0, [r7, #12]
  if (p)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d014      	beq.n	8006be0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f103 0220 	add.w	r2, r3, #32
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8006bf8 <HAL_ETH_RxAllocateCallback+0x58>)
 8006bc4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006bce:	9201      	str	r2, [sp, #4]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2241      	movs	r2, #65	@ 0x41
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	2000      	movs	r0, #0
 8006bda:	f001 f9f5 	bl	8007fc8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006bde:	e005      	b.n	8006bec <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006be0:	4b06      	ldr	r3, [pc, #24]	@ (8006bfc <HAL_ETH_RxAllocateCallback+0x5c>)
 8006be2:	2201      	movs	r2, #1
 8006be4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
}
 8006bec:	bf00      	nop
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	08014c94 	.word	0x08014c94
 8006bf8:	0800684d 	.word	0x0800684d
 8006bfc:	20005288 	.word	0x20005288

08006c00 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b089      	sub	sp, #36	@ 0x24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
 8006c0c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	3b20      	subs	r3, #32
 8006c1e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	2200      	movs	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	887a      	ldrh	r2, [r7, #2]
 8006c30:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d103      	bne.n	8006c42 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	69fa      	ldr	r2, [r7, #28]
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	e003      	b.n	8006c4a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69fa      	ldr	r2, [r7, #28]
 8006c48:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	61fb      	str	r3, [r7, #28]
 8006c56:	e009      	b.n	8006c6c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	891a      	ldrh	r2, [r3, #8]
 8006c5c:	887b      	ldrh	r3, [r7, #2]
 8006c5e:	4413      	add	r3, r2
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	61fb      	str	r3, [r7, #28]
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f2      	bne.n	8006c58 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	3724      	adds	r7, #36	@ 0x24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	b21a      	sxth	r2, r3
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	0a1b      	lsrs	r3, r3, #8
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	b21b      	sxth	r3, r3
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	b21b      	sxth	r3, r3
 8006c9e:	b29b      	uxth	r3, r3
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	061a      	lsls	r2, r3, #24
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	0a1b      	lsrs	r3, r3, #8
 8006cc6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	0e1b      	lsrs	r3, r3, #24
 8006cd0:	4313      	orrs	r3, r2
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b082      	sub	sp, #8
 8006ce2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006ce8:	f000 f8d4 	bl	8006e94 <mem_init>
  memp_init();
 8006cec:	f000 fbda 	bl	80074a4 <memp_init>
  pbuf_init();
  netif_init();
 8006cf0:	f000 fcd8 	bl	80076a4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006cf4:	f007 f8f4 	bl	800dee0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006cf8:	f001 fe50 	bl	800899c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006cfc:	f007 f866 	bl	800ddcc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	4603      	mov	r3, r0
 8006d10:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006d12:	4b05      	ldr	r3, [pc, #20]	@ (8006d28 <ptr_to_mem+0x20>)
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	88fb      	ldrh	r3, [r7, #6]
 8006d18:	4413      	add	r3, r2
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	20005900 	.word	0x20005900

08006d2c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006d34:	4b05      	ldr	r3, [pc, #20]	@ (8006d4c <mem_to_ptr+0x20>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	b29b      	uxth	r3, r3
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	20005900 	.word	0x20005900

08006d50 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006d50:	b590      	push	{r4, r7, lr}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006d58:	4b45      	ldr	r3, [pc, #276]	@ (8006e70 <plug_holes+0x120>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d206      	bcs.n	8006d70 <plug_holes+0x20>
 8006d62:	4b44      	ldr	r3, [pc, #272]	@ (8006e74 <plug_holes+0x124>)
 8006d64:	f240 12df 	movw	r2, #479	@ 0x1df
 8006d68:	4943      	ldr	r1, [pc, #268]	@ (8006e78 <plug_holes+0x128>)
 8006d6a:	4844      	ldr	r0, [pc, #272]	@ (8006e7c <plug_holes+0x12c>)
 8006d6c:	f00a f988 	bl	8011080 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006d70:	4b43      	ldr	r3, [pc, #268]	@ (8006e80 <plug_holes+0x130>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d306      	bcc.n	8006d88 <plug_holes+0x38>
 8006d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e74 <plug_holes+0x124>)
 8006d7c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006d80:	4940      	ldr	r1, [pc, #256]	@ (8006e84 <plug_holes+0x134>)
 8006d82:	483e      	ldr	r0, [pc, #248]	@ (8006e7c <plug_holes+0x12c>)
 8006d84:	f00a f97c 	bl	8011080 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	791b      	ldrb	r3, [r3, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d006      	beq.n	8006d9e <plug_holes+0x4e>
 8006d90:	4b38      	ldr	r3, [pc, #224]	@ (8006e74 <plug_holes+0x124>)
 8006d92:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8006d96:	493c      	ldr	r1, [pc, #240]	@ (8006e88 <plug_holes+0x138>)
 8006d98:	4838      	ldr	r0, [pc, #224]	@ (8006e7c <plug_holes+0x12c>)
 8006d9a:	f00a f971 	bl	8011080 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006da6:	d906      	bls.n	8006db6 <plug_holes+0x66>
 8006da8:	4b32      	ldr	r3, [pc, #200]	@ (8006e74 <plug_holes+0x124>)
 8006daa:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8006dae:	4937      	ldr	r1, [pc, #220]	@ (8006e8c <plug_holes+0x13c>)
 8006db0:	4832      	ldr	r0, [pc, #200]	@ (8006e7c <plug_holes+0x12c>)
 8006db2:	f00a f965 	bl	8011080 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff ffa4 	bl	8006d08 <ptr_to_mem>
 8006dc0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d024      	beq.n	8006e14 <plug_holes+0xc4>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	791b      	ldrb	r3, [r3, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d120      	bne.n	8006e14 <plug_holes+0xc4>
 8006dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8006e80 <plug_holes+0x130>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d01b      	beq.n	8006e14 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006ddc:	4b2c      	ldr	r3, [pc, #176]	@ (8006e90 <plug_holes+0x140>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d102      	bne.n	8006dec <plug_holes+0x9c>
      lfree = mem;
 8006de6:	4a2a      	ldr	r2, [pc, #168]	@ (8006e90 <plug_holes+0x140>)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	881a      	ldrh	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dfc:	d00a      	beq.n	8006e14 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7ff ff80 	bl	8006d08 <ptr_to_mem>
 8006e08:	4604      	mov	r4, r0
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff ff8e 	bl	8006d2c <mem_to_ptr>
 8006e10:	4603      	mov	r3, r0
 8006e12:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	885b      	ldrh	r3, [r3, #2]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7ff ff75 	bl	8006d08 <ptr_to_mem>
 8006e1e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d01f      	beq.n	8006e68 <plug_holes+0x118>
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	791b      	ldrb	r3, [r3, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d11b      	bne.n	8006e68 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006e30:	4b17      	ldr	r3, [pc, #92]	@ (8006e90 <plug_holes+0x140>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d102      	bne.n	8006e40 <plug_holes+0xf0>
      lfree = pmem;
 8006e3a:	4a15      	ldr	r2, [pc, #84]	@ (8006e90 <plug_holes+0x140>)
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	881a      	ldrh	r2, [r3, #0]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e50:	d00a      	beq.n	8006e68 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7ff ff56 	bl	8006d08 <ptr_to_mem>
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	68b8      	ldr	r0, [r7, #8]
 8006e60:	f7ff ff64 	bl	8006d2c <mem_to_ptr>
 8006e64:	4603      	mov	r3, r0
 8006e66:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006e68:	bf00      	nop
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd90      	pop	{r4, r7, pc}
 8006e70:	20005900 	.word	0x20005900
 8006e74:	080122f0 	.word	0x080122f0
 8006e78:	08012320 	.word	0x08012320
 8006e7c:	08012338 	.word	0x08012338
 8006e80:	20005904 	.word	0x20005904
 8006e84:	08012360 	.word	0x08012360
 8006e88:	0801237c 	.word	0x0801237c
 8006e8c:	08012398 	.word	0x08012398
 8006e90:	20005908 	.word	0x20005908

08006e94 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006e9a:	4b18      	ldr	r3, [pc, #96]	@ (8006efc <mem_init+0x68>)
 8006e9c:	3303      	adds	r3, #3
 8006e9e:	f023 0303 	bic.w	r3, r3, #3
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	4b16      	ldr	r3, [pc, #88]	@ (8006f00 <mem_init+0x6c>)
 8006ea6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006ea8:	4b15      	ldr	r3, [pc, #84]	@ (8006f00 <mem_init+0x6c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006eb4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006ec2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006ec6:	f7ff ff1f 	bl	8006d08 <ptr_to_mem>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8006f04 <mem_init+0x70>)
 8006ece:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8006f04 <mem_init+0x70>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8006f04 <mem_init+0x70>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006ee0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006ee2:	4b08      	ldr	r3, [pc, #32]	@ (8006f04 <mem_init+0x70>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006eea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006eec:	4b04      	ldr	r3, [pc, #16]	@ (8006f00 <mem_init+0x6c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a05      	ldr	r2, [pc, #20]	@ (8006f08 <mem_init+0x74>)
 8006ef2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006ef4:	bf00      	nop
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	200054ec 	.word	0x200054ec
 8006f00:	20005900 	.word	0x20005900
 8006f04:	20005904 	.word	0x20005904
 8006f08:	20005908 	.word	0x20005908

08006f0c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff ff09 	bl	8006d2c <mem_to_ptr>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff fef0 	bl	8006d08 <ptr_to_mem>
 8006f28:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	885b      	ldrh	r3, [r3, #2]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7ff feea 	bl	8006d08 <ptr_to_mem>
 8006f34:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f3e:	d818      	bhi.n	8006f72 <mem_link_valid+0x66>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	885b      	ldrh	r3, [r3, #2]
 8006f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f48:	d813      	bhi.n	8006f72 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006f4e:	8afa      	ldrh	r2, [r7, #22]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d004      	beq.n	8006f5e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	8afa      	ldrh	r2, [r7, #22]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d109      	bne.n	8006f72 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006f5e:	4b08      	ldr	r3, [pc, #32]	@ (8006f80 <mem_link_valid+0x74>)
 8006f60:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d006      	beq.n	8006f76 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	885b      	ldrh	r3, [r3, #2]
 8006f6c:	8afa      	ldrh	r2, [r7, #22]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d001      	beq.n	8006f76 <mem_link_valid+0x6a>
    return 0;
 8006f72:	2300      	movs	r3, #0
 8006f74:	e000      	b.n	8006f78 <mem_link_valid+0x6c>
  }
  return 1;
 8006f76:	2301      	movs	r3, #1
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20005904 	.word	0x20005904

08006f84 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d04c      	beq.n	800702c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f003 0303 	and.w	r3, r3, #3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d007      	beq.n	8006fac <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006f9c:	4b25      	ldr	r3, [pc, #148]	@ (8007034 <mem_free+0xb0>)
 8006f9e:	f240 2273 	movw	r2, #627	@ 0x273
 8006fa2:	4925      	ldr	r1, [pc, #148]	@ (8007038 <mem_free+0xb4>)
 8006fa4:	4825      	ldr	r0, [pc, #148]	@ (800703c <mem_free+0xb8>)
 8006fa6:	f00a f86b 	bl	8011080 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006faa:	e040      	b.n	800702e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3b08      	subs	r3, #8
 8006fb0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006fb2:	4b23      	ldr	r3, [pc, #140]	@ (8007040 <mem_free+0xbc>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d306      	bcc.n	8006fca <mem_free+0x46>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f103 020c 	add.w	r2, r3, #12
 8006fc2:	4b20      	ldr	r3, [pc, #128]	@ (8007044 <mem_free+0xc0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d907      	bls.n	8006fda <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006fca:	4b1a      	ldr	r3, [pc, #104]	@ (8007034 <mem_free+0xb0>)
 8006fcc:	f240 227f 	movw	r2, #639	@ 0x27f
 8006fd0:	491d      	ldr	r1, [pc, #116]	@ (8007048 <mem_free+0xc4>)
 8006fd2:	481a      	ldr	r0, [pc, #104]	@ (800703c <mem_free+0xb8>)
 8006fd4:	f00a f854 	bl	8011080 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006fd8:	e029      	b.n	800702e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	791b      	ldrb	r3, [r3, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d107      	bne.n	8006ff2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006fe2:	4b14      	ldr	r3, [pc, #80]	@ (8007034 <mem_free+0xb0>)
 8006fe4:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8006fe8:	4918      	ldr	r1, [pc, #96]	@ (800704c <mem_free+0xc8>)
 8006fea:	4814      	ldr	r0, [pc, #80]	@ (800703c <mem_free+0xb8>)
 8006fec:	f00a f848 	bl	8011080 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006ff0:	e01d      	b.n	800702e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f7ff ff8a 	bl	8006f0c <mem_link_valid>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d107      	bne.n	800700e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8007034 <mem_free+0xb0>)
 8007000:	f240 2295 	movw	r2, #661	@ 0x295
 8007004:	4912      	ldr	r1, [pc, #72]	@ (8007050 <mem_free+0xcc>)
 8007006:	480d      	ldr	r0, [pc, #52]	@ (800703c <mem_free+0xb8>)
 8007008:	f00a f83a 	bl	8011080 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800700c:	e00f      	b.n	800702e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007014:	4b0f      	ldr	r3, [pc, #60]	@ (8007054 <mem_free+0xd0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	429a      	cmp	r2, r3
 800701c:	d202      	bcs.n	8007024 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800701e:	4a0d      	ldr	r2, [pc, #52]	@ (8007054 <mem_free+0xd0>)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff fe93 	bl	8006d50 <plug_holes>
 800702a:	e000      	b.n	800702e <mem_free+0xaa>
    return;
 800702c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	080122f0 	.word	0x080122f0
 8007038:	080123c4 	.word	0x080123c4
 800703c:	08012338 	.word	0x08012338
 8007040:	20005900 	.word	0x20005900
 8007044:	20005904 	.word	0x20005904
 8007048:	080123e8 	.word	0x080123e8
 800704c:	08012404 	.word	0x08012404
 8007050:	0801242c 	.word	0x0801242c
 8007054:	20005908 	.word	0x20005908

08007058 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b088      	sub	sp, #32
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007064:	887b      	ldrh	r3, [r7, #2]
 8007066:	3303      	adds	r3, #3
 8007068:	b29b      	uxth	r3, r3
 800706a:	f023 0303 	bic.w	r3, r3, #3
 800706e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007070:	8bfb      	ldrh	r3, [r7, #30]
 8007072:	2b0b      	cmp	r3, #11
 8007074:	d801      	bhi.n	800707a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007076:	230c      	movs	r3, #12
 8007078:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800707a:	8bfb      	ldrh	r3, [r7, #30]
 800707c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007080:	d803      	bhi.n	800708a <mem_trim+0x32>
 8007082:	8bfa      	ldrh	r2, [r7, #30]
 8007084:	887b      	ldrh	r3, [r7, #2]
 8007086:	429a      	cmp	r2, r3
 8007088:	d201      	bcs.n	800708e <mem_trim+0x36>
    return NULL;
 800708a:	2300      	movs	r3, #0
 800708c:	e0cc      	b.n	8007228 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800708e:	4b68      	ldr	r3, [pc, #416]	@ (8007230 <mem_trim+0x1d8>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	429a      	cmp	r2, r3
 8007096:	d304      	bcc.n	80070a2 <mem_trim+0x4a>
 8007098:	4b66      	ldr	r3, [pc, #408]	@ (8007234 <mem_trim+0x1dc>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d306      	bcc.n	80070b0 <mem_trim+0x58>
 80070a2:	4b65      	ldr	r3, [pc, #404]	@ (8007238 <mem_trim+0x1e0>)
 80070a4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80070a8:	4964      	ldr	r1, [pc, #400]	@ (800723c <mem_trim+0x1e4>)
 80070aa:	4865      	ldr	r0, [pc, #404]	@ (8007240 <mem_trim+0x1e8>)
 80070ac:	f009 ffe8 	bl	8011080 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80070b0:	4b5f      	ldr	r3, [pc, #380]	@ (8007230 <mem_trim+0x1d8>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d304      	bcc.n	80070c4 <mem_trim+0x6c>
 80070ba:	4b5e      	ldr	r3, [pc, #376]	@ (8007234 <mem_trim+0x1dc>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d301      	bcc.n	80070c8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	e0af      	b.n	8007228 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3b08      	subs	r3, #8
 80070cc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80070ce:	69b8      	ldr	r0, [r7, #24]
 80070d0:	f7ff fe2c 	bl	8006d2c <mem_to_ptr>
 80070d4:	4603      	mov	r3, r0
 80070d6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	881a      	ldrh	r2, [r3, #0]
 80070dc:	8afb      	ldrh	r3, [r7, #22]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b08      	subs	r3, #8
 80070e4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80070e6:	8bfa      	ldrh	r2, [r7, #30]
 80070e8:	8abb      	ldrh	r3, [r7, #20]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d906      	bls.n	80070fc <mem_trim+0xa4>
 80070ee:	4b52      	ldr	r3, [pc, #328]	@ (8007238 <mem_trim+0x1e0>)
 80070f0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80070f4:	4953      	ldr	r1, [pc, #332]	@ (8007244 <mem_trim+0x1ec>)
 80070f6:	4852      	ldr	r0, [pc, #328]	@ (8007240 <mem_trim+0x1e8>)
 80070f8:	f009 ffc2 	bl	8011080 <iprintf>
  if (newsize > size) {
 80070fc:	8bfa      	ldrh	r2, [r7, #30]
 80070fe:	8abb      	ldrh	r3, [r7, #20]
 8007100:	429a      	cmp	r2, r3
 8007102:	d901      	bls.n	8007108 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007104:	2300      	movs	r3, #0
 8007106:	e08f      	b.n	8007228 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007108:	8bfa      	ldrh	r2, [r7, #30]
 800710a:	8abb      	ldrh	r3, [r7, #20]
 800710c:	429a      	cmp	r2, r3
 800710e:	d101      	bne.n	8007114 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	e089      	b.n	8007228 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff fdf5 	bl	8006d08 <ptr_to_mem>
 800711e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	791b      	ldrb	r3, [r3, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d13f      	bne.n	80071a8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007130:	d106      	bne.n	8007140 <mem_trim+0xe8>
 8007132:	4b41      	ldr	r3, [pc, #260]	@ (8007238 <mem_trim+0x1e0>)
 8007134:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8007138:	4943      	ldr	r1, [pc, #268]	@ (8007248 <mem_trim+0x1f0>)
 800713a:	4841      	ldr	r0, [pc, #260]	@ (8007240 <mem_trim+0x1e8>)
 800713c:	f009 ffa0 	bl	8011080 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007146:	8afa      	ldrh	r2, [r7, #22]
 8007148:	8bfb      	ldrh	r3, [r7, #30]
 800714a:	4413      	add	r3, r2
 800714c:	b29b      	uxth	r3, r3
 800714e:	3308      	adds	r3, #8
 8007150:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007152:	4b3e      	ldr	r3, [pc, #248]	@ (800724c <mem_trim+0x1f4>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	429a      	cmp	r2, r3
 800715a:	d106      	bne.n	800716a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800715c:	89fb      	ldrh	r3, [r7, #14]
 800715e:	4618      	mov	r0, r3
 8007160:	f7ff fdd2 	bl	8006d08 <ptr_to_mem>
 8007164:	4603      	mov	r3, r0
 8007166:	4a39      	ldr	r2, [pc, #228]	@ (800724c <mem_trim+0x1f4>)
 8007168:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800716a:	89fb      	ldrh	r3, [r7, #14]
 800716c:	4618      	mov	r0, r3
 800716e:	f7ff fdcb 	bl	8006d08 <ptr_to_mem>
 8007172:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2200      	movs	r2, #0
 8007178:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	89ba      	ldrh	r2, [r7, #12]
 800717e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	8afa      	ldrh	r2, [r7, #22]
 8007184:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	89fa      	ldrh	r2, [r7, #14]
 800718a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007194:	d047      	beq.n	8007226 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fdb4 	bl	8006d08 <ptr_to_mem>
 80071a0:	4602      	mov	r2, r0
 80071a2:	89fb      	ldrh	r3, [r7, #14]
 80071a4:	8053      	strh	r3, [r2, #2]
 80071a6:	e03e      	b.n	8007226 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80071a8:	8bfb      	ldrh	r3, [r7, #30]
 80071aa:	f103 0214 	add.w	r2, r3, #20
 80071ae:	8abb      	ldrh	r3, [r7, #20]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d838      	bhi.n	8007226 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80071b4:	8afa      	ldrh	r2, [r7, #22]
 80071b6:	8bfb      	ldrh	r3, [r7, #30]
 80071b8:	4413      	add	r3, r2
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	3308      	adds	r3, #8
 80071be:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071c8:	d106      	bne.n	80071d8 <mem_trim+0x180>
 80071ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007238 <mem_trim+0x1e0>)
 80071cc:	f240 3216 	movw	r2, #790	@ 0x316
 80071d0:	491d      	ldr	r1, [pc, #116]	@ (8007248 <mem_trim+0x1f0>)
 80071d2:	481b      	ldr	r0, [pc, #108]	@ (8007240 <mem_trim+0x1e8>)
 80071d4:	f009 ff54 	bl	8011080 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80071d8:	89fb      	ldrh	r3, [r7, #14]
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff fd94 	bl	8006d08 <ptr_to_mem>
 80071e0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80071e2:	4b1a      	ldr	r3, [pc, #104]	@ (800724c <mem_trim+0x1f4>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d202      	bcs.n	80071f2 <mem_trim+0x19a>
      lfree = mem2;
 80071ec:	4a17      	ldr	r2, [pc, #92]	@ (800724c <mem_trim+0x1f4>)
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	2200      	movs	r2, #0
 80071f6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	881a      	ldrh	r2, [r3, #0]
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	8afa      	ldrh	r2, [r7, #22]
 8007204:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	89fa      	ldrh	r2, [r7, #14]
 800720a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007214:	d007      	beq.n	8007226 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff fd74 	bl	8006d08 <ptr_to_mem>
 8007220:	4602      	mov	r2, r0
 8007222:	89fb      	ldrh	r3, [r7, #14]
 8007224:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007226:	687b      	ldr	r3, [r7, #4]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3720      	adds	r7, #32
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20005900 	.word	0x20005900
 8007234:	20005904 	.word	0x20005904
 8007238:	080122f0 	.word	0x080122f0
 800723c:	08012460 	.word	0x08012460
 8007240:	08012338 	.word	0x08012338
 8007244:	08012478 	.word	0x08012478
 8007248:	08012498 	.word	0x08012498
 800724c:	20005908 	.word	0x20005908

08007250 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b088      	sub	sp, #32
 8007254:	af00      	add	r7, sp, #0
 8007256:	4603      	mov	r3, r0
 8007258:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <mem_malloc+0x14>
    return NULL;
 8007260:	2300      	movs	r3, #0
 8007262:	e0d9      	b.n	8007418 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007264:	88fb      	ldrh	r3, [r7, #6]
 8007266:	3303      	adds	r3, #3
 8007268:	b29b      	uxth	r3, r3
 800726a:	f023 0303 	bic.w	r3, r3, #3
 800726e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007270:	8bbb      	ldrh	r3, [r7, #28]
 8007272:	2b0b      	cmp	r3, #11
 8007274:	d801      	bhi.n	800727a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007276:	230c      	movs	r3, #12
 8007278:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800727a:	8bbb      	ldrh	r3, [r7, #28]
 800727c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007280:	d803      	bhi.n	800728a <mem_malloc+0x3a>
 8007282:	8bba      	ldrh	r2, [r7, #28]
 8007284:	88fb      	ldrh	r3, [r7, #6]
 8007286:	429a      	cmp	r2, r3
 8007288:	d201      	bcs.n	800728e <mem_malloc+0x3e>
    return NULL;
 800728a:	2300      	movs	r3, #0
 800728c:	e0c4      	b.n	8007418 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800728e:	4b64      	ldr	r3, [pc, #400]	@ (8007420 <mem_malloc+0x1d0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4618      	mov	r0, r3
 8007294:	f7ff fd4a 	bl	8006d2c <mem_to_ptr>
 8007298:	4603      	mov	r3, r0
 800729a:	83fb      	strh	r3, [r7, #30]
 800729c:	e0b4      	b.n	8007408 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800729e:	8bfb      	ldrh	r3, [r7, #30]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff fd31 	bl	8006d08 <ptr_to_mem>
 80072a6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	791b      	ldrb	r3, [r3, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f040 80a4 	bne.w	80073fa <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	8bfb      	ldrh	r3, [r7, #30]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	f1a3 0208 	sub.w	r2, r3, #8
 80072c0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80072c2:	429a      	cmp	r2, r3
 80072c4:	f0c0 8099 	bcc.w	80073fa <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	8bfb      	ldrh	r3, [r7, #30]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	f1a3 0208 	sub.w	r2, r3, #8
 80072d6:	8bbb      	ldrh	r3, [r7, #28]
 80072d8:	3314      	adds	r3, #20
 80072da:	429a      	cmp	r2, r3
 80072dc:	d333      	bcc.n	8007346 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80072de:	8bfa      	ldrh	r2, [r7, #30]
 80072e0:	8bbb      	ldrh	r3, [r7, #28]
 80072e2:	4413      	add	r3, r2
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	3308      	adds	r3, #8
 80072e8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80072ea:	8a7b      	ldrh	r3, [r7, #18]
 80072ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072f0:	d106      	bne.n	8007300 <mem_malloc+0xb0>
 80072f2:	4b4c      	ldr	r3, [pc, #304]	@ (8007424 <mem_malloc+0x1d4>)
 80072f4:	f240 3287 	movw	r2, #903	@ 0x387
 80072f8:	494b      	ldr	r1, [pc, #300]	@ (8007428 <mem_malloc+0x1d8>)
 80072fa:	484c      	ldr	r0, [pc, #304]	@ (800742c <mem_malloc+0x1dc>)
 80072fc:	f009 fec0 	bl	8011080 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007300:	8a7b      	ldrh	r3, [r7, #18]
 8007302:	4618      	mov	r0, r3
 8007304:	f7ff fd00 	bl	8006d08 <ptr_to_mem>
 8007308:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	881a      	ldrh	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8bfa      	ldrh	r2, [r7, #30]
 800731c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	8a7a      	ldrh	r2, [r7, #18]
 8007322:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2201      	movs	r2, #1
 8007328:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007332:	d00b      	beq.n	800734c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff fce5 	bl	8006d08 <ptr_to_mem>
 800733e:	4602      	mov	r2, r0
 8007340:	8a7b      	ldrh	r3, [r7, #18]
 8007342:	8053      	strh	r3, [r2, #2]
 8007344:	e002      	b.n	800734c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2201      	movs	r2, #1
 800734a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800734c:	4b34      	ldr	r3, [pc, #208]	@ (8007420 <mem_malloc+0x1d0>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	429a      	cmp	r2, r3
 8007354:	d127      	bne.n	80073a6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8007356:	4b32      	ldr	r3, [pc, #200]	@ (8007420 <mem_malloc+0x1d0>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800735c:	e005      	b.n	800736a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff fcd0 	bl	8006d08 <ptr_to_mem>
 8007368:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	791b      	ldrb	r3, [r3, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d004      	beq.n	800737c <mem_malloc+0x12c>
 8007372:	4b2f      	ldr	r3, [pc, #188]	@ (8007430 <mem_malloc+0x1e0>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	429a      	cmp	r2, r3
 800737a:	d1f0      	bne.n	800735e <mem_malloc+0x10e>
          }
          lfree = cur;
 800737c:	4a28      	ldr	r2, [pc, #160]	@ (8007420 <mem_malloc+0x1d0>)
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007382:	4b27      	ldr	r3, [pc, #156]	@ (8007420 <mem_malloc+0x1d0>)
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	4b2a      	ldr	r3, [pc, #168]	@ (8007430 <mem_malloc+0x1e0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	429a      	cmp	r2, r3
 800738c:	d00b      	beq.n	80073a6 <mem_malloc+0x156>
 800738e:	4b24      	ldr	r3, [pc, #144]	@ (8007420 <mem_malloc+0x1d0>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	791b      	ldrb	r3, [r3, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d006      	beq.n	80073a6 <mem_malloc+0x156>
 8007398:	4b22      	ldr	r3, [pc, #136]	@ (8007424 <mem_malloc+0x1d4>)
 800739a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800739e:	4925      	ldr	r1, [pc, #148]	@ (8007434 <mem_malloc+0x1e4>)
 80073a0:	4822      	ldr	r0, [pc, #136]	@ (800742c <mem_malloc+0x1dc>)
 80073a2:	f009 fe6d 	bl	8011080 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80073a6:	8bba      	ldrh	r2, [r7, #28]
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	4413      	add	r3, r2
 80073ac:	3308      	adds	r3, #8
 80073ae:	4a20      	ldr	r2, [pc, #128]	@ (8007430 <mem_malloc+0x1e0>)
 80073b0:	6812      	ldr	r2, [r2, #0]
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d906      	bls.n	80073c4 <mem_malloc+0x174>
 80073b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007424 <mem_malloc+0x1d4>)
 80073b8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80073bc:	491e      	ldr	r1, [pc, #120]	@ (8007438 <mem_malloc+0x1e8>)
 80073be:	481b      	ldr	r0, [pc, #108]	@ (800742c <mem_malloc+0x1dc>)
 80073c0:	f009 fe5e 	bl	8011080 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f003 0303 	and.w	r3, r3, #3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d006      	beq.n	80073dc <mem_malloc+0x18c>
 80073ce:	4b15      	ldr	r3, [pc, #84]	@ (8007424 <mem_malloc+0x1d4>)
 80073d0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80073d4:	4919      	ldr	r1, [pc, #100]	@ (800743c <mem_malloc+0x1ec>)
 80073d6:	4815      	ldr	r0, [pc, #84]	@ (800742c <mem_malloc+0x1dc>)
 80073d8:	f009 fe52 	bl	8011080 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f003 0303 	and.w	r3, r3, #3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d006      	beq.n	80073f4 <mem_malloc+0x1a4>
 80073e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007424 <mem_malloc+0x1d4>)
 80073e8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80073ec:	4914      	ldr	r1, [pc, #80]	@ (8007440 <mem_malloc+0x1f0>)
 80073ee:	480f      	ldr	r0, [pc, #60]	@ (800742c <mem_malloc+0x1dc>)
 80073f0:	f009 fe46 	bl	8011080 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	3308      	adds	r3, #8
 80073f8:	e00e      	b.n	8007418 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80073fa:	8bfb      	ldrh	r3, [r7, #30]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7ff fc83 	bl	8006d08 <ptr_to_mem>
 8007402:	4603      	mov	r3, r0
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007408:	8bfa      	ldrh	r2, [r7, #30]
 800740a:	8bbb      	ldrh	r3, [r7, #28]
 800740c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8007410:	429a      	cmp	r2, r3
 8007412:	f4ff af44 	bcc.w	800729e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3720      	adds	r7, #32
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	20005908 	.word	0x20005908
 8007424:	080122f0 	.word	0x080122f0
 8007428:	08012498 	.word	0x08012498
 800742c:	08012338 	.word	0x08012338
 8007430:	20005904 	.word	0x20005904
 8007434:	080124ac 	.word	0x080124ac
 8007438:	080124c8 	.word	0x080124c8
 800743c:	080124f8 	.word	0x080124f8
 8007440:	08012528 	.word	0x08012528

08007444 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	3303      	adds	r3, #3
 800745a:	f023 0303 	bic.w	r3, r3, #3
 800745e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e011      	b.n	800748a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	4413      	add	r3, r2
 8007482:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3301      	adds	r3, #1
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	885b      	ldrh	r3, [r3, #2]
 800748e:	461a      	mov	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4293      	cmp	r3, r2
 8007494:	dbe7      	blt.n	8007466 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007496:	bf00      	nop
 8007498:	bf00      	nop
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80074aa:	2300      	movs	r3, #0
 80074ac:	80fb      	strh	r3, [r7, #6]
 80074ae:	e009      	b.n	80074c4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80074b0:	88fb      	ldrh	r3, [r7, #6]
 80074b2:	4a08      	ldr	r2, [pc, #32]	@ (80074d4 <memp_init+0x30>)
 80074b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff ffc3 	bl	8007444 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80074be:	88fb      	ldrh	r3, [r7, #6]
 80074c0:	3301      	adds	r3, #1
 80074c2:	80fb      	strh	r3, [r7, #6]
 80074c4:	88fb      	ldrh	r3, [r7, #6]
 80074c6:	2b08      	cmp	r3, #8
 80074c8:	d9f2      	bls.n	80074b0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80074ca:	bf00      	nop
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	08014d0c 	.word	0x08014d0c

080074d8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d012      	beq.n	8007514 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	6812      	ldr	r2, [r2, #0]
 80074f6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d006      	beq.n	8007510 <do_memp_malloc_pool+0x38>
 8007502:	4b07      	ldr	r3, [pc, #28]	@ (8007520 <do_memp_malloc_pool+0x48>)
 8007504:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8007508:	4906      	ldr	r1, [pc, #24]	@ (8007524 <do_memp_malloc_pool+0x4c>)
 800750a:	4807      	ldr	r0, [pc, #28]	@ (8007528 <do_memp_malloc_pool+0x50>)
 800750c:	f009 fdb8 	bl	8011080 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	e000      	b.n	8007516 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	0801254c 	.word	0x0801254c
 8007524:	0801257c 	.word	0x0801257c
 8007528:	080125a0 	.word	0x080125a0

0800752c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <memp_malloc_pool+0x1c>
 800753a:	4b0a      	ldr	r3, [pc, #40]	@ (8007564 <memp_malloc_pool+0x38>)
 800753c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8007540:	4909      	ldr	r1, [pc, #36]	@ (8007568 <memp_malloc_pool+0x3c>)
 8007542:	480a      	ldr	r0, [pc, #40]	@ (800756c <memp_malloc_pool+0x40>)
 8007544:	f009 fd9c 	bl	8011080 <iprintf>
  if (desc == NULL) {
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <memp_malloc_pool+0x26>
    return NULL;
 800754e:	2300      	movs	r3, #0
 8007550:	e003      	b.n	800755a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7ff ffc0 	bl	80074d8 <do_memp_malloc_pool>
 8007558:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	0801254c 	.word	0x0801254c
 8007568:	080125c8 	.word	0x080125c8
 800756c:	080125a0 	.word	0x080125a0

08007570 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	4603      	mov	r3, r0
 8007578:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	2b08      	cmp	r3, #8
 800757e:	d908      	bls.n	8007592 <memp_malloc+0x22>
 8007580:	4b0a      	ldr	r3, [pc, #40]	@ (80075ac <memp_malloc+0x3c>)
 8007582:	f240 1257 	movw	r2, #343	@ 0x157
 8007586:	490a      	ldr	r1, [pc, #40]	@ (80075b0 <memp_malloc+0x40>)
 8007588:	480a      	ldr	r0, [pc, #40]	@ (80075b4 <memp_malloc+0x44>)
 800758a:	f009 fd79 	bl	8011080 <iprintf>
 800758e:	2300      	movs	r3, #0
 8007590:	e008      	b.n	80075a4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007592:	79fb      	ldrb	r3, [r7, #7]
 8007594:	4a08      	ldr	r2, [pc, #32]	@ (80075b8 <memp_malloc+0x48>)
 8007596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff ff9c 	bl	80074d8 <do_memp_malloc_pool>
 80075a0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80075a2:	68fb      	ldr	r3, [r7, #12]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	0801254c 	.word	0x0801254c
 80075b0:	080125dc 	.word	0x080125dc
 80075b4:	080125a0 	.word	0x080125a0
 80075b8:	08014d0c 	.word	0x08014d0c

080075bc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	f003 0303 	and.w	r3, r3, #3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d006      	beq.n	80075de <do_memp_free_pool+0x22>
 80075d0:	4b0a      	ldr	r3, [pc, #40]	@ (80075fc <do_memp_free_pool+0x40>)
 80075d2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80075d6:	490a      	ldr	r1, [pc, #40]	@ (8007600 <do_memp_free_pool+0x44>)
 80075d8:	480a      	ldr	r0, [pc, #40]	@ (8007604 <do_memp_free_pool+0x48>)
 80075da:	f009 fd51 	bl	8011080 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80075f4:	bf00      	nop
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	0801254c 	.word	0x0801254c
 8007600:	080125fc 	.word	0x080125fc
 8007604:	080125a0 	.word	0x080125a0

08007608 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d106      	bne.n	8007626 <memp_free_pool+0x1e>
 8007618:	4b0a      	ldr	r3, [pc, #40]	@ (8007644 <memp_free_pool+0x3c>)
 800761a:	f240 1295 	movw	r2, #405	@ 0x195
 800761e:	490a      	ldr	r1, [pc, #40]	@ (8007648 <memp_free_pool+0x40>)
 8007620:	480a      	ldr	r0, [pc, #40]	@ (800764c <memp_free_pool+0x44>)
 8007622:	f009 fd2d 	bl	8011080 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d007      	beq.n	800763c <memp_free_pool+0x34>
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d004      	beq.n	800763c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7ff ffc1 	bl	80075bc <do_memp_free_pool>
 800763a:	e000      	b.n	800763e <memp_free_pool+0x36>
    return;
 800763c:	bf00      	nop
}
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	0801254c 	.word	0x0801254c
 8007648:	080125c8 	.word	0x080125c8
 800764c:	080125a0 	.word	0x080125a0

08007650 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	6039      	str	r1, [r7, #0]
 800765a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800765c:	79fb      	ldrb	r3, [r7, #7]
 800765e:	2b08      	cmp	r3, #8
 8007660:	d907      	bls.n	8007672 <memp_free+0x22>
 8007662:	4b0c      	ldr	r3, [pc, #48]	@ (8007694 <memp_free+0x44>)
 8007664:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8007668:	490b      	ldr	r1, [pc, #44]	@ (8007698 <memp_free+0x48>)
 800766a:	480c      	ldr	r0, [pc, #48]	@ (800769c <memp_free+0x4c>)
 800766c:	f009 fd08 	bl	8011080 <iprintf>
 8007670:	e00c      	b.n	800768c <memp_free+0x3c>

  if (mem == NULL) {
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d008      	beq.n	800768a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	4a09      	ldr	r2, [pc, #36]	@ (80076a0 <memp_free+0x50>)
 800767c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff ff9a 	bl	80075bc <do_memp_free_pool>
 8007688:	e000      	b.n	800768c <memp_free+0x3c>
    return;
 800768a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	0801254c 	.word	0x0801254c
 8007698:	0801261c 	.word	0x0801261c
 800769c:	080125a0 	.word	0x080125a0
 80076a0:	08014d0c 	.word	0x08014d0c

080076a4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80076a8:	bf00      	nop
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
	...

080076b4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
 80076c0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d108      	bne.n	80076da <netif_add+0x26>
 80076c8:	4b57      	ldr	r3, [pc, #348]	@ (8007828 <netif_add+0x174>)
 80076ca:	f240 1227 	movw	r2, #295	@ 0x127
 80076ce:	4957      	ldr	r1, [pc, #348]	@ (800782c <netif_add+0x178>)
 80076d0:	4857      	ldr	r0, [pc, #348]	@ (8007830 <netif_add+0x17c>)
 80076d2:	f009 fcd5 	bl	8011080 <iprintf>
 80076d6:	2300      	movs	r3, #0
 80076d8:	e0a2      	b.n	8007820 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d108      	bne.n	80076f2 <netif_add+0x3e>
 80076e0:	4b51      	ldr	r3, [pc, #324]	@ (8007828 <netif_add+0x174>)
 80076e2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80076e6:	4953      	ldr	r1, [pc, #332]	@ (8007834 <netif_add+0x180>)
 80076e8:	4851      	ldr	r0, [pc, #324]	@ (8007830 <netif_add+0x17c>)
 80076ea:	f009 fcc9 	bl	8011080 <iprintf>
 80076ee:	2300      	movs	r3, #0
 80076f0:	e096      	b.n	8007820 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80076f8:	4b4f      	ldr	r3, [pc, #316]	@ (8007838 <netif_add+0x184>)
 80076fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007702:	4b4d      	ldr	r3, [pc, #308]	@ (8007838 <netif_add+0x184>)
 8007704:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800770c:	4b4a      	ldr	r3, [pc, #296]	@ (8007838 <netif_add+0x184>)
 800770e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4a45      	ldr	r2, [pc, #276]	@ (800783c <netif_add+0x188>)
 8007726:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a3a      	ldr	r2, [r7, #32]
 8007740:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007742:	4b3f      	ldr	r3, [pc, #252]	@ (8007840 <netif_add+0x18c>)
 8007744:	781a      	ldrb	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007750:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	68b9      	ldr	r1, [r7, #8]
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 f913 	bl	8007984 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800775e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	4798      	blx	r3
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <netif_add+0xba>
    return NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	e058      	b.n	8007820 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007774:	2bff      	cmp	r3, #255	@ 0xff
 8007776:	d103      	bne.n	8007780 <netif_add+0xcc>
        netif->num = 0;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007784:	4b2f      	ldr	r3, [pc, #188]	@ (8007844 <netif_add+0x190>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	e02b      	b.n	80077e4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	429a      	cmp	r2, r3
 8007792:	d106      	bne.n	80077a2 <netif_add+0xee>
 8007794:	4b24      	ldr	r3, [pc, #144]	@ (8007828 <netif_add+0x174>)
 8007796:	f240 128b 	movw	r2, #395	@ 0x18b
 800779a:	492b      	ldr	r1, [pc, #172]	@ (8007848 <netif_add+0x194>)
 800779c:	4824      	ldr	r0, [pc, #144]	@ (8007830 <netif_add+0x17c>)
 800779e:	f009 fc6f 	bl	8011080 <iprintf>
        num_netifs++;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	3301      	adds	r3, #1
 80077a6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	2bff      	cmp	r3, #255	@ 0xff
 80077ac:	dd06      	ble.n	80077bc <netif_add+0x108>
 80077ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007828 <netif_add+0x174>)
 80077b0:	f240 128d 	movw	r2, #397	@ 0x18d
 80077b4:	4925      	ldr	r1, [pc, #148]	@ (800784c <netif_add+0x198>)
 80077b6:	481e      	ldr	r0, [pc, #120]	@ (8007830 <netif_add+0x17c>)
 80077b8:	f009 fc62 	bl	8011080 <iprintf>
        if (netif2->num == netif->num) {
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d108      	bne.n	80077de <netif_add+0x12a>
          netif->num++;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80077d2:	3301      	adds	r3, #1
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80077dc:	e005      	b.n	80077ea <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	617b      	str	r3, [r7, #20]
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1d0      	bne.n	800778c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1be      	bne.n	800776e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80077f6:	2bfe      	cmp	r3, #254	@ 0xfe
 80077f8:	d103      	bne.n	8007802 <netif_add+0x14e>
    netif_num = 0;
 80077fa:	4b11      	ldr	r3, [pc, #68]	@ (8007840 <netif_add+0x18c>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	701a      	strb	r2, [r3, #0]
 8007800:	e006      	b.n	8007810 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007808:	3301      	adds	r3, #1
 800780a:	b2da      	uxtb	r2, r3
 800780c:	4b0c      	ldr	r3, [pc, #48]	@ (8007840 <netif_add+0x18c>)
 800780e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007810:	4b0c      	ldr	r3, [pc, #48]	@ (8007844 <netif_add+0x190>)
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007818:	4a0a      	ldr	r2, [pc, #40]	@ (8007844 <netif_add+0x190>)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800781e:	68fb      	ldr	r3, [r7, #12]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	08012638 	.word	0x08012638
 800782c:	080126cc 	.word	0x080126cc
 8007830:	08012688 	.word	0x08012688
 8007834:	080126e8 	.word	0x080126e8
 8007838:	08014d70 	.word	0x08014d70
 800783c:	08007c5f 	.word	0x08007c5f
 8007840:	20008800 	.word	0x20008800
 8007844:	200087f8 	.word	0x200087f8
 8007848:	0801270c 	.word	0x0801270c
 800784c:	08012720 	.word	0x08012720

08007850 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f002 fbe7 	bl	800a030 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f007 f815 	bl	800e894 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800786a:	bf00      	nop
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d106      	bne.n	8007894 <netif_do_set_ipaddr+0x20>
 8007886:	4b1d      	ldr	r3, [pc, #116]	@ (80078fc <netif_do_set_ipaddr+0x88>)
 8007888:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800788c:	491c      	ldr	r1, [pc, #112]	@ (8007900 <netif_do_set_ipaddr+0x8c>)
 800788e:	481d      	ldr	r0, [pc, #116]	@ (8007904 <netif_do_set_ipaddr+0x90>)
 8007890:	f009 fbf6 	bl	8011080 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d106      	bne.n	80078a8 <netif_do_set_ipaddr+0x34>
 800789a:	4b18      	ldr	r3, [pc, #96]	@ (80078fc <netif_do_set_ipaddr+0x88>)
 800789c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80078a0:	4917      	ldr	r1, [pc, #92]	@ (8007900 <netif_do_set_ipaddr+0x8c>)
 80078a2:	4818      	ldr	r0, [pc, #96]	@ (8007904 <netif_do_set_ipaddr+0x90>)
 80078a4:	f009 fbec 	bl	8011080 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3304      	adds	r3, #4
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d01c      	beq.n	80078f0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3304      	adds	r3, #4
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80078c6:	f107 0314 	add.w	r3, r7, #20
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff ffbf 	bl	8007850 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <netif_do_set_ipaddr+0x6a>
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	e000      	b.n	80078e0 <netif_do_set_ipaddr+0x6c>
 80078de:	2300      	movs	r3, #0
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80078e4:	2101      	movs	r1, #1
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f8d2 	bl	8007a90 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80078ec:	2301      	movs	r3, #1
 80078ee:	e000      	b.n	80078f2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	08012638 	.word	0x08012638
 8007900:	08012750 	.word	0x08012750
 8007904:	08012688 	.word	0x08012688

08007908 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3308      	adds	r3, #8
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	429a      	cmp	r2, r3
 8007920:	d00a      	beq.n	8007938 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d002      	beq.n	800792e <netif_do_set_netmask+0x26>
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	e000      	b.n	8007930 <netif_do_set_netmask+0x28>
 800792e:	2300      	movs	r3, #0
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007934:	2301      	movs	r3, #1
 8007936:	e000      	b.n	800793a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007946:	b480      	push	{r7}
 8007948:	b085      	sub	sp, #20
 800794a:	af00      	add	r7, sp, #0
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	330c      	adds	r3, #12
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	d00a      	beq.n	8007976 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <netif_do_set_gw+0x26>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	e000      	b.n	800796e <netif_do_set_gw+0x28>
 800796c:	2300      	movs	r3, #0
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007972:	2301      	movs	r3, #1
 8007974:	e000      	b.n	8007978 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007996:	2300      	movs	r3, #0
 8007998:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80079a0:	4b1c      	ldr	r3, [pc, #112]	@ (8007a14 <netif_set_addr+0x90>)
 80079a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80079aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007a14 <netif_set_addr+0x90>)
 80079ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80079b4:	4b17      	ldr	r3, [pc, #92]	@ (8007a14 <netif_set_addr+0x90>)
 80079b6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <netif_set_addr+0x42>
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <netif_set_addr+0x46>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e000      	b.n	80079cc <netif_set_addr+0x48>
 80079ca:	2300      	movs	r3, #0
 80079cc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d006      	beq.n	80079e2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80079d4:	f107 0310 	add.w	r3, r7, #16
 80079d8:	461a      	mov	r2, r3
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f7ff ff49 	bl	8007874 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80079e2:	69fa      	ldr	r2, [r7, #28]
 80079e4:	6879      	ldr	r1, [r7, #4]
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7ff ff8e 	bl	8007908 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f7ff ffa8 	bl	8007946 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d106      	bne.n	8007a0a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80079fc:	f107 0310 	add.w	r3, r7, #16
 8007a00:	461a      	mov	r2, r3
 8007a02:	68b9      	ldr	r1, [r7, #8]
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f7ff ff35 	bl	8007874 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007a0a:	bf00      	nop
 8007a0c:	3720      	adds	r7, #32
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	08014d70 	.word	0x08014d70

08007a18 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007a20:	4a04      	ldr	r2, [pc, #16]	@ (8007a34 <netif_set_default+0x1c>)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007a26:	bf00      	nop
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	200087fc 	.word	0x200087fc

08007a38 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d107      	bne.n	8007a56 <netif_set_up+0x1e>
 8007a46:	4b0f      	ldr	r3, [pc, #60]	@ (8007a84 <netif_set_up+0x4c>)
 8007a48:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007a4c:	490e      	ldr	r1, [pc, #56]	@ (8007a88 <netif_set_up+0x50>)
 8007a4e:	480f      	ldr	r0, [pc, #60]	@ (8007a8c <netif_set_up+0x54>)
 8007a50:	f009 fb16 	bl	8011080 <iprintf>
 8007a54:	e013      	b.n	8007a7e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10c      	bne.n	8007a7e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007a6a:	f043 0301 	orr.w	r3, r3, #1
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007a76:	2103      	movs	r1, #3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f809 	bl	8007a90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	08012638 	.word	0x08012638
 8007a88:	080127c0 	.word	0x080127c0
 8007a8c:	08012688 	.word	0x08012688

08007a90 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d106      	bne.n	8007ab0 <netif_issue_reports+0x20>
 8007aa2:	4b18      	ldr	r3, [pc, #96]	@ (8007b04 <netif_issue_reports+0x74>)
 8007aa4:	f240 326d 	movw	r2, #877	@ 0x36d
 8007aa8:	4917      	ldr	r1, [pc, #92]	@ (8007b08 <netif_issue_reports+0x78>)
 8007aaa:	4818      	ldr	r0, [pc, #96]	@ (8007b0c <netif_issue_reports+0x7c>)
 8007aac:	f009 fae8 	bl	8011080 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007ab6:	f003 0304 	and.w	r3, r3, #4
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d01e      	beq.n	8007afc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007ac4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d017      	beq.n	8007afc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d013      	beq.n	8007afe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00e      	beq.n	8007afe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007ae6:	f003 0308 	and.w	r3, r3, #8
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d007      	beq.n	8007afe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3304      	adds	r3, #4
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f007 fe37 	bl	800f768 <etharp_request>
 8007afa:	e000      	b.n	8007afe <netif_issue_reports+0x6e>
    return;
 8007afc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	08012638 	.word	0x08012638
 8007b08:	080127dc 	.word	0x080127dc
 8007b0c:	08012688 	.word	0x08012688

08007b10 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d107      	bne.n	8007b2e <netif_set_down+0x1e>
 8007b1e:	4b12      	ldr	r3, [pc, #72]	@ (8007b68 <netif_set_down+0x58>)
 8007b20:	f240 329b 	movw	r2, #923	@ 0x39b
 8007b24:	4911      	ldr	r1, [pc, #68]	@ (8007b6c <netif_set_down+0x5c>)
 8007b26:	4812      	ldr	r0, [pc, #72]	@ (8007b70 <netif_set_down+0x60>)
 8007b28:	f009 faaa 	bl	8011080 <iprintf>
 8007b2c:	e019      	b.n	8007b62 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d012      	beq.n	8007b62 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007b42:	f023 0301 	bic.w	r3, r3, #1
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007b54:	f003 0308 	and.w	r3, r3, #8
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f007 f9c1 	bl	800eee4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	08012638 	.word	0x08012638
 8007b6c:	08012800 	.word	0x08012800
 8007b70:	08012688 	.word	0x08012688

08007b74 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d107      	bne.n	8007b92 <netif_set_link_up+0x1e>
 8007b82:	4b13      	ldr	r3, [pc, #76]	@ (8007bd0 <netif_set_link_up+0x5c>)
 8007b84:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8007b88:	4912      	ldr	r1, [pc, #72]	@ (8007bd4 <netif_set_link_up+0x60>)
 8007b8a:	4813      	ldr	r0, [pc, #76]	@ (8007bd8 <netif_set_link_up+0x64>)
 8007b8c:	f009 fa78 	bl	8011080 <iprintf>
 8007b90:	e01b      	b.n	8007bca <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007b98:	f003 0304 	and.w	r3, r3, #4
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d114      	bne.n	8007bca <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007ba6:	f043 0304 	orr.w	r3, r3, #4
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007bb2:	2103      	movs	r1, #3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff ff6b 	bl	8007a90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <netif_set_link_up+0x56>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	08012638 	.word	0x08012638
 8007bd4:	08012820 	.word	0x08012820
 8007bd8:	08012688 	.word	0x08012688

08007bdc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d107      	bne.n	8007bfa <netif_set_link_down+0x1e>
 8007bea:	4b11      	ldr	r3, [pc, #68]	@ (8007c30 <netif_set_link_down+0x54>)
 8007bec:	f240 4206 	movw	r2, #1030	@ 0x406
 8007bf0:	4910      	ldr	r1, [pc, #64]	@ (8007c34 <netif_set_link_down+0x58>)
 8007bf2:	4811      	ldr	r0, [pc, #68]	@ (8007c38 <netif_set_link_down+0x5c>)
 8007bf4:	f009 fa44 	bl	8011080 <iprintf>
 8007bf8:	e017      	b.n	8007c2a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007c00:	f003 0304 	and.w	r3, r3, #4
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d010      	beq.n	8007c2a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007c0e:	f023 0304 	bic.w	r3, r3, #4
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	69db      	ldr	r3, [r3, #28]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <netif_set_link_down+0x4e>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	08012638 	.word	0x08012638
 8007c34:	08012844 	.word	0x08012844
 8007c38:	08012688 	.word	0x08012688

08007c3c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	61da      	str	r2, [r3, #28]
  }
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b085      	sub	sp, #20
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007c6a:	f06f 030b 	mvn.w	r3, #11
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
	...

08007c7c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	4603      	mov	r3, r0
 8007c84:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007c86:	79fb      	ldrb	r3, [r7, #7]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d013      	beq.n	8007cb4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc4 <netif_get_by_index+0x48>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	e00c      	b.n	8007cae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	79fa      	ldrb	r2, [r7, #7]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d101      	bne.n	8007ca8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	e006      	b.n	8007cb6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	60fb      	str	r3, [r7, #12]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1ef      	bne.n	8007c94 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	200087f8 	.word	0x200087f8

08007cc8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007cce:	4b0c      	ldr	r3, [pc, #48]	@ (8007d00 <pbuf_free_ooseq+0x38>)
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8007d04 <pbuf_free_ooseq+0x3c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	607b      	str	r3, [r7, #4]
 8007cda:	e00a      	b.n	8007cf2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f002 f9e1 	bl	800a0ac <tcp_free_ooseq>
      return;
 8007cea:	e005      	b.n	8007cf8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	607b      	str	r3, [r7, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1f1      	bne.n	8007cdc <pbuf_free_ooseq+0x14>
    }
  }
}
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20008801 	.word	0x20008801
 8007d04:	20008810 	.word	0x20008810

08007d08 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007d0c:	4b03      	ldr	r3, [pc, #12]	@ (8007d1c <pbuf_pool_is_empty+0x14>)
 8007d0e:	2201      	movs	r2, #1
 8007d10:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007d12:	bf00      	nop
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	20008801 	.word	0x20008801

08007d20 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	460b      	mov	r3, r1
 8007d30:	80fb      	strh	r3, [r7, #6]
 8007d32:	4613      	mov	r3, r2
 8007d34:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	88fa      	ldrh	r2, [r7, #6]
 8007d46:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	88ba      	ldrh	r2, [r7, #4]
 8007d4c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007d4e:	8b3b      	ldrh	r3, [r7, #24]
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	7f3a      	ldrb	r2, [r7, #28]
 8007d5a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	73da      	strb	r2, [r3, #15]
}
 8007d68:	bf00      	nop
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08c      	sub	sp, #48	@ 0x30
 8007d78:	af02      	add	r7, sp, #8
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	71fb      	strb	r3, [r7, #7]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	80bb      	strh	r3, [r7, #4]
 8007d82:	4613      	mov	r3, r2
 8007d84:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007d86:	79fb      	ldrb	r3, [r7, #7]
 8007d88:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007d8a:	887b      	ldrh	r3, [r7, #2]
 8007d8c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007d90:	d07f      	beq.n	8007e92 <pbuf_alloc+0x11e>
 8007d92:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007d96:	f300 80c8 	bgt.w	8007f2a <pbuf_alloc+0x1b6>
 8007d9a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007d9e:	d010      	beq.n	8007dc2 <pbuf_alloc+0x4e>
 8007da0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007da4:	f300 80c1 	bgt.w	8007f2a <pbuf_alloc+0x1b6>
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d002      	beq.n	8007db2 <pbuf_alloc+0x3e>
 8007dac:	2b41      	cmp	r3, #65	@ 0x41
 8007dae:	f040 80bc 	bne.w	8007f2a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007db2:	887a      	ldrh	r2, [r7, #2]
 8007db4:	88bb      	ldrh	r3, [r7, #4]
 8007db6:	4619      	mov	r1, r3
 8007db8:	2000      	movs	r0, #0
 8007dba:	f000 f8d1 	bl	8007f60 <pbuf_alloc_reference>
 8007dbe:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8007dc0:	e0bd      	b.n	8007f3e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007dca:	88bb      	ldrh	r3, [r7, #4]
 8007dcc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007dce:	2008      	movs	r0, #8
 8007dd0:	f7ff fbce 	bl	8007570 <memp_malloc>
 8007dd4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d109      	bne.n	8007df0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007ddc:	f7ff ff94 	bl	8007d08 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <pbuf_alloc+0x78>
            pbuf_free(p);
 8007de6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007de8:	f000 faa8 	bl	800833c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007dec:	2300      	movs	r3, #0
 8007dee:	e0a7      	b.n	8007f40 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007df0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007df2:	3303      	adds	r3, #3
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	f023 0303 	bic.w	r3, r3, #3
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	8b7a      	ldrh	r2, [r7, #26]
 8007e04:	4293      	cmp	r3, r2
 8007e06:	bf28      	it	cs
 8007e08:	4613      	movcs	r3, r2
 8007e0a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007e0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e0e:	3310      	adds	r3, #16
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	4413      	add	r3, r2
 8007e14:	3303      	adds	r3, #3
 8007e16:	f023 0303 	bic.w	r3, r3, #3
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	89f9      	ldrh	r1, [r7, #14]
 8007e1e:	8b7a      	ldrh	r2, [r7, #26]
 8007e20:	2300      	movs	r3, #0
 8007e22:	9301      	str	r3, [sp, #4]
 8007e24:	887b      	ldrh	r3, [r7, #2]
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4601      	mov	r1, r0
 8007e2c:	6938      	ldr	r0, [r7, #16]
 8007e2e:	f7ff ff77 	bl	8007d20 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d006      	beq.n	8007e4c <pbuf_alloc+0xd8>
 8007e3e:	4b42      	ldr	r3, [pc, #264]	@ (8007f48 <pbuf_alloc+0x1d4>)
 8007e40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e44:	4941      	ldr	r1, [pc, #260]	@ (8007f4c <pbuf_alloc+0x1d8>)
 8007e46:	4842      	ldr	r0, [pc, #264]	@ (8007f50 <pbuf_alloc+0x1dc>)
 8007e48:	f009 f91a 	bl	8011080 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007e4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e4e:	3303      	adds	r3, #3
 8007e50:	f023 0303 	bic.w	r3, r3, #3
 8007e54:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8007e58:	d106      	bne.n	8007e68 <pbuf_alloc+0xf4>
 8007e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8007f48 <pbuf_alloc+0x1d4>)
 8007e5c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007e60:	493c      	ldr	r1, [pc, #240]	@ (8007f54 <pbuf_alloc+0x1e0>)
 8007e62:	483b      	ldr	r0, [pc, #236]	@ (8007f50 <pbuf_alloc+0x1dc>)
 8007e64:	f009 f90c 	bl	8011080 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e72:	e002      	b.n	8007e7a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007e7e:	8b7a      	ldrh	r2, [r7, #26]
 8007e80:	89fb      	ldrh	r3, [r7, #14]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8007e8a:	8b7b      	ldrh	r3, [r7, #26]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d19e      	bne.n	8007dce <pbuf_alloc+0x5a>
      break;
 8007e90:	e055      	b.n	8007f3e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007e92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e94:	3303      	adds	r3, #3
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	f023 0303 	bic.w	r3, r3, #3
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	88bb      	ldrh	r3, [r7, #4]
 8007ea0:	3303      	adds	r3, #3
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	f023 0303 	bic.w	r3, r3, #3
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	4413      	add	r3, r2
 8007eac:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007eae:	8b3b      	ldrh	r3, [r7, #24]
 8007eb0:	3310      	adds	r3, #16
 8007eb2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007eb4:	8b3a      	ldrh	r2, [r7, #24]
 8007eb6:	88bb      	ldrh	r3, [r7, #4]
 8007eb8:	3303      	adds	r3, #3
 8007eba:	f023 0303 	bic.w	r3, r3, #3
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d306      	bcc.n	8007ed0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007ec2:	8afa      	ldrh	r2, [r7, #22]
 8007ec4:	88bb      	ldrh	r3, [r7, #4]
 8007ec6:	3303      	adds	r3, #3
 8007ec8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d201      	bcs.n	8007ed4 <pbuf_alloc+0x160>
        return NULL;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	e035      	b.n	8007f40 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007ed4:	8afb      	ldrh	r3, [r7, #22]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff f9ba 	bl	8007250 <mem_malloc>
 8007edc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <pbuf_alloc+0x174>
        return NULL;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	e02b      	b.n	8007f40 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007ee8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007eea:	3310      	adds	r3, #16
 8007eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eee:	4413      	add	r3, r2
 8007ef0:	3303      	adds	r3, #3
 8007ef2:	f023 0303 	bic.w	r3, r3, #3
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	88b9      	ldrh	r1, [r7, #4]
 8007efa:	88ba      	ldrh	r2, [r7, #4]
 8007efc:	2300      	movs	r3, #0
 8007efe:	9301      	str	r3, [sp, #4]
 8007f00:	887b      	ldrh	r3, [r7, #2]
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	460b      	mov	r3, r1
 8007f06:	4601      	mov	r1, r0
 8007f08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f0a:	f7ff ff09 	bl	8007d20 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f003 0303 	and.w	r3, r3, #3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d010      	beq.n	8007f3c <pbuf_alloc+0x1c8>
 8007f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f48 <pbuf_alloc+0x1d4>)
 8007f1c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8007f20:	490d      	ldr	r1, [pc, #52]	@ (8007f58 <pbuf_alloc+0x1e4>)
 8007f22:	480b      	ldr	r0, [pc, #44]	@ (8007f50 <pbuf_alloc+0x1dc>)
 8007f24:	f009 f8ac 	bl	8011080 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007f28:	e008      	b.n	8007f3c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007f2a:	4b07      	ldr	r3, [pc, #28]	@ (8007f48 <pbuf_alloc+0x1d4>)
 8007f2c:	f240 1227 	movw	r2, #295	@ 0x127
 8007f30:	490a      	ldr	r1, [pc, #40]	@ (8007f5c <pbuf_alloc+0x1e8>)
 8007f32:	4807      	ldr	r0, [pc, #28]	@ (8007f50 <pbuf_alloc+0x1dc>)
 8007f34:	f009 f8a4 	bl	8011080 <iprintf>
      return NULL;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	e001      	b.n	8007f40 <pbuf_alloc+0x1cc>
      break;
 8007f3c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3728      	adds	r7, #40	@ 0x28
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	08012868 	.word	0x08012868
 8007f4c:	08012898 	.word	0x08012898
 8007f50:	080128c8 	.word	0x080128c8
 8007f54:	080128f0 	.word	0x080128f0
 8007f58:	08012924 	.word	0x08012924
 8007f5c:	08012950 	.word	0x08012950

08007f60 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af02      	add	r7, sp, #8
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	807b      	strh	r3, [r7, #2]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007f70:	883b      	ldrh	r3, [r7, #0]
 8007f72:	2b41      	cmp	r3, #65	@ 0x41
 8007f74:	d009      	beq.n	8007f8a <pbuf_alloc_reference+0x2a>
 8007f76:	883b      	ldrh	r3, [r7, #0]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d006      	beq.n	8007f8a <pbuf_alloc_reference+0x2a>
 8007f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8007fbc <pbuf_alloc_reference+0x5c>)
 8007f7e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8007f82:	490f      	ldr	r1, [pc, #60]	@ (8007fc0 <pbuf_alloc_reference+0x60>)
 8007f84:	480f      	ldr	r0, [pc, #60]	@ (8007fc4 <pbuf_alloc_reference+0x64>)
 8007f86:	f009 f87b 	bl	8011080 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007f8a:	2007      	movs	r0, #7
 8007f8c:	f7ff faf0 	bl	8007570 <memp_malloc>
 8007f90:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d101      	bne.n	8007f9c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	e00b      	b.n	8007fb4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007f9c:	8879      	ldrh	r1, [r7, #2]
 8007f9e:	887a      	ldrh	r2, [r7, #2]
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	9301      	str	r3, [sp, #4]
 8007fa4:	883b      	ldrh	r3, [r7, #0]
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	6879      	ldr	r1, [r7, #4]
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f7ff feb7 	bl	8007d20 <pbuf_init_alloced_pbuf>
  return p;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	08012868 	.word	0x08012868
 8007fc0:	0801296c 	.word	0x0801296c
 8007fc4:	080128c8 	.word	0x080128c8

08007fc8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b088      	sub	sp, #32
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	607b      	str	r3, [r7, #4]
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	81bb      	strh	r3, [r7, #12]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007fe0:	8a7b      	ldrh	r3, [r7, #18]
 8007fe2:	3303      	adds	r3, #3
 8007fe4:	f023 0203 	bic.w	r2, r3, #3
 8007fe8:	89bb      	ldrh	r3, [r7, #12]
 8007fea:	441a      	add	r2, r3
 8007fec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d901      	bls.n	8007ff6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e018      	b.n	8008028 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d007      	beq.n	800800c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007ffc:	8a7b      	ldrh	r3, [r7, #18]
 8007ffe:	3303      	adds	r3, #3
 8008000:	f023 0303 	bic.w	r3, r3, #3
 8008004:	6a3a      	ldr	r2, [r7, #32]
 8008006:	4413      	add	r3, r2
 8008008:	617b      	str	r3, [r7, #20]
 800800a:	e001      	b.n	8008010 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800800c:	2300      	movs	r3, #0
 800800e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	89b9      	ldrh	r1, [r7, #12]
 8008014:	89ba      	ldrh	r2, [r7, #12]
 8008016:	2302      	movs	r3, #2
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	897b      	ldrh	r3, [r7, #10]
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	460b      	mov	r3, r1
 8008020:	6979      	ldr	r1, [r7, #20]
 8008022:	f7ff fe7d 	bl	8007d20 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008026:	687b      	ldr	r3, [r7, #4]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d106      	bne.n	8008050 <pbuf_realloc+0x20>
 8008042:	4b3a      	ldr	r3, [pc, #232]	@ (800812c <pbuf_realloc+0xfc>)
 8008044:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8008048:	4939      	ldr	r1, [pc, #228]	@ (8008130 <pbuf_realloc+0x100>)
 800804a:	483a      	ldr	r0, [pc, #232]	@ (8008134 <pbuf_realloc+0x104>)
 800804c:	f009 f818 	bl	8011080 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	891b      	ldrh	r3, [r3, #8]
 8008054:	887a      	ldrh	r2, [r7, #2]
 8008056:	429a      	cmp	r2, r3
 8008058:	d263      	bcs.n	8008122 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	891a      	ldrh	r2, [r3, #8]
 800805e:	887b      	ldrh	r3, [r7, #2]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008064:	887b      	ldrh	r3, [r7, #2]
 8008066:	817b      	strh	r3, [r7, #10]
  q = p;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800806c:	e018      	b.n	80080a0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	895b      	ldrh	r3, [r3, #10]
 8008072:	897a      	ldrh	r2, [r7, #10]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	891a      	ldrh	r2, [r3, #8]
 800807c:	893b      	ldrh	r3, [r7, #8]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	b29a      	uxth	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d106      	bne.n	80080a0 <pbuf_realloc+0x70>
 8008092:	4b26      	ldr	r3, [pc, #152]	@ (800812c <pbuf_realloc+0xfc>)
 8008094:	f240 12af 	movw	r2, #431	@ 0x1af
 8008098:	4927      	ldr	r1, [pc, #156]	@ (8008138 <pbuf_realloc+0x108>)
 800809a:	4826      	ldr	r0, [pc, #152]	@ (8008134 <pbuf_realloc+0x104>)
 800809c:	f008 fff0 	bl	8011080 <iprintf>
  while (rem_len > q->len) {
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	895b      	ldrh	r3, [r3, #10]
 80080a4:	897a      	ldrh	r2, [r7, #10]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d8e1      	bhi.n	800806e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	7b1b      	ldrb	r3, [r3, #12]
 80080ae:	f003 030f 	and.w	r3, r3, #15
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d121      	bne.n	80080fa <pbuf_realloc+0xca>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	895b      	ldrh	r3, [r3, #10]
 80080ba:	897a      	ldrh	r2, [r7, #10]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d01c      	beq.n	80080fa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	7b5b      	ldrb	r3, [r3, #13]
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d116      	bne.n	80080fa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	897b      	ldrh	r3, [r7, #10]
 80080d8:	4413      	add	r3, r2
 80080da:	b29b      	uxth	r3, r3
 80080dc:	4619      	mov	r1, r3
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f7fe ffba 	bl	8007058 <mem_trim>
 80080e4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d106      	bne.n	80080fa <pbuf_realloc+0xca>
 80080ec:	4b0f      	ldr	r3, [pc, #60]	@ (800812c <pbuf_realloc+0xfc>)
 80080ee:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80080f2:	4912      	ldr	r1, [pc, #72]	@ (800813c <pbuf_realloc+0x10c>)
 80080f4:	480f      	ldr	r0, [pc, #60]	@ (8008134 <pbuf_realloc+0x104>)
 80080f6:	f008 ffc3 	bl	8011080 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	897a      	ldrh	r2, [r7, #10]
 80080fe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	895a      	ldrh	r2, [r3, #10]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d004      	beq.n	800811a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 f911 	bl	800833c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	e000      	b.n	8008124 <pbuf_realloc+0xf4>
    return;
 8008122:	bf00      	nop

}
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	08012868 	.word	0x08012868
 8008130:	08012980 	.word	0x08012980
 8008134:	080128c8 	.word	0x080128c8
 8008138:	08012998 	.word	0x08012998
 800813c:	080129b0 	.word	0x080129b0

08008140 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	4613      	mov	r3, r2
 800814c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d106      	bne.n	8008162 <pbuf_add_header_impl+0x22>
 8008154:	4b2b      	ldr	r3, [pc, #172]	@ (8008204 <pbuf_add_header_impl+0xc4>)
 8008156:	f240 12df 	movw	r2, #479	@ 0x1df
 800815a:	492b      	ldr	r1, [pc, #172]	@ (8008208 <pbuf_add_header_impl+0xc8>)
 800815c:	482b      	ldr	r0, [pc, #172]	@ (800820c <pbuf_add_header_impl+0xcc>)
 800815e:	f008 ff8f 	bl	8011080 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <pbuf_add_header_impl+0x30>
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800816e:	d301      	bcc.n	8008174 <pbuf_add_header_impl+0x34>
    return 1;
 8008170:	2301      	movs	r3, #1
 8008172:	e043      	b.n	80081fc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <pbuf_add_header_impl+0x3e>
    return 0;
 800817a:	2300      	movs	r3, #0
 800817c:	e03e      	b.n	80081fc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	891a      	ldrh	r2, [r3, #8]
 8008186:	8a7b      	ldrh	r3, [r7, #18]
 8008188:	4413      	add	r3, r2
 800818a:	b29b      	uxth	r3, r3
 800818c:	8a7a      	ldrh	r2, [r7, #18]
 800818e:	429a      	cmp	r2, r3
 8008190:	d901      	bls.n	8008196 <pbuf_add_header_impl+0x56>
    return 1;
 8008192:	2301      	movs	r3, #1
 8008194:	e032      	b.n	80081fc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	7b1b      	ldrb	r3, [r3, #12]
 800819a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800819c:	8a3b      	ldrh	r3, [r7, #16]
 800819e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00c      	beq.n	80081c0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	425b      	negs	r3, r3
 80081ae:	4413      	add	r3, r2
 80081b0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3310      	adds	r3, #16
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d20d      	bcs.n	80081d8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80081bc:	2301      	movs	r3, #1
 80081be:	e01d      	b.n	80081fc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d006      	beq.n	80081d4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	425b      	negs	r3, r3
 80081ce:	4413      	add	r3, r2
 80081d0:	617b      	str	r3, [r7, #20]
 80081d2:	e001      	b.n	80081d8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e011      	b.n	80081fc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	895a      	ldrh	r2, [r3, #10]
 80081e2:	8a7b      	ldrh	r3, [r7, #18]
 80081e4:	4413      	add	r3, r2
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	891a      	ldrh	r2, [r3, #8]
 80081f0:	8a7b      	ldrh	r3, [r7, #18]
 80081f2:	4413      	add	r3, r2
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	811a      	strh	r2, [r3, #8]


  return 0;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	08012868 	.word	0x08012868
 8008208:	080129cc 	.word	0x080129cc
 800820c:	080128c8 	.word	0x080128c8

08008210 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800821a:	2200      	movs	r2, #0
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff ff8e 	bl	8008140 <pbuf_add_header_impl>
 8008224:	4603      	mov	r3, r0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
	...

08008230 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d106      	bne.n	800824e <pbuf_remove_header+0x1e>
 8008240:	4b20      	ldr	r3, [pc, #128]	@ (80082c4 <pbuf_remove_header+0x94>)
 8008242:	f240 224b 	movw	r2, #587	@ 0x24b
 8008246:	4920      	ldr	r1, [pc, #128]	@ (80082c8 <pbuf_remove_header+0x98>)
 8008248:	4820      	ldr	r0, [pc, #128]	@ (80082cc <pbuf_remove_header+0x9c>)
 800824a:	f008 ff19 	bl	8011080 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <pbuf_remove_header+0x2c>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800825a:	d301      	bcc.n	8008260 <pbuf_remove_header+0x30>
    return 1;
 800825c:	2301      	movs	r3, #1
 800825e:	e02c      	b.n	80082ba <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <pbuf_remove_header+0x3a>
    return 0;
 8008266:	2300      	movs	r3, #0
 8008268:	e027      	b.n	80082ba <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	895b      	ldrh	r3, [r3, #10]
 8008272:	89fa      	ldrh	r2, [r7, #14]
 8008274:	429a      	cmp	r2, r3
 8008276:	d908      	bls.n	800828a <pbuf_remove_header+0x5a>
 8008278:	4b12      	ldr	r3, [pc, #72]	@ (80082c4 <pbuf_remove_header+0x94>)
 800827a:	f240 2255 	movw	r2, #597	@ 0x255
 800827e:	4914      	ldr	r1, [pc, #80]	@ (80082d0 <pbuf_remove_header+0xa0>)
 8008280:	4812      	ldr	r0, [pc, #72]	@ (80082cc <pbuf_remove_header+0x9c>)
 8008282:	f008 fefd 	bl	8011080 <iprintf>
 8008286:	2301      	movs	r3, #1
 8008288:	e017      	b.n	80082ba <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	441a      	add	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	895a      	ldrh	r2, [r3, #10]
 80082a0:	89fb      	ldrh	r3, [r7, #14]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	891a      	ldrh	r2, [r3, #8]
 80082ae:	89fb      	ldrh	r3, [r7, #14]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	08012868 	.word	0x08012868
 80082c8:	080129cc 	.word	0x080129cc
 80082cc:	080128c8 	.word	0x080128c8
 80082d0:	080129d8 	.word	0x080129d8

080082d4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	807b      	strh	r3, [r7, #2]
 80082e0:	4613      	mov	r3, r2
 80082e2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80082e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	da08      	bge.n	80082fe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80082ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80082f0:	425b      	negs	r3, r3
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff ff9b 	bl	8008230 <pbuf_remove_header>
 80082fa:	4603      	mov	r3, r0
 80082fc:	e007      	b.n	800830e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80082fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008302:	787a      	ldrb	r2, [r7, #1]
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff ff1a 	bl	8008140 <pbuf_add_header_impl>
 800830c:	4603      	mov	r3, r0
  }
}
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	460b      	mov	r3, r1
 8008320:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008322:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008326:	2201      	movs	r2, #1
 8008328:	4619      	mov	r1, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7ff ffd2 	bl	80082d4 <pbuf_header_impl>
 8008330:	4603      	mov	r3, r0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10b      	bne.n	8008362 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d106      	bne.n	800835e <pbuf_free+0x22>
 8008350:	4b38      	ldr	r3, [pc, #224]	@ (8008434 <pbuf_free+0xf8>)
 8008352:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8008356:	4938      	ldr	r1, [pc, #224]	@ (8008438 <pbuf_free+0xfc>)
 8008358:	4838      	ldr	r0, [pc, #224]	@ (800843c <pbuf_free+0x100>)
 800835a:	f008 fe91 	bl	8011080 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800835e:	2300      	movs	r3, #0
 8008360:	e063      	b.n	800842a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008366:	e05c      	b.n	8008422 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	7b9b      	ldrb	r3, [r3, #14]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d106      	bne.n	800837e <pbuf_free+0x42>
 8008370:	4b30      	ldr	r3, [pc, #192]	@ (8008434 <pbuf_free+0xf8>)
 8008372:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8008376:	4932      	ldr	r1, [pc, #200]	@ (8008440 <pbuf_free+0x104>)
 8008378:	4830      	ldr	r0, [pc, #192]	@ (800843c <pbuf_free+0x100>)
 800837a:	f008 fe81 	bl	8011080 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	7b9b      	ldrb	r3, [r3, #14]
 8008382:	3b01      	subs	r3, #1
 8008384:	b2da      	uxtb	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	739a      	strb	r2, [r3, #14]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	7b9b      	ldrb	r3, [r3, #14]
 800838e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008390:	7dbb      	ldrb	r3, [r7, #22]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d143      	bne.n	800841e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	7b1b      	ldrb	r3, [r3, #12]
 80083a0:	f003 030f 	and.w	r3, r3, #15
 80083a4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	7b5b      	ldrb	r3, [r3, #13]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d011      	beq.n	80083d6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d106      	bne.n	80083cc <pbuf_free+0x90>
 80083be:	4b1d      	ldr	r3, [pc, #116]	@ (8008434 <pbuf_free+0xf8>)
 80083c0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80083c4:	491f      	ldr	r1, [pc, #124]	@ (8008444 <pbuf_free+0x108>)
 80083c6:	481d      	ldr	r0, [pc, #116]	@ (800843c <pbuf_free+0x100>)
 80083c8:	f008 fe5a 	bl	8011080 <iprintf>
        pc->custom_free_function(p);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	4798      	blx	r3
 80083d4:	e01d      	b.n	8008412 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d104      	bne.n	80083e6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	2008      	movs	r0, #8
 80083e0:	f7ff f936 	bl	8007650 <memp_free>
 80083e4:	e015      	b.n	8008412 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d104      	bne.n	80083f6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	2007      	movs	r0, #7
 80083f0:	f7ff f92e 	bl	8007650 <memp_free>
 80083f4:	e00d      	b.n	8008412 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d103      	bne.n	8008404 <pbuf_free+0xc8>
          mem_free(p);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7fe fdc1 	bl	8006f84 <mem_free>
 8008402:	e006      	b.n	8008412 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008404:	4b0b      	ldr	r3, [pc, #44]	@ (8008434 <pbuf_free+0xf8>)
 8008406:	f240 320f 	movw	r2, #783	@ 0x30f
 800840a:	490f      	ldr	r1, [pc, #60]	@ (8008448 <pbuf_free+0x10c>)
 800840c:	480b      	ldr	r0, [pc, #44]	@ (800843c <pbuf_free+0x100>)
 800840e:	f008 fe37 	bl	8011080 <iprintf>
        }
      }
      count++;
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	3301      	adds	r3, #1
 8008416:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	607b      	str	r3, [r7, #4]
 800841c:	e001      	b.n	8008422 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800841e:	2300      	movs	r3, #0
 8008420:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d19f      	bne.n	8008368 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008428:	7dfb      	ldrb	r3, [r7, #23]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	08012868 	.word	0x08012868
 8008438:	080129cc 	.word	0x080129cc
 800843c:	080128c8 	.word	0x080128c8
 8008440:	080129f8 	.word	0x080129f8
 8008444:	08012a10 	.word	0x08012a10
 8008448:	08012a34 	.word	0x08012a34

0800844c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008458:	e005      	b.n	8008466 <pbuf_clen+0x1a>
    ++len;
 800845a:	89fb      	ldrh	r3, [r7, #14]
 800845c:	3301      	adds	r3, #1
 800845e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1f6      	bne.n	800845a <pbuf_clen+0xe>
  }
  return len;
 800846c:	89fb      	ldrh	r3, [r7, #14]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
	...

0800847c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d010      	beq.n	80084ac <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	7b9b      	ldrb	r3, [r3, #14]
 800848e:	3301      	adds	r3, #1
 8008490:	b2da      	uxtb	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	7b9b      	ldrb	r3, [r3, #14]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d106      	bne.n	80084ac <pbuf_ref+0x30>
 800849e:	4b05      	ldr	r3, [pc, #20]	@ (80084b4 <pbuf_ref+0x38>)
 80084a0:	f240 3242 	movw	r2, #834	@ 0x342
 80084a4:	4904      	ldr	r1, [pc, #16]	@ (80084b8 <pbuf_ref+0x3c>)
 80084a6:	4805      	ldr	r0, [pc, #20]	@ (80084bc <pbuf_ref+0x40>)
 80084a8:	f008 fdea 	bl	8011080 <iprintf>
  }
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	08012868 	.word	0x08012868
 80084b8:	08012a48 	.word	0x08012a48
 80084bc:	080128c8 	.word	0x080128c8

080084c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <pbuf_cat+0x16>
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d107      	bne.n	80084e6 <pbuf_cat+0x26>
 80084d6:	4b20      	ldr	r3, [pc, #128]	@ (8008558 <pbuf_cat+0x98>)
 80084d8:	f240 3259 	movw	r2, #857	@ 0x359
 80084dc:	491f      	ldr	r1, [pc, #124]	@ (800855c <pbuf_cat+0x9c>)
 80084de:	4820      	ldr	r0, [pc, #128]	@ (8008560 <pbuf_cat+0xa0>)
 80084e0:	f008 fdce 	bl	8011080 <iprintf>
 80084e4:	e034      	b.n	8008550 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	e00a      	b.n	8008502 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	891a      	ldrh	r2, [r3, #8]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	891b      	ldrh	r3, [r3, #8]
 80084f4:	4413      	add	r3, r2
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	60fb      	str	r3, [r7, #12]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1f0      	bne.n	80084ec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	891a      	ldrh	r2, [r3, #8]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	895b      	ldrh	r3, [r3, #10]
 8008512:	429a      	cmp	r2, r3
 8008514:	d006      	beq.n	8008524 <pbuf_cat+0x64>
 8008516:	4b10      	ldr	r3, [pc, #64]	@ (8008558 <pbuf_cat+0x98>)
 8008518:	f240 3262 	movw	r2, #866	@ 0x362
 800851c:	4911      	ldr	r1, [pc, #68]	@ (8008564 <pbuf_cat+0xa4>)
 800851e:	4810      	ldr	r0, [pc, #64]	@ (8008560 <pbuf_cat+0xa0>)
 8008520:	f008 fdae 	bl	8011080 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d006      	beq.n	800853a <pbuf_cat+0x7a>
 800852c:	4b0a      	ldr	r3, [pc, #40]	@ (8008558 <pbuf_cat+0x98>)
 800852e:	f240 3263 	movw	r2, #867	@ 0x363
 8008532:	490d      	ldr	r1, [pc, #52]	@ (8008568 <pbuf_cat+0xa8>)
 8008534:	480a      	ldr	r0, [pc, #40]	@ (8008560 <pbuf_cat+0xa0>)
 8008536:	f008 fda3 	bl	8011080 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	891a      	ldrh	r2, [r3, #8]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	891b      	ldrh	r3, [r3, #8]
 8008542:	4413      	add	r3, r2
 8008544:	b29a      	uxth	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	08012868 	.word	0x08012868
 800855c:	08012a5c 	.word	0x08012a5c
 8008560:	080128c8 	.word	0x080128c8
 8008564:	08012a94 	.word	0x08012a94
 8008568:	08012ac4 	.word	0x08012ac4

0800856c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff ffa1 	bl	80084c0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800857e:	6838      	ldr	r0, [r7, #0]
 8008580:	f7ff ff7c 	bl	800847c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008596:	2300      	movs	r3, #0
 8008598:	617b      	str	r3, [r7, #20]
 800859a:	2300      	movs	r3, #0
 800859c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d008      	beq.n	80085b6 <pbuf_copy+0x2a>
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d005      	beq.n	80085b6 <pbuf_copy+0x2a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	891a      	ldrh	r2, [r3, #8]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	891b      	ldrh	r3, [r3, #8]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d209      	bcs.n	80085ca <pbuf_copy+0x3e>
 80085b6:	4b57      	ldr	r3, [pc, #348]	@ (8008714 <pbuf_copy+0x188>)
 80085b8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80085bc:	4956      	ldr	r1, [pc, #344]	@ (8008718 <pbuf_copy+0x18c>)
 80085be:	4857      	ldr	r0, [pc, #348]	@ (800871c <pbuf_copy+0x190>)
 80085c0:	f008 fd5e 	bl	8011080 <iprintf>
 80085c4:	f06f 030f 	mvn.w	r3, #15
 80085c8:	e09f      	b.n	800870a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	895b      	ldrh	r3, [r3, #10]
 80085ce:	461a      	mov	r2, r3
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	1ad2      	subs	r2, r2, r3
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	895b      	ldrh	r3, [r3, #10]
 80085d8:	4619      	mov	r1, r3
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	1acb      	subs	r3, r1, r3
 80085de:	429a      	cmp	r2, r3
 80085e0:	d306      	bcc.n	80085f0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	895b      	ldrh	r3, [r3, #10]
 80085e6:	461a      	mov	r2, r3
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	60fb      	str	r3, [r7, #12]
 80085ee:	e005      	b.n	80085fc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	895b      	ldrh	r3, [r3, #10]
 80085f4:	461a      	mov	r2, r3
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	18d0      	adds	r0, r2, r3
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	4413      	add	r3, r2
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	4619      	mov	r1, r3
 8008610:	f008 fe5f 	bl	80112d2 <memcpy>
    offset_to += len;
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4413      	add	r3, r2
 800861a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	4413      	add	r3, r2
 8008622:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	895b      	ldrh	r3, [r3, #10]
 8008628:	461a      	mov	r2, r3
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	4293      	cmp	r3, r2
 800862e:	d906      	bls.n	800863e <pbuf_copy+0xb2>
 8008630:	4b38      	ldr	r3, [pc, #224]	@ (8008714 <pbuf_copy+0x188>)
 8008632:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8008636:	493a      	ldr	r1, [pc, #232]	@ (8008720 <pbuf_copy+0x194>)
 8008638:	4838      	ldr	r0, [pc, #224]	@ (800871c <pbuf_copy+0x190>)
 800863a:	f008 fd21 	bl	8011080 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	895b      	ldrh	r3, [r3, #10]
 8008642:	461a      	mov	r2, r3
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	4293      	cmp	r3, r2
 8008648:	d906      	bls.n	8008658 <pbuf_copy+0xcc>
 800864a:	4b32      	ldr	r3, [pc, #200]	@ (8008714 <pbuf_copy+0x188>)
 800864c:	f240 32da 	movw	r2, #986	@ 0x3da
 8008650:	4934      	ldr	r1, [pc, #208]	@ (8008724 <pbuf_copy+0x198>)
 8008652:	4832      	ldr	r0, [pc, #200]	@ (800871c <pbuf_copy+0x190>)
 8008654:	f008 fd14 	bl	8011080 <iprintf>
    if (offset_from >= p_from->len) {
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	895b      	ldrh	r3, [r3, #10]
 800865c:	461a      	mov	r2, r3
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	4293      	cmp	r3, r2
 8008662:	d304      	bcc.n	800866e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008664:	2300      	movs	r3, #0
 8008666:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	895b      	ldrh	r3, [r3, #10]
 8008672:	461a      	mov	r2, r3
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	4293      	cmp	r3, r2
 8008678:	d114      	bne.n	80086a4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800867a:	2300      	movs	r3, #0
 800867c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10c      	bne.n	80086a4 <pbuf_copy+0x118>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d009      	beq.n	80086a4 <pbuf_copy+0x118>
 8008690:	4b20      	ldr	r3, [pc, #128]	@ (8008714 <pbuf_copy+0x188>)
 8008692:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8008696:	4924      	ldr	r1, [pc, #144]	@ (8008728 <pbuf_copy+0x19c>)
 8008698:	4820      	ldr	r0, [pc, #128]	@ (800871c <pbuf_copy+0x190>)
 800869a:	f008 fcf1 	bl	8011080 <iprintf>
 800869e:	f06f 030f 	mvn.w	r3, #15
 80086a2:	e032      	b.n	800870a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d013      	beq.n	80086d2 <pbuf_copy+0x146>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	895a      	ldrh	r2, [r3, #10]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	891b      	ldrh	r3, [r3, #8]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d10d      	bne.n	80086d2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d009      	beq.n	80086d2 <pbuf_copy+0x146>
 80086be:	4b15      	ldr	r3, [pc, #84]	@ (8008714 <pbuf_copy+0x188>)
 80086c0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80086c4:	4919      	ldr	r1, [pc, #100]	@ (800872c <pbuf_copy+0x1a0>)
 80086c6:	4815      	ldr	r0, [pc, #84]	@ (800871c <pbuf_copy+0x190>)
 80086c8:	f008 fcda 	bl	8011080 <iprintf>
 80086cc:	f06f 0305 	mvn.w	r3, #5
 80086d0:	e01b      	b.n	800870a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d013      	beq.n	8008700 <pbuf_copy+0x174>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	895a      	ldrh	r2, [r3, #10]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	891b      	ldrh	r3, [r3, #8]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d10d      	bne.n	8008700 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d009      	beq.n	8008700 <pbuf_copy+0x174>
 80086ec:	4b09      	ldr	r3, [pc, #36]	@ (8008714 <pbuf_copy+0x188>)
 80086ee:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80086f2:	490e      	ldr	r1, [pc, #56]	@ (800872c <pbuf_copy+0x1a0>)
 80086f4:	4809      	ldr	r0, [pc, #36]	@ (800871c <pbuf_copy+0x190>)
 80086f6:	f008 fcc3 	bl	8011080 <iprintf>
 80086fa:	f06f 0305 	mvn.w	r3, #5
 80086fe:	e004      	b.n	800870a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f47f af61 	bne.w	80085ca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3718      	adds	r7, #24
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	08012868 	.word	0x08012868
 8008718:	08012b10 	.word	0x08012b10
 800871c:	080128c8 	.word	0x080128c8
 8008720:	08012b40 	.word	0x08012b40
 8008724:	08012b58 	.word	0x08012b58
 8008728:	08012b74 	.word	0x08012b74
 800872c:	08012b84 	.word	0x08012b84

08008730 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b088      	sub	sp, #32
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	4611      	mov	r1, r2
 800873c:	461a      	mov	r2, r3
 800873e:	460b      	mov	r3, r1
 8008740:	80fb      	strh	r3, [r7, #6]
 8008742:	4613      	mov	r3, r2
 8008744:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800874a:	2300      	movs	r3, #0
 800874c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d108      	bne.n	8008766 <pbuf_copy_partial+0x36>
 8008754:	4b2b      	ldr	r3, [pc, #172]	@ (8008804 <pbuf_copy_partial+0xd4>)
 8008756:	f240 420a 	movw	r2, #1034	@ 0x40a
 800875a:	492b      	ldr	r1, [pc, #172]	@ (8008808 <pbuf_copy_partial+0xd8>)
 800875c:	482b      	ldr	r0, [pc, #172]	@ (800880c <pbuf_copy_partial+0xdc>)
 800875e:	f008 fc8f 	bl	8011080 <iprintf>
 8008762:	2300      	movs	r3, #0
 8008764:	e04a      	b.n	80087fc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d108      	bne.n	800877e <pbuf_copy_partial+0x4e>
 800876c:	4b25      	ldr	r3, [pc, #148]	@ (8008804 <pbuf_copy_partial+0xd4>)
 800876e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8008772:	4927      	ldr	r1, [pc, #156]	@ (8008810 <pbuf_copy_partial+0xe0>)
 8008774:	4825      	ldr	r0, [pc, #148]	@ (800880c <pbuf_copy_partial+0xdc>)
 8008776:	f008 fc83 	bl	8011080 <iprintf>
 800877a:	2300      	movs	r3, #0
 800877c:	e03e      	b.n	80087fc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	61fb      	str	r3, [r7, #28]
 8008782:	e034      	b.n	80087ee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008784:	88bb      	ldrh	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00a      	beq.n	80087a0 <pbuf_copy_partial+0x70>
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	895b      	ldrh	r3, [r3, #10]
 800878e:	88ba      	ldrh	r2, [r7, #4]
 8008790:	429a      	cmp	r2, r3
 8008792:	d305      	bcc.n	80087a0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	895b      	ldrh	r3, [r3, #10]
 8008798:	88ba      	ldrh	r2, [r7, #4]
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	80bb      	strh	r3, [r7, #4]
 800879e:	e023      	b.n	80087e8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	895a      	ldrh	r2, [r3, #10]
 80087a4:	88bb      	ldrh	r3, [r7, #4]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80087aa:	8b3a      	ldrh	r2, [r7, #24]
 80087ac:	88fb      	ldrh	r3, [r7, #6]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d901      	bls.n	80087b6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80087b2:	88fb      	ldrh	r3, [r7, #6]
 80087b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80087b6:	8b7b      	ldrh	r3, [r7, #26]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	18d0      	adds	r0, r2, r3
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	88bb      	ldrh	r3, [r7, #4]
 80087c2:	4413      	add	r3, r2
 80087c4:	8b3a      	ldrh	r2, [r7, #24]
 80087c6:	4619      	mov	r1, r3
 80087c8:	f008 fd83 	bl	80112d2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80087cc:	8afa      	ldrh	r2, [r7, #22]
 80087ce:	8b3b      	ldrh	r3, [r7, #24]
 80087d0:	4413      	add	r3, r2
 80087d2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80087d4:	8b7a      	ldrh	r2, [r7, #26]
 80087d6:	8b3b      	ldrh	r3, [r7, #24]
 80087d8:	4413      	add	r3, r2
 80087da:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80087dc:	88fa      	ldrh	r2, [r7, #6]
 80087de:	8b3b      	ldrh	r3, [r7, #24]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	61fb      	str	r3, [r7, #28]
 80087ee:	88fb      	ldrh	r3, [r7, #6]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <pbuf_copy_partial+0xca>
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1c4      	bne.n	8008784 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80087fa:	8afb      	ldrh	r3, [r7, #22]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3720      	adds	r7, #32
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	08012868 	.word	0x08012868
 8008808:	08012bb0 	.word	0x08012bb0
 800880c:	080128c8 	.word	0x080128c8
 8008810:	08012bd0 	.word	0x08012bd0

08008814 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4613      	mov	r3, r2
 8008820:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8008822:	88fb      	ldrh	r3, [r7, #6]
 8008824:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8008826:	2300      	movs	r3, #0
 8008828:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d109      	bne.n	8008844 <pbuf_take+0x30>
 8008830:	4b3a      	ldr	r3, [pc, #232]	@ (800891c <pbuf_take+0x108>)
 8008832:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8008836:	493a      	ldr	r1, [pc, #232]	@ (8008920 <pbuf_take+0x10c>)
 8008838:	483a      	ldr	r0, [pc, #232]	@ (8008924 <pbuf_take+0x110>)
 800883a:	f008 fc21 	bl	8011080 <iprintf>
 800883e:	f06f 030f 	mvn.w	r3, #15
 8008842:	e067      	b.n	8008914 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d109      	bne.n	800885e <pbuf_take+0x4a>
 800884a:	4b34      	ldr	r3, [pc, #208]	@ (800891c <pbuf_take+0x108>)
 800884c:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8008850:	4935      	ldr	r1, [pc, #212]	@ (8008928 <pbuf_take+0x114>)
 8008852:	4834      	ldr	r0, [pc, #208]	@ (8008924 <pbuf_take+0x110>)
 8008854:	f008 fc14 	bl	8011080 <iprintf>
 8008858:	f06f 030f 	mvn.w	r3, #15
 800885c:	e05a      	b.n	8008914 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	891b      	ldrh	r3, [r3, #8]
 8008862:	88fa      	ldrh	r2, [r7, #6]
 8008864:	429a      	cmp	r2, r3
 8008866:	d909      	bls.n	800887c <pbuf_take+0x68>
 8008868:	4b2c      	ldr	r3, [pc, #176]	@ (800891c <pbuf_take+0x108>)
 800886a:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800886e:	492f      	ldr	r1, [pc, #188]	@ (800892c <pbuf_take+0x118>)
 8008870:	482c      	ldr	r0, [pc, #176]	@ (8008924 <pbuf_take+0x110>)
 8008872:	f008 fc05 	bl	8011080 <iprintf>
 8008876:	f04f 33ff 	mov.w	r3, #4294967295
 800887a:	e04b      	b.n	8008914 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d007      	beq.n	8008892 <pbuf_take+0x7e>
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d004      	beq.n	8008892 <pbuf_take+0x7e>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	891b      	ldrh	r3, [r3, #8]
 800888c:	88fa      	ldrh	r2, [r7, #6]
 800888e:	429a      	cmp	r2, r3
 8008890:	d902      	bls.n	8008898 <pbuf_take+0x84>
    return ERR_ARG;
 8008892:	f06f 030f 	mvn.w	r3, #15
 8008896:	e03d      	b.n	8008914 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	61fb      	str	r3, [r7, #28]
 800889c:	e028      	b.n	80088f0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d106      	bne.n	80088b2 <pbuf_take+0x9e>
 80088a4:	4b1d      	ldr	r3, [pc, #116]	@ (800891c <pbuf_take+0x108>)
 80088a6:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 80088aa:	4921      	ldr	r1, [pc, #132]	@ (8008930 <pbuf_take+0x11c>)
 80088ac:	481d      	ldr	r0, [pc, #116]	@ (8008924 <pbuf_take+0x110>)
 80088ae:	f008 fbe7 	bl	8011080 <iprintf>
    buf_copy_len = total_copy_len;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	895b      	ldrh	r3, [r3, #10]
 80088ba:	461a      	mov	r2, r3
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	4293      	cmp	r3, r2
 80088c0:	d902      	bls.n	80088c8 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	895b      	ldrh	r3, [r3, #10]
 80088c6:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	6858      	ldr	r0, [r3, #4]
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	4413      	add	r3, r2
 80088d2:	69ba      	ldr	r2, [r7, #24]
 80088d4:	4619      	mov	r1, r3
 80088d6:	f008 fcfc 	bl	80112d2 <memcpy>
    total_copy_len -= buf_copy_len;
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	4413      	add	r3, r2
 80088e8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	61fb      	str	r3, [r7, #28]
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1d3      	bne.n	800889e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d103      	bne.n	8008904 <pbuf_take+0xf0>
 80088fc:	88fb      	ldrh	r3, [r7, #6]
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	429a      	cmp	r2, r3
 8008902:	d006      	beq.n	8008912 <pbuf_take+0xfe>
 8008904:	4b05      	ldr	r3, [pc, #20]	@ (800891c <pbuf_take+0x108>)
 8008906:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800890a:	490a      	ldr	r1, [pc, #40]	@ (8008934 <pbuf_take+0x120>)
 800890c:	4805      	ldr	r0, [pc, #20]	@ (8008924 <pbuf_take+0x110>)
 800890e:	f008 fbb7 	bl	8011080 <iprintf>
  return ERR_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3720      	adds	r7, #32
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	08012868 	.word	0x08012868
 8008920:	08012c40 	.word	0x08012c40
 8008924:	080128c8 	.word	0x080128c8
 8008928:	08012c58 	.word	0x08012c58
 800892c:	08012c74 	.word	0x08012c74
 8008930:	08012c94 	.word	0x08012c94
 8008934:	08012cac 	.word	0x08012cac

08008938 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	4603      	mov	r3, r0
 8008940:	603a      	str	r2, [r7, #0]
 8008942:	71fb      	strb	r3, [r7, #7]
 8008944:	460b      	mov	r3, r1
 8008946:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	8919      	ldrh	r1, [r3, #8]
 800894c:	88ba      	ldrh	r2, [r7, #4]
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff fa0f 	bl	8007d74 <pbuf_alloc>
 8008956:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <pbuf_clone+0x2a>
    return NULL;
 800895e:	2300      	movs	r3, #0
 8008960:	e011      	b.n	8008986 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f7ff fe11 	bl	800858c <pbuf_copy>
 800896a:	4603      	mov	r3, r0
 800896c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800896e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d006      	beq.n	8008984 <pbuf_clone+0x4c>
 8008976:	4b06      	ldr	r3, [pc, #24]	@ (8008990 <pbuf_clone+0x58>)
 8008978:	f240 5224 	movw	r2, #1316	@ 0x524
 800897c:	4905      	ldr	r1, [pc, #20]	@ (8008994 <pbuf_clone+0x5c>)
 800897e:	4806      	ldr	r0, [pc, #24]	@ (8008998 <pbuf_clone+0x60>)
 8008980:	f008 fb7e 	bl	8011080 <iprintf>
  return q;
 8008984:	68fb      	ldr	r3, [r7, #12]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	08012868 	.word	0x08012868
 8008994:	08012cdc 	.word	0x08012cdc
 8008998:	080128c8 	.word	0x080128c8

0800899c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80089a0:	f008 fa6e 	bl	8010e80 <rand>
 80089a4:	4603      	mov	r3, r0
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	4b01      	ldr	r3, [pc, #4]	@ (80089bc <tcp_init+0x20>)
 80089b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80089b8:	bf00      	nop
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	20000020 	.word	0x20000020

080089c0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	7d1b      	ldrb	r3, [r3, #20]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d105      	bne.n	80089dc <tcp_free+0x1c>
 80089d0:	4b06      	ldr	r3, [pc, #24]	@ (80089ec <tcp_free+0x2c>)
 80089d2:	22d4      	movs	r2, #212	@ 0xd4
 80089d4:	4906      	ldr	r1, [pc, #24]	@ (80089f0 <tcp_free+0x30>)
 80089d6:	4807      	ldr	r0, [pc, #28]	@ (80089f4 <tcp_free+0x34>)
 80089d8:	f008 fb52 	bl	8011080 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80089dc:	6879      	ldr	r1, [r7, #4]
 80089de:	2001      	movs	r0, #1
 80089e0:	f7fe fe36 	bl	8007650 <memp_free>
}
 80089e4:	bf00      	nop
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	08012d68 	.word	0x08012d68
 80089f0:	08012d98 	.word	0x08012d98
 80089f4:	08012dac 	.word	0x08012dac

080089f8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	7d1b      	ldrb	r3, [r3, #20]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d105      	bne.n	8008a14 <tcp_free_listen+0x1c>
 8008a08:	4b06      	ldr	r3, [pc, #24]	@ (8008a24 <tcp_free_listen+0x2c>)
 8008a0a:	22df      	movs	r2, #223	@ 0xdf
 8008a0c:	4906      	ldr	r1, [pc, #24]	@ (8008a28 <tcp_free_listen+0x30>)
 8008a0e:	4807      	ldr	r0, [pc, #28]	@ (8008a2c <tcp_free_listen+0x34>)
 8008a10:	f008 fb36 	bl	8011080 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008a14:	6879      	ldr	r1, [r7, #4]
 8008a16:	2002      	movs	r0, #2
 8008a18:	f7fe fe1a 	bl	8007650 <memp_free>
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	08012d68 	.word	0x08012d68
 8008a28:	08012dd4 	.word	0x08012dd4
 8008a2c:	08012dac 	.word	0x08012dac

08008a30 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008a34:	f000 fea4 	bl	8009780 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008a38:	4b07      	ldr	r3, [pc, #28]	@ (8008a58 <tcp_tmr+0x28>)
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	4b05      	ldr	r3, [pc, #20]	@ (8008a58 <tcp_tmr+0x28>)
 8008a42:	701a      	strb	r2, [r3, #0]
 8008a44:	4b04      	ldr	r3, [pc, #16]	@ (8008a58 <tcp_tmr+0x28>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008a50:	f000 fb54 	bl	80090fc <tcp_slowtmr>
  }
}
 8008a54:	bf00      	nop
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	20008819 	.word	0x20008819

08008a5c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d105      	bne.n	8008a78 <tcp_remove_listener+0x1c>
 8008a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa4 <tcp_remove_listener+0x48>)
 8008a6e:	22ff      	movs	r2, #255	@ 0xff
 8008a70:	490d      	ldr	r1, [pc, #52]	@ (8008aa8 <tcp_remove_listener+0x4c>)
 8008a72:	480e      	ldr	r0, [pc, #56]	@ (8008aac <tcp_remove_listener+0x50>)
 8008a74:	f008 fb04 	bl	8011080 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	e00a      	b.n	8008a94 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d102      	bne.n	8008a8e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1f1      	bne.n	8008a7e <tcp_remove_listener+0x22>
    }
  }
}
 8008a9a:	bf00      	nop
 8008a9c:	bf00      	nop
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	08012d68 	.word	0x08012d68
 8008aa8:	08012df0 	.word	0x08012df0
 8008aac:	08012dac 	.word	0x08012dac

08008ab0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d106      	bne.n	8008acc <tcp_listen_closed+0x1c>
 8008abe:	4b14      	ldr	r3, [pc, #80]	@ (8008b10 <tcp_listen_closed+0x60>)
 8008ac0:	f240 1211 	movw	r2, #273	@ 0x111
 8008ac4:	4913      	ldr	r1, [pc, #76]	@ (8008b14 <tcp_listen_closed+0x64>)
 8008ac6:	4814      	ldr	r0, [pc, #80]	@ (8008b18 <tcp_listen_closed+0x68>)
 8008ac8:	f008 fada 	bl	8011080 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	7d1b      	ldrb	r3, [r3, #20]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d006      	beq.n	8008ae2 <tcp_listen_closed+0x32>
 8008ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8008b10 <tcp_listen_closed+0x60>)
 8008ad6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008ada:	4910      	ldr	r1, [pc, #64]	@ (8008b1c <tcp_listen_closed+0x6c>)
 8008adc:	480e      	ldr	r0, [pc, #56]	@ (8008b18 <tcp_listen_closed+0x68>)
 8008ade:	f008 facf 	bl	8011080 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	60fb      	str	r3, [r7, #12]
 8008ae6:	e00b      	b.n	8008b00 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8008b20 <tcp_listen_closed+0x70>)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6879      	ldr	r1, [r7, #4]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff ffb1 	bl	8008a5c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3301      	adds	r3, #1
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	d9f0      	bls.n	8008ae8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008b06:	bf00      	nop
 8008b08:	bf00      	nop
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	08012d68 	.word	0x08012d68
 8008b14:	08012e18 	.word	0x08012e18
 8008b18:	08012dac 	.word	0x08012dac
 8008b1c:	08012e24 	.word	0x08012e24
 8008b20:	08014d48 	.word	0x08014d48

08008b24 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008b24:	b5b0      	push	{r4, r5, r7, lr}
 8008b26:	b088      	sub	sp, #32
 8008b28:	af04      	add	r7, sp, #16
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d106      	bne.n	8008b44 <tcp_close_shutdown+0x20>
 8008b36:	4b63      	ldr	r3, [pc, #396]	@ (8008cc4 <tcp_close_shutdown+0x1a0>)
 8008b38:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8008b3c:	4962      	ldr	r1, [pc, #392]	@ (8008cc8 <tcp_close_shutdown+0x1a4>)
 8008b3e:	4863      	ldr	r0, [pc, #396]	@ (8008ccc <tcp_close_shutdown+0x1a8>)
 8008b40:	f008 fa9e 	bl	8011080 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d066      	beq.n	8008c18 <tcp_close_shutdown+0xf4>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	7d1b      	ldrb	r3, [r3, #20]
 8008b4e:	2b04      	cmp	r3, #4
 8008b50:	d003      	beq.n	8008b5a <tcp_close_shutdown+0x36>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	7d1b      	ldrb	r3, [r3, #20]
 8008b56:	2b07      	cmp	r3, #7
 8008b58:	d15e      	bne.n	8008c18 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d104      	bne.n	8008b6c <tcp_close_shutdown+0x48>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b66:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008b6a:	d055      	beq.n	8008c18 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	8b5b      	ldrh	r3, [r3, #26]
 8008b70:	f003 0310 	and.w	r3, r3, #16
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d106      	bne.n	8008b86 <tcp_close_shutdown+0x62>
 8008b78:	4b52      	ldr	r3, [pc, #328]	@ (8008cc4 <tcp_close_shutdown+0x1a0>)
 8008b7a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8008b7e:	4954      	ldr	r1, [pc, #336]	@ (8008cd0 <tcp_close_shutdown+0x1ac>)
 8008b80:	4852      	ldr	r0, [pc, #328]	@ (8008ccc <tcp_close_shutdown+0x1a8>)
 8008b82:	f008 fa7d 	bl	8011080 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008b8e:	687d      	ldr	r5, [r7, #4]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	3304      	adds	r3, #4
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	8ad2      	ldrh	r2, [r2, #22]
 8008b98:	6879      	ldr	r1, [r7, #4]
 8008b9a:	8b09      	ldrh	r1, [r1, #24]
 8008b9c:	9102      	str	r1, [sp, #8]
 8008b9e:	9201      	str	r2, [sp, #4]
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	462b      	mov	r3, r5
 8008ba4:	4622      	mov	r2, r4
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f004 fe8d 	bl	800d8c8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f001 f8c8 	bl	8009d44 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008bb4:	4b47      	ldr	r3, [pc, #284]	@ (8008cd4 <tcp_close_shutdown+0x1b0>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d105      	bne.n	8008bca <tcp_close_shutdown+0xa6>
 8008bbe:	4b45      	ldr	r3, [pc, #276]	@ (8008cd4 <tcp_close_shutdown+0x1b0>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	4a43      	ldr	r2, [pc, #268]	@ (8008cd4 <tcp_close_shutdown+0x1b0>)
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	e013      	b.n	8008bf2 <tcp_close_shutdown+0xce>
 8008bca:	4b42      	ldr	r3, [pc, #264]	@ (8008cd4 <tcp_close_shutdown+0x1b0>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	60fb      	str	r3, [r7, #12]
 8008bd0:	e00c      	b.n	8008bec <tcp_close_shutdown+0xc8>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d104      	bne.n	8008be6 <tcp_close_shutdown+0xc2>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	60da      	str	r2, [r3, #12]
 8008be4:	e005      	b.n	8008bf2 <tcp_close_shutdown+0xce>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1ef      	bne.n	8008bd2 <tcp_close_shutdown+0xae>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	60da      	str	r2, [r3, #12]
 8008bf8:	4b37      	ldr	r3, [pc, #220]	@ (8008cd8 <tcp_close_shutdown+0x1b4>)
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008bfe:	4b37      	ldr	r3, [pc, #220]	@ (8008cdc <tcp_close_shutdown+0x1b8>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d102      	bne.n	8008c0e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008c08:	f003 fd5c 	bl	800c6c4 <tcp_trigger_input_pcb_close>
 8008c0c:	e002      	b.n	8008c14 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff fed6 	bl	80089c0 <tcp_free>
      }
      return ERR_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	e050      	b.n	8008cba <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	7d1b      	ldrb	r3, [r3, #20]
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d03b      	beq.n	8008c98 <tcp_close_shutdown+0x174>
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	dc44      	bgt.n	8008cae <tcp_close_shutdown+0x18a>
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <tcp_close_shutdown+0x10a>
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d02a      	beq.n	8008c82 <tcp_close_shutdown+0x15e>
 8008c2c:	e03f      	b.n	8008cae <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	8adb      	ldrh	r3, [r3, #22]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d021      	beq.n	8008c7a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008c36:	4b2a      	ldr	r3, [pc, #168]	@ (8008ce0 <tcp_close_shutdown+0x1bc>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d105      	bne.n	8008c4c <tcp_close_shutdown+0x128>
 8008c40:	4b27      	ldr	r3, [pc, #156]	@ (8008ce0 <tcp_close_shutdown+0x1bc>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	4a26      	ldr	r2, [pc, #152]	@ (8008ce0 <tcp_close_shutdown+0x1bc>)
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	e013      	b.n	8008c74 <tcp_close_shutdown+0x150>
 8008c4c:	4b24      	ldr	r3, [pc, #144]	@ (8008ce0 <tcp_close_shutdown+0x1bc>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	60bb      	str	r3, [r7, #8]
 8008c52:	e00c      	b.n	8008c6e <tcp_close_shutdown+0x14a>
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d104      	bne.n	8008c68 <tcp_close_shutdown+0x144>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	60da      	str	r2, [r3, #12]
 8008c66:	e005      	b.n	8008c74 <tcp_close_shutdown+0x150>
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	60bb      	str	r3, [r7, #8]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1ef      	bne.n	8008c54 <tcp_close_shutdown+0x130>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7ff fea0 	bl	80089c0 <tcp_free>
      break;
 8008c80:	e01a      	b.n	8008cb8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff ff14 	bl	8008ab0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008c88:	6879      	ldr	r1, [r7, #4]
 8008c8a:	4816      	ldr	r0, [pc, #88]	@ (8008ce4 <tcp_close_shutdown+0x1c0>)
 8008c8c:	f001 f8aa 	bl	8009de4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff feb1 	bl	80089f8 <tcp_free_listen>
      break;
 8008c96:	e00f      	b.n	8008cb8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	480e      	ldr	r0, [pc, #56]	@ (8008cd4 <tcp_close_shutdown+0x1b0>)
 8008c9c:	f001 f8a2 	bl	8009de4 <tcp_pcb_remove>
 8008ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd8 <tcp_close_shutdown+0x1b4>)
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7ff fe8a 	bl	80089c0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008cac:	e004      	b.n	8008cb8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f81a 	bl	8008ce8 <tcp_close_shutdown_fin>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	e000      	b.n	8008cba <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	08012d68 	.word	0x08012d68
 8008cc8:	08012e3c 	.word	0x08012e3c
 8008ccc:	08012dac 	.word	0x08012dac
 8008cd0:	08012e5c 	.word	0x08012e5c
 8008cd4:	20008810 	.word	0x20008810
 8008cd8:	20008818 	.word	0x20008818
 8008cdc:	20008850 	.word	0x20008850
 8008ce0:	20008808 	.word	0x20008808
 8008ce4:	2000880c 	.word	0x2000880c

08008ce8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d106      	bne.n	8008d04 <tcp_close_shutdown_fin+0x1c>
 8008cf6:	4b2e      	ldr	r3, [pc, #184]	@ (8008db0 <tcp_close_shutdown_fin+0xc8>)
 8008cf8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8008cfc:	492d      	ldr	r1, [pc, #180]	@ (8008db4 <tcp_close_shutdown_fin+0xcc>)
 8008cfe:	482e      	ldr	r0, [pc, #184]	@ (8008db8 <tcp_close_shutdown_fin+0xd0>)
 8008d00:	f008 f9be 	bl	8011080 <iprintf>

  switch (pcb->state) {
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	7d1b      	ldrb	r3, [r3, #20]
 8008d08:	2b07      	cmp	r3, #7
 8008d0a:	d020      	beq.n	8008d4e <tcp_close_shutdown_fin+0x66>
 8008d0c:	2b07      	cmp	r3, #7
 8008d0e:	dc2b      	bgt.n	8008d68 <tcp_close_shutdown_fin+0x80>
 8008d10:	2b03      	cmp	r3, #3
 8008d12:	d002      	beq.n	8008d1a <tcp_close_shutdown_fin+0x32>
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d00d      	beq.n	8008d34 <tcp_close_shutdown_fin+0x4c>
 8008d18:	e026      	b.n	8008d68 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f003 fee2 	bl	800cae4 <tcp_send_fin>
 8008d20:	4603      	mov	r3, r0
 8008d22:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d11f      	bne.n	8008d6c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2205      	movs	r2, #5
 8008d30:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008d32:	e01b      	b.n	8008d6c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f003 fed5 	bl	800cae4 <tcp_send_fin>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d114      	bne.n	8008d70 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2205      	movs	r2, #5
 8008d4a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008d4c:	e010      	b.n	8008d70 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f003 fec8 	bl	800cae4 <tcp_send_fin>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d109      	bne.n	8008d74 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2209      	movs	r2, #9
 8008d64:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008d66:	e005      	b.n	8008d74 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	e01c      	b.n	8008da6 <tcp_close_shutdown_fin+0xbe>
      break;
 8008d6c:	bf00      	nop
 8008d6e:	e002      	b.n	8008d76 <tcp_close_shutdown_fin+0x8e>
      break;
 8008d70:	bf00      	nop
 8008d72:	e000      	b.n	8008d76 <tcp_close_shutdown_fin+0x8e>
      break;
 8008d74:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d103      	bne.n	8008d86 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f003 ffee 	bl	800cd60 <tcp_output>
 8008d84:	e00d      	b.n	8008da2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8e:	d108      	bne.n	8008da2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	8b5b      	ldrh	r3, [r3, #26]
 8008d94:	f043 0308 	orr.w	r3, r3, #8
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e001      	b.n	8008da6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	08012d68 	.word	0x08012d68
 8008db4:	08012e18 	.word	0x08012e18
 8008db8:	08012dac 	.word	0x08012dac

08008dbc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d109      	bne.n	8008dde <tcp_close+0x22>
 8008dca:	4b0f      	ldr	r3, [pc, #60]	@ (8008e08 <tcp_close+0x4c>)
 8008dcc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008dd0:	490e      	ldr	r1, [pc, #56]	@ (8008e0c <tcp_close+0x50>)
 8008dd2:	480f      	ldr	r0, [pc, #60]	@ (8008e10 <tcp_close+0x54>)
 8008dd4:	f008 f954 	bl	8011080 <iprintf>
 8008dd8:	f06f 030f 	mvn.w	r3, #15
 8008ddc:	e00f      	b.n	8008dfe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	7d1b      	ldrb	r3, [r3, #20]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d006      	beq.n	8008df4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	8b5b      	ldrh	r3, [r3, #26]
 8008dea:	f043 0310 	orr.w	r3, r3, #16
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008df4:	2101      	movs	r1, #1
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff fe94 	bl	8008b24 <tcp_close_shutdown>
 8008dfc:	4603      	mov	r3, r0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	08012d68 	.word	0x08012d68
 8008e0c:	08012e78 	.word	0x08012e78
 8008e10:	08012dac 	.word	0x08012dac

08008e14 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08e      	sub	sp, #56	@ 0x38
 8008e18:	af04      	add	r7, sp, #16
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d107      	bne.n	8008e34 <tcp_abandon+0x20>
 8008e24:	4b52      	ldr	r3, [pc, #328]	@ (8008f70 <tcp_abandon+0x15c>)
 8008e26:	f240 223d 	movw	r2, #573	@ 0x23d
 8008e2a:	4952      	ldr	r1, [pc, #328]	@ (8008f74 <tcp_abandon+0x160>)
 8008e2c:	4852      	ldr	r0, [pc, #328]	@ (8008f78 <tcp_abandon+0x164>)
 8008e2e:	f008 f927 	bl	8011080 <iprintf>
 8008e32:	e099      	b.n	8008f68 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	7d1b      	ldrb	r3, [r3, #20]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d106      	bne.n	8008e4a <tcp_abandon+0x36>
 8008e3c:	4b4c      	ldr	r3, [pc, #304]	@ (8008f70 <tcp_abandon+0x15c>)
 8008e3e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8008e42:	494e      	ldr	r1, [pc, #312]	@ (8008f7c <tcp_abandon+0x168>)
 8008e44:	484c      	ldr	r0, [pc, #304]	@ (8008f78 <tcp_abandon+0x164>)
 8008e46:	f008 f91b 	bl	8011080 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	7d1b      	ldrb	r3, [r3, #20]
 8008e4e:	2b0a      	cmp	r3, #10
 8008e50:	d107      	bne.n	8008e62 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	484a      	ldr	r0, [pc, #296]	@ (8008f80 <tcp_abandon+0x16c>)
 8008e56:	f000 ffc5 	bl	8009de4 <tcp_pcb_remove>
    tcp_free(pcb);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7ff fdb0 	bl	80089c0 <tcp_free>
 8008e60:	e082      	b.n	8008f68 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8008e66:	2300      	movs	r3, #0
 8008e68:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e6e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e74:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e7c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	7d1b      	ldrb	r3, [r3, #20]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d126      	bne.n	8008eda <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	8adb      	ldrh	r3, [r3, #22]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d02e      	beq.n	8008ef2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008e94:	4b3b      	ldr	r3, [pc, #236]	@ (8008f84 <tcp_abandon+0x170>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d105      	bne.n	8008eaa <tcp_abandon+0x96>
 8008e9e:	4b39      	ldr	r3, [pc, #228]	@ (8008f84 <tcp_abandon+0x170>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	4a37      	ldr	r2, [pc, #220]	@ (8008f84 <tcp_abandon+0x170>)
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	e013      	b.n	8008ed2 <tcp_abandon+0xbe>
 8008eaa:	4b36      	ldr	r3, [pc, #216]	@ (8008f84 <tcp_abandon+0x170>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	61fb      	str	r3, [r7, #28]
 8008eb0:	e00c      	b.n	8008ecc <tcp_abandon+0xb8>
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d104      	bne.n	8008ec6 <tcp_abandon+0xb2>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68da      	ldr	r2, [r3, #12]
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	60da      	str	r2, [r3, #12]
 8008ec4:	e005      	b.n	8008ed2 <tcp_abandon+0xbe>
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	61fb      	str	r3, [r7, #28]
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1ef      	bne.n	8008eb2 <tcp_abandon+0x9e>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	60da      	str	r2, [r3, #12]
 8008ed8:	e00b      	b.n	8008ef2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	8adb      	ldrh	r3, [r3, #22]
 8008ee2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008ee4:	6879      	ldr	r1, [r7, #4]
 8008ee6:	4828      	ldr	r0, [pc, #160]	@ (8008f88 <tcp_abandon+0x174>)
 8008ee8:	f000 ff7c 	bl	8009de4 <tcp_pcb_remove>
 8008eec:	4b27      	ldr	r3, [pc, #156]	@ (8008f8c <tcp_abandon+0x178>)
 8008eee:	2201      	movs	r2, #1
 8008ef0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d004      	beq.n	8008f04 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 fd1e 	bl	8009940 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d004      	beq.n	8008f16 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 fd15 	bl	8009940 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d004      	beq.n	8008f28 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fd0c 	bl	8009940 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00e      	beq.n	8008f4c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008f2e:	6879      	ldr	r1, [r7, #4]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3304      	adds	r3, #4
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	8b12      	ldrh	r2, [r2, #24]
 8008f38:	9202      	str	r2, [sp, #8]
 8008f3a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008f3c:	9201      	str	r2, [sp, #4]
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	460b      	mov	r3, r1
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	69b9      	ldr	r1, [r7, #24]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f004 fcbe 	bl	800d8c8 <tcp_rst>
    }
    last_state = pcb->state;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	7d1b      	ldrb	r3, [r3, #20]
 8008f50:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7ff fd34 	bl	80089c0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d004      	beq.n	8008f68 <tcp_abandon+0x154>
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f06f 010c 	mvn.w	r1, #12
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	4798      	blx	r3
  }
}
 8008f68:	3728      	adds	r7, #40	@ 0x28
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	08012d68 	.word	0x08012d68
 8008f74:	08012eac 	.word	0x08012eac
 8008f78:	08012dac 	.word	0x08012dac
 8008f7c:	08012ec8 	.word	0x08012ec8
 8008f80:	20008814 	.word	0x20008814
 8008f84:	20008808 	.word	0x20008808
 8008f88:	20008810 	.word	0x20008810
 8008f8c:	20008818 	.word	0x20008818

08008f90 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008f98:	2101      	movs	r1, #1
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7ff ff3a 	bl	8008e14 <tcp_abandon>
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d106      	bne.n	8008fc4 <tcp_update_rcv_ann_wnd+0x1c>
 8008fb6:	4b25      	ldr	r3, [pc, #148]	@ (800904c <tcp_update_rcv_ann_wnd+0xa4>)
 8008fb8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8008fbc:	4924      	ldr	r1, [pc, #144]	@ (8009050 <tcp_update_rcv_ann_wnd+0xa8>)
 8008fbe:	4825      	ldr	r0, [pc, #148]	@ (8009054 <tcp_update_rcv_ann_wnd+0xac>)
 8008fc0:	f008 f85e 	bl	8011080 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008fcc:	4413      	add	r3, r2
 8008fce:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8008fd8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8008fdc:	bf28      	it	cs
 8008fde:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8008fe2:	b292      	uxth	r2, r2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	db08      	blt.n	8009000 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	e020      	b.n	8009042 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	dd03      	ble.n	8009016 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009014:	e014      	b.n	8009040 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009028:	d306      	bcc.n	8009038 <tcp_update_rcv_ann_wnd+0x90>
 800902a:	4b08      	ldr	r3, [pc, #32]	@ (800904c <tcp_update_rcv_ann_wnd+0xa4>)
 800902c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8009030:	4909      	ldr	r1, [pc, #36]	@ (8009058 <tcp_update_rcv_ann_wnd+0xb0>)
 8009032:	4808      	ldr	r0, [pc, #32]	@ (8009054 <tcp_update_rcv_ann_wnd+0xac>)
 8009034:	f008 f824 	bl	8011080 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	b29a      	uxth	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8009040:	2300      	movs	r3, #0
  }
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	08012d68 	.word	0x08012d68
 8009050:	08012fc4 	.word	0x08012fc4
 8009054:	08012dac 	.word	0x08012dac
 8009058:	08012fe8 	.word	0x08012fe8

0800905c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	460b      	mov	r3, r1
 8009066:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d107      	bne.n	800907e <tcp_recved+0x22>
 800906e:	4b1f      	ldr	r3, [pc, #124]	@ (80090ec <tcp_recved+0x90>)
 8009070:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8009074:	491e      	ldr	r1, [pc, #120]	@ (80090f0 <tcp_recved+0x94>)
 8009076:	481f      	ldr	r0, [pc, #124]	@ (80090f4 <tcp_recved+0x98>)
 8009078:	f008 f802 	bl	8011080 <iprintf>
 800907c:	e032      	b.n	80090e4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	7d1b      	ldrb	r3, [r3, #20]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d106      	bne.n	8009094 <tcp_recved+0x38>
 8009086:	4b19      	ldr	r3, [pc, #100]	@ (80090ec <tcp_recved+0x90>)
 8009088:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800908c:	491a      	ldr	r1, [pc, #104]	@ (80090f8 <tcp_recved+0x9c>)
 800908e:	4819      	ldr	r0, [pc, #100]	@ (80090f4 <tcp_recved+0x98>)
 8009090:	f007 fff6 	bl	8011080 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009098:	887b      	ldrh	r3, [r7, #2]
 800909a:	4413      	add	r3, r2
 800909c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800909e:	89fb      	ldrh	r3, [r7, #14]
 80090a0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80090a4:	d804      	bhi.n	80090b0 <tcp_recved+0x54>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090aa:	89fa      	ldrh	r2, [r7, #14]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d204      	bcs.n	80090ba <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80090b6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80090b8:	e002      	b.n	80090c0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	89fa      	ldrh	r2, [r7, #14]
 80090be:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7ff ff71 	bl	8008fa8 <tcp_update_rcv_ann_wnd>
 80090c6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80090ce:	d309      	bcc.n	80090e4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	8b5b      	ldrh	r3, [r3, #26]
 80090d4:	f043 0302 	orr.w	r3, r3, #2
 80090d8:	b29a      	uxth	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f003 fe3e 	bl	800cd60 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	08012d68 	.word	0x08012d68
 80090f0:	08013004 	.word	0x08013004
 80090f4:	08012dac 	.word	0x08012dac
 80090f8:	0801301c 	.word	0x0801301c

080090fc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80090fc:	b5b0      	push	{r4, r5, r7, lr}
 80090fe:	b090      	sub	sp, #64	@ 0x40
 8009100:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8009108:	4b95      	ldr	r3, [pc, #596]	@ (8009360 <tcp_slowtmr+0x264>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3301      	adds	r3, #1
 800910e:	4a94      	ldr	r2, [pc, #592]	@ (8009360 <tcp_slowtmr+0x264>)
 8009110:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009112:	4b94      	ldr	r3, [pc, #592]	@ (8009364 <tcp_slowtmr+0x268>)
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	3301      	adds	r3, #1
 8009118:	b2da      	uxtb	r2, r3
 800911a:	4b92      	ldr	r3, [pc, #584]	@ (8009364 <tcp_slowtmr+0x268>)
 800911c:	701a      	strb	r2, [r3, #0]
 800911e:	e000      	b.n	8009122 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8009120:	bf00      	nop
  prev = NULL;
 8009122:	2300      	movs	r3, #0
 8009124:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8009126:	4b90      	ldr	r3, [pc, #576]	@ (8009368 <tcp_slowtmr+0x26c>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800912c:	e29f      	b.n	800966e <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800912e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009130:	7d1b      	ldrb	r3, [r3, #20]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <tcp_slowtmr+0x48>
 8009136:	4b8d      	ldr	r3, [pc, #564]	@ (800936c <tcp_slowtmr+0x270>)
 8009138:	f240 42be 	movw	r2, #1214	@ 0x4be
 800913c:	498c      	ldr	r1, [pc, #560]	@ (8009370 <tcp_slowtmr+0x274>)
 800913e:	488d      	ldr	r0, [pc, #564]	@ (8009374 <tcp_slowtmr+0x278>)
 8009140:	f007 ff9e 	bl	8011080 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009146:	7d1b      	ldrb	r3, [r3, #20]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d106      	bne.n	800915a <tcp_slowtmr+0x5e>
 800914c:	4b87      	ldr	r3, [pc, #540]	@ (800936c <tcp_slowtmr+0x270>)
 800914e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8009152:	4989      	ldr	r1, [pc, #548]	@ (8009378 <tcp_slowtmr+0x27c>)
 8009154:	4887      	ldr	r0, [pc, #540]	@ (8009374 <tcp_slowtmr+0x278>)
 8009156:	f007 ff93 	bl	8011080 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800915a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800915c:	7d1b      	ldrb	r3, [r3, #20]
 800915e:	2b0a      	cmp	r3, #10
 8009160:	d106      	bne.n	8009170 <tcp_slowtmr+0x74>
 8009162:	4b82      	ldr	r3, [pc, #520]	@ (800936c <tcp_slowtmr+0x270>)
 8009164:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8009168:	4984      	ldr	r1, [pc, #528]	@ (800937c <tcp_slowtmr+0x280>)
 800916a:	4882      	ldr	r0, [pc, #520]	@ (8009374 <tcp_slowtmr+0x278>)
 800916c:	f007 ff88 	bl	8011080 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009172:	7f9a      	ldrb	r2, [r3, #30]
 8009174:	4b7b      	ldr	r3, [pc, #492]	@ (8009364 <tcp_slowtmr+0x268>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	429a      	cmp	r2, r3
 800917a:	d105      	bne.n	8009188 <tcp_slowtmr+0x8c>
      prev = pcb;
 800917c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8009186:	e272      	b.n	800966e <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8009188:	4b76      	ldr	r3, [pc, #472]	@ (8009364 <tcp_slowtmr+0x268>)
 800918a:	781a      	ldrb	r2, [r3, #0]
 800918c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800918e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800919c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919e:	7d1b      	ldrb	r3, [r3, #20]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d10a      	bne.n	80091ba <tcp_slowtmr+0xbe>
 80091a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80091aa:	2b05      	cmp	r3, #5
 80091ac:	d905      	bls.n	80091ba <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80091ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091b2:	3301      	adds	r3, #1
 80091b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80091b8:	e11e      	b.n	80093f8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80091ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80091c0:	2b0b      	cmp	r3, #11
 80091c2:	d905      	bls.n	80091d0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80091c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091c8:	3301      	adds	r3, #1
 80091ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80091ce:	e113      	b.n	80093f8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80091d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d075      	beq.n	80092c6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80091da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d006      	beq.n	80091f0 <tcp_slowtmr+0xf4>
 80091e2:	4b62      	ldr	r3, [pc, #392]	@ (800936c <tcp_slowtmr+0x270>)
 80091e4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80091e8:	4965      	ldr	r1, [pc, #404]	@ (8009380 <tcp_slowtmr+0x284>)
 80091ea:	4862      	ldr	r0, [pc, #392]	@ (8009374 <tcp_slowtmr+0x278>)
 80091ec:	f007 ff48 	bl	8011080 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80091f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d106      	bne.n	8009206 <tcp_slowtmr+0x10a>
 80091f8:	4b5c      	ldr	r3, [pc, #368]	@ (800936c <tcp_slowtmr+0x270>)
 80091fa:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80091fe:	4961      	ldr	r1, [pc, #388]	@ (8009384 <tcp_slowtmr+0x288>)
 8009200:	485c      	ldr	r0, [pc, #368]	@ (8009374 <tcp_slowtmr+0x278>)
 8009202:	f007 ff3d 	bl	8011080 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009208:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800920c:	2b0b      	cmp	r3, #11
 800920e:	d905      	bls.n	800921c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8009210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009214:	3301      	adds	r3, #1
 8009216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800921a:	e0ed      	b.n	80093f8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800921c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800921e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009222:	3b01      	subs	r3, #1
 8009224:	4a58      	ldr	r2, [pc, #352]	@ (8009388 <tcp_slowtmr+0x28c>)
 8009226:	5cd3      	ldrb	r3, [r2, r3]
 8009228:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800922a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800922c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009230:	7c7a      	ldrb	r2, [r7, #17]
 8009232:	429a      	cmp	r2, r3
 8009234:	d907      	bls.n	8009246 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8009236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009238:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800923c:	3301      	adds	r3, #1
 800923e:	b2da      	uxtb	r2, r3
 8009240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009242:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8009246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009248:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800924c:	7c7a      	ldrb	r2, [r7, #17]
 800924e:	429a      	cmp	r2, r3
 8009250:	f200 80d2 	bhi.w	80093f8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8009254:	2301      	movs	r3, #1
 8009256:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8009258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800925a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800925e:	2b00      	cmp	r3, #0
 8009260:	d108      	bne.n	8009274 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009262:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009264:	f004 fc24 	bl	800dab0 <tcp_zero_window_probe>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d014      	beq.n	8009298 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800926e:	2300      	movs	r3, #0
 8009270:	623b      	str	r3, [r7, #32]
 8009272:	e011      	b.n	8009298 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800927a:	4619      	mov	r1, r3
 800927c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800927e:	f003 fae9 	bl	800c854 <tcp_split_unsent_seg>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d107      	bne.n	8009298 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8009288:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800928a:	f003 fd69 	bl	800cd60 <tcp_output>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8009294:	2300      	movs	r3, #0
 8009296:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	2b00      	cmp	r3, #0
 800929c:	f000 80ac 	beq.w	80093f8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80092a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80092a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092aa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80092ae:	2b06      	cmp	r3, #6
 80092b0:	f200 80a2 	bhi.w	80093f8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80092b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092b6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80092ba:	3301      	adds	r3, #1
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80092c4:	e098      	b.n	80093f8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80092c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	db0f      	blt.n	80092f0 <tcp_slowtmr+0x1f4>
 80092d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80092d6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80092da:	4293      	cmp	r3, r2
 80092dc:	d008      	beq.n	80092f0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80092de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	3301      	adds	r3, #1
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	b21a      	sxth	r2, r3
 80092ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ee:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80092f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80092f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80092fc:	429a      	cmp	r2, r3
 80092fe:	db7b      	blt.n	80093f8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009300:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009302:	f004 f821 	bl	800d348 <tcp_rexmit_rto_prepare>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d007      	beq.n	800931c <tcp_slowtmr+0x220>
 800930c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009310:	2b00      	cmp	r3, #0
 8009312:	d171      	bne.n	80093f8 <tcp_slowtmr+0x2fc>
 8009314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009318:	2b00      	cmp	r3, #0
 800931a:	d06d      	beq.n	80093f8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800931c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800931e:	7d1b      	ldrb	r3, [r3, #20]
 8009320:	2b02      	cmp	r3, #2
 8009322:	d03a      	beq.n	800939a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009326:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800932a:	2b0c      	cmp	r3, #12
 800932c:	bf28      	it	cs
 800932e:	230c      	movcs	r3, #12
 8009330:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009334:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009338:	10db      	asrs	r3, r3, #3
 800933a:	b21b      	sxth	r3, r3
 800933c:	461a      	mov	r2, r3
 800933e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009340:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009344:	4413      	add	r3, r2
 8009346:	7efa      	ldrb	r2, [r7, #27]
 8009348:	4910      	ldr	r1, [pc, #64]	@ (800938c <tcp_slowtmr+0x290>)
 800934a:	5c8a      	ldrb	r2, [r1, r2]
 800934c:	4093      	lsls	r3, r2
 800934e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8009356:	4293      	cmp	r3, r2
 8009358:	dc1a      	bgt.n	8009390 <tcp_slowtmr+0x294>
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	b21a      	sxth	r2, r3
 800935e:	e019      	b.n	8009394 <tcp_slowtmr+0x298>
 8009360:	20008804 	.word	0x20008804
 8009364:	2000881a 	.word	0x2000881a
 8009368:	20008810 	.word	0x20008810
 800936c:	08012d68 	.word	0x08012d68
 8009370:	080130ac 	.word	0x080130ac
 8009374:	08012dac 	.word	0x08012dac
 8009378:	080130d8 	.word	0x080130d8
 800937c:	08013104 	.word	0x08013104
 8009380:	08013134 	.word	0x08013134
 8009384:	08013168 	.word	0x08013168
 8009388:	08014d40 	.word	0x08014d40
 800938c:	08014d30 	.word	0x08014d30
 8009390:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009396:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800939a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800939c:	2200      	movs	r2, #0
 800939e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80093a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80093a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80093ac:	4293      	cmp	r3, r2
 80093ae:	bf28      	it	cs
 80093b0:	4613      	movcs	r3, r2
 80093b2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80093b4:	8a7b      	ldrh	r3, [r7, #18]
 80093b6:	085b      	lsrs	r3, r3, #1
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093bc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80093c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80093c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d206      	bcs.n	80093e0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80093d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	b29a      	uxth	r2, r3
 80093da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093dc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80093e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80093e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80093ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ec:	2200      	movs	r2, #0
 80093ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80093f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093f4:	f004 f818 	bl	800d428 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80093f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fa:	7d1b      	ldrb	r3, [r3, #20]
 80093fc:	2b06      	cmp	r3, #6
 80093fe:	d111      	bne.n	8009424 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8009400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009402:	8b5b      	ldrh	r3, [r3, #26]
 8009404:	f003 0310 	and.w	r3, r3, #16
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00b      	beq.n	8009424 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800940c:	4b9d      	ldr	r3, [pc, #628]	@ (8009684 <tcp_slowtmr+0x588>)
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009412:	6a1b      	ldr	r3, [r3, #32]
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	2b28      	cmp	r3, #40	@ 0x28
 8009418:	d904      	bls.n	8009424 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800941a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800941e:	3301      	adds	r3, #1
 8009420:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009426:	7a5b      	ldrb	r3, [r3, #9]
 8009428:	f003 0308 	and.w	r3, r3, #8
 800942c:	2b00      	cmp	r3, #0
 800942e:	d04c      	beq.n	80094ca <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8009430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009432:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009434:	2b04      	cmp	r3, #4
 8009436:	d003      	beq.n	8009440 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8009438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800943c:	2b07      	cmp	r3, #7
 800943e:	d144      	bne.n	80094ca <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009440:	4b90      	ldr	r3, [pc, #576]	@ (8009684 <tcp_slowtmr+0x588>)
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009446:	6a1b      	ldr	r3, [r3, #32]
 8009448:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800944a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009450:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8009454:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8009458:	498b      	ldr	r1, [pc, #556]	@ (8009688 <tcp_slowtmr+0x58c>)
 800945a:	fba1 1303 	umull	r1, r3, r1, r3
 800945e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009460:	429a      	cmp	r2, r3
 8009462:	d90a      	bls.n	800947a <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8009464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009468:	3301      	adds	r3, #1
 800946a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800946e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009472:	3301      	adds	r3, #1
 8009474:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009478:	e027      	b.n	80094ca <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800947a:	4b82      	ldr	r3, [pc, #520]	@ (8009684 <tcp_slowtmr+0x588>)
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009486:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800948a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009490:	4618      	mov	r0, r3
 8009492:	4b7e      	ldr	r3, [pc, #504]	@ (800968c <tcp_slowtmr+0x590>)
 8009494:	fb00 f303 	mul.w	r3, r0, r3
 8009498:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800949a:	497b      	ldr	r1, [pc, #492]	@ (8009688 <tcp_slowtmr+0x58c>)
 800949c:	fba1 1303 	umull	r1, r3, r1, r3
 80094a0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d911      	bls.n	80094ca <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 80094a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80094a8:	f004 fac2 	bl	800da30 <tcp_keepalive>
 80094ac:	4603      	mov	r3, r0
 80094ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80094b2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d107      	bne.n	80094ca <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 80094ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094bc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80094c0:	3301      	adds	r3, #1
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80094ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d011      	beq.n	80094f6 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80094d2:	4b6c      	ldr	r3, [pc, #432]	@ (8009684 <tcp_slowtmr+0x588>)
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	1ad2      	subs	r2, r2, r3
 80094dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094de:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80094e2:	4619      	mov	r1, r3
 80094e4:	460b      	mov	r3, r1
 80094e6:	005b      	lsls	r3, r3, #1
 80094e8:	440b      	add	r3, r1
 80094ea:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d302      	bcc.n	80094f6 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 80094f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80094f2:	f000 fddb 	bl	800a0ac <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80094f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f8:	7d1b      	ldrb	r3, [r3, #20]
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d10b      	bne.n	8009516 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094fe:	4b61      	ldr	r3, [pc, #388]	@ (8009684 <tcp_slowtmr+0x588>)
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	2b28      	cmp	r3, #40	@ 0x28
 800950a:	d904      	bls.n	8009516 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800950c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009510:	3301      	adds	r3, #1
 8009512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8009516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009518:	7d1b      	ldrb	r3, [r3, #20]
 800951a:	2b09      	cmp	r3, #9
 800951c:	d10b      	bne.n	8009536 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800951e:	4b59      	ldr	r3, [pc, #356]	@ (8009684 <tcp_slowtmr+0x588>)
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	2bf0      	cmp	r3, #240	@ 0xf0
 800952a:	d904      	bls.n	8009536 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800952c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009530:	3301      	adds	r3, #1
 8009532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8009536:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800953a:	2b00      	cmp	r3, #0
 800953c:	d060      	beq.n	8009600 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800953e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009544:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8009546:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009548:	f000 fbfc 	bl	8009d44 <tcp_pcb_purge>
      if (prev != NULL) {
 800954c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954e:	2b00      	cmp	r3, #0
 8009550:	d010      	beq.n	8009574 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009552:	4b4f      	ldr	r3, [pc, #316]	@ (8009690 <tcp_slowtmr+0x594>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009558:	429a      	cmp	r2, r3
 800955a:	d106      	bne.n	800956a <tcp_slowtmr+0x46e>
 800955c:	4b4d      	ldr	r3, [pc, #308]	@ (8009694 <tcp_slowtmr+0x598>)
 800955e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8009562:	494d      	ldr	r1, [pc, #308]	@ (8009698 <tcp_slowtmr+0x59c>)
 8009564:	484d      	ldr	r0, [pc, #308]	@ (800969c <tcp_slowtmr+0x5a0>)
 8009566:	f007 fd8b 	bl	8011080 <iprintf>
        prev->next = pcb->next;
 800956a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956c:	68da      	ldr	r2, [r3, #12]
 800956e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009570:	60da      	str	r2, [r3, #12]
 8009572:	e00f      	b.n	8009594 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009574:	4b46      	ldr	r3, [pc, #280]	@ (8009690 <tcp_slowtmr+0x594>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800957a:	429a      	cmp	r2, r3
 800957c:	d006      	beq.n	800958c <tcp_slowtmr+0x490>
 800957e:	4b45      	ldr	r3, [pc, #276]	@ (8009694 <tcp_slowtmr+0x598>)
 8009580:	f240 5271 	movw	r2, #1393	@ 0x571
 8009584:	4946      	ldr	r1, [pc, #280]	@ (80096a0 <tcp_slowtmr+0x5a4>)
 8009586:	4845      	ldr	r0, [pc, #276]	@ (800969c <tcp_slowtmr+0x5a0>)
 8009588:	f007 fd7a 	bl	8011080 <iprintf>
        tcp_active_pcbs = pcb->next;
 800958c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	4a3f      	ldr	r2, [pc, #252]	@ (8009690 <tcp_slowtmr+0x594>)
 8009592:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8009594:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009598:	2b00      	cmp	r3, #0
 800959a:	d013      	beq.n	80095c4 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800959c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800959e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80095a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80095a4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80095a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a8:	3304      	adds	r3, #4
 80095aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095ac:	8ad2      	ldrh	r2, [r2, #22]
 80095ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095b0:	8b09      	ldrh	r1, [r1, #24]
 80095b2:	9102      	str	r1, [sp, #8]
 80095b4:	9201      	str	r2, [sp, #4]
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	462b      	mov	r3, r5
 80095ba:	4622      	mov	r2, r4
 80095bc:	4601      	mov	r1, r0
 80095be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80095c0:	f004 f982 	bl	800d8c8 <tcp_rst>
      err_arg = pcb->callback_arg;
 80095c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80095ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095cc:	7d1b      	ldrb	r3, [r3, #20]
 80095ce:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80095d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80095d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80095da:	6838      	ldr	r0, [r7, #0]
 80095dc:	f7ff f9f0 	bl	80089c0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80095e0:	4b30      	ldr	r3, [pc, #192]	@ (80096a4 <tcp_slowtmr+0x5a8>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d004      	beq.n	80095f6 <tcp_slowtmr+0x4fa>
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f06f 010c 	mvn.w	r1, #12
 80095f2:	68b8      	ldr	r0, [r7, #8]
 80095f4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80095f6:	4b2b      	ldr	r3, [pc, #172]	@ (80096a4 <tcp_slowtmr+0x5a8>)
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d037      	beq.n	800966e <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80095fe:	e590      	b.n	8009122 <tcp_slowtmr+0x26>
      prev = pcb;
 8009600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009602:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800960a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960c:	7f1b      	ldrb	r3, [r3, #28]
 800960e:	3301      	adds	r3, #1
 8009610:	b2da      	uxtb	r2, r3
 8009612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009614:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009618:	7f1a      	ldrb	r2, [r3, #28]
 800961a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961c:	7f5b      	ldrb	r3, [r3, #29]
 800961e:	429a      	cmp	r2, r3
 8009620:	d325      	bcc.n	800966e <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8009622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009624:	2200      	movs	r2, #0
 8009626:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8009628:	4b1e      	ldr	r3, [pc, #120]	@ (80096a4 <tcp_slowtmr+0x5a8>)
 800962a:	2200      	movs	r2, #0
 800962c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800962e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00b      	beq.n	8009650 <tcp_slowtmr+0x554>
 8009638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800963e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009640:	6912      	ldr	r2, [r2, #16]
 8009642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009644:	4610      	mov	r0, r2
 8009646:	4798      	blx	r3
 8009648:	4603      	mov	r3, r0
 800964a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800964e:	e002      	b.n	8009656 <tcp_slowtmr+0x55a>
 8009650:	2300      	movs	r3, #0
 8009652:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8009656:	4b13      	ldr	r3, [pc, #76]	@ (80096a4 <tcp_slowtmr+0x5a8>)
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	f47f ad60 	bne.w	8009120 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009660:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009664:	2b00      	cmp	r3, #0
 8009666:	d102      	bne.n	800966e <tcp_slowtmr+0x572>
          tcp_output(prev);
 8009668:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800966a:	f003 fb79 	bl	800cd60 <tcp_output>
  while (pcb != NULL) {
 800966e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009670:	2b00      	cmp	r3, #0
 8009672:	f47f ad5c 	bne.w	800912e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009676:	2300      	movs	r3, #0
 8009678:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800967a:	4b0b      	ldr	r3, [pc, #44]	@ (80096a8 <tcp_slowtmr+0x5ac>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009680:	e067      	b.n	8009752 <tcp_slowtmr+0x656>
 8009682:	bf00      	nop
 8009684:	20008804 	.word	0x20008804
 8009688:	10624dd3 	.word	0x10624dd3
 800968c:	000124f8 	.word	0x000124f8
 8009690:	20008810 	.word	0x20008810
 8009694:	08012d68 	.word	0x08012d68
 8009698:	080131a0 	.word	0x080131a0
 800969c:	08012dac 	.word	0x08012dac
 80096a0:	080131cc 	.word	0x080131cc
 80096a4:	20008818 	.word	0x20008818
 80096a8:	20008814 	.word	0x20008814
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80096ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ae:	7d1b      	ldrb	r3, [r3, #20]
 80096b0:	2b0a      	cmp	r3, #10
 80096b2:	d006      	beq.n	80096c2 <tcp_slowtmr+0x5c6>
 80096b4:	4b2b      	ldr	r3, [pc, #172]	@ (8009764 <tcp_slowtmr+0x668>)
 80096b6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80096ba:	492b      	ldr	r1, [pc, #172]	@ (8009768 <tcp_slowtmr+0x66c>)
 80096bc:	482b      	ldr	r0, [pc, #172]	@ (800976c <tcp_slowtmr+0x670>)
 80096be:	f007 fcdf 	bl	8011080 <iprintf>
    pcb_remove = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80096c8:	4b29      	ldr	r3, [pc, #164]	@ (8009770 <tcp_slowtmr+0x674>)
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ce:	6a1b      	ldr	r3, [r3, #32]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	2bf0      	cmp	r3, #240	@ 0xf0
 80096d4:	d904      	bls.n	80096e0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80096d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096da:	3301      	adds	r3, #1
 80096dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80096e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d02f      	beq.n	8009748 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80096e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096ea:	f000 fb2b 	bl	8009d44 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80096ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d010      	beq.n	8009716 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80096f4:	4b1f      	ldr	r3, [pc, #124]	@ (8009774 <tcp_slowtmr+0x678>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d106      	bne.n	800970c <tcp_slowtmr+0x610>
 80096fe:	4b19      	ldr	r3, [pc, #100]	@ (8009764 <tcp_slowtmr+0x668>)
 8009700:	f240 52af 	movw	r2, #1455	@ 0x5af
 8009704:	491c      	ldr	r1, [pc, #112]	@ (8009778 <tcp_slowtmr+0x67c>)
 8009706:	4819      	ldr	r0, [pc, #100]	@ (800976c <tcp_slowtmr+0x670>)
 8009708:	f007 fcba 	bl	8011080 <iprintf>
        prev->next = pcb->next;
 800970c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970e:	68da      	ldr	r2, [r3, #12]
 8009710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009712:	60da      	str	r2, [r3, #12]
 8009714:	e00f      	b.n	8009736 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009716:	4b17      	ldr	r3, [pc, #92]	@ (8009774 <tcp_slowtmr+0x678>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800971c:	429a      	cmp	r2, r3
 800971e:	d006      	beq.n	800972e <tcp_slowtmr+0x632>
 8009720:	4b10      	ldr	r3, [pc, #64]	@ (8009764 <tcp_slowtmr+0x668>)
 8009722:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8009726:	4915      	ldr	r1, [pc, #84]	@ (800977c <tcp_slowtmr+0x680>)
 8009728:	4810      	ldr	r0, [pc, #64]	@ (800976c <tcp_slowtmr+0x670>)
 800972a:	f007 fca9 	bl	8011080 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800972e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	4a10      	ldr	r2, [pc, #64]	@ (8009774 <tcp_slowtmr+0x678>)
 8009734:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009738:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800973a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009740:	69f8      	ldr	r0, [r7, #28]
 8009742:	f7ff f93d 	bl	80089c0 <tcp_free>
 8009746:	e004      	b.n	8009752 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8009748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800974c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1a9      	bne.n	80096ac <tcp_slowtmr+0x5b0>
    }
  }
}
 8009758:	bf00      	nop
 800975a:	bf00      	nop
 800975c:	3730      	adds	r7, #48	@ 0x30
 800975e:	46bd      	mov	sp, r7
 8009760:	bdb0      	pop	{r4, r5, r7, pc}
 8009762:	bf00      	nop
 8009764:	08012d68 	.word	0x08012d68
 8009768:	080131f8 	.word	0x080131f8
 800976c:	08012dac 	.word	0x08012dac
 8009770:	20008804 	.word	0x20008804
 8009774:	20008814 	.word	0x20008814
 8009778:	08013228 	.word	0x08013228
 800977c:	08013250 	.word	0x08013250

08009780 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009786:	4b2d      	ldr	r3, [pc, #180]	@ (800983c <tcp_fasttmr+0xbc>)
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	3301      	adds	r3, #1
 800978c:	b2da      	uxtb	r2, r3
 800978e:	4b2b      	ldr	r3, [pc, #172]	@ (800983c <tcp_fasttmr+0xbc>)
 8009790:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009792:	4b2b      	ldr	r3, [pc, #172]	@ (8009840 <tcp_fasttmr+0xc0>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009798:	e048      	b.n	800982c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	7f9a      	ldrb	r2, [r3, #30]
 800979e:	4b27      	ldr	r3, [pc, #156]	@ (800983c <tcp_fasttmr+0xbc>)
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d03f      	beq.n	8009826 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80097a6:	4b25      	ldr	r3, [pc, #148]	@ (800983c <tcp_fasttmr+0xbc>)
 80097a8:	781a      	ldrb	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	8b5b      	ldrh	r3, [r3, #26]
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d010      	beq.n	80097dc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	8b5b      	ldrh	r3, [r3, #26]
 80097be:	f043 0302 	orr.w	r3, r3, #2
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f003 fac9 	bl	800cd60 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	8b5b      	ldrh	r3, [r3, #26]
 80097d2:	f023 0303 	bic.w	r3, r3, #3
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	8b5b      	ldrh	r3, [r3, #26]
 80097e0:	f003 0308 	and.w	r3, r3, #8
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d009      	beq.n	80097fc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	8b5b      	ldrh	r3, [r3, #26]
 80097ec:	f023 0308 	bic.w	r3, r3, #8
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7ff fa76 	bl	8008ce8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00a      	beq.n	8009820 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800980a:	4b0e      	ldr	r3, [pc, #56]	@ (8009844 <tcp_fasttmr+0xc4>)
 800980c:	2200      	movs	r2, #0
 800980e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f819 	bl	8009848 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009816:	4b0b      	ldr	r3, [pc, #44]	@ (8009844 <tcp_fasttmr+0xc4>)
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d000      	beq.n	8009820 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800981e:	e7b8      	b.n	8009792 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	607b      	str	r3, [r7, #4]
 8009824:	e002      	b.n	800982c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1b3      	bne.n	800979a <tcp_fasttmr+0x1a>
    }
  }
}
 8009832:	bf00      	nop
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	2000881a 	.word	0x2000881a
 8009840:	20008810 	.word	0x20008810
 8009844:	20008818 	.word	0x20008818

08009848 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009848:	b590      	push	{r4, r7, lr}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d109      	bne.n	800986a <tcp_process_refused_data+0x22>
 8009856:	4b37      	ldr	r3, [pc, #220]	@ (8009934 <tcp_process_refused_data+0xec>)
 8009858:	f240 6209 	movw	r2, #1545	@ 0x609
 800985c:	4936      	ldr	r1, [pc, #216]	@ (8009938 <tcp_process_refused_data+0xf0>)
 800985e:	4837      	ldr	r0, [pc, #220]	@ (800993c <tcp_process_refused_data+0xf4>)
 8009860:	f007 fc0e 	bl	8011080 <iprintf>
 8009864:	f06f 030f 	mvn.w	r3, #15
 8009868:	e060      	b.n	800992c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800986e:	7b5b      	ldrb	r3, [r3, #13]
 8009870:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009876:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00b      	beq.n	80098a0 <tcp_process_refused_data+0x58>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6918      	ldr	r0, [r3, #16]
 8009892:	2300      	movs	r3, #0
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	47a0      	blx	r4
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]
 800989e:	e007      	b.n	80098b0 <tcp_process_refused_data+0x68>
 80098a0:	2300      	movs	r3, #0
 80098a2:	68ba      	ldr	r2, [r7, #8]
 80098a4:	6879      	ldr	r1, [r7, #4]
 80098a6:	2000      	movs	r0, #0
 80098a8:	f000 f8a4 	bl	80099f4 <tcp_recv_null>
 80098ac:	4603      	mov	r3, r0
 80098ae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80098b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d12a      	bne.n	800990e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	f003 0320 	and.w	r3, r3, #32
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d033      	beq.n	800992a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098c6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80098ca:	d005      	beq.n	80098d8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098d0:	3301      	adds	r3, #1
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00b      	beq.n	80098fa <tcp_process_refused_data+0xb2>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6918      	ldr	r0, [r3, #16]
 80098ec:	2300      	movs	r3, #0
 80098ee:	2200      	movs	r2, #0
 80098f0:	6879      	ldr	r1, [r7, #4]
 80098f2:	47a0      	blx	r4
 80098f4:	4603      	mov	r3, r0
 80098f6:	73fb      	strb	r3, [r7, #15]
 80098f8:	e001      	b.n	80098fe <tcp_process_refused_data+0xb6>
 80098fa:	2300      	movs	r3, #0
 80098fc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80098fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009902:	f113 0f0d 	cmn.w	r3, #13
 8009906:	d110      	bne.n	800992a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009908:	f06f 030c 	mvn.w	r3, #12
 800990c:	e00e      	b.n	800992c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800990e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009912:	f113 0f0d 	cmn.w	r3, #13
 8009916:	d102      	bne.n	800991e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009918:	f06f 030c 	mvn.w	r3, #12
 800991c:	e006      	b.n	800992c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8009924:	f06f 0304 	mvn.w	r3, #4
 8009928:	e000      	b.n	800992c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	bd90      	pop	{r4, r7, pc}
 8009934:	08012d68 	.word	0x08012d68
 8009938:	08013278 	.word	0x08013278
 800993c:	08012dac 	.word	0x08012dac

08009940 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009948:	e007      	b.n	800995a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f80a 	bl	800996a <tcp_seg_free>
    seg = next;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1f4      	bne.n	800994a <tcp_segs_free+0xa>
  }
}
 8009960:	bf00      	nop
 8009962:	bf00      	nop
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00c      	beq.n	8009992 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d004      	beq.n	800998a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe fcd9 	bl	800833c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800998a:	6879      	ldr	r1, [r7, #4]
 800998c:	2003      	movs	r0, #3
 800998e:	f7fd fe5f 	bl	8007650 <memp_free>
  }
}
 8009992:	bf00      	nop
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d106      	bne.n	80099b8 <tcp_seg_copy+0x1c>
 80099aa:	4b0f      	ldr	r3, [pc, #60]	@ (80099e8 <tcp_seg_copy+0x4c>)
 80099ac:	f240 6282 	movw	r2, #1666	@ 0x682
 80099b0:	490e      	ldr	r1, [pc, #56]	@ (80099ec <tcp_seg_copy+0x50>)
 80099b2:	480f      	ldr	r0, [pc, #60]	@ (80099f0 <tcp_seg_copy+0x54>)
 80099b4:	f007 fb64 	bl	8011080 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80099b8:	2003      	movs	r0, #3
 80099ba:	f7fd fdd9 	bl	8007570 <memp_malloc>
 80099be:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <tcp_seg_copy+0x2e>
    return NULL;
 80099c6:	2300      	movs	r3, #0
 80099c8:	e00a      	b.n	80099e0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80099ca:	2210      	movs	r2, #16
 80099cc:	6879      	ldr	r1, [r7, #4]
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f007 fc7f 	bl	80112d2 <memcpy>
  pbuf_ref(cseg->p);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fe fd4f 	bl	800847c <pbuf_ref>
  return cseg;
 80099de:	68fb      	ldr	r3, [r7, #12]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	08012d68 	.word	0x08012d68
 80099ec:	080132bc 	.word	0x080132bc
 80099f0:	08012dac 	.word	0x08012dac

080099f4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d109      	bne.n	8009a1c <tcp_recv_null+0x28>
 8009a08:	4b12      	ldr	r3, [pc, #72]	@ (8009a54 <tcp_recv_null+0x60>)
 8009a0a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009a0e:	4912      	ldr	r1, [pc, #72]	@ (8009a58 <tcp_recv_null+0x64>)
 8009a10:	4812      	ldr	r0, [pc, #72]	@ (8009a5c <tcp_recv_null+0x68>)
 8009a12:	f007 fb35 	bl	8011080 <iprintf>
 8009a16:	f06f 030f 	mvn.w	r3, #15
 8009a1a:	e016      	b.n	8009a4a <tcp_recv_null+0x56>

  if (p != NULL) {
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d009      	beq.n	8009a36 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	891b      	ldrh	r3, [r3, #8]
 8009a26:	4619      	mov	r1, r3
 8009a28:	68b8      	ldr	r0, [r7, #8]
 8009a2a:	f7ff fb17 	bl	800905c <tcp_recved>
    pbuf_free(p);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7fe fc84 	bl	800833c <pbuf_free>
 8009a34:	e008      	b.n	8009a48 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009a36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d104      	bne.n	8009a48 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009a3e:	68b8      	ldr	r0, [r7, #8]
 8009a40:	f7ff f9bc 	bl	8008dbc <tcp_close>
 8009a44:	4603      	mov	r3, r0
 8009a46:	e000      	b.n	8009a4a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	08012d68 	.word	0x08012d68
 8009a58:	080132d8 	.word	0x080132d8
 8009a5c:	08012dac 	.word	0x08012dac

08009a60 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	4603      	mov	r3, r0
 8009a68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	db01      	blt.n	8009a76 <tcp_kill_prio+0x16>
 8009a72:	79fb      	ldrb	r3, [r7, #7]
 8009a74:	e000      	b.n	8009a78 <tcp_kill_prio+0x18>
 8009a76:	237f      	movs	r3, #127	@ 0x7f
 8009a78:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009a7a:	7afb      	ldrb	r3, [r7, #11]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d034      	beq.n	8009aea <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009a80:	7afb      	ldrb	r3, [r7, #11]
 8009a82:	3b01      	subs	r3, #1
 8009a84:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009a86:	2300      	movs	r3, #0
 8009a88:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a8e:	4b19      	ldr	r3, [pc, #100]	@ (8009af4 <tcp_kill_prio+0x94>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	617b      	str	r3, [r7, #20]
 8009a94:	e01f      	b.n	8009ad6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	7d5b      	ldrb	r3, [r3, #21]
 8009a9a:	7afa      	ldrb	r2, [r7, #11]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d80c      	bhi.n	8009aba <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009aa4:	7afa      	ldrb	r2, [r7, #11]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d112      	bne.n	8009ad0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009aaa:	4b13      	ldr	r3, [pc, #76]	@ (8009af8 <tcp_kill_prio+0x98>)
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d80a      	bhi.n	8009ad0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009aba:	4b0f      	ldr	r3, [pc, #60]	@ (8009af8 <tcp_kill_prio+0x98>)
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	7d5b      	ldrb	r3, [r3, #21]
 8009ace:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	617b      	str	r3, [r7, #20]
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1dc      	bne.n	8009a96 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d004      	beq.n	8009aec <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009ae2:	6938      	ldr	r0, [r7, #16]
 8009ae4:	f7ff fa54 	bl	8008f90 <tcp_abort>
 8009ae8:	e000      	b.n	8009aec <tcp_kill_prio+0x8c>
    return;
 8009aea:	bf00      	nop
  }
}
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20008810 	.word	0x20008810
 8009af8:	20008804 	.word	0x20008804

08009afc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	4603      	mov	r3, r0
 8009b04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009b06:	79fb      	ldrb	r3, [r7, #7]
 8009b08:	2b08      	cmp	r3, #8
 8009b0a:	d009      	beq.n	8009b20 <tcp_kill_state+0x24>
 8009b0c:	79fb      	ldrb	r3, [r7, #7]
 8009b0e:	2b09      	cmp	r3, #9
 8009b10:	d006      	beq.n	8009b20 <tcp_kill_state+0x24>
 8009b12:	4b1a      	ldr	r3, [pc, #104]	@ (8009b7c <tcp_kill_state+0x80>)
 8009b14:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8009b18:	4919      	ldr	r1, [pc, #100]	@ (8009b80 <tcp_kill_state+0x84>)
 8009b1a:	481a      	ldr	r0, [pc, #104]	@ (8009b84 <tcp_kill_state+0x88>)
 8009b1c:	f007 fab0 	bl	8011080 <iprintf>

  inactivity = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009b24:	2300      	movs	r3, #0
 8009b26:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b28:	4b17      	ldr	r3, [pc, #92]	@ (8009b88 <tcp_kill_state+0x8c>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	617b      	str	r3, [r7, #20]
 8009b2e:	e017      	b.n	8009b60 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	7d1b      	ldrb	r3, [r3, #20]
 8009b34:	79fa      	ldrb	r2, [r7, #7]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d10f      	bne.n	8009b5a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009b3a:	4b14      	ldr	r3, [pc, #80]	@ (8009b8c <tcp_kill_state+0x90>)
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d807      	bhi.n	8009b5a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009b4a:	4b10      	ldr	r3, [pc, #64]	@ (8009b8c <tcp_kill_state+0x90>)
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	617b      	str	r3, [r7, #20]
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1e4      	bne.n	8009b30 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d003      	beq.n	8009b74 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	6938      	ldr	r0, [r7, #16]
 8009b70:	f7ff f950 	bl	8008e14 <tcp_abandon>
  }
}
 8009b74:	bf00      	nop
 8009b76:	3718      	adds	r7, #24
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	08012d68 	.word	0x08012d68
 8009b80:	080132f4 	.word	0x080132f4
 8009b84:	08012dac 	.word	0x08012dac
 8009b88:	20008810 	.word	0x20008810
 8009b8c:	20008804 	.word	0x20008804

08009b90 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009b96:	2300      	movs	r3, #0
 8009b98:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b9e:	4b12      	ldr	r3, [pc, #72]	@ (8009be8 <tcp_kill_timewait+0x58>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	e012      	b.n	8009bcc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009ba6:	4b11      	ldr	r3, [pc, #68]	@ (8009bec <tcp_kill_timewait+0x5c>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6a1b      	ldr	r3, [r3, #32]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d807      	bhi.n	8009bc6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8009bec <tcp_kill_timewait+0x5c>)
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1e9      	bne.n	8009ba6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d002      	beq.n	8009bde <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009bd8:	68b8      	ldr	r0, [r7, #8]
 8009bda:	f7ff f9d9 	bl	8008f90 <tcp_abort>
  }
}
 8009bde:	bf00      	nop
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	20008814 	.word	0x20008814
 8009bec:	20008804 	.word	0x20008804

08009bf0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009bf6:	4b10      	ldr	r3, [pc, #64]	@ (8009c38 <tcp_handle_closepend+0x48>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009bfc:	e014      	b.n	8009c28 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	8b5b      	ldrh	r3, [r3, #26]
 8009c08:	f003 0308 	and.w	r3, r3, #8
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d009      	beq.n	8009c24 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	8b5b      	ldrh	r3, [r3, #26]
 8009c14:	f023 0308 	bic.w	r3, r3, #8
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7ff f862 	bl	8008ce8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1e7      	bne.n	8009bfe <tcp_handle_closepend+0xe>
  }
}
 8009c2e:	bf00      	nop
 8009c30:	bf00      	nop
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	20008810 	.word	0x20008810

08009c3c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	4603      	mov	r3, r0
 8009c44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c46:	2001      	movs	r0, #1
 8009c48:	f7fd fc92 	bl	8007570 <memp_malloc>
 8009c4c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d126      	bne.n	8009ca2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009c54:	f7ff ffcc 	bl	8009bf0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009c58:	f7ff ff9a 	bl	8009b90 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c5c:	2001      	movs	r0, #1
 8009c5e:	f7fd fc87 	bl	8007570 <memp_malloc>
 8009c62:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d11b      	bne.n	8009ca2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009c6a:	2009      	movs	r0, #9
 8009c6c:	f7ff ff46 	bl	8009afc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c70:	2001      	movs	r0, #1
 8009c72:	f7fd fc7d 	bl	8007570 <memp_malloc>
 8009c76:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d111      	bne.n	8009ca2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009c7e:	2008      	movs	r0, #8
 8009c80:	f7ff ff3c 	bl	8009afc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c84:	2001      	movs	r0, #1
 8009c86:	f7fd fc73 	bl	8007570 <memp_malloc>
 8009c8a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d107      	bne.n	8009ca2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009c92:	79fb      	ldrb	r3, [r7, #7]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7ff fee3 	bl	8009a60 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c9a:	2001      	movs	r0, #1
 8009c9c:	f7fd fc68 	bl	8007570 <memp_malloc>
 8009ca0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d03f      	beq.n	8009d28 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009ca8:	229c      	movs	r2, #156	@ 0x9c
 8009caa:	2100      	movs	r1, #0
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f007 fa88 	bl	80111c2 <memset>
    pcb->prio = prio;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	79fa      	ldrb	r2, [r7, #7]
 8009cb6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009cbe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8009cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	22ff      	movs	r2, #255	@ 0xff
 8009cd6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009cde:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2206      	movs	r2, #6
 8009ce4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2206      	movs	r2, #6
 8009cec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009cf4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8009cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8009d34 <tcp_alloc+0xf8>)
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009d06:	4b0c      	ldr	r3, [pc, #48]	@ (8009d38 <tcp_alloc+0xfc>)
 8009d08:	781a      	ldrb	r2, [r3, #0]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009d14:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	4a08      	ldr	r2, [pc, #32]	@ (8009d3c <tcp_alloc+0x100>)
 8009d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	4a07      	ldr	r2, [pc, #28]	@ (8009d40 <tcp_alloc+0x104>)
 8009d24:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009d28:	68fb      	ldr	r3, [r7, #12]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	20008804 	.word	0x20008804
 8009d38:	2000881a 	.word	0x2000881a
 8009d3c:	080099f5 	.word	0x080099f5
 8009d40:	006ddd00 	.word	0x006ddd00

08009d44 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d107      	bne.n	8009d62 <tcp_pcb_purge+0x1e>
 8009d52:	4b21      	ldr	r3, [pc, #132]	@ (8009dd8 <tcp_pcb_purge+0x94>)
 8009d54:	f640 0251 	movw	r2, #2129	@ 0x851
 8009d58:	4920      	ldr	r1, [pc, #128]	@ (8009ddc <tcp_pcb_purge+0x98>)
 8009d5a:	4821      	ldr	r0, [pc, #132]	@ (8009de0 <tcp_pcb_purge+0x9c>)
 8009d5c:	f007 f990 	bl	8011080 <iprintf>
 8009d60:	e037      	b.n	8009dd2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	7d1b      	ldrb	r3, [r3, #20]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d033      	beq.n	8009dd2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009d6e:	2b0a      	cmp	r3, #10
 8009d70:	d02f      	beq.n	8009dd2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d02b      	beq.n	8009dd2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d007      	beq.n	8009d92 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fe fad8 	bl	800833c <pbuf_free>
      pcb->refused_data = NULL;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d002      	beq.n	8009da0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f986 	bl	800a0ac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009da6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7ff fdc7 	bl	8009940 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7ff fdc2 	bl	8009940 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	08012d68 	.word	0x08012d68
 8009ddc:	080133b4 	.word	0x080133b4
 8009de0:	08012dac 	.word	0x08012dac

08009de4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d106      	bne.n	8009e02 <tcp_pcb_remove+0x1e>
 8009df4:	4b3e      	ldr	r3, [pc, #248]	@ (8009ef0 <tcp_pcb_remove+0x10c>)
 8009df6:	f640 0283 	movw	r2, #2179	@ 0x883
 8009dfa:	493e      	ldr	r1, [pc, #248]	@ (8009ef4 <tcp_pcb_remove+0x110>)
 8009dfc:	483e      	ldr	r0, [pc, #248]	@ (8009ef8 <tcp_pcb_remove+0x114>)
 8009dfe:	f007 f93f 	bl	8011080 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d106      	bne.n	8009e16 <tcp_pcb_remove+0x32>
 8009e08:	4b39      	ldr	r3, [pc, #228]	@ (8009ef0 <tcp_pcb_remove+0x10c>)
 8009e0a:	f640 0284 	movw	r2, #2180	@ 0x884
 8009e0e:	493b      	ldr	r1, [pc, #236]	@ (8009efc <tcp_pcb_remove+0x118>)
 8009e10:	4839      	ldr	r0, [pc, #228]	@ (8009ef8 <tcp_pcb_remove+0x114>)
 8009e12:	f007 f935 	bl	8011080 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d105      	bne.n	8009e2c <tcp_pcb_remove+0x48>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68da      	ldr	r2, [r3, #12]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	601a      	str	r2, [r3, #0]
 8009e2a:	e013      	b.n	8009e54 <tcp_pcb_remove+0x70>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	60fb      	str	r3, [r7, #12]
 8009e32:	e00c      	b.n	8009e4e <tcp_pcb_remove+0x6a>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	683a      	ldr	r2, [r7, #0]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d104      	bne.n	8009e48 <tcp_pcb_remove+0x64>
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	68da      	ldr	r2, [r3, #12]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	60da      	str	r2, [r3, #12]
 8009e46:	e005      	b.n	8009e54 <tcp_pcb_remove+0x70>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1ef      	bne.n	8009e34 <tcp_pcb_remove+0x50>
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	2200      	movs	r2, #0
 8009e58:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009e5a:	6838      	ldr	r0, [r7, #0]
 8009e5c:	f7ff ff72 	bl	8009d44 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	7d1b      	ldrb	r3, [r3, #20]
 8009e64:	2b0a      	cmp	r3, #10
 8009e66:	d013      	beq.n	8009e90 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d00f      	beq.n	8009e90 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	8b5b      	ldrh	r3, [r3, #26]
 8009e74:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d009      	beq.n	8009e90 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	8b5b      	ldrh	r3, [r3, #26]
 8009e80:	f043 0302 	orr.w	r3, r3, #2
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009e8a:	6838      	ldr	r0, [r7, #0]
 8009e8c:	f002 ff68 	bl	800cd60 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	7d1b      	ldrb	r3, [r3, #20]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d020      	beq.n	8009eda <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d006      	beq.n	8009eae <tcp_pcb_remove+0xca>
 8009ea0:	4b13      	ldr	r3, [pc, #76]	@ (8009ef0 <tcp_pcb_remove+0x10c>)
 8009ea2:	f640 0293 	movw	r2, #2195	@ 0x893
 8009ea6:	4916      	ldr	r1, [pc, #88]	@ (8009f00 <tcp_pcb_remove+0x11c>)
 8009ea8:	4813      	ldr	r0, [pc, #76]	@ (8009ef8 <tcp_pcb_remove+0x114>)
 8009eaa:	f007 f8e9 	bl	8011080 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d006      	beq.n	8009ec4 <tcp_pcb_remove+0xe0>
 8009eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8009ef0 <tcp_pcb_remove+0x10c>)
 8009eb8:	f640 0294 	movw	r2, #2196	@ 0x894
 8009ebc:	4911      	ldr	r1, [pc, #68]	@ (8009f04 <tcp_pcb_remove+0x120>)
 8009ebe:	480e      	ldr	r0, [pc, #56]	@ (8009ef8 <tcp_pcb_remove+0x114>)
 8009ec0:	f007 f8de 	bl	8011080 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d006      	beq.n	8009eda <tcp_pcb_remove+0xf6>
 8009ecc:	4b08      	ldr	r3, [pc, #32]	@ (8009ef0 <tcp_pcb_remove+0x10c>)
 8009ece:	f640 0296 	movw	r2, #2198	@ 0x896
 8009ed2:	490d      	ldr	r1, [pc, #52]	@ (8009f08 <tcp_pcb_remove+0x124>)
 8009ed4:	4808      	ldr	r0, [pc, #32]	@ (8009ef8 <tcp_pcb_remove+0x114>)
 8009ed6:	f007 f8d3 	bl	8011080 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	2200      	movs	r2, #0
 8009ede:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009ee6:	bf00      	nop
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	08012d68 	.word	0x08012d68
 8009ef4:	080133d0 	.word	0x080133d0
 8009ef8:	08012dac 	.word	0x08012dac
 8009efc:	080133ec 	.word	0x080133ec
 8009f00:	0801340c 	.word	0x0801340c
 8009f04:	08013424 	.word	0x08013424
 8009f08:	08013440 	.word	0x08013440

08009f0c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d106      	bne.n	8009f28 <tcp_next_iss+0x1c>
 8009f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8009f44 <tcp_next_iss+0x38>)
 8009f1c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8009f20:	4909      	ldr	r1, [pc, #36]	@ (8009f48 <tcp_next_iss+0x3c>)
 8009f22:	480a      	ldr	r0, [pc, #40]	@ (8009f4c <tcp_next_iss+0x40>)
 8009f24:	f007 f8ac 	bl	8011080 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009f28:	4b09      	ldr	r3, [pc, #36]	@ (8009f50 <tcp_next_iss+0x44>)
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	4b09      	ldr	r3, [pc, #36]	@ (8009f54 <tcp_next_iss+0x48>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4413      	add	r3, r2
 8009f32:	4a07      	ldr	r2, [pc, #28]	@ (8009f50 <tcp_next_iss+0x44>)
 8009f34:	6013      	str	r3, [r2, #0]
  return iss;
 8009f36:	4b06      	ldr	r3, [pc, #24]	@ (8009f50 <tcp_next_iss+0x44>)
 8009f38:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	08012d68 	.word	0x08012d68
 8009f48:	08013458 	.word	0x08013458
 8009f4c:	08012dac 	.word	0x08012dac
 8009f50:	20000024 	.word	0x20000024
 8009f54:	20008804 	.word	0x20008804

08009f58 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	4603      	mov	r3, r0
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
 8009f64:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d106      	bne.n	8009f7a <tcp_eff_send_mss_netif+0x22>
 8009f6c:	4b14      	ldr	r3, [pc, #80]	@ (8009fc0 <tcp_eff_send_mss_netif+0x68>)
 8009f6e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8009f72:	4914      	ldr	r1, [pc, #80]	@ (8009fc4 <tcp_eff_send_mss_netif+0x6c>)
 8009f74:	4814      	ldr	r0, [pc, #80]	@ (8009fc8 <tcp_eff_send_mss_netif+0x70>)
 8009f76:	f007 f883 	bl	8011080 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009f80:	89fb      	ldrh	r3, [r7, #14]
 8009f82:	e019      	b.n	8009fb8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009f88:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009f8a:	8afb      	ldrh	r3, [r7, #22]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d012      	beq.n	8009fb6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009f90:	2328      	movs	r3, #40	@ 0x28
 8009f92:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009f94:	8afa      	ldrh	r2, [r7, #22]
 8009f96:	8abb      	ldrh	r3, [r7, #20]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d904      	bls.n	8009fa6 <tcp_eff_send_mss_netif+0x4e>
 8009f9c:	8afa      	ldrh	r2, [r7, #22]
 8009f9e:	8abb      	ldrh	r3, [r7, #20]
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	e000      	b.n	8009fa8 <tcp_eff_send_mss_netif+0x50>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009faa:	8a7a      	ldrh	r2, [r7, #18]
 8009fac:	89fb      	ldrh	r3, [r7, #14]
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	bf28      	it	cs
 8009fb2:	4613      	movcs	r3, r2
 8009fb4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009fb6:	89fb      	ldrh	r3, [r7, #14]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	08012d68 	.word	0x08012d68
 8009fc4:	08013474 	.word	0x08013474
 8009fc8:	08012dac 	.word	0x08012dac

08009fcc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d119      	bne.n	800a014 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009fe0:	4b10      	ldr	r3, [pc, #64]	@ (800a024 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009fe2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8009fe6:	4910      	ldr	r1, [pc, #64]	@ (800a028 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009fe8:	4810      	ldr	r0, [pc, #64]	@ (800a02c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009fea:	f007 f849 	bl	8011080 <iprintf>

  while (pcb != NULL) {
 8009fee:	e011      	b.n	800a014 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d108      	bne.n	800a00e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f7fe ffc4 	bl	8008f90 <tcp_abort>
      pcb = next;
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	60fb      	str	r3, [r7, #12]
 800a00c:	e002      	b.n	800a014 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1ea      	bne.n	8009ff0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a01a:	bf00      	nop
 800a01c:	bf00      	nop
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	08012d68 	.word	0x08012d68
 800a028:	0801349c 	.word	0x0801349c
 800a02c:	08012dac 	.word	0x08012dac

0800a030 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d02a      	beq.n	800a096 <tcp_netif_ip_addr_changed+0x66>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d026      	beq.n	800a096 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a048:	4b15      	ldr	r3, [pc, #84]	@ (800a0a0 <tcp_netif_ip_addr_changed+0x70>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7ff ffbc 	bl	8009fcc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a054:	4b13      	ldr	r3, [pc, #76]	@ (800a0a4 <tcp_netif_ip_addr_changed+0x74>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4619      	mov	r1, r3
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f7ff ffb6 	bl	8009fcc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d017      	beq.n	800a096 <tcp_netif_ip_addr_changed+0x66>
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d013      	beq.n	800a096 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a06e:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a8 <tcp_netif_ip_addr_changed+0x78>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	e00c      	b.n	800a090 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d103      	bne.n	800a08a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	60fb      	str	r3, [r7, #12]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1ef      	bne.n	800a076 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a096:	bf00      	nop
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20008810 	.word	0x20008810
 800a0a4:	20008808 	.word	0x20008808
 800a0a8:	2000880c 	.word	0x2000880c

0800a0ac <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d007      	beq.n	800a0cc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7ff fc3d 	bl	8009940 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a0cc:	bf00      	nop
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a0d4:	b590      	push	{r4, r7, lr}
 800a0d6:	b08d      	sub	sp, #52	@ 0x34
 800a0d8:	af04      	add	r7, sp, #16
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d105      	bne.n	800a0f0 <tcp_input+0x1c>
 800a0e4:	4b9b      	ldr	r3, [pc, #620]	@ (800a354 <tcp_input+0x280>)
 800a0e6:	2283      	movs	r2, #131	@ 0x83
 800a0e8:	499b      	ldr	r1, [pc, #620]	@ (800a358 <tcp_input+0x284>)
 800a0ea:	489c      	ldr	r0, [pc, #624]	@ (800a35c <tcp_input+0x288>)
 800a0ec:	f006 ffc8 	bl	8011080 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	4a9a      	ldr	r2, [pc, #616]	@ (800a360 <tcp_input+0x28c>)
 800a0f6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	895b      	ldrh	r3, [r3, #10]
 800a0fc:	2b13      	cmp	r3, #19
 800a0fe:	f240 83d1 	bls.w	800a8a4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a102:	4b98      	ldr	r3, [pc, #608]	@ (800a364 <tcp_input+0x290>)
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	4a97      	ldr	r2, [pc, #604]	@ (800a364 <tcp_input+0x290>)
 800a108:	6812      	ldr	r2, [r2, #0]
 800a10a:	4611      	mov	r1, r2
 800a10c:	4618      	mov	r0, r3
 800a10e:	f005 ff61 	bl	800ffd4 <ip4_addr_isbroadcast_u32>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	f040 83c7 	bne.w	800a8a8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a11a:	4b92      	ldr	r3, [pc, #584]	@ (800a364 <tcp_input+0x290>)
 800a11c:	695b      	ldr	r3, [r3, #20]
 800a11e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a122:	2be0      	cmp	r3, #224	@ 0xe0
 800a124:	f000 83c0 	beq.w	800a8a8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a128:	4b8d      	ldr	r3, [pc, #564]	@ (800a360 <tcp_input+0x28c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	899b      	ldrh	r3, [r3, #12]
 800a12e:	b29b      	uxth	r3, r3
 800a130:	4618      	mov	r0, r3
 800a132:	f7fc fda5 	bl	8006c80 <lwip_htons>
 800a136:	4603      	mov	r3, r0
 800a138:	0b1b      	lsrs	r3, r3, #12
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a142:	7cbb      	ldrb	r3, [r7, #18]
 800a144:	2b13      	cmp	r3, #19
 800a146:	f240 83b1 	bls.w	800a8ac <tcp_input+0x7d8>
 800a14a:	7cbb      	ldrb	r3, [r7, #18]
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	891b      	ldrh	r3, [r3, #8]
 800a152:	429a      	cmp	r2, r3
 800a154:	f200 83aa 	bhi.w	800a8ac <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a158:	7cbb      	ldrb	r3, [r7, #18]
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	3b14      	subs	r3, #20
 800a15e:	b29a      	uxth	r2, r3
 800a160:	4b81      	ldr	r3, [pc, #516]	@ (800a368 <tcp_input+0x294>)
 800a162:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a164:	4b81      	ldr	r3, [pc, #516]	@ (800a36c <tcp_input+0x298>)
 800a166:	2200      	movs	r2, #0
 800a168:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	895a      	ldrh	r2, [r3, #10]
 800a16e:	7cbb      	ldrb	r3, [r7, #18]
 800a170:	b29b      	uxth	r3, r3
 800a172:	429a      	cmp	r2, r3
 800a174:	d309      	bcc.n	800a18a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a176:	4b7c      	ldr	r3, [pc, #496]	@ (800a368 <tcp_input+0x294>)
 800a178:	881a      	ldrh	r2, [r3, #0]
 800a17a:	4b7d      	ldr	r3, [pc, #500]	@ (800a370 <tcp_input+0x29c>)
 800a17c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a17e:	7cbb      	ldrb	r3, [r7, #18]
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7fe f854 	bl	8008230 <pbuf_remove_header>
 800a188:	e04e      	b.n	800a228 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d105      	bne.n	800a19e <tcp_input+0xca>
 800a192:	4b70      	ldr	r3, [pc, #448]	@ (800a354 <tcp_input+0x280>)
 800a194:	22c2      	movs	r2, #194	@ 0xc2
 800a196:	4977      	ldr	r1, [pc, #476]	@ (800a374 <tcp_input+0x2a0>)
 800a198:	4870      	ldr	r0, [pc, #448]	@ (800a35c <tcp_input+0x288>)
 800a19a:	f006 ff71 	bl	8011080 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a19e:	2114      	movs	r1, #20
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f7fe f845 	bl	8008230 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	895a      	ldrh	r2, [r3, #10]
 800a1aa:	4b71      	ldr	r3, [pc, #452]	@ (800a370 <tcp_input+0x29c>)
 800a1ac:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a1ae:	4b6e      	ldr	r3, [pc, #440]	@ (800a368 <tcp_input+0x294>)
 800a1b0:	881a      	ldrh	r2, [r3, #0]
 800a1b2:	4b6f      	ldr	r3, [pc, #444]	@ (800a370 <tcp_input+0x29c>)
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a1ba:	4b6d      	ldr	r3, [pc, #436]	@ (800a370 <tcp_input+0x29c>)
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7fe f835 	bl	8008230 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	895b      	ldrh	r3, [r3, #10]
 800a1cc:	8a3a      	ldrh	r2, [r7, #16]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	f200 836e 	bhi.w	800a8b0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	4a64      	ldr	r2, [pc, #400]	@ (800a36c <tcp_input+0x298>)
 800a1dc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	8a3a      	ldrh	r2, [r7, #16]
 800a1e4:	4611      	mov	r1, r2
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fe f822 	bl	8008230 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	891a      	ldrh	r2, [r3, #8]
 800a1f0:	8a3b      	ldrh	r3, [r7, #16]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	895b      	ldrh	r3, [r3, #10]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d005      	beq.n	800a20e <tcp_input+0x13a>
 800a202:	4b54      	ldr	r3, [pc, #336]	@ (800a354 <tcp_input+0x280>)
 800a204:	22df      	movs	r2, #223	@ 0xdf
 800a206:	495c      	ldr	r1, [pc, #368]	@ (800a378 <tcp_input+0x2a4>)
 800a208:	4854      	ldr	r0, [pc, #336]	@ (800a35c <tcp_input+0x288>)
 800a20a:	f006 ff39 	bl	8011080 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	891a      	ldrh	r2, [r3, #8]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	891b      	ldrh	r3, [r3, #8]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d005      	beq.n	800a228 <tcp_input+0x154>
 800a21c:	4b4d      	ldr	r3, [pc, #308]	@ (800a354 <tcp_input+0x280>)
 800a21e:	22e0      	movs	r2, #224	@ 0xe0
 800a220:	4956      	ldr	r1, [pc, #344]	@ (800a37c <tcp_input+0x2a8>)
 800a222:	484e      	ldr	r0, [pc, #312]	@ (800a35c <tcp_input+0x288>)
 800a224:	f006 ff2c 	bl	8011080 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a228:	4b4d      	ldr	r3, [pc, #308]	@ (800a360 <tcp_input+0x28c>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	881b      	ldrh	r3, [r3, #0]
 800a22e:	b29b      	uxth	r3, r3
 800a230:	4a4b      	ldr	r2, [pc, #300]	@ (800a360 <tcp_input+0x28c>)
 800a232:	6814      	ldr	r4, [r2, #0]
 800a234:	4618      	mov	r0, r3
 800a236:	f7fc fd23 	bl	8006c80 <lwip_htons>
 800a23a:	4603      	mov	r3, r0
 800a23c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a23e:	4b48      	ldr	r3, [pc, #288]	@ (800a360 <tcp_input+0x28c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	885b      	ldrh	r3, [r3, #2]
 800a244:	b29b      	uxth	r3, r3
 800a246:	4a46      	ldr	r2, [pc, #280]	@ (800a360 <tcp_input+0x28c>)
 800a248:	6814      	ldr	r4, [r2, #0]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fc fd18 	bl	8006c80 <lwip_htons>
 800a250:	4603      	mov	r3, r0
 800a252:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a254:	4b42      	ldr	r3, [pc, #264]	@ (800a360 <tcp_input+0x28c>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	4a41      	ldr	r2, [pc, #260]	@ (800a360 <tcp_input+0x28c>)
 800a25c:	6814      	ldr	r4, [r2, #0]
 800a25e:	4618      	mov	r0, r3
 800a260:	f7fc fd24 	bl	8006cac <lwip_htonl>
 800a264:	4603      	mov	r3, r0
 800a266:	6063      	str	r3, [r4, #4]
 800a268:	6863      	ldr	r3, [r4, #4]
 800a26a:	4a45      	ldr	r2, [pc, #276]	@ (800a380 <tcp_input+0x2ac>)
 800a26c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a26e:	4b3c      	ldr	r3, [pc, #240]	@ (800a360 <tcp_input+0x28c>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	4a3a      	ldr	r2, [pc, #232]	@ (800a360 <tcp_input+0x28c>)
 800a276:	6814      	ldr	r4, [r2, #0]
 800a278:	4618      	mov	r0, r3
 800a27a:	f7fc fd17 	bl	8006cac <lwip_htonl>
 800a27e:	4603      	mov	r3, r0
 800a280:	60a3      	str	r3, [r4, #8]
 800a282:	68a3      	ldr	r3, [r4, #8]
 800a284:	4a3f      	ldr	r2, [pc, #252]	@ (800a384 <tcp_input+0x2b0>)
 800a286:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a288:	4b35      	ldr	r3, [pc, #212]	@ (800a360 <tcp_input+0x28c>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	89db      	ldrh	r3, [r3, #14]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	4a33      	ldr	r2, [pc, #204]	@ (800a360 <tcp_input+0x28c>)
 800a292:	6814      	ldr	r4, [r2, #0]
 800a294:	4618      	mov	r0, r3
 800a296:	f7fc fcf3 	bl	8006c80 <lwip_htons>
 800a29a:	4603      	mov	r3, r0
 800a29c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a29e:	4b30      	ldr	r3, [pc, #192]	@ (800a360 <tcp_input+0x28c>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	899b      	ldrh	r3, [r3, #12]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fc fcea 	bl	8006c80 <lwip_htons>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2b4:	b2da      	uxtb	r2, r3
 800a2b6:	4b34      	ldr	r3, [pc, #208]	@ (800a388 <tcp_input+0x2b4>)
 800a2b8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	891a      	ldrh	r2, [r3, #8]
 800a2be:	4b33      	ldr	r3, [pc, #204]	@ (800a38c <tcp_input+0x2b8>)
 800a2c0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a2c2:	4b31      	ldr	r3, [pc, #196]	@ (800a388 <tcp_input+0x2b4>)
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	f003 0303 	and.w	r3, r3, #3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00c      	beq.n	800a2e8 <tcp_input+0x214>
    tcplen++;
 800a2ce:	4b2f      	ldr	r3, [pc, #188]	@ (800a38c <tcp_input+0x2b8>)
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	4b2d      	ldr	r3, [pc, #180]	@ (800a38c <tcp_input+0x2b8>)
 800a2d8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	891a      	ldrh	r2, [r3, #8]
 800a2de:	4b2b      	ldr	r3, [pc, #172]	@ (800a38c <tcp_input+0x2b8>)
 800a2e0:	881b      	ldrh	r3, [r3, #0]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	f200 82e6 	bhi.w	800a8b4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2ec:	4b28      	ldr	r3, [pc, #160]	@ (800a390 <tcp_input+0x2bc>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	61fb      	str	r3, [r7, #28]
 800a2f2:	e09d      	b.n	800a430 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	7d1b      	ldrb	r3, [r3, #20]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d105      	bne.n	800a308 <tcp_input+0x234>
 800a2fc:	4b15      	ldr	r3, [pc, #84]	@ (800a354 <tcp_input+0x280>)
 800a2fe:	22fb      	movs	r2, #251	@ 0xfb
 800a300:	4924      	ldr	r1, [pc, #144]	@ (800a394 <tcp_input+0x2c0>)
 800a302:	4816      	ldr	r0, [pc, #88]	@ (800a35c <tcp_input+0x288>)
 800a304:	f006 febc 	bl	8011080 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	7d1b      	ldrb	r3, [r3, #20]
 800a30c:	2b0a      	cmp	r3, #10
 800a30e:	d105      	bne.n	800a31c <tcp_input+0x248>
 800a310:	4b10      	ldr	r3, [pc, #64]	@ (800a354 <tcp_input+0x280>)
 800a312:	22fc      	movs	r2, #252	@ 0xfc
 800a314:	4920      	ldr	r1, [pc, #128]	@ (800a398 <tcp_input+0x2c4>)
 800a316:	4811      	ldr	r0, [pc, #68]	@ (800a35c <tcp_input+0x288>)
 800a318:	f006 feb2 	bl	8011080 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	7d1b      	ldrb	r3, [r3, #20]
 800a320:	2b01      	cmp	r3, #1
 800a322:	d105      	bne.n	800a330 <tcp_input+0x25c>
 800a324:	4b0b      	ldr	r3, [pc, #44]	@ (800a354 <tcp_input+0x280>)
 800a326:	22fd      	movs	r2, #253	@ 0xfd
 800a328:	491c      	ldr	r1, [pc, #112]	@ (800a39c <tcp_input+0x2c8>)
 800a32a:	480c      	ldr	r0, [pc, #48]	@ (800a35c <tcp_input+0x288>)
 800a32c:	f006 fea8 	bl	8011080 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	7a1b      	ldrb	r3, [r3, #8]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d033      	beq.n	800a3a0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	7a1a      	ldrb	r2, [r3, #8]
 800a33c:	4b09      	ldr	r3, [pc, #36]	@ (800a364 <tcp_input+0x290>)
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a344:	3301      	adds	r3, #1
 800a346:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a348:	429a      	cmp	r2, r3
 800a34a:	d029      	beq.n	800a3a0 <tcp_input+0x2cc>
      prev = pcb;
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	61bb      	str	r3, [r7, #24]
      continue;
 800a350:	e06b      	b.n	800a42a <tcp_input+0x356>
 800a352:	bf00      	nop
 800a354:	080134d0 	.word	0x080134d0
 800a358:	08013504 	.word	0x08013504
 800a35c:	0801351c 	.word	0x0801351c
 800a360:	2000882c 	.word	0x2000882c
 800a364:	200054d4 	.word	0x200054d4
 800a368:	20008830 	.word	0x20008830
 800a36c:	20008834 	.word	0x20008834
 800a370:	20008832 	.word	0x20008832
 800a374:	08013544 	.word	0x08013544
 800a378:	08013554 	.word	0x08013554
 800a37c:	08013560 	.word	0x08013560
 800a380:	2000883c 	.word	0x2000883c
 800a384:	20008840 	.word	0x20008840
 800a388:	20008848 	.word	0x20008848
 800a38c:	20008846 	.word	0x20008846
 800a390:	20008810 	.word	0x20008810
 800a394:	08013580 	.word	0x08013580
 800a398:	080135a8 	.word	0x080135a8
 800a39c:	080135d4 	.word	0x080135d4
    }

    if (pcb->remote_port == tcphdr->src &&
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	8b1a      	ldrh	r2, [r3, #24]
 800a3a4:	4b72      	ldr	r3, [pc, #456]	@ (800a570 <tcp_input+0x49c>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	881b      	ldrh	r3, [r3, #0]
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d13a      	bne.n	800a426 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	8ada      	ldrh	r2, [r3, #22]
 800a3b4:	4b6e      	ldr	r3, [pc, #440]	@ (800a570 <tcp_input+0x49c>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	885b      	ldrh	r3, [r3, #2]
 800a3ba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d132      	bne.n	800a426 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	4b6b      	ldr	r3, [pc, #428]	@ (800a574 <tcp_input+0x4a0>)
 800a3c6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d12c      	bne.n	800a426 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	4b68      	ldr	r3, [pc, #416]	@ (800a574 <tcp_input+0x4a0>)
 800a3d2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d126      	bne.n	800a426 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	69fa      	ldr	r2, [r7, #28]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d106      	bne.n	800a3f0 <tcp_input+0x31c>
 800a3e2:	4b65      	ldr	r3, [pc, #404]	@ (800a578 <tcp_input+0x4a4>)
 800a3e4:	f240 120d 	movw	r2, #269	@ 0x10d
 800a3e8:	4964      	ldr	r1, [pc, #400]	@ (800a57c <tcp_input+0x4a8>)
 800a3ea:	4865      	ldr	r0, [pc, #404]	@ (800a580 <tcp_input+0x4ac>)
 800a3ec:	f006 fe48 	bl	8011080 <iprintf>
      if (prev != NULL) {
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00a      	beq.n	800a40c <tcp_input+0x338>
        prev->next = pcb->next;
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	68da      	ldr	r2, [r3, #12]
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a3fe:	4b61      	ldr	r3, [pc, #388]	@ (800a584 <tcp_input+0x4b0>)
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a406:	4a5f      	ldr	r2, [pc, #380]	@ (800a584 <tcp_input+0x4b0>)
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	69fa      	ldr	r2, [r7, #28]
 800a412:	429a      	cmp	r2, r3
 800a414:	d111      	bne.n	800a43a <tcp_input+0x366>
 800a416:	4b58      	ldr	r3, [pc, #352]	@ (800a578 <tcp_input+0x4a4>)
 800a418:	f240 1215 	movw	r2, #277	@ 0x115
 800a41c:	495a      	ldr	r1, [pc, #360]	@ (800a588 <tcp_input+0x4b4>)
 800a41e:	4858      	ldr	r0, [pc, #352]	@ (800a580 <tcp_input+0x4ac>)
 800a420:	f006 fe2e 	bl	8011080 <iprintf>
      break;
 800a424:	e009      	b.n	800a43a <tcp_input+0x366>
    }
    prev = pcb;
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	61fb      	str	r3, [r7, #28]
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	2b00      	cmp	r3, #0
 800a434:	f47f af5e 	bne.w	800a2f4 <tcp_input+0x220>
 800a438:	e000      	b.n	800a43c <tcp_input+0x368>
      break;
 800a43a:	bf00      	nop
  }

  if (pcb == NULL) {
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f040 80aa 	bne.w	800a598 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a444:	4b51      	ldr	r3, [pc, #324]	@ (800a58c <tcp_input+0x4b8>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	61fb      	str	r3, [r7, #28]
 800a44a:	e03f      	b.n	800a4cc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	7d1b      	ldrb	r3, [r3, #20]
 800a450:	2b0a      	cmp	r3, #10
 800a452:	d006      	beq.n	800a462 <tcp_input+0x38e>
 800a454:	4b48      	ldr	r3, [pc, #288]	@ (800a578 <tcp_input+0x4a4>)
 800a456:	f240 121f 	movw	r2, #287	@ 0x11f
 800a45a:	494d      	ldr	r1, [pc, #308]	@ (800a590 <tcp_input+0x4bc>)
 800a45c:	4848      	ldr	r0, [pc, #288]	@ (800a580 <tcp_input+0x4ac>)
 800a45e:	f006 fe0f 	bl	8011080 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	7a1b      	ldrb	r3, [r3, #8]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d009      	beq.n	800a47e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	7a1a      	ldrb	r2, [r3, #8]
 800a46e:	4b41      	ldr	r3, [pc, #260]	@ (800a574 <tcp_input+0x4a0>)
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a476:	3301      	adds	r3, #1
 800a478:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d122      	bne.n	800a4c4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	8b1a      	ldrh	r2, [r3, #24]
 800a482:	4b3b      	ldr	r3, [pc, #236]	@ (800a570 <tcp_input+0x49c>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	881b      	ldrh	r3, [r3, #0]
 800a488:	b29b      	uxth	r3, r3
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d11b      	bne.n	800a4c6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	8ada      	ldrh	r2, [r3, #22]
 800a492:	4b37      	ldr	r3, [pc, #220]	@ (800a570 <tcp_input+0x49c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	885b      	ldrh	r3, [r3, #2]
 800a498:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d113      	bne.n	800a4c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	685a      	ldr	r2, [r3, #4]
 800a4a2:	4b34      	ldr	r3, [pc, #208]	@ (800a574 <tcp_input+0x4a0>)
 800a4a4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d10d      	bne.n	800a4c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	4b31      	ldr	r3, [pc, #196]	@ (800a574 <tcp_input+0x4a0>)
 800a4b0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d107      	bne.n	800a4c6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a4b6:	69f8      	ldr	r0, [r7, #28]
 800a4b8:	f000 fb56 	bl	800ab68 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7fd ff3d 	bl	800833c <pbuf_free>
        return;
 800a4c2:	e1fd      	b.n	800a8c0 <tcp_input+0x7ec>
        continue;
 800a4c4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	61fb      	str	r3, [r7, #28]
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1bc      	bne.n	800a44c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4d6:	4b2f      	ldr	r3, [pc, #188]	@ (800a594 <tcp_input+0x4c0>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	617b      	str	r3, [r7, #20]
 800a4dc:	e02a      	b.n	800a534 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	7a1b      	ldrb	r3, [r3, #8]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00c      	beq.n	800a500 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	7a1a      	ldrb	r2, [r3, #8]
 800a4ea:	4b22      	ldr	r3, [pc, #136]	@ (800a574 <tcp_input+0x4a0>)
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d002      	beq.n	800a500 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	61bb      	str	r3, [r7, #24]
        continue;
 800a4fe:	e016      	b.n	800a52e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	8ada      	ldrh	r2, [r3, #22]
 800a504:	4b1a      	ldr	r3, [pc, #104]	@ (800a570 <tcp_input+0x49c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	885b      	ldrh	r3, [r3, #2]
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d10c      	bne.n	800a52a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	4b17      	ldr	r3, [pc, #92]	@ (800a574 <tcp_input+0x4a0>)
 800a516:	695b      	ldr	r3, [r3, #20]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d00f      	beq.n	800a53c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00d      	beq.n	800a53e <tcp_input+0x46a>
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d009      	beq.n	800a53e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	617b      	str	r3, [r7, #20]
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1d1      	bne.n	800a4de <tcp_input+0x40a>
 800a53a:	e000      	b.n	800a53e <tcp_input+0x46a>
            break;
 800a53c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d029      	beq.n	800a598 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00a      	beq.n	800a560 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	68da      	ldr	r2, [r3, #12]
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a552:	4b10      	ldr	r3, [pc, #64]	@ (800a594 <tcp_input+0x4c0>)
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a55a:	4a0e      	ldr	r2, [pc, #56]	@ (800a594 <tcp_input+0x4c0>)
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a560:	6978      	ldr	r0, [r7, #20]
 800a562:	f000 fa03 	bl	800a96c <tcp_listen_input>
      }
      pbuf_free(p);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7fd fee8 	bl	800833c <pbuf_free>
      return;
 800a56c:	e1a8      	b.n	800a8c0 <tcp_input+0x7ec>
 800a56e:	bf00      	nop
 800a570:	2000882c 	.word	0x2000882c
 800a574:	200054d4 	.word	0x200054d4
 800a578:	080134d0 	.word	0x080134d0
 800a57c:	080135fc 	.word	0x080135fc
 800a580:	0801351c 	.word	0x0801351c
 800a584:	20008810 	.word	0x20008810
 800a588:	08013628 	.word	0x08013628
 800a58c:	20008814 	.word	0x20008814
 800a590:	08013654 	.word	0x08013654
 800a594:	2000880c 	.word	0x2000880c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f000 8158 	beq.w	800a850 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a5a0:	4b95      	ldr	r3, [pc, #596]	@ (800a7f8 <tcp_input+0x724>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	891a      	ldrh	r2, [r3, #8]
 800a5aa:	4b93      	ldr	r3, [pc, #588]	@ (800a7f8 <tcp_input+0x724>)
 800a5ac:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a5ae:	4a92      	ldr	r2, [pc, #584]	@ (800a7f8 <tcp_input+0x724>)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a5b4:	4b91      	ldr	r3, [pc, #580]	@ (800a7fc <tcp_input+0x728>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a8f      	ldr	r2, [pc, #572]	@ (800a7f8 <tcp_input+0x724>)
 800a5ba:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a5bc:	4b90      	ldr	r3, [pc, #576]	@ (800a800 <tcp_input+0x72c>)
 800a5be:	2200      	movs	r2, #0
 800a5c0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a5c2:	4b90      	ldr	r3, [pc, #576]	@ (800a804 <tcp_input+0x730>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a5c8:	4b8f      	ldr	r3, [pc, #572]	@ (800a808 <tcp_input+0x734>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a5ce:	4b8f      	ldr	r3, [pc, #572]	@ (800a80c <tcp_input+0x738>)
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	f003 0308 	and.w	r3, r3, #8
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d006      	beq.n	800a5e8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	7b5b      	ldrb	r3, [r3, #13]
 800a5de:	f043 0301 	orr.w	r3, r3, #1
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d017      	beq.n	800a620 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a5f0:	69f8      	ldr	r0, [r7, #28]
 800a5f2:	f7ff f929 	bl	8009848 <tcp_process_refused_data>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	f113 0f0d 	cmn.w	r3, #13
 800a5fc:	d007      	beq.n	800a60e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00c      	beq.n	800a620 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a606:	4b82      	ldr	r3, [pc, #520]	@ (800a810 <tcp_input+0x73c>)
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d008      	beq.n	800a620 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a612:	2b00      	cmp	r3, #0
 800a614:	f040 80e3 	bne.w	800a7de <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a618:	69f8      	ldr	r0, [r7, #28]
 800a61a:	f003 f9a7 	bl	800d96c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a61e:	e0de      	b.n	800a7de <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a620:	4a7c      	ldr	r2, [pc, #496]	@ (800a814 <tcp_input+0x740>)
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a626:	69f8      	ldr	r0, [r7, #28]
 800a628:	f000 fb18 	bl	800ac5c <tcp_process>
 800a62c:	4603      	mov	r3, r0
 800a62e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a630:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a634:	f113 0f0d 	cmn.w	r3, #13
 800a638:	f000 80d3 	beq.w	800a7e2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a63c:	4b71      	ldr	r3, [pc, #452]	@ (800a804 <tcp_input+0x730>)
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	f003 0308 	and.w	r3, r3, #8
 800a644:	2b00      	cmp	r3, #0
 800a646:	d015      	beq.n	800a674 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d008      	beq.n	800a664 <tcp_input+0x590>
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a658:	69fa      	ldr	r2, [r7, #28]
 800a65a:	6912      	ldr	r2, [r2, #16]
 800a65c:	f06f 010d 	mvn.w	r1, #13
 800a660:	4610      	mov	r0, r2
 800a662:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a664:	69f9      	ldr	r1, [r7, #28]
 800a666:	486c      	ldr	r0, [pc, #432]	@ (800a818 <tcp_input+0x744>)
 800a668:	f7ff fbbc 	bl	8009de4 <tcp_pcb_remove>
        tcp_free(pcb);
 800a66c:	69f8      	ldr	r0, [r7, #28]
 800a66e:	f7fe f9a7 	bl	80089c0 <tcp_free>
 800a672:	e0da      	b.n	800a82a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a674:	2300      	movs	r3, #0
 800a676:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a678:	4b63      	ldr	r3, [pc, #396]	@ (800a808 <tcp_input+0x734>)
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d01d      	beq.n	800a6bc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a680:	4b61      	ldr	r3, [pc, #388]	@ (800a808 <tcp_input+0x734>)
 800a682:	881b      	ldrh	r3, [r3, #0]
 800a684:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00a      	beq.n	800a6a6 <tcp_input+0x5d2>
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a696:	69fa      	ldr	r2, [r7, #28]
 800a698:	6910      	ldr	r0, [r2, #16]
 800a69a:	89fa      	ldrh	r2, [r7, #14]
 800a69c:	69f9      	ldr	r1, [r7, #28]
 800a69e:	4798      	blx	r3
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	74fb      	strb	r3, [r7, #19]
 800a6a4:	e001      	b.n	800a6aa <tcp_input+0x5d6>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a6aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a6ae:	f113 0f0d 	cmn.w	r3, #13
 800a6b2:	f000 8098 	beq.w	800a7e6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a6b6:	4b54      	ldr	r3, [pc, #336]	@ (800a808 <tcp_input+0x734>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a6bc:	69f8      	ldr	r0, [r7, #28]
 800a6be:	f000 f915 	bl	800a8ec <tcp_input_delayed_close>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f040 8090 	bne.w	800a7ea <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a6ca:	4b4d      	ldr	r3, [pc, #308]	@ (800a800 <tcp_input+0x72c>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d041      	beq.n	800a756 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d006      	beq.n	800a6e8 <tcp_input+0x614>
 800a6da:	4b50      	ldr	r3, [pc, #320]	@ (800a81c <tcp_input+0x748>)
 800a6dc:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a6e0:	494f      	ldr	r1, [pc, #316]	@ (800a820 <tcp_input+0x74c>)
 800a6e2:	4850      	ldr	r0, [pc, #320]	@ (800a824 <tcp_input+0x750>)
 800a6e4:	f006 fccc 	bl	8011080 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	8b5b      	ldrh	r3, [r3, #26]
 800a6ec:	f003 0310 	and.w	r3, r3, #16
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d008      	beq.n	800a706 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a6f4:	4b42      	ldr	r3, [pc, #264]	@ (800a800 <tcp_input+0x72c>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fd fe1f 	bl	800833c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a6fe:	69f8      	ldr	r0, [r7, #28]
 800a700:	f7fe fc46 	bl	8008f90 <tcp_abort>
            goto aborted;
 800a704:	e091      	b.n	800a82a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00c      	beq.n	800a72a <tcp_input+0x656>
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	6918      	ldr	r0, [r3, #16]
 800a71a:	4b39      	ldr	r3, [pc, #228]	@ (800a800 <tcp_input+0x72c>)
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	2300      	movs	r3, #0
 800a720:	69f9      	ldr	r1, [r7, #28]
 800a722:	47a0      	blx	r4
 800a724:	4603      	mov	r3, r0
 800a726:	74fb      	strb	r3, [r7, #19]
 800a728:	e008      	b.n	800a73c <tcp_input+0x668>
 800a72a:	4b35      	ldr	r3, [pc, #212]	@ (800a800 <tcp_input+0x72c>)
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	2300      	movs	r3, #0
 800a730:	69f9      	ldr	r1, [r7, #28]
 800a732:	2000      	movs	r0, #0
 800a734:	f7ff f95e 	bl	80099f4 <tcp_recv_null>
 800a738:	4603      	mov	r3, r0
 800a73a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a73c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a740:	f113 0f0d 	cmn.w	r3, #13
 800a744:	d053      	beq.n	800a7ee <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a746:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d003      	beq.n	800a756 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a74e:	4b2c      	ldr	r3, [pc, #176]	@ (800a800 <tcp_input+0x72c>)
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a756:	4b2b      	ldr	r3, [pc, #172]	@ (800a804 <tcp_input+0x730>)
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	f003 0320 	and.w	r3, r3, #32
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d030      	beq.n	800a7c4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a766:	2b00      	cmp	r3, #0
 800a768:	d009      	beq.n	800a77e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a76e:	7b5a      	ldrb	r2, [r3, #13]
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a774:	f042 0220 	orr.w	r2, r2, #32
 800a778:	b2d2      	uxtb	r2, r2
 800a77a:	735a      	strb	r2, [r3, #13]
 800a77c:	e022      	b.n	800a7c4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a782:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a786:	d005      	beq.n	800a794 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a78c:	3301      	adds	r3, #1
 800a78e:	b29a      	uxth	r2, r3
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00b      	beq.n	800a7b6 <tcp_input+0x6e2>
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	6918      	ldr	r0, [r3, #16]
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	69f9      	ldr	r1, [r7, #28]
 800a7ae:	47a0      	blx	r4
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	74fb      	strb	r3, [r7, #19]
 800a7b4:	e001      	b.n	800a7ba <tcp_input+0x6e6>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a7ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7be:	f113 0f0d 	cmn.w	r3, #13
 800a7c2:	d016      	beq.n	800a7f2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a7c4:	4b13      	ldr	r3, [pc, #76]	@ (800a814 <tcp_input+0x740>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a7ca:	69f8      	ldr	r0, [r7, #28]
 800a7cc:	f000 f88e 	bl	800a8ec <tcp_input_delayed_close>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d128      	bne.n	800a828 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a7d6:	69f8      	ldr	r0, [r7, #28]
 800a7d8:	f002 fac2 	bl	800cd60 <tcp_output>
 800a7dc:	e025      	b.n	800a82a <tcp_input+0x756>
        goto aborted;
 800a7de:	bf00      	nop
 800a7e0:	e023      	b.n	800a82a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a7e2:	bf00      	nop
 800a7e4:	e021      	b.n	800a82a <tcp_input+0x756>
              goto aborted;
 800a7e6:	bf00      	nop
 800a7e8:	e01f      	b.n	800a82a <tcp_input+0x756>
          goto aborted;
 800a7ea:	bf00      	nop
 800a7ec:	e01d      	b.n	800a82a <tcp_input+0x756>
            goto aborted;
 800a7ee:	bf00      	nop
 800a7f0:	e01b      	b.n	800a82a <tcp_input+0x756>
              goto aborted;
 800a7f2:	bf00      	nop
 800a7f4:	e019      	b.n	800a82a <tcp_input+0x756>
 800a7f6:	bf00      	nop
 800a7f8:	2000881c 	.word	0x2000881c
 800a7fc:	2000882c 	.word	0x2000882c
 800a800:	2000884c 	.word	0x2000884c
 800a804:	20008849 	.word	0x20008849
 800a808:	20008844 	.word	0x20008844
 800a80c:	20008848 	.word	0x20008848
 800a810:	20008846 	.word	0x20008846
 800a814:	20008850 	.word	0x20008850
 800a818:	20008810 	.word	0x20008810
 800a81c:	080134d0 	.word	0x080134d0
 800a820:	08013684 	.word	0x08013684
 800a824:	0801351c 	.word	0x0801351c
          goto aborted;
 800a828:	bf00      	nop
    tcp_input_pcb = NULL;
 800a82a:	4b27      	ldr	r3, [pc, #156]	@ (800a8c8 <tcp_input+0x7f4>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a830:	4b26      	ldr	r3, [pc, #152]	@ (800a8cc <tcp_input+0x7f8>)
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a836:	4b26      	ldr	r3, [pc, #152]	@ (800a8d0 <tcp_input+0x7fc>)
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d03f      	beq.n	800a8be <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a83e:	4b24      	ldr	r3, [pc, #144]	@ (800a8d0 <tcp_input+0x7fc>)
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	4618      	mov	r0, r3
 800a844:	f7fd fd7a 	bl	800833c <pbuf_free>
      inseg.p = NULL;
 800a848:	4b21      	ldr	r3, [pc, #132]	@ (800a8d0 <tcp_input+0x7fc>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a84e:	e036      	b.n	800a8be <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a850:	4b20      	ldr	r3, [pc, #128]	@ (800a8d4 <tcp_input+0x800>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	899b      	ldrh	r3, [r3, #12]
 800a856:	b29b      	uxth	r3, r3
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fc fa11 	bl	8006c80 <lwip_htons>
 800a85e:	4603      	mov	r3, r0
 800a860:	b2db      	uxtb	r3, r3
 800a862:	f003 0304 	and.w	r3, r3, #4
 800a866:	2b00      	cmp	r3, #0
 800a868:	d118      	bne.n	800a89c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a86a:	4b1b      	ldr	r3, [pc, #108]	@ (800a8d8 <tcp_input+0x804>)
 800a86c:	6819      	ldr	r1, [r3, #0]
 800a86e:	4b1b      	ldr	r3, [pc, #108]	@ (800a8dc <tcp_input+0x808>)
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	4b1a      	ldr	r3, [pc, #104]	@ (800a8e0 <tcp_input+0x80c>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a87a:	4b16      	ldr	r3, [pc, #88]	@ (800a8d4 <tcp_input+0x800>)
 800a87c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a87e:	885b      	ldrh	r3, [r3, #2]
 800a880:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a882:	4a14      	ldr	r2, [pc, #80]	@ (800a8d4 <tcp_input+0x800>)
 800a884:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a886:	8812      	ldrh	r2, [r2, #0]
 800a888:	b292      	uxth	r2, r2
 800a88a:	9202      	str	r2, [sp, #8]
 800a88c:	9301      	str	r3, [sp, #4]
 800a88e:	4b15      	ldr	r3, [pc, #84]	@ (800a8e4 <tcp_input+0x810>)
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	4b15      	ldr	r3, [pc, #84]	@ (800a8e8 <tcp_input+0x814>)
 800a894:	4602      	mov	r2, r0
 800a896:	2000      	movs	r0, #0
 800a898:	f003 f816 	bl	800d8c8 <tcp_rst>
    pbuf_free(p);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f7fd fd4d 	bl	800833c <pbuf_free>
  return;
 800a8a2:	e00c      	b.n	800a8be <tcp_input+0x7ea>
    goto dropped;
 800a8a4:	bf00      	nop
 800a8a6:	e006      	b.n	800a8b6 <tcp_input+0x7e2>
    goto dropped;
 800a8a8:	bf00      	nop
 800a8aa:	e004      	b.n	800a8b6 <tcp_input+0x7e2>
    goto dropped;
 800a8ac:	bf00      	nop
 800a8ae:	e002      	b.n	800a8b6 <tcp_input+0x7e2>
      goto dropped;
 800a8b0:	bf00      	nop
 800a8b2:	e000      	b.n	800a8b6 <tcp_input+0x7e2>
      goto dropped;
 800a8b4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7fd fd40 	bl	800833c <pbuf_free>
 800a8bc:	e000      	b.n	800a8c0 <tcp_input+0x7ec>
  return;
 800a8be:	bf00      	nop
}
 800a8c0:	3724      	adds	r7, #36	@ 0x24
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd90      	pop	{r4, r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20008850 	.word	0x20008850
 800a8cc:	2000884c 	.word	0x2000884c
 800a8d0:	2000881c 	.word	0x2000881c
 800a8d4:	2000882c 	.word	0x2000882c
 800a8d8:	20008840 	.word	0x20008840
 800a8dc:	20008846 	.word	0x20008846
 800a8e0:	2000883c 	.word	0x2000883c
 800a8e4:	200054e4 	.word	0x200054e4
 800a8e8:	200054e8 	.word	0x200054e8

0800a8ec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d106      	bne.n	800a908 <tcp_input_delayed_close+0x1c>
 800a8fa:	4b17      	ldr	r3, [pc, #92]	@ (800a958 <tcp_input_delayed_close+0x6c>)
 800a8fc:	f240 225a 	movw	r2, #602	@ 0x25a
 800a900:	4916      	ldr	r1, [pc, #88]	@ (800a95c <tcp_input_delayed_close+0x70>)
 800a902:	4817      	ldr	r0, [pc, #92]	@ (800a960 <tcp_input_delayed_close+0x74>)
 800a904:	f006 fbbc 	bl	8011080 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a908:	4b16      	ldr	r3, [pc, #88]	@ (800a964 <tcp_input_delayed_close+0x78>)
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	f003 0310 	and.w	r3, r3, #16
 800a910:	2b00      	cmp	r3, #0
 800a912:	d01c      	beq.n	800a94e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	8b5b      	ldrh	r3, [r3, #26]
 800a918:	f003 0310 	and.w	r3, r3, #16
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10d      	bne.n	800a93c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a926:	2b00      	cmp	r3, #0
 800a928:	d008      	beq.n	800a93c <tcp_input_delayed_close+0x50>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	6912      	ldr	r2, [r2, #16]
 800a934:	f06f 010e 	mvn.w	r1, #14
 800a938:	4610      	mov	r0, r2
 800a93a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a93c:	6879      	ldr	r1, [r7, #4]
 800a93e:	480a      	ldr	r0, [pc, #40]	@ (800a968 <tcp_input_delayed_close+0x7c>)
 800a940:	f7ff fa50 	bl	8009de4 <tcp_pcb_remove>
    tcp_free(pcb);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7fe f83b 	bl	80089c0 <tcp_free>
    return 1;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e000      	b.n	800a950 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	080134d0 	.word	0x080134d0
 800a95c:	080136a0 	.word	0x080136a0
 800a960:	0801351c 	.word	0x0801351c
 800a964:	20008849 	.word	0x20008849
 800a968:	20008810 	.word	0x20008810

0800a96c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a96c:	b590      	push	{r4, r7, lr}
 800a96e:	b08b      	sub	sp, #44	@ 0x2c
 800a970:	af04      	add	r7, sp, #16
 800a972:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a974:	4b6f      	ldr	r3, [pc, #444]	@ (800ab34 <tcp_listen_input+0x1c8>)
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f040 80d2 	bne.w	800ab26 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d106      	bne.n	800a996 <tcp_listen_input+0x2a>
 800a988:	4b6b      	ldr	r3, [pc, #428]	@ (800ab38 <tcp_listen_input+0x1cc>)
 800a98a:	f240 2281 	movw	r2, #641	@ 0x281
 800a98e:	496b      	ldr	r1, [pc, #428]	@ (800ab3c <tcp_listen_input+0x1d0>)
 800a990:	486b      	ldr	r0, [pc, #428]	@ (800ab40 <tcp_listen_input+0x1d4>)
 800a992:	f006 fb75 	bl	8011080 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a996:	4b67      	ldr	r3, [pc, #412]	@ (800ab34 <tcp_listen_input+0x1c8>)
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	f003 0310 	and.w	r3, r3, #16
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d019      	beq.n	800a9d6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9a2:	4b68      	ldr	r3, [pc, #416]	@ (800ab44 <tcp_listen_input+0x1d8>)
 800a9a4:	6819      	ldr	r1, [r3, #0]
 800a9a6:	4b68      	ldr	r3, [pc, #416]	@ (800ab48 <tcp_listen_input+0x1dc>)
 800a9a8:	881b      	ldrh	r3, [r3, #0]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	4b67      	ldr	r3, [pc, #412]	@ (800ab4c <tcp_listen_input+0x1e0>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9b2:	4b67      	ldr	r3, [pc, #412]	@ (800ab50 <tcp_listen_input+0x1e4>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9b6:	885b      	ldrh	r3, [r3, #2]
 800a9b8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9ba:	4a65      	ldr	r2, [pc, #404]	@ (800ab50 <tcp_listen_input+0x1e4>)
 800a9bc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9be:	8812      	ldrh	r2, [r2, #0]
 800a9c0:	b292      	uxth	r2, r2
 800a9c2:	9202      	str	r2, [sp, #8]
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	4b63      	ldr	r3, [pc, #396]	@ (800ab54 <tcp_listen_input+0x1e8>)
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	4b63      	ldr	r3, [pc, #396]	@ (800ab58 <tcp_listen_input+0x1ec>)
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f002 ff7a 	bl	800d8c8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a9d4:	e0a9      	b.n	800ab2a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a9d6:	4b57      	ldr	r3, [pc, #348]	@ (800ab34 <tcp_listen_input+0x1c8>)
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	f003 0302 	and.w	r3, r3, #2
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f000 80a3 	beq.w	800ab2a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	7d5b      	ldrb	r3, [r3, #21]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7ff f927 	bl	8009c3c <tcp_alloc>
 800a9ee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d111      	bne.n	800aa1a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00a      	beq.n	800aa14 <tcp_listen_input+0xa8>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	6910      	ldr	r0, [r2, #16]
 800aa06:	f04f 32ff 	mov.w	r2, #4294967295
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	4798      	blx	r3
 800aa0e:	4603      	mov	r3, r0
 800aa10:	73bb      	strb	r3, [r7, #14]
      return;
 800aa12:	e08b      	b.n	800ab2c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aa14:	23f0      	movs	r3, #240	@ 0xf0
 800aa16:	73bb      	strb	r3, [r7, #14]
      return;
 800aa18:	e088      	b.n	800ab2c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800aa1a:	4b50      	ldr	r3, [pc, #320]	@ (800ab5c <tcp_listen_input+0x1f0>)
 800aa1c:	695a      	ldr	r2, [r3, #20]
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800aa22:	4b4e      	ldr	r3, [pc, #312]	@ (800ab5c <tcp_listen_input+0x1f0>)
 800aa24:	691a      	ldr	r2, [r3, #16]
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	8ada      	ldrh	r2, [r3, #22]
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800aa32:	4b47      	ldr	r3, [pc, #284]	@ (800ab50 <tcp_listen_input+0x1e4>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	881b      	ldrh	r3, [r3, #0]
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2203      	movs	r2, #3
 800aa42:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800aa44:	4b41      	ldr	r3, [pc, #260]	@ (800ab4c <tcp_listen_input+0x1e0>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	1c5a      	adds	r2, r3, #1
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800aa56:	6978      	ldr	r0, [r7, #20]
 800aa58:	f7ff fa58 	bl	8009f0c <tcp_next_iss>
 800aa5c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	693a      	ldr	r2, [r7, #16]
 800aa62:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	693a      	ldr	r2, [r7, #16]
 800aa68:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	693a      	ldr	r2, [r7, #16]
 800aa6e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800aa76:	4b35      	ldr	r3, [pc, #212]	@ (800ab4c <tcp_listen_input+0x1e0>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	1e5a      	subs	r2, r3, #1
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	691a      	ldr	r2, [r3, #16]
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	7a5b      	ldrb	r3, [r3, #9]
 800aa92:	f003 030c 	and.w	r3, r3, #12
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	7a1a      	ldrb	r2, [r3, #8]
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800aaa4:	4b2e      	ldr	r3, [pc, #184]	@ (800ab60 <tcp_listen_input+0x1f4>)
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	60da      	str	r2, [r3, #12]
 800aaac:	4a2c      	ldr	r2, [pc, #176]	@ (800ab60 <tcp_listen_input+0x1f4>)
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	6013      	str	r3, [r2, #0]
 800aab2:	f003 f8cb 	bl	800dc4c <tcp_timer_needed>
 800aab6:	4b2b      	ldr	r3, [pc, #172]	@ (800ab64 <tcp_listen_input+0x1f8>)
 800aab8:	2201      	movs	r2, #1
 800aaba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800aabc:	6978      	ldr	r0, [r7, #20]
 800aabe:	f001 fd8b 	bl	800c5d8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800aac2:	4b23      	ldr	r3, [pc, #140]	@ (800ab50 <tcp_listen_input+0x1e4>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	89db      	ldrh	r3, [r3, #14]
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	3304      	adds	r3, #4
 800aae4:	4618      	mov	r0, r3
 800aae6:	f004 ffdf 	bl	800faa8 <ip4_route>
 800aaea:	4601      	mov	r1, r0
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	3304      	adds	r3, #4
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f7ff fa30 	bl	8009f58 <tcp_eff_send_mss_netif>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	461a      	mov	r2, r3
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ab00:	2112      	movs	r1, #18
 800ab02:	6978      	ldr	r0, [r7, #20]
 800ab04:	f002 f83e 	bl	800cb84 <tcp_enqueue_flags>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ab0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d004      	beq.n	800ab1e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ab14:	2100      	movs	r1, #0
 800ab16:	6978      	ldr	r0, [r7, #20]
 800ab18:	f7fe f97c 	bl	8008e14 <tcp_abandon>
      return;
 800ab1c:	e006      	b.n	800ab2c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ab1e:	6978      	ldr	r0, [r7, #20]
 800ab20:	f002 f91e 	bl	800cd60 <tcp_output>
  return;
 800ab24:	e001      	b.n	800ab2a <tcp_listen_input+0x1be>
    return;
 800ab26:	bf00      	nop
 800ab28:	e000      	b.n	800ab2c <tcp_listen_input+0x1c0>
  return;
 800ab2a:	bf00      	nop
}
 800ab2c:	371c      	adds	r7, #28
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd90      	pop	{r4, r7, pc}
 800ab32:	bf00      	nop
 800ab34:	20008848 	.word	0x20008848
 800ab38:	080134d0 	.word	0x080134d0
 800ab3c:	080136c8 	.word	0x080136c8
 800ab40:	0801351c 	.word	0x0801351c
 800ab44:	20008840 	.word	0x20008840
 800ab48:	20008846 	.word	0x20008846
 800ab4c:	2000883c 	.word	0x2000883c
 800ab50:	2000882c 	.word	0x2000882c
 800ab54:	200054e4 	.word	0x200054e4
 800ab58:	200054e8 	.word	0x200054e8
 800ab5c:	200054d4 	.word	0x200054d4
 800ab60:	20008810 	.word	0x20008810
 800ab64:	20008818 	.word	0x20008818

0800ab68 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af04      	add	r7, sp, #16
 800ab6e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ab70:	4b2f      	ldr	r3, [pc, #188]	@ (800ac30 <tcp_timewait_input+0xc8>)
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	f003 0304 	and.w	r3, r3, #4
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d153      	bne.n	800ac24 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d106      	bne.n	800ab90 <tcp_timewait_input+0x28>
 800ab82:	4b2c      	ldr	r3, [pc, #176]	@ (800ac34 <tcp_timewait_input+0xcc>)
 800ab84:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ab88:	492b      	ldr	r1, [pc, #172]	@ (800ac38 <tcp_timewait_input+0xd0>)
 800ab8a:	482c      	ldr	r0, [pc, #176]	@ (800ac3c <tcp_timewait_input+0xd4>)
 800ab8c:	f006 fa78 	bl	8011080 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ab90:	4b27      	ldr	r3, [pc, #156]	@ (800ac30 <tcp_timewait_input+0xc8>)
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	f003 0302 	and.w	r3, r3, #2
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d02a      	beq.n	800abf2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ab9c:	4b28      	ldr	r3, [pc, #160]	@ (800ac40 <tcp_timewait_input+0xd8>)
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba4:	1ad3      	subs	r3, r2, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	db2d      	blt.n	800ac06 <tcp_timewait_input+0x9e>
 800abaa:	4b25      	ldr	r3, [pc, #148]	@ (800ac40 <tcp_timewait_input+0xd8>)
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb2:	6879      	ldr	r1, [r7, #4]
 800abb4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800abb6:	440b      	add	r3, r1
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	2b00      	cmp	r3, #0
 800abbc:	dc23      	bgt.n	800ac06 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abbe:	4b21      	ldr	r3, [pc, #132]	@ (800ac44 <tcp_timewait_input+0xdc>)
 800abc0:	6819      	ldr	r1, [r3, #0]
 800abc2:	4b21      	ldr	r3, [pc, #132]	@ (800ac48 <tcp_timewait_input+0xe0>)
 800abc4:	881b      	ldrh	r3, [r3, #0]
 800abc6:	461a      	mov	r2, r3
 800abc8:	4b1d      	ldr	r3, [pc, #116]	@ (800ac40 <tcp_timewait_input+0xd8>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800abce:	4b1f      	ldr	r3, [pc, #124]	@ (800ac4c <tcp_timewait_input+0xe4>)
 800abd0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abd2:	885b      	ldrh	r3, [r3, #2]
 800abd4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800abd6:	4a1d      	ldr	r2, [pc, #116]	@ (800ac4c <tcp_timewait_input+0xe4>)
 800abd8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abda:	8812      	ldrh	r2, [r2, #0]
 800abdc:	b292      	uxth	r2, r2
 800abde:	9202      	str	r2, [sp, #8]
 800abe0:	9301      	str	r3, [sp, #4]
 800abe2:	4b1b      	ldr	r3, [pc, #108]	@ (800ac50 <tcp_timewait_input+0xe8>)
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	4b1b      	ldr	r3, [pc, #108]	@ (800ac54 <tcp_timewait_input+0xec>)
 800abe8:	4602      	mov	r2, r0
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f002 fe6c 	bl	800d8c8 <tcp_rst>
      return;
 800abf0:	e01b      	b.n	800ac2a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800abf2:	4b0f      	ldr	r3, [pc, #60]	@ (800ac30 <tcp_timewait_input+0xc8>)
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d003      	beq.n	800ac06 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800abfe:	4b16      	ldr	r3, [pc, #88]	@ (800ac58 <tcp_timewait_input+0xf0>)
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ac06:	4b10      	ldr	r3, [pc, #64]	@ (800ac48 <tcp_timewait_input+0xe0>)
 800ac08:	881b      	ldrh	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00c      	beq.n	800ac28 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	8b5b      	ldrh	r3, [r3, #26]
 800ac12:	f043 0302 	orr.w	r3, r3, #2
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f002 f89f 	bl	800cd60 <tcp_output>
  }
  return;
 800ac22:	e001      	b.n	800ac28 <tcp_timewait_input+0xc0>
    return;
 800ac24:	bf00      	nop
 800ac26:	e000      	b.n	800ac2a <tcp_timewait_input+0xc2>
  return;
 800ac28:	bf00      	nop
}
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	20008848 	.word	0x20008848
 800ac34:	080134d0 	.word	0x080134d0
 800ac38:	080136e8 	.word	0x080136e8
 800ac3c:	0801351c 	.word	0x0801351c
 800ac40:	2000883c 	.word	0x2000883c
 800ac44:	20008840 	.word	0x20008840
 800ac48:	20008846 	.word	0x20008846
 800ac4c:	2000882c 	.word	0x2000882c
 800ac50:	200054e4 	.word	0x200054e4
 800ac54:	200054e8 	.word	0x200054e8
 800ac58:	20008804 	.word	0x20008804

0800ac5c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ac5c:	b590      	push	{r4, r7, lr}
 800ac5e:	b08d      	sub	sp, #52	@ 0x34
 800ac60:	af04      	add	r7, sp, #16
 800ac62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d106      	bne.n	800ac80 <tcp_process+0x24>
 800ac72:	4b9d      	ldr	r3, [pc, #628]	@ (800aee8 <tcp_process+0x28c>)
 800ac74:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ac78:	499c      	ldr	r1, [pc, #624]	@ (800aeec <tcp_process+0x290>)
 800ac7a:	489d      	ldr	r0, [pc, #628]	@ (800aef0 <tcp_process+0x294>)
 800ac7c:	f006 fa00 	bl	8011080 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ac80:	4b9c      	ldr	r3, [pc, #624]	@ (800aef4 <tcp_process+0x298>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	f003 0304 	and.w	r3, r3, #4
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d04e      	beq.n	800ad2a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	7d1b      	ldrb	r3, [r3, #20]
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d108      	bne.n	800aca6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac98:	4b97      	ldr	r3, [pc, #604]	@ (800aef8 <tcp_process+0x29c>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d123      	bne.n	800ace8 <tcp_process+0x8c>
        acceptable = 1;
 800aca0:	2301      	movs	r3, #1
 800aca2:	76fb      	strb	r3, [r7, #27]
 800aca4:	e020      	b.n	800ace8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800acaa:	4b94      	ldr	r3, [pc, #592]	@ (800aefc <tcp_process+0x2a0>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d102      	bne.n	800acb8 <tcp_process+0x5c>
        acceptable = 1;
 800acb2:	2301      	movs	r3, #1
 800acb4:	76fb      	strb	r3, [r7, #27]
 800acb6:	e017      	b.n	800ace8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800acb8:	4b90      	ldr	r3, [pc, #576]	@ (800aefc <tcp_process+0x2a0>)
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	db10      	blt.n	800ace8 <tcp_process+0x8c>
 800acc6:	4b8d      	ldr	r3, [pc, #564]	@ (800aefc <tcp_process+0x2a0>)
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acce:	6879      	ldr	r1, [r7, #4]
 800acd0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800acd2:	440b      	add	r3, r1
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	dc06      	bgt.n	800ace8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	8b5b      	ldrh	r3, [r3, #26]
 800acde:	f043 0302 	orr.w	r3, r3, #2
 800ace2:	b29a      	uxth	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ace8:	7efb      	ldrb	r3, [r7, #27]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d01b      	beq.n	800ad26 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	7d1b      	ldrb	r3, [r3, #20]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d106      	bne.n	800ad04 <tcp_process+0xa8>
 800acf6:	4b7c      	ldr	r3, [pc, #496]	@ (800aee8 <tcp_process+0x28c>)
 800acf8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800acfc:	4980      	ldr	r1, [pc, #512]	@ (800af00 <tcp_process+0x2a4>)
 800acfe:	487c      	ldr	r0, [pc, #496]	@ (800aef0 <tcp_process+0x294>)
 800ad00:	f006 f9be 	bl	8011080 <iprintf>
      recv_flags |= TF_RESET;
 800ad04:	4b7f      	ldr	r3, [pc, #508]	@ (800af04 <tcp_process+0x2a8>)
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	f043 0308 	orr.w	r3, r3, #8
 800ad0c:	b2da      	uxtb	r2, r3
 800ad0e:	4b7d      	ldr	r3, [pc, #500]	@ (800af04 <tcp_process+0x2a8>)
 800ad10:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	8b5b      	ldrh	r3, [r3, #26]
 800ad16:	f023 0301 	bic.w	r3, r3, #1
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ad20:	f06f 030d 	mvn.w	r3, #13
 800ad24:	e37a      	b.n	800b41c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	e378      	b.n	800b41c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ad2a:	4b72      	ldr	r3, [pc, #456]	@ (800aef4 <tcp_process+0x298>)
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	f003 0302 	and.w	r3, r3, #2
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d010      	beq.n	800ad58 <tcp_process+0xfc>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	7d1b      	ldrb	r3, [r3, #20]
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d00c      	beq.n	800ad58 <tcp_process+0xfc>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	7d1b      	ldrb	r3, [r3, #20]
 800ad42:	2b03      	cmp	r3, #3
 800ad44:	d008      	beq.n	800ad58 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	8b5b      	ldrh	r3, [r3, #26]
 800ad4a:	f043 0302 	orr.w	r3, r3, #2
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	e361      	b.n	800b41c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	8b5b      	ldrh	r3, [r3, #26]
 800ad5c:	f003 0310 	and.w	r3, r3, #16
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d103      	bne.n	800ad6c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ad64:	4b68      	ldr	r3, [pc, #416]	@ (800af08 <tcp_process+0x2ac>)
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f001 fc2b 	bl	800c5d8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	7d1b      	ldrb	r3, [r3, #20]
 800ad86:	3b02      	subs	r3, #2
 800ad88:	2b07      	cmp	r3, #7
 800ad8a:	f200 8337 	bhi.w	800b3fc <tcp_process+0x7a0>
 800ad8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad94 <tcp_process+0x138>)
 800ad90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad94:	0800adb5 	.word	0x0800adb5
 800ad98:	0800afe5 	.word	0x0800afe5
 800ad9c:	0800b15d 	.word	0x0800b15d
 800ada0:	0800b187 	.word	0x0800b187
 800ada4:	0800b2ab 	.word	0x0800b2ab
 800ada8:	0800b15d 	.word	0x0800b15d
 800adac:	0800b337 	.word	0x0800b337
 800adb0:	0800b3c7 	.word	0x0800b3c7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800adb4:	4b4f      	ldr	r3, [pc, #316]	@ (800aef4 <tcp_process+0x298>)
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	f003 0310 	and.w	r3, r3, #16
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 80e4 	beq.w	800af8a <tcp_process+0x32e>
 800adc2:	4b4c      	ldr	r3, [pc, #304]	@ (800aef4 <tcp_process+0x298>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	f003 0302 	and.w	r3, r3, #2
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f000 80dd 	beq.w	800af8a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	4b48      	ldr	r3, [pc, #288]	@ (800aef8 <tcp_process+0x29c>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	429a      	cmp	r2, r3
 800addc:	f040 80d5 	bne.w	800af8a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ade0:	4b46      	ldr	r3, [pc, #280]	@ (800aefc <tcp_process+0x2a0>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	1c5a      	adds	r2, r3, #1
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800adf2:	4b41      	ldr	r3, [pc, #260]	@ (800aef8 <tcp_process+0x29c>)
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800adfa:	4b44      	ldr	r3, [pc, #272]	@ (800af0c <tcp_process+0x2b0>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	89db      	ldrh	r3, [r3, #14]
 800ae00:	b29a      	uxth	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ae14:	4b39      	ldr	r3, [pc, #228]	@ (800aefc <tcp_process+0x2a0>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	1e5a      	subs	r2, r3, #1
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2204      	movs	r2, #4
 800ae22:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f004 fe3b 	bl	800faa8 <ip4_route>
 800ae32:	4601      	mov	r1, r0
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	3304      	adds	r3, #4
 800ae38:	461a      	mov	r2, r3
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f7ff f88c 	bl	8009f58 <tcp_eff_send_mss_netif>
 800ae40:	4603      	mov	r3, r0
 800ae42:	461a      	mov	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ae4c:	009a      	lsls	r2, r3, #2
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ae52:	005b      	lsls	r3, r3, #1
 800ae54:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ae58:	428b      	cmp	r3, r1
 800ae5a:	bf38      	it	cc
 800ae5c:	460b      	movcc	r3, r1
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d204      	bcs.n	800ae6c <tcp_process+0x210>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	e00d      	b.n	800ae88 <tcp_process+0x22c>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ae70:	005b      	lsls	r3, r3, #1
 800ae72:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d904      	bls.n	800ae84 <tcp_process+0x228>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ae7e:	005b      	lsls	r3, r3, #1
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	e001      	b.n	800ae88 <tcp_process+0x22c>
 800ae84:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d106      	bne.n	800aea6 <tcp_process+0x24a>
 800ae98:	4b13      	ldr	r3, [pc, #76]	@ (800aee8 <tcp_process+0x28c>)
 800ae9a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800ae9e:	491c      	ldr	r1, [pc, #112]	@ (800af10 <tcp_process+0x2b4>)
 800aea0:	4813      	ldr	r0, [pc, #76]	@ (800aef0 <tcp_process+0x294>)
 800aea2:	f006 f8ed 	bl	8011080 <iprintf>
        --pcb->snd_queuelen;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800aeac:	3b01      	subs	r3, #1
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aeba:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d12a      	bne.n	800af18 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aec6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d106      	bne.n	800aedc <tcp_process+0x280>
 800aece:	4b06      	ldr	r3, [pc, #24]	@ (800aee8 <tcp_process+0x28c>)
 800aed0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800aed4:	490f      	ldr	r1, [pc, #60]	@ (800af14 <tcp_process+0x2b8>)
 800aed6:	4806      	ldr	r0, [pc, #24]	@ (800aef0 <tcp_process+0x294>)
 800aed8:	f006 f8d2 	bl	8011080 <iprintf>
          pcb->unsent = rseg->next;
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	66da      	str	r2, [r3, #108]	@ 0x6c
 800aee4:	e01c      	b.n	800af20 <tcp_process+0x2c4>
 800aee6:	bf00      	nop
 800aee8:	080134d0 	.word	0x080134d0
 800aeec:	08013708 	.word	0x08013708
 800aef0:	0801351c 	.word	0x0801351c
 800aef4:	20008848 	.word	0x20008848
 800aef8:	20008840 	.word	0x20008840
 800aefc:	2000883c 	.word	0x2000883c
 800af00:	08013724 	.word	0x08013724
 800af04:	20008849 	.word	0x20008849
 800af08:	20008804 	.word	0x20008804
 800af0c:	2000882c 	.word	0x2000882c
 800af10:	08013744 	.word	0x08013744
 800af14:	0801375c 	.word	0x0801375c
        } else {
          pcb->unacked = rseg->next;
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800af20:	69f8      	ldr	r0, [r7, #28]
 800af22:	f7fe fd22 	bl	800996a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d104      	bne.n	800af38 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800af34:	861a      	strh	r2, [r3, #48]	@ 0x30
 800af36:	e006      	b.n	800af46 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d00a      	beq.n	800af66 <tcp_process+0x30a>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	6910      	ldr	r0, [r2, #16]
 800af5a:	2200      	movs	r2, #0
 800af5c:	6879      	ldr	r1, [r7, #4]
 800af5e:	4798      	blx	r3
 800af60:	4603      	mov	r3, r0
 800af62:	76bb      	strb	r3, [r7, #26]
 800af64:	e001      	b.n	800af6a <tcp_process+0x30e>
 800af66:	2300      	movs	r3, #0
 800af68:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800af6a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800af6e:	f113 0f0d 	cmn.w	r3, #13
 800af72:	d102      	bne.n	800af7a <tcp_process+0x31e>
          return ERR_ABRT;
 800af74:	f06f 030c 	mvn.w	r3, #12
 800af78:	e250      	b.n	800b41c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	8b5b      	ldrh	r3, [r3, #26]
 800af7e:	f043 0302 	orr.w	r3, r3, #2
 800af82:	b29a      	uxth	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800af88:	e23a      	b.n	800b400 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800af8a:	4b98      	ldr	r3, [pc, #608]	@ (800b1ec <tcp_process+0x590>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	f003 0310 	and.w	r3, r3, #16
 800af92:	2b00      	cmp	r3, #0
 800af94:	f000 8234 	beq.w	800b400 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af98:	4b95      	ldr	r3, [pc, #596]	@ (800b1f0 <tcp_process+0x594>)
 800af9a:	6819      	ldr	r1, [r3, #0]
 800af9c:	4b95      	ldr	r3, [pc, #596]	@ (800b1f4 <tcp_process+0x598>)
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	461a      	mov	r2, r3
 800afa2:	4b95      	ldr	r3, [pc, #596]	@ (800b1f8 <tcp_process+0x59c>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800afa8:	4b94      	ldr	r3, [pc, #592]	@ (800b1fc <tcp_process+0x5a0>)
 800afaa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800afac:	885b      	ldrh	r3, [r3, #2]
 800afae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800afb0:	4a92      	ldr	r2, [pc, #584]	@ (800b1fc <tcp_process+0x5a0>)
 800afb2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800afb4:	8812      	ldrh	r2, [r2, #0]
 800afb6:	b292      	uxth	r2, r2
 800afb8:	9202      	str	r2, [sp, #8]
 800afba:	9301      	str	r3, [sp, #4]
 800afbc:	4b90      	ldr	r3, [pc, #576]	@ (800b200 <tcp_process+0x5a4>)
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	4b90      	ldr	r3, [pc, #576]	@ (800b204 <tcp_process+0x5a8>)
 800afc2:	4602      	mov	r2, r0
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f002 fc7f 	bl	800d8c8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800afd0:	2b05      	cmp	r3, #5
 800afd2:	f200 8215 	bhi.w	800b400 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f002 fa4b 	bl	800d478 <tcp_rexmit_rto>
      break;
 800afe2:	e20d      	b.n	800b400 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800afe4:	4b81      	ldr	r3, [pc, #516]	@ (800b1ec <tcp_process+0x590>)
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	f003 0310 	and.w	r3, r3, #16
 800afec:	2b00      	cmp	r3, #0
 800afee:	f000 80a1 	beq.w	800b134 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aff2:	4b7f      	ldr	r3, [pc, #508]	@ (800b1f0 <tcp_process+0x594>)
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	3b01      	subs	r3, #1
 800affe:	2b00      	cmp	r3, #0
 800b000:	db7e      	blt.n	800b100 <tcp_process+0x4a4>
 800b002:	4b7b      	ldr	r3, [pc, #492]	@ (800b1f0 <tcp_process+0x594>)
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b00a:	1ad3      	subs	r3, r2, r3
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	dc77      	bgt.n	800b100 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2204      	movs	r2, #4
 800b014:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d102      	bne.n	800b024 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b01e:	23fa      	movs	r3, #250	@ 0xfa
 800b020:	76bb      	strb	r3, [r7, #26]
 800b022:	e01d      	b.n	800b060 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b028:	699b      	ldr	r3, [r3, #24]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d106      	bne.n	800b03c <tcp_process+0x3e0>
 800b02e:	4b76      	ldr	r3, [pc, #472]	@ (800b208 <tcp_process+0x5ac>)
 800b030:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800b034:	4975      	ldr	r1, [pc, #468]	@ (800b20c <tcp_process+0x5b0>)
 800b036:	4876      	ldr	r0, [pc, #472]	@ (800b210 <tcp_process+0x5b4>)
 800b038:	f006 f822 	bl	8011080 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b040:	699b      	ldr	r3, [r3, #24]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00a      	beq.n	800b05c <tcp_process+0x400>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	6910      	ldr	r0, [r2, #16]
 800b050:	2200      	movs	r2, #0
 800b052:	6879      	ldr	r1, [r7, #4]
 800b054:	4798      	blx	r3
 800b056:	4603      	mov	r3, r0
 800b058:	76bb      	strb	r3, [r7, #26]
 800b05a:	e001      	b.n	800b060 <tcp_process+0x404>
 800b05c:	23f0      	movs	r3, #240	@ 0xf0
 800b05e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b060:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00a      	beq.n	800b07e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b068:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b06c:	f113 0f0d 	cmn.w	r3, #13
 800b070:	d002      	beq.n	800b078 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7fd ff8c 	bl	8008f90 <tcp_abort>
            }
            return ERR_ABRT;
 800b078:	f06f 030c 	mvn.w	r3, #12
 800b07c:	e1ce      	b.n	800b41c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fae0 	bl	800b644 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b084:	4b63      	ldr	r3, [pc, #396]	@ (800b214 <tcp_process+0x5b8>)
 800b086:	881b      	ldrh	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d005      	beq.n	800b098 <tcp_process+0x43c>
            recv_acked--;
 800b08c:	4b61      	ldr	r3, [pc, #388]	@ (800b214 <tcp_process+0x5b8>)
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	3b01      	subs	r3, #1
 800b092:	b29a      	uxth	r2, r3
 800b094:	4b5f      	ldr	r3, [pc, #380]	@ (800b214 <tcp_process+0x5b8>)
 800b096:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b09c:	009a      	lsls	r2, r3, #2
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b0a2:	005b      	lsls	r3, r3, #1
 800b0a4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b0a8:	428b      	cmp	r3, r1
 800b0aa:	bf38      	it	cc
 800b0ac:	460b      	movcc	r3, r1
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d204      	bcs.n	800b0bc <tcp_process+0x460>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	e00d      	b.n	800b0d8 <tcp_process+0x47c>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b0c0:	005b      	lsls	r3, r3, #1
 800b0c2:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d904      	bls.n	800b0d4 <tcp_process+0x478>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b0ce:	005b      	lsls	r3, r3, #1
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	e001      	b.n	800b0d8 <tcp_process+0x47c>
 800b0d4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b0de:	4b4e      	ldr	r3, [pc, #312]	@ (800b218 <tcp_process+0x5bc>)
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	f003 0320 	and.w	r3, r3, #32
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d037      	beq.n	800b15a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	8b5b      	ldrh	r3, [r3, #26]
 800b0ee:	f043 0302 	orr.w	r3, r3, #2
 800b0f2:	b29a      	uxth	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2207      	movs	r2, #7
 800b0fc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b0fe:	e02c      	b.n	800b15a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b100:	4b3b      	ldr	r3, [pc, #236]	@ (800b1f0 <tcp_process+0x594>)
 800b102:	6819      	ldr	r1, [r3, #0]
 800b104:	4b3b      	ldr	r3, [pc, #236]	@ (800b1f4 <tcp_process+0x598>)
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	461a      	mov	r2, r3
 800b10a:	4b3b      	ldr	r3, [pc, #236]	@ (800b1f8 <tcp_process+0x59c>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b110:	4b3a      	ldr	r3, [pc, #232]	@ (800b1fc <tcp_process+0x5a0>)
 800b112:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b114:	885b      	ldrh	r3, [r3, #2]
 800b116:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b118:	4a38      	ldr	r2, [pc, #224]	@ (800b1fc <tcp_process+0x5a0>)
 800b11a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b11c:	8812      	ldrh	r2, [r2, #0]
 800b11e:	b292      	uxth	r2, r2
 800b120:	9202      	str	r2, [sp, #8]
 800b122:	9301      	str	r3, [sp, #4]
 800b124:	4b36      	ldr	r3, [pc, #216]	@ (800b200 <tcp_process+0x5a4>)
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	4b36      	ldr	r3, [pc, #216]	@ (800b204 <tcp_process+0x5a8>)
 800b12a:	4602      	mov	r2, r0
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f002 fbcb 	bl	800d8c8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b132:	e167      	b.n	800b404 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b134:	4b2d      	ldr	r3, [pc, #180]	@ (800b1ec <tcp_process+0x590>)
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	f003 0302 	and.w	r3, r3, #2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 8161 	beq.w	800b404 <tcp_process+0x7a8>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b146:	1e5a      	subs	r2, r3, #1
 800b148:	4b2b      	ldr	r3, [pc, #172]	@ (800b1f8 <tcp_process+0x59c>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	f040 8159 	bne.w	800b404 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f002 f9b2 	bl	800d4bc <tcp_rexmit>
      break;
 800b158:	e154      	b.n	800b404 <tcp_process+0x7a8>
 800b15a:	e153      	b.n	800b404 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 fa71 	bl	800b644 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b162:	4b2d      	ldr	r3, [pc, #180]	@ (800b218 <tcp_process+0x5bc>)
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	f003 0320 	and.w	r3, r3, #32
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	f000 814c 	beq.w	800b408 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	8b5b      	ldrh	r3, [r3, #26]
 800b174:	f043 0302 	orr.w	r3, r3, #2
 800b178:	b29a      	uxth	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2207      	movs	r2, #7
 800b182:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b184:	e140      	b.n	800b408 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fa5c 	bl	800b644 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b18c:	4b22      	ldr	r3, [pc, #136]	@ (800b218 <tcp_process+0x5bc>)
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	f003 0320 	and.w	r3, r3, #32
 800b194:	2b00      	cmp	r3, #0
 800b196:	d071      	beq.n	800b27c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b198:	4b14      	ldr	r3, [pc, #80]	@ (800b1ec <tcp_process+0x590>)
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	f003 0310 	and.w	r3, r3, #16
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d060      	beq.n	800b266 <tcp_process+0x60a>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b1a8:	4b11      	ldr	r3, [pc, #68]	@ (800b1f0 <tcp_process+0x594>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d15a      	bne.n	800b266 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d156      	bne.n	800b266 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	8b5b      	ldrh	r3, [r3, #26]
 800b1bc:	f043 0302 	orr.w	r3, r3, #2
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f7fe fdbc 	bl	8009d44 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b1cc:	4b13      	ldr	r3, [pc, #76]	@ (800b21c <tcp_process+0x5c0>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d105      	bne.n	800b1e2 <tcp_process+0x586>
 800b1d6:	4b11      	ldr	r3, [pc, #68]	@ (800b21c <tcp_process+0x5c0>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	4a0f      	ldr	r2, [pc, #60]	@ (800b21c <tcp_process+0x5c0>)
 800b1de:	6013      	str	r3, [r2, #0]
 800b1e0:	e02e      	b.n	800b240 <tcp_process+0x5e4>
 800b1e2:	4b0e      	ldr	r3, [pc, #56]	@ (800b21c <tcp_process+0x5c0>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	617b      	str	r3, [r7, #20]
 800b1e8:	e027      	b.n	800b23a <tcp_process+0x5de>
 800b1ea:	bf00      	nop
 800b1ec:	20008848 	.word	0x20008848
 800b1f0:	20008840 	.word	0x20008840
 800b1f4:	20008846 	.word	0x20008846
 800b1f8:	2000883c 	.word	0x2000883c
 800b1fc:	2000882c 	.word	0x2000882c
 800b200:	200054e4 	.word	0x200054e4
 800b204:	200054e8 	.word	0x200054e8
 800b208:	080134d0 	.word	0x080134d0
 800b20c:	08013770 	.word	0x08013770
 800b210:	0801351c 	.word	0x0801351c
 800b214:	20008844 	.word	0x20008844
 800b218:	20008849 	.word	0x20008849
 800b21c:	20008810 	.word	0x20008810
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	429a      	cmp	r2, r3
 800b228:	d104      	bne.n	800b234 <tcp_process+0x5d8>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68da      	ldr	r2, [r3, #12]
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	60da      	str	r2, [r3, #12]
 800b232:	e005      	b.n	800b240 <tcp_process+0x5e4>
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	617b      	str	r3, [r7, #20]
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d1ef      	bne.n	800b220 <tcp_process+0x5c4>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	60da      	str	r2, [r3, #12]
 800b246:	4b77      	ldr	r3, [pc, #476]	@ (800b424 <tcp_process+0x7c8>)
 800b248:	2201      	movs	r2, #1
 800b24a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	220a      	movs	r2, #10
 800b250:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b252:	4b75      	ldr	r3, [pc, #468]	@ (800b428 <tcp_process+0x7cc>)
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	60da      	str	r2, [r3, #12]
 800b25a:	4a73      	ldr	r2, [pc, #460]	@ (800b428 <tcp_process+0x7cc>)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6013      	str	r3, [r2, #0]
 800b260:	f002 fcf4 	bl	800dc4c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b264:	e0d2      	b.n	800b40c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	8b5b      	ldrh	r3, [r3, #26]
 800b26a:	f043 0302 	orr.w	r3, r3, #2
 800b26e:	b29a      	uxth	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2208      	movs	r2, #8
 800b278:	751a      	strb	r2, [r3, #20]
      break;
 800b27a:	e0c7      	b.n	800b40c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b27c:	4b6b      	ldr	r3, [pc, #428]	@ (800b42c <tcp_process+0x7d0>)
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	f003 0310 	and.w	r3, r3, #16
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 80c1 	beq.w	800b40c <tcp_process+0x7b0>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b28e:	4b68      	ldr	r3, [pc, #416]	@ (800b430 <tcp_process+0x7d4>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	429a      	cmp	r2, r3
 800b294:	f040 80ba 	bne.w	800b40c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f040 80b5 	bne.w	800b40c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2206      	movs	r2, #6
 800b2a6:	751a      	strb	r2, [r3, #20]
      break;
 800b2a8:	e0b0      	b.n	800b40c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f9ca 	bl	800b644 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b2b0:	4b60      	ldr	r3, [pc, #384]	@ (800b434 <tcp_process+0x7d8>)
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	f003 0320 	and.w	r3, r3, #32
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f000 80a9 	beq.w	800b410 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	8b5b      	ldrh	r3, [r3, #26]
 800b2c2:	f043 0302 	orr.w	r3, r3, #2
 800b2c6:	b29a      	uxth	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f7fe fd39 	bl	8009d44 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b2d2:	4b59      	ldr	r3, [pc, #356]	@ (800b438 <tcp_process+0x7dc>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d105      	bne.n	800b2e8 <tcp_process+0x68c>
 800b2dc:	4b56      	ldr	r3, [pc, #344]	@ (800b438 <tcp_process+0x7dc>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	4a55      	ldr	r2, [pc, #340]	@ (800b438 <tcp_process+0x7dc>)
 800b2e4:	6013      	str	r3, [r2, #0]
 800b2e6:	e013      	b.n	800b310 <tcp_process+0x6b4>
 800b2e8:	4b53      	ldr	r3, [pc, #332]	@ (800b438 <tcp_process+0x7dc>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	613b      	str	r3, [r7, #16]
 800b2ee:	e00c      	b.n	800b30a <tcp_process+0x6ae>
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d104      	bne.n	800b304 <tcp_process+0x6a8>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68da      	ldr	r2, [r3, #12]
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	60da      	str	r2, [r3, #12]
 800b302:	e005      	b.n	800b310 <tcp_process+0x6b4>
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	613b      	str	r3, [r7, #16]
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1ef      	bne.n	800b2f0 <tcp_process+0x694>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	60da      	str	r2, [r3, #12]
 800b316:	4b43      	ldr	r3, [pc, #268]	@ (800b424 <tcp_process+0x7c8>)
 800b318:	2201      	movs	r2, #1
 800b31a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	220a      	movs	r2, #10
 800b320:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b322:	4b41      	ldr	r3, [pc, #260]	@ (800b428 <tcp_process+0x7cc>)
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	60da      	str	r2, [r3, #12]
 800b32a:	4a3f      	ldr	r2, [pc, #252]	@ (800b428 <tcp_process+0x7cc>)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6013      	str	r3, [r2, #0]
 800b330:	f002 fc8c 	bl	800dc4c <tcp_timer_needed>
      }
      break;
 800b334:	e06c      	b.n	800b410 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f984 	bl	800b644 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b33c:	4b3b      	ldr	r3, [pc, #236]	@ (800b42c <tcp_process+0x7d0>)
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	f003 0310 	and.w	r3, r3, #16
 800b344:	2b00      	cmp	r3, #0
 800b346:	d065      	beq.n	800b414 <tcp_process+0x7b8>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b34c:	4b38      	ldr	r3, [pc, #224]	@ (800b430 <tcp_process+0x7d4>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	429a      	cmp	r2, r3
 800b352:	d15f      	bne.n	800b414 <tcp_process+0x7b8>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d15b      	bne.n	800b414 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7fe fcf1 	bl	8009d44 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b362:	4b35      	ldr	r3, [pc, #212]	@ (800b438 <tcp_process+0x7dc>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d105      	bne.n	800b378 <tcp_process+0x71c>
 800b36c:	4b32      	ldr	r3, [pc, #200]	@ (800b438 <tcp_process+0x7dc>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	4a31      	ldr	r2, [pc, #196]	@ (800b438 <tcp_process+0x7dc>)
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	e013      	b.n	800b3a0 <tcp_process+0x744>
 800b378:	4b2f      	ldr	r3, [pc, #188]	@ (800b438 <tcp_process+0x7dc>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	60fb      	str	r3, [r7, #12]
 800b37e:	e00c      	b.n	800b39a <tcp_process+0x73e>
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	429a      	cmp	r2, r3
 800b388:	d104      	bne.n	800b394 <tcp_process+0x738>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68da      	ldr	r2, [r3, #12]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	60da      	str	r2, [r3, #12]
 800b392:	e005      	b.n	800b3a0 <tcp_process+0x744>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	60fb      	str	r3, [r7, #12]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1ef      	bne.n	800b380 <tcp_process+0x724>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	60da      	str	r2, [r3, #12]
 800b3a6:	4b1f      	ldr	r3, [pc, #124]	@ (800b424 <tcp_process+0x7c8>)
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	220a      	movs	r2, #10
 800b3b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b3b2:	4b1d      	ldr	r3, [pc, #116]	@ (800b428 <tcp_process+0x7cc>)
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	60da      	str	r2, [r3, #12]
 800b3ba:	4a1b      	ldr	r2, [pc, #108]	@ (800b428 <tcp_process+0x7cc>)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6013      	str	r3, [r2, #0]
 800b3c0:	f002 fc44 	bl	800dc4c <tcp_timer_needed>
      }
      break;
 800b3c4:	e026      	b.n	800b414 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f93c 	bl	800b644 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b3cc:	4b17      	ldr	r3, [pc, #92]	@ (800b42c <tcp_process+0x7d0>)
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	f003 0310 	and.w	r3, r3, #16
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d01f      	beq.n	800b418 <tcp_process+0x7bc>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b3dc:	4b14      	ldr	r3, [pc, #80]	@ (800b430 <tcp_process+0x7d4>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d119      	bne.n	800b418 <tcp_process+0x7bc>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d115      	bne.n	800b418 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b3ec:	4b11      	ldr	r3, [pc, #68]	@ (800b434 <tcp_process+0x7d8>)
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	f043 0310 	orr.w	r3, r3, #16
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b434 <tcp_process+0x7d8>)
 800b3f8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b3fa:	e00d      	b.n	800b418 <tcp_process+0x7bc>
    default:
      break;
 800b3fc:	bf00      	nop
 800b3fe:	e00c      	b.n	800b41a <tcp_process+0x7be>
      break;
 800b400:	bf00      	nop
 800b402:	e00a      	b.n	800b41a <tcp_process+0x7be>
      break;
 800b404:	bf00      	nop
 800b406:	e008      	b.n	800b41a <tcp_process+0x7be>
      break;
 800b408:	bf00      	nop
 800b40a:	e006      	b.n	800b41a <tcp_process+0x7be>
      break;
 800b40c:	bf00      	nop
 800b40e:	e004      	b.n	800b41a <tcp_process+0x7be>
      break;
 800b410:	bf00      	nop
 800b412:	e002      	b.n	800b41a <tcp_process+0x7be>
      break;
 800b414:	bf00      	nop
 800b416:	e000      	b.n	800b41a <tcp_process+0x7be>
      break;
 800b418:	bf00      	nop
  }
  return ERR_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3724      	adds	r7, #36	@ 0x24
 800b420:	46bd      	mov	sp, r7
 800b422:	bd90      	pop	{r4, r7, pc}
 800b424:	20008818 	.word	0x20008818
 800b428:	20008814 	.word	0x20008814
 800b42c:	20008848 	.word	0x20008848
 800b430:	20008840 	.word	0x20008840
 800b434:	20008849 	.word	0x20008849
 800b438:	20008810 	.word	0x20008810

0800b43c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b43c:	b590      	push	{r4, r7, lr}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d106      	bne.n	800b45a <tcp_oos_insert_segment+0x1e>
 800b44c:	4b3b      	ldr	r3, [pc, #236]	@ (800b53c <tcp_oos_insert_segment+0x100>)
 800b44e:	f240 421f 	movw	r2, #1055	@ 0x41f
 800b452:	493b      	ldr	r1, [pc, #236]	@ (800b540 <tcp_oos_insert_segment+0x104>)
 800b454:	483b      	ldr	r0, [pc, #236]	@ (800b544 <tcp_oos_insert_segment+0x108>)
 800b456:	f005 fe13 	bl	8011080 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	899b      	ldrh	r3, [r3, #12]
 800b460:	b29b      	uxth	r3, r3
 800b462:	4618      	mov	r0, r3
 800b464:	f7fb fc0c 	bl	8006c80 <lwip_htons>
 800b468:	4603      	mov	r3, r0
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	f003 0301 	and.w	r3, r3, #1
 800b470:	2b00      	cmp	r3, #0
 800b472:	d028      	beq.n	800b4c6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b474:	6838      	ldr	r0, [r7, #0]
 800b476:	f7fe fa63 	bl	8009940 <tcp_segs_free>
    next = NULL;
 800b47a:	2300      	movs	r3, #0
 800b47c:	603b      	str	r3, [r7, #0]
 800b47e:	e056      	b.n	800b52e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	899b      	ldrh	r3, [r3, #12]
 800b486:	b29b      	uxth	r3, r3
 800b488:	4618      	mov	r0, r3
 800b48a:	f7fb fbf9 	bl	8006c80 <lwip_htons>
 800b48e:	4603      	mov	r3, r0
 800b490:	b2db      	uxtb	r3, r3
 800b492:	f003 0301 	and.w	r3, r3, #1
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00d      	beq.n	800b4b6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	899b      	ldrh	r3, [r3, #12]
 800b4a0:	b29c      	uxth	r4, r3
 800b4a2:	2001      	movs	r0, #1
 800b4a4:	f7fb fbec 	bl	8006c80 <lwip_htons>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	4322      	orrs	r2, r4
 800b4b2:	b292      	uxth	r2, r2
 800b4b4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f7fe fa52 	bl	800996a <tcp_seg_free>
    while (next &&
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00e      	beq.n	800b4ea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	891b      	ldrh	r3, [r3, #8]
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	4b1d      	ldr	r3, [pc, #116]	@ (800b548 <tcp_oos_insert_segment+0x10c>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	441a      	add	r2, r3
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	8909      	ldrh	r1, [r1, #8]
 800b4e2:	440b      	add	r3, r1
 800b4e4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	daca      	bge.n	800b480 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d01e      	beq.n	800b52e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	891b      	ldrh	r3, [r3, #8]
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	4b14      	ldr	r3, [pc, #80]	@ (800b548 <tcp_oos_insert_segment+0x10c>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	441a      	add	r2, r3
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b504:	2b00      	cmp	r3, #0
 800b506:	dd12      	ble.n	800b52e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	b29a      	uxth	r2, r3
 800b510:	4b0d      	ldr	r3, [pc, #52]	@ (800b548 <tcp_oos_insert_segment+0x10c>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	b29b      	uxth	r3, r3
 800b516:	1ad3      	subs	r3, r2, r3
 800b518:	b29a      	uxth	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685a      	ldr	r2, [r3, #4]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	891b      	ldrh	r3, [r3, #8]
 800b526:	4619      	mov	r1, r3
 800b528:	4610      	mov	r0, r2
 800b52a:	f7fc fd81 	bl	8008030 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	601a      	str	r2, [r3, #0]
}
 800b534:	bf00      	nop
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd90      	pop	{r4, r7, pc}
 800b53c:	080134d0 	.word	0x080134d0
 800b540:	08013790 	.word	0x08013790
 800b544:	0801351c 	.word	0x0801351c
 800b548:	2000883c 	.word	0x2000883c

0800b54c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b54c:	b5b0      	push	{r4, r5, r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
 800b558:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b55a:	e03e      	b.n	800b5da <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fc ff6e 	bl	800844c <pbuf_clen>
 800b570:	4603      	mov	r3, r0
 800b572:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b57a:	8a7a      	ldrh	r2, [r7, #18]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d906      	bls.n	800b58e <tcp_free_acked_segments+0x42>
 800b580:	4b2a      	ldr	r3, [pc, #168]	@ (800b62c <tcp_free_acked_segments+0xe0>)
 800b582:	f240 4257 	movw	r2, #1111	@ 0x457
 800b586:	492a      	ldr	r1, [pc, #168]	@ (800b630 <tcp_free_acked_segments+0xe4>)
 800b588:	482a      	ldr	r0, [pc, #168]	@ (800b634 <tcp_free_acked_segments+0xe8>)
 800b58a:	f005 fd79 	bl	8011080 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800b594:	8a7b      	ldrh	r3, [r7, #18]
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	b29a      	uxth	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	891a      	ldrh	r2, [r3, #8]
 800b5a4:	4b24      	ldr	r3, [pc, #144]	@ (800b638 <tcp_free_acked_segments+0xec>)
 800b5a6:	881b      	ldrh	r3, [r3, #0]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	4b22      	ldr	r3, [pc, #136]	@ (800b638 <tcp_free_acked_segments+0xec>)
 800b5ae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b5b0:	6978      	ldr	r0, [r7, #20]
 800b5b2:	f7fe f9da 	bl	800996a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00c      	beq.n	800b5da <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d109      	bne.n	800b5da <tcp_free_acked_segments+0x8e>
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d106      	bne.n	800b5da <tcp_free_acked_segments+0x8e>
 800b5cc:	4b17      	ldr	r3, [pc, #92]	@ (800b62c <tcp_free_acked_segments+0xe0>)
 800b5ce:	f240 4261 	movw	r2, #1121	@ 0x461
 800b5d2:	491a      	ldr	r1, [pc, #104]	@ (800b63c <tcp_free_acked_segments+0xf0>)
 800b5d4:	4817      	ldr	r0, [pc, #92]	@ (800b634 <tcp_free_acked_segments+0xe8>)
 800b5d6:	f005 fd53 	bl	8011080 <iprintf>
  while (seg_list != NULL &&
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d020      	beq.n	800b622 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7fb fb60 	bl	8006cac <lwip_htonl>
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	891b      	ldrh	r3, [r3, #8]
 800b5f2:	461d      	mov	r5, r3
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	899b      	ldrh	r3, [r3, #12]
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fb fb3f 	bl	8006c80 <lwip_htons>
 800b602:	4603      	mov	r3, r0
 800b604:	b2db      	uxtb	r3, r3
 800b606:	f003 0303 	and.w	r3, r3, #3
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <tcp_free_acked_segments+0xc6>
 800b60e:	2301      	movs	r3, #1
 800b610:	e000      	b.n	800b614 <tcp_free_acked_segments+0xc8>
 800b612:	2300      	movs	r3, #0
 800b614:	442b      	add	r3, r5
 800b616:	18e2      	adds	r2, r4, r3
 800b618:	4b09      	ldr	r3, [pc, #36]	@ (800b640 <tcp_free_acked_segments+0xf4>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b61e:	2b00      	cmp	r3, #0
 800b620:	dd9c      	ble.n	800b55c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b622:	68bb      	ldr	r3, [r7, #8]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3718      	adds	r7, #24
 800b628:	46bd      	mov	sp, r7
 800b62a:	bdb0      	pop	{r4, r5, r7, pc}
 800b62c:	080134d0 	.word	0x080134d0
 800b630:	080137b8 	.word	0x080137b8
 800b634:	0801351c 	.word	0x0801351c
 800b638:	20008844 	.word	0x20008844
 800b63c:	080137e0 	.word	0x080137e0
 800b640:	20008840 	.word	0x20008840

0800b644 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b644:	b5b0      	push	{r4, r5, r7, lr}
 800b646:	b094      	sub	sp, #80	@ 0x50
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d106      	bne.n	800b664 <tcp_receive+0x20>
 800b656:	4b91      	ldr	r3, [pc, #580]	@ (800b89c <tcp_receive+0x258>)
 800b658:	f240 427b 	movw	r2, #1147	@ 0x47b
 800b65c:	4990      	ldr	r1, [pc, #576]	@ (800b8a0 <tcp_receive+0x25c>)
 800b65e:	4891      	ldr	r0, [pc, #580]	@ (800b8a4 <tcp_receive+0x260>)
 800b660:	f005 fd0e 	bl	8011080 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	7d1b      	ldrb	r3, [r3, #20]
 800b668:	2b03      	cmp	r3, #3
 800b66a:	d806      	bhi.n	800b67a <tcp_receive+0x36>
 800b66c:	4b8b      	ldr	r3, [pc, #556]	@ (800b89c <tcp_receive+0x258>)
 800b66e:	f240 427c 	movw	r2, #1148	@ 0x47c
 800b672:	498d      	ldr	r1, [pc, #564]	@ (800b8a8 <tcp_receive+0x264>)
 800b674:	488b      	ldr	r0, [pc, #556]	@ (800b8a4 <tcp_receive+0x260>)
 800b676:	f005 fd03 	bl	8011080 <iprintf>

  if (flags & TCP_ACK) {
 800b67a:	4b8c      	ldr	r3, [pc, #560]	@ (800b8ac <tcp_receive+0x268>)
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	f003 0310 	and.w	r3, r3, #16
 800b682:	2b00      	cmp	r3, #0
 800b684:	f000 8264 	beq.w	800bb50 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b68e:	461a      	mov	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b694:	4413      	add	r3, r2
 800b696:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b69c:	4b84      	ldr	r3, [pc, #528]	@ (800b8b0 <tcp_receive+0x26c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	db1b      	blt.n	800b6de <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b6aa:	4b81      	ldr	r3, [pc, #516]	@ (800b8b0 <tcp_receive+0x26c>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d106      	bne.n	800b6c0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b6b6:	4b7f      	ldr	r3, [pc, #508]	@ (800b8b4 <tcp_receive+0x270>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	1ad3      	subs	r3, r2, r3
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	db0e      	blt.n	800b6de <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b6c4:	4b7b      	ldr	r3, [pc, #492]	@ (800b8b4 <tcp_receive+0x270>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d125      	bne.n	800b718 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b6cc:	4b7a      	ldr	r3, [pc, #488]	@ (800b8b8 <tcp_receive+0x274>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	89db      	ldrh	r3, [r3, #14]
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d91c      	bls.n	800b718 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b6de:	4b76      	ldr	r3, [pc, #472]	@ (800b8b8 <tcp_receive+0x274>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	89db      	ldrh	r3, [r3, #14]
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d205      	bcs.n	800b708 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800b708:	4b69      	ldr	r3, [pc, #420]	@ (800b8b0 <tcp_receive+0x26c>)
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800b710:	4b68      	ldr	r3, [pc, #416]	@ (800b8b4 <tcp_receive+0x270>)
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b718:	4b66      	ldr	r3, [pc, #408]	@ (800b8b4 <tcp_receive+0x270>)
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	2b00      	cmp	r3, #0
 800b724:	dc58      	bgt.n	800b7d8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b726:	4b65      	ldr	r3, [pc, #404]	@ (800b8bc <tcp_receive+0x278>)
 800b728:	881b      	ldrh	r3, [r3, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d14b      	bne.n	800b7c6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800b738:	4413      	add	r3, r2
 800b73a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d142      	bne.n	800b7c6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b746:	2b00      	cmp	r3, #0
 800b748:	db3d      	blt.n	800b7c6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b74e:	4b59      	ldr	r3, [pc, #356]	@ (800b8b4 <tcp_receive+0x270>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	429a      	cmp	r2, r3
 800b754:	d137      	bne.n	800b7c6 <tcp_receive+0x182>
              found_dupack = 1;
 800b756:	2301      	movs	r3, #1
 800b758:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b760:	2bff      	cmp	r3, #255	@ 0xff
 800b762:	d007      	beq.n	800b774 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b76a:	3301      	adds	r3, #1
 800b76c:	b2da      	uxtb	r2, r3
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b77a:	2b03      	cmp	r3, #3
 800b77c:	d91b      	bls.n	800b7b6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b788:	4413      	add	r3, r2
 800b78a:	b29a      	uxth	r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b792:	429a      	cmp	r2, r3
 800b794:	d30a      	bcc.n	800b7ac <tcp_receive+0x168>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b7a0:	4413      	add	r3, r2
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b7aa:	e004      	b.n	800b7b6 <tcp_receive+0x172>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b7b2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d902      	bls.n	800b7c6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f001 fee7 	bl	800d594 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b7c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f040 8161 	bne.w	800ba90 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b7d6:	e15b      	b.n	800ba90 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b7d8:	4b36      	ldr	r3, [pc, #216]	@ (800b8b4 <tcp_receive+0x270>)
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f2c0 814e 	blt.w	800ba86 <tcp_receive+0x442>
 800b7ea:	4b32      	ldr	r3, [pc, #200]	@ (800b8b4 <tcp_receive+0x270>)
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7f2:	1ad3      	subs	r3, r2, r3
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	f300 8146 	bgt.w	800ba86 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	8b5b      	ldrh	r3, [r3, #26]
 800b7fe:	f003 0304 	and.w	r3, r3, #4
 800b802:	2b00      	cmp	r3, #0
 800b804:	d010      	beq.n	800b828 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	8b5b      	ldrh	r3, [r3, #26]
 800b80a:	f023 0304 	bic.w	r3, r3, #4
 800b80e:	b29a      	uxth	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b836:	10db      	asrs	r3, r3, #3
 800b838:	b21b      	sxth	r3, r3
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b842:	b29b      	uxth	r3, r3
 800b844:	4413      	add	r3, r2
 800b846:	b29b      	uxth	r3, r3
 800b848:	b21a      	sxth	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b850:	4b18      	ldr	r3, [pc, #96]	@ (800b8b4 <tcp_receive+0x270>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	b29a      	uxth	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	1ad3      	subs	r3, r2, r3
 800b85e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800b868:	4b12      	ldr	r3, [pc, #72]	@ (800b8b4 <tcp_receive+0x270>)
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	7d1b      	ldrb	r3, [r3, #20]
 800b874:	2b03      	cmp	r3, #3
 800b876:	f240 8097 	bls.w	800b9a8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b886:	429a      	cmp	r2, r3
 800b888:	d245      	bcs.n	800b916 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	8b5b      	ldrh	r3, [r3, #26]
 800b88e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b892:	2b00      	cmp	r3, #0
 800b894:	d014      	beq.n	800b8c0 <tcp_receive+0x27c>
 800b896:	2301      	movs	r3, #1
 800b898:	e013      	b.n	800b8c2 <tcp_receive+0x27e>
 800b89a:	bf00      	nop
 800b89c:	080134d0 	.word	0x080134d0
 800b8a0:	08013800 	.word	0x08013800
 800b8a4:	0801351c 	.word	0x0801351c
 800b8a8:	0801381c 	.word	0x0801381c
 800b8ac:	20008848 	.word	0x20008848
 800b8b0:	2000883c 	.word	0x2000883c
 800b8b4:	20008840 	.word	0x20008840
 800b8b8:	2000882c 	.word	0x2000882c
 800b8bc:	20008846 	.word	0x20008846
 800b8c0:	2302      	movs	r3, #2
 800b8c2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b8c6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b8d0:	fb12 f303 	smulbb	r3, r2, r3
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	bf28      	it	cs
 800b8dc:	4613      	movcs	r3, r2
 800b8de:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b8e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b8e8:	4413      	add	r3, r2
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d309      	bcc.n	800b90a <tcp_receive+0x2c6>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b8fc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b8fe:	4413      	add	r3, r2
 800b900:	b29a      	uxth	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b908:	e04e      	b.n	800b9a8 <tcp_receive+0x364>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b910:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b914:	e048      	b.n	800b9a8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b91c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b91e:	4413      	add	r3, r2
 800b920:	b29a      	uxth	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b928:	429a      	cmp	r2, r3
 800b92a:	d309      	bcc.n	800b940 <tcp_receive+0x2fc>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b932:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b934:	4413      	add	r3, r2
 800b936:	b29a      	uxth	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b93e:	e004      	b.n	800b94a <tcp_receive+0x306>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b946:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b956:	429a      	cmp	r2, r3
 800b958:	d326      	bcc.n	800b9a8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	b29a      	uxth	r2, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b97a:	4413      	add	r3, r2
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b984:	429a      	cmp	r2, r3
 800b986:	d30a      	bcc.n	800b99e <tcp_receive+0x35a>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b992:	4413      	add	r3, r2
 800b994:	b29a      	uxth	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b99c:	e004      	b.n	800b9a8 <tcp_receive+0x364>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b9a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9b0:	4a98      	ldr	r2, [pc, #608]	@ (800bc14 <tcp_receive+0x5d0>)
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f7ff fdca 	bl	800b54c <tcp_free_acked_segments>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9c6:	4a94      	ldr	r2, [pc, #592]	@ (800bc18 <tcp_receive+0x5d4>)
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f7ff fdbf 	bl	800b54c <tcp_free_acked_segments>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d104      	bne.n	800b9e6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b9e2:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b9e4:	e002      	b.n	800b9ec <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d103      	bne.n	800ba02 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800ba08:	4b84      	ldr	r3, [pc, #528]	@ (800bc1c <tcp_receive+0x5d8>)
 800ba0a:	881b      	ldrh	r3, [r3, #0]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	8b5b      	ldrh	r3, [r3, #26]
 800ba1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d035      	beq.n	800ba8e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d118      	bne.n	800ba5c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00c      	beq.n	800ba4c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7fb f934 	bl	8006cac <lwip_htonl>
 800ba44:	4603      	mov	r3, r0
 800ba46:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	dc20      	bgt.n	800ba8e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	8b5b      	ldrh	r3, [r3, #26]
 800ba50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ba54:	b29a      	uxth	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ba5a:	e018      	b.n	800ba8e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7fb f91f 	bl	8006cac <lwip_htonl>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	1ae3      	subs	r3, r4, r3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	dc0b      	bgt.n	800ba8e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	8b5b      	ldrh	r3, [r3, #26]
 800ba7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ba84:	e003      	b.n	800ba8e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f001 ff70 	bl	800d96c <tcp_send_empty_ack>
 800ba8c:	e000      	b.n	800ba90 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ba8e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d05b      	beq.n	800bb50 <tcp_receive+0x50c>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba9c:	4b60      	ldr	r3, [pc, #384]	@ (800bc20 <tcp_receive+0x5dc>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	da54      	bge.n	800bb50 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800baa6:	4b5f      	ldr	r3, [pc, #380]	@ (800bc24 <tcp_receive+0x5e0>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	b29a      	uxth	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800baba:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bac4:	10db      	asrs	r3, r3, #3
 800bac6:	b21b      	sxth	r3, r3
 800bac8:	b29b      	uxth	r3, r3
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	b29b      	uxth	r3, r3
 800bace:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bad8:	b29a      	uxth	r2, r3
 800bada:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bade:	4413      	add	r3, r2
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	b21a      	sxth	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800bae8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800baec:	2b00      	cmp	r3, #0
 800baee:	da05      	bge.n	800bafc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800baf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800baf4:	425b      	negs	r3, r3
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bafc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bb06:	109b      	asrs	r3, r3, #2
 800bb08:	b21b      	sxth	r3, r3
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	1ad3      	subs	r3, r2, r3
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bb20:	4413      	add	r3, r2
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	b21a      	sxth	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bb30:	10db      	asrs	r3, r3, #3
 800bb32:	b21b      	sxth	r3, r3
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	4413      	add	r3, r2
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	b21a      	sxth	r2, r3
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bb50:	4b35      	ldr	r3, [pc, #212]	@ (800bc28 <tcp_receive+0x5e4>)
 800bb52:	881b      	ldrh	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f000 84df 	beq.w	800c518 <tcp_receive+0xed4>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	7d1b      	ldrb	r3, [r3, #20]
 800bb5e:	2b06      	cmp	r3, #6
 800bb60:	f200 84da 	bhi.w	800c518 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb68:	4b30      	ldr	r3, [pc, #192]	@ (800bc2c <tcp_receive+0x5e8>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f2c0 808f 	blt.w	800bc94 <tcp_receive+0x650>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb7a:	4b2b      	ldr	r3, [pc, #172]	@ (800bc28 <tcp_receive+0x5e4>)
 800bb7c:	881b      	ldrh	r3, [r3, #0]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	4b2a      	ldr	r3, [pc, #168]	@ (800bc2c <tcp_receive+0x5e8>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	440b      	add	r3, r1
 800bb86:	1ad3      	subs	r3, r2, r3
 800bb88:	3301      	adds	r3, #1
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f300 8082 	bgt.w	800bc94 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bb90:	4b27      	ldr	r3, [pc, #156]	@ (800bc30 <tcp_receive+0x5ec>)
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb9a:	4b24      	ldr	r3, [pc, #144]	@ (800bc2c <tcp_receive+0x5e8>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bba2:	4b23      	ldr	r3, [pc, #140]	@ (800bc30 <tcp_receive+0x5ec>)
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d106      	bne.n	800bbb8 <tcp_receive+0x574>
 800bbaa:	4b22      	ldr	r3, [pc, #136]	@ (800bc34 <tcp_receive+0x5f0>)
 800bbac:	f240 5294 	movw	r2, #1428	@ 0x594
 800bbb0:	4921      	ldr	r1, [pc, #132]	@ (800bc38 <tcp_receive+0x5f4>)
 800bbb2:	4822      	ldr	r0, [pc, #136]	@ (800bc3c <tcp_receive+0x5f8>)
 800bbb4:	f005 fa64 	bl	8011080 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d906      	bls.n	800bbd0 <tcp_receive+0x58c>
 800bbc2:	4b1c      	ldr	r3, [pc, #112]	@ (800bc34 <tcp_receive+0x5f0>)
 800bbc4:	f240 5295 	movw	r2, #1429	@ 0x595
 800bbc8:	491d      	ldr	r1, [pc, #116]	@ (800bc40 <tcp_receive+0x5fc>)
 800bbca:	481c      	ldr	r0, [pc, #112]	@ (800bc3c <tcp_receive+0x5f8>)
 800bbcc:	f005 fa58 	bl	8011080 <iprintf>
      off = (u16_t)off32;
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bbd6:	4b16      	ldr	r3, [pc, #88]	@ (800bc30 <tcp_receive+0x5ec>)
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	891b      	ldrh	r3, [r3, #8]
 800bbdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d906      	bls.n	800bbf2 <tcp_receive+0x5ae>
 800bbe4:	4b13      	ldr	r3, [pc, #76]	@ (800bc34 <tcp_receive+0x5f0>)
 800bbe6:	f240 5297 	movw	r2, #1431	@ 0x597
 800bbea:	4916      	ldr	r1, [pc, #88]	@ (800bc44 <tcp_receive+0x600>)
 800bbec:	4813      	ldr	r0, [pc, #76]	@ (800bc3c <tcp_receive+0x5f8>)
 800bbee:	f005 fa47 	bl	8011080 <iprintf>
      inseg.len -= off;
 800bbf2:	4b0f      	ldr	r3, [pc, #60]	@ (800bc30 <tcp_receive+0x5ec>)
 800bbf4:	891a      	ldrh	r2, [r3, #8]
 800bbf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	4b0c      	ldr	r3, [pc, #48]	@ (800bc30 <tcp_receive+0x5ec>)
 800bc00:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bc02:	4b0b      	ldr	r3, [pc, #44]	@ (800bc30 <tcp_receive+0x5ec>)
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	891a      	ldrh	r2, [r3, #8]
 800bc08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bc0c:	1ad3      	subs	r3, r2, r3
 800bc0e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800bc10:	e02a      	b.n	800bc68 <tcp_receive+0x624>
 800bc12:	bf00      	nop
 800bc14:	08013838 	.word	0x08013838
 800bc18:	08013840 	.word	0x08013840
 800bc1c:	20008844 	.word	0x20008844
 800bc20:	20008840 	.word	0x20008840
 800bc24:	20008804 	.word	0x20008804
 800bc28:	20008846 	.word	0x20008846
 800bc2c:	2000883c 	.word	0x2000883c
 800bc30:	2000881c 	.word	0x2000881c
 800bc34:	080134d0 	.word	0x080134d0
 800bc38:	08013848 	.word	0x08013848
 800bc3c:	0801351c 	.word	0x0801351c
 800bc40:	08013858 	.word	0x08013858
 800bc44:	08013868 	.word	0x08013868
        off -= p->len;
 800bc48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc4a:	895b      	ldrh	r3, [r3, #10]
 800bc4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800bc56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc58:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800bc5a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800bc5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc5e:	2200      	movs	r2, #0
 800bc60:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800bc62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800bc68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc6a:	895b      	ldrh	r3, [r3, #10]
 800bc6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d8e9      	bhi.n	800bc48 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800bc74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bc78:	4619      	mov	r1, r3
 800bc7a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800bc7c:	f7fc fad8 	bl	8008230 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc84:	4a90      	ldr	r2, [pc, #576]	@ (800bec8 <tcp_receive+0x884>)
 800bc86:	6013      	str	r3, [r2, #0]
 800bc88:	4b90      	ldr	r3, [pc, #576]	@ (800becc <tcp_receive+0x888>)
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	4a8e      	ldr	r2, [pc, #568]	@ (800bec8 <tcp_receive+0x884>)
 800bc8e:	6812      	ldr	r2, [r2, #0]
 800bc90:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bc92:	e00d      	b.n	800bcb0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800bc94:	4b8c      	ldr	r3, [pc, #560]	@ (800bec8 <tcp_receive+0x884>)
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	da06      	bge.n	800bcb0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	8b5b      	ldrh	r3, [r3, #26]
 800bca6:	f043 0302 	orr.w	r3, r3, #2
 800bcaa:	b29a      	uxth	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bcb0:	4b85      	ldr	r3, [pc, #532]	@ (800bec8 <tcp_receive+0x884>)
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcb8:	1ad3      	subs	r3, r2, r3
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f2c0 8427 	blt.w	800c50e <tcp_receive+0xeca>
 800bcc0:	4b81      	ldr	r3, [pc, #516]	@ (800bec8 <tcp_receive+0x884>)
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcc8:	6879      	ldr	r1, [r7, #4]
 800bcca:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bccc:	440b      	add	r3, r1
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f300 841b 	bgt.w	800c50e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bcdc:	4b7a      	ldr	r3, [pc, #488]	@ (800bec8 <tcp_receive+0x884>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	f040 8298 	bne.w	800c216 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800bce6:	4b79      	ldr	r3, [pc, #484]	@ (800becc <tcp_receive+0x888>)
 800bce8:	891c      	ldrh	r4, [r3, #8]
 800bcea:	4b78      	ldr	r3, [pc, #480]	@ (800becc <tcp_receive+0x888>)
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	899b      	ldrh	r3, [r3, #12]
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7fa ffc4 	bl	8006c80 <lwip_htons>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	f003 0303 	and.w	r3, r3, #3
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <tcp_receive+0x6c4>
 800bd04:	2301      	movs	r3, #1
 800bd06:	e000      	b.n	800bd0a <tcp_receive+0x6c6>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	4423      	add	r3, r4
 800bd0c:	b29a      	uxth	r2, r3
 800bd0e:	4b70      	ldr	r3, [pc, #448]	@ (800bed0 <tcp_receive+0x88c>)
 800bd10:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800bd16:	4b6e      	ldr	r3, [pc, #440]	@ (800bed0 <tcp_receive+0x88c>)
 800bd18:	881b      	ldrh	r3, [r3, #0]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d274      	bcs.n	800be08 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bd1e:	4b6b      	ldr	r3, [pc, #428]	@ (800becc <tcp_receive+0x888>)
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	899b      	ldrh	r3, [r3, #12]
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7fa ffaa 	bl	8006c80 <lwip_htons>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	f003 0301 	and.w	r3, r3, #1
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d01e      	beq.n	800bd76 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bd38:	4b64      	ldr	r3, [pc, #400]	@ (800becc <tcp_receive+0x888>)
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	899b      	ldrh	r3, [r3, #12]
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	b21b      	sxth	r3, r3
 800bd42:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bd46:	b21c      	sxth	r4, r3
 800bd48:	4b60      	ldr	r3, [pc, #384]	@ (800becc <tcp_receive+0x888>)
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	899b      	ldrh	r3, [r3, #12]
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7fa ff95 	bl	8006c80 <lwip_htons>
 800bd56:	4603      	mov	r3, r0
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fa ff8d 	bl	8006c80 <lwip_htons>
 800bd66:	4603      	mov	r3, r0
 800bd68:	b21b      	sxth	r3, r3
 800bd6a:	4323      	orrs	r3, r4
 800bd6c:	b21a      	sxth	r2, r3
 800bd6e:	4b57      	ldr	r3, [pc, #348]	@ (800becc <tcp_receive+0x888>)
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	b292      	uxth	r2, r2
 800bd74:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800bd7a:	4b54      	ldr	r3, [pc, #336]	@ (800becc <tcp_receive+0x888>)
 800bd7c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bd7e:	4b53      	ldr	r3, [pc, #332]	@ (800becc <tcp_receive+0x888>)
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	899b      	ldrh	r3, [r3, #12]
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fa ff7a 	bl	8006c80 <lwip_htons>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	f003 0302 	and.w	r3, r3, #2
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d005      	beq.n	800bda4 <tcp_receive+0x760>
            inseg.len -= 1;
 800bd98:	4b4c      	ldr	r3, [pc, #304]	@ (800becc <tcp_receive+0x888>)
 800bd9a:	891b      	ldrh	r3, [r3, #8]
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	4b4a      	ldr	r3, [pc, #296]	@ (800becc <tcp_receive+0x888>)
 800bda2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800bda4:	4b49      	ldr	r3, [pc, #292]	@ (800becc <tcp_receive+0x888>)
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	4a48      	ldr	r2, [pc, #288]	@ (800becc <tcp_receive+0x888>)
 800bdaa:	8912      	ldrh	r2, [r2, #8]
 800bdac:	4611      	mov	r1, r2
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7fc f93e 	bl	8008030 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bdb4:	4b45      	ldr	r3, [pc, #276]	@ (800becc <tcp_receive+0x888>)
 800bdb6:	891c      	ldrh	r4, [r3, #8]
 800bdb8:	4b44      	ldr	r3, [pc, #272]	@ (800becc <tcp_receive+0x888>)
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	899b      	ldrh	r3, [r3, #12]
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fa ff5d 	bl	8006c80 <lwip_htons>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	f003 0303 	and.w	r3, r3, #3
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d001      	beq.n	800bdd6 <tcp_receive+0x792>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e000      	b.n	800bdd8 <tcp_receive+0x794>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	4423      	add	r3, r4
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	4b3c      	ldr	r3, [pc, #240]	@ (800bed0 <tcp_receive+0x88c>)
 800bdde:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bde0:	4b3b      	ldr	r3, [pc, #236]	@ (800bed0 <tcp_receive+0x88c>)
 800bde2:	881b      	ldrh	r3, [r3, #0]
 800bde4:	461a      	mov	r2, r3
 800bde6:	4b38      	ldr	r3, [pc, #224]	@ (800bec8 <tcp_receive+0x884>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	441a      	add	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdf0:	6879      	ldr	r1, [r7, #4]
 800bdf2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bdf4:	440b      	add	r3, r1
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d006      	beq.n	800be08 <tcp_receive+0x7c4>
 800bdfa:	4b36      	ldr	r3, [pc, #216]	@ (800bed4 <tcp_receive+0x890>)
 800bdfc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800be00:	4935      	ldr	r1, [pc, #212]	@ (800bed8 <tcp_receive+0x894>)
 800be02:	4836      	ldr	r0, [pc, #216]	@ (800bedc <tcp_receive+0x898>)
 800be04:	f005 f93c 	bl	8011080 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f000 80e6 	beq.w	800bfde <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800be12:	4b2e      	ldr	r3, [pc, #184]	@ (800becc <tcp_receive+0x888>)
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	899b      	ldrh	r3, [r3, #12]
 800be18:	b29b      	uxth	r3, r3
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fa ff30 	bl	8006c80 <lwip_htons>
 800be20:	4603      	mov	r3, r0
 800be22:	b2db      	uxtb	r3, r3
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d010      	beq.n	800be4e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800be2c:	e00a      	b.n	800be44 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be32:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f7fd fd93 	bl	800996a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1f0      	bne.n	800be2e <tcp_receive+0x7ea>
 800be4c:	e0c7      	b.n	800bfde <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be52:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800be54:	e051      	b.n	800befa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800be56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	899b      	ldrh	r3, [r3, #12]
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	4618      	mov	r0, r3
 800be60:	f7fa ff0e 	bl	8006c80 <lwip_htons>
 800be64:	4603      	mov	r3, r0
 800be66:	b2db      	uxtb	r3, r3
 800be68:	f003 0301 	and.w	r3, r3, #1
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d03c      	beq.n	800beea <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800be70:	4b16      	ldr	r3, [pc, #88]	@ (800becc <tcp_receive+0x888>)
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	899b      	ldrh	r3, [r3, #12]
 800be76:	b29b      	uxth	r3, r3
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fa ff01 	bl	8006c80 <lwip_htons>
 800be7e:	4603      	mov	r3, r0
 800be80:	b2db      	uxtb	r3, r3
 800be82:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800be86:	2b00      	cmp	r3, #0
 800be88:	d12f      	bne.n	800beea <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800be8a:	4b10      	ldr	r3, [pc, #64]	@ (800becc <tcp_receive+0x888>)
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	899b      	ldrh	r3, [r3, #12]
 800be90:	b29c      	uxth	r4, r3
 800be92:	2001      	movs	r0, #1
 800be94:	f7fa fef4 	bl	8006c80 <lwip_htons>
 800be98:	4603      	mov	r3, r0
 800be9a:	461a      	mov	r2, r3
 800be9c:	4b0b      	ldr	r3, [pc, #44]	@ (800becc <tcp_receive+0x888>)
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	4322      	orrs	r2, r4
 800bea2:	b292      	uxth	r2, r2
 800bea4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800bea6:	4b09      	ldr	r3, [pc, #36]	@ (800becc <tcp_receive+0x888>)
 800bea8:	891c      	ldrh	r4, [r3, #8]
 800beaa:	4b08      	ldr	r3, [pc, #32]	@ (800becc <tcp_receive+0x888>)
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	899b      	ldrh	r3, [r3, #12]
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7fa fee4 	bl	8006c80 <lwip_htons>
 800beb8:	4603      	mov	r3, r0
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	f003 0303 	and.w	r3, r3, #3
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00d      	beq.n	800bee0 <tcp_receive+0x89c>
 800bec4:	2301      	movs	r3, #1
 800bec6:	e00c      	b.n	800bee2 <tcp_receive+0x89e>
 800bec8:	2000883c 	.word	0x2000883c
 800becc:	2000881c 	.word	0x2000881c
 800bed0:	20008846 	.word	0x20008846
 800bed4:	080134d0 	.word	0x080134d0
 800bed8:	08013878 	.word	0x08013878
 800bedc:	0801351c 	.word	0x0801351c
 800bee0:	2300      	movs	r3, #0
 800bee2:	4423      	add	r3, r4
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	4b98      	ldr	r3, [pc, #608]	@ (800c148 <tcp_receive+0xb04>)
 800bee8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800beea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beec:	613b      	str	r3, [r7, #16]
              next = next->next;
 800beee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800bef4:	6938      	ldr	r0, [r7, #16]
 800bef6:	f7fd fd38 	bl	800996a <tcp_seg_free>
            while (next &&
 800befa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00e      	beq.n	800bf1e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800bf00:	4b91      	ldr	r3, [pc, #580]	@ (800c148 <tcp_receive+0xb04>)
 800bf02:	881b      	ldrh	r3, [r3, #0]
 800bf04:	461a      	mov	r2, r3
 800bf06:	4b91      	ldr	r3, [pc, #580]	@ (800c14c <tcp_receive+0xb08>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	441a      	add	r2, r3
 800bf0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf14:	8909      	ldrh	r1, [r1, #8]
 800bf16:	440b      	add	r3, r1
 800bf18:	1ad3      	subs	r3, r2, r3
            while (next &&
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	da9b      	bge.n	800be56 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800bf1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d059      	beq.n	800bfd8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800bf24:	4b88      	ldr	r3, [pc, #544]	@ (800c148 <tcp_receive+0xb04>)
 800bf26:	881b      	ldrh	r3, [r3, #0]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	4b88      	ldr	r3, [pc, #544]	@ (800c14c <tcp_receive+0xb08>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	441a      	add	r2, r3
 800bf30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	1ad3      	subs	r3, r2, r3
            if (next &&
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	dd4d      	ble.n	800bfd8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800bf3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	4b81      	ldr	r3, [pc, #516]	@ (800c14c <tcp_receive+0xb08>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	4b80      	ldr	r3, [pc, #512]	@ (800c150 <tcp_receive+0xb0c>)
 800bf50:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bf52:	4b7f      	ldr	r3, [pc, #508]	@ (800c150 <tcp_receive+0xb0c>)
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	899b      	ldrh	r3, [r3, #12]
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fa fe90 	bl	8006c80 <lwip_htons>
 800bf60:	4603      	mov	r3, r0
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	f003 0302 	and.w	r3, r3, #2
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d005      	beq.n	800bf78 <tcp_receive+0x934>
                inseg.len -= 1;
 800bf6c:	4b78      	ldr	r3, [pc, #480]	@ (800c150 <tcp_receive+0xb0c>)
 800bf6e:	891b      	ldrh	r3, [r3, #8]
 800bf70:	3b01      	subs	r3, #1
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	4b76      	ldr	r3, [pc, #472]	@ (800c150 <tcp_receive+0xb0c>)
 800bf76:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bf78:	4b75      	ldr	r3, [pc, #468]	@ (800c150 <tcp_receive+0xb0c>)
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	4a74      	ldr	r2, [pc, #464]	@ (800c150 <tcp_receive+0xb0c>)
 800bf7e:	8912      	ldrh	r2, [r2, #8]
 800bf80:	4611      	mov	r1, r2
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fc f854 	bl	8008030 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bf88:	4b71      	ldr	r3, [pc, #452]	@ (800c150 <tcp_receive+0xb0c>)
 800bf8a:	891c      	ldrh	r4, [r3, #8]
 800bf8c:	4b70      	ldr	r3, [pc, #448]	@ (800c150 <tcp_receive+0xb0c>)
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	899b      	ldrh	r3, [r3, #12]
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7fa fe73 	bl	8006c80 <lwip_htons>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	f003 0303 	and.w	r3, r3, #3
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <tcp_receive+0x966>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e000      	b.n	800bfac <tcp_receive+0x968>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	4423      	add	r3, r4
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	4b65      	ldr	r3, [pc, #404]	@ (800c148 <tcp_receive+0xb04>)
 800bfb2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bfb4:	4b64      	ldr	r3, [pc, #400]	@ (800c148 <tcp_receive+0xb04>)
 800bfb6:	881b      	ldrh	r3, [r3, #0]
 800bfb8:	461a      	mov	r2, r3
 800bfba:	4b64      	ldr	r3, [pc, #400]	@ (800c14c <tcp_receive+0xb08>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	441a      	add	r2, r3
 800bfc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d006      	beq.n	800bfd8 <tcp_receive+0x994>
 800bfca:	4b62      	ldr	r3, [pc, #392]	@ (800c154 <tcp_receive+0xb10>)
 800bfcc:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800bfd0:	4961      	ldr	r1, [pc, #388]	@ (800c158 <tcp_receive+0xb14>)
 800bfd2:	4862      	ldr	r0, [pc, #392]	@ (800c15c <tcp_receive+0xb18>)
 800bfd4:	f005 f854 	bl	8011080 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bfdc:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bfde:	4b5a      	ldr	r3, [pc, #360]	@ (800c148 <tcp_receive+0xb04>)
 800bfe0:	881b      	ldrh	r3, [r3, #0]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	4b59      	ldr	r3, [pc, #356]	@ (800c14c <tcp_receive+0xb08>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	441a      	add	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800bff2:	4b55      	ldr	r3, [pc, #340]	@ (800c148 <tcp_receive+0xb04>)
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d206      	bcs.n	800c008 <tcp_receive+0x9c4>
 800bffa:	4b56      	ldr	r3, [pc, #344]	@ (800c154 <tcp_receive+0xb10>)
 800bffc:	f240 6207 	movw	r2, #1543	@ 0x607
 800c000:	4957      	ldr	r1, [pc, #348]	@ (800c160 <tcp_receive+0xb1c>)
 800c002:	4856      	ldr	r0, [pc, #344]	@ (800c15c <tcp_receive+0xb18>)
 800c004:	f005 f83c 	bl	8011080 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c00c:	4b4e      	ldr	r3, [pc, #312]	@ (800c148 <tcp_receive+0xb04>)
 800c00e:	881b      	ldrh	r3, [r3, #0]
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	b29a      	uxth	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7fc ffc5 	bl	8008fa8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c01e:	4b4c      	ldr	r3, [pc, #304]	@ (800c150 <tcp_receive+0xb0c>)
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	891b      	ldrh	r3, [r3, #8]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d006      	beq.n	800c036 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c028:	4b49      	ldr	r3, [pc, #292]	@ (800c150 <tcp_receive+0xb0c>)
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	4a4d      	ldr	r2, [pc, #308]	@ (800c164 <tcp_receive+0xb20>)
 800c02e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c030:	4b47      	ldr	r3, [pc, #284]	@ (800c150 <tcp_receive+0xb0c>)
 800c032:	2200      	movs	r2, #0
 800c034:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c036:	4b46      	ldr	r3, [pc, #280]	@ (800c150 <tcp_receive+0xb0c>)
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	899b      	ldrh	r3, [r3, #12]
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fa fe1e 	bl	8006c80 <lwip_htons>
 800c044:	4603      	mov	r3, r0
 800c046:	b2db      	uxtb	r3, r3
 800c048:	f003 0301 	and.w	r3, r3, #1
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f000 80b8 	beq.w	800c1c2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c052:	4b45      	ldr	r3, [pc, #276]	@ (800c168 <tcp_receive+0xb24>)
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	f043 0320 	orr.w	r3, r3, #32
 800c05a:	b2da      	uxtb	r2, r3
 800c05c:	4b42      	ldr	r3, [pc, #264]	@ (800c168 <tcp_receive+0xb24>)
 800c05e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c060:	e0af      	b.n	800c1c2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c066:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	4a36      	ldr	r2, [pc, #216]	@ (800c14c <tcp_receive+0xb08>)
 800c072:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	891b      	ldrh	r3, [r3, #8]
 800c078:	461c      	mov	r4, r3
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	899b      	ldrh	r3, [r3, #12]
 800c080:	b29b      	uxth	r3, r3
 800c082:	4618      	mov	r0, r3
 800c084:	f7fa fdfc 	bl	8006c80 <lwip_htons>
 800c088:	4603      	mov	r3, r0
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	f003 0303 	and.w	r3, r3, #3
 800c090:	2b00      	cmp	r3, #0
 800c092:	d001      	beq.n	800c098 <tcp_receive+0xa54>
 800c094:	2301      	movs	r3, #1
 800c096:	e000      	b.n	800c09a <tcp_receive+0xa56>
 800c098:	2300      	movs	r3, #0
 800c09a:	191a      	adds	r2, r3, r4
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a0:	441a      	add	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0aa:	461c      	mov	r4, r3
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	891b      	ldrh	r3, [r3, #8]
 800c0b0:	461d      	mov	r5, r3
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	899b      	ldrh	r3, [r3, #12]
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fa fde0 	bl	8006c80 <lwip_htons>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	f003 0303 	and.w	r3, r3, #3
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <tcp_receive+0xa8c>
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e000      	b.n	800c0d2 <tcp_receive+0xa8e>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	442b      	add	r3, r5
 800c0d4:	429c      	cmp	r4, r3
 800c0d6:	d206      	bcs.n	800c0e6 <tcp_receive+0xaa2>
 800c0d8:	4b1e      	ldr	r3, [pc, #120]	@ (800c154 <tcp_receive+0xb10>)
 800c0da:	f240 622b 	movw	r2, #1579	@ 0x62b
 800c0de:	4923      	ldr	r1, [pc, #140]	@ (800c16c <tcp_receive+0xb28>)
 800c0e0:	481e      	ldr	r0, [pc, #120]	@ (800c15c <tcp_receive+0xb18>)
 800c0e2:	f004 ffcd 	bl	8011080 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	891b      	ldrh	r3, [r3, #8]
 800c0ea:	461c      	mov	r4, r3
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	899b      	ldrh	r3, [r3, #12]
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7fa fdc3 	bl	8006c80 <lwip_htons>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	f003 0303 	and.w	r3, r3, #3
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <tcp_receive+0xac6>
 800c106:	2301      	movs	r3, #1
 800c108:	e000      	b.n	800c10c <tcp_receive+0xac8>
 800c10a:	2300      	movs	r3, #0
 800c10c:	1919      	adds	r1, r3, r4
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c112:	b28b      	uxth	r3, r1
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	b29a      	uxth	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f7fc ff43 	bl	8008fa8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	891b      	ldrh	r3, [r3, #8]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d028      	beq.n	800c17e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c12c:	4b0d      	ldr	r3, [pc, #52]	@ (800c164 <tcp_receive+0xb20>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d01d      	beq.n	800c170 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c134:	4b0b      	ldr	r3, [pc, #44]	@ (800c164 <tcp_receive+0xb20>)
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	4619      	mov	r1, r3
 800c13e:	4610      	mov	r0, r2
 800c140:	f7fc f9be 	bl	80084c0 <pbuf_cat>
 800c144:	e018      	b.n	800c178 <tcp_receive+0xb34>
 800c146:	bf00      	nop
 800c148:	20008846 	.word	0x20008846
 800c14c:	2000883c 	.word	0x2000883c
 800c150:	2000881c 	.word	0x2000881c
 800c154:	080134d0 	.word	0x080134d0
 800c158:	080138b0 	.word	0x080138b0
 800c15c:	0801351c 	.word	0x0801351c
 800c160:	080138ec 	.word	0x080138ec
 800c164:	2000884c 	.word	0x2000884c
 800c168:	20008849 	.word	0x20008849
 800c16c:	0801390c 	.word	0x0801390c
            } else {
              recv_data = cseg->p;
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	4a70      	ldr	r2, [pc, #448]	@ (800c338 <tcp_receive+0xcf4>)
 800c176:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	2200      	movs	r2, #0
 800c17c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	899b      	ldrh	r3, [r3, #12]
 800c184:	b29b      	uxth	r3, r3
 800c186:	4618      	mov	r0, r3
 800c188:	f7fa fd7a 	bl	8006c80 <lwip_htons>
 800c18c:	4603      	mov	r3, r0
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	f003 0301 	and.w	r3, r3, #1
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00d      	beq.n	800c1b4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c198:	4b68      	ldr	r3, [pc, #416]	@ (800c33c <tcp_receive+0xcf8>)
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	f043 0320 	orr.w	r3, r3, #32
 800c1a0:	b2da      	uxtb	r2, r3
 800c1a2:	4b66      	ldr	r3, [pc, #408]	@ (800c33c <tcp_receive+0xcf8>)
 800c1a4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	7d1b      	ldrb	r3, [r3, #20]
 800c1aa:	2b04      	cmp	r3, #4
 800c1ac:	d102      	bne.n	800c1b4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2207      	movs	r2, #7
 800c1b2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800c1bc:	68b8      	ldr	r0, [r7, #8]
 800c1be:	f7fd fbd4 	bl	800996a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d008      	beq.n	800c1dc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	f43f af43 	beq.w	800c062 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	8b5b      	ldrh	r3, [r3, #26]
 800c1e0:	f003 0301 	and.w	r3, r3, #1
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00e      	beq.n	800c206 <tcp_receive+0xbc2>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	8b5b      	ldrh	r3, [r3, #26]
 800c1ec:	f023 0301 	bic.w	r3, r3, #1
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	835a      	strh	r2, [r3, #26]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	8b5b      	ldrh	r3, [r3, #26]
 800c1fa:	f043 0302 	orr.w	r3, r3, #2
 800c1fe:	b29a      	uxth	r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c204:	e187      	b.n	800c516 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	8b5b      	ldrh	r3, [r3, #26]
 800c20a:	f043 0301 	orr.w	r3, r3, #1
 800c20e:	b29a      	uxth	r2, r3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c214:	e17f      	b.n	800c516 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d106      	bne.n	800c22c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c21e:	4848      	ldr	r0, [pc, #288]	@ (800c340 <tcp_receive+0xcfc>)
 800c220:	f7fd fbbc 	bl	800999c <tcp_seg_copy>
 800c224:	4602      	mov	r2, r0
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	675a      	str	r2, [r3, #116]	@ 0x74
 800c22a:	e16c      	b.n	800c506 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c22c:	2300      	movs	r3, #0
 800c22e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c234:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c236:	e156      	b.n	800c4e6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800c238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	685a      	ldr	r2, [r3, #4]
 800c23e:	4b41      	ldr	r3, [pc, #260]	@ (800c344 <tcp_receive+0xd00>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	429a      	cmp	r2, r3
 800c244:	d11d      	bne.n	800c282 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c246:	4b3e      	ldr	r3, [pc, #248]	@ (800c340 <tcp_receive+0xcfc>)
 800c248:	891a      	ldrh	r2, [r3, #8]
 800c24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c24c:	891b      	ldrh	r3, [r3, #8]
 800c24e:	429a      	cmp	r2, r3
 800c250:	f240 814e 	bls.w	800c4f0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c254:	483a      	ldr	r0, [pc, #232]	@ (800c340 <tcp_receive+0xcfc>)
 800c256:	f7fd fba1 	bl	800999c <tcp_seg_copy>
 800c25a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	f000 8148 	beq.w	800c4f4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800c264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c266:	2b00      	cmp	r3, #0
 800c268:	d003      	beq.n	800c272 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800c26a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c26c:	697a      	ldr	r2, [r7, #20]
 800c26e:	601a      	str	r2, [r3, #0]
 800c270:	e002      	b.n	800c278 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	697a      	ldr	r2, [r7, #20]
 800c276:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c278:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c27a:	6978      	ldr	r0, [r7, #20]
 800c27c:	f7ff f8de 	bl	800b43c <tcp_oos_insert_segment>
                }
                break;
 800c280:	e138      	b.n	800c4f4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c284:	2b00      	cmp	r3, #0
 800c286:	d117      	bne.n	800c2b8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c288:	4b2e      	ldr	r3, [pc, #184]	@ (800c344 <tcp_receive+0xd00>)
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	2b00      	cmp	r3, #0
 800c296:	da57      	bge.n	800c348 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c298:	4829      	ldr	r0, [pc, #164]	@ (800c340 <tcp_receive+0xcfc>)
 800c29a:	f7fd fb7f 	bl	800999c <tcp_seg_copy>
 800c29e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f000 8128 	beq.w	800c4f8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	69ba      	ldr	r2, [r7, #24]
 800c2ac:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c2ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c2b0:	69b8      	ldr	r0, [r7, #24]
 800c2b2:	f7ff f8c3 	bl	800b43c <tcp_oos_insert_segment>
                  }
                  break;
 800c2b6:	e11f      	b.n	800c4f8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c2b8:	4b22      	ldr	r3, [pc, #136]	@ (800c344 <tcp_receive+0xd00>)
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	1ad3      	subs	r3, r2, r3
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	db3e      	blt.n	800c348 <tcp_receive+0xd04>
 800c2ca:	4b1e      	ldr	r3, [pc, #120]	@ (800c344 <tcp_receive+0xd00>)
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	dc35      	bgt.n	800c348 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c2dc:	4818      	ldr	r0, [pc, #96]	@ (800c340 <tcp_receive+0xcfc>)
 800c2de:	f7fd fb5d 	bl	800999c <tcp_seg_copy>
 800c2e2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f000 8108 	beq.w	800c4fc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c2ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2f4:	8912      	ldrh	r2, [r2, #8]
 800c2f6:	441a      	add	r2, r3
 800c2f8:	4b12      	ldr	r3, [pc, #72]	@ (800c344 <tcp_receive+0xd00>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	1ad3      	subs	r3, r2, r3
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	dd12      	ble.n	800c328 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c302:	4b10      	ldr	r3, [pc, #64]	@ (800c344 <tcp_receive+0xd00>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	b29a      	uxth	r2, r3
 800c308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	b29b      	uxth	r3, r3
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	b29a      	uxth	r2, r3
 800c314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c316:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c31e:	891b      	ldrh	r3, [r3, #8]
 800c320:	4619      	mov	r1, r3
 800c322:	4610      	mov	r0, r2
 800c324:	f7fb fe84 	bl	8008030 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c32a:	69fa      	ldr	r2, [r7, #28]
 800c32c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c32e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c330:	69f8      	ldr	r0, [r7, #28]
 800c332:	f7ff f883 	bl	800b43c <tcp_oos_insert_segment>
                  }
                  break;
 800c336:	e0e1      	b.n	800c4fc <tcp_receive+0xeb8>
 800c338:	2000884c 	.word	0x2000884c
 800c33c:	20008849 	.word	0x20008849
 800c340:	2000881c 	.word	0x2000881c
 800c344:	2000883c 	.word	0x2000883c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c34a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	f040 80c5 	bne.w	800c4e0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c356:	4b7f      	ldr	r3, [pc, #508]	@ (800c554 <tcp_receive+0xf10>)
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c362:	2b00      	cmp	r3, #0
 800c364:	f340 80bc 	ble.w	800c4e0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	899b      	ldrh	r3, [r3, #12]
 800c36e:	b29b      	uxth	r3, r3
 800c370:	4618      	mov	r0, r3
 800c372:	f7fa fc85 	bl	8006c80 <lwip_htons>
 800c376:	4603      	mov	r3, r0
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	f003 0301 	and.w	r3, r3, #1
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f040 80be 	bne.w	800c500 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c384:	4874      	ldr	r0, [pc, #464]	@ (800c558 <tcp_receive+0xf14>)
 800c386:	f7fd fb09 	bl	800999c <tcp_seg_copy>
 800c38a:	4602      	mov	r2, r0
 800c38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c38e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	f000 80b5 	beq.w	800c504 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3a2:	8912      	ldrh	r2, [r2, #8]
 800c3a4:	441a      	add	r2, r3
 800c3a6:	4b6b      	ldr	r3, [pc, #428]	@ (800c554 <tcp_receive+0xf10>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	1ad3      	subs	r3, r2, r3
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	dd12      	ble.n	800c3d6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c3b0:	4b68      	ldr	r3, [pc, #416]	@ (800c554 <tcp_receive+0xf10>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	b29a      	uxth	r2, r3
 800c3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	1ad3      	subs	r3, r2, r3
 800c3c0:	b29a      	uxth	r2, r3
 800c3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3c4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3c8:	685a      	ldr	r2, [r3, #4]
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3cc:	891b      	ldrh	r3, [r3, #8]
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	f7fb fe2d 	bl	8008030 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c3d6:	4b61      	ldr	r3, [pc, #388]	@ (800c55c <tcp_receive+0xf18>)
 800c3d8:	881b      	ldrh	r3, [r3, #0]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	4b5d      	ldr	r3, [pc, #372]	@ (800c554 <tcp_receive+0xf10>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	441a      	add	r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3e6:	6879      	ldr	r1, [r7, #4]
 800c3e8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c3ea:	440b      	add	r3, r1
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f340 8088 	ble.w	800c504 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	899b      	ldrh	r3, [r3, #12]
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fa fc3e 	bl	8006c80 <lwip_htons>
 800c404:	4603      	mov	r3, r0
 800c406:	b2db      	uxtb	r3, r3
 800c408:	f003 0301 	and.w	r3, r3, #1
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d021      	beq.n	800c454 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	899b      	ldrh	r3, [r3, #12]
 800c418:	b29b      	uxth	r3, r3
 800c41a:	b21b      	sxth	r3, r3
 800c41c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c420:	b21c      	sxth	r4, r3
 800c422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	899b      	ldrh	r3, [r3, #12]
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fa fc27 	bl	8006c80 <lwip_htons>
 800c432:	4603      	mov	r3, r0
 800c434:	b2db      	uxtb	r3, r3
 800c436:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fa fc1f 	bl	8006c80 <lwip_htons>
 800c442:	4603      	mov	r3, r0
 800c444:	b21b      	sxth	r3, r3
 800c446:	4323      	orrs	r3, r4
 800c448:	b21a      	sxth	r2, r3
 800c44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	b292      	uxth	r2, r2
 800c452:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c458:	b29a      	uxth	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c45e:	4413      	add	r3, r2
 800c460:	b299      	uxth	r1, r3
 800c462:	4b3c      	ldr	r3, [pc, #240]	@ (800c554 <tcp_receive+0xf10>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	b29a      	uxth	r2, r3
 800c468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	1a8a      	subs	r2, r1, r2
 800c46e:	b292      	uxth	r2, r2
 800c470:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	685a      	ldr	r2, [r3, #4]
 800c478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	891b      	ldrh	r3, [r3, #8]
 800c47e:	4619      	mov	r1, r3
 800c480:	4610      	mov	r0, r2
 800c482:	f7fb fdd5 	bl	8008030 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	891c      	ldrh	r4, [r3, #8]
 800c48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	899b      	ldrh	r3, [r3, #12]
 800c494:	b29b      	uxth	r3, r3
 800c496:	4618      	mov	r0, r3
 800c498:	f7fa fbf2 	bl	8006c80 <lwip_htons>
 800c49c:	4603      	mov	r3, r0
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	f003 0303 	and.w	r3, r3, #3
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d001      	beq.n	800c4ac <tcp_receive+0xe68>
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	e000      	b.n	800c4ae <tcp_receive+0xe6a>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	4423      	add	r3, r4
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	4b2a      	ldr	r3, [pc, #168]	@ (800c55c <tcp_receive+0xf18>)
 800c4b4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c4b6:	4b29      	ldr	r3, [pc, #164]	@ (800c55c <tcp_receive+0xf18>)
 800c4b8:	881b      	ldrh	r3, [r3, #0]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	4b25      	ldr	r3, [pc, #148]	@ (800c554 <tcp_receive+0xf10>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	441a      	add	r2, r3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c6:	6879      	ldr	r1, [r7, #4]
 800c4c8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c4ca:	440b      	add	r3, r1
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d019      	beq.n	800c504 <tcp_receive+0xec0>
 800c4d0:	4b23      	ldr	r3, [pc, #140]	@ (800c560 <tcp_receive+0xf1c>)
 800c4d2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800c4d6:	4923      	ldr	r1, [pc, #140]	@ (800c564 <tcp_receive+0xf20>)
 800c4d8:	4823      	ldr	r0, [pc, #140]	@ (800c568 <tcp_receive+0xf24>)
 800c4da:	f004 fdd1 	bl	8011080 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c4de:	e011      	b.n	800c504 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f47f aea5 	bne.w	800c238 <tcp_receive+0xbf4>
 800c4ee:	e00a      	b.n	800c506 <tcp_receive+0xec2>
                break;
 800c4f0:	bf00      	nop
 800c4f2:	e008      	b.n	800c506 <tcp_receive+0xec2>
                break;
 800c4f4:	bf00      	nop
 800c4f6:	e006      	b.n	800c506 <tcp_receive+0xec2>
                  break;
 800c4f8:	bf00      	nop
 800c4fa:	e004      	b.n	800c506 <tcp_receive+0xec2>
                  break;
 800c4fc:	bf00      	nop
 800c4fe:	e002      	b.n	800c506 <tcp_receive+0xec2>
                  break;
 800c500:	bf00      	nop
 800c502:	e000      	b.n	800c506 <tcp_receive+0xec2>
                break;
 800c504:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f001 fa30 	bl	800d96c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c50c:	e003      	b.n	800c516 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f001 fa2c 	bl	800d96c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c514:	e01a      	b.n	800c54c <tcp_receive+0xf08>
 800c516:	e019      	b.n	800c54c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c518:	4b0e      	ldr	r3, [pc, #56]	@ (800c554 <tcp_receive+0xf10>)
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	2b00      	cmp	r3, #0
 800c524:	db0a      	blt.n	800c53c <tcp_receive+0xef8>
 800c526:	4b0b      	ldr	r3, [pc, #44]	@ (800c554 <tcp_receive+0xf10>)
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c52e:	6879      	ldr	r1, [r7, #4]
 800c530:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c532:	440b      	add	r3, r1
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	3301      	adds	r3, #1
 800c538:	2b00      	cmp	r3, #0
 800c53a:	dd07      	ble.n	800c54c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	8b5b      	ldrh	r3, [r3, #26]
 800c540:	f043 0302 	orr.w	r3, r3, #2
 800c544:	b29a      	uxth	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c54a:	e7ff      	b.n	800c54c <tcp_receive+0xf08>
 800c54c:	bf00      	nop
 800c54e:	3750      	adds	r7, #80	@ 0x50
 800c550:	46bd      	mov	sp, r7
 800c552:	bdb0      	pop	{r4, r5, r7, pc}
 800c554:	2000883c 	.word	0x2000883c
 800c558:	2000881c 	.word	0x2000881c
 800c55c:	20008846 	.word	0x20008846
 800c560:	080134d0 	.word	0x080134d0
 800c564:	08013878 	.word	0x08013878
 800c568:	0801351c 	.word	0x0801351c

0800c56c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c572:	4b15      	ldr	r3, [pc, #84]	@ (800c5c8 <tcp_get_next_optbyte+0x5c>)
 800c574:	881b      	ldrh	r3, [r3, #0]
 800c576:	1c5a      	adds	r2, r3, #1
 800c578:	b291      	uxth	r1, r2
 800c57a:	4a13      	ldr	r2, [pc, #76]	@ (800c5c8 <tcp_get_next_optbyte+0x5c>)
 800c57c:	8011      	strh	r1, [r2, #0]
 800c57e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c580:	4b12      	ldr	r3, [pc, #72]	@ (800c5cc <tcp_get_next_optbyte+0x60>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d004      	beq.n	800c592 <tcp_get_next_optbyte+0x26>
 800c588:	4b11      	ldr	r3, [pc, #68]	@ (800c5d0 <tcp_get_next_optbyte+0x64>)
 800c58a:	881b      	ldrh	r3, [r3, #0]
 800c58c:	88fa      	ldrh	r2, [r7, #6]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d208      	bcs.n	800c5a4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c592:	4b10      	ldr	r3, [pc, #64]	@ (800c5d4 <tcp_get_next_optbyte+0x68>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	3314      	adds	r3, #20
 800c598:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c59a:	88fb      	ldrh	r3, [r7, #6]
 800c59c:	683a      	ldr	r2, [r7, #0]
 800c59e:	4413      	add	r3, r2
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	e00b      	b.n	800c5bc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c5a4:	88fb      	ldrh	r3, [r7, #6]
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	4b09      	ldr	r3, [pc, #36]	@ (800c5d0 <tcp_get_next_optbyte+0x64>)
 800c5aa:	881b      	ldrh	r3, [r3, #0]
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	1ad3      	subs	r3, r2, r3
 800c5b0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c5b2:	4b06      	ldr	r3, [pc, #24]	@ (800c5cc <tcp_get_next_optbyte+0x60>)
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	797b      	ldrb	r3, [r7, #5]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr
 800c5c8:	20008838 	.word	0x20008838
 800c5cc:	20008834 	.word	0x20008834
 800c5d0:	20008832 	.word	0x20008832
 800c5d4:	2000882c 	.word	0x2000882c

0800c5d8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d106      	bne.n	800c5f4 <tcp_parseopt+0x1c>
 800c5e6:	4b32      	ldr	r3, [pc, #200]	@ (800c6b0 <tcp_parseopt+0xd8>)
 800c5e8:	f240 727d 	movw	r2, #1917	@ 0x77d
 800c5ec:	4931      	ldr	r1, [pc, #196]	@ (800c6b4 <tcp_parseopt+0xdc>)
 800c5ee:	4832      	ldr	r0, [pc, #200]	@ (800c6b8 <tcp_parseopt+0xe0>)
 800c5f0:	f004 fd46 	bl	8011080 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c5f4:	4b31      	ldr	r3, [pc, #196]	@ (800c6bc <tcp_parseopt+0xe4>)
 800c5f6:	881b      	ldrh	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d056      	beq.n	800c6aa <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c5fc:	4b30      	ldr	r3, [pc, #192]	@ (800c6c0 <tcp_parseopt+0xe8>)
 800c5fe:	2200      	movs	r2, #0
 800c600:	801a      	strh	r2, [r3, #0]
 800c602:	e046      	b.n	800c692 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800c604:	f7ff ffb2 	bl	800c56c <tcp_get_next_optbyte>
 800c608:	4603      	mov	r3, r0
 800c60a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c60c:	7bfb      	ldrb	r3, [r7, #15]
 800c60e:	2b02      	cmp	r3, #2
 800c610:	d006      	beq.n	800c620 <tcp_parseopt+0x48>
 800c612:	2b02      	cmp	r3, #2
 800c614:	dc2a      	bgt.n	800c66c <tcp_parseopt+0x94>
 800c616:	2b00      	cmp	r3, #0
 800c618:	d042      	beq.n	800c6a0 <tcp_parseopt+0xc8>
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d038      	beq.n	800c690 <tcp_parseopt+0xb8>
 800c61e:	e025      	b.n	800c66c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c620:	f7ff ffa4 	bl	800c56c <tcp_get_next_optbyte>
 800c624:	4603      	mov	r3, r0
 800c626:	2b04      	cmp	r3, #4
 800c628:	d13c      	bne.n	800c6a4 <tcp_parseopt+0xcc>
 800c62a:	4b25      	ldr	r3, [pc, #148]	@ (800c6c0 <tcp_parseopt+0xe8>)
 800c62c:	881b      	ldrh	r3, [r3, #0]
 800c62e:	3301      	adds	r3, #1
 800c630:	4a22      	ldr	r2, [pc, #136]	@ (800c6bc <tcp_parseopt+0xe4>)
 800c632:	8812      	ldrh	r2, [r2, #0]
 800c634:	4293      	cmp	r3, r2
 800c636:	da35      	bge.n	800c6a4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c638:	f7ff ff98 	bl	800c56c <tcp_get_next_optbyte>
 800c63c:	4603      	mov	r3, r0
 800c63e:	021b      	lsls	r3, r3, #8
 800c640:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c642:	f7ff ff93 	bl	800c56c <tcp_get_next_optbyte>
 800c646:	4603      	mov	r3, r0
 800c648:	461a      	mov	r2, r3
 800c64a:	89bb      	ldrh	r3, [r7, #12]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c650:	89bb      	ldrh	r3, [r7, #12]
 800c652:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c656:	d804      	bhi.n	800c662 <tcp_parseopt+0x8a>
 800c658:	89bb      	ldrh	r3, [r7, #12]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d001      	beq.n	800c662 <tcp_parseopt+0x8a>
 800c65e:	89ba      	ldrh	r2, [r7, #12]
 800c660:	e001      	b.n	800c666 <tcp_parseopt+0x8e>
 800c662:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800c66a:	e012      	b.n	800c692 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c66c:	f7ff ff7e 	bl	800c56c <tcp_get_next_optbyte>
 800c670:	4603      	mov	r3, r0
 800c672:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c674:	7afb      	ldrb	r3, [r7, #11]
 800c676:	2b01      	cmp	r3, #1
 800c678:	d916      	bls.n	800c6a8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c67a:	7afb      	ldrb	r3, [r7, #11]
 800c67c:	b29a      	uxth	r2, r3
 800c67e:	4b10      	ldr	r3, [pc, #64]	@ (800c6c0 <tcp_parseopt+0xe8>)
 800c680:	881b      	ldrh	r3, [r3, #0]
 800c682:	4413      	add	r3, r2
 800c684:	b29b      	uxth	r3, r3
 800c686:	3b02      	subs	r3, #2
 800c688:	b29a      	uxth	r2, r3
 800c68a:	4b0d      	ldr	r3, [pc, #52]	@ (800c6c0 <tcp_parseopt+0xe8>)
 800c68c:	801a      	strh	r2, [r3, #0]
 800c68e:	e000      	b.n	800c692 <tcp_parseopt+0xba>
          break;
 800c690:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c692:	4b0b      	ldr	r3, [pc, #44]	@ (800c6c0 <tcp_parseopt+0xe8>)
 800c694:	881a      	ldrh	r2, [r3, #0]
 800c696:	4b09      	ldr	r3, [pc, #36]	@ (800c6bc <tcp_parseopt+0xe4>)
 800c698:	881b      	ldrh	r3, [r3, #0]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d3b2      	bcc.n	800c604 <tcp_parseopt+0x2c>
 800c69e:	e004      	b.n	800c6aa <tcp_parseopt+0xd2>
          return;
 800c6a0:	bf00      	nop
 800c6a2:	e002      	b.n	800c6aa <tcp_parseopt+0xd2>
            return;
 800c6a4:	bf00      	nop
 800c6a6:	e000      	b.n	800c6aa <tcp_parseopt+0xd2>
            return;
 800c6a8:	bf00      	nop
      }
    }
  }
}
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	080134d0 	.word	0x080134d0
 800c6b4:	08013934 	.word	0x08013934
 800c6b8:	0801351c 	.word	0x0801351c
 800c6bc:	20008830 	.word	0x20008830
 800c6c0:	20008838 	.word	0x20008838

0800c6c4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c6c8:	4b05      	ldr	r3, [pc, #20]	@ (800c6e0 <tcp_trigger_input_pcb_close+0x1c>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	f043 0310 	orr.w	r3, r3, #16
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	4b03      	ldr	r3, [pc, #12]	@ (800c6e0 <tcp_trigger_input_pcb_close+0x1c>)
 800c6d4:	701a      	strb	r2, [r3, #0]
}
 800c6d6:	bf00      	nop
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr
 800c6e0:	20008849 	.word	0x20008849

0800c6e4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d00a      	beq.n	800c70c <tcp_route+0x28>
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	7a1b      	ldrb	r3, [r3, #8]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d006      	beq.n	800c70c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	7a1b      	ldrb	r3, [r3, #8]
 800c702:	4618      	mov	r0, r3
 800c704:	f7fb faba 	bl	8007c7c <netif_get_by_index>
 800c708:	4603      	mov	r3, r0
 800c70a:	e003      	b.n	800c714 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f003 f9cb 	bl	800faa8 <ip4_route>
 800c712:	4603      	mov	r3, r0
  }
}
 800c714:	4618      	mov	r0, r3
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c71c:	b590      	push	{r4, r7, lr}
 800c71e:	b087      	sub	sp, #28
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	603b      	str	r3, [r7, #0]
 800c728:	4613      	mov	r3, r2
 800c72a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d105      	bne.n	800c73e <tcp_create_segment+0x22>
 800c732:	4b43      	ldr	r3, [pc, #268]	@ (800c840 <tcp_create_segment+0x124>)
 800c734:	22a3      	movs	r2, #163	@ 0xa3
 800c736:	4943      	ldr	r1, [pc, #268]	@ (800c844 <tcp_create_segment+0x128>)
 800c738:	4843      	ldr	r0, [pc, #268]	@ (800c848 <tcp_create_segment+0x12c>)
 800c73a:	f004 fca1 	bl	8011080 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d105      	bne.n	800c750 <tcp_create_segment+0x34>
 800c744:	4b3e      	ldr	r3, [pc, #248]	@ (800c840 <tcp_create_segment+0x124>)
 800c746:	22a4      	movs	r2, #164	@ 0xa4
 800c748:	4940      	ldr	r1, [pc, #256]	@ (800c84c <tcp_create_segment+0x130>)
 800c74a:	483f      	ldr	r0, [pc, #252]	@ (800c848 <tcp_create_segment+0x12c>)
 800c74c:	f004 fc98 	bl	8011080 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c750:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	b2db      	uxtb	r3, r3
 800c758:	f003 0304 	and.w	r3, r3, #4
 800c75c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c75e:	2003      	movs	r0, #3
 800c760:	f7fa ff06 	bl	8007570 <memp_malloc>
 800c764:	6138      	str	r0, [r7, #16]
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d104      	bne.n	800c776 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c76c:	68b8      	ldr	r0, [r7, #8]
 800c76e:	f7fb fde5 	bl	800833c <pbuf_free>
    return NULL;
 800c772:	2300      	movs	r3, #0
 800c774:	e060      	b.n	800c838 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800c77c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	2200      	movs	r2, #0
 800c782:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	68ba      	ldr	r2, [r7, #8]
 800c788:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	891a      	ldrh	r2, [r3, #8]
 800c78e:	7dfb      	ldrb	r3, [r7, #23]
 800c790:	b29b      	uxth	r3, r3
 800c792:	429a      	cmp	r2, r3
 800c794:	d205      	bcs.n	800c7a2 <tcp_create_segment+0x86>
 800c796:	4b2a      	ldr	r3, [pc, #168]	@ (800c840 <tcp_create_segment+0x124>)
 800c798:	22b0      	movs	r2, #176	@ 0xb0
 800c79a:	492d      	ldr	r1, [pc, #180]	@ (800c850 <tcp_create_segment+0x134>)
 800c79c:	482a      	ldr	r0, [pc, #168]	@ (800c848 <tcp_create_segment+0x12c>)
 800c79e:	f004 fc6f 	bl	8011080 <iprintf>
  seg->len = p->tot_len - optlen;
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	891a      	ldrh	r2, [r3, #8]
 800c7a6:	7dfb      	ldrb	r3, [r7, #23]
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	1ad3      	subs	r3, r2, r3
 800c7ac:	b29a      	uxth	r2, r3
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c7b2:	2114      	movs	r1, #20
 800c7b4:	68b8      	ldr	r0, [r7, #8]
 800c7b6:	f7fb fd2b 	bl	8008210 <pbuf_add_header>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d004      	beq.n	800c7ca <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c7c0:	6938      	ldr	r0, [r7, #16]
 800c7c2:	f7fd f8d2 	bl	800996a <tcp_seg_free>
    return NULL;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	e036      	b.n	800c838 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	685a      	ldr	r2, [r3, #4]
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	8ada      	ldrh	r2, [r3, #22]
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	68dc      	ldr	r4, [r3, #12]
 800c7dc:	4610      	mov	r0, r2
 800c7de:	f7fa fa4f 	bl	8006c80 <lwip_htons>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	8b1a      	ldrh	r2, [r3, #24]
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	68dc      	ldr	r4, [r3, #12]
 800c7ee:	4610      	mov	r0, r2
 800c7f0:	f7fa fa46 	bl	8006c80 <lwip_htons>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	68dc      	ldr	r4, [r3, #12]
 800c7fc:	6838      	ldr	r0, [r7, #0]
 800c7fe:	f7fa fa55 	bl	8006cac <lwip_htonl>
 800c802:	4603      	mov	r3, r0
 800c804:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c806:	7dfb      	ldrb	r3, [r7, #23]
 800c808:	089b      	lsrs	r3, r3, #2
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	3305      	adds	r3, #5
 800c80e:	b29b      	uxth	r3, r3
 800c810:	031b      	lsls	r3, r3, #12
 800c812:	b29a      	uxth	r2, r3
 800c814:	79fb      	ldrb	r3, [r7, #7]
 800c816:	b29b      	uxth	r3, r3
 800c818:	4313      	orrs	r3, r2
 800c81a:	b29a      	uxth	r2, r3
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	68dc      	ldr	r4, [r3, #12]
 800c820:	4610      	mov	r0, r2
 800c822:	f7fa fa2d 	bl	8006c80 <lwip_htons>
 800c826:	4603      	mov	r3, r0
 800c828:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	2200      	movs	r2, #0
 800c830:	749a      	strb	r2, [r3, #18]
 800c832:	2200      	movs	r2, #0
 800c834:	74da      	strb	r2, [r3, #19]
  return seg;
 800c836:	693b      	ldr	r3, [r7, #16]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	371c      	adds	r7, #28
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd90      	pop	{r4, r7, pc}
 800c840:	08013950 	.word	0x08013950
 800c844:	08013984 	.word	0x08013984
 800c848:	080139a4 	.word	0x080139a4
 800c84c:	080139cc 	.word	0x080139cc
 800c850:	080139f0 	.word	0x080139f0

0800c854 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c854:	b590      	push	{r4, r7, lr}
 800c856:	b08b      	sub	sp, #44	@ 0x2c
 800c858:	af02      	add	r7, sp, #8
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	460b      	mov	r3, r1
 800c85e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c860:	2300      	movs	r3, #0
 800c862:	61fb      	str	r3, [r7, #28]
 800c864:	2300      	movs	r3, #0
 800c866:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c868:	2300      	movs	r3, #0
 800c86a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d106      	bne.n	800c880 <tcp_split_unsent_seg+0x2c>
 800c872:	4b95      	ldr	r3, [pc, #596]	@ (800cac8 <tcp_split_unsent_seg+0x274>)
 800c874:	f240 324b 	movw	r2, #843	@ 0x34b
 800c878:	4994      	ldr	r1, [pc, #592]	@ (800cacc <tcp_split_unsent_seg+0x278>)
 800c87a:	4895      	ldr	r0, [pc, #596]	@ (800cad0 <tcp_split_unsent_seg+0x27c>)
 800c87c:	f004 fc00 	bl	8011080 <iprintf>

  useg = pcb->unsent;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c884:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d102      	bne.n	800c892 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c88c:	f04f 33ff 	mov.w	r3, #4294967295
 800c890:	e116      	b.n	800cac0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c892:	887b      	ldrh	r3, [r7, #2]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d109      	bne.n	800c8ac <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c898:	4b8b      	ldr	r3, [pc, #556]	@ (800cac8 <tcp_split_unsent_seg+0x274>)
 800c89a:	f240 3253 	movw	r2, #851	@ 0x353
 800c89e:	498d      	ldr	r1, [pc, #564]	@ (800cad4 <tcp_split_unsent_seg+0x280>)
 800c8a0:	488b      	ldr	r0, [pc, #556]	@ (800cad0 <tcp_split_unsent_seg+0x27c>)
 800c8a2:	f004 fbed 	bl	8011080 <iprintf>
    return ERR_VAL;
 800c8a6:	f06f 0305 	mvn.w	r3, #5
 800c8aa:	e109      	b.n	800cac0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	891b      	ldrh	r3, [r3, #8]
 800c8b0:	887a      	ldrh	r2, [r7, #2]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d301      	bcc.n	800c8ba <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	e102      	b.n	800cac0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c8be:	887a      	ldrh	r2, [r7, #2]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d906      	bls.n	800c8d2 <tcp_split_unsent_seg+0x7e>
 800c8c4:	4b80      	ldr	r3, [pc, #512]	@ (800cac8 <tcp_split_unsent_seg+0x274>)
 800c8c6:	f240 325b 	movw	r2, #859	@ 0x35b
 800c8ca:	4983      	ldr	r1, [pc, #524]	@ (800cad8 <tcp_split_unsent_seg+0x284>)
 800c8cc:	4880      	ldr	r0, [pc, #512]	@ (800cad0 <tcp_split_unsent_seg+0x27c>)
 800c8ce:	f004 fbd7 	bl	8011080 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	891b      	ldrh	r3, [r3, #8]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d106      	bne.n	800c8e8 <tcp_split_unsent_seg+0x94>
 800c8da:	4b7b      	ldr	r3, [pc, #492]	@ (800cac8 <tcp_split_unsent_seg+0x274>)
 800c8dc:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800c8e0:	497e      	ldr	r1, [pc, #504]	@ (800cadc <tcp_split_unsent_seg+0x288>)
 800c8e2:	487b      	ldr	r0, [pc, #492]	@ (800cad0 <tcp_split_unsent_seg+0x27c>)
 800c8e4:	f004 fbcc 	bl	8011080 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	7a9b      	ldrb	r3, [r3, #10]
 800c8ec:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c8ee:	7bfb      	ldrb	r3, [r7, #15]
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	f003 0304 	and.w	r3, r3, #4
 800c8f8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	891a      	ldrh	r2, [r3, #8]
 800c8fe:	887b      	ldrh	r3, [r7, #2]
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c904:	7bbb      	ldrb	r3, [r7, #14]
 800c906:	b29a      	uxth	r2, r3
 800c908:	89bb      	ldrh	r3, [r7, #12]
 800c90a:	4413      	add	r3, r2
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c912:	4619      	mov	r1, r3
 800c914:	2036      	movs	r0, #54	@ 0x36
 800c916:	f7fb fa2d 	bl	8007d74 <pbuf_alloc>
 800c91a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f000 80b7 	beq.w	800ca92 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	891a      	ldrh	r2, [r3, #8]
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	891b      	ldrh	r3, [r3, #8]
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	b29a      	uxth	r2, r3
 800c932:	887b      	ldrh	r3, [r7, #2]
 800c934:	4413      	add	r3, r2
 800c936:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	6858      	ldr	r0, [r3, #4]
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	685a      	ldr	r2, [r3, #4]
 800c940:	7bbb      	ldrb	r3, [r7, #14]
 800c942:	18d1      	adds	r1, r2, r3
 800c944:	897b      	ldrh	r3, [r7, #10]
 800c946:	89ba      	ldrh	r2, [r7, #12]
 800c948:	f7fb fef2 	bl	8008730 <pbuf_copy_partial>
 800c94c:	4603      	mov	r3, r0
 800c94e:	461a      	mov	r2, r3
 800c950:	89bb      	ldrh	r3, [r7, #12]
 800c952:	4293      	cmp	r3, r2
 800c954:	f040 809f 	bne.w	800ca96 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	899b      	ldrh	r3, [r3, #12]
 800c95e:	b29b      	uxth	r3, r3
 800c960:	4618      	mov	r0, r3
 800c962:	f7fa f98d 	bl	8006c80 <lwip_htons>
 800c966:	4603      	mov	r3, r0
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c96e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c970:	2300      	movs	r3, #0
 800c972:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c974:	7efb      	ldrb	r3, [r7, #27]
 800c976:	f003 0308 	and.w	r3, r3, #8
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d007      	beq.n	800c98e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c97e:	7efb      	ldrb	r3, [r7, #27]
 800c980:	f023 0308 	bic.w	r3, r3, #8
 800c984:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c986:	7ebb      	ldrb	r3, [r7, #26]
 800c988:	f043 0308 	orr.w	r3, r3, #8
 800c98c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c98e:	7efb      	ldrb	r3, [r7, #27]
 800c990:	f003 0301 	and.w	r3, r3, #1
 800c994:	2b00      	cmp	r3, #0
 800c996:	d007      	beq.n	800c9a8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c998:	7efb      	ldrb	r3, [r7, #27]
 800c99a:	f023 0301 	bic.w	r3, r3, #1
 800c99e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c9a0:	7ebb      	ldrb	r3, [r7, #26]
 800c9a2:	f043 0301 	orr.w	r3, r3, #1
 800c9a6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fa f97c 	bl	8006cac <lwip_htonl>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	887b      	ldrh	r3, [r7, #2]
 800c9b8:	18d1      	adds	r1, r2, r3
 800c9ba:	7eba      	ldrb	r2, [r7, #26]
 800c9bc:	7bfb      	ldrb	r3, [r7, #15]
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	6939      	ldr	r1, [r7, #16]
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f7ff fea9 	bl	800c71c <tcp_create_segment>
 800c9ca:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d063      	beq.n	800ca9a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fb fd38 	bl	800844c <pbuf_clen>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	461a      	mov	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c9e6:	1a9b      	subs	r3, r3, r2
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	6858      	ldr	r0, [r3, #4]
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	891a      	ldrh	r2, [r3, #8]
 800c9fa:	89bb      	ldrh	r3, [r7, #12]
 800c9fc:	1ad3      	subs	r3, r2, r3
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	4619      	mov	r1, r3
 800ca02:	f7fb fb15 	bl	8008030 <pbuf_realloc>
  useg->len -= remainder;
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	891a      	ldrh	r2, [r3, #8]
 800ca0a:	89bb      	ldrh	r3, [r7, #12]
 800ca0c:	1ad3      	subs	r3, r2, r3
 800ca0e:	b29a      	uxth	r2, r3
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	899b      	ldrh	r3, [r3, #12]
 800ca1a:	b29c      	uxth	r4, r3
 800ca1c:	7efb      	ldrb	r3, [r7, #27]
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fa f92d 	bl	8006c80 <lwip_htons>
 800ca26:	4603      	mov	r3, r0
 800ca28:	461a      	mov	r2, r3
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	68db      	ldr	r3, [r3, #12]
 800ca2e:	4322      	orrs	r2, r4
 800ca30:	b292      	uxth	r2, r2
 800ca32:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7fb fd07 	bl	800844c <pbuf_clen>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	461a      	mov	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ca48:	4413      	add	r3, r2
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7fb fcf8 	bl	800844c <pbuf_clen>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	461a      	mov	r2, r3
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ca66:	4413      	add	r3, r2
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	69fa      	ldr	r2, [r7, #28]
 800ca7c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d103      	bne.n	800ca8e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	e016      	b.n	800cac0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ca92:	bf00      	nop
 800ca94:	e002      	b.n	800ca9c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ca96:	bf00      	nop
 800ca98:	e000      	b.n	800ca9c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ca9a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ca9c:	69fb      	ldr	r3, [r7, #28]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d006      	beq.n	800cab0 <tcp_split_unsent_seg+0x25c>
 800caa2:	4b09      	ldr	r3, [pc, #36]	@ (800cac8 <tcp_split_unsent_seg+0x274>)
 800caa4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800caa8:	490d      	ldr	r1, [pc, #52]	@ (800cae0 <tcp_split_unsent_seg+0x28c>)
 800caaa:	4809      	ldr	r0, [pc, #36]	@ (800cad0 <tcp_split_unsent_seg+0x27c>)
 800caac:	f004 fae8 	bl	8011080 <iprintf>
  if (p != NULL) {
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d002      	beq.n	800cabc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cab6:	6938      	ldr	r0, [r7, #16]
 800cab8:	f7fb fc40 	bl	800833c <pbuf_free>
  }

  return ERR_MEM;
 800cabc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3724      	adds	r7, #36	@ 0x24
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd90      	pop	{r4, r7, pc}
 800cac8:	08013950 	.word	0x08013950
 800cacc:	08013ce4 	.word	0x08013ce4
 800cad0:	080139a4 	.word	0x080139a4
 800cad4:	08013d08 	.word	0x08013d08
 800cad8:	08013d2c 	.word	0x08013d2c
 800cadc:	08013d3c 	.word	0x08013d3c
 800cae0:	08013d4c 	.word	0x08013d4c

0800cae4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cae4:	b590      	push	{r4, r7, lr}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d106      	bne.n	800cb00 <tcp_send_fin+0x1c>
 800caf2:	4b21      	ldr	r3, [pc, #132]	@ (800cb78 <tcp_send_fin+0x94>)
 800caf4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800caf8:	4920      	ldr	r1, [pc, #128]	@ (800cb7c <tcp_send_fin+0x98>)
 800cafa:	4821      	ldr	r0, [pc, #132]	@ (800cb80 <tcp_send_fin+0x9c>)
 800cafc:	f004 fac0 	bl	8011080 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d02e      	beq.n	800cb66 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb0c:	60fb      	str	r3, [r7, #12]
 800cb0e:	e002      	b.n	800cb16 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1f8      	bne.n	800cb10 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	899b      	ldrh	r3, [r3, #12]
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fa f8aa 	bl	8006c80 <lwip_htons>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	f003 0307 	and.w	r3, r3, #7
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d116      	bne.n	800cb66 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	899b      	ldrh	r3, [r3, #12]
 800cb3e:	b29c      	uxth	r4, r3
 800cb40:	2001      	movs	r0, #1
 800cb42:	f7fa f89d 	bl	8006c80 <lwip_htons>
 800cb46:	4603      	mov	r3, r0
 800cb48:	461a      	mov	r2, r3
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	4322      	orrs	r2, r4
 800cb50:	b292      	uxth	r2, r2
 800cb52:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	8b5b      	ldrh	r3, [r3, #26]
 800cb58:	f043 0320 	orr.w	r3, r3, #32
 800cb5c:	b29a      	uxth	r2, r3
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cb62:	2300      	movs	r3, #0
 800cb64:	e004      	b.n	800cb70 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cb66:	2101      	movs	r1, #1
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 f80b 	bl	800cb84 <tcp_enqueue_flags>
 800cb6e:	4603      	mov	r3, r0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3714      	adds	r7, #20
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd90      	pop	{r4, r7, pc}
 800cb78:	08013950 	.word	0x08013950
 800cb7c:	08013d58 	.word	0x08013d58
 800cb80:	080139a4 	.word	0x080139a4

0800cb84 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08a      	sub	sp, #40	@ 0x28
 800cb88:	af02      	add	r7, sp, #8
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cb90:	2300      	movs	r3, #0
 800cb92:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cb94:	2300      	movs	r3, #0
 800cb96:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cb98:	78fb      	ldrb	r3, [r7, #3]
 800cb9a:	f003 0303 	and.w	r3, r3, #3
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d106      	bne.n	800cbb0 <tcp_enqueue_flags+0x2c>
 800cba2:	4b67      	ldr	r3, [pc, #412]	@ (800cd40 <tcp_enqueue_flags+0x1bc>)
 800cba4:	f240 4211 	movw	r2, #1041	@ 0x411
 800cba8:	4966      	ldr	r1, [pc, #408]	@ (800cd44 <tcp_enqueue_flags+0x1c0>)
 800cbaa:	4867      	ldr	r0, [pc, #412]	@ (800cd48 <tcp_enqueue_flags+0x1c4>)
 800cbac:	f004 fa68 	bl	8011080 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d106      	bne.n	800cbc4 <tcp_enqueue_flags+0x40>
 800cbb6:	4b62      	ldr	r3, [pc, #392]	@ (800cd40 <tcp_enqueue_flags+0x1bc>)
 800cbb8:	f240 4213 	movw	r2, #1043	@ 0x413
 800cbbc:	4963      	ldr	r1, [pc, #396]	@ (800cd4c <tcp_enqueue_flags+0x1c8>)
 800cbbe:	4862      	ldr	r0, [pc, #392]	@ (800cd48 <tcp_enqueue_flags+0x1c4>)
 800cbc0:	f004 fa5e 	bl	8011080 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cbc4:	78fb      	ldrb	r3, [r7, #3]
 800cbc6:	f003 0302 	and.w	r3, r3, #2
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d001      	beq.n	800cbd2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cbd2:	7ffb      	ldrb	r3, [r7, #31]
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	f003 0304 	and.w	r3, r3, #4
 800cbdc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cbde:	7dfb      	ldrb	r3, [r7, #23]
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	2036      	movs	r0, #54	@ 0x36
 800cbea:	f7fb f8c3 	bl	8007d74 <pbuf_alloc>
 800cbee:	6138      	str	r0, [r7, #16]
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d109      	bne.n	800cc0a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	8b5b      	ldrh	r3, [r3, #26]
 800cbfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cc04:	f04f 33ff 	mov.w	r3, #4294967295
 800cc08:	e095      	b.n	800cd36 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	895a      	ldrh	r2, [r3, #10]
 800cc0e:	7dfb      	ldrb	r3, [r7, #23]
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d206      	bcs.n	800cc24 <tcp_enqueue_flags+0xa0>
 800cc16:	4b4a      	ldr	r3, [pc, #296]	@ (800cd40 <tcp_enqueue_flags+0x1bc>)
 800cc18:	f240 4239 	movw	r2, #1081	@ 0x439
 800cc1c:	494c      	ldr	r1, [pc, #304]	@ (800cd50 <tcp_enqueue_flags+0x1cc>)
 800cc1e:	484a      	ldr	r0, [pc, #296]	@ (800cd48 <tcp_enqueue_flags+0x1c4>)
 800cc20:	f004 fa2e 	bl	8011080 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800cc28:	78fa      	ldrb	r2, [r7, #3]
 800cc2a:	7ffb      	ldrb	r3, [r7, #31]
 800cc2c:	9300      	str	r3, [sp, #0]
 800cc2e:	460b      	mov	r3, r1
 800cc30:	6939      	ldr	r1, [r7, #16]
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7ff fd72 	bl	800c71c <tcp_create_segment>
 800cc38:	60f8      	str	r0, [r7, #12]
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d109      	bne.n	800cc54 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	8b5b      	ldrh	r3, [r3, #26]
 800cc44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cc4e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc52:	e070      	b.n	800cd36 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	f003 0303 	and.w	r3, r3, #3
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d006      	beq.n	800cc6e <tcp_enqueue_flags+0xea>
 800cc60:	4b37      	ldr	r3, [pc, #220]	@ (800cd40 <tcp_enqueue_flags+0x1bc>)
 800cc62:	f240 4242 	movw	r2, #1090	@ 0x442
 800cc66:	493b      	ldr	r1, [pc, #236]	@ (800cd54 <tcp_enqueue_flags+0x1d0>)
 800cc68:	4837      	ldr	r0, [pc, #220]	@ (800cd48 <tcp_enqueue_flags+0x1c4>)
 800cc6a:	f004 fa09 	bl	8011080 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	891b      	ldrh	r3, [r3, #8]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d006      	beq.n	800cc84 <tcp_enqueue_flags+0x100>
 800cc76:	4b32      	ldr	r3, [pc, #200]	@ (800cd40 <tcp_enqueue_flags+0x1bc>)
 800cc78:	f240 4243 	movw	r2, #1091	@ 0x443
 800cc7c:	4936      	ldr	r1, [pc, #216]	@ (800cd58 <tcp_enqueue_flags+0x1d4>)
 800cc7e:	4832      	ldr	r0, [pc, #200]	@ (800cd48 <tcp_enqueue_flags+0x1c4>)
 800cc80:	f004 f9fe 	bl	8011080 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d103      	bne.n	800cc94 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	66da      	str	r2, [r3, #108]	@ 0x6c
 800cc92:	e00d      	b.n	800ccb0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc98:	61bb      	str	r3, [r7, #24]
 800cc9a:	e002      	b.n	800cca2 <tcp_enqueue_flags+0x11e>
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	61bb      	str	r3, [r7, #24]
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1f8      	bne.n	800cc9c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ccb8:	78fb      	ldrb	r3, [r7, #3]
 800ccba:	f003 0302 	and.w	r3, r3, #2
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d104      	bne.n	800cccc <tcp_enqueue_flags+0x148>
 800ccc2:	78fb      	ldrb	r3, [r7, #3]
 800ccc4:	f003 0301 	and.w	r3, r3, #1
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d004      	beq.n	800ccd6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccd0:	1c5a      	adds	r2, r3, #1
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ccd6:	78fb      	ldrb	r3, [r7, #3]
 800ccd8:	f003 0301 	and.w	r3, r3, #1
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d006      	beq.n	800ccee <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	8b5b      	ldrh	r3, [r3, #26]
 800cce4:	f043 0320 	orr.w	r3, r3, #32
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fb fbaa 	bl	800844c <pbuf_clen>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cd02:	4413      	add	r3, r2
 800cd04:	b29a      	uxth	r2, r3
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00e      	beq.n	800cd34 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d10a      	bne.n	800cd34 <tcp_enqueue_flags+0x1b0>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d106      	bne.n	800cd34 <tcp_enqueue_flags+0x1b0>
 800cd26:	4b06      	ldr	r3, [pc, #24]	@ (800cd40 <tcp_enqueue_flags+0x1bc>)
 800cd28:	f240 4265 	movw	r2, #1125	@ 0x465
 800cd2c:	490b      	ldr	r1, [pc, #44]	@ (800cd5c <tcp_enqueue_flags+0x1d8>)
 800cd2e:	4806      	ldr	r0, [pc, #24]	@ (800cd48 <tcp_enqueue_flags+0x1c4>)
 800cd30:	f004 f9a6 	bl	8011080 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3720      	adds	r7, #32
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	08013950 	.word	0x08013950
 800cd44:	08013d74 	.word	0x08013d74
 800cd48:	080139a4 	.word	0x080139a4
 800cd4c:	08013dcc 	.word	0x08013dcc
 800cd50:	08013dec 	.word	0x08013dec
 800cd54:	08013e28 	.word	0x08013e28
 800cd58:	08013e40 	.word	0x08013e40
 800cd5c:	08013e6c 	.word	0x08013e6c

0800cd60 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cd60:	b5b0      	push	{r4, r5, r7, lr}
 800cd62:	b08a      	sub	sp, #40	@ 0x28
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d106      	bne.n	800cd7c <tcp_output+0x1c>
 800cd6e:	4b8a      	ldr	r3, [pc, #552]	@ (800cf98 <tcp_output+0x238>)
 800cd70:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800cd74:	4989      	ldr	r1, [pc, #548]	@ (800cf9c <tcp_output+0x23c>)
 800cd76:	488a      	ldr	r0, [pc, #552]	@ (800cfa0 <tcp_output+0x240>)
 800cd78:	f004 f982 	bl	8011080 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	7d1b      	ldrb	r3, [r3, #20]
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d106      	bne.n	800cd92 <tcp_output+0x32>
 800cd84:	4b84      	ldr	r3, [pc, #528]	@ (800cf98 <tcp_output+0x238>)
 800cd86:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800cd8a:	4986      	ldr	r1, [pc, #536]	@ (800cfa4 <tcp_output+0x244>)
 800cd8c:	4884      	ldr	r0, [pc, #528]	@ (800cfa0 <tcp_output+0x240>)
 800cd8e:	f004 f977 	bl	8011080 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cd92:	4b85      	ldr	r3, [pc, #532]	@ (800cfa8 <tcp_output+0x248>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d101      	bne.n	800cda0 <tcp_output+0x40>
    return ERR_OK;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	e1ce      	b.n	800d13e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cdac:	4293      	cmp	r3, r2
 800cdae:	bf28      	it	cs
 800cdb0:	4613      	movcs	r3, r2
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10b      	bne.n	800cdda <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	8b5b      	ldrh	r3, [r3, #26]
 800cdc6:	f003 0302 	and.w	r3, r3, #2
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	f000 81aa 	beq.w	800d124 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f000 fdcb 	bl	800d96c <tcp_send_empty_ack>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	e1b1      	b.n	800d13e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cdda:	6879      	ldr	r1, [r7, #4]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	3304      	adds	r3, #4
 800cde0:	461a      	mov	r2, r3
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f7ff fc7e 	bl	800c6e4 <tcp_route>
 800cde8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d102      	bne.n	800cdf6 <tcp_output+0x96>
    return ERR_RTE;
 800cdf0:	f06f 0303 	mvn.w	r3, #3
 800cdf4:	e1a3      	b.n	800d13e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d003      	beq.n	800ce04 <tcp_output+0xa4>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d111      	bne.n	800ce28 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d002      	beq.n	800ce10 <tcp_output+0xb0>
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	3304      	adds	r3, #4
 800ce0e:	e000      	b.n	800ce12 <tcp_output+0xb2>
 800ce10:	2300      	movs	r3, #0
 800ce12:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d102      	bne.n	800ce20 <tcp_output+0xc0>
      return ERR_RTE;
 800ce1a:	f06f 0303 	mvn.w	r3, #3
 800ce1e:	e18e      	b.n	800d13e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ce28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce2a:	68db      	ldr	r3, [r3, #12]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7f9 ff3c 	bl	8006cac <lwip_htonl>
 800ce34:	4602      	mov	r2, r0
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce3a:	1ad3      	subs	r3, r2, r3
 800ce3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce3e:	8912      	ldrh	r2, [r2, #8]
 800ce40:	4413      	add	r3, r2
 800ce42:	69ba      	ldr	r2, [r7, #24]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d227      	bcs.n	800ce98 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ce4e:	461a      	mov	r2, r3
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d114      	bne.n	800ce80 <tcp_output+0x120>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d110      	bne.n	800ce80 <tcp_output+0x120>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10b      	bne.n	800ce80 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	8b5b      	ldrh	r3, [r3, #26]
 800ce84:	f003 0302 	and.w	r3, r3, #2
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	f000 814d 	beq.w	800d128 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 fd6c 	bl	800d96c <tcp_send_empty_ack>
 800ce94:	4603      	mov	r3, r0
 800ce96:	e152      	b.n	800d13e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cea4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800cea6:	6a3b      	ldr	r3, [r7, #32]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f000 811c 	beq.w	800d0e6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ceae:	e002      	b.n	800ceb6 <tcp_output+0x156>
 800ceb0:	6a3b      	ldr	r3, [r7, #32]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	623b      	str	r3, [r7, #32]
 800ceb6:	6a3b      	ldr	r3, [r7, #32]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1f8      	bne.n	800ceb0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800cebe:	e112      	b.n	800d0e6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800cec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	899b      	ldrh	r3, [r3, #12]
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7f9 fed9 	bl	8006c80 <lwip_htons>
 800cece:	4603      	mov	r3, r0
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	f003 0304 	and.w	r3, r3, #4
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d006      	beq.n	800cee8 <tcp_output+0x188>
 800ceda:	4b2f      	ldr	r3, [pc, #188]	@ (800cf98 <tcp_output+0x238>)
 800cedc:	f240 5236 	movw	r2, #1334	@ 0x536
 800cee0:	4932      	ldr	r1, [pc, #200]	@ (800cfac <tcp_output+0x24c>)
 800cee2:	482f      	ldr	r0, [pc, #188]	@ (800cfa0 <tcp_output+0x240>)
 800cee4:	f004 f8cc 	bl	8011080 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d01f      	beq.n	800cf30 <tcp_output+0x1d0>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	8b5b      	ldrh	r3, [r3, #26]
 800cef4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d119      	bne.n	800cf30 <tcp_output+0x1d0>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00b      	beq.n	800cf1c <tcp_output+0x1bc>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d110      	bne.n	800cf30 <tcp_output+0x1d0>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf12:	891a      	ldrh	r2, [r3, #8]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d209      	bcs.n	800cf30 <tcp_output+0x1d0>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d004      	beq.n	800cf30 <tcp_output+0x1d0>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cf2c:	2b08      	cmp	r3, #8
 800cf2e:	d901      	bls.n	800cf34 <tcp_output+0x1d4>
 800cf30:	2301      	movs	r3, #1
 800cf32:	e000      	b.n	800cf36 <tcp_output+0x1d6>
 800cf34:	2300      	movs	r3, #0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d106      	bne.n	800cf48 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	8b5b      	ldrh	r3, [r3, #26]
 800cf3e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f000 80e4 	beq.w	800d110 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	7d1b      	ldrb	r3, [r3, #20]
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d00d      	beq.n	800cf6c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cf50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	899b      	ldrh	r3, [r3, #12]
 800cf56:	b29c      	uxth	r4, r3
 800cf58:	2010      	movs	r0, #16
 800cf5a:	f7f9 fe91 	bl	8006c80 <lwip_htons>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	461a      	mov	r2, r3
 800cf62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	4322      	orrs	r2, r4
 800cf68:	b292      	uxth	r2, r2
 800cf6a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800cf6c:	697a      	ldr	r2, [r7, #20]
 800cf6e:	6879      	ldr	r1, [r7, #4]
 800cf70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf72:	f000 f909 	bl	800d188 <tcp_output_segment>
 800cf76:	4603      	mov	r3, r0
 800cf78:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cf7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d016      	beq.n	800cfb0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	8b5b      	ldrh	r3, [r3, #26]
 800cf86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	835a      	strh	r2, [r3, #26]
      return err;
 800cf90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf94:	e0d3      	b.n	800d13e <tcp_output+0x3de>
 800cf96:	bf00      	nop
 800cf98:	08013950 	.word	0x08013950
 800cf9c:	08013e94 	.word	0x08013e94
 800cfa0:	080139a4 	.word	0x080139a4
 800cfa4:	08013eac 	.word	0x08013eac
 800cfa8:	20008850 	.word	0x20008850
 800cfac:	08013ed4 	.word	0x08013ed4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	7d1b      	ldrb	r3, [r3, #20]
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	d006      	beq.n	800cfce <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	8b5b      	ldrh	r3, [r3, #26]
 800cfc4:	f023 0303 	bic.w	r3, r3, #3
 800cfc8:	b29a      	uxth	r2, r3
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7f9 fe69 	bl	8006cac <lwip_htonl>
 800cfda:	4604      	mov	r4, r0
 800cfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfde:	891b      	ldrh	r3, [r3, #8]
 800cfe0:	461d      	mov	r5, r3
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	899b      	ldrh	r3, [r3, #12]
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7f9 fe48 	bl	8006c80 <lwip_htons>
 800cff0:	4603      	mov	r3, r0
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	f003 0303 	and.w	r3, r3, #3
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <tcp_output+0x2a0>
 800cffc:	2301      	movs	r3, #1
 800cffe:	e000      	b.n	800d002 <tcp_output+0x2a2>
 800d000:	2300      	movs	r3, #0
 800d002:	442b      	add	r3, r5
 800d004:	4423      	add	r3, r4
 800d006:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	2b00      	cmp	r3, #0
 800d012:	da02      	bge.n	800d01a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	68ba      	ldr	r2, [r7, #8]
 800d018:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01c:	891b      	ldrh	r3, [r3, #8]
 800d01e:	461c      	mov	r4, r3
 800d020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	899b      	ldrh	r3, [r3, #12]
 800d026:	b29b      	uxth	r3, r3
 800d028:	4618      	mov	r0, r3
 800d02a:	f7f9 fe29 	bl	8006c80 <lwip_htons>
 800d02e:	4603      	mov	r3, r0
 800d030:	b2db      	uxtb	r3, r3
 800d032:	f003 0303 	and.w	r3, r3, #3
 800d036:	2b00      	cmp	r3, #0
 800d038:	d001      	beq.n	800d03e <tcp_output+0x2de>
 800d03a:	2301      	movs	r3, #1
 800d03c:	e000      	b.n	800d040 <tcp_output+0x2e0>
 800d03e:	2300      	movs	r3, #0
 800d040:	4423      	add	r3, r4
 800d042:	2b00      	cmp	r3, #0
 800d044:	d049      	beq.n	800d0da <tcp_output+0x37a>
      seg->next = NULL;
 800d046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d048:	2200      	movs	r2, #0
 800d04a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d050:	2b00      	cmp	r3, #0
 800d052:	d105      	bne.n	800d060 <tcp_output+0x300>
        pcb->unacked = seg;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d058:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800d05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d05c:	623b      	str	r3, [r7, #32]
 800d05e:	e03f      	b.n	800d0e0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	4618      	mov	r0, r3
 800d068:	f7f9 fe20 	bl	8006cac <lwip_htonl>
 800d06c:	4604      	mov	r4, r0
 800d06e:	6a3b      	ldr	r3, [r7, #32]
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	4618      	mov	r0, r3
 800d076:	f7f9 fe19 	bl	8006cac <lwip_htonl>
 800d07a:	4603      	mov	r3, r0
 800d07c:	1ae3      	subs	r3, r4, r3
 800d07e:	2b00      	cmp	r3, #0
 800d080:	da24      	bge.n	800d0cc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	3370      	adds	r3, #112	@ 0x70
 800d086:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d088:	e002      	b.n	800d090 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d011      	beq.n	800d0bc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d098:	69fb      	ldr	r3, [r7, #28]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7f9 fe03 	bl	8006cac <lwip_htonl>
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7f9 fdfc 	bl	8006cac <lwip_htonl>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	dbe6      	blt.n	800d08a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0c8:	601a      	str	r2, [r3, #0]
 800d0ca:	e009      	b.n	800d0e0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d0cc:	6a3b      	ldr	r3, [r7, #32]
 800d0ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0d0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d0d2:	6a3b      	ldr	r3, [r7, #32]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	623b      	str	r3, [r7, #32]
 800d0d8:	e002      	b.n	800d0e0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d0da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d0dc:	f7fc fc45 	bl	800996a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0e4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d012      	beq.n	800d112 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7f9 fdda 	bl	8006cac <lwip_htonl>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0fe:	1ad3      	subs	r3, r2, r3
 800d100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d102:	8912      	ldrh	r2, [r2, #8]
 800d104:	4413      	add	r3, r2
  while (seg != NULL &&
 800d106:	69ba      	ldr	r2, [r7, #24]
 800d108:	429a      	cmp	r2, r3
 800d10a:	f4bf aed9 	bcs.w	800cec0 <tcp_output+0x160>
 800d10e:	e000      	b.n	800d112 <tcp_output+0x3b2>
      break;
 800d110:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d116:	2b00      	cmp	r3, #0
 800d118:	d108      	bne.n	800d12c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800d122:	e004      	b.n	800d12e <tcp_output+0x3ce>
    goto output_done;
 800d124:	bf00      	nop
 800d126:	e002      	b.n	800d12e <tcp_output+0x3ce>
    goto output_done;
 800d128:	bf00      	nop
 800d12a:	e000      	b.n	800d12e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d12c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	8b5b      	ldrh	r3, [r3, #26]
 800d132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d136:	b29a      	uxth	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3728      	adds	r7, #40	@ 0x28
 800d142:	46bd      	mov	sp, r7
 800d144:	bdb0      	pop	{r4, r5, r7, pc}
 800d146:	bf00      	nop

0800d148 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d106      	bne.n	800d164 <tcp_output_segment_busy+0x1c>
 800d156:	4b09      	ldr	r3, [pc, #36]	@ (800d17c <tcp_output_segment_busy+0x34>)
 800d158:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d15c:	4908      	ldr	r1, [pc, #32]	@ (800d180 <tcp_output_segment_busy+0x38>)
 800d15e:	4809      	ldr	r0, [pc, #36]	@ (800d184 <tcp_output_segment_busy+0x3c>)
 800d160:	f003 ff8e 	bl	8011080 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	7b9b      	ldrb	r3, [r3, #14]
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d001      	beq.n	800d172 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d16e:	2301      	movs	r3, #1
 800d170:	e000      	b.n	800d174 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	08013950 	.word	0x08013950
 800d180:	08013eec 	.word	0x08013eec
 800d184:	080139a4 	.word	0x080139a4

0800d188 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d188:	b5b0      	push	{r4, r5, r7, lr}
 800d18a:	b08c      	sub	sp, #48	@ 0x30
 800d18c:	af04      	add	r7, sp, #16
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	60b9      	str	r1, [r7, #8]
 800d192:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d106      	bne.n	800d1a8 <tcp_output_segment+0x20>
 800d19a:	4b64      	ldr	r3, [pc, #400]	@ (800d32c <tcp_output_segment+0x1a4>)
 800d19c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800d1a0:	4963      	ldr	r1, [pc, #396]	@ (800d330 <tcp_output_segment+0x1a8>)
 800d1a2:	4864      	ldr	r0, [pc, #400]	@ (800d334 <tcp_output_segment+0x1ac>)
 800d1a4:	f003 ff6c 	bl	8011080 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d106      	bne.n	800d1bc <tcp_output_segment+0x34>
 800d1ae:	4b5f      	ldr	r3, [pc, #380]	@ (800d32c <tcp_output_segment+0x1a4>)
 800d1b0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800d1b4:	4960      	ldr	r1, [pc, #384]	@ (800d338 <tcp_output_segment+0x1b0>)
 800d1b6:	485f      	ldr	r0, [pc, #380]	@ (800d334 <tcp_output_segment+0x1ac>)
 800d1b8:	f003 ff62 	bl	8011080 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d106      	bne.n	800d1d0 <tcp_output_segment+0x48>
 800d1c2:	4b5a      	ldr	r3, [pc, #360]	@ (800d32c <tcp_output_segment+0x1a4>)
 800d1c4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800d1c8:	495c      	ldr	r1, [pc, #368]	@ (800d33c <tcp_output_segment+0x1b4>)
 800d1ca:	485a      	ldr	r0, [pc, #360]	@ (800d334 <tcp_output_segment+0x1ac>)
 800d1cc:	f003 ff58 	bl	8011080 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f7ff ffb9 	bl	800d148 <tcp_output_segment_busy>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d001      	beq.n	800d1e0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	e0a1      	b.n	800d324 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	68dc      	ldr	r4, [r3, #12]
 800d1e8:	4610      	mov	r0, r2
 800d1ea:	f7f9 fd5f 	bl	8006cac <lwip_htonl>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	68dc      	ldr	r4, [r3, #12]
 800d1fa:	4610      	mov	r0, r2
 800d1fc:	f7f9 fd40 	bl	8006c80 <lwip_htons>
 800d200:	4603      	mov	r3, r0
 800d202:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d208:	68ba      	ldr	r2, [r7, #8]
 800d20a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d20c:	441a      	add	r2, r3
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	68db      	ldr	r3, [r3, #12]
 800d216:	3314      	adds	r3, #20
 800d218:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	7a9b      	ldrb	r3, [r3, #10]
 800d21e:	f003 0301 	and.w	r3, r3, #1
 800d222:	2b00      	cmp	r3, #0
 800d224:	d015      	beq.n	800d252 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	3304      	adds	r3, #4
 800d22a:	461a      	mov	r2, r3
 800d22c:	6879      	ldr	r1, [r7, #4]
 800d22e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800d232:	f7fc fe91 	bl	8009f58 <tcp_eff_send_mss_netif>
 800d236:	4603      	mov	r3, r0
 800d238:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d23a:	8b7b      	ldrh	r3, [r7, #26]
 800d23c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800d240:	4618      	mov	r0, r3
 800d242:	f7f9 fd33 	bl	8006cac <lwip_htonl>
 800d246:	4602      	mov	r2, r0
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	3304      	adds	r3, #4
 800d250:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d258:	2b00      	cmp	r3, #0
 800d25a:	da02      	bge.n	800d262 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	2200      	movs	r2, #0
 800d260:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d266:	2b00      	cmp	r3, #0
 800d268:	d10c      	bne.n	800d284 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d26a:	4b35      	ldr	r3, [pc, #212]	@ (800d340 <tcp_output_segment+0x1b8>)
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	4618      	mov	r0, r3
 800d27a:	f7f9 fd17 	bl	8006cac <lwip_htonl>
 800d27e:	4602      	mov	r2, r0
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	68da      	ldr	r2, [r3, #12]
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	8959      	ldrh	r1, [r3, #10]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	8b3a      	ldrh	r2, [r7, #24]
 800d29e:	1a8a      	subs	r2, r1, r2
 800d2a0:	b292      	uxth	r2, r2
 800d2a2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	8919      	ldrh	r1, [r3, #8]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	8b3a      	ldrh	r2, [r7, #24]
 800d2b0:	1a8a      	subs	r2, r1, r2
 800d2b2:	b292      	uxth	r2, r2
 800d2b4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	68fa      	ldr	r2, [r7, #12]
 800d2bc:	68d2      	ldr	r2, [r2, #12]
 800d2be:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	741a      	strb	r2, [r3, #16]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	68da      	ldr	r2, [r3, #12]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	7a9b      	ldrb	r3, [r3, #10]
 800d2d4:	f003 0301 	and.w	r3, r3, #1
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d001      	beq.n	800d2e0 <tcp_output_segment+0x158>
 800d2dc:	2318      	movs	r3, #24
 800d2de:	e000      	b.n	800d2e2 <tcp_output_segment+0x15a>
 800d2e0:	2314      	movs	r3, #20
 800d2e2:	4413      	add	r3, r2
 800d2e4:	69fa      	ldr	r2, [r7, #28]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d006      	beq.n	800d2f8 <tcp_output_segment+0x170>
 800d2ea:	4b10      	ldr	r3, [pc, #64]	@ (800d32c <tcp_output_segment+0x1a4>)
 800d2ec:	f240 621c 	movw	r2, #1564	@ 0x61c
 800d2f0:	4914      	ldr	r1, [pc, #80]	@ (800d344 <tcp_output_segment+0x1bc>)
 800d2f2:	4810      	ldr	r0, [pc, #64]	@ (800d334 <tcp_output_segment+0x1ac>)
 800d2f4:	f003 fec4 	bl	8011080 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6858      	ldr	r0, [r3, #4]
 800d2fc:	68b9      	ldr	r1, [r7, #8]
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	1d1c      	adds	r4, r3, #4
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	7add      	ldrb	r5, [r3, #11]
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	7a9b      	ldrb	r3, [r3, #10]
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	9202      	str	r2, [sp, #8]
 800d30e:	2206      	movs	r2, #6
 800d310:	9201      	str	r2, [sp, #4]
 800d312:	9300      	str	r3, [sp, #0]
 800d314:	462b      	mov	r3, r5
 800d316:	4622      	mov	r2, r4
 800d318:	f002 fd84 	bl	800fe24 <ip4_output_if>
 800d31c:	4603      	mov	r3, r0
 800d31e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d320:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3720      	adds	r7, #32
 800d328:	46bd      	mov	sp, r7
 800d32a:	bdb0      	pop	{r4, r5, r7, pc}
 800d32c:	08013950 	.word	0x08013950
 800d330:	08013f14 	.word	0x08013f14
 800d334:	080139a4 	.word	0x080139a4
 800d338:	08013f34 	.word	0x08013f34
 800d33c:	08013f54 	.word	0x08013f54
 800d340:	20008804 	.word	0x20008804
 800d344:	08013f78 	.word	0x08013f78

0800d348 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d348:	b5b0      	push	{r4, r5, r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d106      	bne.n	800d364 <tcp_rexmit_rto_prepare+0x1c>
 800d356:	4b31      	ldr	r3, [pc, #196]	@ (800d41c <tcp_rexmit_rto_prepare+0xd4>)
 800d358:	f240 6263 	movw	r2, #1635	@ 0x663
 800d35c:	4930      	ldr	r1, [pc, #192]	@ (800d420 <tcp_rexmit_rto_prepare+0xd8>)
 800d35e:	4831      	ldr	r0, [pc, #196]	@ (800d424 <tcp_rexmit_rto_prepare+0xdc>)
 800d360:	f003 fe8e 	bl	8011080 <iprintf>

  if (pcb->unacked == NULL) {
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d102      	bne.n	800d372 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d36c:	f06f 0305 	mvn.w	r3, #5
 800d370:	e050      	b.n	800d414 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d376:	60fb      	str	r3, [r7, #12]
 800d378:	e00b      	b.n	800d392 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d37a:	68f8      	ldr	r0, [r7, #12]
 800d37c:	f7ff fee4 	bl	800d148 <tcp_output_segment_busy>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d002      	beq.n	800d38c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d386:	f06f 0305 	mvn.w	r3, #5
 800d38a:	e043      	b.n	800d414 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	60fb      	str	r3, [r7, #12]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d1ef      	bne.n	800d37a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d39a:	68f8      	ldr	r0, [r7, #12]
 800d39c:	f7ff fed4 	bl	800d148 <tcp_output_segment_busy>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d002      	beq.n	800d3ac <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d3a6:	f06f 0305 	mvn.w	r3, #5
 800d3aa:	e033      	b.n	800d414 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	8b5b      	ldrh	r3, [r3, #26]
 800d3c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7f9 fc68 	bl	8006cac <lwip_htonl>
 800d3dc:	4604      	mov	r4, r0
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	891b      	ldrh	r3, [r3, #8]
 800d3e2:	461d      	mov	r5, r3
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	899b      	ldrh	r3, [r3, #12]
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7f9 fc47 	bl	8006c80 <lwip_htons>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	b2db      	uxtb	r3, r3
 800d3f6:	f003 0303 	and.w	r3, r3, #3
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d001      	beq.n	800d402 <tcp_rexmit_rto_prepare+0xba>
 800d3fe:	2301      	movs	r3, #1
 800d400:	e000      	b.n	800d404 <tcp_rexmit_rto_prepare+0xbc>
 800d402:	2300      	movs	r3, #0
 800d404:	442b      	add	r3, r5
 800d406:	18e2      	adds	r2, r4, r3
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2200      	movs	r2, #0
 800d410:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800d412:	2300      	movs	r3, #0
}
 800d414:	4618      	mov	r0, r3
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bdb0      	pop	{r4, r5, r7, pc}
 800d41c:	08013950 	.word	0x08013950
 800d420:	08013f8c 	.word	0x08013f8c
 800d424:	080139a4 	.word	0x080139a4

0800d428 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d106      	bne.n	800d444 <tcp_rexmit_rto_commit+0x1c>
 800d436:	4b0d      	ldr	r3, [pc, #52]	@ (800d46c <tcp_rexmit_rto_commit+0x44>)
 800d438:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d43c:	490c      	ldr	r1, [pc, #48]	@ (800d470 <tcp_rexmit_rto_commit+0x48>)
 800d43e:	480d      	ldr	r0, [pc, #52]	@ (800d474 <tcp_rexmit_rto_commit+0x4c>)
 800d440:	f003 fe1e 	bl	8011080 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d44a:	2bff      	cmp	r3, #255	@ 0xff
 800d44c:	d007      	beq.n	800d45e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d454:	3301      	adds	r3, #1
 800d456:	b2da      	uxtb	r2, r3
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7ff fc7e 	bl	800cd60 <tcp_output>
}
 800d464:	bf00      	nop
 800d466:	3708      	adds	r7, #8
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	08013950 	.word	0x08013950
 800d470:	08013fb0 	.word	0x08013fb0
 800d474:	080139a4 	.word	0x080139a4

0800d478 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d106      	bne.n	800d494 <tcp_rexmit_rto+0x1c>
 800d486:	4b0a      	ldr	r3, [pc, #40]	@ (800d4b0 <tcp_rexmit_rto+0x38>)
 800d488:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800d48c:	4909      	ldr	r1, [pc, #36]	@ (800d4b4 <tcp_rexmit_rto+0x3c>)
 800d48e:	480a      	ldr	r0, [pc, #40]	@ (800d4b8 <tcp_rexmit_rto+0x40>)
 800d490:	f003 fdf6 	bl	8011080 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f7ff ff57 	bl	800d348 <tcp_rexmit_rto_prepare>
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d102      	bne.n	800d4a6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f7ff ffc1 	bl	800d428 <tcp_rexmit_rto_commit>
  }
}
 800d4a6:	bf00      	nop
 800d4a8:	3708      	adds	r7, #8
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	08013950 	.word	0x08013950
 800d4b4:	08013fd4 	.word	0x08013fd4
 800d4b8:	080139a4 	.word	0x080139a4

0800d4bc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d4bc:	b590      	push	{r4, r7, lr}
 800d4be:	b085      	sub	sp, #20
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d106      	bne.n	800d4d8 <tcp_rexmit+0x1c>
 800d4ca:	4b2f      	ldr	r3, [pc, #188]	@ (800d588 <tcp_rexmit+0xcc>)
 800d4cc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800d4d0:	492e      	ldr	r1, [pc, #184]	@ (800d58c <tcp_rexmit+0xd0>)
 800d4d2:	482f      	ldr	r0, [pc, #188]	@ (800d590 <tcp_rexmit+0xd4>)
 800d4d4:	f003 fdd4 	bl	8011080 <iprintf>

  if (pcb->unacked == NULL) {
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d102      	bne.n	800d4e6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d4e0:	f06f 0305 	mvn.w	r3, #5
 800d4e4:	e04c      	b.n	800d580 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4ea:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d4ec:	68b8      	ldr	r0, [r7, #8]
 800d4ee:	f7ff fe2b 	bl	800d148 <tcp_output_segment_busy>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d002      	beq.n	800d4fe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d4f8:	f06f 0305 	mvn.w	r3, #5
 800d4fc:	e040      	b.n	800d580 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	336c      	adds	r3, #108	@ 0x6c
 800d50a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d50c:	e002      	b.n	800d514 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d011      	beq.n	800d540 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	4618      	mov	r0, r3
 800d526:	f7f9 fbc1 	bl	8006cac <lwip_htonl>
 800d52a:	4604      	mov	r4, r0
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	4618      	mov	r0, r3
 800d534:	f7f9 fbba 	bl	8006cac <lwip_htonl>
 800d538:	4603      	mov	r3, r0
 800d53a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	dbe6      	blt.n	800d50e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	68ba      	ldr	r2, [r7, #8]
 800d54c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d103      	bne.n	800d55e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d564:	2bff      	cmp	r3, #255	@ 0xff
 800d566:	d007      	beq.n	800d578 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d56e:	3301      	adds	r3, #1
 800d570:	b2da      	uxtb	r2, r3
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d57e:	2300      	movs	r3, #0
}
 800d580:	4618      	mov	r0, r3
 800d582:	3714      	adds	r7, #20
 800d584:	46bd      	mov	sp, r7
 800d586:	bd90      	pop	{r4, r7, pc}
 800d588:	08013950 	.word	0x08013950
 800d58c:	08013ff0 	.word	0x08013ff0
 800d590:	080139a4 	.word	0x080139a4

0800d594 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d106      	bne.n	800d5b0 <tcp_rexmit_fast+0x1c>
 800d5a2:	4b2a      	ldr	r3, [pc, #168]	@ (800d64c <tcp_rexmit_fast+0xb8>)
 800d5a4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800d5a8:	4929      	ldr	r1, [pc, #164]	@ (800d650 <tcp_rexmit_fast+0xbc>)
 800d5aa:	482a      	ldr	r0, [pc, #168]	@ (800d654 <tcp_rexmit_fast+0xc0>)
 800d5ac:	f003 fd68 	bl	8011080 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d044      	beq.n	800d642 <tcp_rexmit_fast+0xae>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	8b5b      	ldrh	r3, [r3, #26]
 800d5bc:	f003 0304 	and.w	r3, r3, #4
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d13e      	bne.n	800d642 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7ff ff79 	bl	800d4bc <tcp_rexmit>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d138      	bne.n	800d642 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	bf28      	it	cs
 800d5e0:	4613      	movcs	r3, r2
 800d5e2:	b29b      	uxth	r3, r3
 800d5e4:	0fda      	lsrs	r2, r3, #31
 800d5e6:	4413      	add	r3, r2
 800d5e8:	105b      	asrs	r3, r3, #1
 800d5ea:	b29a      	uxth	r2, r3
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d5fe:	005b      	lsls	r3, r3, #1
 800d600:	429a      	cmp	r2, r3
 800d602:	d206      	bcs.n	800d612 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d608:	005b      	lsls	r3, r3, #1
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d61c:	4619      	mov	r1, r3
 800d61e:	0049      	lsls	r1, r1, #1
 800d620:	440b      	add	r3, r1
 800d622:	b29b      	uxth	r3, r3
 800d624:	4413      	add	r3, r2
 800d626:	b29a      	uxth	r2, r3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	8b5b      	ldrh	r3, [r3, #26]
 800d632:	f043 0304 	orr.w	r3, r3, #4
 800d636:	b29a      	uxth	r2, r3
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800d642:	bf00      	nop
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	08013950 	.word	0x08013950
 800d650:	08014008 	.word	0x08014008
 800d654:	080139a4 	.word	0x080139a4

0800d658 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b086      	sub	sp, #24
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	607b      	str	r3, [r7, #4]
 800d662:	460b      	mov	r3, r1
 800d664:	817b      	strh	r3, [r7, #10]
 800d666:	4613      	mov	r3, r2
 800d668:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d66a:	897a      	ldrh	r2, [r7, #10]
 800d66c:	893b      	ldrh	r3, [r7, #8]
 800d66e:	4413      	add	r3, r2
 800d670:	b29b      	uxth	r3, r3
 800d672:	3314      	adds	r3, #20
 800d674:	b29b      	uxth	r3, r3
 800d676:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d67a:	4619      	mov	r1, r3
 800d67c:	2022      	movs	r0, #34	@ 0x22
 800d67e:	f7fa fb79 	bl	8007d74 <pbuf_alloc>
 800d682:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d04d      	beq.n	800d726 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d68a:	897b      	ldrh	r3, [r7, #10]
 800d68c:	3313      	adds	r3, #19
 800d68e:	697a      	ldr	r2, [r7, #20]
 800d690:	8952      	ldrh	r2, [r2, #10]
 800d692:	4293      	cmp	r3, r2
 800d694:	db06      	blt.n	800d6a4 <tcp_output_alloc_header_common+0x4c>
 800d696:	4b26      	ldr	r3, [pc, #152]	@ (800d730 <tcp_output_alloc_header_common+0xd8>)
 800d698:	f240 7223 	movw	r2, #1827	@ 0x723
 800d69c:	4925      	ldr	r1, [pc, #148]	@ (800d734 <tcp_output_alloc_header_common+0xdc>)
 800d69e:	4826      	ldr	r0, [pc, #152]	@ (800d738 <tcp_output_alloc_header_common+0xe0>)
 800d6a0:	f003 fcee 	bl	8011080 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d6aa:	8c3b      	ldrh	r3, [r7, #32]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7f9 fae7 	bl	8006c80 <lwip_htons>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d6ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7f9 fadf 	bl	8006c80 <lwip_htons>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	f7f9 faeb 	bl	8006cac <lwip_htonl>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d6dc:	897b      	ldrh	r3, [r7, #10]
 800d6de:	089b      	lsrs	r3, r3, #2
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	3305      	adds	r3, #5
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	031b      	lsls	r3, r3, #12
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7f9 fac3 	bl	8006c80 <lwip_htons>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d702:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d704:	4618      	mov	r0, r3
 800d706:	f7f9 fabb 	bl	8006c80 <lwip_htons>
 800d70a:	4603      	mov	r3, r0
 800d70c:	461a      	mov	r2, r3
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	2200      	movs	r2, #0
 800d716:	741a      	strb	r2, [r3, #16]
 800d718:	2200      	movs	r2, #0
 800d71a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	2200      	movs	r2, #0
 800d720:	749a      	strb	r2, [r3, #18]
 800d722:	2200      	movs	r2, #0
 800d724:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d726:	697b      	ldr	r3, [r7, #20]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3718      	adds	r7, #24
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	08013950 	.word	0x08013950
 800d734:	08014028 	.word	0x08014028
 800d738:	080139a4 	.word	0x080139a4

0800d73c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d73c:	b5b0      	push	{r4, r5, r7, lr}
 800d73e:	b08a      	sub	sp, #40	@ 0x28
 800d740:	af04      	add	r7, sp, #16
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	607b      	str	r3, [r7, #4]
 800d746:	460b      	mov	r3, r1
 800d748:	817b      	strh	r3, [r7, #10]
 800d74a:	4613      	mov	r3, r2
 800d74c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d106      	bne.n	800d762 <tcp_output_alloc_header+0x26>
 800d754:	4b15      	ldr	r3, [pc, #84]	@ (800d7ac <tcp_output_alloc_header+0x70>)
 800d756:	f240 7242 	movw	r2, #1858	@ 0x742
 800d75a:	4915      	ldr	r1, [pc, #84]	@ (800d7b0 <tcp_output_alloc_header+0x74>)
 800d75c:	4815      	ldr	r0, [pc, #84]	@ (800d7b4 <tcp_output_alloc_header+0x78>)
 800d75e:	f003 fc8f 	bl	8011080 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	8adb      	ldrh	r3, [r3, #22]
 800d76a:	68fa      	ldr	r2, [r7, #12]
 800d76c:	8b12      	ldrh	r2, [r2, #24]
 800d76e:	68f9      	ldr	r1, [r7, #12]
 800d770:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800d772:	893d      	ldrh	r5, [r7, #8]
 800d774:	897c      	ldrh	r4, [r7, #10]
 800d776:	9103      	str	r1, [sp, #12]
 800d778:	2110      	movs	r1, #16
 800d77a:	9102      	str	r1, [sp, #8]
 800d77c:	9201      	str	r2, [sp, #4]
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	462a      	mov	r2, r5
 800d784:	4621      	mov	r1, r4
 800d786:	f7ff ff67 	bl	800d658 <tcp_output_alloc_header_common>
 800d78a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d006      	beq.n	800d7a0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d796:	68fa      	ldr	r2, [r7, #12]
 800d798:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d79a:	441a      	add	r2, r3
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800d7a0:	697b      	ldr	r3, [r7, #20]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3718      	adds	r7, #24
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bdb0      	pop	{r4, r5, r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	08013950 	.word	0x08013950
 800d7b0:	08014058 	.word	0x08014058
 800d7b4:	080139a4 	.word	0x080139a4

0800d7b8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b088      	sub	sp, #32
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	60b9      	str	r1, [r7, #8]
 800d7c2:	4611      	mov	r1, r2
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	71fb      	strb	r3, [r7, #7]
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d106      	bne.n	800d7e6 <tcp_output_fill_options+0x2e>
 800d7d8:	4b12      	ldr	r3, [pc, #72]	@ (800d824 <tcp_output_fill_options+0x6c>)
 800d7da:	f240 7256 	movw	r2, #1878	@ 0x756
 800d7de:	4912      	ldr	r1, [pc, #72]	@ (800d828 <tcp_output_fill_options+0x70>)
 800d7e0:	4812      	ldr	r0, [pc, #72]	@ (800d82c <tcp_output_fill_options+0x74>)
 800d7e2:	f003 fc4d 	bl	8011080 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	685b      	ldr	r3, [r3, #4]
 800d7ea:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	3314      	adds	r3, #20
 800d7f0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d7f2:	8bfb      	ldrh	r3, [r7, #30]
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	79fb      	ldrb	r3, [r7, #7]
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	f003 0304 	and.w	r3, r3, #4
 800d800:	4413      	add	r3, r2
 800d802:	3314      	adds	r3, #20
 800d804:	69ba      	ldr	r2, [r7, #24]
 800d806:	4413      	add	r3, r2
 800d808:	697a      	ldr	r2, [r7, #20]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d006      	beq.n	800d81c <tcp_output_fill_options+0x64>
 800d80e:	4b05      	ldr	r3, [pc, #20]	@ (800d824 <tcp_output_fill_options+0x6c>)
 800d810:	f240 7275 	movw	r2, #1909	@ 0x775
 800d814:	4906      	ldr	r1, [pc, #24]	@ (800d830 <tcp_output_fill_options+0x78>)
 800d816:	4805      	ldr	r0, [pc, #20]	@ (800d82c <tcp_output_fill_options+0x74>)
 800d818:	f003 fc32 	bl	8011080 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d81c:	bf00      	nop
 800d81e:	3720      	adds	r7, #32
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	08013950 	.word	0x08013950
 800d828:	08014080 	.word	0x08014080
 800d82c:	080139a4 	.word	0x080139a4
 800d830:	08013f78 	.word	0x08013f78

0800d834 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b08a      	sub	sp, #40	@ 0x28
 800d838:	af04      	add	r7, sp, #16
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
 800d840:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d106      	bne.n	800d856 <tcp_output_control_segment+0x22>
 800d848:	4b1c      	ldr	r3, [pc, #112]	@ (800d8bc <tcp_output_control_segment+0x88>)
 800d84a:	f240 7287 	movw	r2, #1927	@ 0x787
 800d84e:	491c      	ldr	r1, [pc, #112]	@ (800d8c0 <tcp_output_control_segment+0x8c>)
 800d850:	481c      	ldr	r0, [pc, #112]	@ (800d8c4 <tcp_output_control_segment+0x90>)
 800d852:	f003 fc15 	bl	8011080 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d856:	683a      	ldr	r2, [r7, #0]
 800d858:	6879      	ldr	r1, [r7, #4]
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	f7fe ff42 	bl	800c6e4 <tcp_route>
 800d860:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d102      	bne.n	800d86e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d868:	23fc      	movs	r3, #252	@ 0xfc
 800d86a:	75fb      	strb	r3, [r7, #23]
 800d86c:	e01c      	b.n	800d8a8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d006      	beq.n	800d882 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	7adb      	ldrb	r3, [r3, #11]
 800d878:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	7a9b      	ldrb	r3, [r3, #10]
 800d87e:	757b      	strb	r3, [r7, #21]
 800d880:	e003      	b.n	800d88a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d882:	23ff      	movs	r3, #255	@ 0xff
 800d884:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d886:	2300      	movs	r3, #0
 800d888:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d88a:	7dba      	ldrb	r2, [r7, #22]
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	9302      	str	r3, [sp, #8]
 800d890:	2306      	movs	r3, #6
 800d892:	9301      	str	r3, [sp, #4]
 800d894:	7d7b      	ldrb	r3, [r7, #21]
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	4613      	mov	r3, r2
 800d89a:	683a      	ldr	r2, [r7, #0]
 800d89c:	6879      	ldr	r1, [r7, #4]
 800d89e:	68b8      	ldr	r0, [r7, #8]
 800d8a0:	f002 fac0 	bl	800fe24 <ip4_output_if>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d8a8:	68b8      	ldr	r0, [r7, #8]
 800d8aa:	f7fa fd47 	bl	800833c <pbuf_free>
  return err;
 800d8ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3718      	adds	r7, #24
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	08013950 	.word	0x08013950
 800d8c0:	080140a8 	.word	0x080140a8
 800d8c4:	080139a4 	.word	0x080139a4

0800d8c8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d8c8:	b590      	push	{r4, r7, lr}
 800d8ca:	b08b      	sub	sp, #44	@ 0x2c
 800d8cc:	af04      	add	r7, sp, #16
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	60b9      	str	r1, [r7, #8]
 800d8d2:	607a      	str	r2, [r7, #4]
 800d8d4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d106      	bne.n	800d8ea <tcp_rst+0x22>
 800d8dc:	4b1f      	ldr	r3, [pc, #124]	@ (800d95c <tcp_rst+0x94>)
 800d8de:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800d8e2:	491f      	ldr	r1, [pc, #124]	@ (800d960 <tcp_rst+0x98>)
 800d8e4:	481f      	ldr	r0, [pc, #124]	@ (800d964 <tcp_rst+0x9c>)
 800d8e6:	f003 fbcb 	bl	8011080 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d106      	bne.n	800d8fe <tcp_rst+0x36>
 800d8f0:	4b1a      	ldr	r3, [pc, #104]	@ (800d95c <tcp_rst+0x94>)
 800d8f2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800d8f6:	491c      	ldr	r1, [pc, #112]	@ (800d968 <tcp_rst+0xa0>)
 800d8f8:	481a      	ldr	r0, [pc, #104]	@ (800d964 <tcp_rst+0x9c>)
 800d8fa:	f003 fbc1 	bl	8011080 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d8fe:	2300      	movs	r3, #0
 800d900:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d902:	f246 0308 	movw	r3, #24584	@ 0x6008
 800d906:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d908:	7dfb      	ldrb	r3, [r7, #23]
 800d90a:	b29c      	uxth	r4, r3
 800d90c:	68b8      	ldr	r0, [r7, #8]
 800d90e:	f7f9 f9cd 	bl	8006cac <lwip_htonl>
 800d912:	4602      	mov	r2, r0
 800d914:	8abb      	ldrh	r3, [r7, #20]
 800d916:	9303      	str	r3, [sp, #12]
 800d918:	2314      	movs	r3, #20
 800d91a:	9302      	str	r3, [sp, #8]
 800d91c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d91e:	9301      	str	r3, [sp, #4]
 800d920:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d922:	9300      	str	r3, [sp, #0]
 800d924:	4613      	mov	r3, r2
 800d926:	2200      	movs	r2, #0
 800d928:	4621      	mov	r1, r4
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f7ff fe94 	bl	800d658 <tcp_output_alloc_header_common>
 800d930:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00c      	beq.n	800d952 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d938:	7dfb      	ldrb	r3, [r7, #23]
 800d93a:	2200      	movs	r2, #0
 800d93c:	6939      	ldr	r1, [r7, #16]
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	f7ff ff3a 	bl	800d7b8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d946:	683a      	ldr	r2, [r7, #0]
 800d948:	6939      	ldr	r1, [r7, #16]
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f7ff ff72 	bl	800d834 <tcp_output_control_segment>
 800d950:	e000      	b.n	800d954 <tcp_rst+0x8c>
    return;
 800d952:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d954:	371c      	adds	r7, #28
 800d956:	46bd      	mov	sp, r7
 800d958:	bd90      	pop	{r4, r7, pc}
 800d95a:	bf00      	nop
 800d95c:	08013950 	.word	0x08013950
 800d960:	080140d4 	.word	0x080140d4
 800d964:	080139a4 	.word	0x080139a4
 800d968:	080140f0 	.word	0x080140f0

0800d96c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d96c:	b590      	push	{r4, r7, lr}
 800d96e:	b087      	sub	sp, #28
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d974:	2300      	movs	r3, #0
 800d976:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d978:	2300      	movs	r3, #0
 800d97a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d106      	bne.n	800d990 <tcp_send_empty_ack+0x24>
 800d982:	4b28      	ldr	r3, [pc, #160]	@ (800da24 <tcp_send_empty_ack+0xb8>)
 800d984:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800d988:	4927      	ldr	r1, [pc, #156]	@ (800da28 <tcp_send_empty_ack+0xbc>)
 800d98a:	4828      	ldr	r0, [pc, #160]	@ (800da2c <tcp_send_empty_ack+0xc0>)
 800d98c:	f003 fb78 	bl	8011080 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d990:	7dfb      	ldrb	r3, [r7, #23]
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	b2db      	uxtb	r3, r3
 800d996:	f003 0304 	and.w	r3, r3, #4
 800d99a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d99c:	7d7b      	ldrb	r3, [r7, #21]
 800d99e:	b29c      	uxth	r4, r3
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7f9 f981 	bl	8006cac <lwip_htonl>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	4621      	mov	r1, r4
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f7ff fec3 	bl	800d73c <tcp_output_alloc_header>
 800d9b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d109      	bne.n	800d9d2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	8b5b      	ldrh	r3, [r3, #26]
 800d9c2:	f043 0303 	orr.w	r3, r3, #3
 800d9c6:	b29a      	uxth	r2, r3
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d9cc:	f06f 0301 	mvn.w	r3, #1
 800d9d0:	e023      	b.n	800da1a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d9d2:	7dbb      	ldrb	r3, [r7, #22]
 800d9d4:	7dfa      	ldrb	r2, [r7, #23]
 800d9d6:	6939      	ldr	r1, [r7, #16]
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f7ff feed 	bl	800d7b8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	3304      	adds	r3, #4
 800d9e4:	6939      	ldr	r1, [r7, #16]
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f7ff ff24 	bl	800d834 <tcp_output_control_segment>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d9f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d007      	beq.n	800da08 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	8b5b      	ldrh	r3, [r3, #26]
 800d9fc:	f043 0303 	orr.w	r3, r3, #3
 800da00:	b29a      	uxth	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	835a      	strh	r2, [r3, #26]
 800da06:	e006      	b.n	800da16 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	8b5b      	ldrh	r3, [r3, #26]
 800da0c:	f023 0303 	bic.w	r3, r3, #3
 800da10:	b29a      	uxth	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800da16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	371c      	adds	r7, #28
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd90      	pop	{r4, r7, pc}
 800da22:	bf00      	nop
 800da24:	08013950 	.word	0x08013950
 800da28:	0801410c 	.word	0x0801410c
 800da2c:	080139a4 	.word	0x080139a4

0800da30 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800da30:	b590      	push	{r4, r7, lr}
 800da32:	b087      	sub	sp, #28
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800da38:	2300      	movs	r3, #0
 800da3a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d106      	bne.n	800da50 <tcp_keepalive+0x20>
 800da42:	4b18      	ldr	r3, [pc, #96]	@ (800daa4 <tcp_keepalive+0x74>)
 800da44:	f640 0224 	movw	r2, #2084	@ 0x824
 800da48:	4917      	ldr	r1, [pc, #92]	@ (800daa8 <tcp_keepalive+0x78>)
 800da4a:	4818      	ldr	r0, [pc, #96]	@ (800daac <tcp_keepalive+0x7c>)
 800da4c:	f003 fb18 	bl	8011080 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800da50:	7dfb      	ldrb	r3, [r7, #23]
 800da52:	b29c      	uxth	r4, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da58:	3b01      	subs	r3, #1
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7f9 f926 	bl	8006cac <lwip_htonl>
 800da60:	4603      	mov	r3, r0
 800da62:	2200      	movs	r2, #0
 800da64:	4621      	mov	r1, r4
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7ff fe68 	bl	800d73c <tcp_output_alloc_header>
 800da6c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d102      	bne.n	800da7a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800da74:	f04f 33ff 	mov.w	r3, #4294967295
 800da78:	e010      	b.n	800da9c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800da7a:	7dfb      	ldrb	r3, [r7, #23]
 800da7c:	2200      	movs	r2, #0
 800da7e:	6939      	ldr	r1, [r7, #16]
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7ff fe99 	bl	800d7b8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	3304      	adds	r3, #4
 800da8c:	6939      	ldr	r1, [r7, #16]
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f7ff fed0 	bl	800d834 <tcp_output_control_segment>
 800da94:	4603      	mov	r3, r0
 800da96:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800da98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	371c      	adds	r7, #28
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd90      	pop	{r4, r7, pc}
 800daa4:	08013950 	.word	0x08013950
 800daa8:	0801412c 	.word	0x0801412c
 800daac:	080139a4 	.word	0x080139a4

0800dab0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800dab0:	b590      	push	{r4, r7, lr}
 800dab2:	b08b      	sub	sp, #44	@ 0x2c
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dab8:	2300      	movs	r3, #0
 800daba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d106      	bne.n	800dad2 <tcp_zero_window_probe+0x22>
 800dac4:	4b4c      	ldr	r3, [pc, #304]	@ (800dbf8 <tcp_zero_window_probe+0x148>)
 800dac6:	f640 024f 	movw	r2, #2127	@ 0x84f
 800daca:	494c      	ldr	r1, [pc, #304]	@ (800dbfc <tcp_zero_window_probe+0x14c>)
 800dacc:	484c      	ldr	r0, [pc, #304]	@ (800dc00 <tcp_zero_window_probe+0x150>)
 800dace:	f003 fad7 	bl	8011080 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dad6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800dad8:	6a3b      	ldr	r3, [r7, #32]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d101      	bne.n	800dae2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800dade:	2300      	movs	r3, #0
 800dae0:	e086      	b.n	800dbf0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800dae8:	2bff      	cmp	r3, #255	@ 0xff
 800daea:	d007      	beq.n	800dafc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800daf2:	3301      	adds	r3, #1
 800daf4:	b2da      	uxtb	r2, r3
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dafc:	6a3b      	ldr	r3, [r7, #32]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	899b      	ldrh	r3, [r3, #12]
 800db02:	b29b      	uxth	r3, r3
 800db04:	4618      	mov	r0, r3
 800db06:	f7f9 f8bb 	bl	8006c80 <lwip_htons>
 800db0a:	4603      	mov	r3, r0
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	f003 0301 	and.w	r3, r3, #1
 800db12:	2b00      	cmp	r3, #0
 800db14:	d005      	beq.n	800db22 <tcp_zero_window_probe+0x72>
 800db16:	6a3b      	ldr	r3, [r7, #32]
 800db18:	891b      	ldrh	r3, [r3, #8]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d101      	bne.n	800db22 <tcp_zero_window_probe+0x72>
 800db1e:	2301      	movs	r3, #1
 800db20:	e000      	b.n	800db24 <tcp_zero_window_probe+0x74>
 800db22:	2300      	movs	r3, #0
 800db24:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800db26:	7ffb      	ldrb	r3, [r7, #31]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	bf0c      	ite	eq
 800db2c:	2301      	moveq	r3, #1
 800db2e:	2300      	movne	r3, #0
 800db30:	b2db      	uxtb	r3, r3
 800db32:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800db34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db38:	b299      	uxth	r1, r3
 800db3a:	6a3b      	ldr	r3, [r7, #32]
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	8bba      	ldrh	r2, [r7, #28]
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f7ff fdfa 	bl	800d73c <tcp_output_alloc_header>
 800db48:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d102      	bne.n	800db56 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800db50:	f04f 33ff 	mov.w	r3, #4294967295
 800db54:	e04c      	b.n	800dbf0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800db5c:	7ffb      	ldrb	r3, [r7, #31]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d011      	beq.n	800db86 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	899b      	ldrh	r3, [r3, #12]
 800db66:	b29b      	uxth	r3, r3
 800db68:	b21b      	sxth	r3, r3
 800db6a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800db6e:	b21c      	sxth	r4, r3
 800db70:	2011      	movs	r0, #17
 800db72:	f7f9 f885 	bl	8006c80 <lwip_htons>
 800db76:	4603      	mov	r3, r0
 800db78:	b21b      	sxth	r3, r3
 800db7a:	4323      	orrs	r3, r4
 800db7c:	b21b      	sxth	r3, r3
 800db7e:	b29a      	uxth	r2, r3
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	819a      	strh	r2, [r3, #12]
 800db84:	e010      	b.n	800dba8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800db86:	69bb      	ldr	r3, [r7, #24]
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	3314      	adds	r3, #20
 800db8c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800db8e:	6a3b      	ldr	r3, [r7, #32]
 800db90:	6858      	ldr	r0, [r3, #4]
 800db92:	6a3b      	ldr	r3, [r7, #32]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	891a      	ldrh	r2, [r3, #8]
 800db98:	6a3b      	ldr	r3, [r7, #32]
 800db9a:	891b      	ldrh	r3, [r3, #8]
 800db9c:	1ad3      	subs	r3, r2, r3
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	2201      	movs	r2, #1
 800dba2:	6939      	ldr	r1, [r7, #16]
 800dba4:	f7fa fdc4 	bl	8008730 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dba8:	6a3b      	ldr	r3, [r7, #32]
 800dbaa:	68db      	ldr	r3, [r3, #12]
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7f9 f87c 	bl	8006cac <lwip_htonl>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	da02      	bge.n	800dbcc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	68fa      	ldr	r2, [r7, #12]
 800dbca:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dbcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	69b9      	ldr	r1, [r7, #24]
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7ff fdef 	bl	800d7b8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	3304      	adds	r3, #4
 800dbe0:	69b9      	ldr	r1, [r7, #24]
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f7ff fe26 	bl	800d834 <tcp_output_control_segment>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dbec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	372c      	adds	r7, #44	@ 0x2c
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd90      	pop	{r4, r7, pc}
 800dbf8:	08013950 	.word	0x08013950
 800dbfc:	08014148 	.word	0x08014148
 800dc00:	080139a4 	.word	0x080139a4

0800dc04 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800dc0c:	f7fa ff10 	bl	8008a30 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dc10:	4b0a      	ldr	r3, [pc, #40]	@ (800dc3c <tcpip_tcp_timer+0x38>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d103      	bne.n	800dc20 <tcpip_tcp_timer+0x1c>
 800dc18:	4b09      	ldr	r3, [pc, #36]	@ (800dc40 <tcpip_tcp_timer+0x3c>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d005      	beq.n	800dc2c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dc20:	2200      	movs	r2, #0
 800dc22:	4908      	ldr	r1, [pc, #32]	@ (800dc44 <tcpip_tcp_timer+0x40>)
 800dc24:	20fa      	movs	r0, #250	@ 0xfa
 800dc26:	f000 f8f3 	bl	800de10 <sys_timeout>
 800dc2a:	e003      	b.n	800dc34 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800dc2c:	4b06      	ldr	r3, [pc, #24]	@ (800dc48 <tcpip_tcp_timer+0x44>)
 800dc2e:	2200      	movs	r2, #0
 800dc30:	601a      	str	r2, [r3, #0]
  }
}
 800dc32:	bf00      	nop
 800dc34:	bf00      	nop
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	20008810 	.word	0x20008810
 800dc40:	20008814 	.word	0x20008814
 800dc44:	0800dc05 	.word	0x0800dc05
 800dc48:	2000885c 	.word	0x2000885c

0800dc4c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dc50:	4b0a      	ldr	r3, [pc, #40]	@ (800dc7c <tcp_timer_needed+0x30>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d10f      	bne.n	800dc78 <tcp_timer_needed+0x2c>
 800dc58:	4b09      	ldr	r3, [pc, #36]	@ (800dc80 <tcp_timer_needed+0x34>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d103      	bne.n	800dc68 <tcp_timer_needed+0x1c>
 800dc60:	4b08      	ldr	r3, [pc, #32]	@ (800dc84 <tcp_timer_needed+0x38>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d007      	beq.n	800dc78 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800dc68:	4b04      	ldr	r3, [pc, #16]	@ (800dc7c <tcp_timer_needed+0x30>)
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dc6e:	2200      	movs	r2, #0
 800dc70:	4905      	ldr	r1, [pc, #20]	@ (800dc88 <tcp_timer_needed+0x3c>)
 800dc72:	20fa      	movs	r0, #250	@ 0xfa
 800dc74:	f000 f8cc 	bl	800de10 <sys_timeout>
  }
}
 800dc78:	bf00      	nop
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	2000885c 	.word	0x2000885c
 800dc80:	20008810 	.word	0x20008810
 800dc84:	20008814 	.word	0x20008814
 800dc88:	0800dc05 	.word	0x0800dc05

0800dc8c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b086      	sub	sp, #24
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dc98:	2006      	movs	r0, #6
 800dc9a:	f7f9 fc69 	bl	8007570 <memp_malloc>
 800dc9e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d109      	bne.n	800dcba <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d151      	bne.n	800dd50 <sys_timeout_abs+0xc4>
 800dcac:	4b2a      	ldr	r3, [pc, #168]	@ (800dd58 <sys_timeout_abs+0xcc>)
 800dcae:	22be      	movs	r2, #190	@ 0xbe
 800dcb0:	492a      	ldr	r1, [pc, #168]	@ (800dd5c <sys_timeout_abs+0xd0>)
 800dcb2:	482b      	ldr	r0, [pc, #172]	@ (800dd60 <sys_timeout_abs+0xd4>)
 800dcb4:	f003 f9e4 	bl	8011080 <iprintf>
    return;
 800dcb8:	e04a      	b.n	800dd50 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	68ba      	ldr	r2, [r7, #8]
 800dcc4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	68fa      	ldr	r2, [r7, #12]
 800dcd0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dcd2:	4b24      	ldr	r3, [pc, #144]	@ (800dd64 <sys_timeout_abs+0xd8>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d103      	bne.n	800dce2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800dcda:	4a22      	ldr	r2, [pc, #136]	@ (800dd64 <sys_timeout_abs+0xd8>)
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	6013      	str	r3, [r2, #0]
    return;
 800dce0:	e037      	b.n	800dd52 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	685a      	ldr	r2, [r3, #4]
 800dce6:	4b1f      	ldr	r3, [pc, #124]	@ (800dd64 <sys_timeout_abs+0xd8>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	1ad3      	subs	r3, r2, r3
 800dcee:	0fdb      	lsrs	r3, r3, #31
 800dcf0:	f003 0301 	and.w	r3, r3, #1
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d007      	beq.n	800dd0a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800dcfa:	4b1a      	ldr	r3, [pc, #104]	@ (800dd64 <sys_timeout_abs+0xd8>)
 800dcfc:	681a      	ldr	r2, [r3, #0]
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800dd02:	4a18      	ldr	r2, [pc, #96]	@ (800dd64 <sys_timeout_abs+0xd8>)
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	6013      	str	r3, [r2, #0]
 800dd08:	e023      	b.n	800dd52 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800dd0a:	4b16      	ldr	r3, [pc, #88]	@ (800dd64 <sys_timeout_abs+0xd8>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	617b      	str	r3, [r7, #20]
 800dd10:	e01a      	b.n	800dd48 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00b      	beq.n	800dd32 <sys_timeout_abs+0xa6>
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	685a      	ldr	r2, [r3, #4]
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	1ad3      	subs	r3, r2, r3
 800dd26:	0fdb      	lsrs	r3, r3, #31
 800dd28:	f003 0301 	and.w	r3, r3, #1
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d007      	beq.n	800dd42 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	693a      	ldr	r2, [r7, #16]
 800dd3e:	601a      	str	r2, [r3, #0]
        break;
 800dd40:	e007      	b.n	800dd52 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	617b      	str	r3, [r7, #20]
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d1e1      	bne.n	800dd12 <sys_timeout_abs+0x86>
 800dd4e:	e000      	b.n	800dd52 <sys_timeout_abs+0xc6>
    return;
 800dd50:	bf00      	nop
      }
    }
  }
}
 800dd52:	3718      	adds	r7, #24
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	0801416c 	.word	0x0801416c
 800dd5c:	080141a0 	.word	0x080141a0
 800dd60:	080141e0 	.word	0x080141e0
 800dd64:	20008854 	.word	0x20008854

0800dd68 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b086      	sub	sp, #24
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	4798      	blx	r3

  now = sys_now();
 800dd7a:	f7f8 fd81 	bl	8006880 <sys_now>
 800dd7e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	4b0f      	ldr	r3, [pc, #60]	@ (800ddc4 <lwip_cyclic_timer+0x5c>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4413      	add	r3, r2
 800dd8a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	1ad3      	subs	r3, r2, r3
 800dd92:	0fdb      	lsrs	r3, r3, #31
 800dd94:	f003 0301 	and.w	r3, r3, #1
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d009      	beq.n	800ddb2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	4413      	add	r3, r2
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	4907      	ldr	r1, [pc, #28]	@ (800ddc8 <lwip_cyclic_timer+0x60>)
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7ff ff6e 	bl	800dc8c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ddb0:	e004      	b.n	800ddbc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	4904      	ldr	r1, [pc, #16]	@ (800ddc8 <lwip_cyclic_timer+0x60>)
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	f7ff ff68 	bl	800dc8c <sys_timeout_abs>
}
 800ddbc:	bf00      	nop
 800ddbe:	3718      	adds	r7, #24
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	20008858 	.word	0x20008858
 800ddc8:	0800dd69 	.word	0x0800dd69

0800ddcc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	607b      	str	r3, [r7, #4]
 800ddd6:	e00e      	b.n	800ddf6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ddd8:	4a0b      	ldr	r2, [pc, #44]	@ (800de08 <sys_timeouts_init+0x3c>)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	00db      	lsls	r3, r3, #3
 800dde4:	4a08      	ldr	r2, [pc, #32]	@ (800de08 <sys_timeouts_init+0x3c>)
 800dde6:	4413      	add	r3, r2
 800dde8:	461a      	mov	r2, r3
 800ddea:	4908      	ldr	r1, [pc, #32]	@ (800de0c <sys_timeouts_init+0x40>)
 800ddec:	f000 f810 	bl	800de10 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	607b      	str	r3, [r7, #4]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2b02      	cmp	r3, #2
 800ddfa:	d9ed      	bls.n	800ddd8 <sys_timeouts_init+0xc>
  }
}
 800ddfc:	bf00      	nop
 800ddfe:	bf00      	nop
 800de00:	3708      	adds	r7, #8
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	08014d58 	.word	0x08014d58
 800de0c:	0800dd69 	.word	0x0800dd69

0800de10 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de22:	d306      	bcc.n	800de32 <sys_timeout+0x22>
 800de24:	4b0a      	ldr	r3, [pc, #40]	@ (800de50 <sys_timeout+0x40>)
 800de26:	f240 1229 	movw	r2, #297	@ 0x129
 800de2a:	490a      	ldr	r1, [pc, #40]	@ (800de54 <sys_timeout+0x44>)
 800de2c:	480a      	ldr	r0, [pc, #40]	@ (800de58 <sys_timeout+0x48>)
 800de2e:	f003 f927 	bl	8011080 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800de32:	f7f8 fd25 	bl	8006880 <sys_now>
 800de36:	4602      	mov	r2, r0
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	4413      	add	r3, r2
 800de3c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	68b9      	ldr	r1, [r7, #8]
 800de42:	6978      	ldr	r0, [r7, #20]
 800de44:	f7ff ff22 	bl	800dc8c <sys_timeout_abs>
#endif
}
 800de48:	bf00      	nop
 800de4a:	3718      	adds	r7, #24
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	0801416c 	.word	0x0801416c
 800de54:	08014208 	.word	0x08014208
 800de58:	080141e0 	.word	0x080141e0

0800de5c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800de62:	f7f8 fd0d 	bl	8006880 <sys_now>
 800de66:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800de68:	4b1a      	ldr	r3, [pc, #104]	@ (800ded4 <sys_check_timeouts+0x78>)
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d001      	beq.n	800de76 <sys_check_timeouts+0x1a>
 800de72:	f7f9 ff29 	bl	8007cc8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800de76:	4b18      	ldr	r3, [pc, #96]	@ (800ded8 <sys_check_timeouts+0x7c>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d022      	beq.n	800dec8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	68fa      	ldr	r2, [r7, #12]
 800de88:	1ad3      	subs	r3, r2, r3
 800de8a:	0fdb      	lsrs	r3, r3, #31
 800de8c:	f003 0301 	and.w	r3, r3, #1
 800de90:	b2db      	uxtb	r3, r3
 800de92:	2b00      	cmp	r3, #0
 800de94:	d11a      	bne.n	800decc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4a0f      	ldr	r2, [pc, #60]	@ (800ded8 <sys_check_timeouts+0x7c>)
 800de9c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	689b      	ldr	r3, [r3, #8]
 800dea2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	4a0b      	ldr	r2, [pc, #44]	@ (800dedc <sys_check_timeouts+0x80>)
 800deb0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800deb2:	68b9      	ldr	r1, [r7, #8]
 800deb4:	2006      	movs	r0, #6
 800deb6:	f7f9 fbcb 	bl	8007650 <memp_free>
    if (handler != NULL) {
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d0d3      	beq.n	800de68 <sys_check_timeouts+0xc>
      handler(arg);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6838      	ldr	r0, [r7, #0]
 800dec4:	4798      	blx	r3
  do {
 800dec6:	e7cf      	b.n	800de68 <sys_check_timeouts+0xc>
      return;
 800dec8:	bf00      	nop
 800deca:	e000      	b.n	800dece <sys_check_timeouts+0x72>
      return;
 800decc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	20008801 	.word	0x20008801
 800ded8:	20008854 	.word	0x20008854
 800dedc:	20008858 	.word	0x20008858

0800dee0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dee4:	f002 ffcc 	bl	8010e80 <rand>
 800dee8:	4603      	mov	r3, r0
 800deea:	b29b      	uxth	r3, r3
 800deec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800def0:	b29b      	uxth	r3, r3
 800def2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800def6:	b29a      	uxth	r2, r3
 800def8:	4b01      	ldr	r3, [pc, #4]	@ (800df00 <udp_init+0x20>)
 800defa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800defc:	bf00      	nop
 800defe:	bd80      	pop	{r7, pc}
 800df00:	20000028 	.word	0x20000028

0800df04 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800df0a:	2300      	movs	r3, #0
 800df0c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800df0e:	4b17      	ldr	r3, [pc, #92]	@ (800df6c <udp_new_port+0x68>)
 800df10:	881b      	ldrh	r3, [r3, #0]
 800df12:	1c5a      	adds	r2, r3, #1
 800df14:	b291      	uxth	r1, r2
 800df16:	4a15      	ldr	r2, [pc, #84]	@ (800df6c <udp_new_port+0x68>)
 800df18:	8011      	strh	r1, [r2, #0]
 800df1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df1e:	4293      	cmp	r3, r2
 800df20:	d103      	bne.n	800df2a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800df22:	4b12      	ldr	r3, [pc, #72]	@ (800df6c <udp_new_port+0x68>)
 800df24:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800df28:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800df2a:	4b11      	ldr	r3, [pc, #68]	@ (800df70 <udp_new_port+0x6c>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	603b      	str	r3, [r7, #0]
 800df30:	e011      	b.n	800df56 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	8a5a      	ldrh	r2, [r3, #18]
 800df36:	4b0d      	ldr	r3, [pc, #52]	@ (800df6c <udp_new_port+0x68>)
 800df38:	881b      	ldrh	r3, [r3, #0]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d108      	bne.n	800df50 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800df3e:	88fb      	ldrh	r3, [r7, #6]
 800df40:	3301      	adds	r3, #1
 800df42:	80fb      	strh	r3, [r7, #6]
 800df44:	88fb      	ldrh	r3, [r7, #6]
 800df46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df4a:	d3e0      	bcc.n	800df0e <udp_new_port+0xa>
        return 0;
 800df4c:	2300      	movs	r3, #0
 800df4e:	e007      	b.n	800df60 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	603b      	str	r3, [r7, #0]
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d1ea      	bne.n	800df32 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800df5c:	4b03      	ldr	r3, [pc, #12]	@ (800df6c <udp_new_port+0x68>)
 800df5e:	881b      	ldrh	r3, [r3, #0]
}
 800df60:	4618      	mov	r0, r3
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr
 800df6c:	20000028 	.word	0x20000028
 800df70:	20008860 	.word	0x20008860

0800df74 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	4613      	mov	r3, r2
 800df80:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d105      	bne.n	800df94 <udp_input_local_match+0x20>
 800df88:	4b27      	ldr	r3, [pc, #156]	@ (800e028 <udp_input_local_match+0xb4>)
 800df8a:	2287      	movs	r2, #135	@ 0x87
 800df8c:	4927      	ldr	r1, [pc, #156]	@ (800e02c <udp_input_local_match+0xb8>)
 800df8e:	4828      	ldr	r0, [pc, #160]	@ (800e030 <udp_input_local_match+0xbc>)
 800df90:	f003 f876 	bl	8011080 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d105      	bne.n	800dfa6 <udp_input_local_match+0x32>
 800df9a:	4b23      	ldr	r3, [pc, #140]	@ (800e028 <udp_input_local_match+0xb4>)
 800df9c:	2288      	movs	r2, #136	@ 0x88
 800df9e:	4925      	ldr	r1, [pc, #148]	@ (800e034 <udp_input_local_match+0xc0>)
 800dfa0:	4823      	ldr	r0, [pc, #140]	@ (800e030 <udp_input_local_match+0xbc>)
 800dfa2:	f003 f86d 	bl	8011080 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	7a1b      	ldrb	r3, [r3, #8]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d00b      	beq.n	800dfc6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	7a1a      	ldrb	r2, [r3, #8]
 800dfb2:	4b21      	ldr	r3, [pc, #132]	@ (800e038 <udp_input_local_match+0xc4>)
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dfba:	3301      	adds	r3, #1
 800dfbc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d001      	beq.n	800dfc6 <udp_input_local_match+0x52>
    return 0;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	e02b      	b.n	800e01e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800dfc6:	79fb      	ldrb	r3, [r7, #7]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d018      	beq.n	800dffe <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d013      	beq.n	800dffa <udp_input_local_match+0x86>
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d00f      	beq.n	800dffa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dfda:	4b17      	ldr	r3, [pc, #92]	@ (800e038 <udp_input_local_match+0xc4>)
 800dfdc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dfde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe2:	d00a      	beq.n	800dffa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	4b13      	ldr	r3, [pc, #76]	@ (800e038 <udp_input_local_match+0xc4>)
 800dfea:	695b      	ldr	r3, [r3, #20]
 800dfec:	405a      	eors	r2, r3
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	3308      	adds	r3, #8
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d110      	bne.n	800e01c <udp_input_local_match+0xa8>
          return 1;
 800dffa:	2301      	movs	r3, #1
 800dffc:	e00f      	b.n	800e01e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d009      	beq.n	800e018 <udp_input_local_match+0xa4>
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d005      	beq.n	800e018 <udp_input_local_match+0xa4>
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681a      	ldr	r2, [r3, #0]
 800e010:	4b09      	ldr	r3, [pc, #36]	@ (800e038 <udp_input_local_match+0xc4>)
 800e012:	695b      	ldr	r3, [r3, #20]
 800e014:	429a      	cmp	r2, r3
 800e016:	d101      	bne.n	800e01c <udp_input_local_match+0xa8>
        return 1;
 800e018:	2301      	movs	r3, #1
 800e01a:	e000      	b.n	800e01e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3710      	adds	r7, #16
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	08014254 	.word	0x08014254
 800e02c:	08014284 	.word	0x08014284
 800e030:	080142a8 	.word	0x080142a8
 800e034:	080142d0 	.word	0x080142d0
 800e038:	200054d4 	.word	0x200054d4

0800e03c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e03c:	b590      	push	{r4, r7, lr}
 800e03e:	b08d      	sub	sp, #52	@ 0x34
 800e040:	af02      	add	r7, sp, #8
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e046:	2300      	movs	r3, #0
 800e048:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d105      	bne.n	800e05c <udp_input+0x20>
 800e050:	4b7c      	ldr	r3, [pc, #496]	@ (800e244 <udp_input+0x208>)
 800e052:	22cf      	movs	r2, #207	@ 0xcf
 800e054:	497c      	ldr	r1, [pc, #496]	@ (800e248 <udp_input+0x20c>)
 800e056:	487d      	ldr	r0, [pc, #500]	@ (800e24c <udp_input+0x210>)
 800e058:	f003 f812 	bl	8011080 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d105      	bne.n	800e06e <udp_input+0x32>
 800e062:	4b78      	ldr	r3, [pc, #480]	@ (800e244 <udp_input+0x208>)
 800e064:	22d0      	movs	r2, #208	@ 0xd0
 800e066:	497a      	ldr	r1, [pc, #488]	@ (800e250 <udp_input+0x214>)
 800e068:	4878      	ldr	r0, [pc, #480]	@ (800e24c <udp_input+0x210>)
 800e06a:	f003 f809 	bl	8011080 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	895b      	ldrh	r3, [r3, #10]
 800e072:	2b07      	cmp	r3, #7
 800e074:	d803      	bhi.n	800e07e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f7fa f960 	bl	800833c <pbuf_free>
    goto end;
 800e07c:	e0de      	b.n	800e23c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e084:	4b73      	ldr	r3, [pc, #460]	@ (800e254 <udp_input+0x218>)
 800e086:	695b      	ldr	r3, [r3, #20]
 800e088:	4a72      	ldr	r2, [pc, #456]	@ (800e254 <udp_input+0x218>)
 800e08a:	6812      	ldr	r2, [r2, #0]
 800e08c:	4611      	mov	r1, r2
 800e08e:	4618      	mov	r0, r3
 800e090:	f001 ffa0 	bl	800ffd4 <ip4_addr_isbroadcast_u32>
 800e094:	4603      	mov	r3, r0
 800e096:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	881b      	ldrh	r3, [r3, #0]
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7f8 fdee 	bl	8006c80 <lwip_htons>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	885b      	ldrh	r3, [r3, #2]
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7f8 fde6 	bl	8006c80 <lwip_htons>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0c4:	4b64      	ldr	r3, [pc, #400]	@ (800e258 <udp_input+0x21c>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0ca:	e054      	b.n	800e176 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ce:	8a5b      	ldrh	r3, [r3, #18]
 800e0d0:	89fa      	ldrh	r2, [r7, #14]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d14a      	bne.n	800e16c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e0d6:	7cfb      	ldrb	r3, [r7, #19]
 800e0d8:	461a      	mov	r2, r3
 800e0da:	6839      	ldr	r1, [r7, #0]
 800e0dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e0de:	f7ff ff49 	bl	800df74 <udp_input_local_match>
 800e0e2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d041      	beq.n	800e16c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ea:	7c1b      	ldrb	r3, [r3, #16]
 800e0ec:	f003 0304 	and.w	r3, r3, #4
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d11d      	bne.n	800e130 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d102      	bne.n	800e100 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0fc:	61fb      	str	r3, [r7, #28]
 800e0fe:	e017      	b.n	800e130 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e100:	7cfb      	ldrb	r3, [r7, #19]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d014      	beq.n	800e130 <udp_input+0xf4>
 800e106:	4b53      	ldr	r3, [pc, #332]	@ (800e254 <udp_input+0x218>)
 800e108:	695b      	ldr	r3, [r3, #20]
 800e10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e10e:	d10f      	bne.n	800e130 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	681a      	ldr	r2, [r3, #0]
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	3304      	adds	r3, #4
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d008      	beq.n	800e130 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	3304      	adds	r3, #4
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	429a      	cmp	r2, r3
 800e12a:	d101      	bne.n	800e130 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e12e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e132:	8a9b      	ldrh	r3, [r3, #20]
 800e134:	8a3a      	ldrh	r2, [r7, #16]
 800e136:	429a      	cmp	r2, r3
 800e138:	d118      	bne.n	800e16c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d005      	beq.n	800e14e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e144:	685a      	ldr	r2, [r3, #4]
 800e146:	4b43      	ldr	r3, [pc, #268]	@ (800e254 <udp_input+0x218>)
 800e148:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d10e      	bne.n	800e16c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e14e:	6a3b      	ldr	r3, [r7, #32]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d014      	beq.n	800e17e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e156:	68da      	ldr	r2, [r3, #12]
 800e158:	6a3b      	ldr	r3, [r7, #32]
 800e15a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e15c:	4b3e      	ldr	r3, [pc, #248]	@ (800e258 <udp_input+0x21c>)
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e162:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e164:	4a3c      	ldr	r2, [pc, #240]	@ (800e258 <udp_input+0x21c>)
 800e166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e168:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e16a:	e008      	b.n	800e17e <udp_input+0x142>
      }
    }

    prev = pcb;
 800e16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	627b      	str	r3, [r7, #36]	@ 0x24
 800e176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d1a7      	bne.n	800e0cc <udp_input+0x90>
 800e17c:	e000      	b.n	800e180 <udp_input+0x144>
        break;
 800e17e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e182:	2b00      	cmp	r3, #0
 800e184:	d101      	bne.n	800e18a <udp_input+0x14e>
    pcb = uncon_pcb;
 800e186:	69fb      	ldr	r3, [r7, #28]
 800e188:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d002      	beq.n	800e196 <udp_input+0x15a>
    for_us = 1;
 800e190:	2301      	movs	r3, #1
 800e192:	76fb      	strb	r3, [r7, #27]
 800e194:	e00a      	b.n	800e1ac <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	3304      	adds	r3, #4
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	4b2d      	ldr	r3, [pc, #180]	@ (800e254 <udp_input+0x218>)
 800e19e:	695b      	ldr	r3, [r3, #20]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	bf0c      	ite	eq
 800e1a4:	2301      	moveq	r3, #1
 800e1a6:	2300      	movne	r3, #0
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e1ac:	7efb      	ldrb	r3, [r7, #27]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d041      	beq.n	800e236 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e1b2:	2108      	movs	r1, #8
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f7fa f83b 	bl	8008230 <pbuf_remove_header>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00a      	beq.n	800e1d6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e1c0:	4b20      	ldr	r3, [pc, #128]	@ (800e244 <udp_input+0x208>)
 800e1c2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800e1c6:	4925      	ldr	r1, [pc, #148]	@ (800e25c <udp_input+0x220>)
 800e1c8:	4820      	ldr	r0, [pc, #128]	@ (800e24c <udp_input+0x210>)
 800e1ca:	f002 ff59 	bl	8011080 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7fa f8b4 	bl	800833c <pbuf_free>
      goto end;
 800e1d4:	e032      	b.n	800e23c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d012      	beq.n	800e202 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1de:	699b      	ldr	r3, [r3, #24]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d00a      	beq.n	800e1fa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e6:	699c      	ldr	r4, [r3, #24]
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ea:	69d8      	ldr	r0, [r3, #28]
 800e1ec:	8a3b      	ldrh	r3, [r7, #16]
 800e1ee:	9300      	str	r3, [sp, #0]
 800e1f0:	4b1b      	ldr	r3, [pc, #108]	@ (800e260 <udp_input+0x224>)
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e1f6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e1f8:	e021      	b.n	800e23e <udp_input+0x202>
        pbuf_free(p);
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f7fa f89e 	bl	800833c <pbuf_free>
        goto end;
 800e200:	e01c      	b.n	800e23c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e202:	7cfb      	ldrb	r3, [r7, #19]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d112      	bne.n	800e22e <udp_input+0x1f2>
 800e208:	4b12      	ldr	r3, [pc, #72]	@ (800e254 <udp_input+0x218>)
 800e20a:	695b      	ldr	r3, [r3, #20]
 800e20c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e210:	2be0      	cmp	r3, #224	@ 0xe0
 800e212:	d00c      	beq.n	800e22e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e214:	4b0f      	ldr	r3, [pc, #60]	@ (800e254 <udp_input+0x218>)
 800e216:	899b      	ldrh	r3, [r3, #12]
 800e218:	3308      	adds	r3, #8
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	b21b      	sxth	r3, r3
 800e21e:	4619      	mov	r1, r3
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f7fa f878 	bl	8008316 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e226:	2103      	movs	r1, #3
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f001 fbb3 	bl	800f994 <icmp_dest_unreach>
      pbuf_free(p);
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f7fa f884 	bl	800833c <pbuf_free>
  return;
 800e234:	e003      	b.n	800e23e <udp_input+0x202>
    pbuf_free(p);
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7fa f880 	bl	800833c <pbuf_free>
  return;
 800e23c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e23e:	372c      	adds	r7, #44	@ 0x2c
 800e240:	46bd      	mov	sp, r7
 800e242:	bd90      	pop	{r4, r7, pc}
 800e244:	08014254 	.word	0x08014254
 800e248:	080142f8 	.word	0x080142f8
 800e24c:	080142a8 	.word	0x080142a8
 800e250:	08014310 	.word	0x08014310
 800e254:	200054d4 	.word	0x200054d4
 800e258:	20008860 	.word	0x20008860
 800e25c:	0801432c 	.word	0x0801432c
 800e260:	200054e4 	.word	0x200054e4

0800e264 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b082      	sub	sp, #8
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d109      	bne.n	800e288 <udp_send+0x24>
 800e274:	4b11      	ldr	r3, [pc, #68]	@ (800e2bc <udp_send+0x58>)
 800e276:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800e27a:	4911      	ldr	r1, [pc, #68]	@ (800e2c0 <udp_send+0x5c>)
 800e27c:	4811      	ldr	r0, [pc, #68]	@ (800e2c4 <udp_send+0x60>)
 800e27e:	f002 feff 	bl	8011080 <iprintf>
 800e282:	f06f 030f 	mvn.w	r3, #15
 800e286:	e015      	b.n	800e2b4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d109      	bne.n	800e2a2 <udp_send+0x3e>
 800e28e:	4b0b      	ldr	r3, [pc, #44]	@ (800e2bc <udp_send+0x58>)
 800e290:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 800e294:	490c      	ldr	r1, [pc, #48]	@ (800e2c8 <udp_send+0x64>)
 800e296:	480b      	ldr	r0, [pc, #44]	@ (800e2c4 <udp_send+0x60>)
 800e298:	f002 fef2 	bl	8011080 <iprintf>
 800e29c:	f06f 030f 	mvn.w	r3, #15
 800e2a0:	e008      	b.n	800e2b4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	1d1a      	adds	r2, r3, #4
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	8a9b      	ldrh	r3, [r3, #20]
 800e2aa:	6839      	ldr	r1, [r7, #0]
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f000 f80d 	bl	800e2cc <udp_sendto>
 800e2b2:	4603      	mov	r3, r0
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3708      	adds	r7, #8
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	08014254 	.word	0x08014254
 800e2c0:	08014348 	.word	0x08014348
 800e2c4:	080142a8 	.word	0x080142a8
 800e2c8:	08014360 	.word	0x08014360

0800e2cc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b088      	sub	sp, #32
 800e2d0:	af02      	add	r7, sp, #8
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	607a      	str	r2, [r7, #4]
 800e2d8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d109      	bne.n	800e2f4 <udp_sendto+0x28>
 800e2e0:	4b23      	ldr	r3, [pc, #140]	@ (800e370 <udp_sendto+0xa4>)
 800e2e2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e2e6:	4923      	ldr	r1, [pc, #140]	@ (800e374 <udp_sendto+0xa8>)
 800e2e8:	4823      	ldr	r0, [pc, #140]	@ (800e378 <udp_sendto+0xac>)
 800e2ea:	f002 fec9 	bl	8011080 <iprintf>
 800e2ee:	f06f 030f 	mvn.w	r3, #15
 800e2f2:	e038      	b.n	800e366 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d109      	bne.n	800e30e <udp_sendto+0x42>
 800e2fa:	4b1d      	ldr	r3, [pc, #116]	@ (800e370 <udp_sendto+0xa4>)
 800e2fc:	f240 2219 	movw	r2, #537	@ 0x219
 800e300:	491e      	ldr	r1, [pc, #120]	@ (800e37c <udp_sendto+0xb0>)
 800e302:	481d      	ldr	r0, [pc, #116]	@ (800e378 <udp_sendto+0xac>)
 800e304:	f002 febc 	bl	8011080 <iprintf>
 800e308:	f06f 030f 	mvn.w	r3, #15
 800e30c:	e02b      	b.n	800e366 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d109      	bne.n	800e328 <udp_sendto+0x5c>
 800e314:	4b16      	ldr	r3, [pc, #88]	@ (800e370 <udp_sendto+0xa4>)
 800e316:	f240 221a 	movw	r2, #538	@ 0x21a
 800e31a:	4919      	ldr	r1, [pc, #100]	@ (800e380 <udp_sendto+0xb4>)
 800e31c:	4816      	ldr	r0, [pc, #88]	@ (800e378 <udp_sendto+0xac>)
 800e31e:	f002 feaf 	bl	8011080 <iprintf>
 800e322:	f06f 030f 	mvn.w	r3, #15
 800e326:	e01e      	b.n	800e366 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	7a1b      	ldrb	r3, [r3, #8]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d006      	beq.n	800e33e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	7a1b      	ldrb	r3, [r3, #8]
 800e334:	4618      	mov	r0, r3
 800e336:	f7f9 fca1 	bl	8007c7c <netif_get_by_index>
 800e33a:	6178      	str	r0, [r7, #20]
 800e33c:	e003      	b.n	800e346 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f001 fbb2 	bl	800faa8 <ip4_route>
 800e344:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d102      	bne.n	800e352 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800e34c:	f06f 0303 	mvn.w	r3, #3
 800e350:	e009      	b.n	800e366 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800e352:	887a      	ldrh	r2, [r7, #2]
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	9300      	str	r3, [sp, #0]
 800e358:	4613      	mov	r3, r2
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	68b9      	ldr	r1, [r7, #8]
 800e35e:	68f8      	ldr	r0, [r7, #12]
 800e360:	f000 f810 	bl	800e384 <udp_sendto_if>
 800e364:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e366:	4618      	mov	r0, r3
 800e368:	3718      	adds	r7, #24
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	08014254 	.word	0x08014254
 800e374:	08014378 	.word	0x08014378
 800e378:	080142a8 	.word	0x080142a8
 800e37c:	08014390 	.word	0x08014390
 800e380:	080143ac 	.word	0x080143ac

0800e384 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b088      	sub	sp, #32
 800e388:	af02      	add	r7, sp, #8
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	607a      	str	r2, [r7, #4]
 800e390:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d109      	bne.n	800e3ac <udp_sendto_if+0x28>
 800e398:	4b2e      	ldr	r3, [pc, #184]	@ (800e454 <udp_sendto_if+0xd0>)
 800e39a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e39e:	492e      	ldr	r1, [pc, #184]	@ (800e458 <udp_sendto_if+0xd4>)
 800e3a0:	482e      	ldr	r0, [pc, #184]	@ (800e45c <udp_sendto_if+0xd8>)
 800e3a2:	f002 fe6d 	bl	8011080 <iprintf>
 800e3a6:	f06f 030f 	mvn.w	r3, #15
 800e3aa:	e04f      	b.n	800e44c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d109      	bne.n	800e3c6 <udp_sendto_if+0x42>
 800e3b2:	4b28      	ldr	r3, [pc, #160]	@ (800e454 <udp_sendto_if+0xd0>)
 800e3b4:	f240 2281 	movw	r2, #641	@ 0x281
 800e3b8:	4929      	ldr	r1, [pc, #164]	@ (800e460 <udp_sendto_if+0xdc>)
 800e3ba:	4828      	ldr	r0, [pc, #160]	@ (800e45c <udp_sendto_if+0xd8>)
 800e3bc:	f002 fe60 	bl	8011080 <iprintf>
 800e3c0:	f06f 030f 	mvn.w	r3, #15
 800e3c4:	e042      	b.n	800e44c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d109      	bne.n	800e3e0 <udp_sendto_if+0x5c>
 800e3cc:	4b21      	ldr	r3, [pc, #132]	@ (800e454 <udp_sendto_if+0xd0>)
 800e3ce:	f240 2282 	movw	r2, #642	@ 0x282
 800e3d2:	4924      	ldr	r1, [pc, #144]	@ (800e464 <udp_sendto_if+0xe0>)
 800e3d4:	4821      	ldr	r0, [pc, #132]	@ (800e45c <udp_sendto_if+0xd8>)
 800e3d6:	f002 fe53 	bl	8011080 <iprintf>
 800e3da:	f06f 030f 	mvn.w	r3, #15
 800e3de:	e035      	b.n	800e44c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e3e0:	6a3b      	ldr	r3, [r7, #32]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d109      	bne.n	800e3fa <udp_sendto_if+0x76>
 800e3e6:	4b1b      	ldr	r3, [pc, #108]	@ (800e454 <udp_sendto_if+0xd0>)
 800e3e8:	f240 2283 	movw	r2, #643	@ 0x283
 800e3ec:	491e      	ldr	r1, [pc, #120]	@ (800e468 <udp_sendto_if+0xe4>)
 800e3ee:	481b      	ldr	r0, [pc, #108]	@ (800e45c <udp_sendto_if+0xd8>)
 800e3f0:	f002 fe46 	bl	8011080 <iprintf>
 800e3f4:	f06f 030f 	mvn.w	r3, #15
 800e3f8:	e028      	b.n	800e44c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d009      	beq.n	800e414 <udp_sendto_if+0x90>
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d005      	beq.n	800e414 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e410:	2be0      	cmp	r3, #224	@ 0xe0
 800e412:	d103      	bne.n	800e41c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e414:	6a3b      	ldr	r3, [r7, #32]
 800e416:	3304      	adds	r3, #4
 800e418:	617b      	str	r3, [r7, #20]
 800e41a:	e00b      	b.n	800e434 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681a      	ldr	r2, [r3, #0]
 800e420:	6a3b      	ldr	r3, [r7, #32]
 800e422:	3304      	adds	r3, #4
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	429a      	cmp	r2, r3
 800e428:	d002      	beq.n	800e430 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e42a:	f06f 0303 	mvn.w	r3, #3
 800e42e:	e00d      	b.n	800e44c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e434:	887a      	ldrh	r2, [r7, #2]
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	9301      	str	r3, [sp, #4]
 800e43a:	6a3b      	ldr	r3, [r7, #32]
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	4613      	mov	r3, r2
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	68b9      	ldr	r1, [r7, #8]
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f000 f811 	bl	800e46c <udp_sendto_if_src>
 800e44a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3718      	adds	r7, #24
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	08014254 	.word	0x08014254
 800e458:	080143c8 	.word	0x080143c8
 800e45c:	080142a8 	.word	0x080142a8
 800e460:	080143e4 	.word	0x080143e4
 800e464:	08014400 	.word	0x08014400
 800e468:	08014420 	.word	0x08014420

0800e46c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b08c      	sub	sp, #48	@ 0x30
 800e470:	af04      	add	r7, sp, #16
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	607a      	str	r2, [r7, #4]
 800e478:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d109      	bne.n	800e494 <udp_sendto_if_src+0x28>
 800e480:	4b65      	ldr	r3, [pc, #404]	@ (800e618 <udp_sendto_if_src+0x1ac>)
 800e482:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800e486:	4965      	ldr	r1, [pc, #404]	@ (800e61c <udp_sendto_if_src+0x1b0>)
 800e488:	4865      	ldr	r0, [pc, #404]	@ (800e620 <udp_sendto_if_src+0x1b4>)
 800e48a:	f002 fdf9 	bl	8011080 <iprintf>
 800e48e:	f06f 030f 	mvn.w	r3, #15
 800e492:	e0bc      	b.n	800e60e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d109      	bne.n	800e4ae <udp_sendto_if_src+0x42>
 800e49a:	4b5f      	ldr	r3, [pc, #380]	@ (800e618 <udp_sendto_if_src+0x1ac>)
 800e49c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800e4a0:	4960      	ldr	r1, [pc, #384]	@ (800e624 <udp_sendto_if_src+0x1b8>)
 800e4a2:	485f      	ldr	r0, [pc, #380]	@ (800e620 <udp_sendto_if_src+0x1b4>)
 800e4a4:	f002 fdec 	bl	8011080 <iprintf>
 800e4a8:	f06f 030f 	mvn.w	r3, #15
 800e4ac:	e0af      	b.n	800e60e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d109      	bne.n	800e4c8 <udp_sendto_if_src+0x5c>
 800e4b4:	4b58      	ldr	r3, [pc, #352]	@ (800e618 <udp_sendto_if_src+0x1ac>)
 800e4b6:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800e4ba:	495b      	ldr	r1, [pc, #364]	@ (800e628 <udp_sendto_if_src+0x1bc>)
 800e4bc:	4858      	ldr	r0, [pc, #352]	@ (800e620 <udp_sendto_if_src+0x1b4>)
 800e4be:	f002 fddf 	bl	8011080 <iprintf>
 800e4c2:	f06f 030f 	mvn.w	r3, #15
 800e4c6:	e0a2      	b.n	800e60e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d109      	bne.n	800e4e2 <udp_sendto_if_src+0x76>
 800e4ce:	4b52      	ldr	r3, [pc, #328]	@ (800e618 <udp_sendto_if_src+0x1ac>)
 800e4d0:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800e4d4:	4955      	ldr	r1, [pc, #340]	@ (800e62c <udp_sendto_if_src+0x1c0>)
 800e4d6:	4852      	ldr	r0, [pc, #328]	@ (800e620 <udp_sendto_if_src+0x1b4>)
 800e4d8:	f002 fdd2 	bl	8011080 <iprintf>
 800e4dc:	f06f 030f 	mvn.w	r3, #15
 800e4e0:	e095      	b.n	800e60e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d109      	bne.n	800e4fc <udp_sendto_if_src+0x90>
 800e4e8:	4b4b      	ldr	r3, [pc, #300]	@ (800e618 <udp_sendto_if_src+0x1ac>)
 800e4ea:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800e4ee:	4950      	ldr	r1, [pc, #320]	@ (800e630 <udp_sendto_if_src+0x1c4>)
 800e4f0:	484b      	ldr	r0, [pc, #300]	@ (800e620 <udp_sendto_if_src+0x1b4>)
 800e4f2:	f002 fdc5 	bl	8011080 <iprintf>
 800e4f6:	f06f 030f 	mvn.w	r3, #15
 800e4fa:	e088      	b.n	800e60e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	8a5b      	ldrh	r3, [r3, #18]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d10f      	bne.n	800e524 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e504:	68f9      	ldr	r1, [r7, #12]
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	8a5b      	ldrh	r3, [r3, #18]
 800e50a:	461a      	mov	r2, r3
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f000 f893 	bl	800e638 <udp_bind>
 800e512:	4603      	mov	r3, r0
 800e514:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e516:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d002      	beq.n	800e524 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e51e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e522:	e074      	b.n	800e60e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	891b      	ldrh	r3, [r3, #8]
 800e528:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d902      	bls.n	800e536 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e530:	f04f 33ff 	mov.w	r3, #4294967295
 800e534:	e06b      	b.n	800e60e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e536:	2108      	movs	r1, #8
 800e538:	68b8      	ldr	r0, [r7, #8]
 800e53a:	f7f9 fe69 	bl	8008210 <pbuf_add_header>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d015      	beq.n	800e570 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e544:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e548:	2108      	movs	r1, #8
 800e54a:	2022      	movs	r0, #34	@ 0x22
 800e54c:	f7f9 fc12 	bl	8007d74 <pbuf_alloc>
 800e550:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d102      	bne.n	800e55e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e558:	f04f 33ff 	mov.w	r3, #4294967295
 800e55c:	e057      	b.n	800e60e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	891b      	ldrh	r3, [r3, #8]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d006      	beq.n	800e574 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e566:	68b9      	ldr	r1, [r7, #8]
 800e568:	69f8      	ldr	r0, [r7, #28]
 800e56a:	f7f9 ffff 	bl	800856c <pbuf_chain>
 800e56e:	e001      	b.n	800e574 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	895b      	ldrh	r3, [r3, #10]
 800e578:	2b07      	cmp	r3, #7
 800e57a:	d806      	bhi.n	800e58a <udp_sendto_if_src+0x11e>
 800e57c:	4b26      	ldr	r3, [pc, #152]	@ (800e618 <udp_sendto_if_src+0x1ac>)
 800e57e:	f240 320d 	movw	r2, #781	@ 0x30d
 800e582:	492c      	ldr	r1, [pc, #176]	@ (800e634 <udp_sendto_if_src+0x1c8>)
 800e584:	4826      	ldr	r0, [pc, #152]	@ (800e620 <udp_sendto_if_src+0x1b4>)
 800e586:	f002 fd7b 	bl	8011080 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	8a5b      	ldrh	r3, [r3, #18]
 800e594:	4618      	mov	r0, r3
 800e596:	f7f8 fb73 	bl	8006c80 <lwip_htons>
 800e59a:	4603      	mov	r3, r0
 800e59c:	461a      	mov	r2, r3
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e5a2:	887b      	ldrh	r3, [r7, #2]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7f8 fb6b 	bl	8006c80 <lwip_htons>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	719a      	strb	r2, [r3, #6]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	891b      	ldrh	r3, [r3, #8]
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7f8 fb5d 	bl	8006c80 <lwip_htons>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e5ce:	2311      	movs	r3, #17
 800e5d0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	7adb      	ldrb	r3, [r3, #11]
 800e5d6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	7a9b      	ldrb	r3, [r3, #10]
 800e5dc:	7cb9      	ldrb	r1, [r7, #18]
 800e5de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5e0:	9202      	str	r2, [sp, #8]
 800e5e2:	7cfa      	ldrb	r2, [r7, #19]
 800e5e4:	9201      	str	r2, [sp, #4]
 800e5e6:	9300      	str	r3, [sp, #0]
 800e5e8:	460b      	mov	r3, r1
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e5ee:	69f8      	ldr	r0, [r7, #28]
 800e5f0:	f001 fc42 	bl	800fe78 <ip4_output_if_src>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e5f8:	69fa      	ldr	r2, [r7, #28]
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d004      	beq.n	800e60a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800e600:	69f8      	ldr	r0, [r7, #28]
 800e602:	f7f9 fe9b 	bl	800833c <pbuf_free>
    q = NULL;
 800e606:	2300      	movs	r3, #0
 800e608:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e60a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3720      	adds	r7, #32
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	08014254 	.word	0x08014254
 800e61c:	08014440 	.word	0x08014440
 800e620:	080142a8 	.word	0x080142a8
 800e624:	08014460 	.word	0x08014460
 800e628:	08014480 	.word	0x08014480
 800e62c:	080144a4 	.word	0x080144a4
 800e630:	080144c8 	.word	0x080144c8
 800e634:	080144ec 	.word	0x080144ec

0800e638 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b086      	sub	sp, #24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	4613      	mov	r3, r2
 800e644:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d101      	bne.n	800e650 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e64c:	4b39      	ldr	r3, [pc, #228]	@ (800e734 <udp_bind+0xfc>)
 800e64e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d109      	bne.n	800e66a <udp_bind+0x32>
 800e656:	4b38      	ldr	r3, [pc, #224]	@ (800e738 <udp_bind+0x100>)
 800e658:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800e65c:	4937      	ldr	r1, [pc, #220]	@ (800e73c <udp_bind+0x104>)
 800e65e:	4838      	ldr	r0, [pc, #224]	@ (800e740 <udp_bind+0x108>)
 800e660:	f002 fd0e 	bl	8011080 <iprintf>
 800e664:	f06f 030f 	mvn.w	r3, #15
 800e668:	e060      	b.n	800e72c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e66a:	2300      	movs	r3, #0
 800e66c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e66e:	4b35      	ldr	r3, [pc, #212]	@ (800e744 <udp_bind+0x10c>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	617b      	str	r3, [r7, #20]
 800e674:	e009      	b.n	800e68a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e676:	68fa      	ldr	r2, [r7, #12]
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d102      	bne.n	800e684 <udp_bind+0x4c>
      rebind = 1;
 800e67e:	2301      	movs	r3, #1
 800e680:	74fb      	strb	r3, [r7, #19]
      break;
 800e682:	e005      	b.n	800e690 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	617b      	str	r3, [r7, #20]
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d1f2      	bne.n	800e676 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e690:	88fb      	ldrh	r3, [r7, #6]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d109      	bne.n	800e6aa <udp_bind+0x72>
    port = udp_new_port();
 800e696:	f7ff fc35 	bl	800df04 <udp_new_port>
 800e69a:	4603      	mov	r3, r0
 800e69c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e69e:	88fb      	ldrh	r3, [r7, #6]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d12c      	bne.n	800e6fe <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e6a4:	f06f 0307 	mvn.w	r3, #7
 800e6a8:	e040      	b.n	800e72c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e6aa:	4b26      	ldr	r3, [pc, #152]	@ (800e744 <udp_bind+0x10c>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	617b      	str	r3, [r7, #20]
 800e6b0:	e022      	b.n	800e6f8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e6b2:	68fa      	ldr	r2, [r7, #12]
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d01b      	beq.n	800e6f2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	8a5b      	ldrh	r3, [r3, #18]
 800e6be:	88fa      	ldrh	r2, [r7, #6]
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d116      	bne.n	800e6f2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d00d      	beq.n	800e6ec <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d00a      	beq.n	800e6ec <udp_bind+0xb4>
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d006      	beq.n	800e6ec <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e6de:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d003      	beq.n	800e6ec <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d102      	bne.n	800e6f2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e6ec:	f06f 0307 	mvn.w	r3, #7
 800e6f0:	e01c      	b.n	800e72c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	617b      	str	r3, [r7, #20]
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1d9      	bne.n	800e6b2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d002      	beq.n	800e70a <udp_bind+0xd2>
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	e000      	b.n	800e70c <udp_bind+0xd4>
 800e70a:	2300      	movs	r3, #0
 800e70c:	68fa      	ldr	r2, [r7, #12]
 800e70e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	88fa      	ldrh	r2, [r7, #6]
 800e714:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e716:	7cfb      	ldrb	r3, [r7, #19]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d106      	bne.n	800e72a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e71c:	4b09      	ldr	r3, [pc, #36]	@ (800e744 <udp_bind+0x10c>)
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e724:	4a07      	ldr	r2, [pc, #28]	@ (800e744 <udp_bind+0x10c>)
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e72a:	2300      	movs	r3, #0
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3718      	adds	r7, #24
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	08014d70 	.word	0x08014d70
 800e738:	08014254 	.word	0x08014254
 800e73c:	0801451c 	.word	0x0801451c
 800e740:	080142a8 	.word	0x080142a8
 800e744:	20008860 	.word	0x20008860

0800e748 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b086      	sub	sp, #24
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	60f8      	str	r0, [r7, #12]
 800e750:	60b9      	str	r1, [r7, #8]
 800e752:	4613      	mov	r3, r2
 800e754:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d109      	bne.n	800e770 <udp_connect+0x28>
 800e75c:	4b2c      	ldr	r3, [pc, #176]	@ (800e810 <udp_connect+0xc8>)
 800e75e:	f240 4235 	movw	r2, #1077	@ 0x435
 800e762:	492c      	ldr	r1, [pc, #176]	@ (800e814 <udp_connect+0xcc>)
 800e764:	482c      	ldr	r0, [pc, #176]	@ (800e818 <udp_connect+0xd0>)
 800e766:	f002 fc8b 	bl	8011080 <iprintf>
 800e76a:	f06f 030f 	mvn.w	r3, #15
 800e76e:	e04b      	b.n	800e808 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d109      	bne.n	800e78a <udp_connect+0x42>
 800e776:	4b26      	ldr	r3, [pc, #152]	@ (800e810 <udp_connect+0xc8>)
 800e778:	f240 4236 	movw	r2, #1078	@ 0x436
 800e77c:	4927      	ldr	r1, [pc, #156]	@ (800e81c <udp_connect+0xd4>)
 800e77e:	4826      	ldr	r0, [pc, #152]	@ (800e818 <udp_connect+0xd0>)
 800e780:	f002 fc7e 	bl	8011080 <iprintf>
 800e784:	f06f 030f 	mvn.w	r3, #15
 800e788:	e03e      	b.n	800e808 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	8a5b      	ldrh	r3, [r3, #18]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d10f      	bne.n	800e7b2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e792:	68f9      	ldr	r1, [r7, #12]
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	8a5b      	ldrh	r3, [r3, #18]
 800e798:	461a      	mov	r2, r3
 800e79a:	68f8      	ldr	r0, [r7, #12]
 800e79c:	f7ff ff4c 	bl	800e638 <udp_bind>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e7a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d002      	beq.n	800e7b2 <udp_connect+0x6a>
      return err;
 800e7ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e7b0:	e02a      	b.n	800e808 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d002      	beq.n	800e7be <udp_connect+0x76>
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	e000      	b.n	800e7c0 <udp_connect+0x78>
 800e7be:	2300      	movs	r3, #0
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	88fa      	ldrh	r2, [r7, #6]
 800e7c8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	7c1b      	ldrb	r3, [r3, #16]
 800e7ce:	f043 0304 	orr.w	r3, r3, #4
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e7d8:	4b11      	ldr	r3, [pc, #68]	@ (800e820 <udp_connect+0xd8>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	617b      	str	r3, [r7, #20]
 800e7de:	e008      	b.n	800e7f2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800e7e0:	68fa      	ldr	r2, [r7, #12]
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d101      	bne.n	800e7ec <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	e00d      	b.n	800e808 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	68db      	ldr	r3, [r3, #12]
 800e7f0:	617b      	str	r3, [r7, #20]
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d1f3      	bne.n	800e7e0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e7f8:	4b09      	ldr	r3, [pc, #36]	@ (800e820 <udp_connect+0xd8>)
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e800:	4a07      	ldr	r2, [pc, #28]	@ (800e820 <udp_connect+0xd8>)
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e806:	2300      	movs	r3, #0
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3718      	adds	r7, #24
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	08014254 	.word	0x08014254
 800e814:	08014534 	.word	0x08014534
 800e818:	080142a8 	.word	0x080142a8
 800e81c:	08014550 	.word	0x08014550
 800e820:	20008860 	.word	0x20008860

0800e824 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d107      	bne.n	800e846 <udp_recv+0x22>
 800e836:	4b08      	ldr	r3, [pc, #32]	@ (800e858 <udp_recv+0x34>)
 800e838:	f240 428a 	movw	r2, #1162	@ 0x48a
 800e83c:	4907      	ldr	r1, [pc, #28]	@ (800e85c <udp_recv+0x38>)
 800e83e:	4808      	ldr	r0, [pc, #32]	@ (800e860 <udp_recv+0x3c>)
 800e840:	f002 fc1e 	bl	8011080 <iprintf>
 800e844:	e005      	b.n	800e852 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	68ba      	ldr	r2, [r7, #8]
 800e84a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	61da      	str	r2, [r3, #28]
}
 800e852:	3710      	adds	r7, #16
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	08014254 	.word	0x08014254
 800e85c:	08014588 	.word	0x08014588
 800e860:	080142a8 	.word	0x080142a8

0800e864 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e86a:	2000      	movs	r0, #0
 800e86c:	f7f8 fe80 	bl	8007570 <memp_malloc>
 800e870:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d007      	beq.n	800e888 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e878:	2220      	movs	r2, #32
 800e87a:	2100      	movs	r1, #0
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f002 fca0 	bl	80111c2 <memset>
    pcb->ttl = UDP_TTL;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	22ff      	movs	r2, #255	@ 0xff
 800e886:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e888:	687b      	ldr	r3, [r7, #4]
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3708      	adds	r7, #8
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
	...

0800e894 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e894:	b480      	push	{r7}
 800e896:	b085      	sub	sp, #20
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d01e      	beq.n	800e8e2 <udp_netif_ip_addr_changed+0x4e>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d01a      	beq.n	800e8e2 <udp_netif_ip_addr_changed+0x4e>
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d017      	beq.n	800e8e2 <udp_netif_ip_addr_changed+0x4e>
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d013      	beq.n	800e8e2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e8ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e8f0 <udp_netif_ip_addr_changed+0x5c>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	60fb      	str	r3, [r7, #12]
 800e8c0:	e00c      	b.n	800e8dc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d103      	bne.n	800e8d6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	68db      	ldr	r3, [r3, #12]
 800e8da:	60fb      	str	r3, [r7, #12]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d1ef      	bne.n	800e8c2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e8e2:	bf00      	nop
 800e8e4:	3714      	adds	r7, #20
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr
 800e8ee:	bf00      	nop
 800e8f0:	20008860 	.word	0x20008860

0800e8f4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e8fc:	4915      	ldr	r1, [pc, #84]	@ (800e954 <etharp_free_entry+0x60>)
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	4613      	mov	r3, r2
 800e902:	005b      	lsls	r3, r3, #1
 800e904:	4413      	add	r3, r2
 800e906:	00db      	lsls	r3, r3, #3
 800e908:	440b      	add	r3, r1
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d013      	beq.n	800e938 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e910:	4910      	ldr	r1, [pc, #64]	@ (800e954 <etharp_free_entry+0x60>)
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	4613      	mov	r3, r2
 800e916:	005b      	lsls	r3, r3, #1
 800e918:	4413      	add	r3, r2
 800e91a:	00db      	lsls	r3, r3, #3
 800e91c:	440b      	add	r3, r1
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	4618      	mov	r0, r3
 800e922:	f7f9 fd0b 	bl	800833c <pbuf_free>
    arp_table[i].q = NULL;
 800e926:	490b      	ldr	r1, [pc, #44]	@ (800e954 <etharp_free_entry+0x60>)
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	4613      	mov	r3, r2
 800e92c:	005b      	lsls	r3, r3, #1
 800e92e:	4413      	add	r3, r2
 800e930:	00db      	lsls	r3, r3, #3
 800e932:	440b      	add	r3, r1
 800e934:	2200      	movs	r2, #0
 800e936:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e938:	4906      	ldr	r1, [pc, #24]	@ (800e954 <etharp_free_entry+0x60>)
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	4613      	mov	r3, r2
 800e93e:	005b      	lsls	r3, r3, #1
 800e940:	4413      	add	r3, r2
 800e942:	00db      	lsls	r3, r3, #3
 800e944:	440b      	add	r3, r1
 800e946:	3314      	adds	r3, #20
 800e948:	2200      	movs	r2, #0
 800e94a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e94c:	bf00      	nop
 800e94e:	3708      	adds	r7, #8
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	20008864 	.word	0x20008864

0800e958 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e95e:	2300      	movs	r3, #0
 800e960:	607b      	str	r3, [r7, #4]
 800e962:	e096      	b.n	800ea92 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e964:	494f      	ldr	r1, [pc, #316]	@ (800eaa4 <etharp_tmr+0x14c>)
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	4613      	mov	r3, r2
 800e96a:	005b      	lsls	r3, r3, #1
 800e96c:	4413      	add	r3, r2
 800e96e:	00db      	lsls	r3, r3, #3
 800e970:	440b      	add	r3, r1
 800e972:	3314      	adds	r3, #20
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e978:	78fb      	ldrb	r3, [r7, #3]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	f000 8086 	beq.w	800ea8c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e980:	4948      	ldr	r1, [pc, #288]	@ (800eaa4 <etharp_tmr+0x14c>)
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	4613      	mov	r3, r2
 800e986:	005b      	lsls	r3, r3, #1
 800e988:	4413      	add	r3, r2
 800e98a:	00db      	lsls	r3, r3, #3
 800e98c:	440b      	add	r3, r1
 800e98e:	3312      	adds	r3, #18
 800e990:	881b      	ldrh	r3, [r3, #0]
 800e992:	3301      	adds	r3, #1
 800e994:	b298      	uxth	r0, r3
 800e996:	4943      	ldr	r1, [pc, #268]	@ (800eaa4 <etharp_tmr+0x14c>)
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	4613      	mov	r3, r2
 800e99c:	005b      	lsls	r3, r3, #1
 800e99e:	4413      	add	r3, r2
 800e9a0:	00db      	lsls	r3, r3, #3
 800e9a2:	440b      	add	r3, r1
 800e9a4:	3312      	adds	r3, #18
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e9aa:	493e      	ldr	r1, [pc, #248]	@ (800eaa4 <etharp_tmr+0x14c>)
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	005b      	lsls	r3, r3, #1
 800e9b2:	4413      	add	r3, r2
 800e9b4:	00db      	lsls	r3, r3, #3
 800e9b6:	440b      	add	r3, r1
 800e9b8:	3312      	adds	r3, #18
 800e9ba:	881b      	ldrh	r3, [r3, #0]
 800e9bc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800e9c0:	d215      	bcs.n	800e9ee <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e9c2:	4938      	ldr	r1, [pc, #224]	@ (800eaa4 <etharp_tmr+0x14c>)
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	4613      	mov	r3, r2
 800e9c8:	005b      	lsls	r3, r3, #1
 800e9ca:	4413      	add	r3, r2
 800e9cc:	00db      	lsls	r3, r3, #3
 800e9ce:	440b      	add	r3, r1
 800e9d0:	3314      	adds	r3, #20
 800e9d2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d10e      	bne.n	800e9f6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e9d8:	4932      	ldr	r1, [pc, #200]	@ (800eaa4 <etharp_tmr+0x14c>)
 800e9da:	687a      	ldr	r2, [r7, #4]
 800e9dc:	4613      	mov	r3, r2
 800e9de:	005b      	lsls	r3, r3, #1
 800e9e0:	4413      	add	r3, r2
 800e9e2:	00db      	lsls	r3, r3, #3
 800e9e4:	440b      	add	r3, r1
 800e9e6:	3312      	adds	r3, #18
 800e9e8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e9ea:	2b04      	cmp	r3, #4
 800e9ec:	d903      	bls.n	800e9f6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f7ff ff80 	bl	800e8f4 <etharp_free_entry>
 800e9f4:	e04a      	b.n	800ea8c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e9f6:	492b      	ldr	r1, [pc, #172]	@ (800eaa4 <etharp_tmr+0x14c>)
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	4613      	mov	r3, r2
 800e9fc:	005b      	lsls	r3, r3, #1
 800e9fe:	4413      	add	r3, r2
 800ea00:	00db      	lsls	r3, r3, #3
 800ea02:	440b      	add	r3, r1
 800ea04:	3314      	adds	r3, #20
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	2b03      	cmp	r3, #3
 800ea0a:	d10a      	bne.n	800ea22 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ea0c:	4925      	ldr	r1, [pc, #148]	@ (800eaa4 <etharp_tmr+0x14c>)
 800ea0e:	687a      	ldr	r2, [r7, #4]
 800ea10:	4613      	mov	r3, r2
 800ea12:	005b      	lsls	r3, r3, #1
 800ea14:	4413      	add	r3, r2
 800ea16:	00db      	lsls	r3, r3, #3
 800ea18:	440b      	add	r3, r1
 800ea1a:	3314      	adds	r3, #20
 800ea1c:	2204      	movs	r2, #4
 800ea1e:	701a      	strb	r2, [r3, #0]
 800ea20:	e034      	b.n	800ea8c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ea22:	4920      	ldr	r1, [pc, #128]	@ (800eaa4 <etharp_tmr+0x14c>)
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	4613      	mov	r3, r2
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	4413      	add	r3, r2
 800ea2c:	00db      	lsls	r3, r3, #3
 800ea2e:	440b      	add	r3, r1
 800ea30:	3314      	adds	r3, #20
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	2b04      	cmp	r3, #4
 800ea36:	d10a      	bne.n	800ea4e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ea38:	491a      	ldr	r1, [pc, #104]	@ (800eaa4 <etharp_tmr+0x14c>)
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	4613      	mov	r3, r2
 800ea3e:	005b      	lsls	r3, r3, #1
 800ea40:	4413      	add	r3, r2
 800ea42:	00db      	lsls	r3, r3, #3
 800ea44:	440b      	add	r3, r1
 800ea46:	3314      	adds	r3, #20
 800ea48:	2202      	movs	r2, #2
 800ea4a:	701a      	strb	r2, [r3, #0]
 800ea4c:	e01e      	b.n	800ea8c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ea4e:	4915      	ldr	r1, [pc, #84]	@ (800eaa4 <etharp_tmr+0x14c>)
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	4613      	mov	r3, r2
 800ea54:	005b      	lsls	r3, r3, #1
 800ea56:	4413      	add	r3, r2
 800ea58:	00db      	lsls	r3, r3, #3
 800ea5a:	440b      	add	r3, r1
 800ea5c:	3314      	adds	r3, #20
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d113      	bne.n	800ea8c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ea64:	490f      	ldr	r1, [pc, #60]	@ (800eaa4 <etharp_tmr+0x14c>)
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	4613      	mov	r3, r2
 800ea6a:	005b      	lsls	r3, r3, #1
 800ea6c:	4413      	add	r3, r2
 800ea6e:	00db      	lsls	r3, r3, #3
 800ea70:	440b      	add	r3, r1
 800ea72:	3308      	adds	r3, #8
 800ea74:	6818      	ldr	r0, [r3, #0]
 800ea76:	687a      	ldr	r2, [r7, #4]
 800ea78:	4613      	mov	r3, r2
 800ea7a:	005b      	lsls	r3, r3, #1
 800ea7c:	4413      	add	r3, r2
 800ea7e:	00db      	lsls	r3, r3, #3
 800ea80:	4a08      	ldr	r2, [pc, #32]	@ (800eaa4 <etharp_tmr+0x14c>)
 800ea82:	4413      	add	r3, r2
 800ea84:	3304      	adds	r3, #4
 800ea86:	4619      	mov	r1, r3
 800ea88:	f000 fe6e 	bl	800f768 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	3301      	adds	r3, #1
 800ea90:	607b      	str	r3, [r7, #4]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2b09      	cmp	r3, #9
 800ea96:	f77f af65 	ble.w	800e964 <etharp_tmr+0xc>
      }
    }
  }
}
 800ea9a:	bf00      	nop
 800ea9c:	bf00      	nop
 800ea9e:	3708      	adds	r7, #8
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	20008864 	.word	0x20008864

0800eaa8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b08a      	sub	sp, #40	@ 0x28
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	460b      	mov	r3, r1
 800eab2:	607a      	str	r2, [r7, #4]
 800eab4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800eab6:	230a      	movs	r3, #10
 800eab8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eaba:	230a      	movs	r3, #10
 800eabc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800eabe:	230a      	movs	r3, #10
 800eac0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800eac2:	2300      	movs	r3, #0
 800eac4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800eac6:	230a      	movs	r3, #10
 800eac8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800eaca:	2300      	movs	r3, #0
 800eacc:	83bb      	strh	r3, [r7, #28]
 800eace:	2300      	movs	r3, #0
 800ead0:	837b      	strh	r3, [r7, #26]
 800ead2:	2300      	movs	r3, #0
 800ead4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ead6:	2300      	movs	r3, #0
 800ead8:	843b      	strh	r3, [r7, #32]
 800eada:	e0ae      	b.n	800ec3a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800eadc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eae0:	49a6      	ldr	r1, [pc, #664]	@ (800ed7c <etharp_find_entry+0x2d4>)
 800eae2:	4613      	mov	r3, r2
 800eae4:	005b      	lsls	r3, r3, #1
 800eae6:	4413      	add	r3, r2
 800eae8:	00db      	lsls	r3, r3, #3
 800eaea:	440b      	add	r3, r1
 800eaec:	3314      	adds	r3, #20
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800eaf2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800eaf6:	2b0a      	cmp	r3, #10
 800eaf8:	d105      	bne.n	800eb06 <etharp_find_entry+0x5e>
 800eafa:	7dfb      	ldrb	r3, [r7, #23]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d102      	bne.n	800eb06 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800eb00:	8c3b      	ldrh	r3, [r7, #32]
 800eb02:	847b      	strh	r3, [r7, #34]	@ 0x22
 800eb04:	e095      	b.n	800ec32 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800eb06:	7dfb      	ldrb	r3, [r7, #23]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	f000 8092 	beq.w	800ec32 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800eb0e:	7dfb      	ldrb	r3, [r7, #23]
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d009      	beq.n	800eb28 <etharp_find_entry+0x80>
 800eb14:	7dfb      	ldrb	r3, [r7, #23]
 800eb16:	2b01      	cmp	r3, #1
 800eb18:	d806      	bhi.n	800eb28 <etharp_find_entry+0x80>
 800eb1a:	4b99      	ldr	r3, [pc, #612]	@ (800ed80 <etharp_find_entry+0x2d8>)
 800eb1c:	f240 1223 	movw	r2, #291	@ 0x123
 800eb20:	4998      	ldr	r1, [pc, #608]	@ (800ed84 <etharp_find_entry+0x2dc>)
 800eb22:	4899      	ldr	r0, [pc, #612]	@ (800ed88 <etharp_find_entry+0x2e0>)
 800eb24:	f002 faac 	bl	8011080 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d020      	beq.n	800eb70 <etharp_find_entry+0xc8>
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	6819      	ldr	r1, [r3, #0]
 800eb32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb36:	4891      	ldr	r0, [pc, #580]	@ (800ed7c <etharp_find_entry+0x2d4>)
 800eb38:	4613      	mov	r3, r2
 800eb3a:	005b      	lsls	r3, r3, #1
 800eb3c:	4413      	add	r3, r2
 800eb3e:	00db      	lsls	r3, r3, #3
 800eb40:	4403      	add	r3, r0
 800eb42:	3304      	adds	r3, #4
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	4299      	cmp	r1, r3
 800eb48:	d112      	bne.n	800eb70 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d00c      	beq.n	800eb6a <etharp_find_entry+0xc2>
 800eb50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb54:	4989      	ldr	r1, [pc, #548]	@ (800ed7c <etharp_find_entry+0x2d4>)
 800eb56:	4613      	mov	r3, r2
 800eb58:	005b      	lsls	r3, r3, #1
 800eb5a:	4413      	add	r3, r2
 800eb5c:	00db      	lsls	r3, r3, #3
 800eb5e:	440b      	add	r3, r1
 800eb60:	3308      	adds	r3, #8
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d102      	bne.n	800eb70 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800eb6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eb6e:	e100      	b.n	800ed72 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800eb70:	7dfb      	ldrb	r3, [r7, #23]
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d140      	bne.n	800ebf8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800eb76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb7a:	4980      	ldr	r1, [pc, #512]	@ (800ed7c <etharp_find_entry+0x2d4>)
 800eb7c:	4613      	mov	r3, r2
 800eb7e:	005b      	lsls	r3, r3, #1
 800eb80:	4413      	add	r3, r2
 800eb82:	00db      	lsls	r3, r3, #3
 800eb84:	440b      	add	r3, r1
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d01a      	beq.n	800ebc2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800eb8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb90:	497a      	ldr	r1, [pc, #488]	@ (800ed7c <etharp_find_entry+0x2d4>)
 800eb92:	4613      	mov	r3, r2
 800eb94:	005b      	lsls	r3, r3, #1
 800eb96:	4413      	add	r3, r2
 800eb98:	00db      	lsls	r3, r3, #3
 800eb9a:	440b      	add	r3, r1
 800eb9c:	3312      	adds	r3, #18
 800eb9e:	881b      	ldrh	r3, [r3, #0]
 800eba0:	8bba      	ldrh	r2, [r7, #28]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d845      	bhi.n	800ec32 <etharp_find_entry+0x18a>
            old_queue = i;
 800eba6:	8c3b      	ldrh	r3, [r7, #32]
 800eba8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ebaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebae:	4973      	ldr	r1, [pc, #460]	@ (800ed7c <etharp_find_entry+0x2d4>)
 800ebb0:	4613      	mov	r3, r2
 800ebb2:	005b      	lsls	r3, r3, #1
 800ebb4:	4413      	add	r3, r2
 800ebb6:	00db      	lsls	r3, r3, #3
 800ebb8:	440b      	add	r3, r1
 800ebba:	3312      	adds	r3, #18
 800ebbc:	881b      	ldrh	r3, [r3, #0]
 800ebbe:	83bb      	strh	r3, [r7, #28]
 800ebc0:	e037      	b.n	800ec32 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ebc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebc6:	496d      	ldr	r1, [pc, #436]	@ (800ed7c <etharp_find_entry+0x2d4>)
 800ebc8:	4613      	mov	r3, r2
 800ebca:	005b      	lsls	r3, r3, #1
 800ebcc:	4413      	add	r3, r2
 800ebce:	00db      	lsls	r3, r3, #3
 800ebd0:	440b      	add	r3, r1
 800ebd2:	3312      	adds	r3, #18
 800ebd4:	881b      	ldrh	r3, [r3, #0]
 800ebd6:	8b7a      	ldrh	r2, [r7, #26]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d82a      	bhi.n	800ec32 <etharp_find_entry+0x18a>
            old_pending = i;
 800ebdc:	8c3b      	ldrh	r3, [r7, #32]
 800ebde:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800ebe0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebe4:	4965      	ldr	r1, [pc, #404]	@ (800ed7c <etharp_find_entry+0x2d4>)
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	005b      	lsls	r3, r3, #1
 800ebea:	4413      	add	r3, r2
 800ebec:	00db      	lsls	r3, r3, #3
 800ebee:	440b      	add	r3, r1
 800ebf0:	3312      	adds	r3, #18
 800ebf2:	881b      	ldrh	r3, [r3, #0]
 800ebf4:	837b      	strh	r3, [r7, #26]
 800ebf6:	e01c      	b.n	800ec32 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ebf8:	7dfb      	ldrb	r3, [r7, #23]
 800ebfa:	2b01      	cmp	r3, #1
 800ebfc:	d919      	bls.n	800ec32 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ebfe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec02:	495e      	ldr	r1, [pc, #376]	@ (800ed7c <etharp_find_entry+0x2d4>)
 800ec04:	4613      	mov	r3, r2
 800ec06:	005b      	lsls	r3, r3, #1
 800ec08:	4413      	add	r3, r2
 800ec0a:	00db      	lsls	r3, r3, #3
 800ec0c:	440b      	add	r3, r1
 800ec0e:	3312      	adds	r3, #18
 800ec10:	881b      	ldrh	r3, [r3, #0]
 800ec12:	8b3a      	ldrh	r2, [r7, #24]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d80c      	bhi.n	800ec32 <etharp_find_entry+0x18a>
            old_stable = i;
 800ec18:	8c3b      	ldrh	r3, [r7, #32]
 800ec1a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800ec1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec20:	4956      	ldr	r1, [pc, #344]	@ (800ed7c <etharp_find_entry+0x2d4>)
 800ec22:	4613      	mov	r3, r2
 800ec24:	005b      	lsls	r3, r3, #1
 800ec26:	4413      	add	r3, r2
 800ec28:	00db      	lsls	r3, r3, #3
 800ec2a:	440b      	add	r3, r1
 800ec2c:	3312      	adds	r3, #18
 800ec2e:	881b      	ldrh	r3, [r3, #0]
 800ec30:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec32:	8c3b      	ldrh	r3, [r7, #32]
 800ec34:	3301      	adds	r3, #1
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	843b      	strh	r3, [r7, #32]
 800ec3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ec3e:	2b09      	cmp	r3, #9
 800ec40:	f77f af4c 	ble.w	800eadc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ec44:	7afb      	ldrb	r3, [r7, #11]
 800ec46:	f003 0302 	and.w	r3, r3, #2
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d108      	bne.n	800ec60 <etharp_find_entry+0x1b8>
 800ec4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ec52:	2b0a      	cmp	r3, #10
 800ec54:	d107      	bne.n	800ec66 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ec56:	7afb      	ldrb	r3, [r7, #11]
 800ec58:	f003 0301 	and.w	r3, r3, #1
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d102      	bne.n	800ec66 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ec60:	f04f 33ff 	mov.w	r3, #4294967295
 800ec64:	e085      	b.n	800ed72 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ec66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ec6a:	2b09      	cmp	r3, #9
 800ec6c:	dc02      	bgt.n	800ec74 <etharp_find_entry+0x1cc>
    i = empty;
 800ec6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ec70:	843b      	strh	r3, [r7, #32]
 800ec72:	e039      	b.n	800ece8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ec74:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800ec78:	2b09      	cmp	r3, #9
 800ec7a:	dc14      	bgt.n	800eca6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ec7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec7e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ec80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec84:	493d      	ldr	r1, [pc, #244]	@ (800ed7c <etharp_find_entry+0x2d4>)
 800ec86:	4613      	mov	r3, r2
 800ec88:	005b      	lsls	r3, r3, #1
 800ec8a:	4413      	add	r3, r2
 800ec8c:	00db      	lsls	r3, r3, #3
 800ec8e:	440b      	add	r3, r1
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d018      	beq.n	800ecc8 <etharp_find_entry+0x220>
 800ec96:	4b3a      	ldr	r3, [pc, #232]	@ (800ed80 <etharp_find_entry+0x2d8>)
 800ec98:	f240 126d 	movw	r2, #365	@ 0x16d
 800ec9c:	493b      	ldr	r1, [pc, #236]	@ (800ed8c <etharp_find_entry+0x2e4>)
 800ec9e:	483a      	ldr	r0, [pc, #232]	@ (800ed88 <etharp_find_entry+0x2e0>)
 800eca0:	f002 f9ee 	bl	8011080 <iprintf>
 800eca4:	e010      	b.n	800ecc8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800eca6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800ecaa:	2b09      	cmp	r3, #9
 800ecac:	dc02      	bgt.n	800ecb4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ecae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ecb0:	843b      	strh	r3, [r7, #32]
 800ecb2:	e009      	b.n	800ecc8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ecb4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ecb8:	2b09      	cmp	r3, #9
 800ecba:	dc02      	bgt.n	800ecc2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ecbc:	8bfb      	ldrh	r3, [r7, #30]
 800ecbe:	843b      	strh	r3, [r7, #32]
 800ecc0:	e002      	b.n	800ecc8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ecc2:	f04f 33ff 	mov.w	r3, #4294967295
 800ecc6:	e054      	b.n	800ed72 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ecc8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eccc:	2b09      	cmp	r3, #9
 800ecce:	dd06      	ble.n	800ecde <etharp_find_entry+0x236>
 800ecd0:	4b2b      	ldr	r3, [pc, #172]	@ (800ed80 <etharp_find_entry+0x2d8>)
 800ecd2:	f240 127f 	movw	r2, #383	@ 0x17f
 800ecd6:	492e      	ldr	r1, [pc, #184]	@ (800ed90 <etharp_find_entry+0x2e8>)
 800ecd8:	482b      	ldr	r0, [pc, #172]	@ (800ed88 <etharp_find_entry+0x2e0>)
 800ecda:	f002 f9d1 	bl	8011080 <iprintf>
    etharp_free_entry(i);
 800ecde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7ff fe06 	bl	800e8f4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ece8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ecec:	2b09      	cmp	r3, #9
 800ecee:	dd06      	ble.n	800ecfe <etharp_find_entry+0x256>
 800ecf0:	4b23      	ldr	r3, [pc, #140]	@ (800ed80 <etharp_find_entry+0x2d8>)
 800ecf2:	f240 1283 	movw	r2, #387	@ 0x183
 800ecf6:	4926      	ldr	r1, [pc, #152]	@ (800ed90 <etharp_find_entry+0x2e8>)
 800ecf8:	4823      	ldr	r0, [pc, #140]	@ (800ed88 <etharp_find_entry+0x2e0>)
 800ecfa:	f002 f9c1 	bl	8011080 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ecfe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed02:	491e      	ldr	r1, [pc, #120]	@ (800ed7c <etharp_find_entry+0x2d4>)
 800ed04:	4613      	mov	r3, r2
 800ed06:	005b      	lsls	r3, r3, #1
 800ed08:	4413      	add	r3, r2
 800ed0a:	00db      	lsls	r3, r3, #3
 800ed0c:	440b      	add	r3, r1
 800ed0e:	3314      	adds	r3, #20
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d006      	beq.n	800ed24 <etharp_find_entry+0x27c>
 800ed16:	4b1a      	ldr	r3, [pc, #104]	@ (800ed80 <etharp_find_entry+0x2d8>)
 800ed18:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800ed1c:	491d      	ldr	r1, [pc, #116]	@ (800ed94 <etharp_find_entry+0x2ec>)
 800ed1e:	481a      	ldr	r0, [pc, #104]	@ (800ed88 <etharp_find_entry+0x2e0>)
 800ed20:	f002 f9ae 	bl	8011080 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d00b      	beq.n	800ed42 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ed2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	6819      	ldr	r1, [r3, #0]
 800ed32:	4812      	ldr	r0, [pc, #72]	@ (800ed7c <etharp_find_entry+0x2d4>)
 800ed34:	4613      	mov	r3, r2
 800ed36:	005b      	lsls	r3, r3, #1
 800ed38:	4413      	add	r3, r2
 800ed3a:	00db      	lsls	r3, r3, #3
 800ed3c:	4403      	add	r3, r0
 800ed3e:	3304      	adds	r3, #4
 800ed40:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ed42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed46:	490d      	ldr	r1, [pc, #52]	@ (800ed7c <etharp_find_entry+0x2d4>)
 800ed48:	4613      	mov	r3, r2
 800ed4a:	005b      	lsls	r3, r3, #1
 800ed4c:	4413      	add	r3, r2
 800ed4e:	00db      	lsls	r3, r3, #3
 800ed50:	440b      	add	r3, r1
 800ed52:	3312      	adds	r3, #18
 800ed54:	2200      	movs	r2, #0
 800ed56:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ed58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed5c:	4907      	ldr	r1, [pc, #28]	@ (800ed7c <etharp_find_entry+0x2d4>)
 800ed5e:	4613      	mov	r3, r2
 800ed60:	005b      	lsls	r3, r3, #1
 800ed62:	4413      	add	r3, r2
 800ed64:	00db      	lsls	r3, r3, #3
 800ed66:	440b      	add	r3, r1
 800ed68:	3308      	adds	r3, #8
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ed6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3728      	adds	r7, #40	@ 0x28
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	20008864 	.word	0x20008864
 800ed80:	080145b8 	.word	0x080145b8
 800ed84:	080145f0 	.word	0x080145f0
 800ed88:	08014630 	.word	0x08014630
 800ed8c:	08014658 	.word	0x08014658
 800ed90:	08014670 	.word	0x08014670
 800ed94:	08014684 	.word	0x08014684

0800ed98 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b088      	sub	sp, #32
 800ed9c:	af02      	add	r7, sp, #8
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	60b9      	str	r1, [r7, #8]
 800eda2:	607a      	str	r2, [r7, #4]
 800eda4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800edac:	2b06      	cmp	r3, #6
 800edae:	d006      	beq.n	800edbe <etharp_update_arp_entry+0x26>
 800edb0:	4b48      	ldr	r3, [pc, #288]	@ (800eed4 <etharp_update_arp_entry+0x13c>)
 800edb2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800edb6:	4948      	ldr	r1, [pc, #288]	@ (800eed8 <etharp_update_arp_entry+0x140>)
 800edb8:	4848      	ldr	r0, [pc, #288]	@ (800eedc <etharp_update_arp_entry+0x144>)
 800edba:	f002 f961 	bl	8011080 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d012      	beq.n	800edea <etharp_update_arp_entry+0x52>
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00e      	beq.n	800edea <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	68f9      	ldr	r1, [r7, #12]
 800edd2:	4618      	mov	r0, r3
 800edd4:	f001 f8fe 	bl	800ffd4 <ip4_addr_isbroadcast_u32>
 800edd8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d105      	bne.n	800edea <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ede6:	2be0      	cmp	r3, #224	@ 0xe0
 800ede8:	d102      	bne.n	800edf0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800edea:	f06f 030f 	mvn.w	r3, #15
 800edee:	e06c      	b.n	800eeca <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800edf0:	78fb      	ldrb	r3, [r7, #3]
 800edf2:	68fa      	ldr	r2, [r7, #12]
 800edf4:	4619      	mov	r1, r3
 800edf6:	68b8      	ldr	r0, [r7, #8]
 800edf8:	f7ff fe56 	bl	800eaa8 <etharp_find_entry>
 800edfc:	4603      	mov	r3, r0
 800edfe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ee00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	da02      	bge.n	800ee0e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ee08:	8afb      	ldrh	r3, [r7, #22]
 800ee0a:	b25b      	sxtb	r3, r3
 800ee0c:	e05d      	b.n	800eeca <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ee0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee12:	4933      	ldr	r1, [pc, #204]	@ (800eee0 <etharp_update_arp_entry+0x148>)
 800ee14:	4613      	mov	r3, r2
 800ee16:	005b      	lsls	r3, r3, #1
 800ee18:	4413      	add	r3, r2
 800ee1a:	00db      	lsls	r3, r3, #3
 800ee1c:	440b      	add	r3, r1
 800ee1e:	3314      	adds	r3, #20
 800ee20:	2202      	movs	r2, #2
 800ee22:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ee24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee28:	492d      	ldr	r1, [pc, #180]	@ (800eee0 <etharp_update_arp_entry+0x148>)
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	005b      	lsls	r3, r3, #1
 800ee2e:	4413      	add	r3, r2
 800ee30:	00db      	lsls	r3, r3, #3
 800ee32:	440b      	add	r3, r1
 800ee34:	3308      	adds	r3, #8
 800ee36:	68fa      	ldr	r2, [r7, #12]
 800ee38:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ee3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee3e:	4613      	mov	r3, r2
 800ee40:	005b      	lsls	r3, r3, #1
 800ee42:	4413      	add	r3, r2
 800ee44:	00db      	lsls	r3, r3, #3
 800ee46:	3308      	adds	r3, #8
 800ee48:	4a25      	ldr	r2, [pc, #148]	@ (800eee0 <etharp_update_arp_entry+0x148>)
 800ee4a:	4413      	add	r3, r2
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	2206      	movs	r2, #6
 800ee50:	6879      	ldr	r1, [r7, #4]
 800ee52:	4618      	mov	r0, r3
 800ee54:	f002 fa3d 	bl	80112d2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ee58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee5c:	4920      	ldr	r1, [pc, #128]	@ (800eee0 <etharp_update_arp_entry+0x148>)
 800ee5e:	4613      	mov	r3, r2
 800ee60:	005b      	lsls	r3, r3, #1
 800ee62:	4413      	add	r3, r2
 800ee64:	00db      	lsls	r3, r3, #3
 800ee66:	440b      	add	r3, r1
 800ee68:	3312      	adds	r3, #18
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ee6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee72:	491b      	ldr	r1, [pc, #108]	@ (800eee0 <etharp_update_arp_entry+0x148>)
 800ee74:	4613      	mov	r3, r2
 800ee76:	005b      	lsls	r3, r3, #1
 800ee78:	4413      	add	r3, r2
 800ee7a:	00db      	lsls	r3, r3, #3
 800ee7c:	440b      	add	r3, r1
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d021      	beq.n	800eec8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ee84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee88:	4915      	ldr	r1, [pc, #84]	@ (800eee0 <etharp_update_arp_entry+0x148>)
 800ee8a:	4613      	mov	r3, r2
 800ee8c:	005b      	lsls	r3, r3, #1
 800ee8e:	4413      	add	r3, r2
 800ee90:	00db      	lsls	r3, r3, #3
 800ee92:	440b      	add	r3, r1
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ee98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee9c:	4910      	ldr	r1, [pc, #64]	@ (800eee0 <etharp_update_arp_entry+0x148>)
 800ee9e:	4613      	mov	r3, r2
 800eea0:	005b      	lsls	r3, r3, #1
 800eea2:	4413      	add	r3, r2
 800eea4:	00db      	lsls	r3, r3, #3
 800eea6:	440b      	add	r3, r1
 800eea8:	2200      	movs	r2, #0
 800eeaa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800eeb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6939      	ldr	r1, [r7, #16]
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f001 ff97 	bl	8010df0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800eec2:	6938      	ldr	r0, [r7, #16]
 800eec4:	f7f9 fa3a 	bl	800833c <pbuf_free>
  }
  return ERR_OK;
 800eec8:	2300      	movs	r3, #0
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3718      	adds	r7, #24
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	080145b8 	.word	0x080145b8
 800eed8:	080146b0 	.word	0x080146b0
 800eedc:	08014630 	.word	0x08014630
 800eee0:	20008864 	.word	0x20008864

0800eee4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eeec:	2300      	movs	r3, #0
 800eeee:	60fb      	str	r3, [r7, #12]
 800eef0:	e01e      	b.n	800ef30 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800eef2:	4913      	ldr	r1, [pc, #76]	@ (800ef40 <etharp_cleanup_netif+0x5c>)
 800eef4:	68fa      	ldr	r2, [r7, #12]
 800eef6:	4613      	mov	r3, r2
 800eef8:	005b      	lsls	r3, r3, #1
 800eefa:	4413      	add	r3, r2
 800eefc:	00db      	lsls	r3, r3, #3
 800eefe:	440b      	add	r3, r1
 800ef00:	3314      	adds	r3, #20
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ef06:	7afb      	ldrb	r3, [r7, #11]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d00e      	beq.n	800ef2a <etharp_cleanup_netif+0x46>
 800ef0c:	490c      	ldr	r1, [pc, #48]	@ (800ef40 <etharp_cleanup_netif+0x5c>)
 800ef0e:	68fa      	ldr	r2, [r7, #12]
 800ef10:	4613      	mov	r3, r2
 800ef12:	005b      	lsls	r3, r3, #1
 800ef14:	4413      	add	r3, r2
 800ef16:	00db      	lsls	r3, r3, #3
 800ef18:	440b      	add	r3, r1
 800ef1a:	3308      	adds	r3, #8
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d102      	bne.n	800ef2a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ef24:	68f8      	ldr	r0, [r7, #12]
 800ef26:	f7ff fce5 	bl	800e8f4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	60fb      	str	r3, [r7, #12]
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2b09      	cmp	r3, #9
 800ef34:	dddd      	ble.n	800eef2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800ef36:	bf00      	nop
 800ef38:	bf00      	nop
 800ef3a:	3710      	adds	r7, #16
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	20008864 	.word	0x20008864

0800ef44 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ef44:	b5b0      	push	{r4, r5, r7, lr}
 800ef46:	b08a      	sub	sp, #40	@ 0x28
 800ef48:	af04      	add	r7, sp, #16
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d107      	bne.n	800ef64 <etharp_input+0x20>
 800ef54:	4b3d      	ldr	r3, [pc, #244]	@ (800f04c <etharp_input+0x108>)
 800ef56:	f240 228a 	movw	r2, #650	@ 0x28a
 800ef5a:	493d      	ldr	r1, [pc, #244]	@ (800f050 <etharp_input+0x10c>)
 800ef5c:	483d      	ldr	r0, [pc, #244]	@ (800f054 <etharp_input+0x110>)
 800ef5e:	f002 f88f 	bl	8011080 <iprintf>
 800ef62:	e06f      	b.n	800f044 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	881b      	ldrh	r3, [r3, #0]
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef74:	d10c      	bne.n	800ef90 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ef7a:	2b06      	cmp	r3, #6
 800ef7c:	d108      	bne.n	800ef90 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ef82:	2b04      	cmp	r3, #4
 800ef84:	d104      	bne.n	800ef90 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	885b      	ldrh	r3, [r3, #2]
 800ef8a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ef8c:	2b08      	cmp	r3, #8
 800ef8e:	d003      	beq.n	800ef98 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7f9 f9d3 	bl	800833c <pbuf_free>
    return;
 800ef96:	e055      	b.n	800f044 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	330e      	adds	r3, #14
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	3318      	adds	r3, #24
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	3304      	adds	r3, #4
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d102      	bne.n	800efb8 <etharp_input+0x74>
    for_us = 0;
 800efb2:	2300      	movs	r3, #0
 800efb4:	75fb      	strb	r3, [r7, #23]
 800efb6:	e009      	b.n	800efcc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800efb8:	68ba      	ldr	r2, [r7, #8]
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	3304      	adds	r3, #4
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	bf0c      	ite	eq
 800efc4:	2301      	moveq	r3, #1
 800efc6:	2300      	movne	r3, #0
 800efc8:	b2db      	uxtb	r3, r3
 800efca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	f103 0208 	add.w	r2, r3, #8
 800efd2:	7dfb      	ldrb	r3, [r7, #23]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d001      	beq.n	800efdc <etharp_input+0x98>
 800efd8:	2301      	movs	r3, #1
 800efda:	e000      	b.n	800efde <etharp_input+0x9a>
 800efdc:	2302      	movs	r3, #2
 800efde:	f107 010c 	add.w	r1, r7, #12
 800efe2:	6838      	ldr	r0, [r7, #0]
 800efe4:	f7ff fed8 	bl	800ed98 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	88db      	ldrh	r3, [r3, #6]
 800efec:	b29b      	uxth	r3, r3
 800efee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eff2:	d003      	beq.n	800effc <etharp_input+0xb8>
 800eff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eff8:	d01e      	beq.n	800f038 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800effa:	e020      	b.n	800f03e <etharp_input+0xfa>
      if (for_us) {
 800effc:	7dfb      	ldrb	r3, [r7, #23]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d01c      	beq.n	800f03c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f018:	693a      	ldr	r2, [r7, #16]
 800f01a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f01c:	2102      	movs	r1, #2
 800f01e:	9103      	str	r1, [sp, #12]
 800f020:	f107 010c 	add.w	r1, r7, #12
 800f024:	9102      	str	r1, [sp, #8]
 800f026:	9201      	str	r2, [sp, #4]
 800f028:	9300      	str	r3, [sp, #0]
 800f02a:	462b      	mov	r3, r5
 800f02c:	4622      	mov	r2, r4
 800f02e:	4601      	mov	r1, r0
 800f030:	6838      	ldr	r0, [r7, #0]
 800f032:	f000 faeb 	bl	800f60c <etharp_raw>
      break;
 800f036:	e001      	b.n	800f03c <etharp_input+0xf8>
      break;
 800f038:	bf00      	nop
 800f03a:	e000      	b.n	800f03e <etharp_input+0xfa>
      break;
 800f03c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f7f9 f97c 	bl	800833c <pbuf_free>
}
 800f044:	3718      	adds	r7, #24
 800f046:	46bd      	mov	sp, r7
 800f048:	bdb0      	pop	{r4, r5, r7, pc}
 800f04a:	bf00      	nop
 800f04c:	080145b8 	.word	0x080145b8
 800f050:	08014708 	.word	0x08014708
 800f054:	08014630 	.word	0x08014630

0800f058 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b086      	sub	sp, #24
 800f05c:	af02      	add	r7, sp, #8
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	4613      	mov	r3, r2
 800f064:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f066:	79fa      	ldrb	r2, [r7, #7]
 800f068:	4944      	ldr	r1, [pc, #272]	@ (800f17c <etharp_output_to_arp_index+0x124>)
 800f06a:	4613      	mov	r3, r2
 800f06c:	005b      	lsls	r3, r3, #1
 800f06e:	4413      	add	r3, r2
 800f070:	00db      	lsls	r3, r3, #3
 800f072:	440b      	add	r3, r1
 800f074:	3314      	adds	r3, #20
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d806      	bhi.n	800f08a <etharp_output_to_arp_index+0x32>
 800f07c:	4b40      	ldr	r3, [pc, #256]	@ (800f180 <etharp_output_to_arp_index+0x128>)
 800f07e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f082:	4940      	ldr	r1, [pc, #256]	@ (800f184 <etharp_output_to_arp_index+0x12c>)
 800f084:	4840      	ldr	r0, [pc, #256]	@ (800f188 <etharp_output_to_arp_index+0x130>)
 800f086:	f001 fffb 	bl	8011080 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f08a:	79fa      	ldrb	r2, [r7, #7]
 800f08c:	493b      	ldr	r1, [pc, #236]	@ (800f17c <etharp_output_to_arp_index+0x124>)
 800f08e:	4613      	mov	r3, r2
 800f090:	005b      	lsls	r3, r3, #1
 800f092:	4413      	add	r3, r2
 800f094:	00db      	lsls	r3, r3, #3
 800f096:	440b      	add	r3, r1
 800f098:	3314      	adds	r3, #20
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	2b02      	cmp	r3, #2
 800f09e:	d153      	bne.n	800f148 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f0a0:	79fa      	ldrb	r2, [r7, #7]
 800f0a2:	4936      	ldr	r1, [pc, #216]	@ (800f17c <etharp_output_to_arp_index+0x124>)
 800f0a4:	4613      	mov	r3, r2
 800f0a6:	005b      	lsls	r3, r3, #1
 800f0a8:	4413      	add	r3, r2
 800f0aa:	00db      	lsls	r3, r3, #3
 800f0ac:	440b      	add	r3, r1
 800f0ae:	3312      	adds	r3, #18
 800f0b0:	881b      	ldrh	r3, [r3, #0]
 800f0b2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800f0b6:	d919      	bls.n	800f0ec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f0b8:	79fa      	ldrb	r2, [r7, #7]
 800f0ba:	4613      	mov	r3, r2
 800f0bc:	005b      	lsls	r3, r3, #1
 800f0be:	4413      	add	r3, r2
 800f0c0:	00db      	lsls	r3, r3, #3
 800f0c2:	4a2e      	ldr	r2, [pc, #184]	@ (800f17c <etharp_output_to_arp_index+0x124>)
 800f0c4:	4413      	add	r3, r2
 800f0c6:	3304      	adds	r3, #4
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	68f8      	ldr	r0, [r7, #12]
 800f0cc:	f000 fb4c 	bl	800f768 <etharp_request>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d138      	bne.n	800f148 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f0d6:	79fa      	ldrb	r2, [r7, #7]
 800f0d8:	4928      	ldr	r1, [pc, #160]	@ (800f17c <etharp_output_to_arp_index+0x124>)
 800f0da:	4613      	mov	r3, r2
 800f0dc:	005b      	lsls	r3, r3, #1
 800f0de:	4413      	add	r3, r2
 800f0e0:	00db      	lsls	r3, r3, #3
 800f0e2:	440b      	add	r3, r1
 800f0e4:	3314      	adds	r3, #20
 800f0e6:	2203      	movs	r2, #3
 800f0e8:	701a      	strb	r2, [r3, #0]
 800f0ea:	e02d      	b.n	800f148 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f0ec:	79fa      	ldrb	r2, [r7, #7]
 800f0ee:	4923      	ldr	r1, [pc, #140]	@ (800f17c <etharp_output_to_arp_index+0x124>)
 800f0f0:	4613      	mov	r3, r2
 800f0f2:	005b      	lsls	r3, r3, #1
 800f0f4:	4413      	add	r3, r2
 800f0f6:	00db      	lsls	r3, r3, #3
 800f0f8:	440b      	add	r3, r1
 800f0fa:	3312      	adds	r3, #18
 800f0fc:	881b      	ldrh	r3, [r3, #0]
 800f0fe:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800f102:	d321      	bcc.n	800f148 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f104:	79fa      	ldrb	r2, [r7, #7]
 800f106:	4613      	mov	r3, r2
 800f108:	005b      	lsls	r3, r3, #1
 800f10a:	4413      	add	r3, r2
 800f10c:	00db      	lsls	r3, r3, #3
 800f10e:	4a1b      	ldr	r2, [pc, #108]	@ (800f17c <etharp_output_to_arp_index+0x124>)
 800f110:	4413      	add	r3, r2
 800f112:	1d19      	adds	r1, r3, #4
 800f114:	79fa      	ldrb	r2, [r7, #7]
 800f116:	4613      	mov	r3, r2
 800f118:	005b      	lsls	r3, r3, #1
 800f11a:	4413      	add	r3, r2
 800f11c:	00db      	lsls	r3, r3, #3
 800f11e:	3308      	adds	r3, #8
 800f120:	4a16      	ldr	r2, [pc, #88]	@ (800f17c <etharp_output_to_arp_index+0x124>)
 800f122:	4413      	add	r3, r2
 800f124:	3304      	adds	r3, #4
 800f126:	461a      	mov	r2, r3
 800f128:	68f8      	ldr	r0, [r7, #12]
 800f12a:	f000 fafb 	bl	800f724 <etharp_request_dst>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d109      	bne.n	800f148 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f134:	79fa      	ldrb	r2, [r7, #7]
 800f136:	4911      	ldr	r1, [pc, #68]	@ (800f17c <etharp_output_to_arp_index+0x124>)
 800f138:	4613      	mov	r3, r2
 800f13a:	005b      	lsls	r3, r3, #1
 800f13c:	4413      	add	r3, r2
 800f13e:	00db      	lsls	r3, r3, #3
 800f140:	440b      	add	r3, r1
 800f142:	3314      	adds	r3, #20
 800f144:	2203      	movs	r2, #3
 800f146:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800f14e:	79fa      	ldrb	r2, [r7, #7]
 800f150:	4613      	mov	r3, r2
 800f152:	005b      	lsls	r3, r3, #1
 800f154:	4413      	add	r3, r2
 800f156:	00db      	lsls	r3, r3, #3
 800f158:	3308      	adds	r3, #8
 800f15a:	4a08      	ldr	r2, [pc, #32]	@ (800f17c <etharp_output_to_arp_index+0x124>)
 800f15c:	4413      	add	r3, r2
 800f15e:	3304      	adds	r3, #4
 800f160:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f164:	9200      	str	r2, [sp, #0]
 800f166:	460a      	mov	r2, r1
 800f168:	68b9      	ldr	r1, [r7, #8]
 800f16a:	68f8      	ldr	r0, [r7, #12]
 800f16c:	f001 fe40 	bl	8010df0 <ethernet_output>
 800f170:	4603      	mov	r3, r0
}
 800f172:	4618      	mov	r0, r3
 800f174:	3710      	adds	r7, #16
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	20008864 	.word	0x20008864
 800f180:	080145b8 	.word	0x080145b8
 800f184:	08014728 	.word	0x08014728
 800f188:	08014630 	.word	0x08014630

0800f18c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b08a      	sub	sp, #40	@ 0x28
 800f190:	af02      	add	r7, sp, #8
 800f192:	60f8      	str	r0, [r7, #12]
 800f194:	60b9      	str	r1, [r7, #8]
 800f196:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d106      	bne.n	800f1b0 <etharp_output+0x24>
 800f1a2:	4b73      	ldr	r3, [pc, #460]	@ (800f370 <etharp_output+0x1e4>)
 800f1a4:	f240 321e 	movw	r2, #798	@ 0x31e
 800f1a8:	4972      	ldr	r1, [pc, #456]	@ (800f374 <etharp_output+0x1e8>)
 800f1aa:	4873      	ldr	r0, [pc, #460]	@ (800f378 <etharp_output+0x1ec>)
 800f1ac:	f001 ff68 	bl	8011080 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d106      	bne.n	800f1c4 <etharp_output+0x38>
 800f1b6:	4b6e      	ldr	r3, [pc, #440]	@ (800f370 <etharp_output+0x1e4>)
 800f1b8:	f240 321f 	movw	r2, #799	@ 0x31f
 800f1bc:	496f      	ldr	r1, [pc, #444]	@ (800f37c <etharp_output+0x1f0>)
 800f1be:	486e      	ldr	r0, [pc, #440]	@ (800f378 <etharp_output+0x1ec>)
 800f1c0:	f001 ff5e 	bl	8011080 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d106      	bne.n	800f1d8 <etharp_output+0x4c>
 800f1ca:	4b69      	ldr	r3, [pc, #420]	@ (800f370 <etharp_output+0x1e4>)
 800f1cc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800f1d0:	496b      	ldr	r1, [pc, #428]	@ (800f380 <etharp_output+0x1f4>)
 800f1d2:	4869      	ldr	r0, [pc, #420]	@ (800f378 <etharp_output+0x1ec>)
 800f1d4:	f001 ff54 	bl	8011080 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	68f9      	ldr	r1, [r7, #12]
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f000 fef8 	bl	800ffd4 <ip4_addr_isbroadcast_u32>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d002      	beq.n	800f1f0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f1ea:	4b66      	ldr	r3, [pc, #408]	@ (800f384 <etharp_output+0x1f8>)
 800f1ec:	61fb      	str	r3, [r7, #28]
 800f1ee:	e0af      	b.n	800f350 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f1f8:	2be0      	cmp	r3, #224	@ 0xe0
 800f1fa:	d118      	bne.n	800f22e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f200:	2300      	movs	r3, #0
 800f202:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f204:	235e      	movs	r3, #94	@ 0x5e
 800f206:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	3301      	adds	r3, #1
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f212:	b2db      	uxtb	r3, r3
 800f214:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	3302      	adds	r3, #2
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	3303      	adds	r3, #3
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f226:	f107 0310 	add.w	r3, r7, #16
 800f22a:	61fb      	str	r3, [r7, #28]
 800f22c:	e090      	b.n	800f350 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	3304      	adds	r3, #4
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	405a      	eors	r2, r3
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	3308      	adds	r3, #8
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4013      	ands	r3, r2
 800f242:	2b00      	cmp	r3, #0
 800f244:	d012      	beq.n	800f26c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f24c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800f250:	4293      	cmp	r3, r2
 800f252:	d00b      	beq.n	800f26c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	330c      	adds	r3, #12
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d003      	beq.n	800f266 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	330c      	adds	r3, #12
 800f262:	61bb      	str	r3, [r7, #24]
 800f264:	e002      	b.n	800f26c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f266:	f06f 0303 	mvn.w	r3, #3
 800f26a:	e07d      	b.n	800f368 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f26c:	4b46      	ldr	r3, [pc, #280]	@ (800f388 <etharp_output+0x1fc>)
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	4619      	mov	r1, r3
 800f272:	4a46      	ldr	r2, [pc, #280]	@ (800f38c <etharp_output+0x200>)
 800f274:	460b      	mov	r3, r1
 800f276:	005b      	lsls	r3, r3, #1
 800f278:	440b      	add	r3, r1
 800f27a:	00db      	lsls	r3, r3, #3
 800f27c:	4413      	add	r3, r2
 800f27e:	3314      	adds	r3, #20
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	2b01      	cmp	r3, #1
 800f284:	d925      	bls.n	800f2d2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f286:	4b40      	ldr	r3, [pc, #256]	@ (800f388 <etharp_output+0x1fc>)
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	4619      	mov	r1, r3
 800f28c:	4a3f      	ldr	r2, [pc, #252]	@ (800f38c <etharp_output+0x200>)
 800f28e:	460b      	mov	r3, r1
 800f290:	005b      	lsls	r3, r3, #1
 800f292:	440b      	add	r3, r1
 800f294:	00db      	lsls	r3, r3, #3
 800f296:	4413      	add	r3, r2
 800f298:	3308      	adds	r3, #8
 800f29a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f29c:	68fa      	ldr	r2, [r7, #12]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d117      	bne.n	800f2d2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f2a2:	69bb      	ldr	r3, [r7, #24]
 800f2a4:	681a      	ldr	r2, [r3, #0]
 800f2a6:	4b38      	ldr	r3, [pc, #224]	@ (800f388 <etharp_output+0x1fc>)
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	4937      	ldr	r1, [pc, #220]	@ (800f38c <etharp_output+0x200>)
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	005b      	lsls	r3, r3, #1
 800f2b2:	4403      	add	r3, r0
 800f2b4:	00db      	lsls	r3, r3, #3
 800f2b6:	440b      	add	r3, r1
 800f2b8:	3304      	adds	r3, #4
 800f2ba:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d108      	bne.n	800f2d2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f2c0:	4b31      	ldr	r3, [pc, #196]	@ (800f388 <etharp_output+0x1fc>)
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	68b9      	ldr	r1, [r7, #8]
 800f2c8:	68f8      	ldr	r0, [r7, #12]
 800f2ca:	f7ff fec5 	bl	800f058 <etharp_output_to_arp_index>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	e04a      	b.n	800f368 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	75fb      	strb	r3, [r7, #23]
 800f2d6:	e031      	b.n	800f33c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f2d8:	7dfa      	ldrb	r2, [r7, #23]
 800f2da:	492c      	ldr	r1, [pc, #176]	@ (800f38c <etharp_output+0x200>)
 800f2dc:	4613      	mov	r3, r2
 800f2de:	005b      	lsls	r3, r3, #1
 800f2e0:	4413      	add	r3, r2
 800f2e2:	00db      	lsls	r3, r3, #3
 800f2e4:	440b      	add	r3, r1
 800f2e6:	3314      	adds	r3, #20
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	2b01      	cmp	r3, #1
 800f2ec:	d923      	bls.n	800f336 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f2ee:	7dfa      	ldrb	r2, [r7, #23]
 800f2f0:	4926      	ldr	r1, [pc, #152]	@ (800f38c <etharp_output+0x200>)
 800f2f2:	4613      	mov	r3, r2
 800f2f4:	005b      	lsls	r3, r3, #1
 800f2f6:	4413      	add	r3, r2
 800f2f8:	00db      	lsls	r3, r3, #3
 800f2fa:	440b      	add	r3, r1
 800f2fc:	3308      	adds	r3, #8
 800f2fe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f300:	68fa      	ldr	r2, [r7, #12]
 800f302:	429a      	cmp	r2, r3
 800f304:	d117      	bne.n	800f336 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f306:	69bb      	ldr	r3, [r7, #24]
 800f308:	6819      	ldr	r1, [r3, #0]
 800f30a:	7dfa      	ldrb	r2, [r7, #23]
 800f30c:	481f      	ldr	r0, [pc, #124]	@ (800f38c <etharp_output+0x200>)
 800f30e:	4613      	mov	r3, r2
 800f310:	005b      	lsls	r3, r3, #1
 800f312:	4413      	add	r3, r2
 800f314:	00db      	lsls	r3, r3, #3
 800f316:	4403      	add	r3, r0
 800f318:	3304      	adds	r3, #4
 800f31a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f31c:	4299      	cmp	r1, r3
 800f31e:	d10a      	bne.n	800f336 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f320:	4a19      	ldr	r2, [pc, #100]	@ (800f388 <etharp_output+0x1fc>)
 800f322:	7dfb      	ldrb	r3, [r7, #23]
 800f324:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f326:	7dfb      	ldrb	r3, [r7, #23]
 800f328:	461a      	mov	r2, r3
 800f32a:	68b9      	ldr	r1, [r7, #8]
 800f32c:	68f8      	ldr	r0, [r7, #12]
 800f32e:	f7ff fe93 	bl	800f058 <etharp_output_to_arp_index>
 800f332:	4603      	mov	r3, r0
 800f334:	e018      	b.n	800f368 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f336:	7dfb      	ldrb	r3, [r7, #23]
 800f338:	3301      	adds	r3, #1
 800f33a:	75fb      	strb	r3, [r7, #23]
 800f33c:	7dfb      	ldrb	r3, [r7, #23]
 800f33e:	2b09      	cmp	r3, #9
 800f340:	d9ca      	bls.n	800f2d8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f342:	68ba      	ldr	r2, [r7, #8]
 800f344:	69b9      	ldr	r1, [r7, #24]
 800f346:	68f8      	ldr	r0, [r7, #12]
 800f348:	f000 f822 	bl	800f390 <etharp_query>
 800f34c:	4603      	mov	r3, r0
 800f34e:	e00b      	b.n	800f368 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800f356:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f35a:	9300      	str	r3, [sp, #0]
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	68b9      	ldr	r1, [r7, #8]
 800f360:	68f8      	ldr	r0, [r7, #12]
 800f362:	f001 fd45 	bl	8010df0 <ethernet_output>
 800f366:	4603      	mov	r3, r0
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3720      	adds	r7, #32
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	080145b8 	.word	0x080145b8
 800f374:	08014708 	.word	0x08014708
 800f378:	08014630 	.word	0x08014630
 800f37c:	08014758 	.word	0x08014758
 800f380:	080146f8 	.word	0x080146f8
 800f384:	08014d74 	.word	0x08014d74
 800f388:	20008954 	.word	0x20008954
 800f38c:	20008864 	.word	0x20008864

0800f390 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b08c      	sub	sp, #48	@ 0x30
 800f394:	af02      	add	r7, sp, #8
 800f396:	60f8      	str	r0, [r7, #12]
 800f398:	60b9      	str	r1, [r7, #8]
 800f39a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	3326      	adds	r3, #38	@ 0x26
 800f3a0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f3a2:	23ff      	movs	r3, #255	@ 0xff
 800f3a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	68f9      	ldr	r1, [r7, #12]
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f000 fe0e 	bl	800ffd4 <ip4_addr_isbroadcast_u32>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d10c      	bne.n	800f3d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f3c6:	2be0      	cmp	r3, #224	@ 0xe0
 800f3c8:	d006      	beq.n	800f3d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d003      	beq.n	800f3d8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d102      	bne.n	800f3de <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f3d8:	f06f 030f 	mvn.w	r3, #15
 800f3dc:	e101      	b.n	800f5e2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f3de:	68fa      	ldr	r2, [r7, #12]
 800f3e0:	2101      	movs	r1, #1
 800f3e2:	68b8      	ldr	r0, [r7, #8]
 800f3e4:	f7ff fb60 	bl	800eaa8 <etharp_find_entry>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f3ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	da02      	bge.n	800f3fa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f3f4:	8a7b      	ldrh	r3, [r7, #18]
 800f3f6:	b25b      	sxtb	r3, r3
 800f3f8:	e0f3      	b.n	800f5e2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f3fa:	8a7b      	ldrh	r3, [r7, #18]
 800f3fc:	2b7e      	cmp	r3, #126	@ 0x7e
 800f3fe:	d906      	bls.n	800f40e <etharp_query+0x7e>
 800f400:	4b7a      	ldr	r3, [pc, #488]	@ (800f5ec <etharp_query+0x25c>)
 800f402:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800f406:	497a      	ldr	r1, [pc, #488]	@ (800f5f0 <etharp_query+0x260>)
 800f408:	487a      	ldr	r0, [pc, #488]	@ (800f5f4 <etharp_query+0x264>)
 800f40a:	f001 fe39 	bl	8011080 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f40e:	8a7b      	ldrh	r3, [r7, #18]
 800f410:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f412:	7c7a      	ldrb	r2, [r7, #17]
 800f414:	4978      	ldr	r1, [pc, #480]	@ (800f5f8 <etharp_query+0x268>)
 800f416:	4613      	mov	r3, r2
 800f418:	005b      	lsls	r3, r3, #1
 800f41a:	4413      	add	r3, r2
 800f41c:	00db      	lsls	r3, r3, #3
 800f41e:	440b      	add	r3, r1
 800f420:	3314      	adds	r3, #20
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d115      	bne.n	800f454 <etharp_query+0xc4>
    is_new_entry = 1;
 800f428:	2301      	movs	r3, #1
 800f42a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f42c:	7c7a      	ldrb	r2, [r7, #17]
 800f42e:	4972      	ldr	r1, [pc, #456]	@ (800f5f8 <etharp_query+0x268>)
 800f430:	4613      	mov	r3, r2
 800f432:	005b      	lsls	r3, r3, #1
 800f434:	4413      	add	r3, r2
 800f436:	00db      	lsls	r3, r3, #3
 800f438:	440b      	add	r3, r1
 800f43a:	3314      	adds	r3, #20
 800f43c:	2201      	movs	r2, #1
 800f43e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f440:	7c7a      	ldrb	r2, [r7, #17]
 800f442:	496d      	ldr	r1, [pc, #436]	@ (800f5f8 <etharp_query+0x268>)
 800f444:	4613      	mov	r3, r2
 800f446:	005b      	lsls	r3, r3, #1
 800f448:	4413      	add	r3, r2
 800f44a:	00db      	lsls	r3, r3, #3
 800f44c:	440b      	add	r3, r1
 800f44e:	3308      	adds	r3, #8
 800f450:	68fa      	ldr	r2, [r7, #12]
 800f452:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f454:	7c7a      	ldrb	r2, [r7, #17]
 800f456:	4968      	ldr	r1, [pc, #416]	@ (800f5f8 <etharp_query+0x268>)
 800f458:	4613      	mov	r3, r2
 800f45a:	005b      	lsls	r3, r3, #1
 800f45c:	4413      	add	r3, r2
 800f45e:	00db      	lsls	r3, r3, #3
 800f460:	440b      	add	r3, r1
 800f462:	3314      	adds	r3, #20
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	2b01      	cmp	r3, #1
 800f468:	d011      	beq.n	800f48e <etharp_query+0xfe>
 800f46a:	7c7a      	ldrb	r2, [r7, #17]
 800f46c:	4962      	ldr	r1, [pc, #392]	@ (800f5f8 <etharp_query+0x268>)
 800f46e:	4613      	mov	r3, r2
 800f470:	005b      	lsls	r3, r3, #1
 800f472:	4413      	add	r3, r2
 800f474:	00db      	lsls	r3, r3, #3
 800f476:	440b      	add	r3, r1
 800f478:	3314      	adds	r3, #20
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d806      	bhi.n	800f48e <etharp_query+0xfe>
 800f480:	4b5a      	ldr	r3, [pc, #360]	@ (800f5ec <etharp_query+0x25c>)
 800f482:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800f486:	495d      	ldr	r1, [pc, #372]	@ (800f5fc <etharp_query+0x26c>)
 800f488:	485a      	ldr	r0, [pc, #360]	@ (800f5f4 <etharp_query+0x264>)
 800f48a:	f001 fdf9 	bl	8011080 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f48e:	6a3b      	ldr	r3, [r7, #32]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d102      	bne.n	800f49a <etharp_query+0x10a>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d10c      	bne.n	800f4b4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f49a:	68b9      	ldr	r1, [r7, #8]
 800f49c:	68f8      	ldr	r0, [r7, #12]
 800f49e:	f000 f963 	bl	800f768 <etharp_request>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d102      	bne.n	800f4b4 <etharp_query+0x124>
      return result;
 800f4ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f4b2:	e096      	b.n	800f5e2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d106      	bne.n	800f4c8 <etharp_query+0x138>
 800f4ba:	4b4c      	ldr	r3, [pc, #304]	@ (800f5ec <etharp_query+0x25c>)
 800f4bc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800f4c0:	494f      	ldr	r1, [pc, #316]	@ (800f600 <etharp_query+0x270>)
 800f4c2:	484c      	ldr	r0, [pc, #304]	@ (800f5f4 <etharp_query+0x264>)
 800f4c4:	f001 fddc 	bl	8011080 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f4c8:	7c7a      	ldrb	r2, [r7, #17]
 800f4ca:	494b      	ldr	r1, [pc, #300]	@ (800f5f8 <etharp_query+0x268>)
 800f4cc:	4613      	mov	r3, r2
 800f4ce:	005b      	lsls	r3, r3, #1
 800f4d0:	4413      	add	r3, r2
 800f4d2:	00db      	lsls	r3, r3, #3
 800f4d4:	440b      	add	r3, r1
 800f4d6:	3314      	adds	r3, #20
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	d917      	bls.n	800f50e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f4de:	4a49      	ldr	r2, [pc, #292]	@ (800f604 <etharp_query+0x274>)
 800f4e0:	7c7b      	ldrb	r3, [r7, #17]
 800f4e2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f4e4:	7c7a      	ldrb	r2, [r7, #17]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	005b      	lsls	r3, r3, #1
 800f4ea:	4413      	add	r3, r2
 800f4ec:	00db      	lsls	r3, r3, #3
 800f4ee:	3308      	adds	r3, #8
 800f4f0:	4a41      	ldr	r2, [pc, #260]	@ (800f5f8 <etharp_query+0x268>)
 800f4f2:	4413      	add	r3, r2
 800f4f4:	3304      	adds	r3, #4
 800f4f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f4fa:	9200      	str	r2, [sp, #0]
 800f4fc:	697a      	ldr	r2, [r7, #20]
 800f4fe:	6879      	ldr	r1, [r7, #4]
 800f500:	68f8      	ldr	r0, [r7, #12]
 800f502:	f001 fc75 	bl	8010df0 <ethernet_output>
 800f506:	4603      	mov	r3, r0
 800f508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f50c:	e067      	b.n	800f5de <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f50e:	7c7a      	ldrb	r2, [r7, #17]
 800f510:	4939      	ldr	r1, [pc, #228]	@ (800f5f8 <etharp_query+0x268>)
 800f512:	4613      	mov	r3, r2
 800f514:	005b      	lsls	r3, r3, #1
 800f516:	4413      	add	r3, r2
 800f518:	00db      	lsls	r3, r3, #3
 800f51a:	440b      	add	r3, r1
 800f51c:	3314      	adds	r3, #20
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	2b01      	cmp	r3, #1
 800f522:	d15c      	bne.n	800f5de <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f524:	2300      	movs	r3, #0
 800f526:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f52c:	e01c      	b.n	800f568 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f52e:	69fb      	ldr	r3, [r7, #28]
 800f530:	895a      	ldrh	r2, [r3, #10]
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	891b      	ldrh	r3, [r3, #8]
 800f536:	429a      	cmp	r2, r3
 800f538:	d10a      	bne.n	800f550 <etharp_query+0x1c0>
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d006      	beq.n	800f550 <etharp_query+0x1c0>
 800f542:	4b2a      	ldr	r3, [pc, #168]	@ (800f5ec <etharp_query+0x25c>)
 800f544:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800f548:	492f      	ldr	r1, [pc, #188]	@ (800f608 <etharp_query+0x278>)
 800f54a:	482a      	ldr	r0, [pc, #168]	@ (800f5f4 <etharp_query+0x264>)
 800f54c:	f001 fd98 	bl	8011080 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f550:	69fb      	ldr	r3, [r7, #28]
 800f552:	7b1b      	ldrb	r3, [r3, #12]
 800f554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d002      	beq.n	800f562 <etharp_query+0x1d2>
        copy_needed = 1;
 800f55c:	2301      	movs	r3, #1
 800f55e:	61bb      	str	r3, [r7, #24]
        break;
 800f560:	e005      	b.n	800f56e <etharp_query+0x1de>
      }
      p = p->next;
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d1df      	bne.n	800f52e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f56e:	69bb      	ldr	r3, [r7, #24]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d007      	beq.n	800f584 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800f57a:	200e      	movs	r0, #14
 800f57c:	f7f9 f9dc 	bl	8008938 <pbuf_clone>
 800f580:	61f8      	str	r0, [r7, #28]
 800f582:	e004      	b.n	800f58e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f588:	69f8      	ldr	r0, [r7, #28]
 800f58a:	f7f8 ff77 	bl	800847c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d021      	beq.n	800f5d8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f594:	7c7a      	ldrb	r2, [r7, #17]
 800f596:	4918      	ldr	r1, [pc, #96]	@ (800f5f8 <etharp_query+0x268>)
 800f598:	4613      	mov	r3, r2
 800f59a:	005b      	lsls	r3, r3, #1
 800f59c:	4413      	add	r3, r2
 800f59e:	00db      	lsls	r3, r3, #3
 800f5a0:	440b      	add	r3, r1
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d00a      	beq.n	800f5be <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f5a8:	7c7a      	ldrb	r2, [r7, #17]
 800f5aa:	4913      	ldr	r1, [pc, #76]	@ (800f5f8 <etharp_query+0x268>)
 800f5ac:	4613      	mov	r3, r2
 800f5ae:	005b      	lsls	r3, r3, #1
 800f5b0:	4413      	add	r3, r2
 800f5b2:	00db      	lsls	r3, r3, #3
 800f5b4:	440b      	add	r3, r1
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7f8 febf 	bl	800833c <pbuf_free>
      }
      arp_table[i].q = p;
 800f5be:	7c7a      	ldrb	r2, [r7, #17]
 800f5c0:	490d      	ldr	r1, [pc, #52]	@ (800f5f8 <etharp_query+0x268>)
 800f5c2:	4613      	mov	r3, r2
 800f5c4:	005b      	lsls	r3, r3, #1
 800f5c6:	4413      	add	r3, r2
 800f5c8:	00db      	lsls	r3, r3, #3
 800f5ca:	440b      	add	r3, r1
 800f5cc:	69fa      	ldr	r2, [r7, #28]
 800f5ce:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f5d6:	e002      	b.n	800f5de <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f5d8:	23ff      	movs	r3, #255	@ 0xff
 800f5da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800f5de:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3728      	adds	r7, #40	@ 0x28
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	080145b8 	.word	0x080145b8
 800f5f0:	08014764 	.word	0x08014764
 800f5f4:	08014630 	.word	0x08014630
 800f5f8:	20008864 	.word	0x20008864
 800f5fc:	08014774 	.word	0x08014774
 800f600:	08014758 	.word	0x08014758
 800f604:	20008954 	.word	0x20008954
 800f608:	0801479c 	.word	0x0801479c

0800f60c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b08a      	sub	sp, #40	@ 0x28
 800f610:	af02      	add	r7, sp, #8
 800f612:	60f8      	str	r0, [r7, #12]
 800f614:	60b9      	str	r1, [r7, #8]
 800f616:	607a      	str	r2, [r7, #4]
 800f618:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f61a:	2300      	movs	r3, #0
 800f61c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d106      	bne.n	800f632 <etharp_raw+0x26>
 800f624:	4b3a      	ldr	r3, [pc, #232]	@ (800f710 <etharp_raw+0x104>)
 800f626:	f240 4257 	movw	r2, #1111	@ 0x457
 800f62a:	493a      	ldr	r1, [pc, #232]	@ (800f714 <etharp_raw+0x108>)
 800f62c:	483a      	ldr	r0, [pc, #232]	@ (800f718 <etharp_raw+0x10c>)
 800f62e:	f001 fd27 	bl	8011080 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f632:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f636:	211c      	movs	r1, #28
 800f638:	200e      	movs	r0, #14
 800f63a:	f7f8 fb9b 	bl	8007d74 <pbuf_alloc>
 800f63e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f640:	69bb      	ldr	r3, [r7, #24]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d102      	bne.n	800f64c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f646:	f04f 33ff 	mov.w	r3, #4294967295
 800f64a:	e05d      	b.n	800f708 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f64c:	69bb      	ldr	r3, [r7, #24]
 800f64e:	895b      	ldrh	r3, [r3, #10]
 800f650:	2b1b      	cmp	r3, #27
 800f652:	d806      	bhi.n	800f662 <etharp_raw+0x56>
 800f654:	4b2e      	ldr	r3, [pc, #184]	@ (800f710 <etharp_raw+0x104>)
 800f656:	f240 4262 	movw	r2, #1122	@ 0x462
 800f65a:	4930      	ldr	r1, [pc, #192]	@ (800f71c <etharp_raw+0x110>)
 800f65c:	482e      	ldr	r0, [pc, #184]	@ (800f718 <etharp_raw+0x10c>)
 800f65e:	f001 fd0f 	bl	8011080 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f668:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7f7 fb08 	bl	8006c80 <lwip_htons>
 800f670:	4603      	mov	r3, r0
 800f672:	461a      	mov	r2, r3
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f67e:	2b06      	cmp	r3, #6
 800f680:	d006      	beq.n	800f690 <etharp_raw+0x84>
 800f682:	4b23      	ldr	r3, [pc, #140]	@ (800f710 <etharp_raw+0x104>)
 800f684:	f240 4269 	movw	r2, #1129	@ 0x469
 800f688:	4925      	ldr	r1, [pc, #148]	@ (800f720 <etharp_raw+0x114>)
 800f68a:	4823      	ldr	r0, [pc, #140]	@ (800f718 <etharp_raw+0x10c>)
 800f68c:	f001 fcf8 	bl	8011080 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	3308      	adds	r3, #8
 800f694:	2206      	movs	r2, #6
 800f696:	6839      	ldr	r1, [r7, #0]
 800f698:	4618      	mov	r0, r3
 800f69a:	f001 fe1a 	bl	80112d2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	3312      	adds	r3, #18
 800f6a2:	2206      	movs	r2, #6
 800f6a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f001 fe13 	bl	80112d2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	330e      	adds	r3, #14
 800f6b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f6b2:	6812      	ldr	r2, [r2, #0]
 800f6b4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	3318      	adds	r3, #24
 800f6ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6bc:	6812      	ldr	r2, [r2, #0]
 800f6be:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	701a      	strb	r2, [r3, #0]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	f042 0201 	orr.w	r2, r2, #1
 800f6cc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	f042 0208 	orr.w	r2, r2, #8
 800f6d6:	709a      	strb	r2, [r3, #2]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	2206      	movs	r2, #6
 800f6e0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	2204      	movs	r2, #4
 800f6e6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f6e8:	f640 0306 	movw	r3, #2054	@ 0x806
 800f6ec:	9300      	str	r3, [sp, #0]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	68ba      	ldr	r2, [r7, #8]
 800f6f2:	69b9      	ldr	r1, [r7, #24]
 800f6f4:	68f8      	ldr	r0, [r7, #12]
 800f6f6:	f001 fb7b 	bl	8010df0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f6fa:	69b8      	ldr	r0, [r7, #24]
 800f6fc:	f7f8 fe1e 	bl	800833c <pbuf_free>
  p = NULL;
 800f700:	2300      	movs	r3, #0
 800f702:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f704:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f708:	4618      	mov	r0, r3
 800f70a:	3720      	adds	r7, #32
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	080145b8 	.word	0x080145b8
 800f714:	08014708 	.word	0x08014708
 800f718:	08014630 	.word	0x08014630
 800f71c:	080147b8 	.word	0x080147b8
 800f720:	080147ec 	.word	0x080147ec

0800f724 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b088      	sub	sp, #32
 800f728:	af04      	add	r7, sp, #16
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f740:	2201      	movs	r2, #1
 800f742:	9203      	str	r2, [sp, #12]
 800f744:	68ba      	ldr	r2, [r7, #8]
 800f746:	9202      	str	r2, [sp, #8]
 800f748:	4a06      	ldr	r2, [pc, #24]	@ (800f764 <etharp_request_dst+0x40>)
 800f74a:	9201      	str	r2, [sp, #4]
 800f74c:	9300      	str	r3, [sp, #0]
 800f74e:	4603      	mov	r3, r0
 800f750:	687a      	ldr	r2, [r7, #4]
 800f752:	68f8      	ldr	r0, [r7, #12]
 800f754:	f7ff ff5a 	bl	800f60c <etharp_raw>
 800f758:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3710      	adds	r7, #16
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	08014d7c 	.word	0x08014d7c

0800f768 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f772:	4a05      	ldr	r2, [pc, #20]	@ (800f788 <etharp_request+0x20>)
 800f774:	6839      	ldr	r1, [r7, #0]
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f7ff ffd4 	bl	800f724 <etharp_request_dst>
 800f77c:	4603      	mov	r3, r0
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	08014d74 	.word	0x08014d74

0800f78c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b08e      	sub	sp, #56	@ 0x38
 800f790:	af04      	add	r7, sp, #16
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f796:	4b79      	ldr	r3, [pc, #484]	@ (800f97c <icmp_input+0x1f0>)
 800f798:	689b      	ldr	r3, [r3, #8]
 800f79a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	f003 030f 	and.w	r3, r3, #15
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	009b      	lsls	r3, r3, #2
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800f7ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f7ae:	2b13      	cmp	r3, #19
 800f7b0:	f240 80cd 	bls.w	800f94e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	895b      	ldrh	r3, [r3, #10]
 800f7b8:	2b03      	cmp	r3, #3
 800f7ba:	f240 80ca 	bls.w	800f952 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f7c8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f000 80b7 	beq.w	800f940 <icmp_input+0x1b4>
 800f7d2:	2b08      	cmp	r3, #8
 800f7d4:	f040 80b7 	bne.w	800f946 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f7d8:	4b69      	ldr	r3, [pc, #420]	@ (800f980 <icmp_input+0x1f4>)
 800f7da:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f7dc:	4b67      	ldr	r3, [pc, #412]	@ (800f97c <icmp_input+0x1f0>)
 800f7de:	695b      	ldr	r3, [r3, #20]
 800f7e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f7e4:	2be0      	cmp	r3, #224	@ 0xe0
 800f7e6:	f000 80bb 	beq.w	800f960 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f7ea:	4b64      	ldr	r3, [pc, #400]	@ (800f97c <icmp_input+0x1f0>)
 800f7ec:	695b      	ldr	r3, [r3, #20]
 800f7ee:	4a63      	ldr	r2, [pc, #396]	@ (800f97c <icmp_input+0x1f0>)
 800f7f0:	6812      	ldr	r2, [r2, #0]
 800f7f2:	4611      	mov	r1, r2
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f000 fbed 	bl	800ffd4 <ip4_addr_isbroadcast_u32>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f040 80b1 	bne.w	800f964 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	891b      	ldrh	r3, [r3, #8]
 800f806:	2b07      	cmp	r3, #7
 800f808:	f240 80a5 	bls.w	800f956 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f80c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f80e:	330e      	adds	r3, #14
 800f810:	4619      	mov	r1, r3
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f7f8 fcfc 	bl	8008210 <pbuf_add_header>
 800f818:	4603      	mov	r3, r0
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d04b      	beq.n	800f8b6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	891a      	ldrh	r2, [r3, #8]
 800f822:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f824:	4413      	add	r3, r2
 800f826:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	891b      	ldrh	r3, [r3, #8]
 800f82c:	8b7a      	ldrh	r2, [r7, #26]
 800f82e:	429a      	cmp	r2, r3
 800f830:	f0c0 809a 	bcc.w	800f968 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f834:	8b7b      	ldrh	r3, [r7, #26]
 800f836:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f83a:	4619      	mov	r1, r3
 800f83c:	200e      	movs	r0, #14
 800f83e:	f7f8 fa99 	bl	8007d74 <pbuf_alloc>
 800f842:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	2b00      	cmp	r3, #0
 800f848:	f000 8090 	beq.w	800f96c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	895b      	ldrh	r3, [r3, #10]
 800f850:	461a      	mov	r2, r3
 800f852:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f854:	3308      	adds	r3, #8
 800f856:	429a      	cmp	r2, r3
 800f858:	d203      	bcs.n	800f862 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f85a:	6978      	ldr	r0, [r7, #20]
 800f85c:	f7f8 fd6e 	bl	800833c <pbuf_free>
          goto icmperr;
 800f860:	e085      	b.n	800f96e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f868:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f86a:	4618      	mov	r0, r3
 800f86c:	f001 fd31 	bl	80112d2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f870:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f872:	4619      	mov	r1, r3
 800f874:	6978      	ldr	r0, [r7, #20]
 800f876:	f7f8 fcdb 	bl	8008230 <pbuf_remove_header>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d009      	beq.n	800f894 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f880:	4b40      	ldr	r3, [pc, #256]	@ (800f984 <icmp_input+0x1f8>)
 800f882:	22b6      	movs	r2, #182	@ 0xb6
 800f884:	4940      	ldr	r1, [pc, #256]	@ (800f988 <icmp_input+0x1fc>)
 800f886:	4841      	ldr	r0, [pc, #260]	@ (800f98c <icmp_input+0x200>)
 800f888:	f001 fbfa 	bl	8011080 <iprintf>
          pbuf_free(r);
 800f88c:	6978      	ldr	r0, [r7, #20]
 800f88e:	f7f8 fd55 	bl	800833c <pbuf_free>
          goto icmperr;
 800f892:	e06c      	b.n	800f96e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f894:	6879      	ldr	r1, [r7, #4]
 800f896:	6978      	ldr	r0, [r7, #20]
 800f898:	f7f8 fe78 	bl	800858c <pbuf_copy>
 800f89c:	4603      	mov	r3, r0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d003      	beq.n	800f8aa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f8a2:	6978      	ldr	r0, [r7, #20]
 800f8a4:	f7f8 fd4a 	bl	800833c <pbuf_free>
          goto icmperr;
 800f8a8:	e061      	b.n	800f96e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f7f8 fd46 	bl	800833c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	607b      	str	r3, [r7, #4]
 800f8b4:	e00f      	b.n	800f8d6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f8b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f8b8:	330e      	adds	r3, #14
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f7f8 fcb7 	bl	8008230 <pbuf_remove_header>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d006      	beq.n	800f8d6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f8c8:	4b2e      	ldr	r3, [pc, #184]	@ (800f984 <icmp_input+0x1f8>)
 800f8ca:	22c7      	movs	r2, #199	@ 0xc7
 800f8cc:	4930      	ldr	r1, [pc, #192]	@ (800f990 <icmp_input+0x204>)
 800f8ce:	482f      	ldr	r0, [pc, #188]	@ (800f98c <icmp_input+0x200>)
 800f8d0:	f001 fbd6 	bl	8011080 <iprintf>
          goto icmperr;
 800f8d4:	e04b      	b.n	800f96e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	685b      	ldr	r3, [r3, #4]
 800f8da:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f8dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f8de:	4619      	mov	r1, r3
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f7f8 fc95 	bl	8008210 <pbuf_add_header>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d12b      	bne.n	800f944 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f8f2:	69fb      	ldr	r3, [r7, #28]
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f8fa:	4b20      	ldr	r3, [pc, #128]	@ (800f97c <icmp_input+0x1f0>)
 800f8fc:	691a      	ldr	r2, [r3, #16]
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	2200      	movs	r2, #0
 800f906:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	2200      	movs	r2, #0
 800f90c:	709a      	strb	r2, [r3, #2]
 800f90e:	2200      	movs	r2, #0
 800f910:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	22ff      	movs	r2, #255	@ 0xff
 800f916:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2200      	movs	r2, #0
 800f91c:	729a      	strb	r2, [r3, #10]
 800f91e:	2200      	movs	r2, #0
 800f920:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	9302      	str	r3, [sp, #8]
 800f926:	2301      	movs	r3, #1
 800f928:	9301      	str	r3, [sp, #4]
 800f92a:	2300      	movs	r3, #0
 800f92c:	9300      	str	r3, [sp, #0]
 800f92e:	23ff      	movs	r3, #255	@ 0xff
 800f930:	2200      	movs	r2, #0
 800f932:	69f9      	ldr	r1, [r7, #28]
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f000 fa75 	bl	800fe24 <ip4_output_if>
 800f93a:	4603      	mov	r3, r0
 800f93c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f93e:	e001      	b.n	800f944 <icmp_input+0x1b8>
      break;
 800f940:	bf00      	nop
 800f942:	e000      	b.n	800f946 <icmp_input+0x1ba>
      break;
 800f944:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f7f8 fcf8 	bl	800833c <pbuf_free>
  return;
 800f94c:	e013      	b.n	800f976 <icmp_input+0x1ea>
    goto lenerr;
 800f94e:	bf00      	nop
 800f950:	e002      	b.n	800f958 <icmp_input+0x1cc>
    goto lenerr;
 800f952:	bf00      	nop
 800f954:	e000      	b.n	800f958 <icmp_input+0x1cc>
        goto lenerr;
 800f956:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f7f8 fcef 	bl	800833c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f95e:	e00a      	b.n	800f976 <icmp_input+0x1ea>
        goto icmperr;
 800f960:	bf00      	nop
 800f962:	e004      	b.n	800f96e <icmp_input+0x1e2>
        goto icmperr;
 800f964:	bf00      	nop
 800f966:	e002      	b.n	800f96e <icmp_input+0x1e2>
          goto icmperr;
 800f968:	bf00      	nop
 800f96a:	e000      	b.n	800f96e <icmp_input+0x1e2>
          goto icmperr;
 800f96c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f7f8 fce4 	bl	800833c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f974:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f976:	3728      	adds	r7, #40	@ 0x28
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}
 800f97c:	200054d4 	.word	0x200054d4
 800f980:	200054e8 	.word	0x200054e8
 800f984:	08014830 	.word	0x08014830
 800f988:	08014868 	.word	0x08014868
 800f98c:	080148a0 	.word	0x080148a0
 800f990:	080148c8 	.word	0x080148c8

0800f994 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	460b      	mov	r3, r1
 800f99e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f9a0:	78fb      	ldrb	r3, [r7, #3]
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	2103      	movs	r1, #3
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f000 f814 	bl	800f9d4 <icmp_send_response>
}
 800f9ac:	bf00      	nop
 800f9ae:	3708      	adds	r7, #8
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}

0800f9b4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b082      	sub	sp, #8
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	460b      	mov	r3, r1
 800f9be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f9c0:	78fb      	ldrb	r3, [r7, #3]
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	210b      	movs	r1, #11
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 f804 	bl	800f9d4 <icmp_send_response>
}
 800f9cc:	bf00      	nop
 800f9ce:	3708      	adds	r7, #8
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b08c      	sub	sp, #48	@ 0x30
 800f9d8:	af04      	add	r7, sp, #16
 800f9da:	6078      	str	r0, [r7, #4]
 800f9dc:	460b      	mov	r3, r1
 800f9de:	70fb      	strb	r3, [r7, #3]
 800f9e0:	4613      	mov	r3, r2
 800f9e2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f9e4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f9e8:	2124      	movs	r1, #36	@ 0x24
 800f9ea:	2022      	movs	r0, #34	@ 0x22
 800f9ec:	f7f8 f9c2 	bl	8007d74 <pbuf_alloc>
 800f9f0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f9f2:	69fb      	ldr	r3, [r7, #28]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d04c      	beq.n	800fa92 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	895b      	ldrh	r3, [r3, #10]
 800f9fc:	2b23      	cmp	r3, #35	@ 0x23
 800f9fe:	d806      	bhi.n	800fa0e <icmp_send_response+0x3a>
 800fa00:	4b26      	ldr	r3, [pc, #152]	@ (800fa9c <icmp_send_response+0xc8>)
 800fa02:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800fa06:	4926      	ldr	r1, [pc, #152]	@ (800faa0 <icmp_send_response+0xcc>)
 800fa08:	4826      	ldr	r0, [pc, #152]	@ (800faa4 <icmp_send_response+0xd0>)
 800fa0a:	f001 fb39 	bl	8011080 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fa14:	69fb      	ldr	r3, [r7, #28]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	78fa      	ldrb	r2, [r7, #3]
 800fa1e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	78ba      	ldrb	r2, [r7, #2]
 800fa24:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	711a      	strb	r2, [r3, #4]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	2200      	movs	r2, #0
 800fa34:	719a      	strb	r2, [r3, #6]
 800fa36:	2200      	movs	r2, #0
 800fa38:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fa3a:	69fb      	ldr	r3, [r7, #28]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	f103 0008 	add.w	r0, r3, #8
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	221c      	movs	r2, #28
 800fa48:	4619      	mov	r1, r3
 800fa4a:	f001 fc42 	bl	80112d2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fa4e:	69bb      	ldr	r3, [r7, #24]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fa54:	f107 030c 	add.w	r3, r7, #12
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f000 f825 	bl	800faa8 <ip4_route>
 800fa5e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d011      	beq.n	800fa8a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	709a      	strb	r2, [r3, #2]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fa70:	f107 020c 	add.w	r2, r7, #12
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	9302      	str	r3, [sp, #8]
 800fa78:	2301      	movs	r3, #1
 800fa7a:	9301      	str	r3, [sp, #4]
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	9300      	str	r3, [sp, #0]
 800fa80:	23ff      	movs	r3, #255	@ 0xff
 800fa82:	2100      	movs	r1, #0
 800fa84:	69f8      	ldr	r0, [r7, #28]
 800fa86:	f000 f9cd 	bl	800fe24 <ip4_output_if>
  }
  pbuf_free(q);
 800fa8a:	69f8      	ldr	r0, [r7, #28]
 800fa8c:	f7f8 fc56 	bl	800833c <pbuf_free>
 800fa90:	e000      	b.n	800fa94 <icmp_send_response+0xc0>
    return;
 800fa92:	bf00      	nop
}
 800fa94:	3720      	adds	r7, #32
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	08014830 	.word	0x08014830
 800faa0:	080148fc 	.word	0x080148fc
 800faa4:	080148a0 	.word	0x080148a0

0800faa8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fab0:	4b33      	ldr	r3, [pc, #204]	@ (800fb80 <ip4_route+0xd8>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	60fb      	str	r3, [r7, #12]
 800fab6:	e036      	b.n	800fb26 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fabe:	f003 0301 	and.w	r3, r3, #1
 800fac2:	b2db      	uxtb	r3, r3
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d02b      	beq.n	800fb20 <ip4_route+0x78>
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800face:	089b      	lsrs	r3, r3, #2
 800fad0:	f003 0301 	and.w	r3, r3, #1
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d022      	beq.n	800fb20 <ip4_route+0x78>
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	3304      	adds	r3, #4
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d01d      	beq.n	800fb20 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681a      	ldr	r2, [r3, #0]
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	3304      	adds	r3, #4
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	405a      	eors	r2, r3
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	3308      	adds	r3, #8
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	4013      	ands	r3, r2
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d101      	bne.n	800fb00 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	e038      	b.n	800fb72 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fb06:	f003 0302 	and.w	r3, r3, #2
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d108      	bne.n	800fb20 <ip4_route+0x78>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681a      	ldr	r2, [r3, #0]
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	330c      	adds	r3, #12
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d101      	bne.n	800fb20 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	e028      	b.n	800fb72 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	60fb      	str	r3, [r7, #12]
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d1c5      	bne.n	800fab8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fb2c:	4b15      	ldr	r3, [pc, #84]	@ (800fb84 <ip4_route+0xdc>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d01a      	beq.n	800fb6a <ip4_route+0xc2>
 800fb34:	4b13      	ldr	r3, [pc, #76]	@ (800fb84 <ip4_route+0xdc>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fb3c:	f003 0301 	and.w	r3, r3, #1
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d012      	beq.n	800fb6a <ip4_route+0xc2>
 800fb44:	4b0f      	ldr	r3, [pc, #60]	@ (800fb84 <ip4_route+0xdc>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fb4c:	f003 0304 	and.w	r3, r3, #4
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d00a      	beq.n	800fb6a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fb54:	4b0b      	ldr	r3, [pc, #44]	@ (800fb84 <ip4_route+0xdc>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	3304      	adds	r3, #4
 800fb5a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d004      	beq.n	800fb6a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	2b7f      	cmp	r3, #127	@ 0x7f
 800fb68:	d101      	bne.n	800fb6e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	e001      	b.n	800fb72 <ip4_route+0xca>
  }

  return netif_default;
 800fb6e:	4b05      	ldr	r3, [pc, #20]	@ (800fb84 <ip4_route+0xdc>)
 800fb70:	681b      	ldr	r3, [r3, #0]
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3714      	adds	r7, #20
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	200087f8 	.word	0x200087f8
 800fb84:	200087fc 	.word	0x200087fc

0800fb88 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fb96:	f003 0301 	and.w	r3, r3, #1
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d016      	beq.n	800fbce <ip4_input_accept+0x46>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	3304      	adds	r3, #4
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d011      	beq.n	800fbce <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fbaa:	4b0b      	ldr	r3, [pc, #44]	@ (800fbd8 <ip4_input_accept+0x50>)
 800fbac:	695a      	ldr	r2, [r3, #20]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	3304      	adds	r3, #4
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d008      	beq.n	800fbca <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fbb8:	4b07      	ldr	r3, [pc, #28]	@ (800fbd8 <ip4_input_accept+0x50>)
 800fbba:	695b      	ldr	r3, [r3, #20]
 800fbbc:	6879      	ldr	r1, [r7, #4]
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f000 fa08 	bl	800ffd4 <ip4_addr_isbroadcast_u32>
 800fbc4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d001      	beq.n	800fbce <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800fbca:	2301      	movs	r3, #1
 800fbcc:	e000      	b.n	800fbd0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800fbce:	2300      	movs	r3, #0
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	200054d4 	.word	0x200054d4

0800fbdc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b086      	sub	sp, #24
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	091b      	lsrs	r3, r3, #4
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	2b04      	cmp	r3, #4
 800fbf6:	d004      	beq.n	800fc02 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f7f8 fb9f 	bl	800833c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	e107      	b.n	800fe12 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	f003 030f 	and.w	r3, r3, #15
 800fc0a:	b2db      	uxtb	r3, r3
 800fc0c:	009b      	lsls	r3, r3, #2
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	885b      	ldrh	r3, [r3, #2]
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7f7 f831 	bl	8006c80 <lwip_htons>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	891b      	ldrh	r3, [r3, #8]
 800fc26:	89ba      	ldrh	r2, [r7, #12]
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d204      	bcs.n	800fc36 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800fc2c:	89bb      	ldrh	r3, [r7, #12]
 800fc2e:	4619      	mov	r1, r3
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f7f8 f9fd 	bl	8008030 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	895b      	ldrh	r3, [r3, #10]
 800fc3a:	89fa      	ldrh	r2, [r7, #14]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d807      	bhi.n	800fc50 <ip4_input+0x74>
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	891b      	ldrh	r3, [r3, #8]
 800fc44:	89ba      	ldrh	r2, [r7, #12]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d802      	bhi.n	800fc50 <ip4_input+0x74>
 800fc4a:	89fb      	ldrh	r3, [r7, #14]
 800fc4c:	2b13      	cmp	r3, #19
 800fc4e:	d804      	bhi.n	800fc5a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f7f8 fb73 	bl	800833c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800fc56:	2300      	movs	r3, #0
 800fc58:	e0db      	b.n	800fe12 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	691b      	ldr	r3, [r3, #16]
 800fc5e:	4a6f      	ldr	r2, [pc, #444]	@ (800fe1c <ip4_input+0x240>)
 800fc60:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	4a6d      	ldr	r2, [pc, #436]	@ (800fe1c <ip4_input+0x240>)
 800fc68:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fc6a:	4b6c      	ldr	r3, [pc, #432]	@ (800fe1c <ip4_input+0x240>)
 800fc6c:	695b      	ldr	r3, [r3, #20]
 800fc6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fc72:	2be0      	cmp	r3, #224	@ 0xe0
 800fc74:	d112      	bne.n	800fc9c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fc7c:	f003 0301 	and.w	r3, r3, #1
 800fc80:	b2db      	uxtb	r3, r3
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d007      	beq.n	800fc96 <ip4_input+0xba>
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	3304      	adds	r3, #4
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d002      	beq.n	800fc96 <ip4_input+0xba>
      netif = inp;
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	613b      	str	r3, [r7, #16]
 800fc94:	e02a      	b.n	800fcec <ip4_input+0x110>
    } else {
      netif = NULL;
 800fc96:	2300      	movs	r3, #0
 800fc98:	613b      	str	r3, [r7, #16]
 800fc9a:	e027      	b.n	800fcec <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800fc9c:	6838      	ldr	r0, [r7, #0]
 800fc9e:	f7ff ff73 	bl	800fb88 <ip4_input_accept>
 800fca2:	4603      	mov	r3, r0
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d002      	beq.n	800fcae <ip4_input+0xd2>
      netif = inp;
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	613b      	str	r3, [r7, #16]
 800fcac:	e01e      	b.n	800fcec <ip4_input+0x110>
    } else {
      netif = NULL;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fcb2:	4b5a      	ldr	r3, [pc, #360]	@ (800fe1c <ip4_input+0x240>)
 800fcb4:	695b      	ldr	r3, [r3, #20]
 800fcb6:	b2db      	uxtb	r3, r3
 800fcb8:	2b7f      	cmp	r3, #127	@ 0x7f
 800fcba:	d017      	beq.n	800fcec <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fcbc:	4b58      	ldr	r3, [pc, #352]	@ (800fe20 <ip4_input+0x244>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	613b      	str	r3, [r7, #16]
 800fcc2:	e00e      	b.n	800fce2 <ip4_input+0x106>
          if (netif == inp) {
 800fcc4:	693a      	ldr	r2, [r7, #16]
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d006      	beq.n	800fcda <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800fccc:	6938      	ldr	r0, [r7, #16]
 800fcce:	f7ff ff5b 	bl	800fb88 <ip4_input_accept>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d108      	bne.n	800fcea <ip4_input+0x10e>
 800fcd8:	e000      	b.n	800fcdc <ip4_input+0x100>
            continue;
 800fcda:	bf00      	nop
        NETIF_FOREACH(netif) {
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	613b      	str	r3, [r7, #16]
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d1ed      	bne.n	800fcc4 <ip4_input+0xe8>
 800fce8:	e000      	b.n	800fcec <ip4_input+0x110>
            break;
 800fcea:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fcec:	4b4b      	ldr	r3, [pc, #300]	@ (800fe1c <ip4_input+0x240>)
 800fcee:	691b      	ldr	r3, [r3, #16]
 800fcf0:	6839      	ldr	r1, [r7, #0]
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f000 f96e 	bl	800ffd4 <ip4_addr_isbroadcast_u32>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d105      	bne.n	800fd0a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fcfe:	4b47      	ldr	r3, [pc, #284]	@ (800fe1c <ip4_input+0x240>)
 800fd00:	691b      	ldr	r3, [r3, #16]
 800fd02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fd06:	2be0      	cmp	r3, #224	@ 0xe0
 800fd08:	d104      	bne.n	800fd14 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f7f8 fb16 	bl	800833c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fd10:	2300      	movs	r3, #0
 800fd12:	e07e      	b.n	800fe12 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d104      	bne.n	800fd24 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f7f8 fb0e 	bl	800833c <pbuf_free>
    return ERR_OK;
 800fd20:	2300      	movs	r3, #0
 800fd22:	e076      	b.n	800fe12 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	88db      	ldrh	r3, [r3, #6]
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800fd30:	4013      	ands	r3, r2
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d00b      	beq.n	800fd4e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 fc92 	bl	8010660 <ip4_reass>
 800fd3c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d101      	bne.n	800fd48 <ip4_input+0x16c>
      return ERR_OK;
 800fd44:	2300      	movs	r3, #0
 800fd46:	e064      	b.n	800fe12 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800fd4e:	4a33      	ldr	r2, [pc, #204]	@ (800fe1c <ip4_input+0x240>)
 800fd50:	693b      	ldr	r3, [r7, #16]
 800fd52:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fd54:	4a31      	ldr	r2, [pc, #196]	@ (800fe1c <ip4_input+0x240>)
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fd5a:	4a30      	ldr	r2, [pc, #192]	@ (800fe1c <ip4_input+0x240>)
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	781b      	ldrb	r3, [r3, #0]
 800fd64:	f003 030f 	and.w	r3, r3, #15
 800fd68:	b2db      	uxtb	r3, r3
 800fd6a:	009b      	lsls	r3, r3, #2
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	461a      	mov	r2, r3
 800fd70:	4b2a      	ldr	r3, [pc, #168]	@ (800fe1c <ip4_input+0x240>)
 800fd72:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fd74:	89fb      	ldrh	r3, [r7, #14]
 800fd76:	4619      	mov	r1, r3
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f7f8 fa59 	bl	8008230 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	7a5b      	ldrb	r3, [r3, #9]
 800fd82:	2b11      	cmp	r3, #17
 800fd84:	d006      	beq.n	800fd94 <ip4_input+0x1b8>
 800fd86:	2b11      	cmp	r3, #17
 800fd88:	dc13      	bgt.n	800fdb2 <ip4_input+0x1d6>
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	d00c      	beq.n	800fda8 <ip4_input+0x1cc>
 800fd8e:	2b06      	cmp	r3, #6
 800fd90:	d005      	beq.n	800fd9e <ip4_input+0x1c2>
 800fd92:	e00e      	b.n	800fdb2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fd94:	6839      	ldr	r1, [r7, #0]
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f7fe f950 	bl	800e03c <udp_input>
        break;
 800fd9c:	e026      	b.n	800fdec <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800fd9e:	6839      	ldr	r1, [r7, #0]
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f7fa f997 	bl	800a0d4 <tcp_input>
        break;
 800fda6:	e021      	b.n	800fdec <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800fda8:	6839      	ldr	r1, [r7, #0]
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f7ff fcee 	bl	800f78c <icmp_input>
        break;
 800fdb0:	e01c      	b.n	800fdec <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fdb2:	4b1a      	ldr	r3, [pc, #104]	@ (800fe1c <ip4_input+0x240>)
 800fdb4:	695b      	ldr	r3, [r3, #20]
 800fdb6:	6939      	ldr	r1, [r7, #16]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f000 f90b 	bl	800ffd4 <ip4_addr_isbroadcast_u32>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d10f      	bne.n	800fde4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fdc4:	4b15      	ldr	r3, [pc, #84]	@ (800fe1c <ip4_input+0x240>)
 800fdc6:	695b      	ldr	r3, [r3, #20]
 800fdc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fdcc:	2be0      	cmp	r3, #224	@ 0xe0
 800fdce:	d009      	beq.n	800fde4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fdd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fdd4:	4619      	mov	r1, r3
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f7f8 fa9d 	bl	8008316 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fddc:	2102      	movs	r1, #2
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f7ff fdd8 	bl	800f994 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f7f8 faa9 	bl	800833c <pbuf_free>
        break;
 800fdea:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fdec:	4b0b      	ldr	r3, [pc, #44]	@ (800fe1c <ip4_input+0x240>)
 800fdee:	2200      	movs	r2, #0
 800fdf0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fdf2:	4b0a      	ldr	r3, [pc, #40]	@ (800fe1c <ip4_input+0x240>)
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fdf8:	4b08      	ldr	r3, [pc, #32]	@ (800fe1c <ip4_input+0x240>)
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fdfe:	4b07      	ldr	r3, [pc, #28]	@ (800fe1c <ip4_input+0x240>)
 800fe00:	2200      	movs	r2, #0
 800fe02:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fe04:	4b05      	ldr	r3, [pc, #20]	@ (800fe1c <ip4_input+0x240>)
 800fe06:	2200      	movs	r2, #0
 800fe08:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fe0a:	4b04      	ldr	r3, [pc, #16]	@ (800fe1c <ip4_input+0x240>)
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fe10:	2300      	movs	r3, #0
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3718      	adds	r7, #24
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	200054d4 	.word	0x200054d4
 800fe20:	200087f8 	.word	0x200087f8

0800fe24 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b08a      	sub	sp, #40	@ 0x28
 800fe28:	af04      	add	r7, sp, #16
 800fe2a:	60f8      	str	r0, [r7, #12]
 800fe2c:	60b9      	str	r1, [r7, #8]
 800fe2e:	607a      	str	r2, [r7, #4]
 800fe30:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d009      	beq.n	800fe50 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d003      	beq.n	800fe4a <ip4_output_if+0x26>
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d102      	bne.n	800fe50 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800fe4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe4c:	3304      	adds	r3, #4
 800fe4e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fe50:	78fa      	ldrb	r2, [r7, #3]
 800fe52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe54:	9302      	str	r3, [sp, #8]
 800fe56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fe5a:	9301      	str	r3, [sp, #4]
 800fe5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fe60:	9300      	str	r3, [sp, #0]
 800fe62:	4613      	mov	r3, r2
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	6979      	ldr	r1, [r7, #20]
 800fe68:	68f8      	ldr	r0, [r7, #12]
 800fe6a:	f000 f805 	bl	800fe78 <ip4_output_if_src>
 800fe6e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3718      	adds	r7, #24
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b088      	sub	sp, #32
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	60f8      	str	r0, [r7, #12]
 800fe80:	60b9      	str	r1, [r7, #8]
 800fe82:	607a      	str	r2, [r7, #4]
 800fe84:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	7b9b      	ldrb	r3, [r3, #14]
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d006      	beq.n	800fe9c <ip4_output_if_src+0x24>
 800fe8e:	4b4b      	ldr	r3, [pc, #300]	@ (800ffbc <ip4_output_if_src+0x144>)
 800fe90:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800fe94:	494a      	ldr	r1, [pc, #296]	@ (800ffc0 <ip4_output_if_src+0x148>)
 800fe96:	484b      	ldr	r0, [pc, #300]	@ (800ffc4 <ip4_output_if_src+0x14c>)
 800fe98:	f001 f8f2 	bl	8011080 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d060      	beq.n	800ff64 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800fea2:	2314      	movs	r3, #20
 800fea4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800fea6:	2114      	movs	r1, #20
 800fea8:	68f8      	ldr	r0, [r7, #12]
 800feaa:	f7f8 f9b1 	bl	8008210 <pbuf_add_header>
 800feae:	4603      	mov	r3, r0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d002      	beq.n	800feba <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800feb4:	f06f 0301 	mvn.w	r3, #1
 800feb8:	e07c      	b.n	800ffb4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	895b      	ldrh	r3, [r3, #10]
 800fec4:	2b13      	cmp	r3, #19
 800fec6:	d806      	bhi.n	800fed6 <ip4_output_if_src+0x5e>
 800fec8:	4b3c      	ldr	r3, [pc, #240]	@ (800ffbc <ip4_output_if_src+0x144>)
 800feca:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800fece:	493e      	ldr	r1, [pc, #248]	@ (800ffc8 <ip4_output_if_src+0x150>)
 800fed0:	483c      	ldr	r0, [pc, #240]	@ (800ffc4 <ip4_output_if_src+0x14c>)
 800fed2:	f001 f8d5 	bl	8011080 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fed6:	69fb      	ldr	r3, [r7, #28]
 800fed8:	78fa      	ldrb	r2, [r7, #3]
 800feda:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800fee2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681a      	ldr	r2, [r3, #0]
 800fee8:	69fb      	ldr	r3, [r7, #28]
 800feea:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800feec:	8b7b      	ldrh	r3, [r7, #26]
 800feee:	089b      	lsrs	r3, r3, #2
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fef8:	b2da      	uxtb	r2, r3
 800fefa:	69fb      	ldr	r3, [r7, #28]
 800fefc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800fefe:	69fb      	ldr	r3, [r7, #28]
 800ff00:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800ff04:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	891b      	ldrh	r3, [r3, #8]
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7f6 feb8 	bl	8006c80 <lwip_htons>
 800ff10:	4603      	mov	r3, r0
 800ff12:	461a      	mov	r2, r3
 800ff14:	69fb      	ldr	r3, [r7, #28]
 800ff16:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ff18:	69fb      	ldr	r3, [r7, #28]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	719a      	strb	r2, [r3, #6]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ff22:	4b2a      	ldr	r3, [pc, #168]	@ (800ffcc <ip4_output_if_src+0x154>)
 800ff24:	881b      	ldrh	r3, [r3, #0]
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7f6 feaa 	bl	8006c80 <lwip_htons>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	461a      	mov	r2, r3
 800ff30:	69fb      	ldr	r3, [r7, #28]
 800ff32:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ff34:	4b25      	ldr	r3, [pc, #148]	@ (800ffcc <ip4_output_if_src+0x154>)
 800ff36:	881b      	ldrh	r3, [r3, #0]
 800ff38:	3301      	adds	r3, #1
 800ff3a:	b29a      	uxth	r2, r3
 800ff3c:	4b23      	ldr	r3, [pc, #140]	@ (800ffcc <ip4_output_if_src+0x154>)
 800ff3e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d104      	bne.n	800ff50 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ff46:	4b22      	ldr	r3, [pc, #136]	@ (800ffd0 <ip4_output_if_src+0x158>)
 800ff48:	681a      	ldr	r2, [r3, #0]
 800ff4a:	69fb      	ldr	r3, [r7, #28]
 800ff4c:	60da      	str	r2, [r3, #12]
 800ff4e:	e003      	b.n	800ff58 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	681a      	ldr	r2, [r3, #0]
 800ff54:	69fb      	ldr	r3, [r7, #28]
 800ff56:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ff58:	69fb      	ldr	r3, [r7, #28]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	729a      	strb	r2, [r3, #10]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	72da      	strb	r2, [r3, #11]
 800ff62:	e00f      	b.n	800ff84 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	895b      	ldrh	r3, [r3, #10]
 800ff68:	2b13      	cmp	r3, #19
 800ff6a:	d802      	bhi.n	800ff72 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ff6c:	f06f 0301 	mvn.w	r3, #1
 800ff70:	e020      	b.n	800ffb4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ff78:	69fb      	ldr	r3, [r7, #28]
 800ff7a:	691b      	ldr	r3, [r3, #16]
 800ff7c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ff7e:	f107 0314 	add.w	r3, r7, #20
 800ff82:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ff84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff86:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d00c      	beq.n	800ffa6 <ip4_output_if_src+0x12e>
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	891a      	ldrh	r2, [r3, #8]
 800ff90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff92:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d906      	bls.n	800ffa6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ff9c:	68f8      	ldr	r0, [r7, #12]
 800ff9e:	f000 fd53 	bl	8010a48 <ip4_frag>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	e006      	b.n	800ffb4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ffa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffa8:	695b      	ldr	r3, [r3, #20]
 800ffaa:	687a      	ldr	r2, [r7, #4]
 800ffac:	68f9      	ldr	r1, [r7, #12]
 800ffae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ffb0:	4798      	blx	r3
 800ffb2:	4603      	mov	r3, r0
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3720      	adds	r7, #32
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}
 800ffbc:	08014928 	.word	0x08014928
 800ffc0:	0801495c 	.word	0x0801495c
 800ffc4:	08014968 	.word	0x08014968
 800ffc8:	08014990 	.word	0x08014990
 800ffcc:	20008956 	.word	0x20008956
 800ffd0:	08014d70 	.word	0x08014d70

0800ffd4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b085      	sub	sp, #20
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffe8:	d002      	beq.n	800fff0 <ip4_addr_isbroadcast_u32+0x1c>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d101      	bne.n	800fff4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800fff0:	2301      	movs	r3, #1
 800fff2:	e02a      	b.n	801004a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fffa:	f003 0302 	and.w	r3, r3, #2
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d101      	bne.n	8010006 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010002:	2300      	movs	r3, #0
 8010004:	e021      	b.n	801004a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	3304      	adds	r3, #4
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	429a      	cmp	r2, r3
 8010010:	d101      	bne.n	8010016 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010012:	2300      	movs	r3, #0
 8010014:	e019      	b.n	801004a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010016:	68fa      	ldr	r2, [r7, #12]
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	3304      	adds	r3, #4
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	405a      	eors	r2, r3
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	3308      	adds	r3, #8
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	4013      	ands	r3, r2
 8010028:	2b00      	cmp	r3, #0
 801002a:	d10d      	bne.n	8010048 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	3308      	adds	r3, #8
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	43da      	mvns	r2, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	3308      	adds	r3, #8
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010040:	429a      	cmp	r2, r3
 8010042:	d101      	bne.n	8010048 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010044:	2301      	movs	r3, #1
 8010046:	e000      	b.n	801004a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010048:	2300      	movs	r3, #0
  }
}
 801004a:	4618      	mov	r0, r3
 801004c:	3714      	adds	r7, #20
 801004e:	46bd      	mov	sp, r7
 8010050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010054:	4770      	bx	lr
	...

08010058 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801005e:	2300      	movs	r3, #0
 8010060:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010062:	4b12      	ldr	r3, [pc, #72]	@ (80100ac <ip_reass_tmr+0x54>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010068:	e018      	b.n	801009c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	7fdb      	ldrb	r3, [r3, #31]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d00b      	beq.n	801008a <ip_reass_tmr+0x32>
      r->timer--;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	7fdb      	ldrb	r3, [r3, #31]
 8010076:	3b01      	subs	r3, #1
 8010078:	b2da      	uxtb	r2, r3
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	60fb      	str	r3, [r7, #12]
 8010088:	e008      	b.n	801009c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010094:	68b9      	ldr	r1, [r7, #8]
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 f80a 	bl	80100b0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d1e3      	bne.n	801006a <ip_reass_tmr+0x12>
    }
  }
}
 80100a2:	bf00      	nop
 80100a4:	bf00      	nop
 80100a6:	3710      	adds	r7, #16
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	20008958 	.word	0x20008958

080100b0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b088      	sub	sp, #32
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80100ba:	2300      	movs	r3, #0
 80100bc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80100be:	683a      	ldr	r2, [r7, #0]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d105      	bne.n	80100d2 <ip_reass_free_complete_datagram+0x22>
 80100c6:	4b45      	ldr	r3, [pc, #276]	@ (80101dc <ip_reass_free_complete_datagram+0x12c>)
 80100c8:	22ab      	movs	r2, #171	@ 0xab
 80100ca:	4945      	ldr	r1, [pc, #276]	@ (80101e0 <ip_reass_free_complete_datagram+0x130>)
 80100cc:	4845      	ldr	r0, [pc, #276]	@ (80101e4 <ip_reass_free_complete_datagram+0x134>)
 80100ce:	f000 ffd7 	bl	8011080 <iprintf>
  if (prev != NULL) {
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d00a      	beq.n	80100ee <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	687a      	ldr	r2, [r7, #4]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d005      	beq.n	80100ee <ip_reass_free_complete_datagram+0x3e>
 80100e2:	4b3e      	ldr	r3, [pc, #248]	@ (80101dc <ip_reass_free_complete_datagram+0x12c>)
 80100e4:	22ad      	movs	r2, #173	@ 0xad
 80100e6:	4940      	ldr	r1, [pc, #256]	@ (80101e8 <ip_reass_free_complete_datagram+0x138>)
 80100e8:	483e      	ldr	r0, [pc, #248]	@ (80101e4 <ip_reass_free_complete_datagram+0x134>)
 80100ea:	f000 ffc9 	bl	8011080 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	685b      	ldr	r3, [r3, #4]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	889b      	ldrh	r3, [r3, #4]
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d12a      	bne.n	8010156 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	681a      	ldr	r2, [r3, #0]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801010e:	69bb      	ldr	r3, [r7, #24]
 8010110:	6858      	ldr	r0, [r3, #4]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	3308      	adds	r3, #8
 8010116:	2214      	movs	r2, #20
 8010118:	4619      	mov	r1, r3
 801011a:	f001 f8da 	bl	80112d2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801011e:	2101      	movs	r1, #1
 8010120:	69b8      	ldr	r0, [r7, #24]
 8010122:	f7ff fc47 	bl	800f9b4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010126:	69b8      	ldr	r0, [r7, #24]
 8010128:	f7f8 f990 	bl	800844c <pbuf_clen>
 801012c:	4603      	mov	r3, r0
 801012e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010130:	8bfa      	ldrh	r2, [r7, #30]
 8010132:	8a7b      	ldrh	r3, [r7, #18]
 8010134:	4413      	add	r3, r2
 8010136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801013a:	db05      	blt.n	8010148 <ip_reass_free_complete_datagram+0x98>
 801013c:	4b27      	ldr	r3, [pc, #156]	@ (80101dc <ip_reass_free_complete_datagram+0x12c>)
 801013e:	22bc      	movs	r2, #188	@ 0xbc
 8010140:	492a      	ldr	r1, [pc, #168]	@ (80101ec <ip_reass_free_complete_datagram+0x13c>)
 8010142:	4828      	ldr	r0, [pc, #160]	@ (80101e4 <ip_reass_free_complete_datagram+0x134>)
 8010144:	f000 ff9c 	bl	8011080 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010148:	8bfa      	ldrh	r2, [r7, #30]
 801014a:	8a7b      	ldrh	r3, [r7, #18]
 801014c:	4413      	add	r3, r2
 801014e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010150:	69b8      	ldr	r0, [r7, #24]
 8010152:	f7f8 f8f3 	bl	800833c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801015c:	e01f      	b.n	801019e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801015e:	69bb      	ldr	r3, [r7, #24]
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010164:	69bb      	ldr	r3, [r7, #24]
 8010166:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801016e:	68f8      	ldr	r0, [r7, #12]
 8010170:	f7f8 f96c 	bl	800844c <pbuf_clen>
 8010174:	4603      	mov	r3, r0
 8010176:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010178:	8bfa      	ldrh	r2, [r7, #30]
 801017a:	8a7b      	ldrh	r3, [r7, #18]
 801017c:	4413      	add	r3, r2
 801017e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010182:	db05      	blt.n	8010190 <ip_reass_free_complete_datagram+0xe0>
 8010184:	4b15      	ldr	r3, [pc, #84]	@ (80101dc <ip_reass_free_complete_datagram+0x12c>)
 8010186:	22cc      	movs	r2, #204	@ 0xcc
 8010188:	4918      	ldr	r1, [pc, #96]	@ (80101ec <ip_reass_free_complete_datagram+0x13c>)
 801018a:	4816      	ldr	r0, [pc, #88]	@ (80101e4 <ip_reass_free_complete_datagram+0x134>)
 801018c:	f000 ff78 	bl	8011080 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010190:	8bfa      	ldrh	r2, [r7, #30]
 8010192:	8a7b      	ldrh	r3, [r7, #18]
 8010194:	4413      	add	r3, r2
 8010196:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010198:	68f8      	ldr	r0, [r7, #12]
 801019a:	f7f8 f8cf 	bl	800833c <pbuf_free>
  while (p != NULL) {
 801019e:	69bb      	ldr	r3, [r7, #24]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d1dc      	bne.n	801015e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80101a4:	6839      	ldr	r1, [r7, #0]
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f000 f8c2 	bl	8010330 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80101ac:	4b10      	ldr	r3, [pc, #64]	@ (80101f0 <ip_reass_free_complete_datagram+0x140>)
 80101ae:	881b      	ldrh	r3, [r3, #0]
 80101b0:	8bfa      	ldrh	r2, [r7, #30]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d905      	bls.n	80101c2 <ip_reass_free_complete_datagram+0x112>
 80101b6:	4b09      	ldr	r3, [pc, #36]	@ (80101dc <ip_reass_free_complete_datagram+0x12c>)
 80101b8:	22d2      	movs	r2, #210	@ 0xd2
 80101ba:	490e      	ldr	r1, [pc, #56]	@ (80101f4 <ip_reass_free_complete_datagram+0x144>)
 80101bc:	4809      	ldr	r0, [pc, #36]	@ (80101e4 <ip_reass_free_complete_datagram+0x134>)
 80101be:	f000 ff5f 	bl	8011080 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80101c2:	4b0b      	ldr	r3, [pc, #44]	@ (80101f0 <ip_reass_free_complete_datagram+0x140>)
 80101c4:	881a      	ldrh	r2, [r3, #0]
 80101c6:	8bfb      	ldrh	r3, [r7, #30]
 80101c8:	1ad3      	subs	r3, r2, r3
 80101ca:	b29a      	uxth	r2, r3
 80101cc:	4b08      	ldr	r3, [pc, #32]	@ (80101f0 <ip_reass_free_complete_datagram+0x140>)
 80101ce:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80101d0:	8bfb      	ldrh	r3, [r7, #30]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3720      	adds	r7, #32
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
 80101da:	bf00      	nop
 80101dc:	080149c0 	.word	0x080149c0
 80101e0:	080149fc 	.word	0x080149fc
 80101e4:	08014a08 	.word	0x08014a08
 80101e8:	08014a30 	.word	0x08014a30
 80101ec:	08014a44 	.word	0x08014a44
 80101f0:	2000895c 	.word	0x2000895c
 80101f4:	08014a64 	.word	0x08014a64

080101f8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b08a      	sub	sp, #40	@ 0x28
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010202:	2300      	movs	r3, #0
 8010204:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010206:	2300      	movs	r3, #0
 8010208:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801020a:	2300      	movs	r3, #0
 801020c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801020e:	2300      	movs	r3, #0
 8010210:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010212:	2300      	movs	r3, #0
 8010214:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010216:	4b28      	ldr	r3, [pc, #160]	@ (80102b8 <ip_reass_remove_oldest_datagram+0xc0>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801021c:	e030      	b.n	8010280 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801021e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010220:	695a      	ldr	r2, [r3, #20]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	68db      	ldr	r3, [r3, #12]
 8010226:	429a      	cmp	r2, r3
 8010228:	d10c      	bne.n	8010244 <ip_reass_remove_oldest_datagram+0x4c>
 801022a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801022c:	699a      	ldr	r2, [r3, #24]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	691b      	ldr	r3, [r3, #16]
 8010232:	429a      	cmp	r2, r3
 8010234:	d106      	bne.n	8010244 <ip_reass_remove_oldest_datagram+0x4c>
 8010236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010238:	899a      	ldrh	r2, [r3, #12]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	889b      	ldrh	r3, [r3, #4]
 801023e:	b29b      	uxth	r3, r3
 8010240:	429a      	cmp	r2, r3
 8010242:	d014      	beq.n	801026e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	3301      	adds	r3, #1
 8010248:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801024a:	6a3b      	ldr	r3, [r7, #32]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d104      	bne.n	801025a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010252:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	61bb      	str	r3, [r7, #24]
 8010258:	e009      	b.n	801026e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801025a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801025c:	7fda      	ldrb	r2, [r3, #31]
 801025e:	6a3b      	ldr	r3, [r7, #32]
 8010260:	7fdb      	ldrb	r3, [r3, #31]
 8010262:	429a      	cmp	r2, r3
 8010264:	d803      	bhi.n	801026e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010268:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801026a:	69fb      	ldr	r3, [r7, #28]
 801026c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801026e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d001      	beq.n	801027a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010278:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801027a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8010280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010282:	2b00      	cmp	r3, #0
 8010284:	d1cb      	bne.n	801021e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010286:	6a3b      	ldr	r3, [r7, #32]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d008      	beq.n	801029e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801028c:	69b9      	ldr	r1, [r7, #24]
 801028e:	6a38      	ldr	r0, [r7, #32]
 8010290:	f7ff ff0e 	bl	80100b0 <ip_reass_free_complete_datagram>
 8010294:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010296:	697a      	ldr	r2, [r7, #20]
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	4413      	add	r3, r2
 801029c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801029e:	697a      	ldr	r2, [r7, #20]
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	da02      	bge.n	80102ac <ip_reass_remove_oldest_datagram+0xb4>
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	dcac      	bgt.n	8010206 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80102ac:	697b      	ldr	r3, [r7, #20]
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3728      	adds	r7, #40	@ 0x28
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	20008958 	.word	0x20008958

080102bc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b084      	sub	sp, #16
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80102c6:	2004      	movs	r0, #4
 80102c8:	f7f7 f952 	bl	8007570 <memp_malloc>
 80102cc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d110      	bne.n	80102f6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80102d4:	6839      	ldr	r1, [r7, #0]
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f7ff ff8e 	bl	80101f8 <ip_reass_remove_oldest_datagram>
 80102dc:	4602      	mov	r2, r0
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	4293      	cmp	r3, r2
 80102e2:	dc03      	bgt.n	80102ec <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80102e4:	2004      	movs	r0, #4
 80102e6:	f7f7 f943 	bl	8007570 <memp_malloc>
 80102ea:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d101      	bne.n	80102f6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80102f2:	2300      	movs	r3, #0
 80102f4:	e016      	b.n	8010324 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80102f6:	2220      	movs	r2, #32
 80102f8:	2100      	movs	r1, #0
 80102fa:	68f8      	ldr	r0, [r7, #12]
 80102fc:	f000 ff61 	bl	80111c2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	220f      	movs	r2, #15
 8010304:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010306:	4b09      	ldr	r3, [pc, #36]	@ (801032c <ip_reass_enqueue_new_datagram+0x70>)
 8010308:	681a      	ldr	r2, [r3, #0]
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801030e:	4a07      	ldr	r2, [pc, #28]	@ (801032c <ip_reass_enqueue_new_datagram+0x70>)
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	3308      	adds	r3, #8
 8010318:	2214      	movs	r2, #20
 801031a:	6879      	ldr	r1, [r7, #4]
 801031c:	4618      	mov	r0, r3
 801031e:	f000 ffd8 	bl	80112d2 <memcpy>
  return ipr;
 8010322:	68fb      	ldr	r3, [r7, #12]
}
 8010324:	4618      	mov	r0, r3
 8010326:	3710      	adds	r7, #16
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}
 801032c:	20008958 	.word	0x20008958

08010330 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
 8010338:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801033a:	4b10      	ldr	r3, [pc, #64]	@ (801037c <ip_reass_dequeue_datagram+0x4c>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	429a      	cmp	r2, r3
 8010342:	d104      	bne.n	801034e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	4a0c      	ldr	r2, [pc, #48]	@ (801037c <ip_reass_dequeue_datagram+0x4c>)
 801034a:	6013      	str	r3, [r2, #0]
 801034c:	e00d      	b.n	801036a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d106      	bne.n	8010362 <ip_reass_dequeue_datagram+0x32>
 8010354:	4b0a      	ldr	r3, [pc, #40]	@ (8010380 <ip_reass_dequeue_datagram+0x50>)
 8010356:	f240 1245 	movw	r2, #325	@ 0x145
 801035a:	490a      	ldr	r1, [pc, #40]	@ (8010384 <ip_reass_dequeue_datagram+0x54>)
 801035c:	480a      	ldr	r0, [pc, #40]	@ (8010388 <ip_reass_dequeue_datagram+0x58>)
 801035e:	f000 fe8f 	bl	8011080 <iprintf>
    prev->next = ipr->next;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681a      	ldr	r2, [r3, #0]
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801036a:	6879      	ldr	r1, [r7, #4]
 801036c:	2004      	movs	r0, #4
 801036e:	f7f7 f96f 	bl	8007650 <memp_free>
}
 8010372:	bf00      	nop
 8010374:	3708      	adds	r7, #8
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	20008958 	.word	0x20008958
 8010380:	080149c0 	.word	0x080149c0
 8010384:	08014a88 	.word	0x08014a88
 8010388:	08014a08 	.word	0x08014a08

0801038c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b08c      	sub	sp, #48	@ 0x30
 8010390:	af00      	add	r7, sp, #0
 8010392:	60f8      	str	r0, [r7, #12]
 8010394:	60b9      	str	r1, [r7, #8]
 8010396:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010398:	2300      	movs	r3, #0
 801039a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801039c:	2301      	movs	r3, #1
 801039e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80103a6:	69fb      	ldr	r3, [r7, #28]
 80103a8:	885b      	ldrh	r3, [r3, #2]
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	4618      	mov	r0, r3
 80103ae:	f7f6 fc67 	bl	8006c80 <lwip_htons>
 80103b2:	4603      	mov	r3, r0
 80103b4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	781b      	ldrb	r3, [r3, #0]
 80103ba:	f003 030f 	and.w	r3, r3, #15
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	009b      	lsls	r3, r3, #2
 80103c2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80103c4:	7e7b      	ldrb	r3, [r7, #25]
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	8b7a      	ldrh	r2, [r7, #26]
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d202      	bcs.n	80103d4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80103ce:	f04f 33ff 	mov.w	r3, #4294967295
 80103d2:	e135      	b.n	8010640 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80103d4:	7e7b      	ldrb	r3, [r7, #25]
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	8b7a      	ldrh	r2, [r7, #26]
 80103da:	1ad3      	subs	r3, r2, r3
 80103dc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80103de:	69fb      	ldr	r3, [r7, #28]
 80103e0:	88db      	ldrh	r3, [r3, #6]
 80103e2:	b29b      	uxth	r3, r3
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7f6 fc4b 	bl	8006c80 <lwip_htons>
 80103ea:	4603      	mov	r3, r0
 80103ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	00db      	lsls	r3, r3, #3
 80103f4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	685b      	ldr	r3, [r3, #4]
 80103fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80103fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103fe:	2200      	movs	r2, #0
 8010400:	701a      	strb	r2, [r3, #0]
 8010402:	2200      	movs	r2, #0
 8010404:	705a      	strb	r2, [r3, #1]
 8010406:	2200      	movs	r2, #0
 8010408:	709a      	strb	r2, [r3, #2]
 801040a:	2200      	movs	r2, #0
 801040c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801040e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010410:	8afa      	ldrh	r2, [r7, #22]
 8010412:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010414:	8afa      	ldrh	r2, [r7, #22]
 8010416:	8b7b      	ldrh	r3, [r7, #26]
 8010418:	4413      	add	r3, r2
 801041a:	b29a      	uxth	r2, r3
 801041c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801041e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010422:	88db      	ldrh	r3, [r3, #6]
 8010424:	b29b      	uxth	r3, r3
 8010426:	8afa      	ldrh	r2, [r7, #22]
 8010428:	429a      	cmp	r2, r3
 801042a:	d902      	bls.n	8010432 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801042c:	f04f 33ff 	mov.w	r3, #4294967295
 8010430:	e106      	b.n	8010640 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	627b      	str	r3, [r7, #36]	@ 0x24
 8010438:	e068      	b.n	801050c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801043a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010442:	889b      	ldrh	r3, [r3, #4]
 8010444:	b29a      	uxth	r2, r3
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	889b      	ldrh	r3, [r3, #4]
 801044a:	b29b      	uxth	r3, r3
 801044c:	429a      	cmp	r2, r3
 801044e:	d235      	bcs.n	80104bc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010454:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010458:	2b00      	cmp	r3, #0
 801045a:	d020      	beq.n	801049e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801045c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801045e:	889b      	ldrh	r3, [r3, #4]
 8010460:	b29a      	uxth	r2, r3
 8010462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010464:	88db      	ldrh	r3, [r3, #6]
 8010466:	b29b      	uxth	r3, r3
 8010468:	429a      	cmp	r2, r3
 801046a:	d307      	bcc.n	801047c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801046c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801046e:	88db      	ldrh	r3, [r3, #6]
 8010470:	b29a      	uxth	r2, r3
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	889b      	ldrh	r3, [r3, #4]
 8010476:	b29b      	uxth	r3, r3
 8010478:	429a      	cmp	r2, r3
 801047a:	d902      	bls.n	8010482 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801047c:	f04f 33ff 	mov.w	r3, #4294967295
 8010480:	e0de      	b.n	8010640 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010484:	68ba      	ldr	r2, [r7, #8]
 8010486:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801048a:	88db      	ldrh	r3, [r3, #6]
 801048c:	b29a      	uxth	r2, r3
 801048e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010490:	889b      	ldrh	r3, [r3, #4]
 8010492:	b29b      	uxth	r3, r3
 8010494:	429a      	cmp	r2, r3
 8010496:	d03d      	beq.n	8010514 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010498:	2300      	movs	r3, #0
 801049a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801049c:	e03a      	b.n	8010514 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801049e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104a0:	88db      	ldrh	r3, [r3, #6]
 80104a2:	b29a      	uxth	r2, r3
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	889b      	ldrh	r3, [r3, #4]
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d902      	bls.n	80104b4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104ae:	f04f 33ff 	mov.w	r3, #4294967295
 80104b2:	e0c5      	b.n	8010640 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	68ba      	ldr	r2, [r7, #8]
 80104b8:	605a      	str	r2, [r3, #4]
      break;
 80104ba:	e02b      	b.n	8010514 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80104bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104be:	889b      	ldrh	r3, [r3, #4]
 80104c0:	b29a      	uxth	r2, r3
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	889b      	ldrh	r3, [r3, #4]
 80104c6:	b29b      	uxth	r3, r3
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d102      	bne.n	80104d2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104cc:	f04f 33ff 	mov.w	r3, #4294967295
 80104d0:	e0b6      	b.n	8010640 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80104d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104d4:	889b      	ldrh	r3, [r3, #4]
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	88db      	ldrh	r3, [r3, #6]
 80104dc:	b29b      	uxth	r3, r3
 80104de:	429a      	cmp	r2, r3
 80104e0:	d202      	bcs.n	80104e8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104e2:	f04f 33ff 	mov.w	r3, #4294967295
 80104e6:	e0ab      	b.n	8010640 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80104e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d009      	beq.n	8010502 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80104ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104f0:	88db      	ldrh	r3, [r3, #6]
 80104f2:	b29a      	uxth	r2, r3
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	889b      	ldrh	r3, [r3, #4]
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d001      	beq.n	8010502 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80104fe:	2300      	movs	r3, #0
 8010500:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801050c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801050e:	2b00      	cmp	r3, #0
 8010510:	d193      	bne.n	801043a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010512:	e000      	b.n	8010516 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010514:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010518:	2b00      	cmp	r3, #0
 801051a:	d12d      	bne.n	8010578 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801051c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801051e:	2b00      	cmp	r3, #0
 8010520:	d01c      	beq.n	801055c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010524:	88db      	ldrh	r3, [r3, #6]
 8010526:	b29a      	uxth	r2, r3
 8010528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801052a:	889b      	ldrh	r3, [r3, #4]
 801052c:	b29b      	uxth	r3, r3
 801052e:	429a      	cmp	r2, r3
 8010530:	d906      	bls.n	8010540 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010532:	4b45      	ldr	r3, [pc, #276]	@ (8010648 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010534:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8010538:	4944      	ldr	r1, [pc, #272]	@ (801064c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801053a:	4845      	ldr	r0, [pc, #276]	@ (8010650 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801053c:	f000 fda0 	bl	8011080 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010542:	68ba      	ldr	r2, [r7, #8]
 8010544:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010548:	88db      	ldrh	r3, [r3, #6]
 801054a:	b29a      	uxth	r2, r3
 801054c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801054e:	889b      	ldrh	r3, [r3, #4]
 8010550:	b29b      	uxth	r3, r3
 8010552:	429a      	cmp	r2, r3
 8010554:	d010      	beq.n	8010578 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010556:	2300      	movs	r3, #0
 8010558:	623b      	str	r3, [r7, #32]
 801055a:	e00d      	b.n	8010578 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d006      	beq.n	8010572 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010564:	4b38      	ldr	r3, [pc, #224]	@ (8010648 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010566:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801056a:	493a      	ldr	r1, [pc, #232]	@ (8010654 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801056c:	4838      	ldr	r0, [pc, #224]	@ (8010650 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801056e:	f000 fd87 	bl	8011080 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	68ba      	ldr	r2, [r7, #8]
 8010576:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d105      	bne.n	801058a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	7f9b      	ldrb	r3, [r3, #30]
 8010582:	f003 0301 	and.w	r3, r3, #1
 8010586:	2b00      	cmp	r3, #0
 8010588:	d059      	beq.n	801063e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801058a:	6a3b      	ldr	r3, [r7, #32]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d04f      	beq.n	8010630 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	685b      	ldr	r3, [r3, #4]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d006      	beq.n	80105a6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	889b      	ldrh	r3, [r3, #4]
 80105a0:	b29b      	uxth	r3, r3
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d002      	beq.n	80105ac <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80105a6:	2300      	movs	r3, #0
 80105a8:	623b      	str	r3, [r7, #32]
 80105aa:	e041      	b.n	8010630 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80105ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ae:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80105b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80105b6:	e012      	b.n	80105de <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80105b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80105be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105c0:	88db      	ldrh	r3, [r3, #6]
 80105c2:	b29a      	uxth	r2, r3
 80105c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105c6:	889b      	ldrh	r3, [r3, #4]
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d002      	beq.n	80105d4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80105ce:	2300      	movs	r3, #0
 80105d0:	623b      	str	r3, [r7, #32]
            break;
 80105d2:	e007      	b.n	80105e4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80105d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105d6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80105d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80105de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d1e9      	bne.n	80105b8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80105e4:	6a3b      	ldr	r3, [r7, #32]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d022      	beq.n	8010630 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	685b      	ldr	r3, [r3, #4]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d106      	bne.n	8010600 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80105f2:	4b15      	ldr	r3, [pc, #84]	@ (8010648 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80105f4:	f240 12df 	movw	r2, #479	@ 0x1df
 80105f8:	4917      	ldr	r1, [pc, #92]	@ (8010658 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80105fa:	4815      	ldr	r0, [pc, #84]	@ (8010650 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80105fc:	f000 fd40 	bl	8011080 <iprintf>
          LWIP_ASSERT("sanity check",
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010608:	429a      	cmp	r2, r3
 801060a:	d106      	bne.n	801061a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801060c:	4b0e      	ldr	r3, [pc, #56]	@ (8010648 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801060e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010612:	4911      	ldr	r1, [pc, #68]	@ (8010658 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010614:	480e      	ldr	r0, [pc, #56]	@ (8010650 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010616:	f000 fd33 	bl	8011080 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801061a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d006      	beq.n	8010630 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010622:	4b09      	ldr	r3, [pc, #36]	@ (8010648 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010624:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8010628:	490c      	ldr	r1, [pc, #48]	@ (801065c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801062a:	4809      	ldr	r0, [pc, #36]	@ (8010650 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801062c:	f000 fd28 	bl	8011080 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010630:	6a3b      	ldr	r3, [r7, #32]
 8010632:	2b00      	cmp	r3, #0
 8010634:	bf14      	ite	ne
 8010636:	2301      	movne	r3, #1
 8010638:	2300      	moveq	r3, #0
 801063a:	b2db      	uxtb	r3, r3
 801063c:	e000      	b.n	8010640 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801063e:	2300      	movs	r3, #0
}
 8010640:	4618      	mov	r0, r3
 8010642:	3730      	adds	r7, #48	@ 0x30
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}
 8010648:	080149c0 	.word	0x080149c0
 801064c:	08014aa4 	.word	0x08014aa4
 8010650:	08014a08 	.word	0x08014a08
 8010654:	08014ac4 	.word	0x08014ac4
 8010658:	08014afc 	.word	0x08014afc
 801065c:	08014b0c 	.word	0x08014b0c

08010660 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b08e      	sub	sp, #56	@ 0x38
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801066e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	f003 030f 	and.w	r3, r3, #15
 8010676:	b2db      	uxtb	r3, r3
 8010678:	009b      	lsls	r3, r3, #2
 801067a:	b2db      	uxtb	r3, r3
 801067c:	2b14      	cmp	r3, #20
 801067e:	f040 8171 	bne.w	8010964 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010684:	88db      	ldrh	r3, [r3, #6]
 8010686:	b29b      	uxth	r3, r3
 8010688:	4618      	mov	r0, r3
 801068a:	f7f6 faf9 	bl	8006c80 <lwip_htons>
 801068e:	4603      	mov	r3, r0
 8010690:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010694:	b29b      	uxth	r3, r3
 8010696:	00db      	lsls	r3, r3, #3
 8010698:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801069a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801069c:	885b      	ldrh	r3, [r3, #2]
 801069e:	b29b      	uxth	r3, r3
 80106a0:	4618      	mov	r0, r3
 80106a2:	f7f6 faed 	bl	8006c80 <lwip_htons>
 80106a6:	4603      	mov	r3, r0
 80106a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80106aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	f003 030f 	and.w	r3, r3, #15
 80106b2:	b2db      	uxtb	r3, r3
 80106b4:	009b      	lsls	r3, r3, #2
 80106b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80106ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80106be:	b29b      	uxth	r3, r3
 80106c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80106c2:	429a      	cmp	r2, r3
 80106c4:	f0c0 8150 	bcc.w	8010968 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80106c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80106d0:	1ad3      	subs	r3, r2, r3
 80106d2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f7f7 feb9 	bl	800844c <pbuf_clen>
 80106da:	4603      	mov	r3, r0
 80106dc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80106de:	4b8c      	ldr	r3, [pc, #560]	@ (8010910 <ip4_reass+0x2b0>)
 80106e0:	881b      	ldrh	r3, [r3, #0]
 80106e2:	461a      	mov	r2, r3
 80106e4:	8c3b      	ldrh	r3, [r7, #32]
 80106e6:	4413      	add	r3, r2
 80106e8:	2b0a      	cmp	r3, #10
 80106ea:	dd10      	ble.n	801070e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80106ec:	8c3b      	ldrh	r3, [r7, #32]
 80106ee:	4619      	mov	r1, r3
 80106f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80106f2:	f7ff fd81 	bl	80101f8 <ip_reass_remove_oldest_datagram>
 80106f6:	4603      	mov	r3, r0
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f000 8137 	beq.w	801096c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80106fe:	4b84      	ldr	r3, [pc, #528]	@ (8010910 <ip4_reass+0x2b0>)
 8010700:	881b      	ldrh	r3, [r3, #0]
 8010702:	461a      	mov	r2, r3
 8010704:	8c3b      	ldrh	r3, [r7, #32]
 8010706:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010708:	2b0a      	cmp	r3, #10
 801070a:	f300 812f 	bgt.w	801096c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801070e:	4b81      	ldr	r3, [pc, #516]	@ (8010914 <ip4_reass+0x2b4>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	633b      	str	r3, [r7, #48]	@ 0x30
 8010714:	e015      	b.n	8010742 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010718:	695a      	ldr	r2, [r3, #20]
 801071a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801071c:	68db      	ldr	r3, [r3, #12]
 801071e:	429a      	cmp	r2, r3
 8010720:	d10c      	bne.n	801073c <ip4_reass+0xdc>
 8010722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010724:	699a      	ldr	r2, [r3, #24]
 8010726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010728:	691b      	ldr	r3, [r3, #16]
 801072a:	429a      	cmp	r2, r3
 801072c:	d106      	bne.n	801073c <ip4_reass+0xdc>
 801072e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010730:	899a      	ldrh	r2, [r3, #12]
 8010732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010734:	889b      	ldrh	r3, [r3, #4]
 8010736:	b29b      	uxth	r3, r3
 8010738:	429a      	cmp	r2, r3
 801073a:	d006      	beq.n	801074a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801073c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	633b      	str	r3, [r7, #48]	@ 0x30
 8010742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010744:	2b00      	cmp	r3, #0
 8010746:	d1e6      	bne.n	8010716 <ip4_reass+0xb6>
 8010748:	e000      	b.n	801074c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801074a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801074c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801074e:	2b00      	cmp	r3, #0
 8010750:	d109      	bne.n	8010766 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010752:	8c3b      	ldrh	r3, [r7, #32]
 8010754:	4619      	mov	r1, r3
 8010756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010758:	f7ff fdb0 	bl	80102bc <ip_reass_enqueue_new_datagram>
 801075c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801075e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010760:	2b00      	cmp	r3, #0
 8010762:	d11c      	bne.n	801079e <ip4_reass+0x13e>
      goto nullreturn;
 8010764:	e105      	b.n	8010972 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010768:	88db      	ldrh	r3, [r3, #6]
 801076a:	b29b      	uxth	r3, r3
 801076c:	4618      	mov	r0, r3
 801076e:	f7f6 fa87 	bl	8006c80 <lwip_htons>
 8010772:	4603      	mov	r3, r0
 8010774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010778:	2b00      	cmp	r3, #0
 801077a:	d110      	bne.n	801079e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801077c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801077e:	89db      	ldrh	r3, [r3, #14]
 8010780:	4618      	mov	r0, r3
 8010782:	f7f6 fa7d 	bl	8006c80 <lwip_htons>
 8010786:	4603      	mov	r3, r0
 8010788:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801078c:	2b00      	cmp	r3, #0
 801078e:	d006      	beq.n	801079e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010792:	3308      	adds	r3, #8
 8010794:	2214      	movs	r2, #20
 8010796:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010798:	4618      	mov	r0, r3
 801079a:	f000 fd9a 	bl	80112d2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801079e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107a0:	88db      	ldrh	r3, [r3, #6]
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	f003 0320 	and.w	r3, r3, #32
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	bf0c      	ite	eq
 80107ac:	2301      	moveq	r3, #1
 80107ae:	2300      	movne	r3, #0
 80107b0:	b2db      	uxtb	r3, r3
 80107b2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d00e      	beq.n	80107d8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80107ba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80107bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80107be:	4413      	add	r3, r2
 80107c0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80107c2:	8b7a      	ldrh	r2, [r7, #26]
 80107c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80107c6:	429a      	cmp	r2, r3
 80107c8:	f0c0 80a0 	bcc.w	801090c <ip4_reass+0x2ac>
 80107cc:	8b7b      	ldrh	r3, [r7, #26]
 80107ce:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80107d2:	4293      	cmp	r3, r2
 80107d4:	f200 809a 	bhi.w	801090c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80107d8:	69fa      	ldr	r2, [r7, #28]
 80107da:	6879      	ldr	r1, [r7, #4]
 80107dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80107de:	f7ff fdd5 	bl	801038c <ip_reass_chain_frag_into_datagram_and_validate>
 80107e2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107ea:	f000 809b 	beq.w	8010924 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80107ee:	4b48      	ldr	r3, [pc, #288]	@ (8010910 <ip4_reass+0x2b0>)
 80107f0:	881a      	ldrh	r2, [r3, #0]
 80107f2:	8c3b      	ldrh	r3, [r7, #32]
 80107f4:	4413      	add	r3, r2
 80107f6:	b29a      	uxth	r2, r3
 80107f8:	4b45      	ldr	r3, [pc, #276]	@ (8010910 <ip4_reass+0x2b0>)
 80107fa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80107fc:	69fb      	ldr	r3, [r7, #28]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d00d      	beq.n	801081e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010802:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010804:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010806:	4413      	add	r3, r2
 8010808:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801080a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801080c:	8a7a      	ldrh	r2, [r7, #18]
 801080e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010812:	7f9b      	ldrb	r3, [r3, #30]
 8010814:	f043 0301 	orr.w	r3, r3, #1
 8010818:	b2da      	uxtb	r2, r3
 801081a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801081c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	2b01      	cmp	r3, #1
 8010822:	d171      	bne.n	8010908 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010826:	8b9b      	ldrh	r3, [r3, #28]
 8010828:	3314      	adds	r3, #20
 801082a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801082c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801082e:	685b      	ldr	r3, [r3, #4]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010838:	685b      	ldr	r3, [r3, #4]
 801083a:	685b      	ldr	r3, [r3, #4]
 801083c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801083e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010840:	3308      	adds	r3, #8
 8010842:	2214      	movs	r2, #20
 8010844:	4619      	mov	r1, r3
 8010846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010848:	f000 fd43 	bl	80112d2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801084c:	8a3b      	ldrh	r3, [r7, #16]
 801084e:	4618      	mov	r0, r3
 8010850:	f7f6 fa16 	bl	8006c80 <lwip_htons>
 8010854:	4603      	mov	r3, r0
 8010856:	461a      	mov	r2, r3
 8010858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801085a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801085c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801085e:	2200      	movs	r2, #0
 8010860:	719a      	strb	r2, [r3, #6]
 8010862:	2200      	movs	r2, #0
 8010864:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010868:	2200      	movs	r2, #0
 801086a:	729a      	strb	r2, [r3, #10]
 801086c:	2200      	movs	r2, #0
 801086e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010872:	685b      	ldr	r3, [r3, #4]
 8010874:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010876:	e00d      	b.n	8010894 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801087e:	2114      	movs	r1, #20
 8010880:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010882:	f7f7 fcd5 	bl	8008230 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010886:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f7f7 fe19 	bl	80084c0 <pbuf_cat>
      r = iprh->next_pbuf;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8010894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010896:	2b00      	cmp	r3, #0
 8010898:	d1ee      	bne.n	8010878 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801089a:	4b1e      	ldr	r3, [pc, #120]	@ (8010914 <ip4_reass+0x2b4>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d102      	bne.n	80108aa <ip4_reass+0x24a>
      ipr_prev = NULL;
 80108a4:	2300      	movs	r3, #0
 80108a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80108a8:	e010      	b.n	80108cc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80108aa:	4b1a      	ldr	r3, [pc, #104]	@ (8010914 <ip4_reass+0x2b4>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80108b0:	e007      	b.n	80108c2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80108b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d006      	beq.n	80108ca <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80108bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80108c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d1f4      	bne.n	80108b2 <ip4_reass+0x252>
 80108c8:	e000      	b.n	80108cc <ip4_reass+0x26c>
          break;
 80108ca:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80108cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80108ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80108d0:	f7ff fd2e 	bl	8010330 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f7f7 fdb9 	bl	800844c <pbuf_clen>
 80108da:	4603      	mov	r3, r0
 80108dc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80108de:	4b0c      	ldr	r3, [pc, #48]	@ (8010910 <ip4_reass+0x2b0>)
 80108e0:	881b      	ldrh	r3, [r3, #0]
 80108e2:	8c3a      	ldrh	r2, [r7, #32]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d906      	bls.n	80108f6 <ip4_reass+0x296>
 80108e8:	4b0b      	ldr	r3, [pc, #44]	@ (8010918 <ip4_reass+0x2b8>)
 80108ea:	f240 229b 	movw	r2, #667	@ 0x29b
 80108ee:	490b      	ldr	r1, [pc, #44]	@ (801091c <ip4_reass+0x2bc>)
 80108f0:	480b      	ldr	r0, [pc, #44]	@ (8010920 <ip4_reass+0x2c0>)
 80108f2:	f000 fbc5 	bl	8011080 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80108f6:	4b06      	ldr	r3, [pc, #24]	@ (8010910 <ip4_reass+0x2b0>)
 80108f8:	881a      	ldrh	r2, [r3, #0]
 80108fa:	8c3b      	ldrh	r3, [r7, #32]
 80108fc:	1ad3      	subs	r3, r2, r3
 80108fe:	b29a      	uxth	r2, r3
 8010900:	4b03      	ldr	r3, [pc, #12]	@ (8010910 <ip4_reass+0x2b0>)
 8010902:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	e038      	b.n	801097a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010908:	2300      	movs	r3, #0
 801090a:	e036      	b.n	801097a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801090c:	bf00      	nop
 801090e:	e00a      	b.n	8010926 <ip4_reass+0x2c6>
 8010910:	2000895c 	.word	0x2000895c
 8010914:	20008958 	.word	0x20008958
 8010918:	080149c0 	.word	0x080149c0
 801091c:	08014b30 	.word	0x08014b30
 8010920:	08014a08 	.word	0x08014a08
    goto nullreturn_ipr;
 8010924:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010928:	2b00      	cmp	r3, #0
 801092a:	d106      	bne.n	801093a <ip4_reass+0x2da>
 801092c:	4b15      	ldr	r3, [pc, #84]	@ (8010984 <ip4_reass+0x324>)
 801092e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8010932:	4915      	ldr	r1, [pc, #84]	@ (8010988 <ip4_reass+0x328>)
 8010934:	4815      	ldr	r0, [pc, #84]	@ (801098c <ip4_reass+0x32c>)
 8010936:	f000 fba3 	bl	8011080 <iprintf>
  if (ipr->p == NULL) {
 801093a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801093c:	685b      	ldr	r3, [r3, #4]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d116      	bne.n	8010970 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010942:	4b13      	ldr	r3, [pc, #76]	@ (8010990 <ip4_reass+0x330>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010948:	429a      	cmp	r2, r3
 801094a:	d006      	beq.n	801095a <ip4_reass+0x2fa>
 801094c:	4b0d      	ldr	r3, [pc, #52]	@ (8010984 <ip4_reass+0x324>)
 801094e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8010952:	4910      	ldr	r1, [pc, #64]	@ (8010994 <ip4_reass+0x334>)
 8010954:	480d      	ldr	r0, [pc, #52]	@ (801098c <ip4_reass+0x32c>)
 8010956:	f000 fb93 	bl	8011080 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801095a:	2100      	movs	r1, #0
 801095c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801095e:	f7ff fce7 	bl	8010330 <ip_reass_dequeue_datagram>
 8010962:	e006      	b.n	8010972 <ip4_reass+0x312>
    goto nullreturn;
 8010964:	bf00      	nop
 8010966:	e004      	b.n	8010972 <ip4_reass+0x312>
    goto nullreturn;
 8010968:	bf00      	nop
 801096a:	e002      	b.n	8010972 <ip4_reass+0x312>
      goto nullreturn;
 801096c:	bf00      	nop
 801096e:	e000      	b.n	8010972 <ip4_reass+0x312>
  }

nullreturn:
 8010970:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f7f7 fce2 	bl	800833c <pbuf_free>
  return NULL;
 8010978:	2300      	movs	r3, #0
}
 801097a:	4618      	mov	r0, r3
 801097c:	3738      	adds	r7, #56	@ 0x38
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	080149c0 	.word	0x080149c0
 8010988:	08014b4c 	.word	0x08014b4c
 801098c:	08014a08 	.word	0x08014a08
 8010990:	20008958 	.word	0x20008958
 8010994:	08014b58 	.word	0x08014b58

08010998 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801099c:	2005      	movs	r0, #5
 801099e:	f7f6 fde7 	bl	8007570 <memp_malloc>
 80109a2:	4603      	mov	r3, r0
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	bd80      	pop	{r7, pc}

080109a8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d106      	bne.n	80109c4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80109b6:	4b07      	ldr	r3, [pc, #28]	@ (80109d4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80109b8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80109bc:	4906      	ldr	r1, [pc, #24]	@ (80109d8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80109be:	4807      	ldr	r0, [pc, #28]	@ (80109dc <ip_frag_free_pbuf_custom_ref+0x34>)
 80109c0:	f000 fb5e 	bl	8011080 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80109c4:	6879      	ldr	r1, [r7, #4]
 80109c6:	2005      	movs	r0, #5
 80109c8:	f7f6 fe42 	bl	8007650 <memp_free>
}
 80109cc:	bf00      	nop
 80109ce:	3708      	adds	r7, #8
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}
 80109d4:	080149c0 	.word	0x080149c0
 80109d8:	08014b78 	.word	0x08014b78
 80109dc:	08014a08 	.word	0x08014a08

080109e0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b084      	sub	sp, #16
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d106      	bne.n	8010a00 <ipfrag_free_pbuf_custom+0x20>
 80109f2:	4b11      	ldr	r3, [pc, #68]	@ (8010a38 <ipfrag_free_pbuf_custom+0x58>)
 80109f4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80109f8:	4910      	ldr	r1, [pc, #64]	@ (8010a3c <ipfrag_free_pbuf_custom+0x5c>)
 80109fa:	4811      	ldr	r0, [pc, #68]	@ (8010a40 <ipfrag_free_pbuf_custom+0x60>)
 80109fc:	f000 fb40 	bl	8011080 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010a00:	68fa      	ldr	r2, [r7, #12]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d006      	beq.n	8010a16 <ipfrag_free_pbuf_custom+0x36>
 8010a08:	4b0b      	ldr	r3, [pc, #44]	@ (8010a38 <ipfrag_free_pbuf_custom+0x58>)
 8010a0a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8010a0e:	490d      	ldr	r1, [pc, #52]	@ (8010a44 <ipfrag_free_pbuf_custom+0x64>)
 8010a10:	480b      	ldr	r0, [pc, #44]	@ (8010a40 <ipfrag_free_pbuf_custom+0x60>)
 8010a12:	f000 fb35 	bl	8011080 <iprintf>
  if (pcr->original != NULL) {
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	695b      	ldr	r3, [r3, #20]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d004      	beq.n	8010a28 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	695b      	ldr	r3, [r3, #20]
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7f7 fc8a 	bl	800833c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010a28:	68f8      	ldr	r0, [r7, #12]
 8010a2a:	f7ff ffbd 	bl	80109a8 <ip_frag_free_pbuf_custom_ref>
}
 8010a2e:	bf00      	nop
 8010a30:	3710      	adds	r7, #16
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	080149c0 	.word	0x080149c0
 8010a3c:	08014b84 	.word	0x08014b84
 8010a40:	08014a08 	.word	0x08014a08
 8010a44:	08014b90 	.word	0x08014b90

08010a48 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b094      	sub	sp, #80	@ 0x50
 8010a4c:	af02      	add	r7, sp, #8
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010a54:	2300      	movs	r3, #0
 8010a56:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010a5e:	3b14      	subs	r3, #20
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	da00      	bge.n	8010a66 <ip4_frag+0x1e>
 8010a64:	3307      	adds	r3, #7
 8010a66:	10db      	asrs	r3, r3, #3
 8010a68:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010a6a:	2314      	movs	r3, #20
 8010a6c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	685b      	ldr	r3, [r3, #4]
 8010a72:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8010a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a76:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	f003 030f 	and.w	r3, r3, #15
 8010a80:	b2db      	uxtb	r3, r3
 8010a82:	009b      	lsls	r3, r3, #2
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	2b14      	cmp	r3, #20
 8010a88:	d002      	beq.n	8010a90 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010a8a:	f06f 0305 	mvn.w	r3, #5
 8010a8e:	e110      	b.n	8010cb2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	895b      	ldrh	r3, [r3, #10]
 8010a94:	2b13      	cmp	r3, #19
 8010a96:	d809      	bhi.n	8010aac <ip4_frag+0x64>
 8010a98:	4b88      	ldr	r3, [pc, #544]	@ (8010cbc <ip4_frag+0x274>)
 8010a9a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8010a9e:	4988      	ldr	r1, [pc, #544]	@ (8010cc0 <ip4_frag+0x278>)
 8010aa0:	4888      	ldr	r0, [pc, #544]	@ (8010cc4 <ip4_frag+0x27c>)
 8010aa2:	f000 faed 	bl	8011080 <iprintf>
 8010aa6:	f06f 0305 	mvn.w	r3, #5
 8010aaa:	e102      	b.n	8010cb2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aae:	88db      	ldrh	r3, [r3, #6]
 8010ab0:	b29b      	uxth	r3, r3
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7f6 f8e4 	bl	8006c80 <lwip_htons>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8010abc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010abe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ac2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010ac6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010ac8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010acc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	891b      	ldrh	r3, [r3, #8]
 8010ad2:	3b14      	subs	r3, #20
 8010ad4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8010ad8:	e0e1      	b.n	8010c9e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010ada:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010adc:	00db      	lsls	r3, r3, #3
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	bf28      	it	cs
 8010ae8:	4613      	movcs	r3, r2
 8010aea:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010aec:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010af0:	2114      	movs	r1, #20
 8010af2:	200e      	movs	r0, #14
 8010af4:	f7f7 f93e 	bl	8007d74 <pbuf_alloc>
 8010af8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8010afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	f000 80d5 	beq.w	8010cac <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b04:	895b      	ldrh	r3, [r3, #10]
 8010b06:	2b13      	cmp	r3, #19
 8010b08:	d806      	bhi.n	8010b18 <ip4_frag+0xd0>
 8010b0a:	4b6c      	ldr	r3, [pc, #432]	@ (8010cbc <ip4_frag+0x274>)
 8010b0c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8010b10:	496d      	ldr	r1, [pc, #436]	@ (8010cc8 <ip4_frag+0x280>)
 8010b12:	486c      	ldr	r0, [pc, #432]	@ (8010cc4 <ip4_frag+0x27c>)
 8010b14:	f000 fab4 	bl	8011080 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	2214      	movs	r2, #20
 8010b1e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010b20:	4618      	mov	r0, r3
 8010b22:	f000 fbd6 	bl	80112d2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b28:	685b      	ldr	r3, [r3, #4]
 8010b2a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8010b2c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010b2e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8010b32:	e064      	b.n	8010bfe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	895a      	ldrh	r2, [r3, #10]
 8010b38:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010b3a:	1ad3      	subs	r3, r2, r3
 8010b3c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	895b      	ldrh	r3, [r3, #10]
 8010b42:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d906      	bls.n	8010b56 <ip4_frag+0x10e>
 8010b48:	4b5c      	ldr	r3, [pc, #368]	@ (8010cbc <ip4_frag+0x274>)
 8010b4a:	f240 322d 	movw	r2, #813	@ 0x32d
 8010b4e:	495f      	ldr	r1, [pc, #380]	@ (8010ccc <ip4_frag+0x284>)
 8010b50:	485c      	ldr	r0, [pc, #368]	@ (8010cc4 <ip4_frag+0x27c>)
 8010b52:	f000 fa95 	bl	8011080 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010b56:	8bfa      	ldrh	r2, [r7, #30]
 8010b58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010b5c:	4293      	cmp	r3, r2
 8010b5e:	bf28      	it	cs
 8010b60:	4613      	movcs	r3, r2
 8010b62:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010b66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d105      	bne.n	8010b7a <ip4_frag+0x132>
        poff = 0;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	60fb      	str	r3, [r7, #12]
        continue;
 8010b78:	e041      	b.n	8010bfe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010b7a:	f7ff ff0d 	bl	8010998 <ip_frag_alloc_pbuf_custom_ref>
 8010b7e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010b80:	69bb      	ldr	r3, [r7, #24]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d103      	bne.n	8010b8e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010b86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010b88:	f7f7 fbd8 	bl	800833c <pbuf_free>
        goto memerr;
 8010b8c:	e08f      	b.n	8010cae <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010b8e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010b94:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010b96:	4413      	add	r3, r2
 8010b98:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8010b9c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010ba0:	9201      	str	r2, [sp, #4]
 8010ba2:	9300      	str	r3, [sp, #0]
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	2241      	movs	r2, #65	@ 0x41
 8010ba8:	2000      	movs	r0, #0
 8010baa:	f7f7 fa0d 	bl	8007fc8 <pbuf_alloced_custom>
 8010bae:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d106      	bne.n	8010bc4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010bb6:	69b8      	ldr	r0, [r7, #24]
 8010bb8:	f7ff fef6 	bl	80109a8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010bbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010bbe:	f7f7 fbbd 	bl	800833c <pbuf_free>
        goto memerr;
 8010bc2:	e074      	b.n	8010cae <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010bc4:	68f8      	ldr	r0, [r7, #12]
 8010bc6:	f7f7 fc59 	bl	800847c <pbuf_ref>
      pcr->original = p;
 8010bca:	69bb      	ldr	r3, [r7, #24]
 8010bcc:	68fa      	ldr	r2, [r7, #12]
 8010bce:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010bd0:	69bb      	ldr	r3, [r7, #24]
 8010bd2:	4a3f      	ldr	r2, [pc, #252]	@ (8010cd0 <ip4_frag+0x288>)
 8010bd4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010bd6:	6979      	ldr	r1, [r7, #20]
 8010bd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010bda:	f7f7 fc71 	bl	80084c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010bde:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8010be2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010be6:	1ad3      	subs	r3, r2, r3
 8010be8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8010bec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d004      	beq.n	8010bfe <ip4_frag+0x1b6>
        poff = 0;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010bfe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d196      	bne.n	8010b34 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010c06:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010c08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010c0c:	4413      	add	r3, r2
 8010c0e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010c14:	f1a3 0213 	sub.w	r2, r3, #19
 8010c18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	bfcc      	ite	gt
 8010c20:	2301      	movgt	r3, #1
 8010c22:	2300      	movle	r3, #0
 8010c24:	b2db      	uxtb	r3, r3
 8010c26:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010c28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010c2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010c30:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8010c32:	6a3b      	ldr	r3, [r7, #32]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d002      	beq.n	8010c3e <ip4_frag+0x1f6>
 8010c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d003      	beq.n	8010c46 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010c3e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010c40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010c44:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010c46:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7f6 f819 	bl	8006c80 <lwip_htons>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	461a      	mov	r2, r3
 8010c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c54:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010c56:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010c58:	3314      	adds	r3, #20
 8010c5a:	b29b      	uxth	r3, r3
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7f6 f80f 	bl	8006c80 <lwip_htons>
 8010c62:	4603      	mov	r3, r0
 8010c64:	461a      	mov	r2, r3
 8010c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c68:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	729a      	strb	r2, [r3, #10]
 8010c70:	2200      	movs	r2, #0
 8010c72:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	695b      	ldr	r3, [r3, #20]
 8010c78:	687a      	ldr	r2, [r7, #4]
 8010c7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010c7c:	68b8      	ldr	r0, [r7, #8]
 8010c7e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010c80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010c82:	f7f7 fb5b 	bl	800833c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010c86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010c8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010c8c:	1ad3      	subs	r3, r2, r3
 8010c8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8010c92:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8010c96:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010c98:	4413      	add	r3, r2
 8010c9a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8010c9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	f47f af19 	bne.w	8010ada <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	e002      	b.n	8010cb2 <ip4_frag+0x26a>
      goto memerr;
 8010cac:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3748      	adds	r7, #72	@ 0x48
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	080149c0 	.word	0x080149c0
 8010cc0:	08014b9c 	.word	0x08014b9c
 8010cc4:	08014a08 	.word	0x08014a08
 8010cc8:	08014bb8 	.word	0x08014bb8
 8010ccc:	08014bd8 	.word	0x08014bd8
 8010cd0:	080109e1 	.word	0x080109e1

08010cd4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b086      	sub	sp, #24
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010cde:	230e      	movs	r3, #14
 8010ce0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	895b      	ldrh	r3, [r3, #10]
 8010ce6:	2b0e      	cmp	r3, #14
 8010ce8:	d96e      	bls.n	8010dc8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	7bdb      	ldrb	r3, [r3, #15]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d106      	bne.n	8010d00 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	b2da      	uxtb	r2, r3
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	7b1a      	ldrb	r2, [r3, #12]
 8010d0a:	7b5b      	ldrb	r3, [r3, #13]
 8010d0c:	021b      	lsls	r3, r3, #8
 8010d0e:	4313      	orrs	r3, r2
 8010d10:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	781b      	ldrb	r3, [r3, #0]
 8010d16:	f003 0301 	and.w	r3, r3, #1
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d023      	beq.n	8010d66 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	781b      	ldrb	r3, [r3, #0]
 8010d22:	2b01      	cmp	r3, #1
 8010d24:	d10f      	bne.n	8010d46 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	785b      	ldrb	r3, [r3, #1]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d11b      	bne.n	8010d66 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010d2e:	693b      	ldr	r3, [r7, #16]
 8010d30:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010d32:	2b5e      	cmp	r3, #94	@ 0x5e
 8010d34:	d117      	bne.n	8010d66 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	7b5b      	ldrb	r3, [r3, #13]
 8010d3a:	f043 0310 	orr.w	r3, r3, #16
 8010d3e:	b2da      	uxtb	r2, r3
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	735a      	strb	r2, [r3, #13]
 8010d44:	e00f      	b.n	8010d66 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	2206      	movs	r2, #6
 8010d4a:	4928      	ldr	r1, [pc, #160]	@ (8010dec <ethernet_input+0x118>)
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f000 fa0e 	bl	801116e <memcmp>
 8010d52:	4603      	mov	r3, r0
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d106      	bne.n	8010d66 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	7b5b      	ldrb	r3, [r3, #13]
 8010d5c:	f043 0308 	orr.w	r3, r3, #8
 8010d60:	b2da      	uxtb	r2, r3
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010d66:	89fb      	ldrh	r3, [r7, #14]
 8010d68:	2b08      	cmp	r3, #8
 8010d6a:	d003      	beq.n	8010d74 <ethernet_input+0xa0>
 8010d6c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8010d70:	d014      	beq.n	8010d9c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010d72:	e032      	b.n	8010dda <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010d7a:	f003 0308 	and.w	r3, r3, #8
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d024      	beq.n	8010dcc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010d82:	8afb      	ldrh	r3, [r7, #22]
 8010d84:	4619      	mov	r1, r3
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f7f7 fa52 	bl	8008230 <pbuf_remove_header>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d11e      	bne.n	8010dd0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010d92:	6839      	ldr	r1, [r7, #0]
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f7fe ff21 	bl	800fbdc <ip4_input>
      break;
 8010d9a:	e013      	b.n	8010dc4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010da2:	f003 0308 	and.w	r3, r3, #8
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d014      	beq.n	8010dd4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010daa:	8afb      	ldrh	r3, [r7, #22]
 8010dac:	4619      	mov	r1, r3
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f7f7 fa3e 	bl	8008230 <pbuf_remove_header>
 8010db4:	4603      	mov	r3, r0
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d10e      	bne.n	8010dd8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010dba:	6839      	ldr	r1, [r7, #0]
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f7fe f8c1 	bl	800ef44 <etharp_input>
      break;
 8010dc2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	e00c      	b.n	8010de2 <ethernet_input+0x10e>
    goto free_and_return;
 8010dc8:	bf00      	nop
 8010dca:	e006      	b.n	8010dda <ethernet_input+0x106>
        goto free_and_return;
 8010dcc:	bf00      	nop
 8010dce:	e004      	b.n	8010dda <ethernet_input+0x106>
        goto free_and_return;
 8010dd0:	bf00      	nop
 8010dd2:	e002      	b.n	8010dda <ethernet_input+0x106>
        goto free_and_return;
 8010dd4:	bf00      	nop
 8010dd6:	e000      	b.n	8010dda <ethernet_input+0x106>
        goto free_and_return;
 8010dd8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f7f7 faae 	bl	800833c <pbuf_free>
  return ERR_OK;
 8010de0:	2300      	movs	r3, #0
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3718      	adds	r7, #24
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}
 8010dea:	bf00      	nop
 8010dec:	08014d74 	.word	0x08014d74

08010df0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b086      	sub	sp, #24
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	60f8      	str	r0, [r7, #12]
 8010df8:	60b9      	str	r1, [r7, #8]
 8010dfa:	607a      	str	r2, [r7, #4]
 8010dfc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010dfe:	8c3b      	ldrh	r3, [r7, #32]
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7f5 ff3d 	bl	8006c80 <lwip_htons>
 8010e06:	4603      	mov	r3, r0
 8010e08:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010e0a:	210e      	movs	r1, #14
 8010e0c:	68b8      	ldr	r0, [r7, #8]
 8010e0e:	f7f7 f9ff 	bl	8008210 <pbuf_add_header>
 8010e12:	4603      	mov	r3, r0
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d125      	bne.n	8010e64 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	685b      	ldr	r3, [r3, #4]
 8010e1c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	8afa      	ldrh	r2, [r7, #22]
 8010e22:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010e24:	693b      	ldr	r3, [r7, #16]
 8010e26:	2206      	movs	r2, #6
 8010e28:	6839      	ldr	r1, [r7, #0]
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f000 fa51 	bl	80112d2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010e30:	693b      	ldr	r3, [r7, #16]
 8010e32:	3306      	adds	r3, #6
 8010e34:	2206      	movs	r2, #6
 8010e36:	6879      	ldr	r1, [r7, #4]
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f000 fa4a 	bl	80112d2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010e44:	2b06      	cmp	r3, #6
 8010e46:	d006      	beq.n	8010e56 <ethernet_output+0x66>
 8010e48:	4b0a      	ldr	r3, [pc, #40]	@ (8010e74 <ethernet_output+0x84>)
 8010e4a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8010e4e:	490a      	ldr	r1, [pc, #40]	@ (8010e78 <ethernet_output+0x88>)
 8010e50:	480a      	ldr	r0, [pc, #40]	@ (8010e7c <ethernet_output+0x8c>)
 8010e52:	f000 f915 	bl	8011080 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	699b      	ldr	r3, [r3, #24]
 8010e5a:	68b9      	ldr	r1, [r7, #8]
 8010e5c:	68f8      	ldr	r0, [r7, #12]
 8010e5e:	4798      	blx	r3
 8010e60:	4603      	mov	r3, r0
 8010e62:	e002      	b.n	8010e6a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010e64:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010e66:	f06f 0301 	mvn.w	r3, #1
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3718      	adds	r7, #24
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	08014be8 	.word	0x08014be8
 8010e78:	08014c20 	.word	0x08014c20
 8010e7c:	08014c54 	.word	0x08014c54

08010e80 <rand>:
 8010e80:	4b16      	ldr	r3, [pc, #88]	@ (8010edc <rand+0x5c>)
 8010e82:	b510      	push	{r4, lr}
 8010e84:	681c      	ldr	r4, [r3, #0]
 8010e86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010e88:	b9b3      	cbnz	r3, 8010eb8 <rand+0x38>
 8010e8a:	2018      	movs	r0, #24
 8010e8c:	f000 fa98 	bl	80113c0 <malloc>
 8010e90:	4602      	mov	r2, r0
 8010e92:	6320      	str	r0, [r4, #48]	@ 0x30
 8010e94:	b920      	cbnz	r0, 8010ea0 <rand+0x20>
 8010e96:	4b12      	ldr	r3, [pc, #72]	@ (8010ee0 <rand+0x60>)
 8010e98:	4812      	ldr	r0, [pc, #72]	@ (8010ee4 <rand+0x64>)
 8010e9a:	2152      	movs	r1, #82	@ 0x52
 8010e9c:	f000 fa28 	bl	80112f0 <__assert_func>
 8010ea0:	4911      	ldr	r1, [pc, #68]	@ (8010ee8 <rand+0x68>)
 8010ea2:	4b12      	ldr	r3, [pc, #72]	@ (8010eec <rand+0x6c>)
 8010ea4:	e9c0 1300 	strd	r1, r3, [r0]
 8010ea8:	4b11      	ldr	r3, [pc, #68]	@ (8010ef0 <rand+0x70>)
 8010eaa:	6083      	str	r3, [r0, #8]
 8010eac:	230b      	movs	r3, #11
 8010eae:	8183      	strh	r3, [r0, #12]
 8010eb0:	2100      	movs	r1, #0
 8010eb2:	2001      	movs	r0, #1
 8010eb4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010eb8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010eba:	480e      	ldr	r0, [pc, #56]	@ (8010ef4 <rand+0x74>)
 8010ebc:	690b      	ldr	r3, [r1, #16]
 8010ebe:	694c      	ldr	r4, [r1, #20]
 8010ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8010ef8 <rand+0x78>)
 8010ec2:	4358      	muls	r0, r3
 8010ec4:	fb02 0004 	mla	r0, r2, r4, r0
 8010ec8:	fba3 3202 	umull	r3, r2, r3, r2
 8010ecc:	3301      	adds	r3, #1
 8010ece:	eb40 0002 	adc.w	r0, r0, r2
 8010ed2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010ed6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8010eda:	bd10      	pop	{r4, pc}
 8010edc:	20000038 	.word	0x20000038
 8010ee0:	08014d82 	.word	0x08014d82
 8010ee4:	08014d99 	.word	0x08014d99
 8010ee8:	abcd330e 	.word	0xabcd330e
 8010eec:	e66d1234 	.word	0xe66d1234
 8010ef0:	0005deec 	.word	0x0005deec
 8010ef4:	5851f42d 	.word	0x5851f42d
 8010ef8:	4c957f2d 	.word	0x4c957f2d

08010efc <std>:
 8010efc:	2300      	movs	r3, #0
 8010efe:	b510      	push	{r4, lr}
 8010f00:	4604      	mov	r4, r0
 8010f02:	e9c0 3300 	strd	r3, r3, [r0]
 8010f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f0a:	6083      	str	r3, [r0, #8]
 8010f0c:	8181      	strh	r1, [r0, #12]
 8010f0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010f10:	81c2      	strh	r2, [r0, #14]
 8010f12:	6183      	str	r3, [r0, #24]
 8010f14:	4619      	mov	r1, r3
 8010f16:	2208      	movs	r2, #8
 8010f18:	305c      	adds	r0, #92	@ 0x5c
 8010f1a:	f000 f952 	bl	80111c2 <memset>
 8010f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8010f54 <std+0x58>)
 8010f20:	6263      	str	r3, [r4, #36]	@ 0x24
 8010f22:	4b0d      	ldr	r3, [pc, #52]	@ (8010f58 <std+0x5c>)
 8010f24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010f26:	4b0d      	ldr	r3, [pc, #52]	@ (8010f5c <std+0x60>)
 8010f28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8010f60 <std+0x64>)
 8010f2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8010f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8010f64 <std+0x68>)
 8010f30:	6224      	str	r4, [r4, #32]
 8010f32:	429c      	cmp	r4, r3
 8010f34:	d006      	beq.n	8010f44 <std+0x48>
 8010f36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010f3a:	4294      	cmp	r4, r2
 8010f3c:	d002      	beq.n	8010f44 <std+0x48>
 8010f3e:	33d0      	adds	r3, #208	@ 0xd0
 8010f40:	429c      	cmp	r4, r3
 8010f42:	d105      	bne.n	8010f50 <std+0x54>
 8010f44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f4c:	f000 b9be 	b.w	80112cc <__retarget_lock_init_recursive>
 8010f50:	bd10      	pop	{r4, pc}
 8010f52:	bf00      	nop
 8010f54:	080110e9 	.word	0x080110e9
 8010f58:	0801110b 	.word	0x0801110b
 8010f5c:	08011143 	.word	0x08011143
 8010f60:	08011167 	.word	0x08011167
 8010f64:	20008960 	.word	0x20008960

08010f68 <stdio_exit_handler>:
 8010f68:	4a02      	ldr	r2, [pc, #8]	@ (8010f74 <stdio_exit_handler+0xc>)
 8010f6a:	4903      	ldr	r1, [pc, #12]	@ (8010f78 <stdio_exit_handler+0x10>)
 8010f6c:	4803      	ldr	r0, [pc, #12]	@ (8010f7c <stdio_exit_handler+0x14>)
 8010f6e:	f000 b869 	b.w	8011044 <_fwalk_sglue>
 8010f72:	bf00      	nop
 8010f74:	2000002c 	.word	0x2000002c
 8010f78:	08011e81 	.word	0x08011e81
 8010f7c:	2000003c 	.word	0x2000003c

08010f80 <cleanup_stdio>:
 8010f80:	6841      	ldr	r1, [r0, #4]
 8010f82:	4b0c      	ldr	r3, [pc, #48]	@ (8010fb4 <cleanup_stdio+0x34>)
 8010f84:	4299      	cmp	r1, r3
 8010f86:	b510      	push	{r4, lr}
 8010f88:	4604      	mov	r4, r0
 8010f8a:	d001      	beq.n	8010f90 <cleanup_stdio+0x10>
 8010f8c:	f000 ff78 	bl	8011e80 <_fflush_r>
 8010f90:	68a1      	ldr	r1, [r4, #8]
 8010f92:	4b09      	ldr	r3, [pc, #36]	@ (8010fb8 <cleanup_stdio+0x38>)
 8010f94:	4299      	cmp	r1, r3
 8010f96:	d002      	beq.n	8010f9e <cleanup_stdio+0x1e>
 8010f98:	4620      	mov	r0, r4
 8010f9a:	f000 ff71 	bl	8011e80 <_fflush_r>
 8010f9e:	68e1      	ldr	r1, [r4, #12]
 8010fa0:	4b06      	ldr	r3, [pc, #24]	@ (8010fbc <cleanup_stdio+0x3c>)
 8010fa2:	4299      	cmp	r1, r3
 8010fa4:	d004      	beq.n	8010fb0 <cleanup_stdio+0x30>
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fac:	f000 bf68 	b.w	8011e80 <_fflush_r>
 8010fb0:	bd10      	pop	{r4, pc}
 8010fb2:	bf00      	nop
 8010fb4:	20008960 	.word	0x20008960
 8010fb8:	200089c8 	.word	0x200089c8
 8010fbc:	20008a30 	.word	0x20008a30

08010fc0 <global_stdio_init.part.0>:
 8010fc0:	b510      	push	{r4, lr}
 8010fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8010ff0 <global_stdio_init.part.0+0x30>)
 8010fc4:	4c0b      	ldr	r4, [pc, #44]	@ (8010ff4 <global_stdio_init.part.0+0x34>)
 8010fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8010ff8 <global_stdio_init.part.0+0x38>)
 8010fc8:	601a      	str	r2, [r3, #0]
 8010fca:	4620      	mov	r0, r4
 8010fcc:	2200      	movs	r2, #0
 8010fce:	2104      	movs	r1, #4
 8010fd0:	f7ff ff94 	bl	8010efc <std>
 8010fd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010fd8:	2201      	movs	r2, #1
 8010fda:	2109      	movs	r1, #9
 8010fdc:	f7ff ff8e 	bl	8010efc <std>
 8010fe0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010fe4:	2202      	movs	r2, #2
 8010fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fea:	2112      	movs	r1, #18
 8010fec:	f7ff bf86 	b.w	8010efc <std>
 8010ff0:	20008a98 	.word	0x20008a98
 8010ff4:	20008960 	.word	0x20008960
 8010ff8:	08010f69 	.word	0x08010f69

08010ffc <__sfp_lock_acquire>:
 8010ffc:	4801      	ldr	r0, [pc, #4]	@ (8011004 <__sfp_lock_acquire+0x8>)
 8010ffe:	f000 b966 	b.w	80112ce <__retarget_lock_acquire_recursive>
 8011002:	bf00      	nop
 8011004:	20008aa1 	.word	0x20008aa1

08011008 <__sfp_lock_release>:
 8011008:	4801      	ldr	r0, [pc, #4]	@ (8011010 <__sfp_lock_release+0x8>)
 801100a:	f000 b961 	b.w	80112d0 <__retarget_lock_release_recursive>
 801100e:	bf00      	nop
 8011010:	20008aa1 	.word	0x20008aa1

08011014 <__sinit>:
 8011014:	b510      	push	{r4, lr}
 8011016:	4604      	mov	r4, r0
 8011018:	f7ff fff0 	bl	8010ffc <__sfp_lock_acquire>
 801101c:	6a23      	ldr	r3, [r4, #32]
 801101e:	b11b      	cbz	r3, 8011028 <__sinit+0x14>
 8011020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011024:	f7ff bff0 	b.w	8011008 <__sfp_lock_release>
 8011028:	4b04      	ldr	r3, [pc, #16]	@ (801103c <__sinit+0x28>)
 801102a:	6223      	str	r3, [r4, #32]
 801102c:	4b04      	ldr	r3, [pc, #16]	@ (8011040 <__sinit+0x2c>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d1f5      	bne.n	8011020 <__sinit+0xc>
 8011034:	f7ff ffc4 	bl	8010fc0 <global_stdio_init.part.0>
 8011038:	e7f2      	b.n	8011020 <__sinit+0xc>
 801103a:	bf00      	nop
 801103c:	08010f81 	.word	0x08010f81
 8011040:	20008a98 	.word	0x20008a98

08011044 <_fwalk_sglue>:
 8011044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011048:	4607      	mov	r7, r0
 801104a:	4688      	mov	r8, r1
 801104c:	4614      	mov	r4, r2
 801104e:	2600      	movs	r6, #0
 8011050:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011054:	f1b9 0901 	subs.w	r9, r9, #1
 8011058:	d505      	bpl.n	8011066 <_fwalk_sglue+0x22>
 801105a:	6824      	ldr	r4, [r4, #0]
 801105c:	2c00      	cmp	r4, #0
 801105e:	d1f7      	bne.n	8011050 <_fwalk_sglue+0xc>
 8011060:	4630      	mov	r0, r6
 8011062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011066:	89ab      	ldrh	r3, [r5, #12]
 8011068:	2b01      	cmp	r3, #1
 801106a:	d907      	bls.n	801107c <_fwalk_sglue+0x38>
 801106c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011070:	3301      	adds	r3, #1
 8011072:	d003      	beq.n	801107c <_fwalk_sglue+0x38>
 8011074:	4629      	mov	r1, r5
 8011076:	4638      	mov	r0, r7
 8011078:	47c0      	blx	r8
 801107a:	4306      	orrs	r6, r0
 801107c:	3568      	adds	r5, #104	@ 0x68
 801107e:	e7e9      	b.n	8011054 <_fwalk_sglue+0x10>

08011080 <iprintf>:
 8011080:	b40f      	push	{r0, r1, r2, r3}
 8011082:	b507      	push	{r0, r1, r2, lr}
 8011084:	4906      	ldr	r1, [pc, #24]	@ (80110a0 <iprintf+0x20>)
 8011086:	ab04      	add	r3, sp, #16
 8011088:	6808      	ldr	r0, [r1, #0]
 801108a:	f853 2b04 	ldr.w	r2, [r3], #4
 801108e:	6881      	ldr	r1, [r0, #8]
 8011090:	9301      	str	r3, [sp, #4]
 8011092:	f000 fbcd 	bl	8011830 <_vfiprintf_r>
 8011096:	b003      	add	sp, #12
 8011098:	f85d eb04 	ldr.w	lr, [sp], #4
 801109c:	b004      	add	sp, #16
 801109e:	4770      	bx	lr
 80110a0:	20000038 	.word	0x20000038

080110a4 <siprintf>:
 80110a4:	b40e      	push	{r1, r2, r3}
 80110a6:	b510      	push	{r4, lr}
 80110a8:	b09d      	sub	sp, #116	@ 0x74
 80110aa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80110ac:	9002      	str	r0, [sp, #8]
 80110ae:	9006      	str	r0, [sp, #24]
 80110b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80110b4:	480a      	ldr	r0, [pc, #40]	@ (80110e0 <siprintf+0x3c>)
 80110b6:	9107      	str	r1, [sp, #28]
 80110b8:	9104      	str	r1, [sp, #16]
 80110ba:	490a      	ldr	r1, [pc, #40]	@ (80110e4 <siprintf+0x40>)
 80110bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80110c0:	9105      	str	r1, [sp, #20]
 80110c2:	2400      	movs	r4, #0
 80110c4:	a902      	add	r1, sp, #8
 80110c6:	6800      	ldr	r0, [r0, #0]
 80110c8:	9301      	str	r3, [sp, #4]
 80110ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 80110cc:	f000 fa8a 	bl	80115e4 <_svfiprintf_r>
 80110d0:	9b02      	ldr	r3, [sp, #8]
 80110d2:	701c      	strb	r4, [r3, #0]
 80110d4:	b01d      	add	sp, #116	@ 0x74
 80110d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110da:	b003      	add	sp, #12
 80110dc:	4770      	bx	lr
 80110de:	bf00      	nop
 80110e0:	20000038 	.word	0x20000038
 80110e4:	ffff0208 	.word	0xffff0208

080110e8 <__sread>:
 80110e8:	b510      	push	{r4, lr}
 80110ea:	460c      	mov	r4, r1
 80110ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110f0:	f000 f8a4 	bl	801123c <_read_r>
 80110f4:	2800      	cmp	r0, #0
 80110f6:	bfab      	itete	ge
 80110f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80110fa:	89a3      	ldrhlt	r3, [r4, #12]
 80110fc:	181b      	addge	r3, r3, r0
 80110fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011102:	bfac      	ite	ge
 8011104:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011106:	81a3      	strhlt	r3, [r4, #12]
 8011108:	bd10      	pop	{r4, pc}

0801110a <__swrite>:
 801110a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801110e:	461f      	mov	r7, r3
 8011110:	898b      	ldrh	r3, [r1, #12]
 8011112:	05db      	lsls	r3, r3, #23
 8011114:	4605      	mov	r5, r0
 8011116:	460c      	mov	r4, r1
 8011118:	4616      	mov	r6, r2
 801111a:	d505      	bpl.n	8011128 <__swrite+0x1e>
 801111c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011120:	2302      	movs	r3, #2
 8011122:	2200      	movs	r2, #0
 8011124:	f000 f878 	bl	8011218 <_lseek_r>
 8011128:	89a3      	ldrh	r3, [r4, #12]
 801112a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801112e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011132:	81a3      	strh	r3, [r4, #12]
 8011134:	4632      	mov	r2, r6
 8011136:	463b      	mov	r3, r7
 8011138:	4628      	mov	r0, r5
 801113a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801113e:	f000 b88f 	b.w	8011260 <_write_r>

08011142 <__sseek>:
 8011142:	b510      	push	{r4, lr}
 8011144:	460c      	mov	r4, r1
 8011146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801114a:	f000 f865 	bl	8011218 <_lseek_r>
 801114e:	1c43      	adds	r3, r0, #1
 8011150:	89a3      	ldrh	r3, [r4, #12]
 8011152:	bf15      	itete	ne
 8011154:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011156:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801115a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801115e:	81a3      	strheq	r3, [r4, #12]
 8011160:	bf18      	it	ne
 8011162:	81a3      	strhne	r3, [r4, #12]
 8011164:	bd10      	pop	{r4, pc}

08011166 <__sclose>:
 8011166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801116a:	f000 b845 	b.w	80111f8 <_close_r>

0801116e <memcmp>:
 801116e:	b510      	push	{r4, lr}
 8011170:	3901      	subs	r1, #1
 8011172:	4402      	add	r2, r0
 8011174:	4290      	cmp	r0, r2
 8011176:	d101      	bne.n	801117c <memcmp+0xe>
 8011178:	2000      	movs	r0, #0
 801117a:	e005      	b.n	8011188 <memcmp+0x1a>
 801117c:	7803      	ldrb	r3, [r0, #0]
 801117e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011182:	42a3      	cmp	r3, r4
 8011184:	d001      	beq.n	801118a <memcmp+0x1c>
 8011186:	1b18      	subs	r0, r3, r4
 8011188:	bd10      	pop	{r4, pc}
 801118a:	3001      	adds	r0, #1
 801118c:	e7f2      	b.n	8011174 <memcmp+0x6>

0801118e <memmove>:
 801118e:	4288      	cmp	r0, r1
 8011190:	b510      	push	{r4, lr}
 8011192:	eb01 0402 	add.w	r4, r1, r2
 8011196:	d902      	bls.n	801119e <memmove+0x10>
 8011198:	4284      	cmp	r4, r0
 801119a:	4623      	mov	r3, r4
 801119c:	d807      	bhi.n	80111ae <memmove+0x20>
 801119e:	1e43      	subs	r3, r0, #1
 80111a0:	42a1      	cmp	r1, r4
 80111a2:	d008      	beq.n	80111b6 <memmove+0x28>
 80111a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80111a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80111ac:	e7f8      	b.n	80111a0 <memmove+0x12>
 80111ae:	4402      	add	r2, r0
 80111b0:	4601      	mov	r1, r0
 80111b2:	428a      	cmp	r2, r1
 80111b4:	d100      	bne.n	80111b8 <memmove+0x2a>
 80111b6:	bd10      	pop	{r4, pc}
 80111b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80111bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80111c0:	e7f7      	b.n	80111b2 <memmove+0x24>

080111c2 <memset>:
 80111c2:	4402      	add	r2, r0
 80111c4:	4603      	mov	r3, r0
 80111c6:	4293      	cmp	r3, r2
 80111c8:	d100      	bne.n	80111cc <memset+0xa>
 80111ca:	4770      	bx	lr
 80111cc:	f803 1b01 	strb.w	r1, [r3], #1
 80111d0:	e7f9      	b.n	80111c6 <memset+0x4>

080111d2 <strncpy>:
 80111d2:	b510      	push	{r4, lr}
 80111d4:	3901      	subs	r1, #1
 80111d6:	4603      	mov	r3, r0
 80111d8:	b132      	cbz	r2, 80111e8 <strncpy+0x16>
 80111da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80111de:	f803 4b01 	strb.w	r4, [r3], #1
 80111e2:	3a01      	subs	r2, #1
 80111e4:	2c00      	cmp	r4, #0
 80111e6:	d1f7      	bne.n	80111d8 <strncpy+0x6>
 80111e8:	441a      	add	r2, r3
 80111ea:	2100      	movs	r1, #0
 80111ec:	4293      	cmp	r3, r2
 80111ee:	d100      	bne.n	80111f2 <strncpy+0x20>
 80111f0:	bd10      	pop	{r4, pc}
 80111f2:	f803 1b01 	strb.w	r1, [r3], #1
 80111f6:	e7f9      	b.n	80111ec <strncpy+0x1a>

080111f8 <_close_r>:
 80111f8:	b538      	push	{r3, r4, r5, lr}
 80111fa:	4d06      	ldr	r5, [pc, #24]	@ (8011214 <_close_r+0x1c>)
 80111fc:	2300      	movs	r3, #0
 80111fe:	4604      	mov	r4, r0
 8011200:	4608      	mov	r0, r1
 8011202:	602b      	str	r3, [r5, #0]
 8011204:	f7f0 fb48 	bl	8001898 <_close>
 8011208:	1c43      	adds	r3, r0, #1
 801120a:	d102      	bne.n	8011212 <_close_r+0x1a>
 801120c:	682b      	ldr	r3, [r5, #0]
 801120e:	b103      	cbz	r3, 8011212 <_close_r+0x1a>
 8011210:	6023      	str	r3, [r4, #0]
 8011212:	bd38      	pop	{r3, r4, r5, pc}
 8011214:	20008a9c 	.word	0x20008a9c

08011218 <_lseek_r>:
 8011218:	b538      	push	{r3, r4, r5, lr}
 801121a:	4d07      	ldr	r5, [pc, #28]	@ (8011238 <_lseek_r+0x20>)
 801121c:	4604      	mov	r4, r0
 801121e:	4608      	mov	r0, r1
 8011220:	4611      	mov	r1, r2
 8011222:	2200      	movs	r2, #0
 8011224:	602a      	str	r2, [r5, #0]
 8011226:	461a      	mov	r2, r3
 8011228:	f7f0 fb5d 	bl	80018e6 <_lseek>
 801122c:	1c43      	adds	r3, r0, #1
 801122e:	d102      	bne.n	8011236 <_lseek_r+0x1e>
 8011230:	682b      	ldr	r3, [r5, #0]
 8011232:	b103      	cbz	r3, 8011236 <_lseek_r+0x1e>
 8011234:	6023      	str	r3, [r4, #0]
 8011236:	bd38      	pop	{r3, r4, r5, pc}
 8011238:	20008a9c 	.word	0x20008a9c

0801123c <_read_r>:
 801123c:	b538      	push	{r3, r4, r5, lr}
 801123e:	4d07      	ldr	r5, [pc, #28]	@ (801125c <_read_r+0x20>)
 8011240:	4604      	mov	r4, r0
 8011242:	4608      	mov	r0, r1
 8011244:	4611      	mov	r1, r2
 8011246:	2200      	movs	r2, #0
 8011248:	602a      	str	r2, [r5, #0]
 801124a:	461a      	mov	r2, r3
 801124c:	f7f0 faeb 	bl	8001826 <_read>
 8011250:	1c43      	adds	r3, r0, #1
 8011252:	d102      	bne.n	801125a <_read_r+0x1e>
 8011254:	682b      	ldr	r3, [r5, #0]
 8011256:	b103      	cbz	r3, 801125a <_read_r+0x1e>
 8011258:	6023      	str	r3, [r4, #0]
 801125a:	bd38      	pop	{r3, r4, r5, pc}
 801125c:	20008a9c 	.word	0x20008a9c

08011260 <_write_r>:
 8011260:	b538      	push	{r3, r4, r5, lr}
 8011262:	4d07      	ldr	r5, [pc, #28]	@ (8011280 <_write_r+0x20>)
 8011264:	4604      	mov	r4, r0
 8011266:	4608      	mov	r0, r1
 8011268:	4611      	mov	r1, r2
 801126a:	2200      	movs	r2, #0
 801126c:	602a      	str	r2, [r5, #0]
 801126e:	461a      	mov	r2, r3
 8011270:	f7f0 faf6 	bl	8001860 <_write>
 8011274:	1c43      	adds	r3, r0, #1
 8011276:	d102      	bne.n	801127e <_write_r+0x1e>
 8011278:	682b      	ldr	r3, [r5, #0]
 801127a:	b103      	cbz	r3, 801127e <_write_r+0x1e>
 801127c:	6023      	str	r3, [r4, #0]
 801127e:	bd38      	pop	{r3, r4, r5, pc}
 8011280:	20008a9c 	.word	0x20008a9c

08011284 <__libc_init_array>:
 8011284:	b570      	push	{r4, r5, r6, lr}
 8011286:	4d0d      	ldr	r5, [pc, #52]	@ (80112bc <__libc_init_array+0x38>)
 8011288:	4c0d      	ldr	r4, [pc, #52]	@ (80112c0 <__libc_init_array+0x3c>)
 801128a:	1b64      	subs	r4, r4, r5
 801128c:	10a4      	asrs	r4, r4, #2
 801128e:	2600      	movs	r6, #0
 8011290:	42a6      	cmp	r6, r4
 8011292:	d109      	bne.n	80112a8 <__libc_init_array+0x24>
 8011294:	4d0b      	ldr	r5, [pc, #44]	@ (80112c4 <__libc_init_array+0x40>)
 8011296:	4c0c      	ldr	r4, [pc, #48]	@ (80112c8 <__libc_init_array+0x44>)
 8011298:	f000 ffd6 	bl	8012248 <_init>
 801129c:	1b64      	subs	r4, r4, r5
 801129e:	10a4      	asrs	r4, r4, #2
 80112a0:	2600      	movs	r6, #0
 80112a2:	42a6      	cmp	r6, r4
 80112a4:	d105      	bne.n	80112b2 <__libc_init_array+0x2e>
 80112a6:	bd70      	pop	{r4, r5, r6, pc}
 80112a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80112ac:	4798      	blx	r3
 80112ae:	3601      	adds	r6, #1
 80112b0:	e7ee      	b.n	8011290 <__libc_init_array+0xc>
 80112b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80112b6:	4798      	blx	r3
 80112b8:	3601      	adds	r6, #1
 80112ba:	e7f2      	b.n	80112a2 <__libc_init_array+0x1e>
 80112bc:	08014e68 	.word	0x08014e68
 80112c0:	08014e68 	.word	0x08014e68
 80112c4:	08014e68 	.word	0x08014e68
 80112c8:	08014e6c 	.word	0x08014e6c

080112cc <__retarget_lock_init_recursive>:
 80112cc:	4770      	bx	lr

080112ce <__retarget_lock_acquire_recursive>:
 80112ce:	4770      	bx	lr

080112d0 <__retarget_lock_release_recursive>:
 80112d0:	4770      	bx	lr

080112d2 <memcpy>:
 80112d2:	440a      	add	r2, r1
 80112d4:	4291      	cmp	r1, r2
 80112d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80112da:	d100      	bne.n	80112de <memcpy+0xc>
 80112dc:	4770      	bx	lr
 80112de:	b510      	push	{r4, lr}
 80112e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80112e8:	4291      	cmp	r1, r2
 80112ea:	d1f9      	bne.n	80112e0 <memcpy+0xe>
 80112ec:	bd10      	pop	{r4, pc}
	...

080112f0 <__assert_func>:
 80112f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112f2:	4614      	mov	r4, r2
 80112f4:	461a      	mov	r2, r3
 80112f6:	4b09      	ldr	r3, [pc, #36]	@ (801131c <__assert_func+0x2c>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	4605      	mov	r5, r0
 80112fc:	68d8      	ldr	r0, [r3, #12]
 80112fe:	b14c      	cbz	r4, 8011314 <__assert_func+0x24>
 8011300:	4b07      	ldr	r3, [pc, #28]	@ (8011320 <__assert_func+0x30>)
 8011302:	9100      	str	r1, [sp, #0]
 8011304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011308:	4906      	ldr	r1, [pc, #24]	@ (8011324 <__assert_func+0x34>)
 801130a:	462b      	mov	r3, r5
 801130c:	f000 fde0 	bl	8011ed0 <fiprintf>
 8011310:	f000 fe94 	bl	801203c <abort>
 8011314:	4b04      	ldr	r3, [pc, #16]	@ (8011328 <__assert_func+0x38>)
 8011316:	461c      	mov	r4, r3
 8011318:	e7f3      	b.n	8011302 <__assert_func+0x12>
 801131a:	bf00      	nop
 801131c:	20000038 	.word	0x20000038
 8011320:	08014df1 	.word	0x08014df1
 8011324:	08014dfe 	.word	0x08014dfe
 8011328:	08014e2c 	.word	0x08014e2c

0801132c <_free_r>:
 801132c:	b538      	push	{r3, r4, r5, lr}
 801132e:	4605      	mov	r5, r0
 8011330:	2900      	cmp	r1, #0
 8011332:	d041      	beq.n	80113b8 <_free_r+0x8c>
 8011334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011338:	1f0c      	subs	r4, r1, #4
 801133a:	2b00      	cmp	r3, #0
 801133c:	bfb8      	it	lt
 801133e:	18e4      	addlt	r4, r4, r3
 8011340:	f000 f8e8 	bl	8011514 <__malloc_lock>
 8011344:	4a1d      	ldr	r2, [pc, #116]	@ (80113bc <_free_r+0x90>)
 8011346:	6813      	ldr	r3, [r2, #0]
 8011348:	b933      	cbnz	r3, 8011358 <_free_r+0x2c>
 801134a:	6063      	str	r3, [r4, #4]
 801134c:	6014      	str	r4, [r2, #0]
 801134e:	4628      	mov	r0, r5
 8011350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011354:	f000 b8e4 	b.w	8011520 <__malloc_unlock>
 8011358:	42a3      	cmp	r3, r4
 801135a:	d908      	bls.n	801136e <_free_r+0x42>
 801135c:	6820      	ldr	r0, [r4, #0]
 801135e:	1821      	adds	r1, r4, r0
 8011360:	428b      	cmp	r3, r1
 8011362:	bf01      	itttt	eq
 8011364:	6819      	ldreq	r1, [r3, #0]
 8011366:	685b      	ldreq	r3, [r3, #4]
 8011368:	1809      	addeq	r1, r1, r0
 801136a:	6021      	streq	r1, [r4, #0]
 801136c:	e7ed      	b.n	801134a <_free_r+0x1e>
 801136e:	461a      	mov	r2, r3
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	b10b      	cbz	r3, 8011378 <_free_r+0x4c>
 8011374:	42a3      	cmp	r3, r4
 8011376:	d9fa      	bls.n	801136e <_free_r+0x42>
 8011378:	6811      	ldr	r1, [r2, #0]
 801137a:	1850      	adds	r0, r2, r1
 801137c:	42a0      	cmp	r0, r4
 801137e:	d10b      	bne.n	8011398 <_free_r+0x6c>
 8011380:	6820      	ldr	r0, [r4, #0]
 8011382:	4401      	add	r1, r0
 8011384:	1850      	adds	r0, r2, r1
 8011386:	4283      	cmp	r3, r0
 8011388:	6011      	str	r1, [r2, #0]
 801138a:	d1e0      	bne.n	801134e <_free_r+0x22>
 801138c:	6818      	ldr	r0, [r3, #0]
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	6053      	str	r3, [r2, #4]
 8011392:	4408      	add	r0, r1
 8011394:	6010      	str	r0, [r2, #0]
 8011396:	e7da      	b.n	801134e <_free_r+0x22>
 8011398:	d902      	bls.n	80113a0 <_free_r+0x74>
 801139a:	230c      	movs	r3, #12
 801139c:	602b      	str	r3, [r5, #0]
 801139e:	e7d6      	b.n	801134e <_free_r+0x22>
 80113a0:	6820      	ldr	r0, [r4, #0]
 80113a2:	1821      	adds	r1, r4, r0
 80113a4:	428b      	cmp	r3, r1
 80113a6:	bf04      	itt	eq
 80113a8:	6819      	ldreq	r1, [r3, #0]
 80113aa:	685b      	ldreq	r3, [r3, #4]
 80113ac:	6063      	str	r3, [r4, #4]
 80113ae:	bf04      	itt	eq
 80113b0:	1809      	addeq	r1, r1, r0
 80113b2:	6021      	streq	r1, [r4, #0]
 80113b4:	6054      	str	r4, [r2, #4]
 80113b6:	e7ca      	b.n	801134e <_free_r+0x22>
 80113b8:	bd38      	pop	{r3, r4, r5, pc}
 80113ba:	bf00      	nop
 80113bc:	20008aa8 	.word	0x20008aa8

080113c0 <malloc>:
 80113c0:	4b02      	ldr	r3, [pc, #8]	@ (80113cc <malloc+0xc>)
 80113c2:	4601      	mov	r1, r0
 80113c4:	6818      	ldr	r0, [r3, #0]
 80113c6:	f000 b825 	b.w	8011414 <_malloc_r>
 80113ca:	bf00      	nop
 80113cc:	20000038 	.word	0x20000038

080113d0 <sbrk_aligned>:
 80113d0:	b570      	push	{r4, r5, r6, lr}
 80113d2:	4e0f      	ldr	r6, [pc, #60]	@ (8011410 <sbrk_aligned+0x40>)
 80113d4:	460c      	mov	r4, r1
 80113d6:	6831      	ldr	r1, [r6, #0]
 80113d8:	4605      	mov	r5, r0
 80113da:	b911      	cbnz	r1, 80113e2 <sbrk_aligned+0x12>
 80113dc:	f000 fe1e 	bl	801201c <_sbrk_r>
 80113e0:	6030      	str	r0, [r6, #0]
 80113e2:	4621      	mov	r1, r4
 80113e4:	4628      	mov	r0, r5
 80113e6:	f000 fe19 	bl	801201c <_sbrk_r>
 80113ea:	1c43      	adds	r3, r0, #1
 80113ec:	d103      	bne.n	80113f6 <sbrk_aligned+0x26>
 80113ee:	f04f 34ff 	mov.w	r4, #4294967295
 80113f2:	4620      	mov	r0, r4
 80113f4:	bd70      	pop	{r4, r5, r6, pc}
 80113f6:	1cc4      	adds	r4, r0, #3
 80113f8:	f024 0403 	bic.w	r4, r4, #3
 80113fc:	42a0      	cmp	r0, r4
 80113fe:	d0f8      	beq.n	80113f2 <sbrk_aligned+0x22>
 8011400:	1a21      	subs	r1, r4, r0
 8011402:	4628      	mov	r0, r5
 8011404:	f000 fe0a 	bl	801201c <_sbrk_r>
 8011408:	3001      	adds	r0, #1
 801140a:	d1f2      	bne.n	80113f2 <sbrk_aligned+0x22>
 801140c:	e7ef      	b.n	80113ee <sbrk_aligned+0x1e>
 801140e:	bf00      	nop
 8011410:	20008aa4 	.word	0x20008aa4

08011414 <_malloc_r>:
 8011414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011418:	1ccd      	adds	r5, r1, #3
 801141a:	f025 0503 	bic.w	r5, r5, #3
 801141e:	3508      	adds	r5, #8
 8011420:	2d0c      	cmp	r5, #12
 8011422:	bf38      	it	cc
 8011424:	250c      	movcc	r5, #12
 8011426:	2d00      	cmp	r5, #0
 8011428:	4606      	mov	r6, r0
 801142a:	db01      	blt.n	8011430 <_malloc_r+0x1c>
 801142c:	42a9      	cmp	r1, r5
 801142e:	d904      	bls.n	801143a <_malloc_r+0x26>
 8011430:	230c      	movs	r3, #12
 8011432:	6033      	str	r3, [r6, #0]
 8011434:	2000      	movs	r0, #0
 8011436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801143a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011510 <_malloc_r+0xfc>
 801143e:	f000 f869 	bl	8011514 <__malloc_lock>
 8011442:	f8d8 3000 	ldr.w	r3, [r8]
 8011446:	461c      	mov	r4, r3
 8011448:	bb44      	cbnz	r4, 801149c <_malloc_r+0x88>
 801144a:	4629      	mov	r1, r5
 801144c:	4630      	mov	r0, r6
 801144e:	f7ff ffbf 	bl	80113d0 <sbrk_aligned>
 8011452:	1c43      	adds	r3, r0, #1
 8011454:	4604      	mov	r4, r0
 8011456:	d158      	bne.n	801150a <_malloc_r+0xf6>
 8011458:	f8d8 4000 	ldr.w	r4, [r8]
 801145c:	4627      	mov	r7, r4
 801145e:	2f00      	cmp	r7, #0
 8011460:	d143      	bne.n	80114ea <_malloc_r+0xd6>
 8011462:	2c00      	cmp	r4, #0
 8011464:	d04b      	beq.n	80114fe <_malloc_r+0xea>
 8011466:	6823      	ldr	r3, [r4, #0]
 8011468:	4639      	mov	r1, r7
 801146a:	4630      	mov	r0, r6
 801146c:	eb04 0903 	add.w	r9, r4, r3
 8011470:	f000 fdd4 	bl	801201c <_sbrk_r>
 8011474:	4581      	cmp	r9, r0
 8011476:	d142      	bne.n	80114fe <_malloc_r+0xea>
 8011478:	6821      	ldr	r1, [r4, #0]
 801147a:	1a6d      	subs	r5, r5, r1
 801147c:	4629      	mov	r1, r5
 801147e:	4630      	mov	r0, r6
 8011480:	f7ff ffa6 	bl	80113d0 <sbrk_aligned>
 8011484:	3001      	adds	r0, #1
 8011486:	d03a      	beq.n	80114fe <_malloc_r+0xea>
 8011488:	6823      	ldr	r3, [r4, #0]
 801148a:	442b      	add	r3, r5
 801148c:	6023      	str	r3, [r4, #0]
 801148e:	f8d8 3000 	ldr.w	r3, [r8]
 8011492:	685a      	ldr	r2, [r3, #4]
 8011494:	bb62      	cbnz	r2, 80114f0 <_malloc_r+0xdc>
 8011496:	f8c8 7000 	str.w	r7, [r8]
 801149a:	e00f      	b.n	80114bc <_malloc_r+0xa8>
 801149c:	6822      	ldr	r2, [r4, #0]
 801149e:	1b52      	subs	r2, r2, r5
 80114a0:	d420      	bmi.n	80114e4 <_malloc_r+0xd0>
 80114a2:	2a0b      	cmp	r2, #11
 80114a4:	d917      	bls.n	80114d6 <_malloc_r+0xc2>
 80114a6:	1961      	adds	r1, r4, r5
 80114a8:	42a3      	cmp	r3, r4
 80114aa:	6025      	str	r5, [r4, #0]
 80114ac:	bf18      	it	ne
 80114ae:	6059      	strne	r1, [r3, #4]
 80114b0:	6863      	ldr	r3, [r4, #4]
 80114b2:	bf08      	it	eq
 80114b4:	f8c8 1000 	streq.w	r1, [r8]
 80114b8:	5162      	str	r2, [r4, r5]
 80114ba:	604b      	str	r3, [r1, #4]
 80114bc:	4630      	mov	r0, r6
 80114be:	f000 f82f 	bl	8011520 <__malloc_unlock>
 80114c2:	f104 000b 	add.w	r0, r4, #11
 80114c6:	1d23      	adds	r3, r4, #4
 80114c8:	f020 0007 	bic.w	r0, r0, #7
 80114cc:	1ac2      	subs	r2, r0, r3
 80114ce:	bf1c      	itt	ne
 80114d0:	1a1b      	subne	r3, r3, r0
 80114d2:	50a3      	strne	r3, [r4, r2]
 80114d4:	e7af      	b.n	8011436 <_malloc_r+0x22>
 80114d6:	6862      	ldr	r2, [r4, #4]
 80114d8:	42a3      	cmp	r3, r4
 80114da:	bf0c      	ite	eq
 80114dc:	f8c8 2000 	streq.w	r2, [r8]
 80114e0:	605a      	strne	r2, [r3, #4]
 80114e2:	e7eb      	b.n	80114bc <_malloc_r+0xa8>
 80114e4:	4623      	mov	r3, r4
 80114e6:	6864      	ldr	r4, [r4, #4]
 80114e8:	e7ae      	b.n	8011448 <_malloc_r+0x34>
 80114ea:	463c      	mov	r4, r7
 80114ec:	687f      	ldr	r7, [r7, #4]
 80114ee:	e7b6      	b.n	801145e <_malloc_r+0x4a>
 80114f0:	461a      	mov	r2, r3
 80114f2:	685b      	ldr	r3, [r3, #4]
 80114f4:	42a3      	cmp	r3, r4
 80114f6:	d1fb      	bne.n	80114f0 <_malloc_r+0xdc>
 80114f8:	2300      	movs	r3, #0
 80114fa:	6053      	str	r3, [r2, #4]
 80114fc:	e7de      	b.n	80114bc <_malloc_r+0xa8>
 80114fe:	230c      	movs	r3, #12
 8011500:	6033      	str	r3, [r6, #0]
 8011502:	4630      	mov	r0, r6
 8011504:	f000 f80c 	bl	8011520 <__malloc_unlock>
 8011508:	e794      	b.n	8011434 <_malloc_r+0x20>
 801150a:	6005      	str	r5, [r0, #0]
 801150c:	e7d6      	b.n	80114bc <_malloc_r+0xa8>
 801150e:	bf00      	nop
 8011510:	20008aa8 	.word	0x20008aa8

08011514 <__malloc_lock>:
 8011514:	4801      	ldr	r0, [pc, #4]	@ (801151c <__malloc_lock+0x8>)
 8011516:	f7ff beda 	b.w	80112ce <__retarget_lock_acquire_recursive>
 801151a:	bf00      	nop
 801151c:	20008aa0 	.word	0x20008aa0

08011520 <__malloc_unlock>:
 8011520:	4801      	ldr	r0, [pc, #4]	@ (8011528 <__malloc_unlock+0x8>)
 8011522:	f7ff bed5 	b.w	80112d0 <__retarget_lock_release_recursive>
 8011526:	bf00      	nop
 8011528:	20008aa0 	.word	0x20008aa0

0801152c <__ssputs_r>:
 801152c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011530:	688e      	ldr	r6, [r1, #8]
 8011532:	461f      	mov	r7, r3
 8011534:	42be      	cmp	r6, r7
 8011536:	680b      	ldr	r3, [r1, #0]
 8011538:	4682      	mov	sl, r0
 801153a:	460c      	mov	r4, r1
 801153c:	4690      	mov	r8, r2
 801153e:	d82d      	bhi.n	801159c <__ssputs_r+0x70>
 8011540:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011544:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011548:	d026      	beq.n	8011598 <__ssputs_r+0x6c>
 801154a:	6965      	ldr	r5, [r4, #20]
 801154c:	6909      	ldr	r1, [r1, #16]
 801154e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011552:	eba3 0901 	sub.w	r9, r3, r1
 8011556:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801155a:	1c7b      	adds	r3, r7, #1
 801155c:	444b      	add	r3, r9
 801155e:	106d      	asrs	r5, r5, #1
 8011560:	429d      	cmp	r5, r3
 8011562:	bf38      	it	cc
 8011564:	461d      	movcc	r5, r3
 8011566:	0553      	lsls	r3, r2, #21
 8011568:	d527      	bpl.n	80115ba <__ssputs_r+0x8e>
 801156a:	4629      	mov	r1, r5
 801156c:	f7ff ff52 	bl	8011414 <_malloc_r>
 8011570:	4606      	mov	r6, r0
 8011572:	b360      	cbz	r0, 80115ce <__ssputs_r+0xa2>
 8011574:	6921      	ldr	r1, [r4, #16]
 8011576:	464a      	mov	r2, r9
 8011578:	f7ff feab 	bl	80112d2 <memcpy>
 801157c:	89a3      	ldrh	r3, [r4, #12]
 801157e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011586:	81a3      	strh	r3, [r4, #12]
 8011588:	6126      	str	r6, [r4, #16]
 801158a:	6165      	str	r5, [r4, #20]
 801158c:	444e      	add	r6, r9
 801158e:	eba5 0509 	sub.w	r5, r5, r9
 8011592:	6026      	str	r6, [r4, #0]
 8011594:	60a5      	str	r5, [r4, #8]
 8011596:	463e      	mov	r6, r7
 8011598:	42be      	cmp	r6, r7
 801159a:	d900      	bls.n	801159e <__ssputs_r+0x72>
 801159c:	463e      	mov	r6, r7
 801159e:	6820      	ldr	r0, [r4, #0]
 80115a0:	4632      	mov	r2, r6
 80115a2:	4641      	mov	r1, r8
 80115a4:	f7ff fdf3 	bl	801118e <memmove>
 80115a8:	68a3      	ldr	r3, [r4, #8]
 80115aa:	1b9b      	subs	r3, r3, r6
 80115ac:	60a3      	str	r3, [r4, #8]
 80115ae:	6823      	ldr	r3, [r4, #0]
 80115b0:	4433      	add	r3, r6
 80115b2:	6023      	str	r3, [r4, #0]
 80115b4:	2000      	movs	r0, #0
 80115b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115ba:	462a      	mov	r2, r5
 80115bc:	f000 fd45 	bl	801204a <_realloc_r>
 80115c0:	4606      	mov	r6, r0
 80115c2:	2800      	cmp	r0, #0
 80115c4:	d1e0      	bne.n	8011588 <__ssputs_r+0x5c>
 80115c6:	6921      	ldr	r1, [r4, #16]
 80115c8:	4650      	mov	r0, sl
 80115ca:	f7ff feaf 	bl	801132c <_free_r>
 80115ce:	230c      	movs	r3, #12
 80115d0:	f8ca 3000 	str.w	r3, [sl]
 80115d4:	89a3      	ldrh	r3, [r4, #12]
 80115d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115da:	81a3      	strh	r3, [r4, #12]
 80115dc:	f04f 30ff 	mov.w	r0, #4294967295
 80115e0:	e7e9      	b.n	80115b6 <__ssputs_r+0x8a>
	...

080115e4 <_svfiprintf_r>:
 80115e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e8:	4698      	mov	r8, r3
 80115ea:	898b      	ldrh	r3, [r1, #12]
 80115ec:	061b      	lsls	r3, r3, #24
 80115ee:	b09d      	sub	sp, #116	@ 0x74
 80115f0:	4607      	mov	r7, r0
 80115f2:	460d      	mov	r5, r1
 80115f4:	4614      	mov	r4, r2
 80115f6:	d510      	bpl.n	801161a <_svfiprintf_r+0x36>
 80115f8:	690b      	ldr	r3, [r1, #16]
 80115fa:	b973      	cbnz	r3, 801161a <_svfiprintf_r+0x36>
 80115fc:	2140      	movs	r1, #64	@ 0x40
 80115fe:	f7ff ff09 	bl	8011414 <_malloc_r>
 8011602:	6028      	str	r0, [r5, #0]
 8011604:	6128      	str	r0, [r5, #16]
 8011606:	b930      	cbnz	r0, 8011616 <_svfiprintf_r+0x32>
 8011608:	230c      	movs	r3, #12
 801160a:	603b      	str	r3, [r7, #0]
 801160c:	f04f 30ff 	mov.w	r0, #4294967295
 8011610:	b01d      	add	sp, #116	@ 0x74
 8011612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011616:	2340      	movs	r3, #64	@ 0x40
 8011618:	616b      	str	r3, [r5, #20]
 801161a:	2300      	movs	r3, #0
 801161c:	9309      	str	r3, [sp, #36]	@ 0x24
 801161e:	2320      	movs	r3, #32
 8011620:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011624:	f8cd 800c 	str.w	r8, [sp, #12]
 8011628:	2330      	movs	r3, #48	@ 0x30
 801162a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80117c8 <_svfiprintf_r+0x1e4>
 801162e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011632:	f04f 0901 	mov.w	r9, #1
 8011636:	4623      	mov	r3, r4
 8011638:	469a      	mov	sl, r3
 801163a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801163e:	b10a      	cbz	r2, 8011644 <_svfiprintf_r+0x60>
 8011640:	2a25      	cmp	r2, #37	@ 0x25
 8011642:	d1f9      	bne.n	8011638 <_svfiprintf_r+0x54>
 8011644:	ebba 0b04 	subs.w	fp, sl, r4
 8011648:	d00b      	beq.n	8011662 <_svfiprintf_r+0x7e>
 801164a:	465b      	mov	r3, fp
 801164c:	4622      	mov	r2, r4
 801164e:	4629      	mov	r1, r5
 8011650:	4638      	mov	r0, r7
 8011652:	f7ff ff6b 	bl	801152c <__ssputs_r>
 8011656:	3001      	adds	r0, #1
 8011658:	f000 80a7 	beq.w	80117aa <_svfiprintf_r+0x1c6>
 801165c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801165e:	445a      	add	r2, fp
 8011660:	9209      	str	r2, [sp, #36]	@ 0x24
 8011662:	f89a 3000 	ldrb.w	r3, [sl]
 8011666:	2b00      	cmp	r3, #0
 8011668:	f000 809f 	beq.w	80117aa <_svfiprintf_r+0x1c6>
 801166c:	2300      	movs	r3, #0
 801166e:	f04f 32ff 	mov.w	r2, #4294967295
 8011672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011676:	f10a 0a01 	add.w	sl, sl, #1
 801167a:	9304      	str	r3, [sp, #16]
 801167c:	9307      	str	r3, [sp, #28]
 801167e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011682:	931a      	str	r3, [sp, #104]	@ 0x68
 8011684:	4654      	mov	r4, sl
 8011686:	2205      	movs	r2, #5
 8011688:	f814 1b01 	ldrb.w	r1, [r4], #1
 801168c:	484e      	ldr	r0, [pc, #312]	@ (80117c8 <_svfiprintf_r+0x1e4>)
 801168e:	f7ee fd9f 	bl	80001d0 <memchr>
 8011692:	9a04      	ldr	r2, [sp, #16]
 8011694:	b9d8      	cbnz	r0, 80116ce <_svfiprintf_r+0xea>
 8011696:	06d0      	lsls	r0, r2, #27
 8011698:	bf44      	itt	mi
 801169a:	2320      	movmi	r3, #32
 801169c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116a0:	0711      	lsls	r1, r2, #28
 80116a2:	bf44      	itt	mi
 80116a4:	232b      	movmi	r3, #43	@ 0x2b
 80116a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116aa:	f89a 3000 	ldrb.w	r3, [sl]
 80116ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80116b0:	d015      	beq.n	80116de <_svfiprintf_r+0xfa>
 80116b2:	9a07      	ldr	r2, [sp, #28]
 80116b4:	4654      	mov	r4, sl
 80116b6:	2000      	movs	r0, #0
 80116b8:	f04f 0c0a 	mov.w	ip, #10
 80116bc:	4621      	mov	r1, r4
 80116be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116c2:	3b30      	subs	r3, #48	@ 0x30
 80116c4:	2b09      	cmp	r3, #9
 80116c6:	d94b      	bls.n	8011760 <_svfiprintf_r+0x17c>
 80116c8:	b1b0      	cbz	r0, 80116f8 <_svfiprintf_r+0x114>
 80116ca:	9207      	str	r2, [sp, #28]
 80116cc:	e014      	b.n	80116f8 <_svfiprintf_r+0x114>
 80116ce:	eba0 0308 	sub.w	r3, r0, r8
 80116d2:	fa09 f303 	lsl.w	r3, r9, r3
 80116d6:	4313      	orrs	r3, r2
 80116d8:	9304      	str	r3, [sp, #16]
 80116da:	46a2      	mov	sl, r4
 80116dc:	e7d2      	b.n	8011684 <_svfiprintf_r+0xa0>
 80116de:	9b03      	ldr	r3, [sp, #12]
 80116e0:	1d19      	adds	r1, r3, #4
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	9103      	str	r1, [sp, #12]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	bfbb      	ittet	lt
 80116ea:	425b      	neglt	r3, r3
 80116ec:	f042 0202 	orrlt.w	r2, r2, #2
 80116f0:	9307      	strge	r3, [sp, #28]
 80116f2:	9307      	strlt	r3, [sp, #28]
 80116f4:	bfb8      	it	lt
 80116f6:	9204      	strlt	r2, [sp, #16]
 80116f8:	7823      	ldrb	r3, [r4, #0]
 80116fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80116fc:	d10a      	bne.n	8011714 <_svfiprintf_r+0x130>
 80116fe:	7863      	ldrb	r3, [r4, #1]
 8011700:	2b2a      	cmp	r3, #42	@ 0x2a
 8011702:	d132      	bne.n	801176a <_svfiprintf_r+0x186>
 8011704:	9b03      	ldr	r3, [sp, #12]
 8011706:	1d1a      	adds	r2, r3, #4
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	9203      	str	r2, [sp, #12]
 801170c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011710:	3402      	adds	r4, #2
 8011712:	9305      	str	r3, [sp, #20]
 8011714:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80117d8 <_svfiprintf_r+0x1f4>
 8011718:	7821      	ldrb	r1, [r4, #0]
 801171a:	2203      	movs	r2, #3
 801171c:	4650      	mov	r0, sl
 801171e:	f7ee fd57 	bl	80001d0 <memchr>
 8011722:	b138      	cbz	r0, 8011734 <_svfiprintf_r+0x150>
 8011724:	9b04      	ldr	r3, [sp, #16]
 8011726:	eba0 000a 	sub.w	r0, r0, sl
 801172a:	2240      	movs	r2, #64	@ 0x40
 801172c:	4082      	lsls	r2, r0
 801172e:	4313      	orrs	r3, r2
 8011730:	3401      	adds	r4, #1
 8011732:	9304      	str	r3, [sp, #16]
 8011734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011738:	4824      	ldr	r0, [pc, #144]	@ (80117cc <_svfiprintf_r+0x1e8>)
 801173a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801173e:	2206      	movs	r2, #6
 8011740:	f7ee fd46 	bl	80001d0 <memchr>
 8011744:	2800      	cmp	r0, #0
 8011746:	d036      	beq.n	80117b6 <_svfiprintf_r+0x1d2>
 8011748:	4b21      	ldr	r3, [pc, #132]	@ (80117d0 <_svfiprintf_r+0x1ec>)
 801174a:	bb1b      	cbnz	r3, 8011794 <_svfiprintf_r+0x1b0>
 801174c:	9b03      	ldr	r3, [sp, #12]
 801174e:	3307      	adds	r3, #7
 8011750:	f023 0307 	bic.w	r3, r3, #7
 8011754:	3308      	adds	r3, #8
 8011756:	9303      	str	r3, [sp, #12]
 8011758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801175a:	4433      	add	r3, r6
 801175c:	9309      	str	r3, [sp, #36]	@ 0x24
 801175e:	e76a      	b.n	8011636 <_svfiprintf_r+0x52>
 8011760:	fb0c 3202 	mla	r2, ip, r2, r3
 8011764:	460c      	mov	r4, r1
 8011766:	2001      	movs	r0, #1
 8011768:	e7a8      	b.n	80116bc <_svfiprintf_r+0xd8>
 801176a:	2300      	movs	r3, #0
 801176c:	3401      	adds	r4, #1
 801176e:	9305      	str	r3, [sp, #20]
 8011770:	4619      	mov	r1, r3
 8011772:	f04f 0c0a 	mov.w	ip, #10
 8011776:	4620      	mov	r0, r4
 8011778:	f810 2b01 	ldrb.w	r2, [r0], #1
 801177c:	3a30      	subs	r2, #48	@ 0x30
 801177e:	2a09      	cmp	r2, #9
 8011780:	d903      	bls.n	801178a <_svfiprintf_r+0x1a6>
 8011782:	2b00      	cmp	r3, #0
 8011784:	d0c6      	beq.n	8011714 <_svfiprintf_r+0x130>
 8011786:	9105      	str	r1, [sp, #20]
 8011788:	e7c4      	b.n	8011714 <_svfiprintf_r+0x130>
 801178a:	fb0c 2101 	mla	r1, ip, r1, r2
 801178e:	4604      	mov	r4, r0
 8011790:	2301      	movs	r3, #1
 8011792:	e7f0      	b.n	8011776 <_svfiprintf_r+0x192>
 8011794:	ab03      	add	r3, sp, #12
 8011796:	9300      	str	r3, [sp, #0]
 8011798:	462a      	mov	r2, r5
 801179a:	4b0e      	ldr	r3, [pc, #56]	@ (80117d4 <_svfiprintf_r+0x1f0>)
 801179c:	a904      	add	r1, sp, #16
 801179e:	4638      	mov	r0, r7
 80117a0:	f3af 8000 	nop.w
 80117a4:	1c42      	adds	r2, r0, #1
 80117a6:	4606      	mov	r6, r0
 80117a8:	d1d6      	bne.n	8011758 <_svfiprintf_r+0x174>
 80117aa:	89ab      	ldrh	r3, [r5, #12]
 80117ac:	065b      	lsls	r3, r3, #25
 80117ae:	f53f af2d 	bmi.w	801160c <_svfiprintf_r+0x28>
 80117b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80117b4:	e72c      	b.n	8011610 <_svfiprintf_r+0x2c>
 80117b6:	ab03      	add	r3, sp, #12
 80117b8:	9300      	str	r3, [sp, #0]
 80117ba:	462a      	mov	r2, r5
 80117bc:	4b05      	ldr	r3, [pc, #20]	@ (80117d4 <_svfiprintf_r+0x1f0>)
 80117be:	a904      	add	r1, sp, #16
 80117c0:	4638      	mov	r0, r7
 80117c2:	f000 f9bb 	bl	8011b3c <_printf_i>
 80117c6:	e7ed      	b.n	80117a4 <_svfiprintf_r+0x1c0>
 80117c8:	08014e2d 	.word	0x08014e2d
 80117cc:	08014e37 	.word	0x08014e37
 80117d0:	00000000 	.word	0x00000000
 80117d4:	0801152d 	.word	0x0801152d
 80117d8:	08014e33 	.word	0x08014e33

080117dc <__sfputc_r>:
 80117dc:	6893      	ldr	r3, [r2, #8]
 80117de:	3b01      	subs	r3, #1
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	b410      	push	{r4}
 80117e4:	6093      	str	r3, [r2, #8]
 80117e6:	da08      	bge.n	80117fa <__sfputc_r+0x1e>
 80117e8:	6994      	ldr	r4, [r2, #24]
 80117ea:	42a3      	cmp	r3, r4
 80117ec:	db01      	blt.n	80117f2 <__sfputc_r+0x16>
 80117ee:	290a      	cmp	r1, #10
 80117f0:	d103      	bne.n	80117fa <__sfputc_r+0x1e>
 80117f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117f6:	f000 bb7d 	b.w	8011ef4 <__swbuf_r>
 80117fa:	6813      	ldr	r3, [r2, #0]
 80117fc:	1c58      	adds	r0, r3, #1
 80117fe:	6010      	str	r0, [r2, #0]
 8011800:	7019      	strb	r1, [r3, #0]
 8011802:	4608      	mov	r0, r1
 8011804:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011808:	4770      	bx	lr

0801180a <__sfputs_r>:
 801180a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801180c:	4606      	mov	r6, r0
 801180e:	460f      	mov	r7, r1
 8011810:	4614      	mov	r4, r2
 8011812:	18d5      	adds	r5, r2, r3
 8011814:	42ac      	cmp	r4, r5
 8011816:	d101      	bne.n	801181c <__sfputs_r+0x12>
 8011818:	2000      	movs	r0, #0
 801181a:	e007      	b.n	801182c <__sfputs_r+0x22>
 801181c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011820:	463a      	mov	r2, r7
 8011822:	4630      	mov	r0, r6
 8011824:	f7ff ffda 	bl	80117dc <__sfputc_r>
 8011828:	1c43      	adds	r3, r0, #1
 801182a:	d1f3      	bne.n	8011814 <__sfputs_r+0xa>
 801182c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011830 <_vfiprintf_r>:
 8011830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011834:	460d      	mov	r5, r1
 8011836:	b09d      	sub	sp, #116	@ 0x74
 8011838:	4614      	mov	r4, r2
 801183a:	4698      	mov	r8, r3
 801183c:	4606      	mov	r6, r0
 801183e:	b118      	cbz	r0, 8011848 <_vfiprintf_r+0x18>
 8011840:	6a03      	ldr	r3, [r0, #32]
 8011842:	b90b      	cbnz	r3, 8011848 <_vfiprintf_r+0x18>
 8011844:	f7ff fbe6 	bl	8011014 <__sinit>
 8011848:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801184a:	07d9      	lsls	r1, r3, #31
 801184c:	d405      	bmi.n	801185a <_vfiprintf_r+0x2a>
 801184e:	89ab      	ldrh	r3, [r5, #12]
 8011850:	059a      	lsls	r2, r3, #22
 8011852:	d402      	bmi.n	801185a <_vfiprintf_r+0x2a>
 8011854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011856:	f7ff fd3a 	bl	80112ce <__retarget_lock_acquire_recursive>
 801185a:	89ab      	ldrh	r3, [r5, #12]
 801185c:	071b      	lsls	r3, r3, #28
 801185e:	d501      	bpl.n	8011864 <_vfiprintf_r+0x34>
 8011860:	692b      	ldr	r3, [r5, #16]
 8011862:	b99b      	cbnz	r3, 801188c <_vfiprintf_r+0x5c>
 8011864:	4629      	mov	r1, r5
 8011866:	4630      	mov	r0, r6
 8011868:	f000 fb82 	bl	8011f70 <__swsetup_r>
 801186c:	b170      	cbz	r0, 801188c <_vfiprintf_r+0x5c>
 801186e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011870:	07dc      	lsls	r4, r3, #31
 8011872:	d504      	bpl.n	801187e <_vfiprintf_r+0x4e>
 8011874:	f04f 30ff 	mov.w	r0, #4294967295
 8011878:	b01d      	add	sp, #116	@ 0x74
 801187a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801187e:	89ab      	ldrh	r3, [r5, #12]
 8011880:	0598      	lsls	r0, r3, #22
 8011882:	d4f7      	bmi.n	8011874 <_vfiprintf_r+0x44>
 8011884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011886:	f7ff fd23 	bl	80112d0 <__retarget_lock_release_recursive>
 801188a:	e7f3      	b.n	8011874 <_vfiprintf_r+0x44>
 801188c:	2300      	movs	r3, #0
 801188e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011890:	2320      	movs	r3, #32
 8011892:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011896:	f8cd 800c 	str.w	r8, [sp, #12]
 801189a:	2330      	movs	r3, #48	@ 0x30
 801189c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011a4c <_vfiprintf_r+0x21c>
 80118a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80118a4:	f04f 0901 	mov.w	r9, #1
 80118a8:	4623      	mov	r3, r4
 80118aa:	469a      	mov	sl, r3
 80118ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118b0:	b10a      	cbz	r2, 80118b6 <_vfiprintf_r+0x86>
 80118b2:	2a25      	cmp	r2, #37	@ 0x25
 80118b4:	d1f9      	bne.n	80118aa <_vfiprintf_r+0x7a>
 80118b6:	ebba 0b04 	subs.w	fp, sl, r4
 80118ba:	d00b      	beq.n	80118d4 <_vfiprintf_r+0xa4>
 80118bc:	465b      	mov	r3, fp
 80118be:	4622      	mov	r2, r4
 80118c0:	4629      	mov	r1, r5
 80118c2:	4630      	mov	r0, r6
 80118c4:	f7ff ffa1 	bl	801180a <__sfputs_r>
 80118c8:	3001      	adds	r0, #1
 80118ca:	f000 80a7 	beq.w	8011a1c <_vfiprintf_r+0x1ec>
 80118ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80118d0:	445a      	add	r2, fp
 80118d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80118d4:	f89a 3000 	ldrb.w	r3, [sl]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	f000 809f 	beq.w	8011a1c <_vfiprintf_r+0x1ec>
 80118de:	2300      	movs	r3, #0
 80118e0:	f04f 32ff 	mov.w	r2, #4294967295
 80118e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80118e8:	f10a 0a01 	add.w	sl, sl, #1
 80118ec:	9304      	str	r3, [sp, #16]
 80118ee:	9307      	str	r3, [sp, #28]
 80118f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80118f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80118f6:	4654      	mov	r4, sl
 80118f8:	2205      	movs	r2, #5
 80118fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118fe:	4853      	ldr	r0, [pc, #332]	@ (8011a4c <_vfiprintf_r+0x21c>)
 8011900:	f7ee fc66 	bl	80001d0 <memchr>
 8011904:	9a04      	ldr	r2, [sp, #16]
 8011906:	b9d8      	cbnz	r0, 8011940 <_vfiprintf_r+0x110>
 8011908:	06d1      	lsls	r1, r2, #27
 801190a:	bf44      	itt	mi
 801190c:	2320      	movmi	r3, #32
 801190e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011912:	0713      	lsls	r3, r2, #28
 8011914:	bf44      	itt	mi
 8011916:	232b      	movmi	r3, #43	@ 0x2b
 8011918:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801191c:	f89a 3000 	ldrb.w	r3, [sl]
 8011920:	2b2a      	cmp	r3, #42	@ 0x2a
 8011922:	d015      	beq.n	8011950 <_vfiprintf_r+0x120>
 8011924:	9a07      	ldr	r2, [sp, #28]
 8011926:	4654      	mov	r4, sl
 8011928:	2000      	movs	r0, #0
 801192a:	f04f 0c0a 	mov.w	ip, #10
 801192e:	4621      	mov	r1, r4
 8011930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011934:	3b30      	subs	r3, #48	@ 0x30
 8011936:	2b09      	cmp	r3, #9
 8011938:	d94b      	bls.n	80119d2 <_vfiprintf_r+0x1a2>
 801193a:	b1b0      	cbz	r0, 801196a <_vfiprintf_r+0x13a>
 801193c:	9207      	str	r2, [sp, #28]
 801193e:	e014      	b.n	801196a <_vfiprintf_r+0x13a>
 8011940:	eba0 0308 	sub.w	r3, r0, r8
 8011944:	fa09 f303 	lsl.w	r3, r9, r3
 8011948:	4313      	orrs	r3, r2
 801194a:	9304      	str	r3, [sp, #16]
 801194c:	46a2      	mov	sl, r4
 801194e:	e7d2      	b.n	80118f6 <_vfiprintf_r+0xc6>
 8011950:	9b03      	ldr	r3, [sp, #12]
 8011952:	1d19      	adds	r1, r3, #4
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	9103      	str	r1, [sp, #12]
 8011958:	2b00      	cmp	r3, #0
 801195a:	bfbb      	ittet	lt
 801195c:	425b      	neglt	r3, r3
 801195e:	f042 0202 	orrlt.w	r2, r2, #2
 8011962:	9307      	strge	r3, [sp, #28]
 8011964:	9307      	strlt	r3, [sp, #28]
 8011966:	bfb8      	it	lt
 8011968:	9204      	strlt	r2, [sp, #16]
 801196a:	7823      	ldrb	r3, [r4, #0]
 801196c:	2b2e      	cmp	r3, #46	@ 0x2e
 801196e:	d10a      	bne.n	8011986 <_vfiprintf_r+0x156>
 8011970:	7863      	ldrb	r3, [r4, #1]
 8011972:	2b2a      	cmp	r3, #42	@ 0x2a
 8011974:	d132      	bne.n	80119dc <_vfiprintf_r+0x1ac>
 8011976:	9b03      	ldr	r3, [sp, #12]
 8011978:	1d1a      	adds	r2, r3, #4
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	9203      	str	r2, [sp, #12]
 801197e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011982:	3402      	adds	r4, #2
 8011984:	9305      	str	r3, [sp, #20]
 8011986:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011a5c <_vfiprintf_r+0x22c>
 801198a:	7821      	ldrb	r1, [r4, #0]
 801198c:	2203      	movs	r2, #3
 801198e:	4650      	mov	r0, sl
 8011990:	f7ee fc1e 	bl	80001d0 <memchr>
 8011994:	b138      	cbz	r0, 80119a6 <_vfiprintf_r+0x176>
 8011996:	9b04      	ldr	r3, [sp, #16]
 8011998:	eba0 000a 	sub.w	r0, r0, sl
 801199c:	2240      	movs	r2, #64	@ 0x40
 801199e:	4082      	lsls	r2, r0
 80119a0:	4313      	orrs	r3, r2
 80119a2:	3401      	adds	r4, #1
 80119a4:	9304      	str	r3, [sp, #16]
 80119a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119aa:	4829      	ldr	r0, [pc, #164]	@ (8011a50 <_vfiprintf_r+0x220>)
 80119ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80119b0:	2206      	movs	r2, #6
 80119b2:	f7ee fc0d 	bl	80001d0 <memchr>
 80119b6:	2800      	cmp	r0, #0
 80119b8:	d03f      	beq.n	8011a3a <_vfiprintf_r+0x20a>
 80119ba:	4b26      	ldr	r3, [pc, #152]	@ (8011a54 <_vfiprintf_r+0x224>)
 80119bc:	bb1b      	cbnz	r3, 8011a06 <_vfiprintf_r+0x1d6>
 80119be:	9b03      	ldr	r3, [sp, #12]
 80119c0:	3307      	adds	r3, #7
 80119c2:	f023 0307 	bic.w	r3, r3, #7
 80119c6:	3308      	adds	r3, #8
 80119c8:	9303      	str	r3, [sp, #12]
 80119ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119cc:	443b      	add	r3, r7
 80119ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80119d0:	e76a      	b.n	80118a8 <_vfiprintf_r+0x78>
 80119d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80119d6:	460c      	mov	r4, r1
 80119d8:	2001      	movs	r0, #1
 80119da:	e7a8      	b.n	801192e <_vfiprintf_r+0xfe>
 80119dc:	2300      	movs	r3, #0
 80119de:	3401      	adds	r4, #1
 80119e0:	9305      	str	r3, [sp, #20]
 80119e2:	4619      	mov	r1, r3
 80119e4:	f04f 0c0a 	mov.w	ip, #10
 80119e8:	4620      	mov	r0, r4
 80119ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119ee:	3a30      	subs	r2, #48	@ 0x30
 80119f0:	2a09      	cmp	r2, #9
 80119f2:	d903      	bls.n	80119fc <_vfiprintf_r+0x1cc>
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d0c6      	beq.n	8011986 <_vfiprintf_r+0x156>
 80119f8:	9105      	str	r1, [sp, #20]
 80119fa:	e7c4      	b.n	8011986 <_vfiprintf_r+0x156>
 80119fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a00:	4604      	mov	r4, r0
 8011a02:	2301      	movs	r3, #1
 8011a04:	e7f0      	b.n	80119e8 <_vfiprintf_r+0x1b8>
 8011a06:	ab03      	add	r3, sp, #12
 8011a08:	9300      	str	r3, [sp, #0]
 8011a0a:	462a      	mov	r2, r5
 8011a0c:	4b12      	ldr	r3, [pc, #72]	@ (8011a58 <_vfiprintf_r+0x228>)
 8011a0e:	a904      	add	r1, sp, #16
 8011a10:	4630      	mov	r0, r6
 8011a12:	f3af 8000 	nop.w
 8011a16:	4607      	mov	r7, r0
 8011a18:	1c78      	adds	r0, r7, #1
 8011a1a:	d1d6      	bne.n	80119ca <_vfiprintf_r+0x19a>
 8011a1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a1e:	07d9      	lsls	r1, r3, #31
 8011a20:	d405      	bmi.n	8011a2e <_vfiprintf_r+0x1fe>
 8011a22:	89ab      	ldrh	r3, [r5, #12]
 8011a24:	059a      	lsls	r2, r3, #22
 8011a26:	d402      	bmi.n	8011a2e <_vfiprintf_r+0x1fe>
 8011a28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a2a:	f7ff fc51 	bl	80112d0 <__retarget_lock_release_recursive>
 8011a2e:	89ab      	ldrh	r3, [r5, #12]
 8011a30:	065b      	lsls	r3, r3, #25
 8011a32:	f53f af1f 	bmi.w	8011874 <_vfiprintf_r+0x44>
 8011a36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011a38:	e71e      	b.n	8011878 <_vfiprintf_r+0x48>
 8011a3a:	ab03      	add	r3, sp, #12
 8011a3c:	9300      	str	r3, [sp, #0]
 8011a3e:	462a      	mov	r2, r5
 8011a40:	4b05      	ldr	r3, [pc, #20]	@ (8011a58 <_vfiprintf_r+0x228>)
 8011a42:	a904      	add	r1, sp, #16
 8011a44:	4630      	mov	r0, r6
 8011a46:	f000 f879 	bl	8011b3c <_printf_i>
 8011a4a:	e7e4      	b.n	8011a16 <_vfiprintf_r+0x1e6>
 8011a4c:	08014e2d 	.word	0x08014e2d
 8011a50:	08014e37 	.word	0x08014e37
 8011a54:	00000000 	.word	0x00000000
 8011a58:	0801180b 	.word	0x0801180b
 8011a5c:	08014e33 	.word	0x08014e33

08011a60 <_printf_common>:
 8011a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a64:	4616      	mov	r6, r2
 8011a66:	4698      	mov	r8, r3
 8011a68:	688a      	ldr	r2, [r1, #8]
 8011a6a:	690b      	ldr	r3, [r1, #16]
 8011a6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011a70:	4293      	cmp	r3, r2
 8011a72:	bfb8      	it	lt
 8011a74:	4613      	movlt	r3, r2
 8011a76:	6033      	str	r3, [r6, #0]
 8011a78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011a7c:	4607      	mov	r7, r0
 8011a7e:	460c      	mov	r4, r1
 8011a80:	b10a      	cbz	r2, 8011a86 <_printf_common+0x26>
 8011a82:	3301      	adds	r3, #1
 8011a84:	6033      	str	r3, [r6, #0]
 8011a86:	6823      	ldr	r3, [r4, #0]
 8011a88:	0699      	lsls	r1, r3, #26
 8011a8a:	bf42      	ittt	mi
 8011a8c:	6833      	ldrmi	r3, [r6, #0]
 8011a8e:	3302      	addmi	r3, #2
 8011a90:	6033      	strmi	r3, [r6, #0]
 8011a92:	6825      	ldr	r5, [r4, #0]
 8011a94:	f015 0506 	ands.w	r5, r5, #6
 8011a98:	d106      	bne.n	8011aa8 <_printf_common+0x48>
 8011a9a:	f104 0a19 	add.w	sl, r4, #25
 8011a9e:	68e3      	ldr	r3, [r4, #12]
 8011aa0:	6832      	ldr	r2, [r6, #0]
 8011aa2:	1a9b      	subs	r3, r3, r2
 8011aa4:	42ab      	cmp	r3, r5
 8011aa6:	dc26      	bgt.n	8011af6 <_printf_common+0x96>
 8011aa8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011aac:	6822      	ldr	r2, [r4, #0]
 8011aae:	3b00      	subs	r3, #0
 8011ab0:	bf18      	it	ne
 8011ab2:	2301      	movne	r3, #1
 8011ab4:	0692      	lsls	r2, r2, #26
 8011ab6:	d42b      	bmi.n	8011b10 <_printf_common+0xb0>
 8011ab8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011abc:	4641      	mov	r1, r8
 8011abe:	4638      	mov	r0, r7
 8011ac0:	47c8      	blx	r9
 8011ac2:	3001      	adds	r0, #1
 8011ac4:	d01e      	beq.n	8011b04 <_printf_common+0xa4>
 8011ac6:	6823      	ldr	r3, [r4, #0]
 8011ac8:	6922      	ldr	r2, [r4, #16]
 8011aca:	f003 0306 	and.w	r3, r3, #6
 8011ace:	2b04      	cmp	r3, #4
 8011ad0:	bf02      	ittt	eq
 8011ad2:	68e5      	ldreq	r5, [r4, #12]
 8011ad4:	6833      	ldreq	r3, [r6, #0]
 8011ad6:	1aed      	subeq	r5, r5, r3
 8011ad8:	68a3      	ldr	r3, [r4, #8]
 8011ada:	bf0c      	ite	eq
 8011adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ae0:	2500      	movne	r5, #0
 8011ae2:	4293      	cmp	r3, r2
 8011ae4:	bfc4      	itt	gt
 8011ae6:	1a9b      	subgt	r3, r3, r2
 8011ae8:	18ed      	addgt	r5, r5, r3
 8011aea:	2600      	movs	r6, #0
 8011aec:	341a      	adds	r4, #26
 8011aee:	42b5      	cmp	r5, r6
 8011af0:	d11a      	bne.n	8011b28 <_printf_common+0xc8>
 8011af2:	2000      	movs	r0, #0
 8011af4:	e008      	b.n	8011b08 <_printf_common+0xa8>
 8011af6:	2301      	movs	r3, #1
 8011af8:	4652      	mov	r2, sl
 8011afa:	4641      	mov	r1, r8
 8011afc:	4638      	mov	r0, r7
 8011afe:	47c8      	blx	r9
 8011b00:	3001      	adds	r0, #1
 8011b02:	d103      	bne.n	8011b0c <_printf_common+0xac>
 8011b04:	f04f 30ff 	mov.w	r0, #4294967295
 8011b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b0c:	3501      	adds	r5, #1
 8011b0e:	e7c6      	b.n	8011a9e <_printf_common+0x3e>
 8011b10:	18e1      	adds	r1, r4, r3
 8011b12:	1c5a      	adds	r2, r3, #1
 8011b14:	2030      	movs	r0, #48	@ 0x30
 8011b16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011b1a:	4422      	add	r2, r4
 8011b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011b20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011b24:	3302      	adds	r3, #2
 8011b26:	e7c7      	b.n	8011ab8 <_printf_common+0x58>
 8011b28:	2301      	movs	r3, #1
 8011b2a:	4622      	mov	r2, r4
 8011b2c:	4641      	mov	r1, r8
 8011b2e:	4638      	mov	r0, r7
 8011b30:	47c8      	blx	r9
 8011b32:	3001      	adds	r0, #1
 8011b34:	d0e6      	beq.n	8011b04 <_printf_common+0xa4>
 8011b36:	3601      	adds	r6, #1
 8011b38:	e7d9      	b.n	8011aee <_printf_common+0x8e>
	...

08011b3c <_printf_i>:
 8011b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b40:	7e0f      	ldrb	r7, [r1, #24]
 8011b42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011b44:	2f78      	cmp	r7, #120	@ 0x78
 8011b46:	4691      	mov	r9, r2
 8011b48:	4680      	mov	r8, r0
 8011b4a:	460c      	mov	r4, r1
 8011b4c:	469a      	mov	sl, r3
 8011b4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011b52:	d807      	bhi.n	8011b64 <_printf_i+0x28>
 8011b54:	2f62      	cmp	r7, #98	@ 0x62
 8011b56:	d80a      	bhi.n	8011b6e <_printf_i+0x32>
 8011b58:	2f00      	cmp	r7, #0
 8011b5a:	f000 80d1 	beq.w	8011d00 <_printf_i+0x1c4>
 8011b5e:	2f58      	cmp	r7, #88	@ 0x58
 8011b60:	f000 80b8 	beq.w	8011cd4 <_printf_i+0x198>
 8011b64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011b68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011b6c:	e03a      	b.n	8011be4 <_printf_i+0xa8>
 8011b6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011b72:	2b15      	cmp	r3, #21
 8011b74:	d8f6      	bhi.n	8011b64 <_printf_i+0x28>
 8011b76:	a101      	add	r1, pc, #4	@ (adr r1, 8011b7c <_printf_i+0x40>)
 8011b78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011b7c:	08011bd5 	.word	0x08011bd5
 8011b80:	08011be9 	.word	0x08011be9
 8011b84:	08011b65 	.word	0x08011b65
 8011b88:	08011b65 	.word	0x08011b65
 8011b8c:	08011b65 	.word	0x08011b65
 8011b90:	08011b65 	.word	0x08011b65
 8011b94:	08011be9 	.word	0x08011be9
 8011b98:	08011b65 	.word	0x08011b65
 8011b9c:	08011b65 	.word	0x08011b65
 8011ba0:	08011b65 	.word	0x08011b65
 8011ba4:	08011b65 	.word	0x08011b65
 8011ba8:	08011ce7 	.word	0x08011ce7
 8011bac:	08011c13 	.word	0x08011c13
 8011bb0:	08011ca1 	.word	0x08011ca1
 8011bb4:	08011b65 	.word	0x08011b65
 8011bb8:	08011b65 	.word	0x08011b65
 8011bbc:	08011d09 	.word	0x08011d09
 8011bc0:	08011b65 	.word	0x08011b65
 8011bc4:	08011c13 	.word	0x08011c13
 8011bc8:	08011b65 	.word	0x08011b65
 8011bcc:	08011b65 	.word	0x08011b65
 8011bd0:	08011ca9 	.word	0x08011ca9
 8011bd4:	6833      	ldr	r3, [r6, #0]
 8011bd6:	1d1a      	adds	r2, r3, #4
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	6032      	str	r2, [r6, #0]
 8011bdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011be0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011be4:	2301      	movs	r3, #1
 8011be6:	e09c      	b.n	8011d22 <_printf_i+0x1e6>
 8011be8:	6833      	ldr	r3, [r6, #0]
 8011bea:	6820      	ldr	r0, [r4, #0]
 8011bec:	1d19      	adds	r1, r3, #4
 8011bee:	6031      	str	r1, [r6, #0]
 8011bf0:	0606      	lsls	r6, r0, #24
 8011bf2:	d501      	bpl.n	8011bf8 <_printf_i+0xbc>
 8011bf4:	681d      	ldr	r5, [r3, #0]
 8011bf6:	e003      	b.n	8011c00 <_printf_i+0xc4>
 8011bf8:	0645      	lsls	r5, r0, #25
 8011bfa:	d5fb      	bpl.n	8011bf4 <_printf_i+0xb8>
 8011bfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011c00:	2d00      	cmp	r5, #0
 8011c02:	da03      	bge.n	8011c0c <_printf_i+0xd0>
 8011c04:	232d      	movs	r3, #45	@ 0x2d
 8011c06:	426d      	negs	r5, r5
 8011c08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011c0c:	4858      	ldr	r0, [pc, #352]	@ (8011d70 <_printf_i+0x234>)
 8011c0e:	230a      	movs	r3, #10
 8011c10:	e011      	b.n	8011c36 <_printf_i+0xfa>
 8011c12:	6821      	ldr	r1, [r4, #0]
 8011c14:	6833      	ldr	r3, [r6, #0]
 8011c16:	0608      	lsls	r0, r1, #24
 8011c18:	f853 5b04 	ldr.w	r5, [r3], #4
 8011c1c:	d402      	bmi.n	8011c24 <_printf_i+0xe8>
 8011c1e:	0649      	lsls	r1, r1, #25
 8011c20:	bf48      	it	mi
 8011c22:	b2ad      	uxthmi	r5, r5
 8011c24:	2f6f      	cmp	r7, #111	@ 0x6f
 8011c26:	4852      	ldr	r0, [pc, #328]	@ (8011d70 <_printf_i+0x234>)
 8011c28:	6033      	str	r3, [r6, #0]
 8011c2a:	bf14      	ite	ne
 8011c2c:	230a      	movne	r3, #10
 8011c2e:	2308      	moveq	r3, #8
 8011c30:	2100      	movs	r1, #0
 8011c32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011c36:	6866      	ldr	r6, [r4, #4]
 8011c38:	60a6      	str	r6, [r4, #8]
 8011c3a:	2e00      	cmp	r6, #0
 8011c3c:	db05      	blt.n	8011c4a <_printf_i+0x10e>
 8011c3e:	6821      	ldr	r1, [r4, #0]
 8011c40:	432e      	orrs	r6, r5
 8011c42:	f021 0104 	bic.w	r1, r1, #4
 8011c46:	6021      	str	r1, [r4, #0]
 8011c48:	d04b      	beq.n	8011ce2 <_printf_i+0x1a6>
 8011c4a:	4616      	mov	r6, r2
 8011c4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8011c50:	fb03 5711 	mls	r7, r3, r1, r5
 8011c54:	5dc7      	ldrb	r7, [r0, r7]
 8011c56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011c5a:	462f      	mov	r7, r5
 8011c5c:	42bb      	cmp	r3, r7
 8011c5e:	460d      	mov	r5, r1
 8011c60:	d9f4      	bls.n	8011c4c <_printf_i+0x110>
 8011c62:	2b08      	cmp	r3, #8
 8011c64:	d10b      	bne.n	8011c7e <_printf_i+0x142>
 8011c66:	6823      	ldr	r3, [r4, #0]
 8011c68:	07df      	lsls	r7, r3, #31
 8011c6a:	d508      	bpl.n	8011c7e <_printf_i+0x142>
 8011c6c:	6923      	ldr	r3, [r4, #16]
 8011c6e:	6861      	ldr	r1, [r4, #4]
 8011c70:	4299      	cmp	r1, r3
 8011c72:	bfde      	ittt	le
 8011c74:	2330      	movle	r3, #48	@ 0x30
 8011c76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011c7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011c7e:	1b92      	subs	r2, r2, r6
 8011c80:	6122      	str	r2, [r4, #16]
 8011c82:	f8cd a000 	str.w	sl, [sp]
 8011c86:	464b      	mov	r3, r9
 8011c88:	aa03      	add	r2, sp, #12
 8011c8a:	4621      	mov	r1, r4
 8011c8c:	4640      	mov	r0, r8
 8011c8e:	f7ff fee7 	bl	8011a60 <_printf_common>
 8011c92:	3001      	adds	r0, #1
 8011c94:	d14a      	bne.n	8011d2c <_printf_i+0x1f0>
 8011c96:	f04f 30ff 	mov.w	r0, #4294967295
 8011c9a:	b004      	add	sp, #16
 8011c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ca0:	6823      	ldr	r3, [r4, #0]
 8011ca2:	f043 0320 	orr.w	r3, r3, #32
 8011ca6:	6023      	str	r3, [r4, #0]
 8011ca8:	4832      	ldr	r0, [pc, #200]	@ (8011d74 <_printf_i+0x238>)
 8011caa:	2778      	movs	r7, #120	@ 0x78
 8011cac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011cb0:	6823      	ldr	r3, [r4, #0]
 8011cb2:	6831      	ldr	r1, [r6, #0]
 8011cb4:	061f      	lsls	r7, r3, #24
 8011cb6:	f851 5b04 	ldr.w	r5, [r1], #4
 8011cba:	d402      	bmi.n	8011cc2 <_printf_i+0x186>
 8011cbc:	065f      	lsls	r7, r3, #25
 8011cbe:	bf48      	it	mi
 8011cc0:	b2ad      	uxthmi	r5, r5
 8011cc2:	6031      	str	r1, [r6, #0]
 8011cc4:	07d9      	lsls	r1, r3, #31
 8011cc6:	bf44      	itt	mi
 8011cc8:	f043 0320 	orrmi.w	r3, r3, #32
 8011ccc:	6023      	strmi	r3, [r4, #0]
 8011cce:	b11d      	cbz	r5, 8011cd8 <_printf_i+0x19c>
 8011cd0:	2310      	movs	r3, #16
 8011cd2:	e7ad      	b.n	8011c30 <_printf_i+0xf4>
 8011cd4:	4826      	ldr	r0, [pc, #152]	@ (8011d70 <_printf_i+0x234>)
 8011cd6:	e7e9      	b.n	8011cac <_printf_i+0x170>
 8011cd8:	6823      	ldr	r3, [r4, #0]
 8011cda:	f023 0320 	bic.w	r3, r3, #32
 8011cde:	6023      	str	r3, [r4, #0]
 8011ce0:	e7f6      	b.n	8011cd0 <_printf_i+0x194>
 8011ce2:	4616      	mov	r6, r2
 8011ce4:	e7bd      	b.n	8011c62 <_printf_i+0x126>
 8011ce6:	6833      	ldr	r3, [r6, #0]
 8011ce8:	6825      	ldr	r5, [r4, #0]
 8011cea:	6961      	ldr	r1, [r4, #20]
 8011cec:	1d18      	adds	r0, r3, #4
 8011cee:	6030      	str	r0, [r6, #0]
 8011cf0:	062e      	lsls	r6, r5, #24
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	d501      	bpl.n	8011cfa <_printf_i+0x1be>
 8011cf6:	6019      	str	r1, [r3, #0]
 8011cf8:	e002      	b.n	8011d00 <_printf_i+0x1c4>
 8011cfa:	0668      	lsls	r0, r5, #25
 8011cfc:	d5fb      	bpl.n	8011cf6 <_printf_i+0x1ba>
 8011cfe:	8019      	strh	r1, [r3, #0]
 8011d00:	2300      	movs	r3, #0
 8011d02:	6123      	str	r3, [r4, #16]
 8011d04:	4616      	mov	r6, r2
 8011d06:	e7bc      	b.n	8011c82 <_printf_i+0x146>
 8011d08:	6833      	ldr	r3, [r6, #0]
 8011d0a:	1d1a      	adds	r2, r3, #4
 8011d0c:	6032      	str	r2, [r6, #0]
 8011d0e:	681e      	ldr	r6, [r3, #0]
 8011d10:	6862      	ldr	r2, [r4, #4]
 8011d12:	2100      	movs	r1, #0
 8011d14:	4630      	mov	r0, r6
 8011d16:	f7ee fa5b 	bl	80001d0 <memchr>
 8011d1a:	b108      	cbz	r0, 8011d20 <_printf_i+0x1e4>
 8011d1c:	1b80      	subs	r0, r0, r6
 8011d1e:	6060      	str	r0, [r4, #4]
 8011d20:	6863      	ldr	r3, [r4, #4]
 8011d22:	6123      	str	r3, [r4, #16]
 8011d24:	2300      	movs	r3, #0
 8011d26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d2a:	e7aa      	b.n	8011c82 <_printf_i+0x146>
 8011d2c:	6923      	ldr	r3, [r4, #16]
 8011d2e:	4632      	mov	r2, r6
 8011d30:	4649      	mov	r1, r9
 8011d32:	4640      	mov	r0, r8
 8011d34:	47d0      	blx	sl
 8011d36:	3001      	adds	r0, #1
 8011d38:	d0ad      	beq.n	8011c96 <_printf_i+0x15a>
 8011d3a:	6823      	ldr	r3, [r4, #0]
 8011d3c:	079b      	lsls	r3, r3, #30
 8011d3e:	d413      	bmi.n	8011d68 <_printf_i+0x22c>
 8011d40:	68e0      	ldr	r0, [r4, #12]
 8011d42:	9b03      	ldr	r3, [sp, #12]
 8011d44:	4298      	cmp	r0, r3
 8011d46:	bfb8      	it	lt
 8011d48:	4618      	movlt	r0, r3
 8011d4a:	e7a6      	b.n	8011c9a <_printf_i+0x15e>
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	4632      	mov	r2, r6
 8011d50:	4649      	mov	r1, r9
 8011d52:	4640      	mov	r0, r8
 8011d54:	47d0      	blx	sl
 8011d56:	3001      	adds	r0, #1
 8011d58:	d09d      	beq.n	8011c96 <_printf_i+0x15a>
 8011d5a:	3501      	adds	r5, #1
 8011d5c:	68e3      	ldr	r3, [r4, #12]
 8011d5e:	9903      	ldr	r1, [sp, #12]
 8011d60:	1a5b      	subs	r3, r3, r1
 8011d62:	42ab      	cmp	r3, r5
 8011d64:	dcf2      	bgt.n	8011d4c <_printf_i+0x210>
 8011d66:	e7eb      	b.n	8011d40 <_printf_i+0x204>
 8011d68:	2500      	movs	r5, #0
 8011d6a:	f104 0619 	add.w	r6, r4, #25
 8011d6e:	e7f5      	b.n	8011d5c <_printf_i+0x220>
 8011d70:	08014e3e 	.word	0x08014e3e
 8011d74:	08014e4f 	.word	0x08014e4f

08011d78 <__sflush_r>:
 8011d78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d80:	0716      	lsls	r6, r2, #28
 8011d82:	4605      	mov	r5, r0
 8011d84:	460c      	mov	r4, r1
 8011d86:	d454      	bmi.n	8011e32 <__sflush_r+0xba>
 8011d88:	684b      	ldr	r3, [r1, #4]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	dc02      	bgt.n	8011d94 <__sflush_r+0x1c>
 8011d8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	dd48      	ble.n	8011e26 <__sflush_r+0xae>
 8011d94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011d96:	2e00      	cmp	r6, #0
 8011d98:	d045      	beq.n	8011e26 <__sflush_r+0xae>
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011da0:	682f      	ldr	r7, [r5, #0]
 8011da2:	6a21      	ldr	r1, [r4, #32]
 8011da4:	602b      	str	r3, [r5, #0]
 8011da6:	d030      	beq.n	8011e0a <__sflush_r+0x92>
 8011da8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011daa:	89a3      	ldrh	r3, [r4, #12]
 8011dac:	0759      	lsls	r1, r3, #29
 8011dae:	d505      	bpl.n	8011dbc <__sflush_r+0x44>
 8011db0:	6863      	ldr	r3, [r4, #4]
 8011db2:	1ad2      	subs	r2, r2, r3
 8011db4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011db6:	b10b      	cbz	r3, 8011dbc <__sflush_r+0x44>
 8011db8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011dba:	1ad2      	subs	r2, r2, r3
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011dc0:	6a21      	ldr	r1, [r4, #32]
 8011dc2:	4628      	mov	r0, r5
 8011dc4:	47b0      	blx	r6
 8011dc6:	1c43      	adds	r3, r0, #1
 8011dc8:	89a3      	ldrh	r3, [r4, #12]
 8011dca:	d106      	bne.n	8011dda <__sflush_r+0x62>
 8011dcc:	6829      	ldr	r1, [r5, #0]
 8011dce:	291d      	cmp	r1, #29
 8011dd0:	d82b      	bhi.n	8011e2a <__sflush_r+0xb2>
 8011dd2:	4a2a      	ldr	r2, [pc, #168]	@ (8011e7c <__sflush_r+0x104>)
 8011dd4:	40ca      	lsrs	r2, r1
 8011dd6:	07d6      	lsls	r6, r2, #31
 8011dd8:	d527      	bpl.n	8011e2a <__sflush_r+0xb2>
 8011dda:	2200      	movs	r2, #0
 8011ddc:	6062      	str	r2, [r4, #4]
 8011dde:	04d9      	lsls	r1, r3, #19
 8011de0:	6922      	ldr	r2, [r4, #16]
 8011de2:	6022      	str	r2, [r4, #0]
 8011de4:	d504      	bpl.n	8011df0 <__sflush_r+0x78>
 8011de6:	1c42      	adds	r2, r0, #1
 8011de8:	d101      	bne.n	8011dee <__sflush_r+0x76>
 8011dea:	682b      	ldr	r3, [r5, #0]
 8011dec:	b903      	cbnz	r3, 8011df0 <__sflush_r+0x78>
 8011dee:	6560      	str	r0, [r4, #84]	@ 0x54
 8011df0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011df2:	602f      	str	r7, [r5, #0]
 8011df4:	b1b9      	cbz	r1, 8011e26 <__sflush_r+0xae>
 8011df6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011dfa:	4299      	cmp	r1, r3
 8011dfc:	d002      	beq.n	8011e04 <__sflush_r+0x8c>
 8011dfe:	4628      	mov	r0, r5
 8011e00:	f7ff fa94 	bl	801132c <_free_r>
 8011e04:	2300      	movs	r3, #0
 8011e06:	6363      	str	r3, [r4, #52]	@ 0x34
 8011e08:	e00d      	b.n	8011e26 <__sflush_r+0xae>
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	47b0      	blx	r6
 8011e10:	4602      	mov	r2, r0
 8011e12:	1c50      	adds	r0, r2, #1
 8011e14:	d1c9      	bne.n	8011daa <__sflush_r+0x32>
 8011e16:	682b      	ldr	r3, [r5, #0]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d0c6      	beq.n	8011daa <__sflush_r+0x32>
 8011e1c:	2b1d      	cmp	r3, #29
 8011e1e:	d001      	beq.n	8011e24 <__sflush_r+0xac>
 8011e20:	2b16      	cmp	r3, #22
 8011e22:	d11e      	bne.n	8011e62 <__sflush_r+0xea>
 8011e24:	602f      	str	r7, [r5, #0]
 8011e26:	2000      	movs	r0, #0
 8011e28:	e022      	b.n	8011e70 <__sflush_r+0xf8>
 8011e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e2e:	b21b      	sxth	r3, r3
 8011e30:	e01b      	b.n	8011e6a <__sflush_r+0xf2>
 8011e32:	690f      	ldr	r7, [r1, #16]
 8011e34:	2f00      	cmp	r7, #0
 8011e36:	d0f6      	beq.n	8011e26 <__sflush_r+0xae>
 8011e38:	0793      	lsls	r3, r2, #30
 8011e3a:	680e      	ldr	r6, [r1, #0]
 8011e3c:	bf08      	it	eq
 8011e3e:	694b      	ldreq	r3, [r1, #20]
 8011e40:	600f      	str	r7, [r1, #0]
 8011e42:	bf18      	it	ne
 8011e44:	2300      	movne	r3, #0
 8011e46:	eba6 0807 	sub.w	r8, r6, r7
 8011e4a:	608b      	str	r3, [r1, #8]
 8011e4c:	f1b8 0f00 	cmp.w	r8, #0
 8011e50:	dde9      	ble.n	8011e26 <__sflush_r+0xae>
 8011e52:	6a21      	ldr	r1, [r4, #32]
 8011e54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011e56:	4643      	mov	r3, r8
 8011e58:	463a      	mov	r2, r7
 8011e5a:	4628      	mov	r0, r5
 8011e5c:	47b0      	blx	r6
 8011e5e:	2800      	cmp	r0, #0
 8011e60:	dc08      	bgt.n	8011e74 <__sflush_r+0xfc>
 8011e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e6a:	81a3      	strh	r3, [r4, #12]
 8011e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e74:	4407      	add	r7, r0
 8011e76:	eba8 0800 	sub.w	r8, r8, r0
 8011e7a:	e7e7      	b.n	8011e4c <__sflush_r+0xd4>
 8011e7c:	20400001 	.word	0x20400001

08011e80 <_fflush_r>:
 8011e80:	b538      	push	{r3, r4, r5, lr}
 8011e82:	690b      	ldr	r3, [r1, #16]
 8011e84:	4605      	mov	r5, r0
 8011e86:	460c      	mov	r4, r1
 8011e88:	b913      	cbnz	r3, 8011e90 <_fflush_r+0x10>
 8011e8a:	2500      	movs	r5, #0
 8011e8c:	4628      	mov	r0, r5
 8011e8e:	bd38      	pop	{r3, r4, r5, pc}
 8011e90:	b118      	cbz	r0, 8011e9a <_fflush_r+0x1a>
 8011e92:	6a03      	ldr	r3, [r0, #32]
 8011e94:	b90b      	cbnz	r3, 8011e9a <_fflush_r+0x1a>
 8011e96:	f7ff f8bd 	bl	8011014 <__sinit>
 8011e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d0f3      	beq.n	8011e8a <_fflush_r+0xa>
 8011ea2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011ea4:	07d0      	lsls	r0, r2, #31
 8011ea6:	d404      	bmi.n	8011eb2 <_fflush_r+0x32>
 8011ea8:	0599      	lsls	r1, r3, #22
 8011eaa:	d402      	bmi.n	8011eb2 <_fflush_r+0x32>
 8011eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011eae:	f7ff fa0e 	bl	80112ce <__retarget_lock_acquire_recursive>
 8011eb2:	4628      	mov	r0, r5
 8011eb4:	4621      	mov	r1, r4
 8011eb6:	f7ff ff5f 	bl	8011d78 <__sflush_r>
 8011eba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ebc:	07da      	lsls	r2, r3, #31
 8011ebe:	4605      	mov	r5, r0
 8011ec0:	d4e4      	bmi.n	8011e8c <_fflush_r+0xc>
 8011ec2:	89a3      	ldrh	r3, [r4, #12]
 8011ec4:	059b      	lsls	r3, r3, #22
 8011ec6:	d4e1      	bmi.n	8011e8c <_fflush_r+0xc>
 8011ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011eca:	f7ff fa01 	bl	80112d0 <__retarget_lock_release_recursive>
 8011ece:	e7dd      	b.n	8011e8c <_fflush_r+0xc>

08011ed0 <fiprintf>:
 8011ed0:	b40e      	push	{r1, r2, r3}
 8011ed2:	b503      	push	{r0, r1, lr}
 8011ed4:	4601      	mov	r1, r0
 8011ed6:	ab03      	add	r3, sp, #12
 8011ed8:	4805      	ldr	r0, [pc, #20]	@ (8011ef0 <fiprintf+0x20>)
 8011eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ede:	6800      	ldr	r0, [r0, #0]
 8011ee0:	9301      	str	r3, [sp, #4]
 8011ee2:	f7ff fca5 	bl	8011830 <_vfiprintf_r>
 8011ee6:	b002      	add	sp, #8
 8011ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011eec:	b003      	add	sp, #12
 8011eee:	4770      	bx	lr
 8011ef0:	20000038 	.word	0x20000038

08011ef4 <__swbuf_r>:
 8011ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ef6:	460e      	mov	r6, r1
 8011ef8:	4614      	mov	r4, r2
 8011efa:	4605      	mov	r5, r0
 8011efc:	b118      	cbz	r0, 8011f06 <__swbuf_r+0x12>
 8011efe:	6a03      	ldr	r3, [r0, #32]
 8011f00:	b90b      	cbnz	r3, 8011f06 <__swbuf_r+0x12>
 8011f02:	f7ff f887 	bl	8011014 <__sinit>
 8011f06:	69a3      	ldr	r3, [r4, #24]
 8011f08:	60a3      	str	r3, [r4, #8]
 8011f0a:	89a3      	ldrh	r3, [r4, #12]
 8011f0c:	071a      	lsls	r2, r3, #28
 8011f0e:	d501      	bpl.n	8011f14 <__swbuf_r+0x20>
 8011f10:	6923      	ldr	r3, [r4, #16]
 8011f12:	b943      	cbnz	r3, 8011f26 <__swbuf_r+0x32>
 8011f14:	4621      	mov	r1, r4
 8011f16:	4628      	mov	r0, r5
 8011f18:	f000 f82a 	bl	8011f70 <__swsetup_r>
 8011f1c:	b118      	cbz	r0, 8011f26 <__swbuf_r+0x32>
 8011f1e:	f04f 37ff 	mov.w	r7, #4294967295
 8011f22:	4638      	mov	r0, r7
 8011f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f26:	6823      	ldr	r3, [r4, #0]
 8011f28:	6922      	ldr	r2, [r4, #16]
 8011f2a:	1a98      	subs	r0, r3, r2
 8011f2c:	6963      	ldr	r3, [r4, #20]
 8011f2e:	b2f6      	uxtb	r6, r6
 8011f30:	4283      	cmp	r3, r0
 8011f32:	4637      	mov	r7, r6
 8011f34:	dc05      	bgt.n	8011f42 <__swbuf_r+0x4e>
 8011f36:	4621      	mov	r1, r4
 8011f38:	4628      	mov	r0, r5
 8011f3a:	f7ff ffa1 	bl	8011e80 <_fflush_r>
 8011f3e:	2800      	cmp	r0, #0
 8011f40:	d1ed      	bne.n	8011f1e <__swbuf_r+0x2a>
 8011f42:	68a3      	ldr	r3, [r4, #8]
 8011f44:	3b01      	subs	r3, #1
 8011f46:	60a3      	str	r3, [r4, #8]
 8011f48:	6823      	ldr	r3, [r4, #0]
 8011f4a:	1c5a      	adds	r2, r3, #1
 8011f4c:	6022      	str	r2, [r4, #0]
 8011f4e:	701e      	strb	r6, [r3, #0]
 8011f50:	6962      	ldr	r2, [r4, #20]
 8011f52:	1c43      	adds	r3, r0, #1
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d004      	beq.n	8011f62 <__swbuf_r+0x6e>
 8011f58:	89a3      	ldrh	r3, [r4, #12]
 8011f5a:	07db      	lsls	r3, r3, #31
 8011f5c:	d5e1      	bpl.n	8011f22 <__swbuf_r+0x2e>
 8011f5e:	2e0a      	cmp	r6, #10
 8011f60:	d1df      	bne.n	8011f22 <__swbuf_r+0x2e>
 8011f62:	4621      	mov	r1, r4
 8011f64:	4628      	mov	r0, r5
 8011f66:	f7ff ff8b 	bl	8011e80 <_fflush_r>
 8011f6a:	2800      	cmp	r0, #0
 8011f6c:	d0d9      	beq.n	8011f22 <__swbuf_r+0x2e>
 8011f6e:	e7d6      	b.n	8011f1e <__swbuf_r+0x2a>

08011f70 <__swsetup_r>:
 8011f70:	b538      	push	{r3, r4, r5, lr}
 8011f72:	4b29      	ldr	r3, [pc, #164]	@ (8012018 <__swsetup_r+0xa8>)
 8011f74:	4605      	mov	r5, r0
 8011f76:	6818      	ldr	r0, [r3, #0]
 8011f78:	460c      	mov	r4, r1
 8011f7a:	b118      	cbz	r0, 8011f84 <__swsetup_r+0x14>
 8011f7c:	6a03      	ldr	r3, [r0, #32]
 8011f7e:	b90b      	cbnz	r3, 8011f84 <__swsetup_r+0x14>
 8011f80:	f7ff f848 	bl	8011014 <__sinit>
 8011f84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f88:	0719      	lsls	r1, r3, #28
 8011f8a:	d422      	bmi.n	8011fd2 <__swsetup_r+0x62>
 8011f8c:	06da      	lsls	r2, r3, #27
 8011f8e:	d407      	bmi.n	8011fa0 <__swsetup_r+0x30>
 8011f90:	2209      	movs	r2, #9
 8011f92:	602a      	str	r2, [r5, #0]
 8011f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f98:	81a3      	strh	r3, [r4, #12]
 8011f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f9e:	e033      	b.n	8012008 <__swsetup_r+0x98>
 8011fa0:	0758      	lsls	r0, r3, #29
 8011fa2:	d512      	bpl.n	8011fca <__swsetup_r+0x5a>
 8011fa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011fa6:	b141      	cbz	r1, 8011fba <__swsetup_r+0x4a>
 8011fa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011fac:	4299      	cmp	r1, r3
 8011fae:	d002      	beq.n	8011fb6 <__swsetup_r+0x46>
 8011fb0:	4628      	mov	r0, r5
 8011fb2:	f7ff f9bb 	bl	801132c <_free_r>
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8011fba:	89a3      	ldrh	r3, [r4, #12]
 8011fbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011fc0:	81a3      	strh	r3, [r4, #12]
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	6063      	str	r3, [r4, #4]
 8011fc6:	6923      	ldr	r3, [r4, #16]
 8011fc8:	6023      	str	r3, [r4, #0]
 8011fca:	89a3      	ldrh	r3, [r4, #12]
 8011fcc:	f043 0308 	orr.w	r3, r3, #8
 8011fd0:	81a3      	strh	r3, [r4, #12]
 8011fd2:	6923      	ldr	r3, [r4, #16]
 8011fd4:	b94b      	cbnz	r3, 8011fea <__swsetup_r+0x7a>
 8011fd6:	89a3      	ldrh	r3, [r4, #12]
 8011fd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011fe0:	d003      	beq.n	8011fea <__swsetup_r+0x7a>
 8011fe2:	4621      	mov	r1, r4
 8011fe4:	4628      	mov	r0, r5
 8011fe6:	f000 f884 	bl	80120f2 <__smakebuf_r>
 8011fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fee:	f013 0201 	ands.w	r2, r3, #1
 8011ff2:	d00a      	beq.n	801200a <__swsetup_r+0x9a>
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	60a2      	str	r2, [r4, #8]
 8011ff8:	6962      	ldr	r2, [r4, #20]
 8011ffa:	4252      	negs	r2, r2
 8011ffc:	61a2      	str	r2, [r4, #24]
 8011ffe:	6922      	ldr	r2, [r4, #16]
 8012000:	b942      	cbnz	r2, 8012014 <__swsetup_r+0xa4>
 8012002:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012006:	d1c5      	bne.n	8011f94 <__swsetup_r+0x24>
 8012008:	bd38      	pop	{r3, r4, r5, pc}
 801200a:	0799      	lsls	r1, r3, #30
 801200c:	bf58      	it	pl
 801200e:	6962      	ldrpl	r2, [r4, #20]
 8012010:	60a2      	str	r2, [r4, #8]
 8012012:	e7f4      	b.n	8011ffe <__swsetup_r+0x8e>
 8012014:	2000      	movs	r0, #0
 8012016:	e7f7      	b.n	8012008 <__swsetup_r+0x98>
 8012018:	20000038 	.word	0x20000038

0801201c <_sbrk_r>:
 801201c:	b538      	push	{r3, r4, r5, lr}
 801201e:	4d06      	ldr	r5, [pc, #24]	@ (8012038 <_sbrk_r+0x1c>)
 8012020:	2300      	movs	r3, #0
 8012022:	4604      	mov	r4, r0
 8012024:	4608      	mov	r0, r1
 8012026:	602b      	str	r3, [r5, #0]
 8012028:	f7ef fc6a 	bl	8001900 <_sbrk>
 801202c:	1c43      	adds	r3, r0, #1
 801202e:	d102      	bne.n	8012036 <_sbrk_r+0x1a>
 8012030:	682b      	ldr	r3, [r5, #0]
 8012032:	b103      	cbz	r3, 8012036 <_sbrk_r+0x1a>
 8012034:	6023      	str	r3, [r4, #0]
 8012036:	bd38      	pop	{r3, r4, r5, pc}
 8012038:	20008a9c 	.word	0x20008a9c

0801203c <abort>:
 801203c:	b508      	push	{r3, lr}
 801203e:	2006      	movs	r0, #6
 8012040:	f000 f8bc 	bl	80121bc <raise>
 8012044:	2001      	movs	r0, #1
 8012046:	f7ef fbe3 	bl	8001810 <_exit>

0801204a <_realloc_r>:
 801204a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801204e:	4607      	mov	r7, r0
 8012050:	4614      	mov	r4, r2
 8012052:	460d      	mov	r5, r1
 8012054:	b921      	cbnz	r1, 8012060 <_realloc_r+0x16>
 8012056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801205a:	4611      	mov	r1, r2
 801205c:	f7ff b9da 	b.w	8011414 <_malloc_r>
 8012060:	b92a      	cbnz	r2, 801206e <_realloc_r+0x24>
 8012062:	f7ff f963 	bl	801132c <_free_r>
 8012066:	4625      	mov	r5, r4
 8012068:	4628      	mov	r0, r5
 801206a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801206e:	f000 f8e3 	bl	8012238 <_malloc_usable_size_r>
 8012072:	4284      	cmp	r4, r0
 8012074:	4606      	mov	r6, r0
 8012076:	d802      	bhi.n	801207e <_realloc_r+0x34>
 8012078:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801207c:	d8f4      	bhi.n	8012068 <_realloc_r+0x1e>
 801207e:	4621      	mov	r1, r4
 8012080:	4638      	mov	r0, r7
 8012082:	f7ff f9c7 	bl	8011414 <_malloc_r>
 8012086:	4680      	mov	r8, r0
 8012088:	b908      	cbnz	r0, 801208e <_realloc_r+0x44>
 801208a:	4645      	mov	r5, r8
 801208c:	e7ec      	b.n	8012068 <_realloc_r+0x1e>
 801208e:	42b4      	cmp	r4, r6
 8012090:	4622      	mov	r2, r4
 8012092:	4629      	mov	r1, r5
 8012094:	bf28      	it	cs
 8012096:	4632      	movcs	r2, r6
 8012098:	f7ff f91b 	bl	80112d2 <memcpy>
 801209c:	4629      	mov	r1, r5
 801209e:	4638      	mov	r0, r7
 80120a0:	f7ff f944 	bl	801132c <_free_r>
 80120a4:	e7f1      	b.n	801208a <_realloc_r+0x40>

080120a6 <__swhatbuf_r>:
 80120a6:	b570      	push	{r4, r5, r6, lr}
 80120a8:	460c      	mov	r4, r1
 80120aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120ae:	2900      	cmp	r1, #0
 80120b0:	b096      	sub	sp, #88	@ 0x58
 80120b2:	4615      	mov	r5, r2
 80120b4:	461e      	mov	r6, r3
 80120b6:	da0d      	bge.n	80120d4 <__swhatbuf_r+0x2e>
 80120b8:	89a3      	ldrh	r3, [r4, #12]
 80120ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80120be:	f04f 0100 	mov.w	r1, #0
 80120c2:	bf14      	ite	ne
 80120c4:	2340      	movne	r3, #64	@ 0x40
 80120c6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80120ca:	2000      	movs	r0, #0
 80120cc:	6031      	str	r1, [r6, #0]
 80120ce:	602b      	str	r3, [r5, #0]
 80120d0:	b016      	add	sp, #88	@ 0x58
 80120d2:	bd70      	pop	{r4, r5, r6, pc}
 80120d4:	466a      	mov	r2, sp
 80120d6:	f000 f879 	bl	80121cc <_fstat_r>
 80120da:	2800      	cmp	r0, #0
 80120dc:	dbec      	blt.n	80120b8 <__swhatbuf_r+0x12>
 80120de:	9901      	ldr	r1, [sp, #4]
 80120e0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80120e4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80120e8:	4259      	negs	r1, r3
 80120ea:	4159      	adcs	r1, r3
 80120ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80120f0:	e7eb      	b.n	80120ca <__swhatbuf_r+0x24>

080120f2 <__smakebuf_r>:
 80120f2:	898b      	ldrh	r3, [r1, #12]
 80120f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120f6:	079d      	lsls	r5, r3, #30
 80120f8:	4606      	mov	r6, r0
 80120fa:	460c      	mov	r4, r1
 80120fc:	d507      	bpl.n	801210e <__smakebuf_r+0x1c>
 80120fe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012102:	6023      	str	r3, [r4, #0]
 8012104:	6123      	str	r3, [r4, #16]
 8012106:	2301      	movs	r3, #1
 8012108:	6163      	str	r3, [r4, #20]
 801210a:	b003      	add	sp, #12
 801210c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801210e:	ab01      	add	r3, sp, #4
 8012110:	466a      	mov	r2, sp
 8012112:	f7ff ffc8 	bl	80120a6 <__swhatbuf_r>
 8012116:	9f00      	ldr	r7, [sp, #0]
 8012118:	4605      	mov	r5, r0
 801211a:	4639      	mov	r1, r7
 801211c:	4630      	mov	r0, r6
 801211e:	f7ff f979 	bl	8011414 <_malloc_r>
 8012122:	b948      	cbnz	r0, 8012138 <__smakebuf_r+0x46>
 8012124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012128:	059a      	lsls	r2, r3, #22
 801212a:	d4ee      	bmi.n	801210a <__smakebuf_r+0x18>
 801212c:	f023 0303 	bic.w	r3, r3, #3
 8012130:	f043 0302 	orr.w	r3, r3, #2
 8012134:	81a3      	strh	r3, [r4, #12]
 8012136:	e7e2      	b.n	80120fe <__smakebuf_r+0xc>
 8012138:	89a3      	ldrh	r3, [r4, #12]
 801213a:	6020      	str	r0, [r4, #0]
 801213c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012140:	81a3      	strh	r3, [r4, #12]
 8012142:	9b01      	ldr	r3, [sp, #4]
 8012144:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012148:	b15b      	cbz	r3, 8012162 <__smakebuf_r+0x70>
 801214a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801214e:	4630      	mov	r0, r6
 8012150:	f000 f84e 	bl	80121f0 <_isatty_r>
 8012154:	b128      	cbz	r0, 8012162 <__smakebuf_r+0x70>
 8012156:	89a3      	ldrh	r3, [r4, #12]
 8012158:	f023 0303 	bic.w	r3, r3, #3
 801215c:	f043 0301 	orr.w	r3, r3, #1
 8012160:	81a3      	strh	r3, [r4, #12]
 8012162:	89a3      	ldrh	r3, [r4, #12]
 8012164:	431d      	orrs	r5, r3
 8012166:	81a5      	strh	r5, [r4, #12]
 8012168:	e7cf      	b.n	801210a <__smakebuf_r+0x18>

0801216a <_raise_r>:
 801216a:	291f      	cmp	r1, #31
 801216c:	b538      	push	{r3, r4, r5, lr}
 801216e:	4605      	mov	r5, r0
 8012170:	460c      	mov	r4, r1
 8012172:	d904      	bls.n	801217e <_raise_r+0x14>
 8012174:	2316      	movs	r3, #22
 8012176:	6003      	str	r3, [r0, #0]
 8012178:	f04f 30ff 	mov.w	r0, #4294967295
 801217c:	bd38      	pop	{r3, r4, r5, pc}
 801217e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012180:	b112      	cbz	r2, 8012188 <_raise_r+0x1e>
 8012182:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012186:	b94b      	cbnz	r3, 801219c <_raise_r+0x32>
 8012188:	4628      	mov	r0, r5
 801218a:	f000 f853 	bl	8012234 <_getpid_r>
 801218e:	4622      	mov	r2, r4
 8012190:	4601      	mov	r1, r0
 8012192:	4628      	mov	r0, r5
 8012194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012198:	f000 b83a 	b.w	8012210 <_kill_r>
 801219c:	2b01      	cmp	r3, #1
 801219e:	d00a      	beq.n	80121b6 <_raise_r+0x4c>
 80121a0:	1c59      	adds	r1, r3, #1
 80121a2:	d103      	bne.n	80121ac <_raise_r+0x42>
 80121a4:	2316      	movs	r3, #22
 80121a6:	6003      	str	r3, [r0, #0]
 80121a8:	2001      	movs	r0, #1
 80121aa:	e7e7      	b.n	801217c <_raise_r+0x12>
 80121ac:	2100      	movs	r1, #0
 80121ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80121b2:	4620      	mov	r0, r4
 80121b4:	4798      	blx	r3
 80121b6:	2000      	movs	r0, #0
 80121b8:	e7e0      	b.n	801217c <_raise_r+0x12>
	...

080121bc <raise>:
 80121bc:	4b02      	ldr	r3, [pc, #8]	@ (80121c8 <raise+0xc>)
 80121be:	4601      	mov	r1, r0
 80121c0:	6818      	ldr	r0, [r3, #0]
 80121c2:	f7ff bfd2 	b.w	801216a <_raise_r>
 80121c6:	bf00      	nop
 80121c8:	20000038 	.word	0x20000038

080121cc <_fstat_r>:
 80121cc:	b538      	push	{r3, r4, r5, lr}
 80121ce:	4d07      	ldr	r5, [pc, #28]	@ (80121ec <_fstat_r+0x20>)
 80121d0:	2300      	movs	r3, #0
 80121d2:	4604      	mov	r4, r0
 80121d4:	4608      	mov	r0, r1
 80121d6:	4611      	mov	r1, r2
 80121d8:	602b      	str	r3, [r5, #0]
 80121da:	f7ef fb69 	bl	80018b0 <_fstat>
 80121de:	1c43      	adds	r3, r0, #1
 80121e0:	d102      	bne.n	80121e8 <_fstat_r+0x1c>
 80121e2:	682b      	ldr	r3, [r5, #0]
 80121e4:	b103      	cbz	r3, 80121e8 <_fstat_r+0x1c>
 80121e6:	6023      	str	r3, [r4, #0]
 80121e8:	bd38      	pop	{r3, r4, r5, pc}
 80121ea:	bf00      	nop
 80121ec:	20008a9c 	.word	0x20008a9c

080121f0 <_isatty_r>:
 80121f0:	b538      	push	{r3, r4, r5, lr}
 80121f2:	4d06      	ldr	r5, [pc, #24]	@ (801220c <_isatty_r+0x1c>)
 80121f4:	2300      	movs	r3, #0
 80121f6:	4604      	mov	r4, r0
 80121f8:	4608      	mov	r0, r1
 80121fa:	602b      	str	r3, [r5, #0]
 80121fc:	f7ef fb68 	bl	80018d0 <_isatty>
 8012200:	1c43      	adds	r3, r0, #1
 8012202:	d102      	bne.n	801220a <_isatty_r+0x1a>
 8012204:	682b      	ldr	r3, [r5, #0]
 8012206:	b103      	cbz	r3, 801220a <_isatty_r+0x1a>
 8012208:	6023      	str	r3, [r4, #0]
 801220a:	bd38      	pop	{r3, r4, r5, pc}
 801220c:	20008a9c 	.word	0x20008a9c

08012210 <_kill_r>:
 8012210:	b538      	push	{r3, r4, r5, lr}
 8012212:	4d07      	ldr	r5, [pc, #28]	@ (8012230 <_kill_r+0x20>)
 8012214:	2300      	movs	r3, #0
 8012216:	4604      	mov	r4, r0
 8012218:	4608      	mov	r0, r1
 801221a:	4611      	mov	r1, r2
 801221c:	602b      	str	r3, [r5, #0]
 801221e:	f7ef fae5 	bl	80017ec <_kill>
 8012222:	1c43      	adds	r3, r0, #1
 8012224:	d102      	bne.n	801222c <_kill_r+0x1c>
 8012226:	682b      	ldr	r3, [r5, #0]
 8012228:	b103      	cbz	r3, 801222c <_kill_r+0x1c>
 801222a:	6023      	str	r3, [r4, #0]
 801222c:	bd38      	pop	{r3, r4, r5, pc}
 801222e:	bf00      	nop
 8012230:	20008a9c 	.word	0x20008a9c

08012234 <_getpid_r>:
 8012234:	f7ef bad2 	b.w	80017dc <_getpid>

08012238 <_malloc_usable_size_r>:
 8012238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801223c:	1f18      	subs	r0, r3, #4
 801223e:	2b00      	cmp	r3, #0
 8012240:	bfbc      	itt	lt
 8012242:	580b      	ldrlt	r3, [r1, r0]
 8012244:	18c0      	addlt	r0, r0, r3
 8012246:	4770      	bx	lr

08012248 <_init>:
 8012248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801224a:	bf00      	nop
 801224c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801224e:	bc08      	pop	{r3}
 8012250:	469e      	mov	lr, r3
 8012252:	4770      	bx	lr

08012254 <_fini>:
 8012254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012256:	bf00      	nop
 8012258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801225a:	bc08      	pop	{r3}
 801225c:	469e      	mov	lr, r3
 801225e:	4770      	bx	lr
