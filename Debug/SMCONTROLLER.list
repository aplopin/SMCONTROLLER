
SMCONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000143fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e68  08014590  08014590  00015590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080173f8  080173f8  000190fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080173f8  080173f8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017400  08017400  000190fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017400  08017400  00018400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017404  08017404  00018404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08017408  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000190fc  2**0
                  CONTENTS
 10 .bss          00008b70  200000fc  200000fc  000190fc  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20008c6c  20008c6c  000190fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000190fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c91e  00000000  00000000  0001912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006754  00000000  00000000  00045a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002610  00000000  00000000  0004c1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e67  00000000  00000000  0004e7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fbf8  00000000  00000000  00050617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00036f77  00000000  00000000  0006020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc999  00000000  00000000  00097186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00193b1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b20c  00000000  00000000  00193b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0019ed70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000fc 	.word	0x200000fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014574 	.word	0x08014574

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000100 	.word	0x20000100
 80001cc:	08014574 	.word	0x08014574

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b988 	b.w	8000f50 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	468e      	mov	lr, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	4688      	mov	r8, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	d962      	bls.n	8000d34 <__udivmoddi4+0xdc>
 8000c6e:	fab2 f682 	clz	r6, r2
 8000c72:	b14e      	cbz	r6, 8000c88 <__udivmoddi4+0x30>
 8000c74:	f1c6 0320 	rsb	r3, r6, #32
 8000c78:	fa01 f806 	lsl.w	r8, r1, r6
 8000c7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c80:	40b7      	lsls	r7, r6
 8000c82:	ea43 0808 	orr.w	r8, r3, r8
 8000c86:	40b4      	lsls	r4, r6
 8000c88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c8c:	fa1f fc87 	uxth.w	ip, r7
 8000c90:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c94:	0c23      	lsrs	r3, r4, #16
 8000c96:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9e:	fb01 f20c 	mul.w	r2, r1, ip
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cac:	f080 80ea 	bcs.w	8000e84 <__udivmoddi4+0x22c>
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	f240 80e7 	bls.w	8000e84 <__udivmoddi4+0x22c>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	443b      	add	r3, r7
 8000cba:	1a9a      	subs	r2, r3, r2
 8000cbc:	b2a3      	uxth	r3, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cca:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cce:	459c      	cmp	ip, r3
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x8e>
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	f080 80d6 	bcs.w	8000e88 <__udivmoddi4+0x230>
 8000cdc:	459c      	cmp	ip, r3
 8000cde:	f240 80d3 	bls.w	8000e88 <__udivmoddi4+0x230>
 8000ce2:	443b      	add	r3, r7
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cea:	eba3 030c 	sub.w	r3, r3, ip
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11d      	cbz	r5, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40f3      	lsrs	r3, r6
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d905      	bls.n	8000d0e <__udivmoddi4+0xb6>
 8000d02:	b10d      	cbz	r5, 8000d08 <__udivmoddi4+0xb0>
 8000d04:	e9c5 0100 	strd	r0, r1, [r5]
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	e7f5      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d0e:	fab3 f183 	clz	r1, r3
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d146      	bne.n	8000da4 <__udivmoddi4+0x14c>
 8000d16:	4573      	cmp	r3, lr
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xc8>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 8105 	bhi.w	8000f2a <__udivmoddi4+0x2d2>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	4690      	mov	r8, r2
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d0e5      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d2e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	f000 8090 	beq.w	8000e5a <__udivmoddi4+0x202>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	f040 80a4 	bne.w	8000e8c <__udivmoddi4+0x234>
 8000d44:	1a8a      	subs	r2, r1, r2
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	b280      	uxth	r0, r0
 8000d4e:	b2bc      	uxth	r4, r7
 8000d50:	2101      	movs	r1, #1
 8000d52:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d56:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d5e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x11e>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x11c>
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	f200 80e0 	bhi.w	8000f34 <__udivmoddi4+0x2dc>
 8000d74:	46c4      	mov	ip, r8
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d7c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d80:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d84:	fb02 f404 	mul.w	r4, r2, r4
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x144>
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x142>
 8000d94:	429c      	cmp	r4, r3
 8000d96:	f200 80ca 	bhi.w	8000f2e <__udivmoddi4+0x2d6>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000da2:	e7a5      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000da4:	f1c1 0620 	rsb	r6, r1, #32
 8000da8:	408b      	lsls	r3, r1
 8000daa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dae:	431f      	orrs	r7, r3
 8000db0:	fa0e f401 	lsl.w	r4, lr, r1
 8000db4:	fa20 f306 	lsr.w	r3, r0, r6
 8000db8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dbc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dc0:	4323      	orrs	r3, r4
 8000dc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc6:	fa1f fc87 	uxth.w	ip, r7
 8000dca:	fbbe f0f9 	udiv	r0, lr, r9
 8000dce:	0c1c      	lsrs	r4, r3, #16
 8000dd0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dd4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dd8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	fa02 f201 	lsl.w	r2, r2, r1
 8000de2:	d909      	bls.n	8000df8 <__udivmoddi4+0x1a0>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dea:	f080 809c 	bcs.w	8000f26 <__udivmoddi4+0x2ce>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f240 8099 	bls.w	8000f26 <__udivmoddi4+0x2ce>
 8000df4:	3802      	subs	r0, #2
 8000df6:	443c      	add	r4, r7
 8000df8:	eba4 040e 	sub.w	r4, r4, lr
 8000dfc:	fa1f fe83 	uxth.w	lr, r3
 8000e00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e04:	fb09 4413 	mls	r4, r9, r3, r4
 8000e08:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e0c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e10:	45a4      	cmp	ip, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1ce>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e1a:	f080 8082 	bcs.w	8000f22 <__udivmoddi4+0x2ca>
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	d97f      	bls.n	8000f22 <__udivmoddi4+0x2ca>
 8000e22:	3b02      	subs	r3, #2
 8000e24:	443c      	add	r4, r7
 8000e26:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e32:	4564      	cmp	r4, ip
 8000e34:	4673      	mov	r3, lr
 8000e36:	46e1      	mov	r9, ip
 8000e38:	d362      	bcc.n	8000f00 <__udivmoddi4+0x2a8>
 8000e3a:	d05f      	beq.n	8000efc <__udivmoddi4+0x2a4>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x1fe>
 8000e3e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e42:	eb64 0409 	sbc.w	r4, r4, r9
 8000e46:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e4e:	431e      	orrs	r6, r3
 8000e50:	40cc      	lsrs	r4, r1
 8000e52:	e9c5 6400 	strd	r6, r4, [r5]
 8000e56:	2100      	movs	r1, #0
 8000e58:	e74f      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000e5a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e5e:	0c01      	lsrs	r1, r0, #16
 8000e60:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e64:	b280      	uxth	r0, r0
 8000e66:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	463c      	mov	r4, r7
 8000e70:	46b8      	mov	r8, r7
 8000e72:	46be      	mov	lr, r7
 8000e74:	2620      	movs	r6, #32
 8000e76:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e7a:	eba2 0208 	sub.w	r2, r2, r8
 8000e7e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e82:	e766      	b.n	8000d52 <__udivmoddi4+0xfa>
 8000e84:	4601      	mov	r1, r0
 8000e86:	e718      	b.n	8000cba <__udivmoddi4+0x62>
 8000e88:	4610      	mov	r0, r2
 8000e8a:	e72c      	b.n	8000ce6 <__udivmoddi4+0x8e>
 8000e8c:	f1c6 0220 	rsb	r2, r6, #32
 8000e90:	fa2e f302 	lsr.w	r3, lr, r2
 8000e94:	40b7      	lsls	r7, r6
 8000e96:	40b1      	lsls	r1, r6
 8000e98:	fa20 f202 	lsr.w	r2, r0, r2
 8000e9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ea6:	b2bc      	uxth	r4, r7
 8000ea8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb08 f904 	mul.w	r9, r8, r4
 8000eb6:	40b0      	lsls	r0, r6
 8000eb8:	4589      	cmp	r9, r1
 8000eba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ebe:	b280      	uxth	r0, r0
 8000ec0:	d93e      	bls.n	8000f40 <__udivmoddi4+0x2e8>
 8000ec2:	1879      	adds	r1, r7, r1
 8000ec4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ec8:	d201      	bcs.n	8000ece <__udivmoddi4+0x276>
 8000eca:	4589      	cmp	r9, r1
 8000ecc:	d81f      	bhi.n	8000f0e <__udivmoddi4+0x2b6>
 8000ece:	eba1 0109 	sub.w	r1, r1, r9
 8000ed2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ed6:	fb09 f804 	mul.w	r8, r9, r4
 8000eda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee4:	4542      	cmp	r2, r8
 8000ee6:	d229      	bcs.n	8000f3c <__udivmoddi4+0x2e4>
 8000ee8:	18ba      	adds	r2, r7, r2
 8000eea:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eee:	d2c4      	bcs.n	8000e7a <__udivmoddi4+0x222>
 8000ef0:	4542      	cmp	r2, r8
 8000ef2:	d2c2      	bcs.n	8000e7a <__udivmoddi4+0x222>
 8000ef4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ef8:	443a      	add	r2, r7
 8000efa:	e7be      	b.n	8000e7a <__udivmoddi4+0x222>
 8000efc:	45f0      	cmp	r8, lr
 8000efe:	d29d      	bcs.n	8000e3c <__udivmoddi4+0x1e4>
 8000f00:	ebbe 0302 	subs.w	r3, lr, r2
 8000f04:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f08:	3801      	subs	r0, #1
 8000f0a:	46e1      	mov	r9, ip
 8000f0c:	e796      	b.n	8000e3c <__udivmoddi4+0x1e4>
 8000f0e:	eba7 0909 	sub.w	r9, r7, r9
 8000f12:	4449      	add	r1, r9
 8000f14:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f18:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1c:	fb09 f804 	mul.w	r8, r9, r4
 8000f20:	e7db      	b.n	8000eda <__udivmoddi4+0x282>
 8000f22:	4673      	mov	r3, lr
 8000f24:	e77f      	b.n	8000e26 <__udivmoddi4+0x1ce>
 8000f26:	4650      	mov	r0, sl
 8000f28:	e766      	b.n	8000df8 <__udivmoddi4+0x1a0>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e6fd      	b.n	8000d2a <__udivmoddi4+0xd2>
 8000f2e:	443b      	add	r3, r7
 8000f30:	3a02      	subs	r2, #2
 8000f32:	e733      	b.n	8000d9c <__udivmoddi4+0x144>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	443b      	add	r3, r7
 8000f3a:	e71c      	b.n	8000d76 <__udivmoddi4+0x11e>
 8000f3c:	4649      	mov	r1, r9
 8000f3e:	e79c      	b.n	8000e7a <__udivmoddi4+0x222>
 8000f40:	eba1 0109 	sub.w	r1, r1, r9
 8000f44:	46c4      	mov	ip, r8
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fb09 f804 	mul.w	r8, r9, r4
 8000f4e:	e7c4      	b.n	8000eda <__udivmoddi4+0x282>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <fifoInit>:

/** Функция инициализации fifo буфера
 * 	при инициализации указывается размер буфера
 */
void fifoInit(uint16_t size, FIFO_StructDef* buf)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	80fb      	strh	r3, [r7, #6]
	buf->size = size;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	88fa      	ldrh	r2, [r7, #6]
 8000f64:	811a      	strh	r2, [r3, #8]

	if(size <= FIFO_SIZE_MAX)
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f6c:	d809      	bhi.n	8000f82 <fifoInit+0x2e>
	{
		buf->data = (int*)calloc(size, sizeof(int16_t));
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	2102      	movs	r1, #2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f011 ff24 	bl	8012dc0 <calloc>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	e008      	b.n	8000f94 <fifoInit+0x40>
	}
	else buf->data = (int*)calloc(FIFO_SIZE_MAX, sizeof(int16_t));
 8000f82:	2102      	movs	r1, #2
 8000f84:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f88:	f011 ff1a 	bl	8012dc0 <calloc>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	601a      	str	r2, [r3, #0]

	buf->head = 1;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2201      	movs	r2, #1
 8000f98:	80da      	strh	r2, [r3, #6]
	buf->tail = 0;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	809a      	strh	r2, [r3, #4]
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <cellsForRead>:
}

/** Число ячеек доступных для ЧТЕНИЯ (заполненное пространство)
 */
uint16_t cellsForRead(FIFO_StructDef* buf)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    if (buf->head < buf->tail)  return buf->size - buf->tail + buf->head - 1;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	88db      	ldrh	r3, [r3, #6]
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	889b      	ldrh	r3, [r3, #4]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d20f      	bcs.n	8000fe0 <cellsForRead+0x38>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	891b      	ldrh	r3, [r3, #8]
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	889b      	ldrh	r3, [r3, #4]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	88db      	ldrh	r3, [r3, #6]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	4413      	add	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	e009      	b.n	8000ff4 <cellsForRead+0x4c>
    else return buf->head - buf->tail - 1;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	88db      	ldrh	r3, [r3, #6]
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	889b      	ldrh	r3, [r3, #4]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	b29b      	uxth	r3, r3
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <cellsForWrite>:
}

/** Число ячеек доступных для ЗАПИСИ (доступное пространство)
 */
uint16_t cellsForWrite(FIFO_StructDef* buf)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	return buf->size - cellsForRead(buf) - 2;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	891b      	ldrh	r3, [r3, #8]
 800100c:	b29c      	uxth	r4, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffca 	bl	8000fa8 <cellsForRead>
 8001014:	4603      	mov	r3, r0
 8001016:	1ae3      	subs	r3, r4, r3
 8001018:	b29b      	uxth	r3, r3
 800101a:	3b02      	subs	r3, #2
 800101c:	b29b      	uxth	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bd90      	pop	{r4, r7, pc}

08001026 <availableForWrite>:

/** Функция определения наличия доступных ячеек для ЗАПИСИ (доступное пространство)
 */
bool availableForWrite(FIFO_StructDef* buf)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	if(cellsForWrite(buf) == 0) return false;
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffe6 	bl	8001000 <cellsForWrite>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <availableForWrite+0x18>
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <availableForWrite+0x1a>
	else return true;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <fifoWrite>:

/** Записать ячейку данных в буфер и переместить указатель "голова" на одну позицию
 */
fifo_state_t fifoWrite(FIFO_StructDef* buf, int32_t value)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	if(availableForWrite(buf) == false) return FIFO_OVERFLOW;
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffe7 	bl	8001026 <availableForWrite>
 8001058:	4603      	mov	r3, r0
 800105a:	f083 0301 	eor.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <fifoWrite+0x20>
 8001064:	2302      	movs	r3, #2
 8001066:	e01b      	b.n	80010a0 <fifoWrite+0x58>

	if (buf->head >= buf->size) buf->head = 0;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	88db      	ldrh	r3, [r3, #6]
 800106c:	b29a      	uxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	891b      	ldrh	r3, [r3, #8]
 8001072:	b29b      	uxth	r3, r3
 8001074:	429a      	cmp	r2, r3
 8001076:	d302      	bcc.n	800107e <fifoWrite+0x36>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	80da      	strh	r2, [r3, #6]

	buf->data[buf->head] = value;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	88db      	ldrh	r3, [r3, #6]
 8001086:	b29b      	uxth	r3, r3
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	601a      	str	r2, [r3, #0]
	buf->head++;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	88db      	ldrh	r3, [r3, #6]
 8001094:	b29b      	uxth	r3, r3
 8001096:	3301      	adds	r3, #1
 8001098:	b29a      	uxth	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	80da      	strh	r2, [r3, #6]

	return FIFO_OK;
 800109e:	2303      	movs	r3, #3
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <udpSocketInit>:
/* --------------------------------------- Прототипы функций библиотеки net.h --------------------------------------- */

/** Функция инициализации UDP сетевого интерфейса
 */
void udpSocketInit(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
	/* Переменная ошибок работы UDP интерфейса */
	err_t err;

	/* Новый UDP управляющий блок */
	upcb = udp_new();
 80010ae:	f00f fb79 	bl	80107a4 <udp_new>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a15      	ldr	r2, [pc, #84]	@ (800110c <udpSocketInit+0x64>)
 80010b6:	6013      	str	r3, [r2, #0]

	/* Связать IP адрес и порт */
	ip_addr_t myIPaddr;

	/* IP адрес устройства */
	IP_ADDR4(&myIPaddr, 192, 168, 1, 156);
 80010b8:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <udpSocketInit+0x68>)
 80010ba:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 1556);
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <udpSocketInit+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f107 0108 	add.w	r1, r7, #8
 80010c4:	f240 6214 	movw	r2, #1556	@ 0x614
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00f fa55 	bl	8010578 <udp_bind>

	/* Конфигурация IP адреса и порта назначения - ПК */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 1, 2);
 80010ce:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <udpSocketInit+0x6c>)
 80010d0:	607b      	str	r3, [r7, #4]
	err = udp_connect(upcb, &DestIPaddr, 1555);
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <udpSocketInit+0x64>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	1d39      	adds	r1, r7, #4
 80010d8:	f240 6213 	movw	r2, #1555	@ 0x613
 80010dc:	4618      	mov	r0, r3
 80010de:	f00f fad3 	bl	8010688 <udp_connect>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d106      	bne.n	80010fc <udpSocketInit+0x54>
	{
		/* Передача указателя на функцию обработчика входящих пакетов в структуру UDP интерфейса */
		udp_recv(upcb, udpReceiveCallback, NULL);
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <udpSocketInit+0x64>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	4908      	ldr	r1, [pc, #32]	@ (8001118 <udpSocketInit+0x70>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00f fb34 	bl	8010764 <udp_recv>
	}

	/* Инициализация буфера сетевого интерфейса с размеров 5*(sizeof(int16_t)) = 10 байт*/
	fifoInit(5, &netBuf);
 80010fc:	4907      	ldr	r1, [pc, #28]	@ (800111c <udpSocketInit+0x74>)
 80010fe:	2005      	movs	r0, #5
 8001100:	f7ff ff28 	bl	8000f54 <fifoInit>
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000118 	.word	0x20000118
 8001110:	9c01a8c0 	.word	0x9c01a8c0
 8001114:	0201a8c0 	.word	0x0201a8c0
 8001118:	08001121 	.word	0x08001121
 800111c:	200001a0 	.word	0x200001a0

08001120 <udpReceiveCallback>:

/** Функция обработки принятых пакетов UDP
 */
void udpReceiveCallback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
	strncpy(rxBuf, (char *)p->payload, p->len);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6859      	ldr	r1, [r3, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	895b      	ldrh	r3, [r3, #10]
 8001136:	461a      	mov	r2, r3
 8001138:	4808      	ldr	r0, [pc, #32]	@ (800115c <udpReceiveCallback+0x3c>)
 800113a:	f012 f938 	bl	80133ae <strncpy>
	counter ++;
 800113e:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <udpReceiveCallback+0x40>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a06      	ldr	r2, [pc, #24]	@ (8001160 <udpReceiveCallback+0x40>)
 8001146:	6013      	str	r3, [r2, #0]
	pbuf_free(p);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f009 f897 	bl	800a27c <pbuf_free>

	/* Вызов обработчик принятных сообщений */
	udpReceiveHandler();
 800114e:	f001 fcfd 	bl	8002b4c <udpReceiveHandler>
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000011c 	.word	0x2000011c
 8001160:	2000019c 	.word	0x2000019c

08001164 <udpClientSend>:

/** Функция отправки сообщения по UDP
 */
void udpClientSend(char *buf)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b0c4      	sub	sp, #272	@ 0x110
 8001168:	af00      	add	r7, sp, #0
 800116a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800116e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001172:	6018      	str	r0, [r3, #0]
	struct pbuf *txBuf;
	char data[256];

	int len = sprintf(data, "%s\n", (char *)buf);
 8001174:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001178:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800117c:	f107 0008 	add.w	r0, r7, #8
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4917      	ldr	r1, [pc, #92]	@ (80011e0 <udpClientSend+0x7c>)
 8001184:	f012 f87c 	bl	8013280 <siprintf>
 8001188:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

	/* Выделить память под данные в буфере */
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800118c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001190:	b29b      	uxth	r3, r3
 8001192:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001196:	4619      	mov	r1, r3
 8001198:	2036      	movs	r0, #54	@ 0x36
 800119a:	f008 fd8b 	bl	8009cb4 <pbuf_alloc>
 800119e:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

	if (txBuf != NULL)
 80011a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d014      	beq.n	80011d4 <udpClientSend+0x70>
	{
		pbuf_take(txBuf, data, len);
 80011aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	4619      	mov	r1, r3
 80011b6:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80011ba:	f009 facb 	bl	800a754 <pbuf_take>
		udp_send(upcb, txBuf);
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <udpClientSend+0x80>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00e ffec 	bl	80101a4 <udp_send>
    	pbuf_free(txBuf);
 80011cc:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80011d0:	f009 f854 	bl	800a27c <pbuf_free>
	}
}
 80011d4:	bf00      	nop
 80011d6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	08014590 	.word	0x08014590
 80011e4:	20000118 	.word	0x20000118

080011e8 <DWT_Init>:
  * @brief  This function initializes the DWT counter.
  * @param[in] None
  * @return None
  */
void DWT_Init()
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
	/* Allow the use of the counter DWT */
	SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <DWT_Init+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	@ (8001210 <DWT_Init+0x28>)
 80011f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80011f6:	6013      	str	r3, [r2, #0]
	/* Turn on the counter */
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <DWT_Init+0x2c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a05      	ldr	r2, [pc, #20]	@ (8001214 <DWT_Init+0x2c>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6013      	str	r3, [r2, #0]

}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000edfc 	.word	0xe000edfc
 8001214:	e0001000 	.word	0xe0001000

08001218 <DWT_usDelay>:
  * @brief  This function produces a time delay in us.
  * @param[in] Time in us
  * @return None
  */
void DWT_usDelay(uint32_t us)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	/* Convert microseconds to processor ticks */
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8001220:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <DWT_usDelay+0x3c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0c      	ldr	r2, [pc, #48]	@ (8001258 <DWT_usDelay+0x40>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0c9a      	lsrs	r2, r3, #18
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	fb02 f303 	mul.w	r3, r2, r3
 8001232:	60fb      	str	r3, [r7, #12]
	/* Reset the counter */
	DWT_CYCCNT = 0;
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <DWT_usDelay+0x44>)
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
	while(DWT_CYCCNT < us_count_tic);
 800123a:	bf00      	nop
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <DWT_usDelay+0x44>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	429a      	cmp	r2, r3
 8001244:	d8fa      	bhi.n	800123c <DWT_usDelay+0x24>
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	20000074 	.word	0x20000074
 8001258:	431bde83 	.word	0x431bde83
 800125c:	e0001004 	.word	0xe0001004

08001260 <stepperFunctionsInit>:

/**	Функция инициализации указателей на функции из других областей программы
 * 	для использования в данной библиотеке
 */
void stepperFunctionsInit(writePinFunction_void_ptr function)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	setPin = function;
 8001268:	4a04      	ldr	r2, [pc, #16]	@ (800127c <stepperFunctionsInit+0x1c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	200001ac 	.word	0x200001ac

08001280 <stepperInit>:
 *
 * 	Функция определяет пины шагового мотора и инициализирует начальные данные мотора -
 * 	позицию, направление, статус включения, глобальное определение поведения пинов DIR, EN
 */
void stepperInit(STEPPER_StructDef* stepper, STEPPER_PINS_StructDef* pins)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	stepper->stepper_pins.GPIOx_step = pins->GPIOx_step;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	601a      	str	r2, [r3, #0]
	stepper->stepper_pins.GPIO_Pin_step = pins->GPIO_Pin_step;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	889a      	ldrh	r2, [r3, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	809a      	strh	r2, [r3, #4]

	stepper->stepper_pins.GPIOx_dir = pins->GPIOx_dir;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	609a      	str	r2, [r3, #8]
	stepper->stepper_pins.GPIO_Pin_dir = pins->GPIO_Pin_dir;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	899a      	ldrh	r2, [r3, #12]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	819a      	strh	r2, [r3, #12]

	stepper->stepper_pins.GPIOx_en = 0x0;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
	stepper->stepper_pins.GPIO_Pin_en = 0x0;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	829a      	strh	r2, [r3, #20]

	stepper->pos = 0;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
	stepper->dir = 1;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	771a      	strb	r2, [r3, #28]
	stepper->en = OFF;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	775a      	strb	r2, [r3, #29]

	stepper->_globEn = false;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	779a      	strb	r2, [r3, #30]
	stepper->_globDir = false;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	77da      	strb	r2, [r3, #31]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <doStep>:

/** Сделать шаг мотором
 */
void doStep(STEPPER_StructDef* stepper)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	stepper->pos += stepper->dir;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7f1b      	ldrb	r3, [r3, #28]
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	441a      	add	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	619a      	str	r2, [r3, #24]
	setDir(stepper, stepper->dir); /* Установить пин DIR в нужное состояние в соответствии с направлением вращения */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7f1b      	ldrb	r3, [r3, #28]
 80012fc:	b25b      	sxtb	r3, r3
 80012fe:	4619      	mov	r1, r3
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f819 	bl	8001338 <setDir>

	setPin(stepper->stepper_pins.GPIOx_step, stepper->stepper_pins.GPIO_Pin_step, PIN_SET);
 8001306:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <doStep+0x54>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6810      	ldr	r0, [r2, #0]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	8891      	ldrh	r1, [r2, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	4798      	blx	r3
	DWT_usDelay(STEP_TIME);
 8001316:	2005      	movs	r0, #5
 8001318:	f7ff ff7e 	bl	8001218 <DWT_usDelay>
	setPin(stepper->stepper_pins.GPIOx_step, stepper->stepper_pins.GPIO_Pin_step, PIN_RESET);
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <doStep+0x54>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6810      	ldr	r0, [r2, #0]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	8891      	ldrh	r1, [r2, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	4798      	blx	r3
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200001ac 	.word	0x200001ac

08001338 <setDir>:
 * 	dir = -1 - против часовой стрелки независимо от _globDir
 * 	Направление вращения определяется со стороны задней части мотора,
 * 	т.е. вал мотора смотрит от нас!
 */
void setDir(STEPPER_StructDef* stepper, int8_t dir)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
	if(stepper->_globDir == false)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7fdb      	ldrb	r3, [r3, #31]
 8001348:	f083 0301 	eor.w	r3, r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d01b      	beq.n	800138a <setDir+0x52>
	{
		if(dir == 1)
 8001352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d10b      	bne.n	8001372 <setDir+0x3a>
		{
			stepper->dir = 1;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	771a      	strb	r2, [r3, #28]
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_SET);
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <setDir+0x90>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6890      	ldr	r0, [r2, #8]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	8991      	ldrh	r1, [r2, #12]
 800136c:	2201      	movs	r2, #1
 800136e:	4798      	blx	r3
		else
		{
			stepper->dir = -1;
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_SET);
		}
}
 8001370:	e026      	b.n	80013c0 <setDir+0x88>
			stepper->dir = -1;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	22ff      	movs	r2, #255	@ 0xff
 8001376:	771a      	strb	r2, [r3, #28]
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_RESET);
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <setDir+0x90>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6890      	ldr	r0, [r2, #8]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	8991      	ldrh	r1, [r2, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	4798      	blx	r3
}
 8001388:	e01a      	b.n	80013c0 <setDir+0x88>
	else if(dir == 1)
 800138a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d10b      	bne.n	80013aa <setDir+0x72>
		stepper->dir = 1;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	771a      	strb	r2, [r3, #28]
		setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_RESET);
 8001398:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <setDir+0x90>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6890      	ldr	r0, [r2, #8]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	8991      	ldrh	r1, [r2, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	4798      	blx	r3
}
 80013a8:	e00a      	b.n	80013c0 <setDir+0x88>
			stepper->dir = -1;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	22ff      	movs	r2, #255	@ 0xff
 80013ae:	771a      	strb	r2, [r3, #28]
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_SET);
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <setDir+0x90>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6890      	ldr	r0, [r2, #8]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	8991      	ldrh	r1, [r2, #12]
 80013bc:	2201      	movs	r2, #1
 80013be:	4798      	blx	r3
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200001ac 	.word	0x200001ac

080013cc <enableStepper>:

/** Включение мотора
 */
void enableStepper(STEPPER_StructDef* stepper)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	stepper->en = ON;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	775a      	strb	r2, [r3, #29]

	if(stepper->_globEn == false)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7f9b      	ldrb	r3, [r3, #30]
 80013de:	f083 0301 	eor.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d008      	beq.n	80013fa <enableStepper+0x2e>
	{
		setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_SET);
 80013e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <enableStepper+0x48>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6910      	ldr	r0, [r2, #16]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	8a91      	ldrh	r1, [r2, #20]
 80013f4:	2201      	movs	r2, #1
 80013f6:	4798      	blx	r3
	}
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_RESET);
}
 80013f8:	e007      	b.n	800140a <enableStepper+0x3e>
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_RESET);
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <enableStepper+0x48>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6910      	ldr	r0, [r2, #16]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	8a91      	ldrh	r1, [r2, #20]
 8001406:	2200      	movs	r2, #0
 8001408:	4798      	blx	r3
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200001ac 	.word	0x200001ac

08001418 <disableStepper>:

/** Выключение мотора
 */
void disableStepper(STEPPER_StructDef* stepper)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	stepper->en = OFF;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	775a      	strb	r2, [r3, #29]

	if(stepper->_globEn == false)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7f9b      	ldrb	r3, [r3, #30]
 800142a:	f083 0301 	eor.w	r3, r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <disableStepper+0x2e>
	{
		setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_RESET);
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <disableStepper+0x48>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6910      	ldr	r0, [r2, #16]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	8a91      	ldrh	r1, [r2, #20]
 8001440:	2200      	movs	r2, #0
 8001442:	4798      	blx	r3
	}
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_SET);
}
 8001444:	e007      	b.n	8001456 <disableStepper+0x3e>
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_SET);
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <disableStepper+0x48>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6910      	ldr	r0, [r2, #16]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	8a91      	ldrh	r1, [r2, #20]
 8001452:	2201      	movs	r2, #1
 8001454:	4798      	blx	r3
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200001ac 	.word	0x200001ac

08001464 <driverFunctionsInit>:
/** Функция приема указателя на функцию получения времени в микросекундах.
 *  Используется таймер микроконтроллера и его регистр счетчика - TIMx->CNT
 *  function(1...n) ОБЯЗАТЕЛЬНО должны быть определены в файле main.c
 */
void driverFunctionsInit(timeFunction_void_ptr function1, timeFunction_void_ptr function2, timeFunction_uint32_t_ptr function3, timeFunction_void_ptr function4)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
	startTimer = function1;
 8001472:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <driverFunctionsInit+0x34>)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6013      	str	r3, [r2, #0]
	stopTimer = function2;
 8001478:	4a08      	ldr	r2, [pc, #32]	@ (800149c <driverFunctionsInit+0x38>)
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	6013      	str	r3, [r2, #0]
	getMicros = function3;
 800147e:	4a08      	ldr	r2, [pc, #32]	@ (80014a0 <driverFunctionsInit+0x3c>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6013      	str	r3, [r2, #0]
	resetTimer = function4;
 8001484:	4a07      	ldr	r2, [pc, #28]	@ (80014a4 <driverFunctionsInit+0x40>)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	6013      	str	r3, [r2, #0]
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200001b0 	.word	0x200001b0
 800149c:	200001b4 	.word	0x200001b4
 80014a0:	200001b8 	.word	0x200001b8
 80014a4:	200001bc 	.word	0x200001bc

080014a8 <driverInit>:

/** Функция инициализации драйвера шагового мотора
 */
void driverInit(DRIVER_StructDef* driver, STEPPER_StructDef* stepper, DRIVER_LIMIT_SWITCH_PINS_StructDef* pins, uint32_t stepsPerRev, movement_type_t type)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	603b      	str	r3, [r7, #0]
	/* Структура шагового мотора */
	driver->stepper = stepper;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	601a      	str	r2, [r3, #0]

	/* Структура пинов концевых переключателей и датчика нуля драйвера шагового мотора */
	driver->driver_pins = pins;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	605a      	str	r2, [r3, #4]

	/* ------------- Общие переменные движения ----------- */

	driver->tickUs = 0;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
	driver->_prevTime = 0;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
	driver->stepTime = 0;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
	driver->_moveType = type;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	7e3a      	ldrb	r2, [r7, #24]
 80014d8:	751a      	strb	r2, [r3, #20]
	driver->_moveMode = POSITION_MODE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	755a      	strb	r2, [r3, #21]
	driver->_autoPower = false;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	759a      	strb	r2, [r3, #22]
	driver->_workState = DRIVER_INIT;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	75da      	strb	r2, [r3, #23]
	driver->_stepsPerDeg = stepsPerRev / 360.0;
 80014ec:	6838      	ldr	r0, [r7, #0]
 80014ee:	f7ff f801 	bl	80004f4 <__aeabi_ui2d>
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	4b25      	ldr	r3, [pc, #148]	@ (800158c <driverInit+0xe4>)
 80014f8:	f7ff f9a0 	bl	800083c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fb40 	bl	8000b88 <__aeabi_d2f>
 8001508:	4602      	mov	r2, r0
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	619a      	str	r2, [r3, #24]
	driver->_accel = 0;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	839a      	strh	r2, [r3, #28]

	/* ------------ Переменные POSITION_MODE ------------- */

	driver->_positionPlannerTime = 0;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
	driver->_maxSpeed = 0;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24
	driver->_targetPosition = 0;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	629a      	str	r2, [r3, #40]	@ 0x28

	driver->_s1 = 0;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	62da      	str	r2, [r3, #44]	@ 0x2c
	driver->_s2 = 0;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	631a      	str	r2, [r3, #48]	@ 0x30
	driver->_s3 = 0;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	635a      	str	r2, [r3, #52]	@ 0x34
	driver->_k = 0;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	639a      	str	r2, [r3, #56]	@ 0x38

	/* ------------ Переменные VELOCITY_MODE ------------- */

	driver->_speedPlannerTime = 0;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	63da      	str	r2, [r3, #60]	@ 0x3c
	driver->_curSpeed = 0;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	641a      	str	r2, [r3, #64]	@ 0x40
	driver->_targetSpeed = 0;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	645a      	str	r2, [r3, #68]	@ 0x44
	driver->_stopFlag = false;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	/* ------ Переменные алгоритма плавного разгона ------ */

	driver->_c0 = 0;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	64da      	str	r2, [r3, #76]	@ 0x4c
	driver->_cn = 0;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	651a      	str	r2, [r3, #80]	@ 0x50
	driver->_n = 0;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	655a      	str	r2, [r3, #84]	@ 0x54
	driver->N = 0;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	659a      	str	r2, [r3, #88]	@ 0x58
	driver->_cmin = 1.0;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001580:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40768000 	.word	0x40768000

08001590 <setMoveMode>:
/** Установка режима работы, mode:
 * 	FOLLOW_POS - следование к позиции setTarget(...)
 * 	KEEP_SPEED - удержание скорости setSpeed(...)
 */
void setMoveMode(DRIVER_StructDef* driver, runMode_t mode)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	70fb      	strb	r3, [r7, #3]
	driver->_moveMode = mode;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	755a      	strb	r2, [r3, #21]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <resetTimers>:

/** Функция сброса всех таймеров
 */
void resetTimers(DRIVER_StructDef* driver)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	driver->_speedPlannerTime = driver->_positionPlannerTime = driver->_prevTime = getMicros();
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <resetTimers+0x2c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4798      	blx	r3
 80015be:	4602      	mov	r2, r0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	621a      	str	r2, [r3, #32]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1a      	ldr	r2, [r3, #32]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200001b8 	.word	0x200001b8

080015e0 <resetMotor>:

/** Установка текущей скорости мотора в ноль
 */
void resetMotor(DRIVER_StructDef* driver)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	driver->_curSpeed = 0;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <tickDriver>:
/** Здесь происходит движение мотора, функция должна вызываться как можно чаще,
 * 	имеется встроенный таймер на тиках микропроцессора
 * 	Возвращает BUSY, если мотор запущен в режиме POSITION_MODE или VELOCITY_MODE
 */
driver_state_t tickDriver(DRIVER_StructDef* driver)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	if (driver->_workState == DRIVER_BUSY)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7ddb      	ldrb	r3, [r3, #23]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d140      	bne.n	800168e <tickDriver+0x92>
	{
		driver->tickUs = getMicros();
 800160c:	4b23      	ldr	r3, [pc, #140]	@ (800169c <tickDriver+0xa0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4798      	blx	r3
 8001612:	4602      	mov	r2, r0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	609a      	str	r2, [r3, #8]

		/* POSITION_MODE */
		if (driver->_moveMode == POSITION_MODE && driver->_accel != 0) plannerPositionMode(driver);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7d5b      	ldrb	r3, [r3, #21]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d106      	bne.n	800162e <tickDriver+0x32>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	8b9b      	ldrh	r3, [r3, #28]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <tickDriver+0x32>
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f889 	bl	8001740 <plannerPositionMode>

		/* VELOCITY_MODE */
		if (driver->_moveMode == VELOCITY_MODE && driver->_accel != 0) plannerVelocityMode(driver);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7d5b      	ldrb	r3, [r3, #21]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d106      	bne.n	8001644 <tickDriver+0x48>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	8b9b      	ldrh	r3, [r3, #28]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <tickDriver+0x48>
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fb7a 	bl	8001d38 <plannerVelocityMode>

		/* Основной таймер степпера */
		if (driver->stepTime != 0 && driver->tickUs - driver->_prevTime >= driver->stepTime)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d020      	beq.n	800168e <tickDriver+0x92>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	1ad2      	subs	r2, r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	429a      	cmp	r2, r3
 800165c:	d317      	bcc.n	800168e <tickDriver+0x92>
		{
			driver->_prevTime = driver->tickUs;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60da      	str	r2, [r3, #12]

			/* Проверка достижения целевой координаты, проверка остановки для быстрого планировщика, а также работы без ускорения */
			if (driver->_moveMode == POSITION_MODE && driver->_targetPosition == driver->stepper->pos)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7d5b      	ldrb	r3, [r3, #21]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10c      	bne.n	8001688 <tickDriver+0x8c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	429a      	cmp	r2, r3
 800167a:	d105      	bne.n	8001688 <tickDriver+0x8c>
            {
				brake(driver);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f832 	bl	80016e6 <brake>
				return driver->_workState;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7ddb      	ldrb	r3, [r3, #23]
 8001686:	e004      	b.n	8001692 <tickDriver+0x96>
            }

			step(driver);  // двигаем мотор
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f84b 	bl	8001724 <step>
		}
	}

	return driver->_workState;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7ddb      	ldrb	r3, [r3, #23]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200001b8 	.word	0x200001b8

080016a0 <enableDriver>:

/** Включить мотор (пин EN)
 */
void enableDriver(DRIVER_StructDef* driver)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	driver->_workState = DRIVER_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	75da      	strb	r2, [r3, #23]
	resetTimers(driver);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ff7e 	bl	80015b0 <resetTimers>
	enableStepper(driver->stepper);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fe87 	bl	80013cc <enableStepper>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <disableDriver>:

/** Выключить мотор (пин EN)
 */
void disableDriver(DRIVER_StructDef* driver)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	driver->_workState = DRIVER_BRAKE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2203      	movs	r2, #3
 80016d2:	75da      	strb	r2, [r3, #23]
	disableStepper(driver->stepper);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fe9d 	bl	8001418 <disableStepper>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <brake>:
}

/* Резкая остановка + выключение мотора
 */
void brake(DRIVER_StructDef* driver)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
	driver->_workState = DRIVER_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	75da      	strb	r2, [r3, #23]
	driver->stepTime = 0;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
	driver->_curSpeed = 0;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	641a      	str	r2, [r3, #64]	@ 0x40
	driver->_n = 0;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	655a      	str	r2, [r3, #84]	@ 0x54

	resetMotor(driver);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff69 	bl	80015e0 <resetMotor>

	if(driver->_autoPower == true) disableDriver(driver);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7d9b      	ldrb	r3, [r3, #22]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <brake+0x36>
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffd5 	bl	80016c6 <disableDriver>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <step>:
}

/** Сделать шаг мотором
 */
void step(DRIVER_StructDef* driver)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	doStep(driver->stepper);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fdd5 	bl	80012e0 <doStep>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <plannerPositionMode>:
/* -------------------------------------- Функции для работы режима POSITION_MODE -------------------------------------- */

/**	Планировщик скорости для POSITION_MODE с разгоном и торможением
 */
void plannerPositionMode(DRIVER_StructDef* driver)
{
 8001740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
	int8_t dir = driver->stepper->dir;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	7f1b      	ldrb	r3, [r3, #28]
 8001750:	73fb      	strb	r3, [r7, #15]
	int8_t err = _sign((int32_t)(driver->_s1 - driver->_k));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	db01      	blt.n	8001764 <plannerPositionMode+0x24>
 8001760:	2301      	movs	r3, #1
 8001762:	e001      	b.n	8001768 <plannerPositionMode+0x28>
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
 8001768:	73bb      	strb	r3, [r7, #14]

	if (driver->tickUs - driver->_positionPlannerTime >= driver->stepTime)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	1ad2      	subs	r2, r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	f0c0 811d 	bcc.w	80019b8 <plannerPositionMode+0x278>
	{
		/* Обновление переменной времени планировщика */
		driver->_positionPlannerTime = driver->tickUs;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	621a      	str	r2, [r3, #32]

		/* Основная логика разгона и торможения */
		if(driver->_k < driver->_s1 || driver->_k > driver->_s2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178e:	429a      	cmp	r2, r3
 8001790:	d306      	bcc.n	80017a0 <plannerPositionMode+0x60>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	429a      	cmp	r2, r3
 800179c:	f240 80a1 	bls.w	80018e2 <plannerPositionMode+0x1a2>
		{
			if(driver->_n == 0) driver->_cn = driver->_c0;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d104      	bne.n	80017b2 <plannerPositionMode+0x72>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80017b0:	e064      	b.n	800187c <plannerPositionMode+0x13c>
			else if(driver->_n == 1) driver->_cn = 0.4056 * driver->_c0;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d113      	bne.n	80017e2 <plannerPositionMode+0xa2>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe feba 	bl	8000538 <__aeabi_f2d>
 80017c4:	a384      	add	r3, pc, #528	@ (adr r3, 80019d8 <plannerPositionMode+0x298>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f7fe ff0d 	bl	80005e8 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f9d7 	bl	8000b88 <__aeabi_d2f>
 80017da:	4602      	mov	r2, r0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	651a      	str	r2, [r3, #80]	@ 0x50
 80017e0:	e04c      	b.n	800187c <plannerPositionMode+0x13c>
			else if(driver->_n > 1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	dd48      	ble.n	800187c <plannerPositionMode+0x13c>
			{
				driver->_cn = driver->_cn * (1 - err * 2.0 / (4.0 * driver->_n + err));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fea2 	bl	8000538 <__aeabi_f2d>
 80017f4:	4604      	mov	r4, r0
 80017f6:	460d      	mov	r5, r1
 80017f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fe89 	bl	8000514 <__aeabi_i2d>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	f7fe fd39 	bl	800027c <__adddf3>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4690      	mov	r8, r2
 8001810:	4699      	mov	r9, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe7c 	bl	8000514 <__aeabi_i2d>
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	4b6b      	ldr	r3, [pc, #428]	@ (80019d0 <plannerPositionMode+0x290>)
 8001822:	f7fe fee1 	bl	80005e8 <__aeabi_dmul>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4692      	mov	sl, r2
 800182c:	469b      	mov	fp, r3
 800182e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe6e 	bl	8000514 <__aeabi_i2d>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4650      	mov	r0, sl
 800183e:	4659      	mov	r1, fp
 8001840:	f7fe fd1c 	bl	800027c <__adddf3>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4640      	mov	r0, r8
 800184a:	4649      	mov	r1, r9
 800184c:	f7fe fff6 	bl	800083c <__aeabi_ddiv>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	f04f 0000 	mov.w	r0, #0
 8001858:	495e      	ldr	r1, [pc, #376]	@ (80019d4 <plannerPositionMode+0x294>)
 800185a:	f7fe fd0d 	bl	8000278 <__aeabi_dsub>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4620      	mov	r0, r4
 8001864:	4629      	mov	r1, r5
 8001866:	f7fe febf 	bl	80005e8 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	f7ff f989 	bl	8000b88 <__aeabi_d2f>
 8001876:	4602      	mov	r2, r0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	651a      	str	r2, [r3, #80]	@ 0x50
			}

			driver->stepTime = (uint32_t)(driver->_cn) - STEP_TIME;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001886:	ee17 3a90 	vmov	r3, s15
 800188a:	1f5a      	subs	r2, r3, #5
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	611a      	str	r2, [r3, #16]
			driver->_curSpeed = dir * 1000000.0 / driver->_cn;
 8001890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe3d 	bl	8000514 <__aeabi_i2d>
 800189a:	a34b      	add	r3, pc, #300	@ (adr r3, 80019c8 <plannerPositionMode+0x288>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7fe fea2 	bl	80005e8 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4614      	mov	r4, r2
 80018aa:	461d      	mov	r5, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe41 	bl	8000538 <__aeabi_f2d>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4620      	mov	r0, r4
 80018bc:	4629      	mov	r1, r5
 80018be:	f7fe ffbd 	bl	800083c <__aeabi_ddiv>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff f95d 	bl	8000b88 <__aeabi_d2f>
 80018ce:	4602      	mov	r2, r0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	641a      	str	r2, [r3, #64]	@ 0x40

			driver->_n += err;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80018d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018dc:	441a      	add	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		/* Условие достижения максимальной скорости */
		if(driver->_k == driver->_s1 && driver->_s1 != driver->_s2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d128      	bne.n	8001940 <plannerPositionMode+0x200>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d022      	beq.n	8001940 <plannerPositionMode+0x200>
		{
			driver->_curSpeed = dir * driver->_maxSpeed;
 80018fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800190c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
			driver->stepTime = 1000000.0 / driver->_maxSpeed;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fe0c 	bl	8000538 <__aeabi_f2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	a128      	add	r1, pc, #160	@ (adr r1, 80019c8 <plannerPositionMode+0x288>)
 8001926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800192a:	f7fe ff87 	bl	800083c <__aeabi_ddiv>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f907 	bl	8000b48 <__aeabi_d2uiz>
 800193a:	4602      	mov	r2, r0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	611a      	str	r2, [r3, #16]
		}

		/* Особый случай первого шага при торможении */
		if(driver->_k == driver->_s2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001948:	429a      	cmp	r2, r3
 800194a:	d130      	bne.n	80019ae <plannerPositionMode+0x26e>
		{
			driver->stepTime = (uint32_t)(driver->_cn) - STEP_TIME;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001956:	ee17 3a90 	vmov	r3, s15
 800195a:	1f5a      	subs	r2, r3, #5
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	611a      	str	r2, [r3, #16]
			driver->_curSpeed = dir * 1000000.0 / driver->_cn;
 8001960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fdd5 	bl	8000514 <__aeabi_i2d>
 800196a:	a317      	add	r3, pc, #92	@ (adr r3, 80019c8 <plannerPositionMode+0x288>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f7fe fe3a 	bl	80005e8 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4614      	mov	r4, r2
 800197a:	461d      	mov	r5, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fdd9 	bl	8000538 <__aeabi_f2d>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4620      	mov	r0, r4
 800198c:	4629      	mov	r1, r5
 800198e:	f7fe ff55 	bl	800083c <__aeabi_ddiv>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f7ff f8f5 	bl	8000b88 <__aeabi_d2f>
 800199e:	4602      	mov	r2, r0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	641a      	str	r2, [r3, #64]	@ 0x40

			driver->_n --;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a8:	1e5a      	subs	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		driver->_k ++;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	639a      	str	r2, [r3, #56]	@ 0x38
	}
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019c2:	bf00      	nop
 80019c4:	f3af 8000 	nop.w
 80019c8:	00000000 	.word	0x00000000
 80019cc:	412e8480 	.word	0x412e8480
 80019d0:	40100000 	.word	0x40100000
 80019d4:	3ff00000 	.word	0x3ff00000
 80019d8:	b3d07c85 	.word	0xb3d07c85
 80019dc:	3fd9f559 	.word	0x3fd9f559

080019e0 <setTargetPos>:

/** Установка целевой позиции в шагах (для режима POSITION_MODE)
 * 	и движение к указанной цели с максимальной скоростью
 */
param_change_t setTargetPos(DRIVER_StructDef* driver, int32_t target_pos)
{
 80019e0:	b5b0      	push	{r4, r5, r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
	uint32_t steps = abs(target_pos - driver->stepper->pos);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bfb8      	it	lt
 80019f8:	425b      	neglt	r3, r3
 80019fa:	60fb      	str	r3, [r7, #12]

	/* Если драйвер в режиме POSITION_MODE */
	if(driver->_moveMode != POSITION_MODE) return PARAM_CHANGE_ERR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7d5b      	ldrb	r3, [r3, #21]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <setTargetPos+0x28>
 8001a04:	2300      	movs	r3, #0
 8001a06:	e0a9      	b.n	8001b5c <setTargetPos+0x17c>

	/* Если мотор в движении */
	if(driver->_workState == DRIVER_BUSY) return PARAM_CHANGE_ERR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7ddb      	ldrb	r3, [r3, #23]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d101      	bne.n	8001a14 <setTargetPos+0x34>
 8001a10:	2300      	movs	r3, #0
 8001a12:	e0a3      	b.n	8001b5c <setTargetPos+0x17c>

	driver->_targetPosition = target_pos;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	629a      	str	r2, [r3, #40]	@ 0x28

	if(driver->_targetPosition != driver->stepper->pos)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	f000 8098 	beq.w	8001b5a <setTargetPos+0x17a>
	{
		driver->stepper->dir = (driver->_targetPosition > driver->stepper->pos) ? 1 : -1;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dd01      	ble.n	8001a3c <setTargetPos+0x5c>
 8001a38:	2201      	movs	r2, #1
 8001a3a:	e001      	b.n	8001a40 <setTargetPos+0x60>
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	771a      	strb	r2, [r3, #28]

		if (driver->_accel == 0 || driver->_maxSpeed < MIN_SPEED_POS_MODE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	8b9b      	ldrh	r3, [r3, #28]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <setTargetPos+0x82>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001a54:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001a58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	d515      	bpl.n	8001a8e <setTargetPos+0xae>
		{
			driver->stepTime = 1000000.0 / driver->_maxSpeed;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd66 	bl	8000538 <__aeabi_f2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	a13d      	add	r1, pc, #244	@ (adr r1, 8001b68 <setTargetPos+0x188>)
 8001a72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a76:	f7fe fee1 	bl	800083c <__aeabi_ddiv>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f861 	bl	8000b48 <__aeabi_d2uiz>
 8001a86:	4602      	mov	r2, r0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	611a      	str	r2, [r3, #16]
 8001a8c:	e062      	b.n	8001b54 <setTargetPos+0x174>
		}
		else
		{
			driver->N = driver->_maxSpeed * driver->_maxSpeed / (2.0 * driver->_accel);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9e:	ee17 0a90 	vmov	r0, s15
 8001aa2:	f7fe fd49 	bl	8000538 <__aeabi_f2d>
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	460d      	mov	r5, r1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	8b9b      	ldrh	r3, [r3, #28]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd30 	bl	8000514 <__aeabi_i2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	f7fe fbe0 	bl	800027c <__adddf3>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	f7fe feba 	bl	800083c <__aeabi_ddiv>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f7ff f83a 	bl	8000b48 <__aeabi_d2uiz>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	659a      	str	r2, [r3, #88]	@ 0x58

			if(steps > 2 * driver->N)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d915      	bls.n	8001b12 <setTargetPos+0x132>
			{
				driver->_s1 = driver->N;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	62da      	str	r2, [r3, #44]	@ 0x2c
				driver->_s2 = driver->_s1 + steps - 2 * driver->N;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	441a      	add	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	1ad2      	subs	r2, r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	631a      	str	r2, [r3, #48]	@ 0x30
				driver->_s3 = driver->_s2 + driver->N;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0a:	441a      	add	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b10:	e01d      	b.n	8001b4e <setTargetPos+0x16e>
			}
			else
			{
				driver->_s1 = steps / 2;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	085a      	lsrs	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	62da      	str	r2, [r3, #44]	@ 0x2c
				driver->_s2 = driver->_s1 + (steps % 2 == 0) ? 0 : 1;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	f002 0201 	and.w	r2, r2, #1
 8001b24:	2a00      	cmp	r2, #0
 8001b26:	bf0c      	ite	eq
 8001b28:	2201      	moveq	r2, #1
 8001b2a:	2200      	movne	r2, #0
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	4413      	add	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	631a      	str	r2, [r3, #48]	@ 0x30
				driver->_s3 = driver->_s2 + driver->_s1;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b48:	441a      	add	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	635a      	str	r2, [r3, #52]	@ 0x34
			}

			driver->_k = 0;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	639a      	str	r2, [r3, #56]	@ 0x38
		}

		driver->_workState = DRIVER_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	75da      	strb	r2, [r3, #23]
	}

	return PARAM_CHANGE_OK;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bdb0      	pop	{r4, r5, r7, pc}
 8001b64:	f3af 8000 	nop.w
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	412e8480 	.word	0x412e8480

08001b70 <setTargetPosDeg>:

/* Установка целевой позиции в градусах
 */
param_change_t setTargetPosDeg(DRIVER_StructDef* driver, float target_pos_deg)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	ed87 0a00 	vstr	s0, [r7]
	return setTargetPos(driver, target_pos_deg * driver->_stepsPerDeg);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b82:	edd7 7a00 	vldr	s15, [r7]
 8001b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b8e:	ee17 1a90 	vmov	r1, s15
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ff24 	bl	80019e0 <setTargetPos>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	0000      	movs	r0, r0
 8001ba4:	0000      	movs	r0, r0
	...

08001ba8 <setMaxSpeed>:

/** Установка максимальной скорости (по модулю) в шагах/секунду (для режима POSITION_MODE)
 *  по умолчанию 300
 */
param_change_t setMaxSpeed(DRIVER_StructDef* driver, float speed)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_workState == DRIVER_BUSY) return PARAM_CHANGE_ERR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7ddb      	ldrb	r3, [r3, #23]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d101      	bne.n	8001bc0 <setMaxSpeed+0x18>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e019      	b.n	8001bf4 <setMaxSpeed+0x4c>

	/* Ограничения минимальной скорости - 1 шаг/час */
	driver->_maxSpeed = fmax(fabs(speed), MIN_STEP_SPEED);
 8001bc0:	edd7 7a00 	vldr	s15, [r7]
 8001bc4:	eef0 7ae7 	vabs.f32	s15, s15
 8001bc8:	ee17 0a90 	vmov	r0, s15
 8001bcc:	f7fe fcb4 	bl	8000538 <__aeabi_f2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 8001c00 <setMaxSpeed+0x58>
 8001bd8:	ec43 2b10 	vmov	d0, r2, r3
 8001bdc:	f012 fba6 	bl	801432c <fmax>
 8001be0:	ec53 2b10 	vmov	r2, r3, d0
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe ffce 	bl	8000b88 <__aeabi_d2f>
 8001bec:	4602      	mov	r2, r0
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	625a      	str	r2, [r3, #36]	@ 0x24

	return PARAM_CHANGE_OK;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	f3af 8000 	nop.w
 8001c00:	789abcdf 	.word	0x789abcdf
 8001c04:	3f323456 	.word	0x3f323456

08001c08 <setMaxSpeedDeg>:

/** Установка максимальной скорости (по модулю) в градусах/секунду (для режима POSITION_MODE)
 */
param_change_t setMaxSpeedDeg(DRIVER_StructDef* driver, float speed)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	ed87 0a00 	vstr	s0, [r7]
	return setMaxSpeed(driver, fabs(speed) * driver->_stepsPerDeg);
 8001c14:	edd7 7a00 	vldr	s15, [r7]
 8001c18:	eeb0 7ae7 	vabs.f32	s14, s15
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ffbc 	bl	8001ba8 <setMaxSpeed>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	0000      	movs	r0, r0
 8001c3c:	0000      	movs	r0, r0
	...

08001c40 <setAcceleration>:
 * 	при значении 0 ускорение отключается и мотор работает
 * 	по профилю постоянной максимальной скорости setMaxSpeed().
 * 	по умолчанию 500 ш/с^2
 */
param_change_t setAcceleration(DRIVER_StructDef* driver, uint16_t accel)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
	if(driver->_workState == DRIVER_BUSY) return PARAM_CHANGE_ERR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7ddb      	ldrb	r3, [r3, #23]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d101      	bne.n	8001c58 <setAcceleration+0x18>
 8001c54:	2300      	movs	r3, #0
 8001c56:	e032      	b.n	8001cbe <setAcceleration+0x7e>

	driver->_accel = abs(accel);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	839a      	strh	r2, [r3, #28]

	/* Считаем значение _c0 и _N по алгоритму плавного старта */
	if(accel != 0)
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d027      	beq.n	8001cb4 <setAcceleration+0x74>
	{
		driver->_c0 = 1000000.0 * sqrt(2.0 / driver->_accel);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	8b9b      	ldrh	r3, [r3, #28]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc53 	bl	8000514 <__aeabi_i2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	f04f 0000 	mov.w	r0, #0
 8001c76:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c7a:	f7fe fddf 	bl	800083c <__aeabi_ddiv>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	ec43 2b17 	vmov	d7, r2, r3
 8001c86:	eeb0 0a47 	vmov.f32	s0, s14
 8001c8a:	eef0 0a67 	vmov.f32	s1, s15
 8001c8e:	f012 fb21 	bl	80142d4 <sqrt>
 8001c92:	ec51 0b10 	vmov	r0, r1, d0
 8001c96:	a30c      	add	r3, pc, #48	@ (adr r3, 8001cc8 <setAcceleration+0x88>)
 8001c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9c:	f7fe fca4 	bl	80005e8 <__aeabi_dmul>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe ff6e 	bl	8000b88 <__aeabi_d2f>
 8001cac:	4602      	mov	r2, r0
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001cb2:	e003      	b.n	8001cbc <setAcceleration+0x7c>
	}
	else driver->_c0 = 0;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	64da      	str	r2, [r3, #76]	@ 0x4c

	return PARAM_CHANGE_OK;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	412e8480 	.word	0x412e8480

08001cd0 <setAccelerationDeg>:
/** Установка ускорения в градусах в секунду^2 (для режима POSITION_MODE)
 * 	при значении 0 ускорение отключается и мотор работает
 * 	по профилю постоянной максимальной скорости setMaxSpeedDeg().
 */
param_change_t setAccelerationDeg(DRIVER_StructDef* driver, float accel)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	ed87 0a00 	vstr	s0, [r7]
	return setAcceleration(driver, accel * driver->_stepsPerDeg);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	ed93 7a06 	vldr	s14, [r3, #24]
 8001ce2:	edd7 7a00 	vldr	s15, [r7]
 8001ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cee:	ee17 3a90 	vmov	r3, s15
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa2 	bl	8001c40 <setAcceleration>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <getCurrentPosDeg>:
}

/** Чтение текущей позиции мотора в градусах
 */
float getCurrentPosDeg(DRIVER_StructDef* driver)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
	return ((float)driver->stepper->pos) / driver->_stepsPerDeg;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d26:	eef0 7a66 	vmov.f32	s15, s13
}
 8001d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <plannerVelocityMode>:
 * 	Если ускорение _accel = 0, то setSpeed(...) задает сразу скорость мотора
 * 	и старт будет резким!
 * 	Поддерживает горячую смену скорости
 */
void plannerVelocityMode(DRIVER_StructDef* driver)
{
 8001d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
	float err = driver->_targetSpeed - driver->_curSpeed;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d52:	edc7 7a03 	vstr	s15, [r7, #12]
	int8_t dir = driver->stepper->dir;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	7f1b      	ldrb	r3, [r3, #28]
 8001d5c:	72fb      	strb	r3, [r7, #11]

	if (driver->_stopFlag == true && fabs(driver->_curSpeed) <= MIN_STEP_SPEED)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d014      	beq.n	8001d92 <plannerVelocityMode+0x5a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001d6e:	eef0 7ae7 	vabs.f32	s15, s15
 8001d72:	ee17 0a90 	vmov	r0, s15
 8001d76:	f7fe fbdf 	bl	8000538 <__aeabi_f2d>
 8001d7a:	a39c      	add	r3, pc, #624	@ (adr r3, 8001fec <plannerVelocityMode+0x2b4>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe feae 	bl	8000ae0 <__aeabi_dcmple>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <plannerVelocityMode+0x5a>
	{
		brake(driver);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fcab 	bl	80016e6 <brake>
		return;
 8001d90:	e11a      	b.n	8001fc8 <plannerVelocityMode+0x290>
	}

	if (driver->tickUs - driver->_speedPlannerTime >= driver->stepTime)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d9a:	1ad2      	subs	r2, r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	f0c0 8111 	bcc.w	8001fc8 <plannerVelocityMode+0x290>
	{
		/* Обновление переменной времени планировщика */
		driver->_speedPlannerTime = driver->tickUs;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	63da      	str	r2, [r3, #60]	@ 0x3c

		/* Основная логика разгона/торможения/смены скорости */
		if(driver->_n == 0) driver->_cn = driver->_c0;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d104      	bne.n	8001dc0 <plannerVelocityMode+0x88>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dbe:	e0b8      	b.n	8001f32 <plannerVelocityMode+0x1fa>
		else if(driver->_n == 1) driver->_cn = 0.4056 * driver->_c0;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d113      	bne.n	8001df0 <plannerVelocityMode+0xb8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fbb3 	bl	8000538 <__aeabi_f2d>
 8001dd2:	a388      	add	r3, pc, #544	@ (adr r3, 8001ff4 <plannerVelocityMode+0x2bc>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fc06 	bl	80005e8 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	f7fe fed0 	bl	8000b88 <__aeabi_d2f>
 8001de8:	4602      	mov	r2, r0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dee:	e0a0      	b.n	8001f32 <plannerVelocityMode+0x1fa>
		else if(driver->_n > 1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	dd77      	ble.n	8001ee8 <plannerVelocityMode+0x1b0>
		{
			driver->_cn = driver->_cn * (1 - _signf(err * dir) * 2.0 / (4.0 * driver->_n + _signf(err * dir)));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fb9b 	bl	8000538 <__aeabi_f2d>
 8001e02:	4604      	mov	r4, r0
 8001e04:	460d      	mov	r5, r1
 8001e06:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1a:	ee17 0a90 	vmov	r0, s15
 8001e1e:	f7fe fb8b 	bl	8000538 <__aeabi_f2d>
 8001e22:	a36b      	add	r3, pc, #428	@ (adr r3, 8001fd0 <plannerVelocityMode+0x298>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	f7fe fe6e 	bl	8000b08 <__aeabi_dcmpgt>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <plannerVelocityMode+0x102>
 8001e32:	f04f 0000 	mov.w	r0, #0
 8001e36:	496a      	ldr	r1, [pc, #424]	@ (8001fe0 <plannerVelocityMode+0x2a8>)
 8001e38:	e002      	b.n	8001e40 <plannerVelocityMode+0x108>
 8001e3a:	f04f 0000 	mov.w	r0, #0
 8001e3e:	4969      	ldr	r1, [pc, #420]	@ (8001fe4 <plannerVelocityMode+0x2ac>)
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	f7fe fa1a 	bl	800027c <__adddf3>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4690      	mov	r8, r2
 8001e4e:	4699      	mov	r9, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb5d 	bl	8000514 <__aeabi_i2d>
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	4b62      	ldr	r3, [pc, #392]	@ (8001fe8 <plannerVelocityMode+0x2b0>)
 8001e60:	f7fe fbc2 	bl	80005e8 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4692      	mov	sl, r2
 8001e6a:	469b      	mov	fp, r3
 8001e6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001e70:	ee07 3a90 	vmov	s15, r3
 8001e74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e78:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e80:	ee17 0a90 	vmov	r0, s15
 8001e84:	f7fe fb58 	bl	8000538 <__aeabi_f2d>
 8001e88:	a351      	add	r3, pc, #324	@ (adr r3, 8001fd0 <plannerVelocityMode+0x298>)
 8001e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8e:	f7fe fe3b 	bl	8000b08 <__aeabi_dcmpgt>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <plannerVelocityMode+0x168>
 8001e98:	f04f 0000 	mov.w	r0, #0
 8001e9c:	4950      	ldr	r1, [pc, #320]	@ (8001fe0 <plannerVelocityMode+0x2a8>)
 8001e9e:	e002      	b.n	8001ea6 <plannerVelocityMode+0x16e>
 8001ea0:	f04f 0000 	mov.w	r0, #0
 8001ea4:	494f      	ldr	r1, [pc, #316]	@ (8001fe4 <plannerVelocityMode+0x2ac>)
 8001ea6:	4652      	mov	r2, sl
 8001ea8:	465b      	mov	r3, fp
 8001eaa:	f7fe f9e7 	bl	800027c <__adddf3>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4640      	mov	r0, r8
 8001eb4:	4649      	mov	r1, r9
 8001eb6:	f7fe fcc1 	bl	800083c <__aeabi_ddiv>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	f04f 0000 	mov.w	r0, #0
 8001ec2:	4947      	ldr	r1, [pc, #284]	@ (8001fe0 <plannerVelocityMode+0x2a8>)
 8001ec4:	f7fe f9d8 	bl	8000278 <__aeabi_dsub>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4620      	mov	r0, r4
 8001ece:	4629      	mov	r1, r5
 8001ed0:	f7fe fb8a 	bl	80005e8 <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7fe fe54 	bl	8000b88 <__aeabi_d2f>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ee6:	e024      	b.n	8001f32 <plannerVelocityMode+0x1fa>
		}
		else if(driver->_n < 0)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	da20      	bge.n	8001f32 <plannerVelocityMode+0x1fa>
		{
			driver->_curSpeed = 0;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	641a      	str	r2, [r3, #64]	@ 0x40

			if(driver->_stopFlag == true)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <plannerVelocityMode+0x1d2>
			{
				brake(driver);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fbef 	bl	80016e6 <brake>
				return;
 8001f08:	e05e      	b.n	8001fc8 <plannerVelocityMode+0x290>
			}
			else
			{
				driver->stepper->dir = _signf(driver->_targetSpeed);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fb12 	bl	8000538 <__aeabi_f2d>
 8001f14:	a32e      	add	r3, pc, #184	@ (adr r3, 8001fd0 <plannerVelocityMode+0x298>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	f7fe fdf5 	bl	8000b08 <__aeabi_dcmpgt>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <plannerVelocityMode+0x1f0>
 8001f24:	2201      	movs	r2, #1
 8001f26:	e001      	b.n	8001f2c <plannerVelocityMode+0x1f4>
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	771a      	strb	r2, [r3, #28]
			}
		}

		driver->stepTime = (uint32_t)(driver->_cn) - STEP_TIME;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f3c:	ee17 3a90 	vmov	r3, s15
 8001f40:	1f5a      	subs	r2, r3, #5
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	611a      	str	r2, [r3, #16]
		driver->_curSpeed = dir * 1000000.0 / driver->_cn;
 8001f46:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fae2 	bl	8000514 <__aeabi_i2d>
 8001f50:	a321      	add	r3, pc, #132	@ (adr r3, 8001fd8 <plannerVelocityMode+0x2a0>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe fb47 	bl	80005e8 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4614      	mov	r4, r2
 8001f60:	461d      	mov	r5, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fae6 	bl	8000538 <__aeabi_f2d>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4620      	mov	r0, r4
 8001f72:	4629      	mov	r1, r5
 8001f74:	f7fe fc62 	bl	800083c <__aeabi_ddiv>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7fe fe02 	bl	8000b88 <__aeabi_d2f>
 8001f84:	4602      	mov	r2, r0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	@ 0x40

		driver->_n += _signf(err * dir);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8001f8e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa2:	ee17 0a90 	vmov	r0, s15
 8001fa6:	f7fe fac7 	bl	8000538 <__aeabi_f2d>
 8001faa:	a309      	add	r3, pc, #36	@ (adr r3, 8001fd0 <plannerVelocityMode+0x298>)
 8001fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb0:	f7fe fdaa 	bl	8000b08 <__aeabi_dcmpgt>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <plannerVelocityMode+0x286>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e001      	b.n	8001fc2 <plannerVelocityMode+0x28a>
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	191a      	adds	r2, r3, r4
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54
	}
}
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fd0:	812dea11 	.word	0x812dea11
 8001fd4:	3d719799 	.word	0x3d719799
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	412e8480 	.word	0x412e8480
 8001fe0:	3ff00000 	.word	0x3ff00000
 8001fe4:	bff00000 	.word	0xbff00000
 8001fe8:	40100000 	.word	0x40100000
 8001fec:	789abcdf 	.word	0x789abcdf
 8001ff0:	3f323456 	.word	0x3f323456
 8001ff4:	b3d07c85 	.word	0xb3d07c85
 8001ff8:	3fd9f559 	.word	0x3fd9f559
 8001ffc:	00000000 	.word	0x00000000

08002000 <setSpeed>:

/** Установка целевой скорости в шагах/секунду (для режима VELOCITY_MODE)
 * 	В соответствии с минимальной скоростью, определенной в макросах
 */
param_change_t setSpeed(DRIVER_StructDef* driver, float speed)
{
 8002000:	b5b0      	push	{r4, r5, r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	ed87 0a00 	vstr	s0, [r7]
	/* Если драйвер в режиме POSITION_MODE */
	if(driver->_moveMode != VELOCITY_MODE) return PARAM_CHANGE_ERR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7d5b      	ldrb	r3, [r3, #21]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d001      	beq.n	8002018 <setSpeed+0x18>
 8002014:	2300      	movs	r3, #0
 8002016:	e0b6      	b.n	8002186 <setSpeed+0x186>

	driver->_targetSpeed = speed;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	645a      	str	r2, [r3, #68]	@ 0x44
	driver->_stopFlag = (driver->_targetSpeed == 0);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002024:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202c:	bf0c      	ite	eq
 800202e:	2301      	moveq	r3, #1
 8002030:	2300      	movne	r3, #0
 8002032:	b2da      	uxtb	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	if(driver->_targetSpeed == 0 && driver->_accel == 0)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002040:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002048:	d10b      	bne.n	8002062 <setSpeed+0x62>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	8b9b      	ldrh	r3, [r3, #28]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d107      	bne.n	8002062 <setSpeed+0x62>
	{
		driver->stepTime = 0;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
		brake(driver);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff fb44 	bl	80016e6 <brake>

		return PARAM_CHANGE_OK;
 800205e:	2301      	movs	r3, #1
 8002060:	e091      	b.n	8002186 <setSpeed+0x186>
	}

	driver->stepper->dir = (speed > 0) ? 1 : -1;
 8002062:	edd7 7a00 	vldr	s15, [r7]
 8002066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206e:	dd01      	ble.n	8002074 <setSpeed+0x74>
 8002070:	2201      	movs	r2, #1
 8002072:	e001      	b.n	8002078 <setSpeed+0x78>
 8002074:	f04f 32ff 	mov.w	r2, #4294967295
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	771a      	strb	r2, [r3, #28]

	/* Ограничение минимальной скорости */
	if (fabs(speed) < MIN_STEP_SPEED) driver->_targetSpeed = MIN_STEP_SPEED * driver->stepper->dir;
 800207e:	edd7 7a00 	vldr	s15, [r7]
 8002082:	eef0 7ae7 	vabs.f32	s15, s15
 8002086:	ee17 0a90 	vmov	r0, s15
 800208a:	f7fe fa55 	bl	8000538 <__aeabi_f2d>
 800208e:	a343      	add	r3, pc, #268	@ (adr r3, 800219c <setSpeed+0x19c>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe fd1a 	bl	8000acc <__aeabi_dcmplt>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d014      	beq.n	80020c8 <setSpeed+0xc8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	7f1b      	ldrb	r3, [r3, #28]
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fa34 	bl	8000514 <__aeabi_i2d>
 80020ac:	a33b      	add	r3, pc, #236	@ (adr r3, 800219c <setSpeed+0x19c>)
 80020ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b2:	f7fe fa99 	bl	80005e8 <__aeabi_dmul>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	f7fe fd63 	bl	8000b88 <__aeabi_d2f>
 80020c2:	4602      	mov	r2, r0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	645a      	str	r2, [r3, #68]	@ 0x44

	if(driver->_accel == 0)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	8b9b      	ldrh	r3, [r3, #28]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d125      	bne.n	800211c <setSpeed+0x11c>
	{
		driver->_curSpeed = driver->_targetSpeed;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	@ 0x40
		driver->stepTime = fabs(1000000.0 / driver->_targetSpeed) - STEP_TIME;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fa2b 	bl	8000538 <__aeabi_f2d>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	a12f      	add	r1, pc, #188	@ (adr r1, 80021a4 <setSpeed+0x1a4>)
 80020e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020ec:	f7fe fba6 	bl	800083c <__aeabi_ddiv>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4614      	mov	r4, r2
 80020f6:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	4b26      	ldr	r3, [pc, #152]	@ (8002198 <setSpeed+0x198>)
 8002100:	4620      	mov	r0, r4
 8002102:	4629      	mov	r1, r5
 8002104:	f7fe f8b8 	bl	8000278 <__aeabi_dsub>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	f7fe fd1a 	bl	8000b48 <__aeabi_d2uiz>
 8002114:	4602      	mov	r2, r0
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	611a      	str	r2, [r3, #16]
 800211a:	e030      	b.n	800217e <setSpeed+0x17e>
	}
	else
	{
		if(driver->_curSpeed == 0)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002122:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212a:	d114      	bne.n	8002156 <setSpeed+0x156>
		{
			driver->stepper->dir = _signf(driver->_targetSpeed);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fa01 	bl	8000538 <__aeabi_f2d>
 8002136:	a316      	add	r3, pc, #88	@ (adr r3, 8002190 <setSpeed+0x190>)
 8002138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213c:	f7fe fce4 	bl	8000b08 <__aeabi_dcmpgt>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <setSpeed+0x14a>
 8002146:	2201      	movs	r2, #1
 8002148:	e001      	b.n	800214e <setSpeed+0x14e>
 800214a:	f04f 32ff 	mov.w	r2, #4294967295
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	771a      	strb	r2, [r3, #28]
 8002154:	e013      	b.n	800217e <setSpeed+0x17e>
		}
		else driver->stepper->dir = _signf(driver->_curSpeed);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f9ec 	bl	8000538 <__aeabi_f2d>
 8002160:	a30b      	add	r3, pc, #44	@ (adr r3, 8002190 <setSpeed+0x190>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	f7fe fccf 	bl	8000b08 <__aeabi_dcmpgt>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <setSpeed+0x174>
 8002170:	2201      	movs	r2, #1
 8002172:	e001      	b.n	8002178 <setSpeed+0x178>
 8002174:	f04f 32ff 	mov.w	r2, #4294967295
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	771a      	strb	r2, [r3, #28]
	}

	driver->_workState = DRIVER_BUSY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	75da      	strb	r2, [r3, #23]

	return PARAM_CHANGE_OK;
 8002184:	2301      	movs	r3, #1
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bdb0      	pop	{r4, r5, r7, pc}
 800218e:	bf00      	nop
 8002190:	812dea11 	.word	0x812dea11
 8002194:	3d719799 	.word	0x3d719799
 8002198:	40140000 	.word	0x40140000
 800219c:	789abcdf 	.word	0x789abcdf
 80021a0:	3f323456 	.word	0x3f323456
 80021a4:	00000000 	.word	0x00000000
 80021a8:	412e8480 	.word	0x412e8480

080021ac <setSpeedDeg>:

/** Установка целевой скорости в градусах/секунду (для режима VELOCITY_MODE)
 */
param_change_t setSpeedDeg(DRIVER_StructDef* driver, float speed)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	ed87 0a00 	vstr	s0, [r7]
	return setSpeed(driver, speed * driver->_stepsPerDeg);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	ed93 7a06 	vldr	s14, [r3, #24]
 80021be:	edd7 7a00 	vldr	s15, [r7]
 80021c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ff18 	bl	8002000 <setSpeed>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <plannerInit>:

/** Инициализация планироващика
 *
 */
void plannerInit(PLANNER_StructDef* planner)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
	planner->status = 0;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	planner->speedAxis = 0;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
	planner->shift = 0;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
	planner->readyF = true;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
	planner->changeSett = 0;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800221e:	f001 fad1 	bl	80037c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002222:	f000 f877 	bl	8002314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002226:	f000 fb19 	bl	800285c <MX_GPIO_Init>
  MX_ADC1_Init();
 800222a:	f000 f8dd 	bl	80023e8 <MX_ADC1_Init>
  MX_CAN1_Init();
 800222e:	f000 f92d 	bl	800248c <MX_CAN1_Init>
  MX_DAC_Init();
 8002232:	f000 f95f 	bl	80024f4 <MX_DAC_Init>
  MX_I2C1_Init();
 8002236:	f000 f991 	bl	800255c <MX_I2C1_Init>
  MX_TIM13_Init();
 800223a:	f000 fa3f 	bl	80026bc <MX_TIM13_Init>
  MX_USART1_UART_Init();
 800223e:	f000 fa8b 	bl	8002758 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002242:	f000 fadd 	bl	8002800 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8002246:	f000 f9b7 	bl	80025b8 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 800224a:	f000 faaf 	bl	80027ac <MX_USART3_UART_Init>
  MX_LWIP_Init();
 800224e:	f005 ffbb 	bl	80081c8 <MX_LWIP_Init>
  MX_TIM2_Init();
 8002252:	f000 f9e7 	bl	8002624 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Инициализация таймер DWT для одного шага в библиотеке stepper.h */
  DWT_Init();
 8002256:	f7fe ffc7 	bl	80011e8 <DWT_Init>

  /* Инициализация указателей на функции HAL для работы библиотек stepper.h и driver.h */
  stepperFunctionsInit(function_pin_1);
 800225a:	4b20      	ldr	r3, [pc, #128]	@ (80022dc <main+0xc4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fffe 	bl	8001260 <stepperFunctionsInit>
  driverFunctionsInit(function_time_1, function_time_2, function_time_3, function_time_4);
 8002264:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <main+0xc8>)
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	4b1e      	ldr	r3, [pc, #120]	@ (80022e4 <main+0xcc>)
 800226a:	6819      	ldr	r1, [r3, #0]
 800226c:	4b1e      	ldr	r3, [pc, #120]	@ (80022e8 <main+0xd0>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b1e      	ldr	r3, [pc, #120]	@ (80022ec <main+0xd4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f7ff f8f6 	bl	8001464 <driverFunctionsInit>

  /* Инициализация шаговых моторов */
  stepperInit(&stepper1, &stepper1_pins);
 8002278:	491d      	ldr	r1, [pc, #116]	@ (80022f0 <main+0xd8>)
 800227a:	481e      	ldr	r0, [pc, #120]	@ (80022f4 <main+0xdc>)
 800227c:	f7ff f800 	bl	8001280 <stepperInit>
  stepperInit(&stepper2, &stepper2_pins);
 8002280:	491d      	ldr	r1, [pc, #116]	@ (80022f8 <main+0xe0>)
 8002282:	481e      	ldr	r0, [pc, #120]	@ (80022fc <main+0xe4>)
 8002284:	f7fe fffc 	bl	8001280 <stepperInit>

  /* Инициализация драйверов шаговых моторов */
  driverInit(&driver1, &stepper1, &driver1_pins, 1600, ROTATIONAL);
 8002288:	2301      	movs	r3, #1
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8002290:	4a1b      	ldr	r2, [pc, #108]	@ (8002300 <main+0xe8>)
 8002292:	4918      	ldr	r1, [pc, #96]	@ (80022f4 <main+0xdc>)
 8002294:	481b      	ldr	r0, [pc, #108]	@ (8002304 <main+0xec>)
 8002296:	f7ff f907 	bl	80014a8 <driverInit>
  driverInit(&driver2, &stepper2, &driver2_pins, 1600, ROTATIONAL);
 800229a:	2301      	movs	r3, #1
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 80022a2:	4a19      	ldr	r2, [pc, #100]	@ (8002308 <main+0xf0>)
 80022a4:	4915      	ldr	r1, [pc, #84]	@ (80022fc <main+0xe4>)
 80022a6:	4819      	ldr	r0, [pc, #100]	@ (800230c <main+0xf4>)
 80022a8:	f7ff f8fe 	bl	80014a8 <driverInit>

  /* Инициализация планировщика*/
  plannerInit(&planner);
 80022ac:	4818      	ldr	r0, [pc, #96]	@ (8002310 <main+0xf8>)
 80022ae:	f7ff ff94 	bl	80021da <plannerInit>
  /* Добавить драйверы в планировщик */
//  addDriver(&planner, &driver1, 0);
//  addDriver(&planner, &driver2, 1);

  /* Инициализация UDP сокета */
  udpSocketInit();
 80022b2:	f7fe fef9 	bl	80010a8 <udpSocketInit>

  /* Включение таймера TIM2 */
  startTimerTIM2();
 80022b6:	f000 fc1f 	bl	8002af8 <startTimerTIM2>

  /* Включить драйверы моторов */
  enableDriver(&driver1);
 80022ba:	4812      	ldr	r0, [pc, #72]	@ (8002304 <main+0xec>)
 80022bc:	f7ff f9f0 	bl	80016a0 <enableDriver>
  enableDriver(&driver2);
 80022c0:	4812      	ldr	r0, [pc, #72]	@ (800230c <main+0xf4>)
 80022c2:	f7ff f9ed 	bl	80016a0 <enableDriver>

  setMoveMode(&driver1, POSITION_MODE);
 80022c6:	2100      	movs	r1, #0
 80022c8:	480e      	ldr	r0, [pc, #56]	@ (8002304 <main+0xec>)
 80022ca:	f7ff f961 	bl	8001590 <setMoveMode>
//			  setTargetDeg(&driver1, target);
//		  }
//	  }

	  /* Основные функции управления драйверами */
	  tickDriver(&driver1);
 80022ce:	480d      	ldr	r0, [pc, #52]	@ (8002304 <main+0xec>)
 80022d0:	f7ff f994 	bl	80015fc <tickDriver>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Ethernet */
	  MX_LWIP_Process();
 80022d4:	f006 f8b8 	bl	8008448 <MX_LWIP_Process>
	  tickDriver(&driver1);
 80022d8:	bf00      	nop
 80022da:	e7f8      	b.n	80022ce <main+0xb6>
 80022dc:	20000000 	.word	0x20000000
 80022e0:	20000004 	.word	0x20000004
 80022e4:	20000008 	.word	0x20000008
 80022e8:	2000000c 	.word	0x2000000c
 80022ec:	20000010 	.word	0x20000010
 80022f0:	20000014 	.word	0x20000014
 80022f4:	200008f4 	.word	0x200008f4
 80022f8:	2000002c 	.word	0x2000002c
 80022fc:	20000914 	.word	0x20000914
 8002300:	20000044 	.word	0x20000044
 8002304:	20000934 	.word	0x20000934
 8002308:	2000005c 	.word	0x2000005c
 800230c:	20000994 	.word	0x20000994
 8002310:	200009f4 	.word	0x200009f4

08002314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b094      	sub	sp, #80	@ 0x50
 8002318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800231a:	f107 0320 	add.w	r3, r7, #32
 800231e:	2230      	movs	r2, #48	@ 0x30
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f011 f83b 	bl	801339e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	4b28      	ldr	r3, [pc, #160]	@ (80023e0 <SystemClock_Config+0xcc>)
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	4a27      	ldr	r2, [pc, #156]	@ (80023e0 <SystemClock_Config+0xcc>)
 8002342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002346:	6413      	str	r3, [r2, #64]	@ 0x40
 8002348:	4b25      	ldr	r3, [pc, #148]	@ (80023e0 <SystemClock_Config+0xcc>)
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002354:	2300      	movs	r3, #0
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	4b22      	ldr	r3, [pc, #136]	@ (80023e4 <SystemClock_Config+0xd0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a21      	ldr	r2, [pc, #132]	@ (80023e4 <SystemClock_Config+0xd0>)
 800235e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b1f      	ldr	r3, [pc, #124]	@ (80023e4 <SystemClock_Config+0xd0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002370:	2301      	movs	r3, #1
 8002372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002374:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002378:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800237a:	2302      	movs	r3, #2
 800237c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800237e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002382:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002384:	2304      	movs	r3, #4
 8002386:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002388:	23a8      	movs	r3, #168	@ 0xa8
 800238a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800238c:	2302      	movs	r3, #2
 800238e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002390:	2307      	movs	r3, #7
 8002392:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002394:	f107 0320 	add.w	r3, r7, #32
 8002398:	4618      	mov	r0, r3
 800239a:	f003 fded 	bl	8005f78 <HAL_RCC_OscConfig>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023a4:	f000 fcfe 	bl	8002da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a8:	230f      	movs	r3, #15
 80023aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ac:	2302      	movs	r3, #2
 80023ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	2105      	movs	r1, #5
 80023c6:	4618      	mov	r0, r3
 80023c8:	f004 f84e 	bl	8006468 <HAL_RCC_ClockConfig>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023d2:	f000 fce7 	bl	8002da4 <Error_Handler>
  }
}
 80023d6:	bf00      	nop
 80023d8:	3750      	adds	r7, #80	@ 0x50
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40007000 	.word	0x40007000

080023e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023ee:	463b      	mov	r3, r7
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80023fa:	4b21      	ldr	r3, [pc, #132]	@ (8002480 <MX_ADC1_Init+0x98>)
 80023fc:	4a21      	ldr	r2, [pc, #132]	@ (8002484 <MX_ADC1_Init+0x9c>)
 80023fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002400:	4b1f      	ldr	r3, [pc, #124]	@ (8002480 <MX_ADC1_Init+0x98>)
 8002402:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002406:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002408:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <MX_ADC1_Init+0x98>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800240e:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <MX_ADC1_Init+0x98>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002414:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <MX_ADC1_Init+0x98>)
 8002416:	2200      	movs	r2, #0
 8002418:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800241a:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <MX_ADC1_Init+0x98>)
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002422:	4b17      	ldr	r3, [pc, #92]	@ (8002480 <MX_ADC1_Init+0x98>)
 8002424:	2200      	movs	r2, #0
 8002426:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002428:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <MX_ADC1_Init+0x98>)
 800242a:	4a17      	ldr	r2, [pc, #92]	@ (8002488 <MX_ADC1_Init+0xa0>)
 800242c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800242e:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <MX_ADC1_Init+0x98>)
 8002430:	2200      	movs	r2, #0
 8002432:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002434:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <MX_ADC1_Init+0x98>)
 8002436:	2201      	movs	r2, #1
 8002438:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800243a:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <MX_ADC1_Init+0x98>)
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002442:	4b0f      	ldr	r3, [pc, #60]	@ (8002480 <MX_ADC1_Init+0x98>)
 8002444:	2201      	movs	r2, #1
 8002446:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002448:	480d      	ldr	r0, [pc, #52]	@ (8002480 <MX_ADC1_Init+0x98>)
 800244a:	f001 fa51 	bl	80038f0 <HAL_ADC_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002454:	f000 fca6 	bl	8002da4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002458:	2300      	movs	r3, #0
 800245a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800245c:	2301      	movs	r3, #1
 800245e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002464:	463b      	mov	r3, r7
 8002466:	4619      	mov	r1, r3
 8002468:	4805      	ldr	r0, [pc, #20]	@ (8002480 <MX_ADC1_Init+0x98>)
 800246a:	f001 fa85 	bl	8003978 <HAL_ADC_ConfigChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002474:	f000 fc96 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	200001c0 	.word	0x200001c0
 8002484:	40012000 	.word	0x40012000
 8002488:	0f000001 	.word	0x0f000001

0800248c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002490:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <MX_CAN1_Init+0x60>)
 8002492:	4a17      	ldr	r2, [pc, #92]	@ (80024f0 <MX_CAN1_Init+0x64>)
 8002494:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8002496:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <MX_CAN1_Init+0x60>)
 8002498:	2210      	movs	r2, #16
 800249a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800249c:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <MX_CAN1_Init+0x60>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80024a2:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <MX_CAN1_Init+0x60>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80024a8:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <MX_CAN1_Init+0x60>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80024ae:	4b0f      	ldr	r3, [pc, #60]	@ (80024ec <MX_CAN1_Init+0x60>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80024b4:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <MX_CAN1_Init+0x60>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80024ba:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <MX_CAN1_Init+0x60>)
 80024bc:	2200      	movs	r2, #0
 80024be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80024c0:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <MX_CAN1_Init+0x60>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80024c6:	4b09      	ldr	r3, [pc, #36]	@ (80024ec <MX_CAN1_Init+0x60>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80024cc:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <MX_CAN1_Init+0x60>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80024d2:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <MX_CAN1_Init+0x60>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80024d8:	4804      	ldr	r0, [pc, #16]	@ (80024ec <MX_CAN1_Init+0x60>)
 80024da:	f001 fc6b 	bl	8003db4 <HAL_CAN_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80024e4:	f000 fc5e 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000208 	.word	0x20000208
 80024f0:	40006400 	.word	0x40006400

080024f4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80024fa:	463b      	mov	r3, r7
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002502:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <MX_DAC_Init+0x60>)
 8002504:	4a14      	ldr	r2, [pc, #80]	@ (8002558 <MX_DAC_Init+0x64>)
 8002506:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002508:	4812      	ldr	r0, [pc, #72]	@ (8002554 <MX_DAC_Init+0x60>)
 800250a:	f001 fe60 	bl	80041ce <HAL_DAC_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002514:	f000 fc46 	bl	8002da4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002518:	2300      	movs	r3, #0
 800251a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002520:	463b      	mov	r3, r7
 8002522:	2200      	movs	r2, #0
 8002524:	4619      	mov	r1, r3
 8002526:	480b      	ldr	r0, [pc, #44]	@ (8002554 <MX_DAC_Init+0x60>)
 8002528:	f001 fe73 	bl	8004212 <HAL_DAC_ConfigChannel>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002532:	f000 fc37 	bl	8002da4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002536:	463b      	mov	r3, r7
 8002538:	2210      	movs	r2, #16
 800253a:	4619      	mov	r1, r3
 800253c:	4805      	ldr	r0, [pc, #20]	@ (8002554 <MX_DAC_Init+0x60>)
 800253e:	f001 fe68 	bl	8004212 <HAL_DAC_ConfigChannel>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002548:	f000 fc2c 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000230 	.word	0x20000230
 8002558:	40007400 	.word	0x40007400

0800255c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <MX_I2C1_Init+0x50>)
 8002562:	4a13      	ldr	r2, [pc, #76]	@ (80025b0 <MX_I2C1_Init+0x54>)
 8002564:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002566:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <MX_I2C1_Init+0x50>)
 8002568:	4a12      	ldr	r2, [pc, #72]	@ (80025b4 <MX_I2C1_Init+0x58>)
 800256a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800256c:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <MX_I2C1_Init+0x50>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002572:	4b0e      	ldr	r3, [pc, #56]	@ (80025ac <MX_I2C1_Init+0x50>)
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002578:	4b0c      	ldr	r3, [pc, #48]	@ (80025ac <MX_I2C1_Init+0x50>)
 800257a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800257e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002580:	4b0a      	ldr	r3, [pc, #40]	@ (80025ac <MX_I2C1_Init+0x50>)
 8002582:	2200      	movs	r2, #0
 8002584:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002586:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <MX_I2C1_Init+0x50>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800258c:	4b07      	ldr	r3, [pc, #28]	@ (80025ac <MX_I2C1_Init+0x50>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <MX_I2C1_Init+0x50>)
 8002594:	2200      	movs	r2, #0
 8002596:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002598:	4804      	ldr	r0, [pc, #16]	@ (80025ac <MX_I2C1_Init+0x50>)
 800259a:	f003 fa99 	bl	8005ad0 <HAL_I2C_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025a4:	f000 fbfe 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000244 	.word	0x20000244
 80025b0:	40005400 	.word	0x40005400
 80025b4:	000186a0 	.word	0x000186a0

080025b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80025bc:	4b17      	ldr	r3, [pc, #92]	@ (800261c <MX_SPI3_Init+0x64>)
 80025be:	4a18      	ldr	r2, [pc, #96]	@ (8002620 <MX_SPI3_Init+0x68>)
 80025c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80025c2:	4b16      	ldr	r3, [pc, #88]	@ (800261c <MX_SPI3_Init+0x64>)
 80025c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80025ca:	4b14      	ldr	r3, [pc, #80]	@ (800261c <MX_SPI3_Init+0x64>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80025d0:	4b12      	ldr	r3, [pc, #72]	@ (800261c <MX_SPI3_Init+0x64>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025d6:	4b11      	ldr	r3, [pc, #68]	@ (800261c <MX_SPI3_Init+0x64>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	@ (800261c <MX_SPI3_Init+0x64>)
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <MX_SPI3_Init+0x64>)
 80025e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025e8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025ea:	4b0c      	ldr	r3, [pc, #48]	@ (800261c <MX_SPI3_Init+0x64>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025f0:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <MX_SPI3_Init+0x64>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80025f6:	4b09      	ldr	r3, [pc, #36]	@ (800261c <MX_SPI3_Init+0x64>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025fc:	4b07      	ldr	r3, [pc, #28]	@ (800261c <MX_SPI3_Init+0x64>)
 80025fe:	2200      	movs	r2, #0
 8002600:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <MX_SPI3_Init+0x64>)
 8002604:	220a      	movs	r2, #10
 8002606:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002608:	4804      	ldr	r0, [pc, #16]	@ (800261c <MX_SPI3_Init+0x64>)
 800260a:	f004 f94d 	bl	80068a8 <HAL_SPI_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002614:	f000 fbc6 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000298 	.word	0x20000298
 8002620:	40003c00 	.word	0x40003c00

08002624 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262a:	f107 0308 	add.w	r3, r7, #8
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	609a      	str	r2, [r3, #8]
 8002636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002638:	463b      	mov	r3, r7
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002640:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <MX_TIM2_Init+0x94>)
 8002642:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002646:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002648:	4b1b      	ldr	r3, [pc, #108]	@ (80026b8 <MX_TIM2_Init+0x94>)
 800264a:	2253      	movs	r2, #83	@ 0x53
 800264c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264e:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <MX_TIM2_Init+0x94>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002654:	4b18      	ldr	r3, [pc, #96]	@ (80026b8 <MX_TIM2_Init+0x94>)
 8002656:	f04f 32ff 	mov.w	r2, #4294967295
 800265a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265c:	4b16      	ldr	r3, [pc, #88]	@ (80026b8 <MX_TIM2_Init+0x94>)
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002662:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <MX_TIM2_Init+0x94>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002668:	4813      	ldr	r0, [pc, #76]	@ (80026b8 <MX_TIM2_Init+0x94>)
 800266a:	f004 f9a6 	bl	80069ba <HAL_TIM_Base_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002674:	f000 fb96 	bl	8002da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002678:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800267c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800267e:	f107 0308 	add.w	r3, r7, #8
 8002682:	4619      	mov	r1, r3
 8002684:	480c      	ldr	r0, [pc, #48]	@ (80026b8 <MX_TIM2_Init+0x94>)
 8002686:	f004 fba1 	bl	8006dcc <HAL_TIM_ConfigClockSource>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002690:	f000 fb88 	bl	8002da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002694:	2300      	movs	r3, #0
 8002696:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800269c:	463b      	mov	r3, r7
 800269e:	4619      	mov	r1, r3
 80026a0:	4805      	ldr	r0, [pc, #20]	@ (80026b8 <MX_TIM2_Init+0x94>)
 80026a2:	f004 ff51 	bl	8007548 <HAL_TIMEx_MasterConfigSynchronization>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80026ac:	f000 fb7a 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026b0:	bf00      	nop
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	200002f0 	.word	0x200002f0

080026bc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
 80026d0:	615a      	str	r2, [r3, #20]
 80026d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80026d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002750 <MX_TIM13_Init+0x94>)
 80026d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002754 <MX_TIM13_Init+0x98>)
 80026d8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80026da:	4b1d      	ldr	r3, [pc, #116]	@ (8002750 <MX_TIM13_Init+0x94>)
 80026dc:	2200      	movs	r2, #0
 80026de:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002750 <MX_TIM13_Init+0x94>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80026e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <MX_TIM13_Init+0x94>)
 80026e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026ec:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ee:	4b18      	ldr	r3, [pc, #96]	@ (8002750 <MX_TIM13_Init+0x94>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f4:	4b16      	ldr	r3, [pc, #88]	@ (8002750 <MX_TIM13_Init+0x94>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80026fa:	4815      	ldr	r0, [pc, #84]	@ (8002750 <MX_TIM13_Init+0x94>)
 80026fc:	f004 f95d 	bl	80069ba <HAL_TIM_Base_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002706:	f000 fb4d 	bl	8002da4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800270a:	4811      	ldr	r0, [pc, #68]	@ (8002750 <MX_TIM13_Init+0x94>)
 800270c:	f004 fa43 	bl	8006b96 <HAL_TIM_PWM_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002716:	f000 fb45 	bl	8002da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800271a:	2360      	movs	r3, #96	@ 0x60
 800271c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	2200      	movs	r2, #0
 800272e:	4619      	mov	r1, r3
 8002730:	4807      	ldr	r0, [pc, #28]	@ (8002750 <MX_TIM13_Init+0x94>)
 8002732:	f004 fa89 	bl	8006c48 <HAL_TIM_PWM_ConfigChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800273c:	f000 fb32 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002740:	4803      	ldr	r0, [pc, #12]	@ (8002750 <MX_TIM13_Init+0x94>)
 8002742:	f000 fcf3 	bl	800312c <HAL_TIM_MspPostInit>

}
 8002746:	bf00      	nop
 8002748:	3720      	adds	r7, #32
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000338 	.word	0x20000338
 8002754:	40001c00 	.word	0x40001c00

08002758 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800275c:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <MX_USART1_UART_Init+0x4c>)
 800275e:	4a12      	ldr	r2, [pc, #72]	@ (80027a8 <MX_USART1_UART_Init+0x50>)
 8002760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002762:	4b10      	ldr	r3, [pc, #64]	@ (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800276a:	4b0e      	ldr	r3, [pc, #56]	@ (80027a4 <MX_USART1_UART_Init+0x4c>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002776:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800277c:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <MX_USART1_UART_Init+0x4c>)
 800277e:	220c      	movs	r2, #12
 8002780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002782:	4b08      	ldr	r3, [pc, #32]	@ (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002788:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <MX_USART1_UART_Init+0x4c>)
 800278a:	2200      	movs	r2, #0
 800278c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800278e:	4805      	ldr	r0, [pc, #20]	@ (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002790:	f004 ff56 	bl	8007640 <HAL_UART_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800279a:	f000 fb03 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000380 	.word	0x20000380
 80027a8:	40011000 	.word	0x40011000

080027ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027b0:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <MX_USART3_UART_Init+0x4c>)
 80027b2:	4a12      	ldr	r2, [pc, #72]	@ (80027fc <MX_USART3_UART_Init+0x50>)
 80027b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <MX_USART3_UART_Init+0x4c>)
 80027b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027be:	4b0e      	ldr	r3, [pc, #56]	@ (80027f8 <MX_USART3_UART_Init+0x4c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <MX_USART3_UART_Init+0x4c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027ca:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <MX_USART3_UART_Init+0x4c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <MX_USART3_UART_Init+0x4c>)
 80027d2:	220c      	movs	r2, #12
 80027d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d6:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <MX_USART3_UART_Init+0x4c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <MX_USART3_UART_Init+0x4c>)
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027e2:	4805      	ldr	r0, [pc, #20]	@ (80027f8 <MX_USART3_UART_Init+0x4c>)
 80027e4:	f004 ff2c 	bl	8007640 <HAL_UART_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80027ee:	f000 fad9 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200003c8 	.word	0x200003c8
 80027fc:	40004800 	.word	0x40004800

08002800 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002804:	4b14      	ldr	r3, [pc, #80]	@ (8002858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002806:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800280a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800280c:	4b12      	ldr	r3, [pc, #72]	@ (8002858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800280e:	2204      	movs	r2, #4
 8002810:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002812:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002814:	2202      	movs	r2, #2
 8002816:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002818:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800281a:	2200      	movs	r2, #0
 800281c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800281e:	4b0e      	ldr	r3, [pc, #56]	@ (8002858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002820:	2202      	movs	r2, #2
 8002822:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002824:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002826:	2200      	movs	r2, #0
 8002828:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800282a:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800282c:	2200      	movs	r2, #0
 800282e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002830:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002832:	2200      	movs	r2, #0
 8002834:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002836:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002838:	2200      	movs	r2, #0
 800283a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800283c:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800283e:	2200      	movs	r2, #0
 8002840:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002842:	4805      	ldr	r0, [pc, #20]	@ (8002858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002844:	f003 fa88 	bl	8005d58 <HAL_PCD_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800284e:	f000 faa9 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000410 	.word	0x20000410

0800285c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	@ 0x30
 8002860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002862:	f107 031c 	add.w	r3, r7, #28
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	4b9a      	ldr	r3, [pc, #616]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	4a99      	ldr	r2, [pc, #612]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 800287c:	f043 0310 	orr.w	r3, r3, #16
 8002880:	6313      	str	r3, [r2, #48]	@ 0x30
 8002882:	4b97      	ldr	r3, [pc, #604]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	4b93      	ldr	r3, [pc, #588]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	4a92      	ldr	r2, [pc, #584]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	6313      	str	r3, [r2, #48]	@ 0x30
 800289e:	4b90      	ldr	r3, [pc, #576]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	4b8c      	ldr	r3, [pc, #560]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	4a8b      	ldr	r2, [pc, #556]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 80028b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ba:	4b89      	ldr	r3, [pc, #548]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	4b85      	ldr	r3, [pc, #532]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	4a84      	ldr	r2, [pc, #528]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d6:	4b82      	ldr	r3, [pc, #520]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	4b7e      	ldr	r3, [pc, #504]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4a7d      	ldr	r2, [pc, #500]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	4b77      	ldr	r3, [pc, #476]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	4a76      	ldr	r2, [pc, #472]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 8002908:	f043 0308 	orr.w	r3, r3, #8
 800290c:	6313      	str	r3, [r2, #48]	@ 0x30
 800290e:	4b74      	ldr	r3, [pc, #464]	@ (8002ae0 <MX_GPIO_Init+0x284>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ZERO_POS2_Pin|DIR1_Pin|DIR2_Pin|STEP1_Pin
 800291a:	2200      	movs	r2, #0
 800291c:	f64f 7188 	movw	r1, #65416	@ 0xff88
 8002920:	4870      	ldr	r0, [pc, #448]	@ (8002ae4 <MX_GPIO_Init+0x288>)
 8002922:	f003 f8bb 	bl	8005a9c <HAL_GPIO_WritePin>
                          |DIR3_Pin|STEP2_Pin|DIR4_Pin|STEP3_Pin
                          |STEP4_Pin|DIR5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ACK_LINE0_Pin|ACK_LINE1_Pin|ACK_LINE2_Pin|STEP6_Pin, GPIO_PIN_RESET);
 8002926:	2200      	movs	r2, #0
 8002928:	f24e 0180 	movw	r1, #57472	@ 0xe080
 800292c:	486e      	ldr	r0, [pc, #440]	@ (8002ae8 <MX_GPIO_Init+0x28c>)
 800292e:	f003 f8b5 	bl	8005a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP7_Pin|STEP8_Pin|DIR6_Pin|DIR7_Pin
 8002932:	2200      	movs	r2, #0
 8002934:	f24c 7113 	movw	r1, #50963	@ 0xc713
 8002938:	486c      	ldr	r0, [pc, #432]	@ (8002aec <MX_GPIO_Init+0x290>)
 800293a:	f003 f8af 	bl	8005a9c <HAL_GPIO_WritePin>
                          |DIR8_Pin|STEP5_Pin|SPI3_NSS1_Pin|SPI3_NSS0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATE_Pin|SPI3_NSS2_Pin, GPIO_PIN_RESET);
 800293e:	2200      	movs	r2, #0
 8002940:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8002944:	486a      	ldr	r0, [pc, #424]	@ (8002af0 <MX_GPIO_Init+0x294>)
 8002946:	f003 f8a9 	bl	8005a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(READY_GPIO_Port, READY_Pin, GPIO_PIN_RESET);
 800294a:	2200      	movs	r2, #0
 800294c:	2108      	movs	r1, #8
 800294e:	4869      	ldr	r0, [pc, #420]	@ (8002af4 <MX_GPIO_Init+0x298>)
 8002950:	f003 f8a4 	bl	8005a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ZERO_POS3_Pin ZERO_POS1_Pin ZERO_POS4_Pin */
  GPIO_InitStruct.Pin = ZERO_POS3_Pin|ZERO_POS1_Pin|ZERO_POS4_Pin;
 8002954:	2345      	movs	r3, #69	@ 0x45
 8002956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002958:	2300      	movs	r3, #0
 800295a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4619      	mov	r1, r3
 8002966:	485f      	ldr	r0, [pc, #380]	@ (8002ae4 <MX_GPIO_Init+0x288>)
 8002968:	f002 fefc 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZERO_POS2_Pin */
  GPIO_InitStruct.Pin = ZERO_POS2_Pin;
 800296c:	2308      	movs	r3, #8
 800296e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002970:	2301      	movs	r3, #1
 8002972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002978:	2300      	movs	r3, #0
 800297a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ZERO_POS2_GPIO_Port, &GPIO_InitStruct);
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	4619      	mov	r1, r3
 8002982:	4858      	ldr	r0, [pc, #352]	@ (8002ae4 <MX_GPIO_Init+0x288>)
 8002984:	f002 feee 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_4_LS3_P_Pin EXTI_5_LS3_N_Pin EXTI_1_LS1_N_Pin */
  GPIO_InitStruct.Pin = EXTI_4_LS3_P_Pin|EXTI_5_LS3_N_Pin|EXTI_1_LS1_N_Pin;
 8002988:	2332      	movs	r3, #50	@ 0x32
 800298a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800298c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002996:	f107 031c 	add.w	r3, r7, #28
 800299a:	4619      	mov	r1, r3
 800299c:	4851      	ldr	r0, [pc, #324]	@ (8002ae4 <MX_GPIO_Init+0x288>)
 800299e:	f002 fee1 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACK_LINE0_Pin ACK_LINE1_Pin ACK_LINE2_Pin */
  GPIO_InitStruct.Pin = ACK_LINE0_Pin|ACK_LINE1_Pin|ACK_LINE2_Pin;
 80029a2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80029a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a8:	2301      	movs	r3, #1
 80029aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	4619      	mov	r1, r3
 80029ba:	484b      	ldr	r0, [pc, #300]	@ (8002ae8 <MX_GPIO_Init+0x28c>)
 80029bc:	f002 fed2 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_0_LS1_P_Pin EXTI_2_LS2_P_Pin EXTI_3_LS2_N_Pin EXTI_6_LS4_P_Pin
                           EXTI_8_LS5_P_Pin EXTI_9_LS5_N_Pin */
  GPIO_InitStruct.Pin = EXTI_0_LS1_P_Pin|EXTI_2_LS2_P_Pin|EXTI_3_LS2_N_Pin|EXTI_6_LS4_P_Pin
 80029c0:	f240 334d 	movw	r3, #845	@ 0x34d
 80029c4:	61fb      	str	r3, [r7, #28]
                          |EXTI_8_LS5_P_Pin|EXTI_9_LS5_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d0:	f107 031c 	add.w	r3, r7, #28
 80029d4:	4619      	mov	r1, r3
 80029d6:	4844      	ldr	r0, [pc, #272]	@ (8002ae8 <MX_GPIO_Init+0x28c>)
 80029d8:	f002 fec4 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP7_Pin STEP8_Pin DIR6_Pin DIR7_Pin
                           DIR8_Pin STEP5_Pin */
  GPIO_InitStruct.Pin = STEP7_Pin|STEP8_Pin|DIR6_Pin|DIR7_Pin
 80029dc:	f24c 4313 	movw	r3, #50195	@ 0xc413
 80029e0:	61fb      	str	r3, [r7, #28]
                          |DIR8_Pin|STEP5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e2:	2301      	movs	r3, #1
 80029e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ea:	2303      	movs	r3, #3
 80029ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ee:	f107 031c 	add.w	r3, r7, #28
 80029f2:	4619      	mov	r1, r3
 80029f4:	483d      	ldr	r0, [pc, #244]	@ (8002aec <MX_GPIO_Init+0x290>)
 80029f6:	f002 feb5 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_Pin DIR2_Pin STEP1_Pin DIR3_Pin
                           STEP2_Pin DIR4_Pin STEP3_Pin STEP4_Pin
                           DIR5_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|STEP1_Pin|DIR3_Pin
 80029fa:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80029fe:	61fb      	str	r3, [r7, #28]
                          |STEP2_Pin|DIR4_Pin|STEP3_Pin|STEP4_Pin
                          |DIR5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a00:	2301      	movs	r3, #1
 8002a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a0c:	f107 031c 	add.w	r3, r7, #28
 8002a10:	4619      	mov	r1, r3
 8002a12:	4834      	ldr	r0, [pc, #208]	@ (8002ae4 <MX_GPIO_Init+0x288>)
 8002a14:	f002 fea6 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_10_LS6_P_Pin EXTI_11_LS6_N_Pin EXTI_12_LS7_P_Pin EXTI_13_LS7_N_Pin
                           EXTI_14_LS8_P_Pin EXTI_15_LS8_N_Pin EXTI_7_LS4_N_Pin */
  GPIO_InitStruct.Pin = EXTI_10_LS6_P_Pin|EXTI_11_LS6_N_Pin|EXTI_12_LS7_P_Pin|EXTI_13_LS7_N_Pin
 8002a18:	f64f 4380 	movw	r3, #64640	@ 0xfc80
 8002a1c:	61fb      	str	r3, [r7, #28]
                          |EXTI_14_LS8_P_Pin|EXTI_15_LS8_N_Pin|EXTI_7_LS4_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a28:	f107 031c 	add.w	r3, r7, #28
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4831      	ldr	r0, [pc, #196]	@ (8002af4 <MX_GPIO_Init+0x298>)
 8002a30:	f002 fe98 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP6_Pin */
  GPIO_InitStruct.Pin = STEP6_Pin;
 8002a34:	2380      	movs	r3, #128	@ 0x80
 8002a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP6_GPIO_Port, &GPIO_InitStruct);
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4827      	ldr	r0, [pc, #156]	@ (8002ae8 <MX_GPIO_Init+0x28c>)
 8002a4c:	f002 fe8a 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATE_Pin SPI3_NSS2_Pin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|SPI3_NSS2_Pin;
 8002a50:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8002a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a56:	2301      	movs	r3, #1
 8002a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a62:	f107 031c 	add.w	r3, r7, #28
 8002a66:	4619      	mov	r1, r3
 8002a68:	4821      	ldr	r0, [pc, #132]	@ (8002af0 <MX_GPIO_Init+0x294>)
 8002a6a:	f002 fe7b 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : STARTUP_OPTION1_Pin ZERO_POS8_Pin ZERO_POS7_Pin ZERO_POS6_Pin */
  GPIO_InitStruct.Pin = STARTUP_OPTION1_Pin|ZERO_POS8_Pin|ZERO_POS7_Pin|ZERO_POS6_Pin;
 8002a6e:	2374      	movs	r3, #116	@ 0x74
 8002a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a72:	2300      	movs	r3, #0
 8002a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a7a:	f107 031c 	add.w	r3, r7, #28
 8002a7e:	4619      	mov	r1, r3
 8002a80:	481c      	ldr	r0, [pc, #112]	@ (8002af4 <MX_GPIO_Init+0x298>)
 8002a82:	f002 fe6f 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_Pin */
  GPIO_InitStruct.Pin = READY_Pin;
 8002a86:	2308      	movs	r3, #8
 8002a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(READY_GPIO_Port, &GPIO_InitStruct);
 8002a96:	f107 031c 	add.w	r3, r7, #28
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4815      	ldr	r0, [pc, #84]	@ (8002af4 <MX_GPIO_Init+0x298>)
 8002a9e:	f002 fe61 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZERO_POS5_Pin */
  GPIO_InitStruct.Pin = ZERO_POS5_Pin;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ZERO_POS5_GPIO_Port, &GPIO_InitStruct);
 8002aae:	f107 031c 	add.w	r3, r7, #28
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	480d      	ldr	r0, [pc, #52]	@ (8002aec <MX_GPIO_Init+0x290>)
 8002ab6:	f002 fe55 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_NSS1_Pin SPI3_NSS0_Pin */
  GPIO_InitStruct.Pin = SPI3_NSS1_Pin|SPI3_NSS0_Pin;
 8002aba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002acc:	f107 031c 	add.w	r3, r7, #28
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4806      	ldr	r0, [pc, #24]	@ (8002aec <MX_GPIO_Init+0x290>)
 8002ad4:	f002 fe46 	bl	8005764 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002ad8:	bf00      	nop
 8002ada:	3730      	adds	r7, #48	@ 0x30
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40020800 	.word	0x40020800
 8002aec:	40020400 	.word	0x40020400
 8002af0:	40020000 	.word	0x40020000
 8002af4:	40020c00 	.word	0x40020c00

08002af8 <startTimerTIM2>:

/** Запуск таймера для отсчета времени в микросекундах
 * 	Используется таймер TIM2
 */
void startTimerTIM2(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002afc:	4802      	ldr	r0, [pc, #8]	@ (8002b08 <startTimerTIM2+0x10>)
 8002afe:	f003 ffab 	bl	8006a58 <HAL_TIM_Base_Start_IT>
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200002f0 	.word	0x200002f0

08002b0c <stopTimerTIM2>:

/** Остановка таймера для отсчета времени в микросекундах
 * 	Используется таймер TIM2
 */
void stopTimerTIM2(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 8002b10:	4802      	ldr	r0, [pc, #8]	@ (8002b1c <stopTimerTIM2+0x10>)
 8002b12:	f004 f811 	bl	8006b38 <HAL_TIM_Base_Stop_IT>
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200002f0 	.word	0x200002f0

08002b20 <resetTimerTIM2>:

/** Функция сброса счетчика таймера в 0
 * 	Используется таймер TIM2
 */
void resetTimerTIM2(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 8002b24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b28:	2200      	movs	r2, #0
 8002b2a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <getMicrosecondsTIM2>:
 * Используется таймер TIM2
 * Частота работы таймера 1МГц
 * 1 тик таймера = 1 мкс
 */
uint32_t getMicrosecondsTIM2(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
	return TIM2->CNT;
 8002b3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <udpReceiveHandler>:

/**
 *
 */
void udpReceiveHandler(void)
{
 8002b4c:	b5b0      	push	{r4, r5, r7, lr}
 8002b4e:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8002b52:	af04      	add	r7, sp, #16
	if(rxBuf[0] == 'T' && rxBuf[1] == 'S')
 8002b54:	4b87      	ldr	r3, [pc, #540]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b54      	cmp	r3, #84	@ 0x54
 8002b5a:	d128      	bne.n	8002bae <udpReceiveHandler+0x62>
 8002b5c:	4b85      	ldr	r3, [pc, #532]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002b5e:	785b      	ldrb	r3, [r3, #1]
 8002b60:	2b53      	cmp	r3, #83	@ 0x53
 8002b62:	d124      	bne.n	8002bae <udpReceiveHandler+0x62>
	{
		int16_t speed = strtol(&rxBuf[2], NULL, 10);
 8002b64:	220a      	movs	r2, #10
 8002b66:	2100      	movs	r1, #0
 8002b68:	4883      	ldr	r0, [pc, #524]	@ (8002d78 <udpReceiveHandler+0x22c>)
 8002b6a:	f010 faab 	bl	80130c4 <strtol>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
		setSpeedDeg(&driver1, speed);
 8002b74:	f9b7 320e 	ldrsh.w	r3, [r7, #526]	@ 0x20e
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b80:	eeb0 0a67 	vmov.f32	s0, s15
 8002b84:	487d      	ldr	r0, [pc, #500]	@ (8002d7c <udpReceiveHandler+0x230>)
 8002b86:	f7ff fb11 	bl	80021ac <setSpeedDeg>

		char data[256];
		sprintf(data, "STM32: Target velocity = %d; Counter received message = %d;\n", speed, counter);
 8002b8a:	f9b7 220e 	ldrsh.w	r2, [r7, #526]	@ 0x20e
 8002b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d80 <udpReceiveHandler+0x234>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4638      	mov	r0, r7
 8002b94:	497b      	ldr	r1, [pc, #492]	@ (8002d84 <udpReceiveHandler+0x238>)
 8002b96:	f010 fb73 	bl	8013280 <siprintf>
		udpClientSend(data);
 8002b9a:	463b      	mov	r3, r7
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fae1 	bl	8001164 <udpClientSend>

		memset(rxBuf, 0, 128);
 8002ba2:	2280      	movs	r2, #128	@ 0x80
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4873      	ldr	r0, [pc, #460]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002ba8:	f010 fbf9 	bl	801339e <memset>
 8002bac:	e0dd      	b.n	8002d6a <udpReceiveHandler+0x21e>
		return;
	}

	if(rxBuf[0] == 'M' && rxBuf[1] == 'S')
 8002bae:	4b71      	ldr	r3, [pc, #452]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b4d      	cmp	r3, #77	@ 0x4d
 8002bb4:	d128      	bne.n	8002c08 <udpReceiveHandler+0xbc>
 8002bb6:	4b6f      	ldr	r3, [pc, #444]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002bb8:	785b      	ldrb	r3, [r3, #1]
 8002bba:	2b53      	cmp	r3, #83	@ 0x53
 8002bbc:	d124      	bne.n	8002c08 <udpReceiveHandler+0xbc>
	{
		uint16_t speed = strtol(&rxBuf[2], NULL, 10);
 8002bbe:	220a      	movs	r2, #10
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	486d      	ldr	r0, [pc, #436]	@ (8002d78 <udpReceiveHandler+0x22c>)
 8002bc4:	f010 fa7e 	bl	80130c4 <strtol>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f8a7 320c 	strh.w	r3, [r7, #524]	@ 0x20c
		setMaxSpeedDeg(&driver1, speed);
 8002bce:	f8b7 320c 	ldrh.w	r3, [r7, #524]	@ 0x20c
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bda:	eeb0 0a67 	vmov.f32	s0, s15
 8002bde:	4867      	ldr	r0, [pc, #412]	@ (8002d7c <udpReceiveHandler+0x230>)
 8002be0:	f7ff f812 	bl	8001c08 <setMaxSpeedDeg>

		char data[256];
		sprintf(data, "STM32: Max speed = %d; Counter received message = %d;\n", speed, counter);
 8002be4:	f8b7 220c 	ldrh.w	r2, [r7, #524]	@ 0x20c
 8002be8:	4b65      	ldr	r3, [pc, #404]	@ (8002d80 <udpReceiveHandler+0x234>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4638      	mov	r0, r7
 8002bee:	4966      	ldr	r1, [pc, #408]	@ (8002d88 <udpReceiveHandler+0x23c>)
 8002bf0:	f010 fb46 	bl	8013280 <siprintf>
		udpClientSend(data);
 8002bf4:	463b      	mov	r3, r7
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fab4 	bl	8001164 <udpClientSend>

		memset(rxBuf, 0, 128);
 8002bfc:	2280      	movs	r2, #128	@ 0x80
 8002bfe:	2100      	movs	r1, #0
 8002c00:	485c      	ldr	r0, [pc, #368]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002c02:	f010 fbcc 	bl	801339e <memset>
 8002c06:	e0b0      	b.n	8002d6a <udpReceiveHandler+0x21e>
		return;
	}

	if(rxBuf[0] == 'G' && rxBuf[1] == 'P')
 8002c08:	4b5a      	ldr	r3, [pc, #360]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b47      	cmp	r3, #71	@ 0x47
 8002c0e:	d11c      	bne.n	8002c4a <udpReceiveHandler+0xfe>
 8002c10:	4b58      	ldr	r3, [pc, #352]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002c12:	785b      	ldrb	r3, [r3, #1]
 8002c14:	2b50      	cmp	r3, #80	@ 0x50
 8002c16:	d118      	bne.n	8002c4a <udpReceiveHandler+0xfe>
	{
		char data[256];
		sprintf(data, "STM32: Current position = %ld; Counter received message = %d;\n", (long int)getCurrentPosDeg(&driver1), counter);
 8002c18:	4858      	ldr	r0, [pc, #352]	@ (8002d7c <udpReceiveHandler+0x230>)
 8002c1a:	f7ff f874 	bl	8001d06 <getCurrentPosDeg>
 8002c1e:	eef0 7a40 	vmov.f32	s15, s0
 8002c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c26:	4b56      	ldr	r3, [pc, #344]	@ (8002d80 <udpReceiveHandler+0x234>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4638      	mov	r0, r7
 8002c2c:	ee17 2a90 	vmov	r2, s15
 8002c30:	4956      	ldr	r1, [pc, #344]	@ (8002d8c <udpReceiveHandler+0x240>)
 8002c32:	f010 fb25 	bl	8013280 <siprintf>
		udpClientSend(data);
 8002c36:	463b      	mov	r3, r7
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe fa93 	bl	8001164 <udpClientSend>

		memset(rxBuf, 0, 128);
 8002c3e:	2280      	movs	r2, #128	@ 0x80
 8002c40:	2100      	movs	r1, #0
 8002c42:	484c      	ldr	r0, [pc, #304]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002c44:	f010 fbab 	bl	801339e <memset>
 8002c48:	e08f      	b.n	8002d6a <udpReceiveHandler+0x21e>
		return;
	}

	if(rxBuf[0] == 'A')
 8002c4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b41      	cmp	r3, #65	@ 0x41
 8002c50:	d124      	bne.n	8002c9c <udpReceiveHandler+0x150>
	{
		uint16_t acceleration = strtol(&rxBuf[1], NULL, 10);
 8002c52:	220a      	movs	r2, #10
 8002c54:	2100      	movs	r1, #0
 8002c56:	484e      	ldr	r0, [pc, #312]	@ (8002d90 <udpReceiveHandler+0x244>)
 8002c58:	f010 fa34 	bl	80130c4 <strtol>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f8a7 3202 	strh.w	r3, [r7, #514]	@ 0x202
		setAccelerationDeg(&driver1, acceleration);
 8002c62:	f8b7 3202 	ldrh.w	r3, [r7, #514]	@ 0x202
 8002c66:	ee07 3a90 	vmov	s15, r3
 8002c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c72:	4842      	ldr	r0, [pc, #264]	@ (8002d7c <udpReceiveHandler+0x230>)
 8002c74:	f7ff f82c 	bl	8001cd0 <setAccelerationDeg>

		char data[256];
		sprintf(data, "STM32: Acceleration = %d; Counter received message = %d;\n", acceleration, counter);
 8002c78:	f8b7 2202 	ldrh.w	r2, [r7, #514]	@ 0x202
 8002c7c:	4b40      	ldr	r3, [pc, #256]	@ (8002d80 <udpReceiveHandler+0x234>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4638      	mov	r0, r7
 8002c82:	4944      	ldr	r1, [pc, #272]	@ (8002d94 <udpReceiveHandler+0x248>)
 8002c84:	f010 fafc 	bl	8013280 <siprintf>
		udpClientSend(data);
 8002c88:	463b      	mov	r3, r7
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe fa6a 	bl	8001164 <udpClientSend>

		memset(rxBuf, 0, 128);
 8002c90:	2280      	movs	r2, #128	@ 0x80
 8002c92:	2100      	movs	r1, #0
 8002c94:	4837      	ldr	r0, [pc, #220]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002c96:	f010 fb82 	bl	801339e <memset>
 8002c9a:	e066      	b.n	8002d6a <udpReceiveHandler+0x21e>
		return;
	}

	if(rxBuf[0] == 'T' && rxBuf[1] == 'P')
 8002c9c:	4b35      	ldr	r3, [pc, #212]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b54      	cmp	r3, #84	@ 0x54
 8002ca2:	d143      	bne.n	8002d2c <udpReceiveHandler+0x1e0>
 8002ca4:	4b33      	ldr	r3, [pc, #204]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	2b50      	cmp	r3, #80	@ 0x50
 8002caa:	d13f      	bne.n	8002d2c <udpReceiveHandler+0x1e0>
	{
		int16_t target_pos = strtol(&rxBuf[2], NULL, 10);
 8002cac:	220a      	movs	r2, #10
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4831      	ldr	r0, [pc, #196]	@ (8002d78 <udpReceiveHandler+0x22c>)
 8002cb2:	f010 fa07 	bl	80130c4 <strtol>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
		setTargetPosDeg(&driver1, target_pos);
 8002cbc:	f9b7 320a 	ldrsh.w	r3, [r7, #522]	@ 0x20a
 8002cc0:	ee07 3a90 	vmov	s15, r3
 8002cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ccc:	482b      	ldr	r0, [pc, #172]	@ (8002d7c <udpReceiveHandler+0x230>)
 8002cce:	f7fe ff4f 	bl	8001b70 <setTargetPosDeg>

		char data[512];
		sprintf(data, "%d - STM32: Target position (steps) = %ld; s1 = %ld; s2 = %ld; s3 = %ld; N = %ld;\n", counter, (int32_t)(target_pos * driver1._stepsPerDeg), driver1._s1, driver1._s2, driver1._s3, driver1.N);
 8002cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d80 <udpReceiveHandler+0x234>)
 8002cd4:	681d      	ldr	r5, [r3, #0]
 8002cd6:	f9b7 320a 	ldrsh.w	r3, [r7, #522]	@ 0x20a
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ce2:	4b26      	ldr	r3, [pc, #152]	@ (8002d7c <udpReceiveHandler+0x230>)
 8002ce4:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf0:	4b22      	ldr	r3, [pc, #136]	@ (8002d7c <udpReceiveHandler+0x230>)
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf4:	4a21      	ldr	r2, [pc, #132]	@ (8002d7c <udpReceiveHandler+0x230>)
 8002cf6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002cf8:	4920      	ldr	r1, [pc, #128]	@ (8002d7c <udpReceiveHandler+0x230>)
 8002cfa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8002cfc:	481f      	ldr	r0, [pc, #124]	@ (8002d7c <udpReceiveHandler+0x230>)
 8002cfe:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8002d00:	463c      	mov	r4, r7
 8002d02:	9003      	str	r0, [sp, #12]
 8002d04:	9102      	str	r1, [sp, #8]
 8002d06:	9201      	str	r2, [sp, #4]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	ee17 3a90 	vmov	r3, s15
 8002d0e:	462a      	mov	r2, r5
 8002d10:	4921      	ldr	r1, [pc, #132]	@ (8002d98 <udpReceiveHandler+0x24c>)
 8002d12:	4620      	mov	r0, r4
 8002d14:	f010 fab4 	bl	8013280 <siprintf>
		udpClientSend(data);
 8002d18:	463b      	mov	r3, r7
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fa22 	bl	8001164 <udpClientSend>

		memset(rxBuf, 0, 128);
 8002d20:	2280      	movs	r2, #128	@ 0x80
 8002d22:	2100      	movs	r1, #0
 8002d24:	4813      	ldr	r0, [pc, #76]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002d26:	f010 fb3a 	bl	801339e <memset>
 8002d2a:	e01e      	b.n	8002d6a <udpReceiveHandler+0x21e>
		return;
	}

	int target_pos = strtol(rxBuf, NULL, 10);
 8002d2c:	220a      	movs	r2, #10
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4810      	ldr	r0, [pc, #64]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002d32:	f010 f9c7 	bl	80130c4 <strtol>
 8002d36:	f8c7 0204 	str.w	r0, [r7, #516]	@ 0x204
	memset(rxBuf, 0, 128);
 8002d3a:	2280      	movs	r2, #128	@ 0x80
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	480d      	ldr	r0, [pc, #52]	@ (8002d74 <udpReceiveHandler+0x228>)
 8002d40:	f010 fb2d 	bl	801339e <memset>

	if(fifoWrite(&netBuf, target_pos) == FIFO_OVERFLOW)
 8002d44:	f8d7 1204 	ldr.w	r1, [r7, #516]	@ 0x204
 8002d48:	4814      	ldr	r0, [pc, #80]	@ (8002d9c <udpReceiveHandler+0x250>)
 8002d4a:	f7fe f97d 	bl	8001048 <fifoWrite>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d10a      	bne.n	8002d6a <udpReceiveHandler+0x21e>
	{
		char data[256];
		sprintf(data, "STM32: Fifo-buffer is overflow! Counter received message = %d;\n", counter);
 8002d54:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <udpReceiveHandler+0x234>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	463b      	mov	r3, r7
 8002d5a:	4911      	ldr	r1, [pc, #68]	@ (8002da0 <udpReceiveHandler+0x254>)
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f010 fa8f 	bl	8013280 <siprintf>
		udpClientSend(data);
 8002d62:	463b      	mov	r3, r7
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe f9fd 	bl	8001164 <udpClientSend>
//	setTarget(&driver1, target_pos);
//	setTarget(&driver2, target_pos);
//
//	sprintf(data, "target = %d;\n", target_pos);
//	udpClientSend(data);
}
 8002d6a:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bdb0      	pop	{r4, r5, r7, pc}
 8002d72:	bf00      	nop
 8002d74:	2000011c 	.word	0x2000011c
 8002d78:	2000011e 	.word	0x2000011e
 8002d7c:	20000934 	.word	0x20000934
 8002d80:	2000019c 	.word	0x2000019c
 8002d84:	08014594 	.word	0x08014594
 8002d88:	080145d4 	.word	0x080145d4
 8002d8c:	0801460c 	.word	0x0801460c
 8002d90:	2000011d 	.word	0x2000011d
 8002d94:	0801464c 	.word	0x0801464c
 8002d98:	08014688 	.word	0x08014688
 8002d9c:	200001a0 	.word	0x200001a0
 8002da0:	080146dc 	.word	0x080146dc

08002da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002da8:	b672      	cpsid	i
}
 8002daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <Error_Handler+0x8>

08002db0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	4b10      	ldr	r3, [pc, #64]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	4a08      	ldr	r2, [pc, #32]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002de2:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800

08002e00 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08a      	sub	sp, #40	@ 0x28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a17      	ldr	r2, [pc, #92]	@ (8002e7c <HAL_ADC_MspInit+0x7c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d127      	bne.n	8002e72 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	4b16      	ldr	r3, [pc, #88]	@ (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2a:	4a15      	ldr	r2, [pc, #84]	@ (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e32:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b0f      	ldr	r3, [pc, #60]	@ (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	4a0e      	ldr	r2, [pc, #56]	@ (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002e5a:	2309      	movs	r3, #9
 8002e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	f107 0314 	add.w	r3, r7, #20
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4805      	ldr	r0, [pc, #20]	@ (8002e84 <HAL_ADC_MspInit+0x84>)
 8002e6e:	f002 fc79 	bl	8005764 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002e72:	bf00      	nop
 8002e74:	3728      	adds	r7, #40	@ 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40012000 	.word	0x40012000
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020000 	.word	0x40020000

08002e88 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a19      	ldr	r2, [pc, #100]	@ (8002f0c <HAL_CAN_MspInit+0x84>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d12b      	bne.n	8002f02 <HAL_CAN_MspInit+0x7a>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	4b18      	ldr	r3, [pc, #96]	@ (8002f10 <HAL_CAN_MspInit+0x88>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	4a17      	ldr	r2, [pc, #92]	@ (8002f10 <HAL_CAN_MspInit+0x88>)
 8002eb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eba:	4b15      	ldr	r3, [pc, #84]	@ (8002f10 <HAL_CAN_MspInit+0x88>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <HAL_CAN_MspInit+0x88>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	4a10      	ldr	r2, [pc, #64]	@ (8002f10 <HAL_CAN_MspInit+0x88>)
 8002ed0:	f043 0308 	orr.w	r3, r3, #8
 8002ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f10 <HAL_CAN_MspInit+0x88>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002ef2:	2309      	movs	r3, #9
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ef6:	f107 0314 	add.w	r3, r7, #20
 8002efa:	4619      	mov	r1, r3
 8002efc:	4805      	ldr	r0, [pc, #20]	@ (8002f14 <HAL_CAN_MspInit+0x8c>)
 8002efe:	f002 fc31 	bl	8005764 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002f02:	bf00      	nop
 8002f04:	3728      	adds	r7, #40	@ 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40006400 	.word	0x40006400
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40020c00 	.word	0x40020c00

08002f18 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	@ 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f107 0314 	add.w	r3, r7, #20
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a17      	ldr	r2, [pc, #92]	@ (8002f94 <HAL_DAC_MspInit+0x7c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d127      	bne.n	8002f8a <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	4b16      	ldr	r3, [pc, #88]	@ (8002f98 <HAL_DAC_MspInit+0x80>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	4a15      	ldr	r2, [pc, #84]	@ (8002f98 <HAL_DAC_MspInit+0x80>)
 8002f44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4a:	4b13      	ldr	r3, [pc, #76]	@ (8002f98 <HAL_DAC_MspInit+0x80>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f98 <HAL_DAC_MspInit+0x80>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8002f98 <HAL_DAC_MspInit+0x80>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f66:	4b0c      	ldr	r3, [pc, #48]	@ (8002f98 <HAL_DAC_MspInit+0x80>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002f72:	2330      	movs	r3, #48	@ 0x30
 8002f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f76:	2303      	movs	r3, #3
 8002f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7e:	f107 0314 	add.w	r3, r7, #20
 8002f82:	4619      	mov	r1, r3
 8002f84:	4805      	ldr	r0, [pc, #20]	@ (8002f9c <HAL_DAC_MspInit+0x84>)
 8002f86:	f002 fbed 	bl	8005764 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8002f8a:	bf00      	nop
 8002f8c:	3728      	adds	r7, #40	@ 0x28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40007400 	.word	0x40007400
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40020000 	.word	0x40020000

08002fa0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	@ 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a19      	ldr	r2, [pc, #100]	@ (8003024 <HAL_I2C_MspInit+0x84>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d12b      	bne.n	800301a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	4b18      	ldr	r3, [pc, #96]	@ (8003028 <HAL_I2C_MspInit+0x88>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fca:	4a17      	ldr	r2, [pc, #92]	@ (8003028 <HAL_I2C_MspInit+0x88>)
 8002fcc:	f043 0302 	orr.w	r3, r3, #2
 8002fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fd2:	4b15      	ldr	r3, [pc, #84]	@ (8003028 <HAL_I2C_MspInit+0x88>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fde:	23c0      	movs	r3, #192	@ 0xc0
 8002fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fe2:	2312      	movs	r3, #18
 8002fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fea:	2303      	movs	r3, #3
 8002fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fee:	2304      	movs	r3, #4
 8002ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff2:	f107 0314 	add.w	r3, r7, #20
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	480c      	ldr	r0, [pc, #48]	@ (800302c <HAL_I2C_MspInit+0x8c>)
 8002ffa:	f002 fbb3 	bl	8005764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	4b09      	ldr	r3, [pc, #36]	@ (8003028 <HAL_I2C_MspInit+0x88>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	4a08      	ldr	r2, [pc, #32]	@ (8003028 <HAL_I2C_MspInit+0x88>)
 8003008:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800300c:	6413      	str	r3, [r2, #64]	@ 0x40
 800300e:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <HAL_I2C_MspInit+0x88>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800301a:	bf00      	nop
 800301c:	3728      	adds	r7, #40	@ 0x28
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40005400 	.word	0x40005400
 8003028:	40023800 	.word	0x40023800
 800302c:	40020400 	.word	0x40020400

08003030 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	@ 0x28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a19      	ldr	r2, [pc, #100]	@ (80030b4 <HAL_SPI_MspInit+0x84>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d12c      	bne.n	80030ac <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	4b18      	ldr	r3, [pc, #96]	@ (80030b8 <HAL_SPI_MspInit+0x88>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	4a17      	ldr	r2, [pc, #92]	@ (80030b8 <HAL_SPI_MspInit+0x88>)
 800305c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003060:	6413      	str	r3, [r2, #64]	@ 0x40
 8003062:	4b15      	ldr	r3, [pc, #84]	@ (80030b8 <HAL_SPI_MspInit+0x88>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <HAL_SPI_MspInit+0x88>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	4a10      	ldr	r2, [pc, #64]	@ (80030b8 <HAL_SPI_MspInit+0x88>)
 8003078:	f043 0304 	orr.w	r3, r3, #4
 800307c:	6313      	str	r3, [r2, #48]	@ 0x30
 800307e:	4b0e      	ldr	r3, [pc, #56]	@ (80030b8 <HAL_SPI_MspInit+0x88>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800308a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800308e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003090:	2302      	movs	r3, #2
 8003092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003098:	2303      	movs	r3, #3
 800309a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800309c:	2306      	movs	r3, #6
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	4619      	mov	r1, r3
 80030a6:	4805      	ldr	r0, [pc, #20]	@ (80030bc <HAL_SPI_MspInit+0x8c>)
 80030a8:	f002 fb5c 	bl	8005764 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80030ac:	bf00      	nop
 80030ae:	3728      	adds	r7, #40	@ 0x28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40003c00 	.word	0x40003c00
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40020800 	.word	0x40020800

080030c0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d0:	d10e      	bne.n	80030f0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	4b13      	ldr	r3, [pc, #76]	@ (8003124 <HAL_TIM_Base_MspInit+0x64>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	4a12      	ldr	r2, [pc, #72]	@ (8003124 <HAL_TIM_Base_MspInit+0x64>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030e2:	4b10      	ldr	r3, [pc, #64]	@ (8003124 <HAL_TIM_Base_MspInit+0x64>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 80030ee:	e012      	b.n	8003116 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM13)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003128 <HAL_TIM_Base_MspInit+0x68>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10d      	bne.n	8003116 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <HAL_TIM_Base_MspInit+0x64>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	4a08      	ldr	r2, [pc, #32]	@ (8003124 <HAL_TIM_Base_MspInit+0x64>)
 8003104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003108:	6413      	str	r3, [r2, #64]	@ 0x40
 800310a:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <HAL_TIM_Base_MspInit+0x64>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	40001c00 	.word	0x40001c00

0800312c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 030c 	add.w	r3, r7, #12
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a12      	ldr	r2, [pc, #72]	@ (8003194 <HAL_TIM_MspPostInit+0x68>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d11d      	bne.n	800318a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM13_MspPostInit 0 */

    /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <HAL_TIM_MspPostInit+0x6c>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	4a10      	ldr	r2, [pc, #64]	@ (8003198 <HAL_TIM_MspPostInit+0x6c>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6313      	str	r3, [r2, #48]	@ 0x30
 800315e:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <HAL_TIM_MspPostInit+0x6c>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GATE_LASER_TIM13_CH1_Pin;
 800316a:	2340      	movs	r3, #64	@ 0x40
 800316c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800317a:	2309      	movs	r3, #9
 800317c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GATE_LASER_TIM13_CH1_GPIO_Port, &GPIO_InitStruct);
 800317e:	f107 030c 	add.w	r3, r7, #12
 8003182:	4619      	mov	r1, r3
 8003184:	4805      	ldr	r0, [pc, #20]	@ (800319c <HAL_TIM_MspPostInit+0x70>)
 8003186:	f002 faed 	bl	8005764 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800318a:	bf00      	nop
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40001c00 	.word	0x40001c00
 8003198:	40023800 	.word	0x40023800
 800319c:	40020000 	.word	0x40020000

080031a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08c      	sub	sp, #48	@ 0x30
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a8:	f107 031c 	add.w	r3, r7, #28
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	60da      	str	r2, [r3, #12]
 80031b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a33      	ldr	r2, [pc, #204]	@ (800328c <HAL_UART_MspInit+0xec>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d12d      	bne.n	800321e <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	4b32      	ldr	r3, [pc, #200]	@ (8003290 <HAL_UART_MspInit+0xf0>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	4a31      	ldr	r2, [pc, #196]	@ (8003290 <HAL_UART_MspInit+0xf0>)
 80031cc:	f043 0310 	orr.w	r3, r3, #16
 80031d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003290 <HAL_UART_MspInit+0xf0>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003290 <HAL_UART_MspInit+0xf0>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003290 <HAL_UART_MspInit+0xf0>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ee:	4b28      	ldr	r3, [pc, #160]	@ (8003290 <HAL_UART_MspInit+0xf0>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80031fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003208:	2303      	movs	r3, #3
 800320a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800320c:	2307      	movs	r3, #7
 800320e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003210:	f107 031c 	add.w	r3, r7, #28
 8003214:	4619      	mov	r1, r3
 8003216:	481f      	ldr	r0, [pc, #124]	@ (8003294 <HAL_UART_MspInit+0xf4>)
 8003218:	f002 faa4 	bl	8005764 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800321c:	e031      	b.n	8003282 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1d      	ldr	r2, [pc, #116]	@ (8003298 <HAL_UART_MspInit+0xf8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d12c      	bne.n	8003282 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	4b18      	ldr	r3, [pc, #96]	@ (8003290 <HAL_UART_MspInit+0xf0>)
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	4a17      	ldr	r2, [pc, #92]	@ (8003290 <HAL_UART_MspInit+0xf0>)
 8003232:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003236:	6413      	str	r3, [r2, #64]	@ 0x40
 8003238:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <HAL_UART_MspInit+0xf0>)
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	4b11      	ldr	r3, [pc, #68]	@ (8003290 <HAL_UART_MspInit+0xf0>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324c:	4a10      	ldr	r2, [pc, #64]	@ (8003290 <HAL_UART_MspInit+0xf0>)
 800324e:	f043 0308 	orr.w	r3, r3, #8
 8003252:	6313      	str	r3, [r2, #48]	@ 0x30
 8003254:	4b0e      	ldr	r3, [pc, #56]	@ (8003290 <HAL_UART_MspInit+0xf0>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003260:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003266:	2302      	movs	r3, #2
 8003268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326e:	2303      	movs	r3, #3
 8003270:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003272:	2307      	movs	r3, #7
 8003274:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003276:	f107 031c 	add.w	r3, r7, #28
 800327a:	4619      	mov	r1, r3
 800327c:	4807      	ldr	r0, [pc, #28]	@ (800329c <HAL_UART_MspInit+0xfc>)
 800327e:	f002 fa71 	bl	8005764 <HAL_GPIO_Init>
}
 8003282:	bf00      	nop
 8003284:	3730      	adds	r7, #48	@ 0x30
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40011000 	.word	0x40011000
 8003290:	40023800 	.word	0x40023800
 8003294:	40020000 	.word	0x40020000
 8003298:	40004800 	.word	0x40004800
 800329c:	40020c00 	.word	0x40020c00

080032a0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	@ 0x28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032c0:	d132      	bne.n	8003328 <HAL_PCD_MspInit+0x88>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003330 <HAL_PCD_MspInit+0x90>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	4a19      	ldr	r2, [pc, #100]	@ (8003330 <HAL_PCD_MspInit+0x90>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032d2:	4b17      	ldr	r3, [pc, #92]	@ (8003330 <HAL_PCD_MspInit+0x90>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80032de:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80032e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e4:	2302      	movs	r3, #2
 80032e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ec:	2303      	movs	r3, #3
 80032ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80032f0:	230a      	movs	r3, #10
 80032f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f4:	f107 0314 	add.w	r3, r7, #20
 80032f8:	4619      	mov	r1, r3
 80032fa:	480e      	ldr	r0, [pc, #56]	@ (8003334 <HAL_PCD_MspInit+0x94>)
 80032fc:	f002 fa32 	bl	8005764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003300:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <HAL_PCD_MspInit+0x90>)
 8003302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003304:	4a0a      	ldr	r2, [pc, #40]	@ (8003330 <HAL_PCD_MspInit+0x90>)
 8003306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800330a:	6353      	str	r3, [r2, #52]	@ 0x34
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	4b07      	ldr	r3, [pc, #28]	@ (8003330 <HAL_PCD_MspInit+0x90>)
 8003312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003314:	4a06      	ldr	r2, [pc, #24]	@ (8003330 <HAL_PCD_MspInit+0x90>)
 8003316:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800331a:	6453      	str	r3, [r2, #68]	@ 0x44
 800331c:	4b04      	ldr	r3, [pc, #16]	@ (8003330 <HAL_PCD_MspInit+0x90>)
 800331e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8003328:	bf00      	nop
 800332a:	3728      	adds	r7, #40	@ 0x28
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40023800 	.word	0x40023800
 8003334:	40020000 	.word	0x40020000

08003338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <NMI_Handler+0x4>

08003340 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003344:	bf00      	nop
 8003346:	e7fd      	b.n	8003344 <HardFault_Handler+0x4>

08003348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <MemManage_Handler+0x4>

08003350 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003354:	bf00      	nop
 8003356:	e7fd      	b.n	8003354 <BusFault_Handler+0x4>

08003358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800335c:	bf00      	nop
 800335e:	e7fd      	b.n	800335c <UsageFault_Handler+0x4>

08003360 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800338e:	f000 fa6b 	bl	8003868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800339c:	4802      	ldr	r0, [pc, #8]	@ (80033a8 <ETH_IRQHandler+0x10>)
 800339e:	f001 faf3 	bl	8004988 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	2000558c 	.word	0x2000558c

080033ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return 1;
 80033b0:	2301      	movs	r3, #1
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <_kill>:

int _kill(int pid, int sig)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033c6:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <_kill+0x20>)
 80033c8:	2216      	movs	r2, #22
 80033ca:	601a      	str	r2, [r3, #0]
  return -1;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	20008c64 	.word	0x20008c64

080033e0 <_exit>:

void _exit (int status)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033e8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ffe5 	bl	80033bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80033f2:	bf00      	nop
 80033f4:	e7fd      	b.n	80033f2 <_exit+0x12>

080033f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e00a      	b.n	800341e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003408:	f3af 8000 	nop.w
 800340c:	4601      	mov	r1, r0
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	60ba      	str	r2, [r7, #8]
 8003414:	b2ca      	uxtb	r2, r1
 8003416:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3301      	adds	r3, #1
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	429a      	cmp	r2, r3
 8003424:	dbf0      	blt.n	8003408 <_read+0x12>
  }

  return len;
 8003426:	687b      	ldr	r3, [r7, #4]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	e009      	b.n	8003456 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	60ba      	str	r2, [r7, #8]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	3301      	adds	r3, #1
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	429a      	cmp	r2, r3
 800345c:	dbf1      	blt.n	8003442 <_write+0x12>
  }
  return len;
 800345e:	687b      	ldr	r3, [r7, #4]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <_close>:

int _close(int file)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003490:	605a      	str	r2, [r3, #4]
  return 0;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <_isatty>:

int _isatty(int file)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034a8:	2301      	movs	r3, #1
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034d8:	4a14      	ldr	r2, [pc, #80]	@ (800352c <_sbrk+0x5c>)
 80034da:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <_sbrk+0x60>)
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034e4:	4b13      	ldr	r3, [pc, #76]	@ (8003534 <_sbrk+0x64>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d102      	bne.n	80034f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034ec:	4b11      	ldr	r3, [pc, #68]	@ (8003534 <_sbrk+0x64>)
 80034ee:	4a12      	ldr	r2, [pc, #72]	@ (8003538 <_sbrk+0x68>)
 80034f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034f2:	4b10      	ldr	r3, [pc, #64]	@ (8003534 <_sbrk+0x64>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d205      	bcs.n	800350c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003500:	4b0e      	ldr	r3, [pc, #56]	@ (800353c <_sbrk+0x6c>)
 8003502:	220c      	movs	r2, #12
 8003504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003506:	f04f 33ff 	mov.w	r3, #4294967295
 800350a:	e009      	b.n	8003520 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800350c:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <_sbrk+0x64>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003512:	4b08      	ldr	r3, [pc, #32]	@ (8003534 <_sbrk+0x64>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	4a06      	ldr	r2, [pc, #24]	@ (8003534 <_sbrk+0x64>)
 800351c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800351e:	68fb      	ldr	r3, [r7, #12]
}
 8003520:	4618      	mov	r0, r3
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	20020000 	.word	0x20020000
 8003530:	00004000 	.word	0x00004000
 8003534:	20000a68 	.word	0x20000a68
 8003538:	20008c70 	.word	0x20008c70
 800353c:	20008c64 	.word	0x20008c64

08003540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003544:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <SystemInit+0x20>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354a:	4a05      	ldr	r2, [pc, #20]	@ (8003560 <SystemInit+0x20>)
 800354c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003550:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	e000ed00 	.word	0xe000ed00

08003564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003564:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800359c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003568:	f7ff ffea 	bl	8003540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800356c:	480c      	ldr	r0, [pc, #48]	@ (80035a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800356e:	490d      	ldr	r1, [pc, #52]	@ (80035a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003570:	4a0d      	ldr	r2, [pc, #52]	@ (80035a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003574:	e002      	b.n	800357c <LoopCopyDataInit>

08003576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800357a:	3304      	adds	r3, #4

0800357c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800357c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800357e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003580:	d3f9      	bcc.n	8003576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003582:	4a0a      	ldr	r2, [pc, #40]	@ (80035ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003584:	4c0a      	ldr	r4, [pc, #40]	@ (80035b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003588:	e001      	b.n	800358e <LoopFillZerobss>

0800358a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800358a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800358c:	3204      	adds	r2, #4

0800358e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800358e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003590:	d3fb      	bcc.n	800358a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003592:	f00f ff7b 	bl	801348c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003596:	f7fe fe3f 	bl	8002218 <main>
  bx  lr    
 800359a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800359c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035a4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80035a8:	08017408 	.word	0x08017408
  ldr r2, =_sbss
 80035ac:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80035b0:	20008c6c 	.word	0x20008c6c

080035b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035b4:	e7fe      	b.n	80035b4 <ADC_IRQHandler>

080035b6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00b      	beq.n	80035de <LAN8742_RegisterBusIO+0x28>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d007      	beq.n	80035de <LAN8742_RegisterBusIO+0x28>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <LAN8742_RegisterBusIO+0x28>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d102      	bne.n	80035e4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80035de:	f04f 33ff 	mov.w	r3, #4294967295
 80035e2:	e014      	b.n	800360e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800361a:	b580      	push	{r7, lr}
 800361c:	b086      	sub	sp, #24
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d139      	bne.n	80036aa <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	e01c      	b.n	800368a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f107 020c 	add.w	r2, r7, #12
 8003658:	2112      	movs	r1, #18
 800365a:	6978      	ldr	r0, [r7, #20]
 800365c:	4798      	blx	r3
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	da03      	bge.n	800366c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8003664:	f06f 0304 	mvn.w	r3, #4
 8003668:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800366a:	e00b      	b.n	8003684 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	429a      	cmp	r2, r3
 8003676:	d105      	bne.n	8003684 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
         break;
 8003682:	e005      	b.n	8003690 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	3301      	adds	r3, #1
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b1f      	cmp	r3, #31
 800368e:	d9df      	bls.n	8003650 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b1f      	cmp	r3, #31
 8003696:	d902      	bls.n	800369e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003698:	f06f 0302 	mvn.w	r3, #2
 800369c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d102      	bne.n	80036aa <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80036aa:	693b      	ldr	r3, [r7, #16]
 }
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6810      	ldr	r0, [r2, #0]
 80036c8:	f107 020c 	add.w	r2, r7, #12
 80036cc:	2101      	movs	r1, #1
 80036ce:	4798      	blx	r3
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	da02      	bge.n	80036dc <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80036d6:	f06f 0304 	mvn.w	r3, #4
 80036da:	e06e      	b.n	80037ba <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6810      	ldr	r0, [r2, #0]
 80036e4:	f107 020c 	add.w	r2, r7, #12
 80036e8:	2101      	movs	r1, #1
 80036ea:	4798      	blx	r3
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	da02      	bge.n	80036f8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80036f2:	f06f 0304 	mvn.w	r3, #4
 80036f6:	e060      	b.n	80037ba <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8003702:	2301      	movs	r3, #1
 8003704:	e059      	b.n	80037ba <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6810      	ldr	r0, [r2, #0]
 800370e:	f107 020c 	add.w	r2, r7, #12
 8003712:	2100      	movs	r1, #0
 8003714:	4798      	blx	r3
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	da02      	bge.n	8003722 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800371c:	f06f 0304 	mvn.w	r3, #4
 8003720:	e04b      	b.n	80037ba <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d11b      	bne.n	8003764 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d006      	beq.n	8003744 <LAN8742_GetLinkState+0x90>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003740:	2302      	movs	r3, #2
 8003742:	e03a      	b.n	80037ba <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800374e:	2303      	movs	r3, #3
 8003750:	e033      	b.n	80037ba <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800375c:	2304      	movs	r3, #4
 800375e:	e02c      	b.n	80037ba <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003760:	2305      	movs	r3, #5
 8003762:	e02a      	b.n	80037ba <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6810      	ldr	r0, [r2, #0]
 800376c:	f107 020c 	add.w	r2, r7, #12
 8003770:	211f      	movs	r1, #31
 8003772:	4798      	blx	r3
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	da02      	bge.n	8003780 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800377a:	f06f 0304 	mvn.w	r3, #4
 800377e:	e01c      	b.n	80037ba <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800378a:	2306      	movs	r3, #6
 800378c:	e015      	b.n	80037ba <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 031c 	and.w	r3, r3, #28
 8003794:	2b18      	cmp	r3, #24
 8003796:	d101      	bne.n	800379c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003798:	2302      	movs	r3, #2
 800379a:	e00e      	b.n	80037ba <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 031c 	and.w	r3, r3, #28
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d101      	bne.n	80037aa <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e007      	b.n	80037ba <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f003 031c 	and.w	r3, r3, #28
 80037b0:	2b14      	cmp	r3, #20
 80037b2:	d101      	bne.n	80037b8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80037b4:	2304      	movs	r3, #4
 80037b6:	e000      	b.n	80037ba <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80037b8:	2305      	movs	r3, #5
    }
  }
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003804 <HAL_Init+0x40>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003804 <HAL_Init+0x40>)
 80037ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <HAL_Init+0x40>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003804 <HAL_Init+0x40>)
 80037da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037e0:	4b08      	ldr	r3, [pc, #32]	@ (8003804 <HAL_Init+0x40>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a07      	ldr	r2, [pc, #28]	@ (8003804 <HAL_Init+0x40>)
 80037e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037ec:	2003      	movs	r0, #3
 80037ee:	f000 fcad 	bl	800414c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037f2:	200f      	movs	r0, #15
 80037f4:	f000 f808 	bl	8003808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037f8:	f7ff fada 	bl	8002db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023c00 	.word	0x40023c00

08003808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003810:	4b12      	ldr	r3, [pc, #72]	@ (800385c <HAL_InitTick+0x54>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <HAL_InitTick+0x58>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	4619      	mov	r1, r3
 800381a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800381e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fcc5 	bl	80041b6 <HAL_SYSTICK_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e00e      	b.n	8003854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b0f      	cmp	r3, #15
 800383a:	d80a      	bhi.n	8003852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800383c:	2200      	movs	r2, #0
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	f04f 30ff 	mov.w	r0, #4294967295
 8003844:	f000 fc8d 	bl	8004162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003848:	4a06      	ldr	r2, [pc, #24]	@ (8003864 <HAL_InitTick+0x5c>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	e000      	b.n	8003854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000074 	.word	0x20000074
 8003860:	2000007c 	.word	0x2000007c
 8003864:	20000078 	.word	0x20000078

08003868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800386c:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <HAL_IncTick+0x20>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	4b06      	ldr	r3, [pc, #24]	@ (800388c <HAL_IncTick+0x24>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4413      	add	r3, r2
 8003878:	4a04      	ldr	r2, [pc, #16]	@ (800388c <HAL_IncTick+0x24>)
 800387a:	6013      	str	r3, [r2, #0]
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	2000007c 	.word	0x2000007c
 800388c:	20000a6c 	.word	0x20000a6c

08003890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return uwTick;
 8003894:	4b03      	ldr	r3, [pc, #12]	@ (80038a4 <HAL_GetTick+0x14>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000a6c 	.word	0x20000a6c

080038a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038b0:	f7ff ffee 	bl	8003890 <HAL_GetTick>
 80038b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d005      	beq.n	80038ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038c2:	4b0a      	ldr	r3, [pc, #40]	@ (80038ec <HAL_Delay+0x44>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ce:	bf00      	nop
 80038d0:	f7ff ffde 	bl	8003890 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d8f7      	bhi.n	80038d0 <HAL_Delay+0x28>
  {
  }
}
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	2000007c 	.word	0x2000007c

080038f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e033      	b.n	800396e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fa76 	bl	8002e00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	d118      	bne.n	8003960 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003936:	f023 0302 	bic.w	r3, r3, #2
 800393a:	f043 0202 	orr.w	r2, r3, #2
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f93a 	bl	8003bbc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	f023 0303 	bic.w	r3, r3, #3
 8003956:	f043 0201 	orr.w	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40
 800395e:	e001      	b.n	8003964 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800396c:	7bfb      	ldrb	r3, [r7, #15]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x1c>
 8003990:	2302      	movs	r3, #2
 8003992:	e105      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0x228>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b09      	cmp	r3, #9
 80039a2:	d925      	bls.n	80039f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68d9      	ldr	r1, [r3, #12]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	461a      	mov	r2, r3
 80039b2:	4613      	mov	r3, r2
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	4413      	add	r3, r2
 80039b8:	3b1e      	subs	r3, #30
 80039ba:	2207      	movs	r2, #7
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43da      	mvns	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	400a      	ands	r2, r1
 80039c8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68d9      	ldr	r1, [r3, #12]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	4618      	mov	r0, r3
 80039dc:	4603      	mov	r3, r0
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	4403      	add	r3, r0
 80039e2:	3b1e      	subs	r3, #30
 80039e4:	409a      	lsls	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	60da      	str	r2, [r3, #12]
 80039ee:	e022      	b.n	8003a36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6919      	ldr	r1, [r3, #16]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	2207      	movs	r2, #7
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43da      	mvns	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	400a      	ands	r2, r1
 8003a12:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6919      	ldr	r1, [r3, #16]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	4618      	mov	r0, r3
 8003a26:	4603      	mov	r3, r0
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	4403      	add	r3, r0
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b06      	cmp	r3, #6
 8003a3c:	d824      	bhi.n	8003a88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3b05      	subs	r3, #5
 8003a50:	221f      	movs	r2, #31
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43da      	mvns	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	400a      	ands	r2, r1
 8003a5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	3b05      	subs	r3, #5
 8003a7a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a86:	e04c      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b0c      	cmp	r3, #12
 8003a8e:	d824      	bhi.n	8003ada <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3b23      	subs	r3, #35	@ 0x23
 8003aa2:	221f      	movs	r2, #31
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43da      	mvns	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	400a      	ands	r2, r1
 8003ab0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	4618      	mov	r0, r3
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	3b23      	subs	r3, #35	@ 0x23
 8003acc:	fa00 f203 	lsl.w	r2, r0, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ad8:	e023      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	3b41      	subs	r3, #65	@ 0x41
 8003aec:	221f      	movs	r2, #31
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43da      	mvns	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	400a      	ands	r2, r1
 8003afa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	4618      	mov	r0, r3
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	3b41      	subs	r3, #65	@ 0x41
 8003b16:	fa00 f203 	lsl.w	r2, r0, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b22:	4b22      	ldr	r3, [pc, #136]	@ (8003bac <HAL_ADC_ConfigChannel+0x234>)
 8003b24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a21      	ldr	r2, [pc, #132]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x238>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d109      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x1cc>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b12      	cmp	r3, #18
 8003b36:	d105      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a19      	ldr	r2, [pc, #100]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x238>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d123      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x21e>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b10      	cmp	r3, #16
 8003b54:	d003      	beq.n	8003b5e <HAL_ADC_ConfigChannel+0x1e6>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b11      	cmp	r3, #17
 8003b5c:	d11b      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d111      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b72:	4b10      	ldr	r3, [pc, #64]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x23c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a10      	ldr	r2, [pc, #64]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x240>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	0c9a      	lsrs	r2, r3, #18
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b88:	e002      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f9      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	40012300 	.word	0x40012300
 8003bb0:	40012000 	.word	0x40012000
 8003bb4:	20000074 	.word	0x20000074
 8003bb8:	431bde83 	.word	0x431bde83

08003bbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bc4:	4b79      	ldr	r3, [pc, #484]	@ (8003dac <ADC_Init+0x1f0>)
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	021a      	lsls	r2, r3, #8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003c14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6899      	ldr	r1, [r3, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4e:	4a58      	ldr	r2, [pc, #352]	@ (8003db0 <ADC_Init+0x1f4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d022      	beq.n	8003c9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6899      	ldr	r1, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6899      	ldr	r1, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	609a      	str	r2, [r3, #8]
 8003c98:	e00f      	b.n	8003cba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ca8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003cb8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0202 	bic.w	r2, r2, #2
 8003cc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6899      	ldr	r1, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	7e1b      	ldrb	r3, [r3, #24]
 8003cd4:	005a      	lsls	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01b      	beq.n	8003d20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cf6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003d06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	3b01      	subs	r3, #1
 8003d14:	035a      	lsls	r2, r3, #13
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	e007      	b.n	8003d30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d2e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	051a      	lsls	r2, r3, #20
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6899      	ldr	r1, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d72:	025a      	lsls	r2, r3, #9
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6899      	ldr	r1, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	029a      	lsls	r2, r3, #10
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	609a      	str	r2, [r3, #8]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	40012300 	.word	0x40012300
 8003db0:	0f000001 	.word	0x0f000001

08003db4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e0ed      	b.n	8003fa2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d102      	bne.n	8003dd8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff f858 	bl	8002e88 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003de8:	f7ff fd52 	bl	8003890 <HAL_GetTick>
 8003dec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003dee:	e012      	b.n	8003e16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003df0:	f7ff fd4e 	bl	8003890 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b0a      	cmp	r3, #10
 8003dfc:	d90b      	bls.n	8003e16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2205      	movs	r2, #5
 8003e0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e0c5      	b.n	8003fa2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0e5      	beq.n	8003df0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0202 	bic.w	r2, r2, #2
 8003e32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e34:	f7ff fd2c 	bl	8003890 <HAL_GetTick>
 8003e38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e3a:	e012      	b.n	8003e62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e3c:	f7ff fd28 	bl	8003890 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b0a      	cmp	r3, #10
 8003e48:	d90b      	bls.n	8003e62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2205      	movs	r2, #5
 8003e5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e09f      	b.n	8003fa2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e5      	bne.n	8003e3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	7e1b      	ldrb	r3, [r3, #24]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d108      	bne.n	8003e8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	e007      	b.n	8003e9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	7e5b      	ldrb	r3, [r3, #25]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d108      	bne.n	8003eb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e007      	b.n	8003ec4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ec2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	7e9b      	ldrb	r3, [r3, #26]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d108      	bne.n	8003ede <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0220 	orr.w	r2, r2, #32
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e007      	b.n	8003eee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0220 	bic.w	r2, r2, #32
 8003eec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	7edb      	ldrb	r3, [r3, #27]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d108      	bne.n	8003f08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0210 	bic.w	r2, r2, #16
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	e007      	b.n	8003f18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0210 	orr.w	r2, r2, #16
 8003f16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	7f1b      	ldrb	r3, [r3, #28]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d108      	bne.n	8003f32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0208 	orr.w	r2, r2, #8
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	e007      	b.n	8003f42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0208 	bic.w	r2, r2, #8
 8003f40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	7f5b      	ldrb	r3, [r3, #29]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d108      	bne.n	8003f5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0204 	orr.w	r2, r2, #4
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e007      	b.n	8003f6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0204 	bic.w	r2, r2, #4
 8003f6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	ea42 0103 	orr.w	r1, r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	1e5a      	subs	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fc8:	4013      	ands	r3, r2
 8003fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fde:	4a04      	ldr	r2, [pc, #16]	@ (8003ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	60d3      	str	r3, [r2, #12]
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	e000ed00 	.word	0xe000ed00

08003ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ff8:	4b04      	ldr	r3, [pc, #16]	@ (800400c <__NVIC_GetPriorityGrouping+0x18>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	f003 0307 	and.w	r3, r3, #7
}
 8004002:	4618      	mov	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000ed00 	.word	0xe000ed00

08004010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800401a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401e:	2b00      	cmp	r3, #0
 8004020:	db0b      	blt.n	800403a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	f003 021f 	and.w	r2, r3, #31
 8004028:	4907      	ldr	r1, [pc, #28]	@ (8004048 <__NVIC_EnableIRQ+0x38>)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	2001      	movs	r0, #1
 8004032:	fa00 f202 	lsl.w	r2, r0, r2
 8004036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	e000e100 	.word	0xe000e100

0800404c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	6039      	str	r1, [r7, #0]
 8004056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405c:	2b00      	cmp	r3, #0
 800405e:	db0a      	blt.n	8004076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	b2da      	uxtb	r2, r3
 8004064:	490c      	ldr	r1, [pc, #48]	@ (8004098 <__NVIC_SetPriority+0x4c>)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	0112      	lsls	r2, r2, #4
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	440b      	add	r3, r1
 8004070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004074:	e00a      	b.n	800408c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4908      	ldr	r1, [pc, #32]	@ (800409c <__NVIC_SetPriority+0x50>)
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	3b04      	subs	r3, #4
 8004084:	0112      	lsls	r2, r2, #4
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	440b      	add	r3, r1
 800408a:	761a      	strb	r2, [r3, #24]
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	e000e100 	.word	0xe000e100
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b089      	sub	sp, #36	@ 0x24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f1c3 0307 	rsb	r3, r3, #7
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	bf28      	it	cs
 80040be:	2304      	movcs	r3, #4
 80040c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3304      	adds	r3, #4
 80040c6:	2b06      	cmp	r3, #6
 80040c8:	d902      	bls.n	80040d0 <NVIC_EncodePriority+0x30>
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	3b03      	subs	r3, #3
 80040ce:	e000      	b.n	80040d2 <NVIC_EncodePriority+0x32>
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d4:	f04f 32ff 	mov.w	r2, #4294967295
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43da      	mvns	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	401a      	ands	r2, r3
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040e8:	f04f 31ff 	mov.w	r1, #4294967295
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	fa01 f303 	lsl.w	r3, r1, r3
 80040f2:	43d9      	mvns	r1, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f8:	4313      	orrs	r3, r2
         );
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3724      	adds	r7, #36	@ 0x24
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3b01      	subs	r3, #1
 8004114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004118:	d301      	bcc.n	800411e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800411a:	2301      	movs	r3, #1
 800411c:	e00f      	b.n	800413e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800411e:	4a0a      	ldr	r2, [pc, #40]	@ (8004148 <SysTick_Config+0x40>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3b01      	subs	r3, #1
 8004124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004126:	210f      	movs	r1, #15
 8004128:	f04f 30ff 	mov.w	r0, #4294967295
 800412c:	f7ff ff8e 	bl	800404c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004130:	4b05      	ldr	r3, [pc, #20]	@ (8004148 <SysTick_Config+0x40>)
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004136:	4b04      	ldr	r3, [pc, #16]	@ (8004148 <SysTick_Config+0x40>)
 8004138:	2207      	movs	r2, #7
 800413a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	e000e010 	.word	0xe000e010

0800414c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff ff29 	bl	8003fac <__NVIC_SetPriorityGrouping>
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004162:	b580      	push	{r7, lr}
 8004164:	b086      	sub	sp, #24
 8004166:	af00      	add	r7, sp, #0
 8004168:	4603      	mov	r3, r0
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004174:	f7ff ff3e 	bl	8003ff4 <__NVIC_GetPriorityGrouping>
 8004178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	6978      	ldr	r0, [r7, #20]
 8004180:	f7ff ff8e 	bl	80040a0 <NVIC_EncodePriority>
 8004184:	4602      	mov	r2, r0
 8004186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff ff5d 	bl	800404c <__NVIC_SetPriority>
}
 8004192:	bf00      	nop
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	4603      	mov	r3, r0
 80041a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff ff31 	bl	8004010 <__NVIC_EnableIRQ>
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff ffa2 	bl	8004108 <SysTick_Config>
 80041c4:	4603      	mov	r3, r0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e014      	b.n	800420a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d105      	bne.n	80041f6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7fe fe91 	bl	8002f18 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2202      	movs	r2, #2
 80041fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004212:	b480      	push	{r7}
 8004214:	b089      	sub	sp, #36	@ 0x24
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_DAC_ConfigChannel+0x1c>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e042      	b.n	80042b8 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	795b      	ldrb	r3, [r3, #5]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_DAC_ConfigChannel+0x2c>
 800423a:	2302      	movs	r3, #2
 800423c:	e03c      	b.n	80042b8 <HAL_DAC_ConfigChannel+0xa6>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2202      	movs	r2, #2
 8004248:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4313      	orrs	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6819      	ldr	r1, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	22c0      	movs	r2, #192	@ 0xc0
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	43da      	mvns	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	400a      	ands	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80042b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3724      	adds	r7, #36	@ 0x24
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e08a      	b.n	80043ec <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d106      	bne.n	80042ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2223      	movs	r2, #35	@ 0x23
 80042e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f004 fa71 	bl	80087d0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	4b40      	ldr	r3, [pc, #256]	@ (80043f4 <HAL_ETH_Init+0x130>)
 80042f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f6:	4a3f      	ldr	r2, [pc, #252]	@ (80043f4 <HAL_ETH_Init+0x130>)
 80042f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80042fe:	4b3d      	ldr	r3, [pc, #244]	@ (80043f4 <HAL_ETH_Init+0x130>)
 8004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800430a:	4b3b      	ldr	r3, [pc, #236]	@ (80043f8 <HAL_ETH_Init+0x134>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4a3a      	ldr	r2, [pc, #232]	@ (80043f8 <HAL_ETH_Init+0x134>)
 8004310:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004314:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004316:	4b38      	ldr	r3, [pc, #224]	@ (80043f8 <HAL_ETH_Init+0x134>)
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	4936      	ldr	r1, [pc, #216]	@ (80043f8 <HAL_ETH_Init+0x134>)
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004324:	4b34      	ldr	r3, [pc, #208]	@ (80043f8 <HAL_ETH_Init+0x134>)
 8004326:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800433e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004340:	f7ff faa6 	bl	8003890 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004346:	e011      	b.n	800436c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004348:	f7ff faa2 	bl	8003890 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004356:	d909      	bls.n	800436c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2204      	movs	r2, #4
 800435c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	22e0      	movs	r2, #224	@ 0xe0
 8004364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e03f      	b.n	80043ec <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e4      	bne.n	8004348 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 ff32 	bl	80051e8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 ffdd 	bl	8005344 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f001 f833 	bl	80053f6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	461a      	mov	r2, r3
 8004396:	2100      	movs	r1, #0
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 ff9b 	bl	80052d4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80043ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043be:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80043c2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80043d6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2210      	movs	r2, #16
 80043e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40023800 	.word	0x40023800
 80043f8:	40013800 	.word	0x40013800

080043fc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800440a:	2b10      	cmp	r3, #16
 800440c:	d161      	bne.n	80044d2 <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2223      	movs	r2, #35	@ 0x23
 8004412:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2204      	movs	r2, #4
 8004420:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fa2c 	bl	8004880 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004430:	2001      	movs	r0, #1
 8004432:	f7ff fa39 	bl	80038a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004450:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004454:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	f043 0302 	orr.w	r3, r3, #2
 8004468:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800446c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fd56 	bl	8004f20 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0208 	orr.w	r2, r2, #8
 8004482:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800448c:	2001      	movs	r0, #1
 800448e:	f7ff fa0b 	bl	80038a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0204 	orr.w	r2, r2, #4
 80044a8:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6812      	ldr	r2, [r2, #0]
 80044b8:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80044bc:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80044c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044c4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2223      	movs	r2, #35	@ 0x23
 80044ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e000      	b.n	80044d4 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
  }
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ea:	2b23      	cmp	r3, #35	@ 0x23
 80044ec:	d170      	bne.n	80045d0 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2223      	movs	r2, #35	@ 0x23
 80044f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8004508:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 800450c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004510:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004524:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004528:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	f023 0302 	bic.w	r3, r3, #2
 800453c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004540:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0204 	bic.w	r2, r2, #4
 8004550:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800455a:	2001      	movs	r0, #1
 800455c:	f7ff f9a4 	bl	80038a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fcd9 	bl	8004f20 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0208 	bic.w	r2, r2, #8
 800457c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004586:	2001      	movs	r0, #1
 8004588:	f7ff f98e 	bl	80038a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	e00e      	b.n	80045b8 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	3212      	adds	r2, #18
 80045a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	3301      	adds	r3, #1
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d9ed      	bls.n	800459a <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2210      	movs	r2, #16
 80045c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	e000      	b.n	80045d2 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
  }
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b086      	sub	sp, #24
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f2:	f043 0201 	orr.w	r2, r3, #1
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e07c      	b.n	80046fa <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004606:	2b23      	cmp	r3, #35	@ 0x23
 8004608:	d176      	bne.n	80046f8 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800460a:	2200      	movs	r2, #0
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 ff60 	bl	80054d4 <ETH_Prepare_Tx_Descriptors>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004620:	f043 0202 	orr.w	r2, r3, #2
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e065      	b.n	80046fa <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 800462e:	f3bf 8f4f 	dsb	sy
}
 8004632:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3206      	adds	r2, #6
 800463c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004640:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	629a      	str	r2, [r3, #40]	@ 0x28
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	2b03      	cmp	r3, #3
 8004652:	d904      	bls.n	800465e <HAL_ETH_Transmit+0x84>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004658:	1f1a      	subs	r2, r3, #4
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3106      	adds	r1, #6
 800466a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800466e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004672:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8004674:	f7ff f90c 	bl	8003890 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800467a:	e037      	b.n	80046ec <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d011      	beq.n	80046b2 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004694:	f043 0208 	orr.w	r2, r3, #8
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046a6:	695a      	ldr	r2, [r3, #20]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e023      	b.n	80046fa <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d018      	beq.n	80046ec <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046ba:	f7ff f8e9 	bl	8003890 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d302      	bcc.n	80046d0 <HAL_ETH_Transmit+0xf6>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10d      	bne.n	80046ec <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d6:	f043 0204 	orr.w	r2, r3, #4
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80046e6:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e006      	b.n	80046fa <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	dbc3      	blt.n	800467c <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e000      	b.n	80046fa <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
  }
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b088      	sub	sp, #32
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004720:	f043 0201 	orr.w	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e0a4      	b.n	8004878 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004734:	2b23      	cmp	r3, #35	@ 0x23
 8004736:	d001      	beq.n	800473c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e09d      	b.n	8004878 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004740:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	3212      	adds	r2, #18
 8004748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800474c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004752:	f1c3 0304 	rsb	r3, r3, #4
 8004756:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004758:	e066      	b.n	8004828 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	69da      	ldr	r2, [r3, #28]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800477e:	2b00      	cmp	r3, #0
 8004780:	d103      	bne.n	800478a <HAL_ETH_ReadData+0x88>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d03c      	beq.n	8004804 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	0c1b      	lsrs	r3, r3, #16
 80047a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80047ac:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80047c2:	2301      	movs	r3, #1
 80047c4:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80047de:	461a      	mov	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f004 f9ac 	bl	8008b40 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	441a      	add	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2200      	movs	r2, #0
 8004802:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	3301      	adds	r3, #1
 8004808:	61fb      	str	r3, [r7, #28]
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	2b03      	cmp	r3, #3
 800480e:	d902      	bls.n	8004816 <HAL_ETH_ReadData+0x114>
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	3b04      	subs	r3, #4
 8004814:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	3212      	adds	r2, #18
 800481c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004820:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	3301      	adds	r3, #1
 8004826:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800482c:	2b00      	cmp	r3, #0
 800482e:	db06      	blt.n	800483e <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	429a      	cmp	r2, r3
 8004836:	d202      	bcs.n	800483e <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004838:	7cfb      	ldrb	r3, [r7, #19]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d08d      	beq.n	800475a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f814 	bl	8004880 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800485e:	7cfb      	ldrb	r3, [r7, #19]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d108      	bne.n	8004876 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
}
 8004878:	4618      	mov	r0, r3
 800487a:	3720      	adds	r7, #32
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004888:	2300      	movs	r3, #0
 800488a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800488c:	2301      	movs	r3, #1
 800488e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004894:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	3212      	adds	r2, #18
 800489c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048a6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80048a8:	e044      	b.n	8004934 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d112      	bne.n	80048d8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80048b2:	f107 0308 	add.w	r3, r7, #8
 80048b6:	4618      	mov	r0, r3
 80048b8:	f004 f912 	bl	8008ae0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	74fb      	strb	r3, [r7, #19]
 80048c6:	e007      	b.n	80048d8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	461a      	mov	r2, r3
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	461a      	mov	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80048d8:	7cfb      	ldrb	r3, [r7, #19]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d02a      	beq.n	8004934 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d108      	bne.n	80048f8 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	6053      	str	r3, [r2, #4]
 80048f6:	e005      	b.n	8004904 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	3301      	adds	r3, #1
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	2b03      	cmp	r3, #3
 800491a:	d902      	bls.n	8004922 <ETH_UpdateDescriptor+0xa2>
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	3b04      	subs	r3, #4
 8004920:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	3212      	adds	r2, #18
 8004928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800492c:	617b      	str	r3, [r7, #20]
      desccount--;
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	3b01      	subs	r3, #1
 8004932:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <ETH_UpdateDescriptor+0xc0>
 800493a:	7cfb      	ldrb	r3, [r7, #19]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1b4      	bne.n	80048aa <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	429a      	cmp	r2, r3
 8004948:	d01a      	beq.n	8004980 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	3301      	adds	r3, #1
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004954:	f3bf 8f5f 	dmb	sy
}
 8004958:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6919      	ldr	r1, [r3, #16]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	18ca      	adds	r2, r1, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004972:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004980:	bf00      	nop
 8004982:	3720      	adds	r7, #32
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004996:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80049b0:	4b4b      	ldr	r3, [pc, #300]	@ (8004ae0 <HAL_ETH_IRQHandler+0x158>)
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00e      	beq.n	80049de <HAL_ETH_IRQHandler+0x56>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049d2:	461a      	mov	r2, r3
 80049d4:	4b43      	ldr	r3, [pc, #268]	@ (8004ae4 <HAL_ETH_IRQHandler+0x15c>)
 80049d6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f891 	bl	8004b00 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00f      	beq.n	8004a08 <HAL_ETH_IRQHandler+0x80>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049fa:	461a      	mov	r2, r3
 80049fc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004a00:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f872 	bl	8004aec <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d042      	beq.n	8004a98 <HAL_ETH_IRQHandler+0x110>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d03d      	beq.n	8004a98 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a22:	f043 0208 	orr.w	r2, r3, #8
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01a      	beq.n	8004a6c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a3e:	695a      	ldr	r2, [r3, #20]
 8004a40:	4b29      	ldr	r3, [pc, #164]	@ (8004ae8 <HAL_ETH_IRQHandler+0x160>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004a5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a60:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	22e0      	movs	r2, #224	@ 0xe0
 8004a66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004a6a:	e012      	b.n	8004a92 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004a90:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f83e 	bl	8004b14 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f838 	bl	8004b28 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d006      	beq.n	8004ad8 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004aca:	4b05      	ldr	r3, [pc, #20]	@ (8004ae0 <HAL_ETH_IRQHandler+0x158>)
 8004acc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004ad0:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f832 	bl	8004b3c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004ad8:	bf00      	nop
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40013c00 	.word	0x40013c00
 8004ae4:	00010040 	.word	0x00010040
 8004ae8:	007e2000 	.word	0x007e2000

08004aec <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f003 031c 	and.w	r3, r3, #28
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	02db      	lsls	r3, r3, #11
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	019b      	lsls	r3, r3, #6
 8004b7e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0302 	bic.w	r3, r3, #2
 8004b8e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004ba0:	f7fe fe76 	bl	8003890 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004ba6:	e00d      	b.n	8004bc4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004ba8:	f7fe fe72 	bl	8003890 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb6:	d301      	bcc.n	8004bbc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e010      	b.n	8004bde <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1ec      	bne.n	8004ba8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b086      	sub	sp, #24
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
 8004bf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f003 031c 	and.w	r3, r3, #28
 8004c02:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	02db      	lsls	r3, r3, #11
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	019b      	lsls	r3, r3, #6
 8004c14:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f043 0302 	orr.w	r3, r3, #2
 8004c24:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c40:	f7fe fe26 	bl	8003890 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004c46:	e00d      	b.n	8004c64 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004c48:	f7fe fe22 	bl	8003890 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c56:	d301      	bcc.n	8004c5c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e009      	b.n	8004c70 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1ec      	bne.n	8004c48 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0e6      	b.n	8004e5a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bf14      	ite	ne
 8004c9a:	2301      	movne	r3, #1
 8004c9c:	2300      	moveq	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf14      	ite	ne
 8004ce0:	2301      	movne	r3, #1
 8004ce2:	2300      	moveq	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bf0c      	ite	eq
 8004cfa:	2301      	moveq	r3, #1
 8004cfc:	2300      	movne	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bf14      	ite	ne
 8004d14:	2301      	movne	r3, #1
 8004d16:	2300      	moveq	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	bf0c      	ite	eq
 8004d4a:	2301      	moveq	r3, #1
 8004d4c:	2300      	movne	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bf0c      	ite	eq
 8004d64:	2301      	moveq	r3, #1
 8004d66:	2300      	movne	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bf14      	ite	ne
 8004d7e:	2301      	movne	r3, #1
 8004d80:	2300      	moveq	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	461a      	mov	r2, r3
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bf14      	ite	ne
 8004da6:	2301      	movne	r3, #1
 8004da8:	2300      	moveq	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bf14      	ite	ne
 8004dda:	2301      	movne	r3, #1
 8004ddc:	2300      	moveq	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	bf0c      	ite	eq
 8004df6:	2301      	moveq	r3, #1
 8004df8:	2300      	movne	r3, #0
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	0c1b      	lsrs	r3, r3, #16
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	bf14      	ite	ne
 8004e2e:	2301      	movne	r3, #1
 8004e30:	2300      	moveq	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf14      	ite	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	2300      	moveq	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b082      	sub	sp, #8
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e00b      	b.n	8004e92 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d105      	bne.n	8004e90 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004e84:	6839      	ldr	r1, [r7, #0]
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f870 	bl	8004f6c <ETH_SetMACConfig>

    return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e000      	b.n	8004e92 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
  }
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 031c 	bic.w	r3, r3, #28
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004eb4:	f001 fcc4 	bl	8006840 <HAL_RCC_GetHCLKFreq>
 8004eb8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4a14      	ldr	r2, [pc, #80]	@ (8004f10 <HAL_ETH_SetMDIOClockRange+0x74>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d804      	bhi.n	8004ecc <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f043 0308 	orr.w	r3, r3, #8
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	e019      	b.n	8004f00 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4a11      	ldr	r2, [pc, #68]	@ (8004f14 <HAL_ETH_SetMDIOClockRange+0x78>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d204      	bcs.n	8004ede <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f043 030c 	orr.w	r3, r3, #12
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	e010      	b.n	8004f00 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8004f18 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d90c      	bls.n	8004f00 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8004f1c <HAL_ETH_SetMDIOClockRange+0x80>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d804      	bhi.n	8004ef8 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f043 0304 	orr.w	r3, r3, #4
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e003      	b.n	8004f00 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f043 0310 	orr.w	r3, r3, #16
 8004efe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	611a      	str	r2, [r3, #16]
}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	02160ebf 	.word	0x02160ebf
 8004f14:	03938700 	.word	0x03938700
 8004f18:	05f5e0ff 	.word	0x05f5e0ff
 8004f1c:	08f0d17f 	.word	0x08f0d17f

08004f20 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f42:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f50:	2001      	movs	r0, #1
 8004f52:	f7fe fca9 	bl	80038a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f60:	6193      	str	r3, [r2, #24]
}
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4b53      	ldr	r3, [pc, #332]	@ (80050d0 <ETH_SetMACConfig+0x164>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	7b9b      	ldrb	r3, [r3, #14]
 8004f8a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	7c12      	ldrb	r2, [r2, #16]
 8004f90:	2a00      	cmp	r2, #0
 8004f92:	d102      	bne.n	8004f9a <ETH_SetMACConfig+0x2e>
 8004f94:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f98:	e000      	b.n	8004f9c <ETH_SetMACConfig+0x30>
 8004f9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004f9c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	7c52      	ldrb	r2, [r2, #17]
 8004fa2:	2a00      	cmp	r2, #0
 8004fa4:	d102      	bne.n	8004fac <ETH_SetMACConfig+0x40>
 8004fa6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004faa:	e000      	b.n	8004fae <ETH_SetMACConfig+0x42>
 8004fac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004fae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004fb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	7fdb      	ldrb	r3, [r3, #31]
 8004fba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004fbc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004fc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	7f92      	ldrb	r2, [r2, #30]
 8004fc8:	2a00      	cmp	r2, #0
 8004fca:	d102      	bne.n	8004fd2 <ETH_SetMACConfig+0x66>
 8004fcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004fd0:	e000      	b.n	8004fd4 <ETH_SetMACConfig+0x68>
 8004fd2:	2200      	movs	r2, #0
                        macconf->Speed |
 8004fd4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	7f1b      	ldrb	r3, [r3, #28]
 8004fda:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004fdc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004fe2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	791b      	ldrb	r3, [r3, #4]
 8004fe8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004fea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004ff2:	2a00      	cmp	r2, #0
 8004ff4:	d102      	bne.n	8004ffc <ETH_SetMACConfig+0x90>
 8004ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ffa:	e000      	b.n	8004ffe <ETH_SetMACConfig+0x92>
 8004ffc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004ffe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	7bdb      	ldrb	r3, [r3, #15]
 8005004:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005006:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800500c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005014:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005016:	4313      	orrs	r3, r2
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800502e:	2001      	movs	r0, #1
 8005030:	f7fe fc3a 	bl	80038a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800504a:	4013      	ands	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005052:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800505a:	2a00      	cmp	r2, #0
 800505c:	d101      	bne.n	8005062 <ETH_SetMACConfig+0xf6>
 800505e:	2280      	movs	r2, #128	@ 0x80
 8005060:	e000      	b.n	8005064 <ETH_SetMACConfig+0xf8>
 8005062:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005064:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800506a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8005072:	2a01      	cmp	r2, #1
 8005074:	d101      	bne.n	800507a <ETH_SetMACConfig+0x10e>
 8005076:	2208      	movs	r2, #8
 8005078:	e000      	b.n	800507c <ETH_SetMACConfig+0x110>
 800507a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800507c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005084:	2a01      	cmp	r2, #1
 8005086:	d101      	bne.n	800508c <ETH_SetMACConfig+0x120>
 8005088:	2204      	movs	r2, #4
 800508a:	e000      	b.n	800508e <ETH_SetMACConfig+0x122>
 800508c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800508e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8005096:	2a01      	cmp	r2, #1
 8005098:	d101      	bne.n	800509e <ETH_SetMACConfig+0x132>
 800509a:	2202      	movs	r2, #2
 800509c:	e000      	b.n	80050a0 <ETH_SetMACConfig+0x134>
 800509e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80050a0:	4313      	orrs	r3, r2
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050b8:	2001      	movs	r0, #1
 80050ba:	f7fe fbf5 	bl	80038a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	619a      	str	r2, [r3, #24]
}
 80050c6:	bf00      	nop
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	fd20810f 	.word	0xfd20810f

080050d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4b3d      	ldr	r3, [pc, #244]	@ (80051e4 <ETH_SetDMAConfig+0x110>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	7b1b      	ldrb	r3, [r3, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d102      	bne.n	8005100 <ETH_SetDMAConfig+0x2c>
 80050fa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80050fe:	e000      	b.n	8005102 <ETH_SetDMAConfig+0x2e>
 8005100:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	7b5b      	ldrb	r3, [r3, #13]
 8005106:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005108:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	7f52      	ldrb	r2, [r2, #29]
 800510e:	2a00      	cmp	r2, #0
 8005110:	d102      	bne.n	8005118 <ETH_SetDMAConfig+0x44>
 8005112:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005116:	e000      	b.n	800511a <ETH_SetDMAConfig+0x46>
 8005118:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800511a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	7b9b      	ldrb	r3, [r3, #14]
 8005120:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005122:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005128:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	7f1b      	ldrb	r3, [r3, #28]
 800512e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005130:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	7f9b      	ldrb	r3, [r3, #30]
 8005136:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005138:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800513e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005146:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005148:	4313      	orrs	r3, r2
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4313      	orrs	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005158:	461a      	mov	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800516a:	2001      	movs	r0, #1
 800516c:	f7fe fb9c 	bl	80038a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005178:	461a      	mov	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	791b      	ldrb	r3, [r3, #4]
 8005182:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005188:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800518e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005194:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800519c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800519e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80051a6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80051ac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80051ba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80051c8:	2001      	movs	r0, #1
 80051ca:	f7fe fb6d 	bl	80038a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051d6:	461a      	mov	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6013      	str	r3, [r2, #0]
}
 80051dc:	bf00      	nop
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	f8de3f23 	.word	0xf8de3f23

080051e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b0a6      	sub	sp, #152	@ 0x98
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80051f0:	2301      	movs	r3, #1
 80051f2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80051fc:	2300      	movs	r3, #0
 80051fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005200:	2300      	movs	r3, #0
 8005202:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005206:	2301      	movs	r3, #1
 8005208:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800520c:	2300      	movs	r3, #0
 800520e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8005218:	2301      	movs	r3, #1
 800521a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800521e:	2300      	movs	r3, #0
 8005220:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005224:	2300      	movs	r3, #0
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800522a:	2300      	movs	r3, #0
 800522c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800522e:	2300      	movs	r3, #0
 8005230:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005234:	2300      	movs	r3, #0
 8005236:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005238:	2300      	movs	r3, #0
 800523a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800523e:	2300      	movs	r3, #0
 8005240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005244:	2300      	movs	r3, #0
 8005246:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800524a:	2300      	movs	r3, #0
 800524c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005250:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005254:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005256:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800525a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800525c:	2300      	movs	r3, #0
 800525e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005262:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005266:	4619      	mov	r1, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff fe7f 	bl	8004f6c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800526e:	2301      	movs	r3, #1
 8005270:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005272:	2301      	movs	r3, #1
 8005274:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800527c:	2301      	movs	r3, #1
 800527e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005280:	2300      	movs	r3, #0
 8005282:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005284:	2300      	movs	r3, #0
 8005286:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800528a:	2300      	movs	r3, #0
 800528c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005290:	2300      	movs	r3, #0
 8005292:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005294:	2301      	movs	r3, #1
 8005296:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800529a:	2301      	movs	r3, #1
 800529c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800529e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80052a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80052a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80052a8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80052aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052ae:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80052b0:	2301      	movs	r3, #1
 80052b2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80052be:	f107 0308 	add.w	r3, r7, #8
 80052c2:	4619      	mov	r1, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff ff05 	bl	80050d4 <ETH_SetDMAConfig>
}
 80052ca:	bf00      	nop
 80052cc:	3798      	adds	r7, #152	@ 0x98
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3305      	adds	r3, #5
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	3204      	adds	r2, #4
 80052ec:	7812      	ldrb	r2, [r2, #0]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	4b11      	ldr	r3, [pc, #68]	@ (800533c <ETH_MACAddressConfig+0x68>)
 80052f6:	4413      	add	r3, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3303      	adds	r3, #3
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	061a      	lsls	r2, r3, #24
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3302      	adds	r3, #2
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3301      	adds	r3, #1
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	4313      	orrs	r3, r2
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	7812      	ldrb	r2, [r2, #0]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	4b06      	ldr	r3, [pc, #24]	@ (8005340 <ETH_MACAddressConfig+0x6c>)
 8005326:	4413      	add	r3, r2
 8005328:	461a      	mov	r2, r3
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	6013      	str	r3, [r2, #0]
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40028040 	.word	0x40028040
 8005340:	40028044 	.word	0x40028044

08005344 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	e03e      	b.n	80053d0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68d9      	ldr	r1, [r3, #12]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	440b      	add	r3, r1
 8005362:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2200      	movs	r2, #0
 800536e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2200      	movs	r2, #0
 8005374:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2200      	movs	r2, #0
 800537a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	3206      	adds	r2, #6
 8005384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d80c      	bhi.n	80053b4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68d9      	ldr	r1, [r3, #12]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	440b      	add	r3, r1
 80053ac:	461a      	mov	r2, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	e004      	b.n	80053be <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	461a      	mov	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3301      	adds	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d9bd      	bls.n	8005352 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053e8:	611a      	str	r2, [r3, #16]
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	e048      	b.n	8005496 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6919      	ldr	r1, [r3, #16]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	440b      	add	r3, r1
 8005414:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2200      	movs	r2, #0
 8005420:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2200      	movs	r2, #0
 8005426:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2200      	movs	r2, #0
 800542c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2200      	movs	r2, #0
 8005432:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2200      	movs	r2, #0
 8005438:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005440:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800545a:	68b9      	ldr	r1, [r7, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	3212      	adds	r2, #18
 8005462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b02      	cmp	r3, #2
 800546a:	d80c      	bhi.n	8005486 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6919      	ldr	r1, [r3, #16]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	440b      	add	r3, r1
 800547e:	461a      	mov	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	60da      	str	r2, [r3, #12]
 8005484:	e004      	b.n	8005490 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	461a      	mov	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3301      	adds	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b03      	cmp	r3, #3
 800549a:	d9b3      	bls.n	8005404 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054c6:	60da      	str	r2, [r3, #12]
}
 80054c8:	bf00      	nop
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b091      	sub	sp, #68	@ 0x44
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3318      	adds	r3, #24
 80054e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80054ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054fe:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8005506:	2300      	movs	r3, #0
 8005508:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800550a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005512:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005516:	d007      	beq.n	8005528 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800551a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800551c:	3304      	adds	r3, #4
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005528:	2302      	movs	r3, #2
 800552a:	e115      	b.n	8005758 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 800552c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552e:	3301      	adds	r3, #1
 8005530:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8005544:	f023 031f 	bic.w	r3, r3, #31
 8005548:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800554a:	6852      	ldr	r2, [r2, #4]
 800554c:	431a      	orrs	r2, r3
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d008      	beq.n	8005570 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	431a      	orrs	r2, r3
 800556c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800557c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	431a      	orrs	r2, r3
 800558a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800559a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80055a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80055a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80055b2:	e084      	b.n	80056be <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80055b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80055bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055be:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d006      	beq.n	80055d4 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80055c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80055ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	e005      	b.n	80055e0 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80055d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80055dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055de:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80055e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055e2:	3301      	adds	r3, #1
 80055e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d902      	bls.n	80055f2 <ETH_Prepare_Tx_Descriptors+0x11e>
 80055ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ee:	3b04      	subs	r3, #4
 80055f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80055f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80055f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055fa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005604:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005608:	d007      	beq.n	800561a <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800560a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800560c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800560e:	3304      	adds	r3, #4
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d029      	beq.n	800566e <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005626:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005628:	2300      	movs	r3, #0
 800562a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800562c:	e019      	b.n	8005662 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 800562e:	f3bf 8f5f 	dmb	sy
}
 8005632:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005642:	3301      	adds	r3, #1
 8005644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005648:	2b03      	cmp	r3, #3
 800564a:	d902      	bls.n	8005652 <ETH_Prepare_Tx_Descriptors+0x17e>
 800564c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800564e:	3b04      	subs	r3, #4
 8005650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800565c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565e:	3301      	adds	r3, #1
 8005660:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005662:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005666:	429a      	cmp	r2, r3
 8005668:	d3e1      	bcc.n	800562e <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 800566a:	2302      	movs	r3, #2
 800566c:	e074      	b.n	8005758 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800566e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005678:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800567a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567c:	3301      	adds	r3, #1
 800567e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568e:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8005698:	f023 031f 	bic.w	r3, r3, #31
 800569c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800569e:	6852      	ldr	r2, [r2, #4]
 80056a0:	431a      	orrs	r2, r3
 80056a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a4:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80056a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a8:	3301      	adds	r3, #1
 80056aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80056ac:	f3bf 8f5f 	dmb	sy
}
 80056b0:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80056b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80056ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056bc:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80056be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f47f af76 	bne.w	80055b4 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d006      	beq.n	80056dc <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80056ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80056d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	e005      	b.n	80056e8 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80056dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80056e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80056e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80056f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	6a3a      	ldr	r2, [r7, #32]
 80056f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fc:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80056fe:	f3bf 8f5f 	dmb	sy
}
 8005702:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005712:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005714:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005718:	3304      	adds	r3, #4
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005724:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005726:	f3ef 8310 	mrs	r3, PRIMASK
 800572a:	613b      	str	r3, [r7, #16]
  return(result);
 800572c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800572e:	61fb      	str	r3, [r7, #28]
 8005730:	2301      	movs	r3, #1
 8005732:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f383 8810 	msr	PRIMASK, r3
}
 800573a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800573c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005742:	4413      	add	r3, r2
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	629a      	str	r2, [r3, #40]	@ 0x28
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	f383 8810 	msr	PRIMASK, r3
}
 8005754:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3744      	adds	r7, #68	@ 0x44
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005764:	b480      	push	{r7}
 8005766:	b089      	sub	sp, #36	@ 0x24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005772:	2300      	movs	r3, #0
 8005774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005776:	2300      	movs	r3, #0
 8005778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	e16b      	b.n	8005a58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005780:	2201      	movs	r2, #1
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4013      	ands	r3, r2
 8005792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	429a      	cmp	r2, r3
 800579a:	f040 815a 	bne.w	8005a52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d005      	beq.n	80057b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d130      	bne.n	8005818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	2203      	movs	r2, #3
 80057c2:	fa02 f303 	lsl.w	r3, r2, r3
 80057c6:	43db      	mvns	r3, r3
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	4013      	ands	r3, r2
 80057cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4313      	orrs	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057ec:	2201      	movs	r2, #1
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	fa02 f303 	lsl.w	r3, r2, r3
 80057f4:	43db      	mvns	r3, r3
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	4013      	ands	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f003 0201 	and.w	r2, r3, #1
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4313      	orrs	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	2b03      	cmp	r3, #3
 8005822:	d017      	beq.n	8005854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	2203      	movs	r2, #3
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43db      	mvns	r3, r3
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	4013      	ands	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	4313      	orrs	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 0303 	and.w	r3, r3, #3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d123      	bne.n	80058a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	08da      	lsrs	r2, r3, #3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3208      	adds	r2, #8
 8005868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	220f      	movs	r2, #15
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	43db      	mvns	r3, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4013      	ands	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4313      	orrs	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	08da      	lsrs	r2, r3, #3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3208      	adds	r2, #8
 80058a2:	69b9      	ldr	r1, [r7, #24]
 80058a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	2203      	movs	r2, #3
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f003 0203 	and.w	r2, r3, #3
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 80b4 	beq.w	8005a52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	4b60      	ldr	r3, [pc, #384]	@ (8005a70 <HAL_GPIO_Init+0x30c>)
 80058f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f2:	4a5f      	ldr	r2, [pc, #380]	@ (8005a70 <HAL_GPIO_Init+0x30c>)
 80058f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80058fa:	4b5d      	ldr	r3, [pc, #372]	@ (8005a70 <HAL_GPIO_Init+0x30c>)
 80058fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005906:	4a5b      	ldr	r2, [pc, #364]	@ (8005a74 <HAL_GPIO_Init+0x310>)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	089b      	lsrs	r3, r3, #2
 800590c:	3302      	adds	r3, #2
 800590e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	220f      	movs	r2, #15
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	4013      	ands	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a52      	ldr	r2, [pc, #328]	@ (8005a78 <HAL_GPIO_Init+0x314>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d02b      	beq.n	800598a <HAL_GPIO_Init+0x226>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a51      	ldr	r2, [pc, #324]	@ (8005a7c <HAL_GPIO_Init+0x318>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d025      	beq.n	8005986 <HAL_GPIO_Init+0x222>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a50      	ldr	r2, [pc, #320]	@ (8005a80 <HAL_GPIO_Init+0x31c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d01f      	beq.n	8005982 <HAL_GPIO_Init+0x21e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a4f      	ldr	r2, [pc, #316]	@ (8005a84 <HAL_GPIO_Init+0x320>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d019      	beq.n	800597e <HAL_GPIO_Init+0x21a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a4e      	ldr	r2, [pc, #312]	@ (8005a88 <HAL_GPIO_Init+0x324>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d013      	beq.n	800597a <HAL_GPIO_Init+0x216>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a4d      	ldr	r2, [pc, #308]	@ (8005a8c <HAL_GPIO_Init+0x328>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00d      	beq.n	8005976 <HAL_GPIO_Init+0x212>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a4c      	ldr	r2, [pc, #304]	@ (8005a90 <HAL_GPIO_Init+0x32c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d007      	beq.n	8005972 <HAL_GPIO_Init+0x20e>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a4b      	ldr	r2, [pc, #300]	@ (8005a94 <HAL_GPIO_Init+0x330>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d101      	bne.n	800596e <HAL_GPIO_Init+0x20a>
 800596a:	2307      	movs	r3, #7
 800596c:	e00e      	b.n	800598c <HAL_GPIO_Init+0x228>
 800596e:	2308      	movs	r3, #8
 8005970:	e00c      	b.n	800598c <HAL_GPIO_Init+0x228>
 8005972:	2306      	movs	r3, #6
 8005974:	e00a      	b.n	800598c <HAL_GPIO_Init+0x228>
 8005976:	2305      	movs	r3, #5
 8005978:	e008      	b.n	800598c <HAL_GPIO_Init+0x228>
 800597a:	2304      	movs	r3, #4
 800597c:	e006      	b.n	800598c <HAL_GPIO_Init+0x228>
 800597e:	2303      	movs	r3, #3
 8005980:	e004      	b.n	800598c <HAL_GPIO_Init+0x228>
 8005982:	2302      	movs	r3, #2
 8005984:	e002      	b.n	800598c <HAL_GPIO_Init+0x228>
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <HAL_GPIO_Init+0x228>
 800598a:	2300      	movs	r3, #0
 800598c:	69fa      	ldr	r2, [r7, #28]
 800598e:	f002 0203 	and.w	r2, r2, #3
 8005992:	0092      	lsls	r2, r2, #2
 8005994:	4093      	lsls	r3, r2
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	4313      	orrs	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800599c:	4935      	ldr	r1, [pc, #212]	@ (8005a74 <HAL_GPIO_Init+0x310>)
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	089b      	lsrs	r3, r3, #2
 80059a2:	3302      	adds	r3, #2
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005a98 <HAL_GPIO_Init+0x334>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	43db      	mvns	r3, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4013      	ands	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059ce:	4a32      	ldr	r2, [pc, #200]	@ (8005a98 <HAL_GPIO_Init+0x334>)
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059d4:	4b30      	ldr	r3, [pc, #192]	@ (8005a98 <HAL_GPIO_Init+0x334>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	43db      	mvns	r3, r3
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	4013      	ands	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059f8:	4a27      	ldr	r2, [pc, #156]	@ (8005a98 <HAL_GPIO_Init+0x334>)
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059fe:	4b26      	ldr	r3, [pc, #152]	@ (8005a98 <HAL_GPIO_Init+0x334>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	43db      	mvns	r3, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a22:	4a1d      	ldr	r2, [pc, #116]	@ (8005a98 <HAL_GPIO_Init+0x334>)
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a28:	4b1b      	ldr	r3, [pc, #108]	@ (8005a98 <HAL_GPIO_Init+0x334>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	43db      	mvns	r3, r3
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	4013      	ands	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a4c:	4a12      	ldr	r2, [pc, #72]	@ (8005a98 <HAL_GPIO_Init+0x334>)
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	3301      	adds	r3, #1
 8005a56:	61fb      	str	r3, [r7, #28]
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	2b0f      	cmp	r3, #15
 8005a5c:	f67f ae90 	bls.w	8005780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	3724      	adds	r7, #36	@ 0x24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40023800 	.word	0x40023800
 8005a74:	40013800 	.word	0x40013800
 8005a78:	40020000 	.word	0x40020000
 8005a7c:	40020400 	.word	0x40020400
 8005a80:	40020800 	.word	0x40020800
 8005a84:	40020c00 	.word	0x40020c00
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	40021400 	.word	0x40021400
 8005a90:	40021800 	.word	0x40021800
 8005a94:	40021c00 	.word	0x40021c00
 8005a98:	40013c00 	.word	0x40013c00

08005a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	807b      	strh	r3, [r7, #2]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005aac:	787b      	ldrb	r3, [r7, #1]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ab2:	887a      	ldrh	r2, [r7, #2]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ab8:	e003      	b.n	8005ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005aba:	887b      	ldrh	r3, [r7, #2]
 8005abc:	041a      	lsls	r2, r3, #16
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	619a      	str	r2, [r3, #24]
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
	...

08005ad0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e12b      	b.n	8005d3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fd fa52 	bl	8002fa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2224      	movs	r2, #36	@ 0x24
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0201 	bic.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b34:	f000 fe90 	bl	8006858 <HAL_RCC_GetPCLK1Freq>
 8005b38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	4a81      	ldr	r2, [pc, #516]	@ (8005d44 <HAL_I2C_Init+0x274>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d807      	bhi.n	8005b54 <HAL_I2C_Init+0x84>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4a80      	ldr	r2, [pc, #512]	@ (8005d48 <HAL_I2C_Init+0x278>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	bf94      	ite	ls
 8005b4c:	2301      	movls	r3, #1
 8005b4e:	2300      	movhi	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	e006      	b.n	8005b62 <HAL_I2C_Init+0x92>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4a7d      	ldr	r2, [pc, #500]	@ (8005d4c <HAL_I2C_Init+0x27c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	bf94      	ite	ls
 8005b5c:	2301      	movls	r3, #1
 8005b5e:	2300      	movhi	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e0e7      	b.n	8005d3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4a78      	ldr	r2, [pc, #480]	@ (8005d50 <HAL_I2C_Init+0x280>)
 8005b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b72:	0c9b      	lsrs	r3, r3, #18
 8005b74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	4a6a      	ldr	r2, [pc, #424]	@ (8005d44 <HAL_I2C_Init+0x274>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d802      	bhi.n	8005ba4 <HAL_I2C_Init+0xd4>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	e009      	b.n	8005bb8 <HAL_I2C_Init+0xe8>
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
 8005bae:	4a69      	ldr	r2, [pc, #420]	@ (8005d54 <HAL_I2C_Init+0x284>)
 8005bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb4:	099b      	lsrs	r3, r3, #6
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	6812      	ldr	r2, [r2, #0]
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005bca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	495c      	ldr	r1, [pc, #368]	@ (8005d44 <HAL_I2C_Init+0x274>)
 8005bd4:	428b      	cmp	r3, r1
 8005bd6:	d819      	bhi.n	8005c0c <HAL_I2C_Init+0x13c>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	1e59      	subs	r1, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005be6:	1c59      	adds	r1, r3, #1
 8005be8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005bec:	400b      	ands	r3, r1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <HAL_I2C_Init+0x138>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1e59      	subs	r1, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c00:	3301      	adds	r3, #1
 8005c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c06:	e051      	b.n	8005cac <HAL_I2C_Init+0x1dc>
 8005c08:	2304      	movs	r3, #4
 8005c0a:	e04f      	b.n	8005cac <HAL_I2C_Init+0x1dc>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d111      	bne.n	8005c38 <HAL_I2C_Init+0x168>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1e58      	subs	r0, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6859      	ldr	r1, [r3, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	440b      	add	r3, r1
 8005c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c26:	3301      	adds	r3, #1
 8005c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	bf0c      	ite	eq
 8005c30:	2301      	moveq	r3, #1
 8005c32:	2300      	movne	r3, #0
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	e012      	b.n	8005c5e <HAL_I2C_Init+0x18e>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	1e58      	subs	r0, r3, #1
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6859      	ldr	r1, [r3, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	0099      	lsls	r1, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c4e:	3301      	adds	r3, #1
 8005c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	bf0c      	ite	eq
 8005c58:	2301      	moveq	r3, #1
 8005c5a:	2300      	movne	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <HAL_I2C_Init+0x196>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e022      	b.n	8005cac <HAL_I2C_Init+0x1dc>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10e      	bne.n	8005c8c <HAL_I2C_Init+0x1bc>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	1e58      	subs	r0, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6859      	ldr	r1, [r3, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	440b      	add	r3, r1
 8005c7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c80:	3301      	adds	r3, #1
 8005c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c8a:	e00f      	b.n	8005cac <HAL_I2C_Init+0x1dc>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	1e58      	subs	r0, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6859      	ldr	r1, [r3, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	0099      	lsls	r1, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	6809      	ldr	r1, [r1, #0]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69da      	ldr	r2, [r3, #28]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005cda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6911      	ldr	r1, [r2, #16]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	68d2      	ldr	r2, [r2, #12]
 8005ce6:	4311      	orrs	r1, r2
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	430b      	orrs	r3, r1
 8005cee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695a      	ldr	r2, [r3, #20]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	000186a0 	.word	0x000186a0
 8005d48:	001e847f 	.word	0x001e847f
 8005d4c:	003d08ff 	.word	0x003d08ff
 8005d50:	431bde83 	.word	0x431bde83
 8005d54:	10624dd3 	.word	0x10624dd3

08005d58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e101      	b.n	8005f6e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d106      	bne.n	8005d8a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fd fa8b 	bl	80032a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2203      	movs	r2, #3
 8005d8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d98:	d102      	bne.n	8005da0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f001 ff73 	bl	8007c90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6818      	ldr	r0, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	7c1a      	ldrb	r2, [r3, #16]
 8005db2:	f88d 2000 	strb.w	r2, [sp]
 8005db6:	3304      	adds	r3, #4
 8005db8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dba:	f001 ff05 	bl	8007bc8 <USB_CoreInit>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e0ce      	b.n	8005f6e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f001 ff6b 	bl	8007cb2 <USB_SetCurrentMode>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2202      	movs	r2, #2
 8005de6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e0bf      	b.n	8005f6e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dee:	2300      	movs	r3, #0
 8005df0:	73fb      	strb	r3, [r7, #15]
 8005df2:	e04a      	b.n	8005e8a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005df4:	7bfa      	ldrb	r2, [r7, #15]
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	440b      	add	r3, r1
 8005e02:	3315      	adds	r3, #21
 8005e04:	2201      	movs	r2, #1
 8005e06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e08:	7bfa      	ldrb	r2, [r7, #15]
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	3314      	adds	r3, #20
 8005e18:	7bfa      	ldrb	r2, [r7, #15]
 8005e1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e1c:	7bfa      	ldrb	r2, [r7, #15]
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	b298      	uxth	r0, r3
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	4613      	mov	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	440b      	add	r3, r1
 8005e2e:	332e      	adds	r3, #46	@ 0x2e
 8005e30:	4602      	mov	r2, r0
 8005e32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e34:	7bfa      	ldrb	r2, [r7, #15]
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	440b      	add	r3, r1
 8005e42:	3318      	adds	r3, #24
 8005e44:	2200      	movs	r2, #0
 8005e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e48:	7bfa      	ldrb	r2, [r7, #15]
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	440b      	add	r3, r1
 8005e56:	331c      	adds	r3, #28
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e5c:	7bfa      	ldrb	r2, [r7, #15]
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	4613      	mov	r3, r2
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	4413      	add	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	440b      	add	r3, r1
 8005e6a:	3320      	adds	r3, #32
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e70:	7bfa      	ldrb	r2, [r7, #15]
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	4613      	mov	r3, r2
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	440b      	add	r3, r1
 8005e7e:	3324      	adds	r3, #36	@ 0x24
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	3301      	adds	r3, #1
 8005e88:	73fb      	strb	r3, [r7, #15]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	791b      	ldrb	r3, [r3, #4]
 8005e8e:	7bfa      	ldrb	r2, [r7, #15]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d3af      	bcc.n	8005df4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e94:	2300      	movs	r3, #0
 8005e96:	73fb      	strb	r3, [r7, #15]
 8005e98:	e044      	b.n	8005f24 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e9a:	7bfa      	ldrb	r2, [r7, #15]
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005eac:	2200      	movs	r2, #0
 8005eae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005eb0:	7bfa      	ldrb	r2, [r7, #15]
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	4413      	add	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005ec2:	7bfa      	ldrb	r2, [r7, #15]
 8005ec4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ec6:	7bfa      	ldrb	r2, [r7, #15]
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005edc:	7bfa      	ldrb	r2, [r7, #15]
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ef2:	7bfa      	ldrb	r2, [r7, #15]
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f08:	7bfa      	ldrb	r2, [r7, #15]
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	440b      	add	r3, r1
 8005f16:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	3301      	adds	r3, #1
 8005f22:	73fb      	strb	r3, [r7, #15]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	791b      	ldrb	r3, [r3, #4]
 8005f28:	7bfa      	ldrb	r2, [r7, #15]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d3b5      	bcc.n	8005e9a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	7c1a      	ldrb	r2, [r3, #16]
 8005f36:	f88d 2000 	strb.w	r2, [sp]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f3e:	f001 ff05 	bl	8007d4c <USB_DevInit>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e00c      	b.n	8005f6e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f002 f8cd 	bl	8008106 <USB_DevDisconnect>

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e267      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d075      	beq.n	8006082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f96:	4b88      	ldr	r3, [pc, #544]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 030c 	and.w	r3, r3, #12
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d00c      	beq.n	8005fbc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fa2:	4b85      	ldr	r3, [pc, #532]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d112      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fae:	4b82      	ldr	r3, [pc, #520]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fba:	d10b      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d05b      	beq.n	8006080 <HAL_RCC_OscConfig+0x108>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d157      	bne.n	8006080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e242      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fdc:	d106      	bne.n	8005fec <HAL_RCC_OscConfig+0x74>
 8005fde:	4b76      	ldr	r3, [pc, #472]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a75      	ldr	r2, [pc, #468]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8005fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	e01d      	b.n	8006028 <HAL_RCC_OscConfig+0xb0>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ff4:	d10c      	bne.n	8006010 <HAL_RCC_OscConfig+0x98>
 8005ff6:	4b70      	ldr	r3, [pc, #448]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a6f      	ldr	r2, [pc, #444]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	4b6d      	ldr	r3, [pc, #436]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a6c      	ldr	r2, [pc, #432]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8006008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	e00b      	b.n	8006028 <HAL_RCC_OscConfig+0xb0>
 8006010:	4b69      	ldr	r3, [pc, #420]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a68      	ldr	r2, [pc, #416]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8006016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	4b66      	ldr	r3, [pc, #408]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a65      	ldr	r2, [pc, #404]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8006022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d013      	beq.n	8006058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006030:	f7fd fc2e 	bl	8003890 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006038:	f7fd fc2a 	bl	8003890 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b64      	cmp	r3, #100	@ 0x64
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e207      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800604a:	4b5b      	ldr	r3, [pc, #364]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0f0      	beq.n	8006038 <HAL_RCC_OscConfig+0xc0>
 8006056:	e014      	b.n	8006082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006058:	f7fd fc1a 	bl	8003890 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006060:	f7fd fc16 	bl	8003890 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b64      	cmp	r3, #100	@ 0x64
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e1f3      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006072:	4b51      	ldr	r3, [pc, #324]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1f0      	bne.n	8006060 <HAL_RCC_OscConfig+0xe8>
 800607e:	e000      	b.n	8006082 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d063      	beq.n	8006156 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800608e:	4b4a      	ldr	r3, [pc, #296]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 030c 	and.w	r3, r3, #12
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00b      	beq.n	80060b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800609a:	4b47      	ldr	r3, [pc, #284]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d11c      	bne.n	80060e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060a6:	4b44      	ldr	r3, [pc, #272]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d116      	bne.n	80060e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060b2:	4b41      	ldr	r3, [pc, #260]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d005      	beq.n	80060ca <HAL_RCC_OscConfig+0x152>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d001      	beq.n	80060ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e1c7      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ca:	4b3b      	ldr	r3, [pc, #236]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	4937      	ldr	r1, [pc, #220]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060de:	e03a      	b.n	8006156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d020      	beq.n	800612a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060e8:	4b34      	ldr	r3, [pc, #208]	@ (80061bc <HAL_RCC_OscConfig+0x244>)
 80060ea:	2201      	movs	r2, #1
 80060ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ee:	f7fd fbcf 	bl	8003890 <HAL_GetTick>
 80060f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060f4:	e008      	b.n	8006108 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060f6:	f7fd fbcb 	bl	8003890 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e1a8      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006108:	4b2b      	ldr	r3, [pc, #172]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0f0      	beq.n	80060f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006114:	4b28      	ldr	r3, [pc, #160]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	4925      	ldr	r1, [pc, #148]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 8006124:	4313      	orrs	r3, r2
 8006126:	600b      	str	r3, [r1, #0]
 8006128:	e015      	b.n	8006156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800612a:	4b24      	ldr	r3, [pc, #144]	@ (80061bc <HAL_RCC_OscConfig+0x244>)
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006130:	f7fd fbae 	bl	8003890 <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006138:	f7fd fbaa 	bl	8003890 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e187      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800614a:	4b1b      	ldr	r3, [pc, #108]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f0      	bne.n	8006138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d036      	beq.n	80061d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d016      	beq.n	8006198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800616a:	4b15      	ldr	r3, [pc, #84]	@ (80061c0 <HAL_RCC_OscConfig+0x248>)
 800616c:	2201      	movs	r2, #1
 800616e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006170:	f7fd fb8e 	bl	8003890 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006178:	f7fd fb8a 	bl	8003890 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e167      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800618a:	4b0b      	ldr	r3, [pc, #44]	@ (80061b8 <HAL_RCC_OscConfig+0x240>)
 800618c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f0      	beq.n	8006178 <HAL_RCC_OscConfig+0x200>
 8006196:	e01b      	b.n	80061d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006198:	4b09      	ldr	r3, [pc, #36]	@ (80061c0 <HAL_RCC_OscConfig+0x248>)
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800619e:	f7fd fb77 	bl	8003890 <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061a4:	e00e      	b.n	80061c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a6:	f7fd fb73 	bl	8003890 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d907      	bls.n	80061c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e150      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
 80061b8:	40023800 	.word	0x40023800
 80061bc:	42470000 	.word	0x42470000
 80061c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061c4:	4b88      	ldr	r3, [pc, #544]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 80061c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1ea      	bne.n	80061a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8097 	beq.w	800630c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061de:	2300      	movs	r3, #0
 80061e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061e2:	4b81      	ldr	r3, [pc, #516]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 80061e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10f      	bne.n	800620e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061ee:	2300      	movs	r3, #0
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	4b7d      	ldr	r3, [pc, #500]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 80061f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f6:	4a7c      	ldr	r2, [pc, #496]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 80061f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80061fe:	4b7a      	ldr	r3, [pc, #488]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006206:	60bb      	str	r3, [r7, #8]
 8006208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800620a:	2301      	movs	r3, #1
 800620c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620e:	4b77      	ldr	r3, [pc, #476]	@ (80063ec <HAL_RCC_OscConfig+0x474>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006216:	2b00      	cmp	r3, #0
 8006218:	d118      	bne.n	800624c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800621a:	4b74      	ldr	r3, [pc, #464]	@ (80063ec <HAL_RCC_OscConfig+0x474>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a73      	ldr	r2, [pc, #460]	@ (80063ec <HAL_RCC_OscConfig+0x474>)
 8006220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006226:	f7fd fb33 	bl	8003890 <HAL_GetTick>
 800622a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800622c:	e008      	b.n	8006240 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800622e:	f7fd fb2f 	bl	8003890 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e10c      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006240:	4b6a      	ldr	r3, [pc, #424]	@ (80063ec <HAL_RCC_OscConfig+0x474>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0f0      	beq.n	800622e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d106      	bne.n	8006262 <HAL_RCC_OscConfig+0x2ea>
 8006254:	4b64      	ldr	r3, [pc, #400]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 8006256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006258:	4a63      	ldr	r2, [pc, #396]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 800625a:	f043 0301 	orr.w	r3, r3, #1
 800625e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006260:	e01c      	b.n	800629c <HAL_RCC_OscConfig+0x324>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2b05      	cmp	r3, #5
 8006268:	d10c      	bne.n	8006284 <HAL_RCC_OscConfig+0x30c>
 800626a:	4b5f      	ldr	r3, [pc, #380]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 800626c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800626e:	4a5e      	ldr	r2, [pc, #376]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 8006270:	f043 0304 	orr.w	r3, r3, #4
 8006274:	6713      	str	r3, [r2, #112]	@ 0x70
 8006276:	4b5c      	ldr	r3, [pc, #368]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627a:	4a5b      	ldr	r2, [pc, #364]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	6713      	str	r3, [r2, #112]	@ 0x70
 8006282:	e00b      	b.n	800629c <HAL_RCC_OscConfig+0x324>
 8006284:	4b58      	ldr	r3, [pc, #352]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 8006286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006288:	4a57      	ldr	r2, [pc, #348]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006290:	4b55      	ldr	r3, [pc, #340]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 8006292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006294:	4a54      	ldr	r2, [pc, #336]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 8006296:	f023 0304 	bic.w	r3, r3, #4
 800629a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d015      	beq.n	80062d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a4:	f7fd faf4 	bl	8003890 <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062aa:	e00a      	b.n	80062c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ac:	f7fd faf0 	bl	8003890 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e0cb      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c2:	4b49      	ldr	r3, [pc, #292]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 80062c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0ee      	beq.n	80062ac <HAL_RCC_OscConfig+0x334>
 80062ce:	e014      	b.n	80062fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062d0:	f7fd fade 	bl	8003890 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062d6:	e00a      	b.n	80062ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d8:	f7fd fada 	bl	8003890 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e0b5      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ee:	4b3e      	ldr	r3, [pc, #248]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 80062f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1ee      	bne.n	80062d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d105      	bne.n	800630c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006300:	4b39      	ldr	r3, [pc, #228]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 8006302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006304:	4a38      	ldr	r2, [pc, #224]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 8006306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800630a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 80a1 	beq.w	8006458 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006316:	4b34      	ldr	r3, [pc, #208]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 030c 	and.w	r3, r3, #12
 800631e:	2b08      	cmp	r3, #8
 8006320:	d05c      	beq.n	80063dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d141      	bne.n	80063ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800632a:	4b31      	ldr	r3, [pc, #196]	@ (80063f0 <HAL_RCC_OscConfig+0x478>)
 800632c:	2200      	movs	r2, #0
 800632e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006330:	f7fd faae 	bl	8003890 <HAL_GetTick>
 8006334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006338:	f7fd faaa 	bl	8003890 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e087      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634a:	4b27      	ldr	r3, [pc, #156]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1f0      	bne.n	8006338 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69da      	ldr	r2, [r3, #28]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006364:	019b      	lsls	r3, r3, #6
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	3b01      	subs	r3, #1
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006378:	061b      	lsls	r3, r3, #24
 800637a:	491b      	ldr	r1, [pc, #108]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 800637c:	4313      	orrs	r3, r2
 800637e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006380:	4b1b      	ldr	r3, [pc, #108]	@ (80063f0 <HAL_RCC_OscConfig+0x478>)
 8006382:	2201      	movs	r2, #1
 8006384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006386:	f7fd fa83 	bl	8003890 <HAL_GetTick>
 800638a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800638c:	e008      	b.n	80063a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800638e:	f7fd fa7f 	bl	8003890 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d901      	bls.n	80063a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e05c      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063a0:	4b11      	ldr	r3, [pc, #68]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0f0      	beq.n	800638e <HAL_RCC_OscConfig+0x416>
 80063ac:	e054      	b.n	8006458 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ae:	4b10      	ldr	r3, [pc, #64]	@ (80063f0 <HAL_RCC_OscConfig+0x478>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b4:	f7fd fa6c 	bl	8003890 <HAL_GetTick>
 80063b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063bc:	f7fd fa68 	bl	8003890 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e045      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ce:	4b06      	ldr	r3, [pc, #24]	@ (80063e8 <HAL_RCC_OscConfig+0x470>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1f0      	bne.n	80063bc <HAL_RCC_OscConfig+0x444>
 80063da:	e03d      	b.n	8006458 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d107      	bne.n	80063f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e038      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
 80063e8:	40023800 	.word	0x40023800
 80063ec:	40007000 	.word	0x40007000
 80063f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006464 <HAL_RCC_OscConfig+0x4ec>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d028      	beq.n	8006454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800640c:	429a      	cmp	r2, r3
 800640e:	d121      	bne.n	8006454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800641a:	429a      	cmp	r2, r3
 800641c:	d11a      	bne.n	8006454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006424:	4013      	ands	r3, r2
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800642a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800642c:	4293      	cmp	r3, r2
 800642e:	d111      	bne.n	8006454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	3b01      	subs	r3, #1
 800643e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006440:	429a      	cmp	r2, r3
 8006442:	d107      	bne.n	8006454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006450:	429a      	cmp	r2, r3
 8006452:	d001      	beq.n	8006458 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e000      	b.n	800645a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40023800 	.word	0x40023800

08006468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e0cc      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800647c:	4b68      	ldr	r3, [pc, #416]	@ (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d90c      	bls.n	80064a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648a:	4b65      	ldr	r3, [pc, #404]	@ (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006492:	4b63      	ldr	r3, [pc, #396]	@ (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d001      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0b8      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d020      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064bc:	4b59      	ldr	r3, [pc, #356]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4a58      	ldr	r2, [pc, #352]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80064c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064d4:	4b53      	ldr	r3, [pc, #332]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	4a52      	ldr	r2, [pc, #328]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80064de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064e0:	4b50      	ldr	r3, [pc, #320]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	494d      	ldr	r1, [pc, #308]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d044      	beq.n	8006588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d107      	bne.n	8006516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006506:	4b47      	ldr	r3, [pc, #284]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d119      	bne.n	8006546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e07f      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b02      	cmp	r3, #2
 800651c:	d003      	beq.n	8006526 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006522:	2b03      	cmp	r3, #3
 8006524:	d107      	bne.n	8006536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006526:	4b3f      	ldr	r3, [pc, #252]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e06f      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006536:	4b3b      	ldr	r3, [pc, #236]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e067      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006546:	4b37      	ldr	r3, [pc, #220]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f023 0203 	bic.w	r2, r3, #3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	4934      	ldr	r1, [pc, #208]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006554:	4313      	orrs	r3, r2
 8006556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006558:	f7fd f99a 	bl	8003890 <HAL_GetTick>
 800655c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655e:	e00a      	b.n	8006576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006560:	f7fd f996 	bl	8003890 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e04f      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006576:	4b2b      	ldr	r3, [pc, #172]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 020c 	and.w	r2, r3, #12
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	429a      	cmp	r2, r3
 8006586:	d1eb      	bne.n	8006560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006588:	4b25      	ldr	r3, [pc, #148]	@ (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0307 	and.w	r3, r3, #7
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d20c      	bcs.n	80065b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006596:	4b22      	ldr	r3, [pc, #136]	@ (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800659e:	4b20      	ldr	r3, [pc, #128]	@ (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d001      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e032      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065bc:	4b19      	ldr	r3, [pc, #100]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	4916      	ldr	r1, [pc, #88]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065da:	4b12      	ldr	r3, [pc, #72]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	490e      	ldr	r1, [pc, #56]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065ee:	f000 f821 	bl	8006634 <HAL_RCC_GetSysClockFreq>
 80065f2:	4602      	mov	r2, r0
 80065f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	091b      	lsrs	r3, r3, #4
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	490a      	ldr	r1, [pc, #40]	@ (8006628 <HAL_RCC_ClockConfig+0x1c0>)
 8006600:	5ccb      	ldrb	r3, [r1, r3]
 8006602:	fa22 f303 	lsr.w	r3, r2, r3
 8006606:	4a09      	ldr	r2, [pc, #36]	@ (800662c <HAL_RCC_ClockConfig+0x1c4>)
 8006608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800660a:	4b09      	ldr	r3, [pc, #36]	@ (8006630 <HAL_RCC_ClockConfig+0x1c8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f7fd f8fa 	bl	8003808 <HAL_InitTick>

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40023c00 	.word	0x40023c00
 8006624:	40023800 	.word	0x40023800
 8006628:	080170fc 	.word	0x080170fc
 800662c:	20000074 	.word	0x20000074
 8006630:	20000078 	.word	0x20000078

08006634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006638:	b094      	sub	sp, #80	@ 0x50
 800663a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800664c:	4b79      	ldr	r3, [pc, #484]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x200>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 030c 	and.w	r3, r3, #12
 8006654:	2b08      	cmp	r3, #8
 8006656:	d00d      	beq.n	8006674 <HAL_RCC_GetSysClockFreq+0x40>
 8006658:	2b08      	cmp	r3, #8
 800665a:	f200 80e1 	bhi.w	8006820 <HAL_RCC_GetSysClockFreq+0x1ec>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <HAL_RCC_GetSysClockFreq+0x34>
 8006662:	2b04      	cmp	r3, #4
 8006664:	d003      	beq.n	800666e <HAL_RCC_GetSysClockFreq+0x3a>
 8006666:	e0db      	b.n	8006820 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006668:	4b73      	ldr	r3, [pc, #460]	@ (8006838 <HAL_RCC_GetSysClockFreq+0x204>)
 800666a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800666c:	e0db      	b.n	8006826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800666e:	4b73      	ldr	r3, [pc, #460]	@ (800683c <HAL_RCC_GetSysClockFreq+0x208>)
 8006670:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006672:	e0d8      	b.n	8006826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006674:	4b6f      	ldr	r3, [pc, #444]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x200>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800667c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800667e:	4b6d      	ldr	r3, [pc, #436]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x200>)
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d063      	beq.n	8006752 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800668a:	4b6a      	ldr	r3, [pc, #424]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x200>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	099b      	lsrs	r3, r3, #6
 8006690:	2200      	movs	r2, #0
 8006692:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006694:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669c:	633b      	str	r3, [r7, #48]	@ 0x30
 800669e:	2300      	movs	r3, #0
 80066a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80066a6:	4622      	mov	r2, r4
 80066a8:	462b      	mov	r3, r5
 80066aa:	f04f 0000 	mov.w	r0, #0
 80066ae:	f04f 0100 	mov.w	r1, #0
 80066b2:	0159      	lsls	r1, r3, #5
 80066b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066b8:	0150      	lsls	r0, r2, #5
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4621      	mov	r1, r4
 80066c0:	1a51      	subs	r1, r2, r1
 80066c2:	6139      	str	r1, [r7, #16]
 80066c4:	4629      	mov	r1, r5
 80066c6:	eb63 0301 	sbc.w	r3, r3, r1
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	f04f 0300 	mov.w	r3, #0
 80066d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066d8:	4659      	mov	r1, fp
 80066da:	018b      	lsls	r3, r1, #6
 80066dc:	4651      	mov	r1, sl
 80066de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066e2:	4651      	mov	r1, sl
 80066e4:	018a      	lsls	r2, r1, #6
 80066e6:	4651      	mov	r1, sl
 80066e8:	ebb2 0801 	subs.w	r8, r2, r1
 80066ec:	4659      	mov	r1, fp
 80066ee:	eb63 0901 	sbc.w	r9, r3, r1
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	f04f 0300 	mov.w	r3, #0
 80066fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006706:	4690      	mov	r8, r2
 8006708:	4699      	mov	r9, r3
 800670a:	4623      	mov	r3, r4
 800670c:	eb18 0303 	adds.w	r3, r8, r3
 8006710:	60bb      	str	r3, [r7, #8]
 8006712:	462b      	mov	r3, r5
 8006714:	eb49 0303 	adc.w	r3, r9, r3
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	f04f 0200 	mov.w	r2, #0
 800671e:	f04f 0300 	mov.w	r3, #0
 8006722:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006726:	4629      	mov	r1, r5
 8006728:	024b      	lsls	r3, r1, #9
 800672a:	4621      	mov	r1, r4
 800672c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006730:	4621      	mov	r1, r4
 8006732:	024a      	lsls	r2, r1, #9
 8006734:	4610      	mov	r0, r2
 8006736:	4619      	mov	r1, r3
 8006738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800673a:	2200      	movs	r2, #0
 800673c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800673e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006744:	f7fa fa70 	bl	8000c28 <__aeabi_uldivmod>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4613      	mov	r3, r2
 800674e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006750:	e058      	b.n	8006804 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006752:	4b38      	ldr	r3, [pc, #224]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x200>)
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	099b      	lsrs	r3, r3, #6
 8006758:	2200      	movs	r2, #0
 800675a:	4618      	mov	r0, r3
 800675c:	4611      	mov	r1, r2
 800675e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006762:	623b      	str	r3, [r7, #32]
 8006764:	2300      	movs	r3, #0
 8006766:	627b      	str	r3, [r7, #36]	@ 0x24
 8006768:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800676c:	4642      	mov	r2, r8
 800676e:	464b      	mov	r3, r9
 8006770:	f04f 0000 	mov.w	r0, #0
 8006774:	f04f 0100 	mov.w	r1, #0
 8006778:	0159      	lsls	r1, r3, #5
 800677a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800677e:	0150      	lsls	r0, r2, #5
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4641      	mov	r1, r8
 8006786:	ebb2 0a01 	subs.w	sl, r2, r1
 800678a:	4649      	mov	r1, r9
 800678c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	f04f 0300 	mov.w	r3, #0
 8006798:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800679c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067a4:	ebb2 040a 	subs.w	r4, r2, sl
 80067a8:	eb63 050b 	sbc.w	r5, r3, fp
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	00eb      	lsls	r3, r5, #3
 80067b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067ba:	00e2      	lsls	r2, r4, #3
 80067bc:	4614      	mov	r4, r2
 80067be:	461d      	mov	r5, r3
 80067c0:	4643      	mov	r3, r8
 80067c2:	18e3      	adds	r3, r4, r3
 80067c4:	603b      	str	r3, [r7, #0]
 80067c6:	464b      	mov	r3, r9
 80067c8:	eb45 0303 	adc.w	r3, r5, r3
 80067cc:	607b      	str	r3, [r7, #4]
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	f04f 0300 	mov.w	r3, #0
 80067d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067da:	4629      	mov	r1, r5
 80067dc:	028b      	lsls	r3, r1, #10
 80067de:	4621      	mov	r1, r4
 80067e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067e4:	4621      	mov	r1, r4
 80067e6:	028a      	lsls	r2, r1, #10
 80067e8:	4610      	mov	r0, r2
 80067ea:	4619      	mov	r1, r3
 80067ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067ee:	2200      	movs	r2, #0
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	61fa      	str	r2, [r7, #28]
 80067f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067f8:	f7fa fa16 	bl	8000c28 <__aeabi_uldivmod>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4613      	mov	r3, r2
 8006802:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006804:	4b0b      	ldr	r3, [pc, #44]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x200>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	0c1b      	lsrs	r3, r3, #16
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	3301      	adds	r3, #1
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006814:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006818:	fbb2 f3f3 	udiv	r3, r2, r3
 800681c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800681e:	e002      	b.n	8006826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006820:	4b05      	ldr	r3, [pc, #20]	@ (8006838 <HAL_RCC_GetSysClockFreq+0x204>)
 8006822:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006828:	4618      	mov	r0, r3
 800682a:	3750      	adds	r7, #80	@ 0x50
 800682c:	46bd      	mov	sp, r7
 800682e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006832:	bf00      	nop
 8006834:	40023800 	.word	0x40023800
 8006838:	00f42400 	.word	0x00f42400
 800683c:	007a1200 	.word	0x007a1200

08006840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006844:	4b03      	ldr	r3, [pc, #12]	@ (8006854 <HAL_RCC_GetHCLKFreq+0x14>)
 8006846:	681b      	ldr	r3, [r3, #0]
}
 8006848:	4618      	mov	r0, r3
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20000074 	.word	0x20000074

08006858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800685c:	f7ff fff0 	bl	8006840 <HAL_RCC_GetHCLKFreq>
 8006860:	4602      	mov	r2, r0
 8006862:	4b05      	ldr	r3, [pc, #20]	@ (8006878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	0a9b      	lsrs	r3, r3, #10
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	4903      	ldr	r1, [pc, #12]	@ (800687c <HAL_RCC_GetPCLK1Freq+0x24>)
 800686e:	5ccb      	ldrb	r3, [r1, r3]
 8006870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006874:	4618      	mov	r0, r3
 8006876:	bd80      	pop	{r7, pc}
 8006878:	40023800 	.word	0x40023800
 800687c:	0801710c 	.word	0x0801710c

08006880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006884:	f7ff ffdc 	bl	8006840 <HAL_RCC_GetHCLKFreq>
 8006888:	4602      	mov	r2, r0
 800688a:	4b05      	ldr	r3, [pc, #20]	@ (80068a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	0b5b      	lsrs	r3, r3, #13
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	4903      	ldr	r1, [pc, #12]	@ (80068a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006896:	5ccb      	ldrb	r3, [r1, r3]
 8006898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800689c:	4618      	mov	r0, r3
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40023800 	.word	0x40023800
 80068a4:	0801710c 	.word	0x0801710c

080068a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e07b      	b.n	80069b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d108      	bne.n	80068d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068ca:	d009      	beq.n	80068e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	61da      	str	r2, [r3, #28]
 80068d2:	e005      	b.n	80068e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d106      	bne.n	8006900 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fc fb98 	bl	8003030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006916:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006932:	431a      	orrs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	431a      	orrs	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006950:	431a      	orrs	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006964:	ea42 0103 	orr.w	r1, r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	0c1b      	lsrs	r3, r3, #16
 800697e:	f003 0104 	and.w	r1, r3, #4
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006986:	f003 0210 	and.w	r2, r3, #16
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69da      	ldr	r2, [r3, #28]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b082      	sub	sp, #8
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e041      	b.n	8006a50 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d106      	bne.n	80069e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7fc fb6d 	bl	80030c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2202      	movs	r2, #2
 80069ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	3304      	adds	r3, #4
 80069f6:	4619      	mov	r1, r3
 80069f8:	4610      	mov	r0, r2
 80069fa:	f000 faaf 	bl	8006f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d001      	beq.n	8006a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e04e      	b.n	8006b0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f042 0201 	orr.w	r2, r2, #1
 8006a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a23      	ldr	r2, [pc, #140]	@ (8006b1c <HAL_TIM_Base_Start_IT+0xc4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d022      	beq.n	8006ad8 <HAL_TIM_Base_Start_IT+0x80>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a9a:	d01d      	beq.n	8006ad8 <HAL_TIM_Base_Start_IT+0x80>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8006b20 <HAL_TIM_Base_Start_IT+0xc8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d018      	beq.n	8006ad8 <HAL_TIM_Base_Start_IT+0x80>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a1e      	ldr	r2, [pc, #120]	@ (8006b24 <HAL_TIM_Base_Start_IT+0xcc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d013      	beq.n	8006ad8 <HAL_TIM_Base_Start_IT+0x80>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b28 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00e      	beq.n	8006ad8 <HAL_TIM_Base_Start_IT+0x80>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a1b      	ldr	r2, [pc, #108]	@ (8006b2c <HAL_TIM_Base_Start_IT+0xd4>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d009      	beq.n	8006ad8 <HAL_TIM_Base_Start_IT+0x80>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a19      	ldr	r2, [pc, #100]	@ (8006b30 <HAL_TIM_Base_Start_IT+0xd8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d004      	beq.n	8006ad8 <HAL_TIM_Base_Start_IT+0x80>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a18      	ldr	r2, [pc, #96]	@ (8006b34 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d111      	bne.n	8006afc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b06      	cmp	r3, #6
 8006ae8:	d010      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0201 	orr.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006afa:	e007      	b.n	8006b0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0201 	orr.w	r2, r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40010000 	.word	0x40010000
 8006b20:	40000400 	.word	0x40000400
 8006b24:	40000800 	.word	0x40000800
 8006b28:	40000c00 	.word	0x40000c00
 8006b2c:	40010400 	.word	0x40010400
 8006b30:	40014000 	.word	0x40014000
 8006b34:	40001800 	.word	0x40001800

08006b38 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0201 	bic.w	r2, r2, #1
 8006b4e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6a1a      	ldr	r2, [r3, #32]
 8006b56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10f      	bne.n	8006b80 <HAL_TIM_Base_Stop_IT+0x48>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6a1a      	ldr	r2, [r3, #32]
 8006b66:	f240 4344 	movw	r3, #1092	@ 0x444
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d107      	bne.n	8006b80 <HAL_TIM_Base_Stop_IT+0x48>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0201 	bic.w	r2, r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e041      	b.n	8006c2c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d106      	bne.n	8006bc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f839 	bl	8006c34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	f000 f9c1 	bl	8006f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c62:	2302      	movs	r3, #2
 8006c64:	e0ae      	b.n	8006dc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b0c      	cmp	r3, #12
 8006c72:	f200 809f 	bhi.w	8006db4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c76:	a201      	add	r2, pc, #4	@ (adr r2, 8006c7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006cb1 	.word	0x08006cb1
 8006c80:	08006db5 	.word	0x08006db5
 8006c84:	08006db5 	.word	0x08006db5
 8006c88:	08006db5 	.word	0x08006db5
 8006c8c:	08006cf1 	.word	0x08006cf1
 8006c90:	08006db5 	.word	0x08006db5
 8006c94:	08006db5 	.word	0x08006db5
 8006c98:	08006db5 	.word	0x08006db5
 8006c9c:	08006d33 	.word	0x08006d33
 8006ca0:	08006db5 	.word	0x08006db5
 8006ca4:	08006db5 	.word	0x08006db5
 8006ca8:	08006db5 	.word	0x08006db5
 8006cac:	08006d73 	.word	0x08006d73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 f9fc 	bl	80070b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699a      	ldr	r2, [r3, #24]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0208 	orr.w	r2, r2, #8
 8006cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	699a      	ldr	r2, [r3, #24]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0204 	bic.w	r2, r2, #4
 8006cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6999      	ldr	r1, [r3, #24]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	619a      	str	r2, [r3, #24]
      break;
 8006cee:	e064      	b.n	8006dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68b9      	ldr	r1, [r7, #8]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fa4c 	bl	8007194 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699a      	ldr	r2, [r3, #24]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	699a      	ldr	r2, [r3, #24]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6999      	ldr	r1, [r3, #24]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	021a      	lsls	r2, r3, #8
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	619a      	str	r2, [r3, #24]
      break;
 8006d30:	e043      	b.n	8006dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 faa1 	bl	8007280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69da      	ldr	r2, [r3, #28]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0208 	orr.w	r2, r2, #8
 8006d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69da      	ldr	r2, [r3, #28]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0204 	bic.w	r2, r2, #4
 8006d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69d9      	ldr	r1, [r3, #28]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	691a      	ldr	r2, [r3, #16]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	61da      	str	r2, [r3, #28]
      break;
 8006d70:	e023      	b.n	8006dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68b9      	ldr	r1, [r7, #8]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 faf5 	bl	8007368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69da      	ldr	r2, [r3, #28]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	69da      	ldr	r2, [r3, #28]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	69d9      	ldr	r1, [r3, #28]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	021a      	lsls	r2, r3, #8
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	61da      	str	r2, [r3, #28]
      break;
 8006db2:	e002      	b.n	8006dba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	75fb      	strb	r3, [r7, #23]
      break;
 8006db8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d101      	bne.n	8006de8 <HAL_TIM_ConfigClockSource+0x1c>
 8006de4:	2302      	movs	r3, #2
 8006de6:	e0b4      	b.n	8006f52 <HAL_TIM_ConfigClockSource+0x186>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e20:	d03e      	beq.n	8006ea0 <HAL_TIM_ConfigClockSource+0xd4>
 8006e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e26:	f200 8087 	bhi.w	8006f38 <HAL_TIM_ConfigClockSource+0x16c>
 8006e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e2e:	f000 8086 	beq.w	8006f3e <HAL_TIM_ConfigClockSource+0x172>
 8006e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e36:	d87f      	bhi.n	8006f38 <HAL_TIM_ConfigClockSource+0x16c>
 8006e38:	2b70      	cmp	r3, #112	@ 0x70
 8006e3a:	d01a      	beq.n	8006e72 <HAL_TIM_ConfigClockSource+0xa6>
 8006e3c:	2b70      	cmp	r3, #112	@ 0x70
 8006e3e:	d87b      	bhi.n	8006f38 <HAL_TIM_ConfigClockSource+0x16c>
 8006e40:	2b60      	cmp	r3, #96	@ 0x60
 8006e42:	d050      	beq.n	8006ee6 <HAL_TIM_ConfigClockSource+0x11a>
 8006e44:	2b60      	cmp	r3, #96	@ 0x60
 8006e46:	d877      	bhi.n	8006f38 <HAL_TIM_ConfigClockSource+0x16c>
 8006e48:	2b50      	cmp	r3, #80	@ 0x50
 8006e4a:	d03c      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0xfa>
 8006e4c:	2b50      	cmp	r3, #80	@ 0x50
 8006e4e:	d873      	bhi.n	8006f38 <HAL_TIM_ConfigClockSource+0x16c>
 8006e50:	2b40      	cmp	r3, #64	@ 0x40
 8006e52:	d058      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x13a>
 8006e54:	2b40      	cmp	r3, #64	@ 0x40
 8006e56:	d86f      	bhi.n	8006f38 <HAL_TIM_ConfigClockSource+0x16c>
 8006e58:	2b30      	cmp	r3, #48	@ 0x30
 8006e5a:	d064      	beq.n	8006f26 <HAL_TIM_ConfigClockSource+0x15a>
 8006e5c:	2b30      	cmp	r3, #48	@ 0x30
 8006e5e:	d86b      	bhi.n	8006f38 <HAL_TIM_ConfigClockSource+0x16c>
 8006e60:	2b20      	cmp	r3, #32
 8006e62:	d060      	beq.n	8006f26 <HAL_TIM_ConfigClockSource+0x15a>
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	d867      	bhi.n	8006f38 <HAL_TIM_ConfigClockSource+0x16c>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d05c      	beq.n	8006f26 <HAL_TIM_ConfigClockSource+0x15a>
 8006e6c:	2b10      	cmp	r3, #16
 8006e6e:	d05a      	beq.n	8006f26 <HAL_TIM_ConfigClockSource+0x15a>
 8006e70:	e062      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e82:	f000 fb41 	bl	8007508 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	609a      	str	r2, [r3, #8]
      break;
 8006e9e:	e04f      	b.n	8006f40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006eb0:	f000 fb2a 	bl	8007508 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ec2:	609a      	str	r2, [r3, #8]
      break;
 8006ec4:	e03c      	b.n	8006f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f000 fa9e 	bl	8007414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2150      	movs	r1, #80	@ 0x50
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 faf7 	bl	80074d2 <TIM_ITRx_SetConfig>
      break;
 8006ee4:	e02c      	b.n	8006f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f000 fabd 	bl	8007472 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2160      	movs	r1, #96	@ 0x60
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fae7 	bl	80074d2 <TIM_ITRx_SetConfig>
      break;
 8006f04:	e01c      	b.n	8006f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f12:	461a      	mov	r2, r3
 8006f14:	f000 fa7e 	bl	8007414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2140      	movs	r1, #64	@ 0x40
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 fad7 	bl	80074d2 <TIM_ITRx_SetConfig>
      break;
 8006f24:	e00c      	b.n	8006f40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4610      	mov	r0, r2
 8006f32:	f000 face 	bl	80074d2 <TIM_ITRx_SetConfig>
      break;
 8006f36:	e003      	b.n	8006f40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f3c:	e000      	b.n	8006f40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a46      	ldr	r2, [pc, #280]	@ (8007088 <TIM_Base_SetConfig+0x12c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d013      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f7a:	d00f      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a43      	ldr	r2, [pc, #268]	@ (800708c <TIM_Base_SetConfig+0x130>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00b      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a42      	ldr	r2, [pc, #264]	@ (8007090 <TIM_Base_SetConfig+0x134>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d007      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a41      	ldr	r2, [pc, #260]	@ (8007094 <TIM_Base_SetConfig+0x138>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d003      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a40      	ldr	r2, [pc, #256]	@ (8007098 <TIM_Base_SetConfig+0x13c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d108      	bne.n	8006fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a35      	ldr	r2, [pc, #212]	@ (8007088 <TIM_Base_SetConfig+0x12c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d02b      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fbc:	d027      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a32      	ldr	r2, [pc, #200]	@ (800708c <TIM_Base_SetConfig+0x130>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d023      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a31      	ldr	r2, [pc, #196]	@ (8007090 <TIM_Base_SetConfig+0x134>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d01f      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a30      	ldr	r2, [pc, #192]	@ (8007094 <TIM_Base_SetConfig+0x138>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d01b      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a2f      	ldr	r2, [pc, #188]	@ (8007098 <TIM_Base_SetConfig+0x13c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d017      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a2e      	ldr	r2, [pc, #184]	@ (800709c <TIM_Base_SetConfig+0x140>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d013      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80070a0 <TIM_Base_SetConfig+0x144>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00f      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80070a4 <TIM_Base_SetConfig+0x148>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d00b      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a2b      	ldr	r2, [pc, #172]	@ (80070a8 <TIM_Base_SetConfig+0x14c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d007      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a2a      	ldr	r2, [pc, #168]	@ (80070ac <TIM_Base_SetConfig+0x150>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d003      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a29      	ldr	r2, [pc, #164]	@ (80070b0 <TIM_Base_SetConfig+0x154>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d108      	bne.n	8007020 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a10      	ldr	r2, [pc, #64]	@ (8007088 <TIM_Base_SetConfig+0x12c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d003      	beq.n	8007054 <TIM_Base_SetConfig+0xf8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a12      	ldr	r2, [pc, #72]	@ (8007098 <TIM_Base_SetConfig+0x13c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d103      	bne.n	800705c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b01      	cmp	r3, #1
 800706c:	d105      	bne.n	800707a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f023 0201 	bic.w	r2, r3, #1
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	611a      	str	r2, [r3, #16]
  }
}
 800707a:	bf00      	nop
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	40010000 	.word	0x40010000
 800708c:	40000400 	.word	0x40000400
 8007090:	40000800 	.word	0x40000800
 8007094:	40000c00 	.word	0x40000c00
 8007098:	40010400 	.word	0x40010400
 800709c:	40014000 	.word	0x40014000
 80070a0:	40014400 	.word	0x40014400
 80070a4:	40014800 	.word	0x40014800
 80070a8:	40001800 	.word	0x40001800
 80070ac:	40001c00 	.word	0x40001c00
 80070b0:	40002000 	.word	0x40002000

080070b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	f023 0201 	bic.w	r2, r3, #1
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0303 	bic.w	r3, r3, #3
 80070ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f023 0302 	bic.w	r3, r3, #2
 80070fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	4313      	orrs	r3, r2
 8007106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a20      	ldr	r2, [pc, #128]	@ (800718c <TIM_OC1_SetConfig+0xd8>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d003      	beq.n	8007118 <TIM_OC1_SetConfig+0x64>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a1f      	ldr	r2, [pc, #124]	@ (8007190 <TIM_OC1_SetConfig+0xdc>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d10c      	bne.n	8007132 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f023 0308 	bic.w	r3, r3, #8
 800711e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f023 0304 	bic.w	r3, r3, #4
 8007130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a15      	ldr	r2, [pc, #84]	@ (800718c <TIM_OC1_SetConfig+0xd8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d003      	beq.n	8007142 <TIM_OC1_SetConfig+0x8e>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a14      	ldr	r2, [pc, #80]	@ (8007190 <TIM_OC1_SetConfig+0xdc>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d111      	bne.n	8007166 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	4313      	orrs	r3, r2
 800715a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	4313      	orrs	r3, r2
 8007164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	621a      	str	r2, [r3, #32]
}
 8007180:	bf00      	nop
 8007182:	371c      	adds	r7, #28
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	40010000 	.word	0x40010000
 8007190:	40010400 	.word	0x40010400

08007194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	f023 0210 	bic.w	r2, r3, #16
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	021b      	lsls	r3, r3, #8
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f023 0320 	bic.w	r3, r3, #32
 80071de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a22      	ldr	r2, [pc, #136]	@ (8007278 <TIM_OC2_SetConfig+0xe4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d003      	beq.n	80071fc <TIM_OC2_SetConfig+0x68>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a21      	ldr	r2, [pc, #132]	@ (800727c <TIM_OC2_SetConfig+0xe8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d10d      	bne.n	8007218 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	4313      	orrs	r3, r2
 800720e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007216:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a17      	ldr	r2, [pc, #92]	@ (8007278 <TIM_OC2_SetConfig+0xe4>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d003      	beq.n	8007228 <TIM_OC2_SetConfig+0x94>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a16      	ldr	r2, [pc, #88]	@ (800727c <TIM_OC2_SetConfig+0xe8>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d113      	bne.n	8007250 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800722e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	4313      	orrs	r3, r2
 800724e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	621a      	str	r2, [r3, #32]
}
 800726a:	bf00      	nop
 800726c:	371c      	adds	r7, #28
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	40010000 	.word	0x40010000
 800727c:	40010400 	.word	0x40010400

08007280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f023 0303 	bic.w	r3, r3, #3
 80072b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	021b      	lsls	r3, r3, #8
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a21      	ldr	r2, [pc, #132]	@ (8007360 <TIM_OC3_SetConfig+0xe0>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d003      	beq.n	80072e6 <TIM_OC3_SetConfig+0x66>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a20      	ldr	r2, [pc, #128]	@ (8007364 <TIM_OC3_SetConfig+0xe4>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d10d      	bne.n	8007302 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	021b      	lsls	r3, r3, #8
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a16      	ldr	r2, [pc, #88]	@ (8007360 <TIM_OC3_SetConfig+0xe0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d003      	beq.n	8007312 <TIM_OC3_SetConfig+0x92>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a15      	ldr	r2, [pc, #84]	@ (8007364 <TIM_OC3_SetConfig+0xe4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d113      	bne.n	800733a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	4313      	orrs	r3, r2
 800732c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	621a      	str	r2, [r3, #32]
}
 8007354:	bf00      	nop
 8007356:	371c      	adds	r7, #28
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	40010000 	.word	0x40010000
 8007364:	40010400 	.word	0x40010400

08007368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800739e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	021b      	lsls	r3, r3, #8
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80073b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	031b      	lsls	r3, r3, #12
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	4313      	orrs	r3, r2
 80073be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a12      	ldr	r2, [pc, #72]	@ (800740c <TIM_OC4_SetConfig+0xa4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d003      	beq.n	80073d0 <TIM_OC4_SetConfig+0x68>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a11      	ldr	r2, [pc, #68]	@ (8007410 <TIM_OC4_SetConfig+0xa8>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d109      	bne.n	80073e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	019b      	lsls	r3, r3, #6
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	621a      	str	r2, [r3, #32]
}
 80073fe:	bf00      	nop
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40010000 	.word	0x40010000
 8007410:	40010400 	.word	0x40010400

08007414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f023 0201 	bic.w	r2, r3, #1
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800743e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	4313      	orrs	r3, r2
 8007448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f023 030a 	bic.w	r3, r3, #10
 8007450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	4313      	orrs	r3, r2
 8007458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	621a      	str	r2, [r3, #32]
}
 8007466:	bf00      	nop
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007472:	b480      	push	{r7}
 8007474:	b087      	sub	sp, #28
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	f023 0210 	bic.w	r2, r3, #16
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800749c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	031b      	lsls	r3, r3, #12
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80074ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	621a      	str	r2, [r3, #32]
}
 80074c6:	bf00      	nop
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f043 0307 	orr.w	r3, r3, #7
 80074f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	609a      	str	r2, [r3, #8]
}
 80074fc:	bf00      	nop
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007522:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	021a      	lsls	r2, r3, #8
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	431a      	orrs	r2, r3
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	4313      	orrs	r3, r2
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	4313      	orrs	r3, r2
 8007534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	609a      	str	r2, [r3, #8]
}
 800753c:	bf00      	nop
 800753e:	371c      	adds	r7, #28
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007558:	2b01      	cmp	r3, #1
 800755a:	d101      	bne.n	8007560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800755c:	2302      	movs	r3, #2
 800755e:	e05a      	b.n	8007616 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	4313      	orrs	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a21      	ldr	r2, [pc, #132]	@ (8007624 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d022      	beq.n	80075ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ac:	d01d      	beq.n	80075ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007628 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d018      	beq.n	80075ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a1b      	ldr	r2, [pc, #108]	@ (800762c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d013      	beq.n	80075ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a1a      	ldr	r2, [pc, #104]	@ (8007630 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d00e      	beq.n	80075ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a18      	ldr	r2, [pc, #96]	@ (8007634 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d009      	beq.n	80075ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a17      	ldr	r2, [pc, #92]	@ (8007638 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d004      	beq.n	80075ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a15      	ldr	r2, [pc, #84]	@ (800763c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d10c      	bne.n	8007604 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	40010000 	.word	0x40010000
 8007628:	40000400 	.word	0x40000400
 800762c:	40000800 	.word	0x40000800
 8007630:	40000c00 	.word	0x40000c00
 8007634:	40010400 	.word	0x40010400
 8007638:	40014000 	.word	0x40014000
 800763c:	40001800 	.word	0x40001800

08007640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e042      	b.n	80076d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d106      	bne.n	800766c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fb fd9a 	bl	80031a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2224      	movs	r2, #36	@ 0x24
 8007670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f82b 	bl	80076e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	691a      	ldr	r2, [r3, #16]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	695a      	ldr	r2, [r3, #20]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076e4:	b0c0      	sub	sp, #256	@ 0x100
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80076f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fc:	68d9      	ldr	r1, [r3, #12]
 80076fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	ea40 0301 	orr.w	r3, r0, r1
 8007708:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800770a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	431a      	orrs	r2, r3
 8007718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	431a      	orrs	r2, r3
 8007720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	4313      	orrs	r3, r2
 8007728:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007738:	f021 010c 	bic.w	r1, r1, #12
 800773c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007746:	430b      	orrs	r3, r1
 8007748:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800774a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775a:	6999      	ldr	r1, [r3, #24]
 800775c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	ea40 0301 	orr.w	r3, r0, r1
 8007766:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	4b8f      	ldr	r3, [pc, #572]	@ (80079ac <UART_SetConfig+0x2cc>)
 8007770:	429a      	cmp	r2, r3
 8007772:	d005      	beq.n	8007780 <UART_SetConfig+0xa0>
 8007774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	4b8d      	ldr	r3, [pc, #564]	@ (80079b0 <UART_SetConfig+0x2d0>)
 800777c:	429a      	cmp	r2, r3
 800777e:	d104      	bne.n	800778a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007780:	f7ff f87e 	bl	8006880 <HAL_RCC_GetPCLK2Freq>
 8007784:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007788:	e003      	b.n	8007792 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800778a:	f7ff f865 	bl	8006858 <HAL_RCC_GetPCLK1Freq>
 800778e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800779c:	f040 810c 	bne.w	80079b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077a4:	2200      	movs	r2, #0
 80077a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80077ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80077b2:	4622      	mov	r2, r4
 80077b4:	462b      	mov	r3, r5
 80077b6:	1891      	adds	r1, r2, r2
 80077b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80077ba:	415b      	adcs	r3, r3
 80077bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80077c2:	4621      	mov	r1, r4
 80077c4:	eb12 0801 	adds.w	r8, r2, r1
 80077c8:	4629      	mov	r1, r5
 80077ca:	eb43 0901 	adc.w	r9, r3, r1
 80077ce:	f04f 0200 	mov.w	r2, #0
 80077d2:	f04f 0300 	mov.w	r3, #0
 80077d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077e2:	4690      	mov	r8, r2
 80077e4:	4699      	mov	r9, r3
 80077e6:	4623      	mov	r3, r4
 80077e8:	eb18 0303 	adds.w	r3, r8, r3
 80077ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077f0:	462b      	mov	r3, r5
 80077f2:	eb49 0303 	adc.w	r3, r9, r3
 80077f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007806:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800780a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800780e:	460b      	mov	r3, r1
 8007810:	18db      	adds	r3, r3, r3
 8007812:	653b      	str	r3, [r7, #80]	@ 0x50
 8007814:	4613      	mov	r3, r2
 8007816:	eb42 0303 	adc.w	r3, r2, r3
 800781a:	657b      	str	r3, [r7, #84]	@ 0x54
 800781c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007820:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007824:	f7f9 fa00 	bl	8000c28 <__aeabi_uldivmod>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4b61      	ldr	r3, [pc, #388]	@ (80079b4 <UART_SetConfig+0x2d4>)
 800782e:	fba3 2302 	umull	r2, r3, r3, r2
 8007832:	095b      	lsrs	r3, r3, #5
 8007834:	011c      	lsls	r4, r3, #4
 8007836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800783a:	2200      	movs	r2, #0
 800783c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007840:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007844:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007848:	4642      	mov	r2, r8
 800784a:	464b      	mov	r3, r9
 800784c:	1891      	adds	r1, r2, r2
 800784e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007850:	415b      	adcs	r3, r3
 8007852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007854:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007858:	4641      	mov	r1, r8
 800785a:	eb12 0a01 	adds.w	sl, r2, r1
 800785e:	4649      	mov	r1, r9
 8007860:	eb43 0b01 	adc.w	fp, r3, r1
 8007864:	f04f 0200 	mov.w	r2, #0
 8007868:	f04f 0300 	mov.w	r3, #0
 800786c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007870:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007874:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007878:	4692      	mov	sl, r2
 800787a:	469b      	mov	fp, r3
 800787c:	4643      	mov	r3, r8
 800787e:	eb1a 0303 	adds.w	r3, sl, r3
 8007882:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007886:	464b      	mov	r3, r9
 8007888:	eb4b 0303 	adc.w	r3, fp, r3
 800788c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800789c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80078a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078a4:	460b      	mov	r3, r1
 80078a6:	18db      	adds	r3, r3, r3
 80078a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80078aa:	4613      	mov	r3, r2
 80078ac:	eb42 0303 	adc.w	r3, r2, r3
 80078b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80078b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80078b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80078ba:	f7f9 f9b5 	bl	8000c28 <__aeabi_uldivmod>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	4611      	mov	r1, r2
 80078c4:	4b3b      	ldr	r3, [pc, #236]	@ (80079b4 <UART_SetConfig+0x2d4>)
 80078c6:	fba3 2301 	umull	r2, r3, r3, r1
 80078ca:	095b      	lsrs	r3, r3, #5
 80078cc:	2264      	movs	r2, #100	@ 0x64
 80078ce:	fb02 f303 	mul.w	r3, r2, r3
 80078d2:	1acb      	subs	r3, r1, r3
 80078d4:	00db      	lsls	r3, r3, #3
 80078d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80078da:	4b36      	ldr	r3, [pc, #216]	@ (80079b4 <UART_SetConfig+0x2d4>)
 80078dc:	fba3 2302 	umull	r2, r3, r3, r2
 80078e0:	095b      	lsrs	r3, r3, #5
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80078e8:	441c      	add	r4, r3
 80078ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80078f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80078fc:	4642      	mov	r2, r8
 80078fe:	464b      	mov	r3, r9
 8007900:	1891      	adds	r1, r2, r2
 8007902:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007904:	415b      	adcs	r3, r3
 8007906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800790c:	4641      	mov	r1, r8
 800790e:	1851      	adds	r1, r2, r1
 8007910:	6339      	str	r1, [r7, #48]	@ 0x30
 8007912:	4649      	mov	r1, r9
 8007914:	414b      	adcs	r3, r1
 8007916:	637b      	str	r3, [r7, #52]	@ 0x34
 8007918:	f04f 0200 	mov.w	r2, #0
 800791c:	f04f 0300 	mov.w	r3, #0
 8007920:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007924:	4659      	mov	r1, fp
 8007926:	00cb      	lsls	r3, r1, #3
 8007928:	4651      	mov	r1, sl
 800792a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800792e:	4651      	mov	r1, sl
 8007930:	00ca      	lsls	r2, r1, #3
 8007932:	4610      	mov	r0, r2
 8007934:	4619      	mov	r1, r3
 8007936:	4603      	mov	r3, r0
 8007938:	4642      	mov	r2, r8
 800793a:	189b      	adds	r3, r3, r2
 800793c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007940:	464b      	mov	r3, r9
 8007942:	460a      	mov	r2, r1
 8007944:	eb42 0303 	adc.w	r3, r2, r3
 8007948:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800794c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007958:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800795c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007960:	460b      	mov	r3, r1
 8007962:	18db      	adds	r3, r3, r3
 8007964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007966:	4613      	mov	r3, r2
 8007968:	eb42 0303 	adc.w	r3, r2, r3
 800796c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800796e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007972:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007976:	f7f9 f957 	bl	8000c28 <__aeabi_uldivmod>
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	4b0d      	ldr	r3, [pc, #52]	@ (80079b4 <UART_SetConfig+0x2d4>)
 8007980:	fba3 1302 	umull	r1, r3, r3, r2
 8007984:	095b      	lsrs	r3, r3, #5
 8007986:	2164      	movs	r1, #100	@ 0x64
 8007988:	fb01 f303 	mul.w	r3, r1, r3
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	3332      	adds	r3, #50	@ 0x32
 8007992:	4a08      	ldr	r2, [pc, #32]	@ (80079b4 <UART_SetConfig+0x2d4>)
 8007994:	fba2 2303 	umull	r2, r3, r2, r3
 8007998:	095b      	lsrs	r3, r3, #5
 800799a:	f003 0207 	and.w	r2, r3, #7
 800799e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4422      	add	r2, r4
 80079a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079a8:	e106      	b.n	8007bb8 <UART_SetConfig+0x4d8>
 80079aa:	bf00      	nop
 80079ac:	40011000 	.word	0x40011000
 80079b0:	40011400 	.word	0x40011400
 80079b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079bc:	2200      	movs	r2, #0
 80079be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80079c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80079ca:	4642      	mov	r2, r8
 80079cc:	464b      	mov	r3, r9
 80079ce:	1891      	adds	r1, r2, r2
 80079d0:	6239      	str	r1, [r7, #32]
 80079d2:	415b      	adcs	r3, r3
 80079d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80079d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079da:	4641      	mov	r1, r8
 80079dc:	1854      	adds	r4, r2, r1
 80079de:	4649      	mov	r1, r9
 80079e0:	eb43 0501 	adc.w	r5, r3, r1
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	f04f 0300 	mov.w	r3, #0
 80079ec:	00eb      	lsls	r3, r5, #3
 80079ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079f2:	00e2      	lsls	r2, r4, #3
 80079f4:	4614      	mov	r4, r2
 80079f6:	461d      	mov	r5, r3
 80079f8:	4643      	mov	r3, r8
 80079fa:	18e3      	adds	r3, r4, r3
 80079fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a00:	464b      	mov	r3, r9
 8007a02:	eb45 0303 	adc.w	r3, r5, r3
 8007a06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a1a:	f04f 0200 	mov.w	r2, #0
 8007a1e:	f04f 0300 	mov.w	r3, #0
 8007a22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a26:	4629      	mov	r1, r5
 8007a28:	008b      	lsls	r3, r1, #2
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a30:	4621      	mov	r1, r4
 8007a32:	008a      	lsls	r2, r1, #2
 8007a34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a38:	f7f9 f8f6 	bl	8000c28 <__aeabi_uldivmod>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4b60      	ldr	r3, [pc, #384]	@ (8007bc4 <UART_SetConfig+0x4e4>)
 8007a42:	fba3 2302 	umull	r2, r3, r3, r2
 8007a46:	095b      	lsrs	r3, r3, #5
 8007a48:	011c      	lsls	r4, r3, #4
 8007a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a5c:	4642      	mov	r2, r8
 8007a5e:	464b      	mov	r3, r9
 8007a60:	1891      	adds	r1, r2, r2
 8007a62:	61b9      	str	r1, [r7, #24]
 8007a64:	415b      	adcs	r3, r3
 8007a66:	61fb      	str	r3, [r7, #28]
 8007a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a6c:	4641      	mov	r1, r8
 8007a6e:	1851      	adds	r1, r2, r1
 8007a70:	6139      	str	r1, [r7, #16]
 8007a72:	4649      	mov	r1, r9
 8007a74:	414b      	adcs	r3, r1
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	f04f 0300 	mov.w	r3, #0
 8007a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a84:	4659      	mov	r1, fp
 8007a86:	00cb      	lsls	r3, r1, #3
 8007a88:	4651      	mov	r1, sl
 8007a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a8e:	4651      	mov	r1, sl
 8007a90:	00ca      	lsls	r2, r1, #3
 8007a92:	4610      	mov	r0, r2
 8007a94:	4619      	mov	r1, r3
 8007a96:	4603      	mov	r3, r0
 8007a98:	4642      	mov	r2, r8
 8007a9a:	189b      	adds	r3, r3, r2
 8007a9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007aa0:	464b      	mov	r3, r9
 8007aa2:	460a      	mov	r2, r1
 8007aa4:	eb42 0303 	adc.w	r3, r2, r3
 8007aa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ab6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007ab8:	f04f 0200 	mov.w	r2, #0
 8007abc:	f04f 0300 	mov.w	r3, #0
 8007ac0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ac4:	4649      	mov	r1, r9
 8007ac6:	008b      	lsls	r3, r1, #2
 8007ac8:	4641      	mov	r1, r8
 8007aca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ace:	4641      	mov	r1, r8
 8007ad0:	008a      	lsls	r2, r1, #2
 8007ad2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ad6:	f7f9 f8a7 	bl	8000c28 <__aeabi_uldivmod>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4611      	mov	r1, r2
 8007ae0:	4b38      	ldr	r3, [pc, #224]	@ (8007bc4 <UART_SetConfig+0x4e4>)
 8007ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8007ae6:	095b      	lsrs	r3, r3, #5
 8007ae8:	2264      	movs	r2, #100	@ 0x64
 8007aea:	fb02 f303 	mul.w	r3, r2, r3
 8007aee:	1acb      	subs	r3, r1, r3
 8007af0:	011b      	lsls	r3, r3, #4
 8007af2:	3332      	adds	r3, #50	@ 0x32
 8007af4:	4a33      	ldr	r2, [pc, #204]	@ (8007bc4 <UART_SetConfig+0x4e4>)
 8007af6:	fba2 2303 	umull	r2, r3, r2, r3
 8007afa:	095b      	lsrs	r3, r3, #5
 8007afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b00:	441c      	add	r4, r3
 8007b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b06:	2200      	movs	r2, #0
 8007b08:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b10:	4642      	mov	r2, r8
 8007b12:	464b      	mov	r3, r9
 8007b14:	1891      	adds	r1, r2, r2
 8007b16:	60b9      	str	r1, [r7, #8]
 8007b18:	415b      	adcs	r3, r3
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b20:	4641      	mov	r1, r8
 8007b22:	1851      	adds	r1, r2, r1
 8007b24:	6039      	str	r1, [r7, #0]
 8007b26:	4649      	mov	r1, r9
 8007b28:	414b      	adcs	r3, r1
 8007b2a:	607b      	str	r3, [r7, #4]
 8007b2c:	f04f 0200 	mov.w	r2, #0
 8007b30:	f04f 0300 	mov.w	r3, #0
 8007b34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b38:	4659      	mov	r1, fp
 8007b3a:	00cb      	lsls	r3, r1, #3
 8007b3c:	4651      	mov	r1, sl
 8007b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b42:	4651      	mov	r1, sl
 8007b44:	00ca      	lsls	r2, r1, #3
 8007b46:	4610      	mov	r0, r2
 8007b48:	4619      	mov	r1, r3
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	4642      	mov	r2, r8
 8007b4e:	189b      	adds	r3, r3, r2
 8007b50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b52:	464b      	mov	r3, r9
 8007b54:	460a      	mov	r2, r1
 8007b56:	eb42 0303 	adc.w	r3, r2, r3
 8007b5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b66:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	f04f 0300 	mov.w	r3, #0
 8007b70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b74:	4649      	mov	r1, r9
 8007b76:	008b      	lsls	r3, r1, #2
 8007b78:	4641      	mov	r1, r8
 8007b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b7e:	4641      	mov	r1, r8
 8007b80:	008a      	lsls	r2, r1, #2
 8007b82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b86:	f7f9 f84f 	bl	8000c28 <__aeabi_uldivmod>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc4 <UART_SetConfig+0x4e4>)
 8007b90:	fba3 1302 	umull	r1, r3, r3, r2
 8007b94:	095b      	lsrs	r3, r3, #5
 8007b96:	2164      	movs	r1, #100	@ 0x64
 8007b98:	fb01 f303 	mul.w	r3, r1, r3
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	3332      	adds	r3, #50	@ 0x32
 8007ba2:	4a08      	ldr	r2, [pc, #32]	@ (8007bc4 <UART_SetConfig+0x4e4>)
 8007ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba8:	095b      	lsrs	r3, r3, #5
 8007baa:	f003 020f 	and.w	r2, r3, #15
 8007bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4422      	add	r2, r4
 8007bb6:	609a      	str	r2, [r3, #8]
}
 8007bb8:	bf00      	nop
 8007bba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bc4:	51eb851f 	.word	0x51eb851f

08007bc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bc8:	b084      	sub	sp, #16
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	f107 001c 	add.w	r0, r7, #28
 8007bd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bda:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d123      	bne.n	8007c2a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007bf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d105      	bne.n	8007c1e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 faa0 	bl	8008164 <USB_CoreReset>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]
 8007c28:	e01b      	b.n	8007c62 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa94 	bl	8008164 <USB_CoreReset>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d106      	bne.n	8007c56 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c54:	e005      	b.n	8007c62 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c62:	7fbb      	ldrb	r3, [r7, #30]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d10b      	bne.n	8007c80 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f043 0206 	orr.w	r2, r3, #6
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f043 0220 	orr.w	r2, r3, #32
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c8c:	b004      	add	sp, #16
 8007c8e:	4770      	bx	lr

08007c90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f023 0201 	bic.w	r2, r3, #1
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	460b      	mov	r3, r1
 8007cbc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cce:	78fb      	ldrb	r3, [r7, #3]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d115      	bne.n	8007d00 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ce0:	200a      	movs	r0, #10
 8007ce2:	f7fb fde1 	bl	80038a8 <HAL_Delay>
      ms += 10U;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	330a      	adds	r3, #10
 8007cea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fa2b 	bl	8008148 <USB_GetMode>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d01e      	beq.n	8007d36 <USB_SetCurrentMode+0x84>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2bc7      	cmp	r3, #199	@ 0xc7
 8007cfc:	d9f0      	bls.n	8007ce0 <USB_SetCurrentMode+0x2e>
 8007cfe:	e01a      	b.n	8007d36 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d115      	bne.n	8007d32 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d12:	200a      	movs	r0, #10
 8007d14:	f7fb fdc8 	bl	80038a8 <HAL_Delay>
      ms += 10U;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	330a      	adds	r3, #10
 8007d1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa12 	bl	8008148 <USB_GetMode>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d005      	beq.n	8007d36 <USB_SetCurrentMode+0x84>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d2e:	d9f0      	bls.n	8007d12 <USB_SetCurrentMode+0x60>
 8007d30:	e001      	b.n	8007d36 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e005      	b.n	8007d42 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2bc8      	cmp	r3, #200	@ 0xc8
 8007d3a:	d101      	bne.n	8007d40 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e000      	b.n	8007d42 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
	...

08007d4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b086      	sub	sp, #24
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d66:	2300      	movs	r3, #0
 8007d68:	613b      	str	r3, [r7, #16]
 8007d6a:	e009      	b.n	8007d80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	3340      	adds	r3, #64	@ 0x40
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	2200      	movs	r2, #0
 8007d78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	613b      	str	r3, [r7, #16]
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	2b0e      	cmp	r3, #14
 8007d84:	d9f2      	bls.n	8007d6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d11c      	bne.n	8007dc8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d9c:	f043 0302 	orr.w	r3, r3, #2
 8007da0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8007dc6:	e00b      	b.n	8007de0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dcc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007de6:	461a      	mov	r2, r3
 8007de8:	2300      	movs	r3, #0
 8007dea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d10d      	bne.n	8007e10 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007df4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f968 	bl	80080d4 <USB_SetDevSpeed>
 8007e04:	e008      	b.n	8007e18 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e06:	2101      	movs	r1, #1
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f963 	bl	80080d4 <USB_SetDevSpeed>
 8007e0e:	e003      	b.n	8007e18 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e10:	2103      	movs	r1, #3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f95e 	bl	80080d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e18:	2110      	movs	r1, #16
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f8fa 	bl	8008014 <USB_FlushTxFifo>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f924 	bl	8008078 <USB_FlushRxFifo>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e40:	461a      	mov	r2, r3
 8007e42:	2300      	movs	r3, #0
 8007e44:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	2300      	movs	r3, #0
 8007e50:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e58:	461a      	mov	r2, r3
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e5e:	2300      	movs	r3, #0
 8007e60:	613b      	str	r3, [r7, #16]
 8007e62:	e043      	b.n	8007eec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e7a:	d118      	bne.n	8007eae <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10a      	bne.n	8007e98 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e8e:	461a      	mov	r2, r3
 8007e90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	e013      	b.n	8007ec0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	e008      	b.n	8007ec0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eba:	461a      	mov	r2, r3
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ecc:	461a      	mov	r2, r3
 8007ece:	2300      	movs	r3, #0
 8007ed0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ee4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	613b      	str	r3, [r7, #16]
 8007eec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d3b5      	bcc.n	8007e64 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ef8:	2300      	movs	r3, #0
 8007efa:	613b      	str	r3, [r7, #16]
 8007efc:	e043      	b.n	8007f86 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f14:	d118      	bne.n	8007f48 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f28:	461a      	mov	r2, r3
 8007f2a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	e013      	b.n	8007f5a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	e008      	b.n	8007f5a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f54:	461a      	mov	r2, r3
 8007f56:	2300      	movs	r3, #0
 8007f58:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f66:	461a      	mov	r2, r3
 8007f68:	2300      	movs	r3, #0
 8007f6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f78:	461a      	mov	r2, r3
 8007f7a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	3301      	adds	r3, #1
 8007f84:	613b      	str	r3, [r7, #16]
 8007f86:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d3b5      	bcc.n	8007efe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fa4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007fb2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d105      	bne.n	8007fc8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	f043 0210 	orr.w	r2, r3, #16
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	699a      	ldr	r2, [r3, #24]
 8007fcc:	4b10      	ldr	r3, [pc, #64]	@ (8008010 <USB_DevInit+0x2c4>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007fd4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d005      	beq.n	8007fe8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	f043 0208 	orr.w	r2, r3, #8
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007fe8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d107      	bne.n	8008000 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ff8:	f043 0304 	orr.w	r3, r3, #4
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008000:	7dfb      	ldrb	r3, [r7, #23]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800800c:	b004      	add	sp, #16
 800800e:	4770      	bx	lr
 8008010:	803c3800 	.word	0x803c3800

08008014 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800801e:	2300      	movs	r3, #0
 8008020:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3301      	adds	r3, #1
 8008026:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800802e:	d901      	bls.n	8008034 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e01b      	b.n	800806c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	daf2      	bge.n	8008022 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	019b      	lsls	r3, r3, #6
 8008044:	f043 0220 	orr.w	r2, r3, #32
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	3301      	adds	r3, #1
 8008050:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008058:	d901      	bls.n	800805e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e006      	b.n	800806c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f003 0320 	and.w	r3, r3, #32
 8008066:	2b20      	cmp	r3, #32
 8008068:	d0f0      	beq.n	800804c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	3301      	adds	r3, #1
 8008088:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008090:	d901      	bls.n	8008096 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e018      	b.n	80080c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	daf2      	bge.n	8008084 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2210      	movs	r2, #16
 80080a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	3301      	adds	r3, #1
 80080ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080b4:	d901      	bls.n	80080ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e006      	b.n	80080c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	f003 0310 	and.w	r3, r3, #16
 80080c2:	2b10      	cmp	r3, #16
 80080c4:	d0f0      	beq.n	80080a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	460b      	mov	r3, r1
 80080de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	78fb      	ldrb	r3, [r7, #3]
 80080ee:	68f9      	ldr	r1, [r7, #12]
 80080f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080f4:	4313      	orrs	r3, r2
 80080f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3714      	adds	r7, #20
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008106:	b480      	push	{r7}
 8008108:	b085      	sub	sp, #20
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008120:	f023 0303 	bic.w	r3, r3, #3
 8008124:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008134:	f043 0302 	orr.w	r3, r3, #2
 8008138:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	f003 0301 	and.w	r3, r3, #1
}
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3301      	adds	r3, #1
 8008174:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800817c:	d901      	bls.n	8008182 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e01b      	b.n	80081ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	daf2      	bge.n	8008170 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	f043 0201 	orr.w	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3301      	adds	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081a6:	d901      	bls.n	80081ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e006      	b.n	80081ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d0f0      	beq.n	800819a <USB_CoreReset+0x36>

  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
	...

080081c8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80081ce:	4b87      	ldr	r3, [pc, #540]	@ (80083ec <MX_LWIP_Init+0x224>)
 80081d0:	22c0      	movs	r2, #192	@ 0xc0
 80081d2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80081d4:	4b85      	ldr	r3, [pc, #532]	@ (80083ec <MX_LWIP_Init+0x224>)
 80081d6:	22a8      	movs	r2, #168	@ 0xa8
 80081d8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80081da:	4b84      	ldr	r3, [pc, #528]	@ (80083ec <MX_LWIP_Init+0x224>)
 80081dc:	2201      	movs	r2, #1
 80081de:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 156;
 80081e0:	4b82      	ldr	r3, [pc, #520]	@ (80083ec <MX_LWIP_Init+0x224>)
 80081e2:	229c      	movs	r2, #156	@ 0x9c
 80081e4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80081e6:	4b82      	ldr	r3, [pc, #520]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80081e8:	22ff      	movs	r2, #255	@ 0xff
 80081ea:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80081ec:	4b80      	ldr	r3, [pc, #512]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80081ee:	22ff      	movs	r2, #255	@ 0xff
 80081f0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80081f2:	4b7f      	ldr	r3, [pc, #508]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80081f4:	22ff      	movs	r2, #255	@ 0xff
 80081f6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80081f8:	4b7d      	ldr	r3, [pc, #500]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80081fe:	4b7d      	ldr	r3, [pc, #500]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 8008200:	22c0      	movs	r2, #192	@ 0xc0
 8008202:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008204:	4b7b      	ldr	r3, [pc, #492]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 8008206:	22a8      	movs	r2, #168	@ 0xa8
 8008208:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800820a:	4b7a      	ldr	r3, [pc, #488]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 800820c:	2201      	movs	r2, #1
 800820e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8008210:	4b78      	ldr	r3, [pc, #480]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 8008212:	2201      	movs	r2, #1
 8008214:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8008216:	f000 fd02 	bl	8008c1e <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800821a:	4b74      	ldr	r3, [pc, #464]	@ (80083ec <MX_LWIP_Init+0x224>)
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	061a      	lsls	r2, r3, #24
 8008220:	4b72      	ldr	r3, [pc, #456]	@ (80083ec <MX_LWIP_Init+0x224>)
 8008222:	785b      	ldrb	r3, [r3, #1]
 8008224:	041b      	lsls	r3, r3, #16
 8008226:	431a      	orrs	r2, r3
 8008228:	4b70      	ldr	r3, [pc, #448]	@ (80083ec <MX_LWIP_Init+0x224>)
 800822a:	789b      	ldrb	r3, [r3, #2]
 800822c:	021b      	lsls	r3, r3, #8
 800822e:	4313      	orrs	r3, r2
 8008230:	4a6e      	ldr	r2, [pc, #440]	@ (80083ec <MX_LWIP_Init+0x224>)
 8008232:	78d2      	ldrb	r2, [r2, #3]
 8008234:	4313      	orrs	r3, r2
 8008236:	061a      	lsls	r2, r3, #24
 8008238:	4b6c      	ldr	r3, [pc, #432]	@ (80083ec <MX_LWIP_Init+0x224>)
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	0619      	lsls	r1, r3, #24
 800823e:	4b6b      	ldr	r3, [pc, #428]	@ (80083ec <MX_LWIP_Init+0x224>)
 8008240:	785b      	ldrb	r3, [r3, #1]
 8008242:	041b      	lsls	r3, r3, #16
 8008244:	4319      	orrs	r1, r3
 8008246:	4b69      	ldr	r3, [pc, #420]	@ (80083ec <MX_LWIP_Init+0x224>)
 8008248:	789b      	ldrb	r3, [r3, #2]
 800824a:	021b      	lsls	r3, r3, #8
 800824c:	430b      	orrs	r3, r1
 800824e:	4967      	ldr	r1, [pc, #412]	@ (80083ec <MX_LWIP_Init+0x224>)
 8008250:	78c9      	ldrb	r1, [r1, #3]
 8008252:	430b      	orrs	r3, r1
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800825a:	431a      	orrs	r2, r3
 800825c:	4b63      	ldr	r3, [pc, #396]	@ (80083ec <MX_LWIP_Init+0x224>)
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	0619      	lsls	r1, r3, #24
 8008262:	4b62      	ldr	r3, [pc, #392]	@ (80083ec <MX_LWIP_Init+0x224>)
 8008264:	785b      	ldrb	r3, [r3, #1]
 8008266:	041b      	lsls	r3, r3, #16
 8008268:	4319      	orrs	r1, r3
 800826a:	4b60      	ldr	r3, [pc, #384]	@ (80083ec <MX_LWIP_Init+0x224>)
 800826c:	789b      	ldrb	r3, [r3, #2]
 800826e:	021b      	lsls	r3, r3, #8
 8008270:	430b      	orrs	r3, r1
 8008272:	495e      	ldr	r1, [pc, #376]	@ (80083ec <MX_LWIP_Init+0x224>)
 8008274:	78c9      	ldrb	r1, [r1, #3]
 8008276:	430b      	orrs	r3, r1
 8008278:	0a1b      	lsrs	r3, r3, #8
 800827a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800827e:	431a      	orrs	r2, r3
 8008280:	4b5a      	ldr	r3, [pc, #360]	@ (80083ec <MX_LWIP_Init+0x224>)
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	0619      	lsls	r1, r3, #24
 8008286:	4b59      	ldr	r3, [pc, #356]	@ (80083ec <MX_LWIP_Init+0x224>)
 8008288:	785b      	ldrb	r3, [r3, #1]
 800828a:	041b      	lsls	r3, r3, #16
 800828c:	4319      	orrs	r1, r3
 800828e:	4b57      	ldr	r3, [pc, #348]	@ (80083ec <MX_LWIP_Init+0x224>)
 8008290:	789b      	ldrb	r3, [r3, #2]
 8008292:	021b      	lsls	r3, r3, #8
 8008294:	430b      	orrs	r3, r1
 8008296:	4955      	ldr	r1, [pc, #340]	@ (80083ec <MX_LWIP_Init+0x224>)
 8008298:	78c9      	ldrb	r1, [r1, #3]
 800829a:	430b      	orrs	r3, r1
 800829c:	0e1b      	lsrs	r3, r3, #24
 800829e:	4313      	orrs	r3, r2
 80082a0:	4a55      	ldr	r2, [pc, #340]	@ (80083f8 <MX_LWIP_Init+0x230>)
 80082a2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80082a4:	4b52      	ldr	r3, [pc, #328]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	061a      	lsls	r2, r3, #24
 80082aa:	4b51      	ldr	r3, [pc, #324]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80082ac:	785b      	ldrb	r3, [r3, #1]
 80082ae:	041b      	lsls	r3, r3, #16
 80082b0:	431a      	orrs	r2, r3
 80082b2:	4b4f      	ldr	r3, [pc, #316]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80082b4:	789b      	ldrb	r3, [r3, #2]
 80082b6:	021b      	lsls	r3, r3, #8
 80082b8:	4313      	orrs	r3, r2
 80082ba:	4a4d      	ldr	r2, [pc, #308]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80082bc:	78d2      	ldrb	r2, [r2, #3]
 80082be:	4313      	orrs	r3, r2
 80082c0:	061a      	lsls	r2, r3, #24
 80082c2:	4b4b      	ldr	r3, [pc, #300]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	0619      	lsls	r1, r3, #24
 80082c8:	4b49      	ldr	r3, [pc, #292]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80082ca:	785b      	ldrb	r3, [r3, #1]
 80082cc:	041b      	lsls	r3, r3, #16
 80082ce:	4319      	orrs	r1, r3
 80082d0:	4b47      	ldr	r3, [pc, #284]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80082d2:	789b      	ldrb	r3, [r3, #2]
 80082d4:	021b      	lsls	r3, r3, #8
 80082d6:	430b      	orrs	r3, r1
 80082d8:	4945      	ldr	r1, [pc, #276]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80082da:	78c9      	ldrb	r1, [r1, #3]
 80082dc:	430b      	orrs	r3, r1
 80082de:	021b      	lsls	r3, r3, #8
 80082e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80082e4:	431a      	orrs	r2, r3
 80082e6:	4b42      	ldr	r3, [pc, #264]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	0619      	lsls	r1, r3, #24
 80082ec:	4b40      	ldr	r3, [pc, #256]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80082ee:	785b      	ldrb	r3, [r3, #1]
 80082f0:	041b      	lsls	r3, r3, #16
 80082f2:	4319      	orrs	r1, r3
 80082f4:	4b3e      	ldr	r3, [pc, #248]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80082f6:	789b      	ldrb	r3, [r3, #2]
 80082f8:	021b      	lsls	r3, r3, #8
 80082fa:	430b      	orrs	r3, r1
 80082fc:	493c      	ldr	r1, [pc, #240]	@ (80083f0 <MX_LWIP_Init+0x228>)
 80082fe:	78c9      	ldrb	r1, [r1, #3]
 8008300:	430b      	orrs	r3, r1
 8008302:	0a1b      	lsrs	r3, r3, #8
 8008304:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008308:	431a      	orrs	r2, r3
 800830a:	4b39      	ldr	r3, [pc, #228]	@ (80083f0 <MX_LWIP_Init+0x228>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	0619      	lsls	r1, r3, #24
 8008310:	4b37      	ldr	r3, [pc, #220]	@ (80083f0 <MX_LWIP_Init+0x228>)
 8008312:	785b      	ldrb	r3, [r3, #1]
 8008314:	041b      	lsls	r3, r3, #16
 8008316:	4319      	orrs	r1, r3
 8008318:	4b35      	ldr	r3, [pc, #212]	@ (80083f0 <MX_LWIP_Init+0x228>)
 800831a:	789b      	ldrb	r3, [r3, #2]
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	430b      	orrs	r3, r1
 8008320:	4933      	ldr	r1, [pc, #204]	@ (80083f0 <MX_LWIP_Init+0x228>)
 8008322:	78c9      	ldrb	r1, [r1, #3]
 8008324:	430b      	orrs	r3, r1
 8008326:	0e1b      	lsrs	r3, r3, #24
 8008328:	4313      	orrs	r3, r2
 800832a:	4a34      	ldr	r2, [pc, #208]	@ (80083fc <MX_LWIP_Init+0x234>)
 800832c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800832e:	4b31      	ldr	r3, [pc, #196]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	061a      	lsls	r2, r3, #24
 8008334:	4b2f      	ldr	r3, [pc, #188]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 8008336:	785b      	ldrb	r3, [r3, #1]
 8008338:	041b      	lsls	r3, r3, #16
 800833a:	431a      	orrs	r2, r3
 800833c:	4b2d      	ldr	r3, [pc, #180]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 800833e:	789b      	ldrb	r3, [r3, #2]
 8008340:	021b      	lsls	r3, r3, #8
 8008342:	4313      	orrs	r3, r2
 8008344:	4a2b      	ldr	r2, [pc, #172]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 8008346:	78d2      	ldrb	r2, [r2, #3]
 8008348:	4313      	orrs	r3, r2
 800834a:	061a      	lsls	r2, r3, #24
 800834c:	4b29      	ldr	r3, [pc, #164]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	0619      	lsls	r1, r3, #24
 8008352:	4b28      	ldr	r3, [pc, #160]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 8008354:	785b      	ldrb	r3, [r3, #1]
 8008356:	041b      	lsls	r3, r3, #16
 8008358:	4319      	orrs	r1, r3
 800835a:	4b26      	ldr	r3, [pc, #152]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 800835c:	789b      	ldrb	r3, [r3, #2]
 800835e:	021b      	lsls	r3, r3, #8
 8008360:	430b      	orrs	r3, r1
 8008362:	4924      	ldr	r1, [pc, #144]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 8008364:	78c9      	ldrb	r1, [r1, #3]
 8008366:	430b      	orrs	r3, r1
 8008368:	021b      	lsls	r3, r3, #8
 800836a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800836e:	431a      	orrs	r2, r3
 8008370:	4b20      	ldr	r3, [pc, #128]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	0619      	lsls	r1, r3, #24
 8008376:	4b1f      	ldr	r3, [pc, #124]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 8008378:	785b      	ldrb	r3, [r3, #1]
 800837a:	041b      	lsls	r3, r3, #16
 800837c:	4319      	orrs	r1, r3
 800837e:	4b1d      	ldr	r3, [pc, #116]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 8008380:	789b      	ldrb	r3, [r3, #2]
 8008382:	021b      	lsls	r3, r3, #8
 8008384:	430b      	orrs	r3, r1
 8008386:	491b      	ldr	r1, [pc, #108]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 8008388:	78c9      	ldrb	r1, [r1, #3]
 800838a:	430b      	orrs	r3, r1
 800838c:	0a1b      	lsrs	r3, r3, #8
 800838e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008392:	431a      	orrs	r2, r3
 8008394:	4b17      	ldr	r3, [pc, #92]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	0619      	lsls	r1, r3, #24
 800839a:	4b16      	ldr	r3, [pc, #88]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 800839c:	785b      	ldrb	r3, [r3, #1]
 800839e:	041b      	lsls	r3, r3, #16
 80083a0:	4319      	orrs	r1, r3
 80083a2:	4b14      	ldr	r3, [pc, #80]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 80083a4:	789b      	ldrb	r3, [r3, #2]
 80083a6:	021b      	lsls	r3, r3, #8
 80083a8:	430b      	orrs	r3, r1
 80083aa:	4912      	ldr	r1, [pc, #72]	@ (80083f4 <MX_LWIP_Init+0x22c>)
 80083ac:	78c9      	ldrb	r1, [r1, #3]
 80083ae:	430b      	orrs	r3, r1
 80083b0:	0e1b      	lsrs	r3, r3, #24
 80083b2:	4313      	orrs	r3, r2
 80083b4:	4a12      	ldr	r2, [pc, #72]	@ (8008400 <MX_LWIP_Init+0x238>)
 80083b6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80083b8:	4b12      	ldr	r3, [pc, #72]	@ (8008404 <MX_LWIP_Init+0x23c>)
 80083ba:	9302      	str	r3, [sp, #8]
 80083bc:	4b12      	ldr	r3, [pc, #72]	@ (8008408 <MX_LWIP_Init+0x240>)
 80083be:	9301      	str	r3, [sp, #4]
 80083c0:	2300      	movs	r3, #0
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	4b0e      	ldr	r3, [pc, #56]	@ (8008400 <MX_LWIP_Init+0x238>)
 80083c6:	4a0d      	ldr	r2, [pc, #52]	@ (80083fc <MX_LWIP_Init+0x234>)
 80083c8:	490b      	ldr	r1, [pc, #44]	@ (80083f8 <MX_LWIP_Init+0x230>)
 80083ca:	4810      	ldr	r0, [pc, #64]	@ (800840c <MX_LWIP_Init+0x244>)
 80083cc:	f001 f912 	bl	80095f4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80083d0:	480e      	ldr	r0, [pc, #56]	@ (800840c <MX_LWIP_Init+0x244>)
 80083d2:	f001 fac1 	bl	8009958 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80083d6:	480d      	ldr	r0, [pc, #52]	@ (800840c <MX_LWIP_Init+0x244>)
 80083d8:	f001 face 	bl	8009978 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80083dc:	490c      	ldr	r1, [pc, #48]	@ (8008410 <MX_LWIP_Init+0x248>)
 80083de:	480b      	ldr	r0, [pc, #44]	@ (800840c <MX_LWIP_Init+0x244>)
 80083e0:	f001 fbcc 	bl	8009b7c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80083e4:	bf00      	nop
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20000ab4 	.word	0x20000ab4
 80083f0:	20000ab8 	.word	0x20000ab8
 80083f4:	20000abc 	.word	0x20000abc
 80083f8:	20000aa8 	.word	0x20000aa8
 80083fc:	20000aac 	.word	0x20000aac
 8008400:	20000ab0 	.word	0x20000ab0
 8008404:	08012c15 	.word	0x08012c15
 8008408:	08008731 	.word	0x08008731
 800840c:	20000a74 	.word	0x20000a74
 8008410:	08008465 	.word	0x08008465

08008414 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800841c:	f7fb fa38 	bl	8003890 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	4b08      	ldr	r3, [pc, #32]	@ (8008444 <Ethernet_Link_Periodic_Handle+0x30>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	2b63      	cmp	r3, #99	@ 0x63
 800842a:	d907      	bls.n	800843c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800842c:	f7fb fa30 	bl	8003890 <HAL_GetTick>
 8008430:	4603      	mov	r3, r0
 8008432:	4a04      	ldr	r2, [pc, #16]	@ (8008444 <Ethernet_Link_Periodic_Handle+0x30>)
 8008434:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fac6 	bl	80089c8 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800843c:	bf00      	nop
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	20000a70 	.word	0x20000a70

08008448 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800844c:	4804      	ldr	r0, [pc, #16]	@ (8008460 <MX_LWIP_Process+0x18>)
 800844e:	f000 f94f 	bl	80086f0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8008452:	f007 fca3 	bl	800fd9c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8008456:	4802      	ldr	r0, [pc, #8]	@ (8008460 <MX_LWIP_Process+0x18>)
 8008458:	f7ff ffdc 	bl	8008414 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800845c:	bf00      	nop
 800845e:	bd80      	pop	{r7, pc}
 8008460:	20000a74 	.word	0x20000a74

08008464 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008484:	4b44      	ldr	r3, [pc, #272]	@ (8008598 <low_level_init+0x120>)
 8008486:	4a45      	ldr	r2, [pc, #276]	@ (800859c <low_level_init+0x124>)
 8008488:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x50;
 800848a:	2350      	movs	r3, #80	@ 0x50
 800848c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x39;
 800848e:	2339      	movs	r3, #57	@ 0x39
 8008490:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x64;
 8008492:	2364      	movs	r3, #100	@ 0x64
 8008494:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xFD;
 8008496:	23fd      	movs	r3, #253	@ 0xfd
 8008498:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x60;
 800849a:	2360      	movs	r3, #96	@ 0x60
 800849c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800849e:	2300      	movs	r3, #0
 80084a0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80084a2:	4a3d      	ldr	r2, [pc, #244]	@ (8008598 <low_level_init+0x120>)
 80084a4:	f107 0308 	add.w	r3, r7, #8
 80084a8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80084aa:	4b3b      	ldr	r3, [pc, #236]	@ (8008598 <low_level_init+0x120>)
 80084ac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80084b0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80084b2:	4b39      	ldr	r3, [pc, #228]	@ (8008598 <low_level_init+0x120>)
 80084b4:	4a3a      	ldr	r2, [pc, #232]	@ (80085a0 <low_level_init+0x128>)
 80084b6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80084b8:	4b37      	ldr	r3, [pc, #220]	@ (8008598 <low_level_init+0x120>)
 80084ba:	4a3a      	ldr	r2, [pc, #232]	@ (80085a4 <low_level_init+0x12c>)
 80084bc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80084be:	4b36      	ldr	r3, [pc, #216]	@ (8008598 <low_level_init+0x120>)
 80084c0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80084c4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80084c6:	4834      	ldr	r0, [pc, #208]	@ (8008598 <low_level_init+0x120>)
 80084c8:	f7fb fefc 	bl	80042c4 <HAL_ETH_Init>
 80084cc:	4603      	mov	r3, r0
 80084ce:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80084d0:	2238      	movs	r2, #56	@ 0x38
 80084d2:	2100      	movs	r1, #0
 80084d4:	4834      	ldr	r0, [pc, #208]	@ (80085a8 <low_level_init+0x130>)
 80084d6:	f00a ff62 	bl	801339e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80084da:	4b33      	ldr	r3, [pc, #204]	@ (80085a8 <low_level_init+0x130>)
 80084dc:	2221      	movs	r2, #33	@ 0x21
 80084de:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80084e0:	4b31      	ldr	r3, [pc, #196]	@ (80085a8 <low_level_init+0x130>)
 80084e2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80084e6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80084e8:	4b2f      	ldr	r3, [pc, #188]	@ (80085a8 <low_level_init+0x130>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80084ee:	482f      	ldr	r0, [pc, #188]	@ (80085ac <low_level_init+0x134>)
 80084f0:	f000 ff48 	bl	8009384 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2206      	movs	r2, #6
 80084f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80084fc:	4b26      	ldr	r3, [pc, #152]	@ (8008598 <low_level_init+0x120>)
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	781a      	ldrb	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008508:	4b23      	ldr	r3, [pc, #140]	@ (8008598 <low_level_init+0x120>)
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	785a      	ldrb	r2, [r3, #1]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008514:	4b20      	ldr	r3, [pc, #128]	@ (8008598 <low_level_init+0x120>)
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	789a      	ldrb	r2, [r3, #2]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008520:	4b1d      	ldr	r3, [pc, #116]	@ (8008598 <low_level_init+0x120>)
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	78da      	ldrb	r2, [r3, #3]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800852c:	4b1a      	ldr	r3, [pc, #104]	@ (8008598 <low_level_init+0x120>)
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	791a      	ldrb	r2, [r3, #4]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008538:	4b17      	ldr	r3, [pc, #92]	@ (8008598 <low_level_init+0x120>)
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	795a      	ldrb	r2, [r3, #5]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800854a:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008552:	f043 030a 	orr.w	r3, r3, #10
 8008556:	b2da      	uxtb	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800855e:	4914      	ldr	r1, [pc, #80]	@ (80085b0 <low_level_init+0x138>)
 8008560:	4814      	ldr	r0, [pc, #80]	@ (80085b4 <low_level_init+0x13c>)
 8008562:	f7fb f828 	bl	80035b6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8008566:	4813      	ldr	r0, [pc, #76]	@ (80085b4 <low_level_init+0x13c>)
 8008568:	f7fb f857 	bl	800361a <LAN8742_Init>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d006      	beq.n	8008580 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f001 fad2 	bl	8009b1c <netif_set_link_down>
    netif_set_down(netif);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 fa69 	bl	8009a50 <netif_set_down>
 800857e:	e008      	b.n	8008592 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d103      	bne.n	800858e <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fa1e 	bl	80089c8 <ethernet_link_check_state>
 800858c:	e001      	b.n	8008592 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800858e:	f7fa fc09 	bl	8002da4 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	2000558c 	.word	0x2000558c
 800859c:	40028000 	.word	0x40028000
 80085a0:	200054ec 	.word	0x200054ec
 80085a4:	2000544c 	.word	0x2000544c
 80085a8:	2000563c 	.word	0x2000563c
 80085ac:	08017114 	.word	0x08017114
 80085b0:	20000080 	.word	0x20000080
 80085b4:	20005674 	.word	0x20005674

080085b8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b092      	sub	sp, #72	@ 0x48
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80085c6:	2300      	movs	r3, #0
 80085c8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80085d0:	f107 030c 	add.w	r3, r7, #12
 80085d4:	2230      	movs	r2, #48	@ 0x30
 80085d6:	2100      	movs	r1, #0
 80085d8:	4618      	mov	r0, r3
 80085da:	f00a fee0 	bl	801339e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80085de:	f107 030c 	add.w	r3, r7, #12
 80085e2:	2230      	movs	r2, #48	@ 0x30
 80085e4:	2100      	movs	r1, #0
 80085e6:	4618      	mov	r0, r3
 80085e8:	f00a fed9 	bl	801339e <memset>

  for(q = p; q != NULL; q = q->next)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80085f0:	e045      	b.n	800867e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80085f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d902      	bls.n	80085fe <low_level_output+0x46>
      return ERR_IF;
 80085f8:	f06f 030b 	mvn.w	r3, #11
 80085fc:	e055      	b.n	80086aa <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80085fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008600:	6859      	ldr	r1, [r3, #4]
 8008602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008604:	4613      	mov	r3, r2
 8008606:	005b      	lsls	r3, r3, #1
 8008608:	4413      	add	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	3348      	adds	r3, #72	@ 0x48
 800860e:	443b      	add	r3, r7
 8008610:	3b3c      	subs	r3, #60	@ 0x3c
 8008612:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008616:	895b      	ldrh	r3, [r3, #10]
 8008618:	4619      	mov	r1, r3
 800861a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800861c:	4613      	mov	r3, r2
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	4413      	add	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	3348      	adds	r3, #72	@ 0x48
 8008626:	443b      	add	r3, r7
 8008628:	3b38      	subs	r3, #56	@ 0x38
 800862a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800862c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800862e:	2b00      	cmp	r3, #0
 8008630:	d011      	beq.n	8008656 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008634:	1e5a      	subs	r2, r3, #1
 8008636:	f107 000c 	add.w	r0, r7, #12
 800863a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800863c:	460b      	mov	r3, r1
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	440b      	add	r3, r1
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	18c1      	adds	r1, r0, r3
 8008646:	4613      	mov	r3, r2
 8008648:	005b      	lsls	r3, r3, #1
 800864a:	4413      	add	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	3348      	adds	r3, #72	@ 0x48
 8008650:	443b      	add	r3, r7
 8008652:	3b34      	subs	r3, #52	@ 0x34
 8008654:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d109      	bne.n	8008672 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800865e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008660:	4613      	mov	r3, r2
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	4413      	add	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	3348      	adds	r3, #72	@ 0x48
 800866a:	443b      	add	r3, r7
 800866c:	3b34      	subs	r3, #52	@ 0x34
 800866e:	2200      	movs	r2, #0
 8008670:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008674:	3301      	adds	r3, #1
 8008676:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8008678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	643b      	str	r3, [r7, #64]	@ 0x40
 800867e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1b6      	bne.n	80085f2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	891b      	ldrh	r3, [r3, #8]
 8008688:	461a      	mov	r2, r3
 800868a:	4b0a      	ldr	r3, [pc, #40]	@ (80086b4 <low_level_output+0xfc>)
 800868c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800868e:	4a09      	ldr	r2, [pc, #36]	@ (80086b4 <low_level_output+0xfc>)
 8008690:	f107 030c 	add.w	r3, r7, #12
 8008694:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008696:	4a07      	ldr	r2, [pc, #28]	@ (80086b4 <low_level_output+0xfc>)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800869c:	2214      	movs	r2, #20
 800869e:	4905      	ldr	r1, [pc, #20]	@ (80086b4 <low_level_output+0xfc>)
 80086a0:	4805      	ldr	r0, [pc, #20]	@ (80086b8 <low_level_output+0x100>)
 80086a2:	f7fb ff9a 	bl	80045da <HAL_ETH_Transmit>

  return errval;
 80086a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3748      	adds	r7, #72	@ 0x48
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	2000563c 	.word	0x2000563c
 80086b8:	2000558c 	.word	0x2000558c

080086bc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80086c4:	2300      	movs	r3, #0
 80086c6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80086c8:	4b07      	ldr	r3, [pc, #28]	@ (80086e8 <low_level_input+0x2c>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d105      	bne.n	80086dc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80086d0:	f107 030c 	add.w	r3, r7, #12
 80086d4:	4619      	mov	r1, r3
 80086d6:	4805      	ldr	r0, [pc, #20]	@ (80086ec <low_level_input+0x30>)
 80086d8:	f7fc f813 	bl	8004702 <HAL_ETH_ReadData>
  }

  return p;
 80086dc:	68fb      	ldr	r3, [r7, #12]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20005448 	.word	0x20005448
 80086ec:	2000558c 	.word	0x2000558c

080086f0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80086f8:	2300      	movs	r3, #0
 80086fa:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7ff ffdd 	bl	80086bc <low_level_input>
 8008702:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	4798      	blx	r3
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f001 fdae 	bl	800a27c <pbuf_free>
      }
    }
  } while(p!=NULL);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1ea      	bne.n	80086fc <ethernetif_input+0xc>
}
 8008726:	bf00      	nop
 8008728:	bf00      	nop
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d106      	bne.n	800874c <ethernetif_init+0x1c>
 800873e:	4b0e      	ldr	r3, [pc, #56]	@ (8008778 <ethernetif_init+0x48>)
 8008740:	f240 126f 	movw	r2, #367	@ 0x16f
 8008744:	490d      	ldr	r1, [pc, #52]	@ (800877c <ethernetif_init+0x4c>)
 8008746:	480e      	ldr	r0, [pc, #56]	@ (8008780 <ethernetif_init+0x50>)
 8008748:	f00a fd88 	bl	801325c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2273      	movs	r2, #115	@ 0x73
 8008750:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2274      	movs	r2, #116	@ 0x74
 8008758:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a09      	ldr	r2, [pc, #36]	@ (8008784 <ethernetif_init+0x54>)
 8008760:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a08      	ldr	r2, [pc, #32]	@ (8008788 <ethernetif_init+0x58>)
 8008766:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff fe85 	bl	8008478 <low_level_init>

  return ERR_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	0801471c 	.word	0x0801471c
 800877c:	08014738 	.word	0x08014738
 8008780:	08014748 	.word	0x08014748
 8008784:	080110cd 	.word	0x080110cd
 8008788:	080085b9 	.word	0x080085b9

0800878c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008798:	68f9      	ldr	r1, [r7, #12]
 800879a:	4807      	ldr	r0, [pc, #28]	@ (80087b8 <pbuf_free_custom+0x2c>)
 800879c:	f000 fed4 	bl	8009548 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80087a0:	4b06      	ldr	r3, [pc, #24]	@ (80087bc <pbuf_free_custom+0x30>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d102      	bne.n	80087ae <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80087a8:	4b04      	ldr	r3, [pc, #16]	@ (80087bc <pbuf_free_custom+0x30>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	701a      	strb	r2, [r3, #0]
  }
}
 80087ae:	bf00      	nop
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	08017114 	.word	0x08017114
 80087bc:	20005448 	.word	0x20005448

080087c0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80087c4:	f7fb f864 	bl	8003890 <HAL_GetTick>
 80087c8:	4603      	mov	r3, r0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	bd80      	pop	{r7, pc}
	...

080087d0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08e      	sub	sp, #56	@ 0x38
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	605a      	str	r2, [r3, #4]
 80087e2:	609a      	str	r2, [r3, #8]
 80087e4:	60da      	str	r2, [r3, #12]
 80087e6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a4a      	ldr	r2, [pc, #296]	@ (8008918 <HAL_ETH_MspInit+0x148>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	f040 808d 	bne.w	800890e <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80087f4:	2300      	movs	r3, #0
 80087f6:	623b      	str	r3, [r7, #32]
 80087f8:	4b48      	ldr	r3, [pc, #288]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 80087fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087fc:	4a47      	ldr	r2, [pc, #284]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 80087fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008802:	6313      	str	r3, [r2, #48]	@ 0x30
 8008804:	4b45      	ldr	r3, [pc, #276]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 8008806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800880c:	623b      	str	r3, [r7, #32]
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	2300      	movs	r3, #0
 8008812:	61fb      	str	r3, [r7, #28]
 8008814:	4b41      	ldr	r3, [pc, #260]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 8008816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008818:	4a40      	ldr	r2, [pc, #256]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 800881a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800881e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008820:	4b3e      	ldr	r3, [pc, #248]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 8008822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008824:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008828:	61fb      	str	r3, [r7, #28]
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	2300      	movs	r3, #0
 800882e:	61bb      	str	r3, [r7, #24]
 8008830:	4b3a      	ldr	r3, [pc, #232]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 8008832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008834:	4a39      	ldr	r2, [pc, #228]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 8008836:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800883a:	6313      	str	r3, [r2, #48]	@ 0x30
 800883c:	4b37      	ldr	r3, [pc, #220]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 800883e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008844:	61bb      	str	r3, [r7, #24]
 8008846:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008848:	2300      	movs	r3, #0
 800884a:	617b      	str	r3, [r7, #20]
 800884c:	4b33      	ldr	r3, [pc, #204]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 800884e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008850:	4a32      	ldr	r2, [pc, #200]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 8008852:	f043 0304 	orr.w	r3, r3, #4
 8008856:	6313      	str	r3, [r2, #48]	@ 0x30
 8008858:	4b30      	ldr	r3, [pc, #192]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 800885a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800885c:	f003 0304 	and.w	r3, r3, #4
 8008860:	617b      	str	r3, [r7, #20]
 8008862:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008864:	2300      	movs	r3, #0
 8008866:	613b      	str	r3, [r7, #16]
 8008868:	4b2c      	ldr	r3, [pc, #176]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 800886a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800886c:	4a2b      	ldr	r2, [pc, #172]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 800886e:	f043 0301 	orr.w	r3, r3, #1
 8008872:	6313      	str	r3, [r2, #48]	@ 0x30
 8008874:	4b29      	ldr	r3, [pc, #164]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 8008876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	613b      	str	r3, [r7, #16]
 800887e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008880:	2300      	movs	r3, #0
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	4b25      	ldr	r3, [pc, #148]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 8008886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008888:	4a24      	ldr	r2, [pc, #144]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 800888a:	f043 0302 	orr.w	r3, r3, #2
 800888e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008890:	4b22      	ldr	r3, [pc, #136]	@ (800891c <HAL_ETH_MspInit+0x14c>)
 8008892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800889c:	2332      	movs	r3, #50	@ 0x32
 800889e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088a0:	2302      	movs	r3, #2
 80088a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a4:	2300      	movs	r3, #0
 80088a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088a8:	2303      	movs	r3, #3
 80088aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80088ac:	230b      	movs	r3, #11
 80088ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088b4:	4619      	mov	r1, r3
 80088b6:	481a      	ldr	r0, [pc, #104]	@ (8008920 <HAL_ETH_MspInit+0x150>)
 80088b8:	f7fc ff54 	bl	8005764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80088bc:	2386      	movs	r3, #134	@ 0x86
 80088be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088c0:	2302      	movs	r3, #2
 80088c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c4:	2300      	movs	r3, #0
 80088c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088c8:	2303      	movs	r3, #3
 80088ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80088cc:	230b      	movs	r3, #11
 80088ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088d4:	4619      	mov	r1, r3
 80088d6:	4813      	ldr	r0, [pc, #76]	@ (8008924 <HAL_ETH_MspInit+0x154>)
 80088d8:	f7fc ff44 	bl	8005764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80088dc:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80088e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088e2:	2302      	movs	r3, #2
 80088e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088e6:	2300      	movs	r3, #0
 80088e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088ea:	2303      	movs	r3, #3
 80088ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80088ee:	230b      	movs	r3, #11
 80088f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088f6:	4619      	mov	r1, r3
 80088f8:	480b      	ldr	r0, [pc, #44]	@ (8008928 <HAL_ETH_MspInit+0x158>)
 80088fa:	f7fc ff33 	bl	8005764 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80088fe:	2200      	movs	r2, #0
 8008900:	2100      	movs	r1, #0
 8008902:	203d      	movs	r0, #61	@ 0x3d
 8008904:	f7fb fc2d 	bl	8004162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008908:	203d      	movs	r0, #61	@ 0x3d
 800890a:	f7fb fc46 	bl	800419a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800890e:	bf00      	nop
 8008910:	3738      	adds	r7, #56	@ 0x38
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	40028000 	.word	0x40028000
 800891c:	40023800 	.word	0x40023800
 8008920:	40020800 	.word	0x40020800
 8008924:	40020000 	.word	0x40020000
 8008928:	40020400 	.word	0x40020400

0800892c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008930:	4802      	ldr	r0, [pc, #8]	@ (800893c <ETH_PHY_IO_Init+0x10>)
 8008932:	f7fc fab3 	bl	8004e9c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	bd80      	pop	{r7, pc}
 800893c:	2000558c 	.word	0x2000558c

08008940 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008940:	b480      	push	{r7}
 8008942:	af00      	add	r7, sp, #0
  return 0;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	68f9      	ldr	r1, [r7, #12]
 8008962:	4807      	ldr	r0, [pc, #28]	@ (8008980 <ETH_PHY_IO_ReadReg+0x30>)
 8008964:	f7fc f8f4 	bl	8004b50 <HAL_ETH_ReadPHYRegister>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800896e:	f04f 33ff 	mov.w	r3, #4294967295
 8008972:	e000      	b.n	8008976 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	2000558c 	.word	0x2000558c

08008984 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	68f9      	ldr	r1, [r7, #12]
 8008996:	4807      	ldr	r0, [pc, #28]	@ (80089b4 <ETH_PHY_IO_WriteReg+0x30>)
 8008998:	f7fc f925 	bl	8004be6 <HAL_ETH_WritePHYRegister>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d002      	beq.n	80089a8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80089a2:	f04f 33ff 	mov.w	r3, #4294967295
 80089a6:	e000      	b.n	80089aa <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	2000558c 	.word	0x2000558c

080089b8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80089bc:	f7fa ff68 	bl	8003890 <HAL_GetTick>
 80089c0:	4603      	mov	r3, r0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	bd80      	pop	{r7, pc}
	...

080089c8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b0a0      	sub	sp, #128	@ 0x80
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80089d0:	f107 030c 	add.w	r3, r7, #12
 80089d4:	2264      	movs	r2, #100	@ 0x64
 80089d6:	2100      	movs	r1, #0
 80089d8:	4618      	mov	r0, r3
 80089da:	f00a fce0 	bl	801339e <memset>
  int32_t PHYLinkState = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089e6:	2300      	movs	r3, #0
 80089e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089ea:	2300      	movs	r3, #0
 80089ec:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80089ee:	483a      	ldr	r0, [pc, #232]	@ (8008ad8 <ethernet_link_check_state+0x110>)
 80089f0:	f7fa fe60 	bl	80036b4 <LAN8742_GetLinkState>
 80089f4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80089fc:	089b      	lsrs	r3, r3, #2
 80089fe:	f003 0301 	and.w	r3, r3, #1
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00c      	beq.n	8008a22 <ethernet_link_check_state+0x5a>
 8008a08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	dc09      	bgt.n	8008a22 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8008a0e:	4833      	ldr	r0, [pc, #204]	@ (8008adc <ethernet_link_check_state+0x114>)
 8008a10:	f7fb fd64 	bl	80044dc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f001 f81b 	bl	8009a50 <netif_set_down>
    netif_set_link_down(netif);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f001 f87e 	bl	8009b1c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8008a20:	e055      	b.n	8008ace <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d14e      	bne.n	8008ace <ethernet_link_check_state+0x106>
 8008a30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	dd4b      	ble.n	8008ace <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8008a36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a38:	3b02      	subs	r3, #2
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d82a      	bhi.n	8008a94 <ethernet_link_check_state+0xcc>
 8008a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a44 <ethernet_link_check_state+0x7c>)
 8008a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a44:	08008a55 	.word	0x08008a55
 8008a48:	08008a67 	.word	0x08008a67
 8008a4c:	08008a77 	.word	0x08008a77
 8008a50:	08008a87 	.word	0x08008a87
      duplex = ETH_FULLDUPLEX_MODE;
 8008a54:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008a58:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008a5a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008a5e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008a60:	2301      	movs	r3, #1
 8008a62:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008a64:	e017      	b.n	8008a96 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008a66:	2300      	movs	r3, #0
 8008a68:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008a6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008a6e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008a70:	2301      	movs	r3, #1
 8008a72:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008a74:	e00f      	b.n	8008a96 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8008a76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008a7a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008a80:	2301      	movs	r3, #1
 8008a82:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008a84:	e007      	b.n	8008a96 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008a92:	e000      	b.n	8008a96 <ethernet_link_check_state+0xce>
      break;
 8008a94:	bf00      	nop
    if(linkchanged)
 8008a96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d018      	beq.n	8008ace <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008a9c:	f107 030c 	add.w	r3, r7, #12
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	480e      	ldr	r0, [pc, #56]	@ (8008adc <ethernet_link_check_state+0x114>)
 8008aa4:	f7fc f8e8 	bl	8004c78 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008aa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008aaa:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8008aac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008aae:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008ab0:	f107 030c 	add.w	r3, r7, #12
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4809      	ldr	r0, [pc, #36]	@ (8008adc <ethernet_link_check_state+0x114>)
 8008ab8:	f7fc f9d5 	bl	8004e66 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8008abc:	4807      	ldr	r0, [pc, #28]	@ (8008adc <ethernet_link_check_state+0x114>)
 8008abe:	f7fb fc9d 	bl	80043fc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 ff58 	bl	8009978 <netif_set_up>
      netif_set_link_up(netif);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fff3 	bl	8009ab4 <netif_set_link_up>
}
 8008ace:	bf00      	nop
 8008ad0:	3780      	adds	r7, #128	@ 0x80
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	20005674 	.word	0x20005674
 8008adc:	2000558c 	.word	0x2000558c

08008ae0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008ae8:	4812      	ldr	r0, [pc, #72]	@ (8008b34 <HAL_ETH_RxAllocateCallback+0x54>)
 8008aea:	f000 fcbf 	bl	800946c <memp_malloc_pool>
 8008aee:	60f8      	str	r0, [r7, #12]
  if (p)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d014      	beq.n	8008b20 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f103 0220 	add.w	r2, r3, #32
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	4a0d      	ldr	r2, [pc, #52]	@ (8008b38 <HAL_ETH_RxAllocateCallback+0x58>)
 8008b04:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008b0e:	9201      	str	r2, [sp, #4]
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2241      	movs	r2, #65	@ 0x41
 8008b16:	2100      	movs	r1, #0
 8008b18:	2000      	movs	r0, #0
 8008b1a:	f001 f9f5 	bl	8009f08 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008b1e:	e005      	b.n	8008b2c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008b20:	4b06      	ldr	r3, [pc, #24]	@ (8008b3c <HAL_ETH_RxAllocateCallback+0x5c>)
 8008b22:	2201      	movs	r2, #1
 8008b24:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]
}
 8008b2c:	bf00      	nop
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	08017114 	.word	0x08017114
 8008b38:	0800878d 	.word	0x0800878d
 8008b3c:	20005448 	.word	0x20005448

08008b40 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b089      	sub	sp, #36	@ 0x24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008b56:	2300      	movs	r3, #0
 8008b58:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	3b20      	subs	r3, #32
 8008b5e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	2200      	movs	r2, #0
 8008b64:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	887a      	ldrh	r2, [r7, #2]
 8008b70:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d103      	bne.n	8008b82 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	69fa      	ldr	r2, [r7, #28]
 8008b7e:	601a      	str	r2, [r3, #0]
 8008b80:	e003      	b.n	8008b8a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	69fa      	ldr	r2, [r7, #28]
 8008b88:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	69fa      	ldr	r2, [r7, #28]
 8008b8e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	61fb      	str	r3, [r7, #28]
 8008b96:	e009      	b.n	8008bac <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	891a      	ldrh	r2, [r3, #8]
 8008b9c:	887b      	ldrh	r3, [r7, #2]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	61fb      	str	r3, [r7, #28]
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1f2      	bne.n	8008b98 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008bb2:	bf00      	nop
 8008bb4:	bf00      	nop
 8008bb6:	3724      	adds	r7, #36	@ 0x24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008bce:	021b      	lsls	r3, r3, #8
 8008bd0:	b21a      	sxth	r2, r3
 8008bd2:	88fb      	ldrh	r3, [r7, #6]
 8008bd4:	0a1b      	lsrs	r3, r3, #8
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	b21b      	sxth	r3, r3
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	b21b      	sxth	r3, r3
 8008bde:	b29b      	uxth	r3, r3
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	061a      	lsls	r2, r3, #24
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	021b      	lsls	r3, r3, #8
 8008bfc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008c00:	431a      	orrs	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	0a1b      	lsrs	r3, r3, #8
 8008c06:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	0e1b      	lsrs	r3, r3, #24
 8008c10:	4313      	orrs	r3, r2
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b082      	sub	sp, #8
 8008c22:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008c24:	2300      	movs	r3, #0
 8008c26:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008c28:	f000 f8d4 	bl	8008dd4 <mem_init>
  memp_init();
 8008c2c:	f000 fbda 	bl	80093e4 <memp_init>
  pbuf_init();
  netif_init();
 8008c30:	f000 fcd8 	bl	80095e4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008c34:	f007 f8f4 	bl	800fe20 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008c38:	f001 fe50 	bl	800a8dc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008c3c:	f007 f866 	bl	800fd0c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008c52:	4b05      	ldr	r3, [pc, #20]	@ (8008c68 <ptr_to_mem+0x20>)
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	88fb      	ldrh	r3, [r7, #6]
 8008c58:	4413      	add	r3, r2
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	20005ac0 	.word	0x20005ac0

08008c6c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008c74:	4b05      	ldr	r3, [pc, #20]	@ (8008c8c <mem_to_ptr+0x20>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	b29b      	uxth	r3, r3
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	20005ac0 	.word	0x20005ac0

08008c90 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008c90:	b590      	push	{r4, r7, lr}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008c98:	4b45      	ldr	r3, [pc, #276]	@ (8008db0 <plug_holes+0x120>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d206      	bcs.n	8008cb0 <plug_holes+0x20>
 8008ca2:	4b44      	ldr	r3, [pc, #272]	@ (8008db4 <plug_holes+0x124>)
 8008ca4:	f240 12df 	movw	r2, #479	@ 0x1df
 8008ca8:	4943      	ldr	r1, [pc, #268]	@ (8008db8 <plug_holes+0x128>)
 8008caa:	4844      	ldr	r0, [pc, #272]	@ (8008dbc <plug_holes+0x12c>)
 8008cac:	f00a fad6 	bl	801325c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008cb0:	4b43      	ldr	r3, [pc, #268]	@ (8008dc0 <plug_holes+0x130>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d306      	bcc.n	8008cc8 <plug_holes+0x38>
 8008cba:	4b3e      	ldr	r3, [pc, #248]	@ (8008db4 <plug_holes+0x124>)
 8008cbc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8008cc0:	4940      	ldr	r1, [pc, #256]	@ (8008dc4 <plug_holes+0x134>)
 8008cc2:	483e      	ldr	r0, [pc, #248]	@ (8008dbc <plug_holes+0x12c>)
 8008cc4:	f00a faca 	bl	801325c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	791b      	ldrb	r3, [r3, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d006      	beq.n	8008cde <plug_holes+0x4e>
 8008cd0:	4b38      	ldr	r3, [pc, #224]	@ (8008db4 <plug_holes+0x124>)
 8008cd2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8008cd6:	493c      	ldr	r1, [pc, #240]	@ (8008dc8 <plug_holes+0x138>)
 8008cd8:	4838      	ldr	r0, [pc, #224]	@ (8008dbc <plug_holes+0x12c>)
 8008cda:	f00a fabf 	bl	801325c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ce6:	d906      	bls.n	8008cf6 <plug_holes+0x66>
 8008ce8:	4b32      	ldr	r3, [pc, #200]	@ (8008db4 <plug_holes+0x124>)
 8008cea:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8008cee:	4937      	ldr	r1, [pc, #220]	@ (8008dcc <plug_holes+0x13c>)
 8008cf0:	4832      	ldr	r0, [pc, #200]	@ (8008dbc <plug_holes+0x12c>)
 8008cf2:	f00a fab3 	bl	801325c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff ffa4 	bl	8008c48 <ptr_to_mem>
 8008d00:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d024      	beq.n	8008d54 <plug_holes+0xc4>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	791b      	ldrb	r3, [r3, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d120      	bne.n	8008d54 <plug_holes+0xc4>
 8008d12:	4b2b      	ldr	r3, [pc, #172]	@ (8008dc0 <plug_holes+0x130>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d01b      	beq.n	8008d54 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8008dd0 <plug_holes+0x140>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d102      	bne.n	8008d2c <plug_holes+0x9c>
      lfree = mem;
 8008d26:	4a2a      	ldr	r2, [pc, #168]	@ (8008dd0 <plug_holes+0x140>)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	881a      	ldrh	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d3c:	d00a      	beq.n	8008d54 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7ff ff80 	bl	8008c48 <ptr_to_mem>
 8008d48:	4604      	mov	r4, r0
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7ff ff8e 	bl	8008c6c <mem_to_ptr>
 8008d50:	4603      	mov	r3, r0
 8008d52:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	885b      	ldrh	r3, [r3, #2]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7ff ff75 	bl	8008c48 <ptr_to_mem>
 8008d5e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d01f      	beq.n	8008da8 <plug_holes+0x118>
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	791b      	ldrb	r3, [r3, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d11b      	bne.n	8008da8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008d70:	4b17      	ldr	r3, [pc, #92]	@ (8008dd0 <plug_holes+0x140>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d102      	bne.n	8008d80 <plug_holes+0xf0>
      lfree = pmem;
 8008d7a:	4a15      	ldr	r2, [pc, #84]	@ (8008dd0 <plug_holes+0x140>)
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	881a      	ldrh	r2, [r3, #0]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d90:	d00a      	beq.n	8008da8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7ff ff56 	bl	8008c48 <ptr_to_mem>
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	68b8      	ldr	r0, [r7, #8]
 8008da0:	f7ff ff64 	bl	8008c6c <mem_to_ptr>
 8008da4:	4603      	mov	r3, r0
 8008da6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008da8:	bf00      	nop
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd90      	pop	{r4, r7, pc}
 8008db0:	20005ac0 	.word	0x20005ac0
 8008db4:	08014770 	.word	0x08014770
 8008db8:	080147a0 	.word	0x080147a0
 8008dbc:	080147b8 	.word	0x080147b8
 8008dc0:	20005ac4 	.word	0x20005ac4
 8008dc4:	080147e0 	.word	0x080147e0
 8008dc8:	080147fc 	.word	0x080147fc
 8008dcc:	08014818 	.word	0x08014818
 8008dd0:	20005ac8 	.word	0x20005ac8

08008dd4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008dda:	4b18      	ldr	r3, [pc, #96]	@ (8008e3c <mem_init+0x68>)
 8008ddc:	3303      	adds	r3, #3
 8008dde:	f023 0303 	bic.w	r3, r3, #3
 8008de2:	461a      	mov	r2, r3
 8008de4:	4b16      	ldr	r3, [pc, #88]	@ (8008e40 <mem_init+0x6c>)
 8008de6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008de8:	4b15      	ldr	r3, [pc, #84]	@ (8008e40 <mem_init+0x6c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008df4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008e02:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008e06:	f7ff ff1f 	bl	8008c48 <ptr_to_mem>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8008e44 <mem_init+0x70>)
 8008e0e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008e10:	4b0c      	ldr	r3, [pc, #48]	@ (8008e44 <mem_init+0x70>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2201      	movs	r2, #1
 8008e16:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008e18:	4b0a      	ldr	r3, [pc, #40]	@ (8008e44 <mem_init+0x70>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008e20:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008e22:	4b08      	ldr	r3, [pc, #32]	@ (8008e44 <mem_init+0x70>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008e2a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008e2c:	4b04      	ldr	r3, [pc, #16]	@ (8008e40 <mem_init+0x6c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a05      	ldr	r2, [pc, #20]	@ (8008e48 <mem_init+0x74>)
 8008e32:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	200056ac 	.word	0x200056ac
 8008e40:	20005ac0 	.word	0x20005ac0
 8008e44:	20005ac4 	.word	0x20005ac4
 8008e48:	20005ac8 	.word	0x20005ac8

08008e4c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff ff09 	bl	8008c6c <mem_to_ptr>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7ff fef0 	bl	8008c48 <ptr_to_mem>
 8008e68:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	885b      	ldrh	r3, [r3, #2]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7ff feea 	bl	8008c48 <ptr_to_mem>
 8008e74:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e7e:	d818      	bhi.n	8008eb2 <mem_link_valid+0x66>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	885b      	ldrh	r3, [r3, #2]
 8008e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e88:	d813      	bhi.n	8008eb2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008e8e:	8afa      	ldrh	r2, [r7, #22]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d004      	beq.n	8008e9e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	8afa      	ldrh	r2, [r7, #22]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d109      	bne.n	8008eb2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008e9e:	4b08      	ldr	r3, [pc, #32]	@ (8008ec0 <mem_link_valid+0x74>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d006      	beq.n	8008eb6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	885b      	ldrh	r3, [r3, #2]
 8008eac:	8afa      	ldrh	r2, [r7, #22]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d001      	beq.n	8008eb6 <mem_link_valid+0x6a>
    return 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	e000      	b.n	8008eb8 <mem_link_valid+0x6c>
  }
  return 1;
 8008eb6:	2301      	movs	r3, #1
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	20005ac4 	.word	0x20005ac4

08008ec4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d04c      	beq.n	8008f6c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f003 0303 	and.w	r3, r3, #3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d007      	beq.n	8008eec <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008edc:	4b25      	ldr	r3, [pc, #148]	@ (8008f74 <mem_free+0xb0>)
 8008ede:	f240 2273 	movw	r2, #627	@ 0x273
 8008ee2:	4925      	ldr	r1, [pc, #148]	@ (8008f78 <mem_free+0xb4>)
 8008ee4:	4825      	ldr	r0, [pc, #148]	@ (8008f7c <mem_free+0xb8>)
 8008ee6:	f00a f9b9 	bl	801325c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008eea:	e040      	b.n	8008f6e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	3b08      	subs	r3, #8
 8008ef0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008ef2:	4b23      	ldr	r3, [pc, #140]	@ (8008f80 <mem_free+0xbc>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d306      	bcc.n	8008f0a <mem_free+0x46>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f103 020c 	add.w	r2, r3, #12
 8008f02:	4b20      	ldr	r3, [pc, #128]	@ (8008f84 <mem_free+0xc0>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d907      	bls.n	8008f1a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8008f74 <mem_free+0xb0>)
 8008f0c:	f240 227f 	movw	r2, #639	@ 0x27f
 8008f10:	491d      	ldr	r1, [pc, #116]	@ (8008f88 <mem_free+0xc4>)
 8008f12:	481a      	ldr	r0, [pc, #104]	@ (8008f7c <mem_free+0xb8>)
 8008f14:	f00a f9a2 	bl	801325c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008f18:	e029      	b.n	8008f6e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	791b      	ldrb	r3, [r3, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d107      	bne.n	8008f32 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008f22:	4b14      	ldr	r3, [pc, #80]	@ (8008f74 <mem_free+0xb0>)
 8008f24:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8008f28:	4918      	ldr	r1, [pc, #96]	@ (8008f8c <mem_free+0xc8>)
 8008f2a:	4814      	ldr	r0, [pc, #80]	@ (8008f7c <mem_free+0xb8>)
 8008f2c:	f00a f996 	bl	801325c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008f30:	e01d      	b.n	8008f6e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f7ff ff8a 	bl	8008e4c <mem_link_valid>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d107      	bne.n	8008f4e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f74 <mem_free+0xb0>)
 8008f40:	f240 2295 	movw	r2, #661	@ 0x295
 8008f44:	4912      	ldr	r1, [pc, #72]	@ (8008f90 <mem_free+0xcc>)
 8008f46:	480d      	ldr	r0, [pc, #52]	@ (8008f7c <mem_free+0xb8>)
 8008f48:	f00a f988 	bl	801325c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008f4c:	e00f      	b.n	8008f6e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008f54:	4b0f      	ldr	r3, [pc, #60]	@ (8008f94 <mem_free+0xd0>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d202      	bcs.n	8008f64 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8008f94 <mem_free+0xd0>)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f7ff fe93 	bl	8008c90 <plug_holes>
 8008f6a:	e000      	b.n	8008f6e <mem_free+0xaa>
    return;
 8008f6c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	08014770 	.word	0x08014770
 8008f78:	08014844 	.word	0x08014844
 8008f7c:	080147b8 	.word	0x080147b8
 8008f80:	20005ac0 	.word	0x20005ac0
 8008f84:	20005ac4 	.word	0x20005ac4
 8008f88:	08014868 	.word	0x08014868
 8008f8c:	08014884 	.word	0x08014884
 8008f90:	080148ac 	.word	0x080148ac
 8008f94:	20005ac8 	.word	0x20005ac8

08008f98 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b088      	sub	sp, #32
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008fa4:	887b      	ldrh	r3, [r7, #2]
 8008fa6:	3303      	adds	r3, #3
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	f023 0303 	bic.w	r3, r3, #3
 8008fae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008fb0:	8bfb      	ldrh	r3, [r7, #30]
 8008fb2:	2b0b      	cmp	r3, #11
 8008fb4:	d801      	bhi.n	8008fba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008fb6:	230c      	movs	r3, #12
 8008fb8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008fba:	8bfb      	ldrh	r3, [r7, #30]
 8008fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fc0:	d803      	bhi.n	8008fca <mem_trim+0x32>
 8008fc2:	8bfa      	ldrh	r2, [r7, #30]
 8008fc4:	887b      	ldrh	r3, [r7, #2]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d201      	bcs.n	8008fce <mem_trim+0x36>
    return NULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	e0cc      	b.n	8009168 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008fce:	4b68      	ldr	r3, [pc, #416]	@ (8009170 <mem_trim+0x1d8>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d304      	bcc.n	8008fe2 <mem_trim+0x4a>
 8008fd8:	4b66      	ldr	r3, [pc, #408]	@ (8009174 <mem_trim+0x1dc>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d306      	bcc.n	8008ff0 <mem_trim+0x58>
 8008fe2:	4b65      	ldr	r3, [pc, #404]	@ (8009178 <mem_trim+0x1e0>)
 8008fe4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8008fe8:	4964      	ldr	r1, [pc, #400]	@ (800917c <mem_trim+0x1e4>)
 8008fea:	4865      	ldr	r0, [pc, #404]	@ (8009180 <mem_trim+0x1e8>)
 8008fec:	f00a f936 	bl	801325c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008ff0:	4b5f      	ldr	r3, [pc, #380]	@ (8009170 <mem_trim+0x1d8>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d304      	bcc.n	8009004 <mem_trim+0x6c>
 8008ffa:	4b5e      	ldr	r3, [pc, #376]	@ (8009174 <mem_trim+0x1dc>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	429a      	cmp	r2, r3
 8009002:	d301      	bcc.n	8009008 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	e0af      	b.n	8009168 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3b08      	subs	r3, #8
 800900c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800900e:	69b8      	ldr	r0, [r7, #24]
 8009010:	f7ff fe2c 	bl	8008c6c <mem_to_ptr>
 8009014:	4603      	mov	r3, r0
 8009016:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	881a      	ldrh	r2, [r3, #0]
 800901c:	8afb      	ldrh	r3, [r7, #22]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	b29b      	uxth	r3, r3
 8009022:	3b08      	subs	r3, #8
 8009024:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009026:	8bfa      	ldrh	r2, [r7, #30]
 8009028:	8abb      	ldrh	r3, [r7, #20]
 800902a:	429a      	cmp	r2, r3
 800902c:	d906      	bls.n	800903c <mem_trim+0xa4>
 800902e:	4b52      	ldr	r3, [pc, #328]	@ (8009178 <mem_trim+0x1e0>)
 8009030:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8009034:	4953      	ldr	r1, [pc, #332]	@ (8009184 <mem_trim+0x1ec>)
 8009036:	4852      	ldr	r0, [pc, #328]	@ (8009180 <mem_trim+0x1e8>)
 8009038:	f00a f910 	bl	801325c <iprintf>
  if (newsize > size) {
 800903c:	8bfa      	ldrh	r2, [r7, #30]
 800903e:	8abb      	ldrh	r3, [r7, #20]
 8009040:	429a      	cmp	r2, r3
 8009042:	d901      	bls.n	8009048 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8009044:	2300      	movs	r3, #0
 8009046:	e08f      	b.n	8009168 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8009048:	8bfa      	ldrh	r2, [r7, #30]
 800904a:	8abb      	ldrh	r3, [r7, #20]
 800904c:	429a      	cmp	r2, r3
 800904e:	d101      	bne.n	8009054 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	e089      	b.n	8009168 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	881b      	ldrh	r3, [r3, #0]
 8009058:	4618      	mov	r0, r3
 800905a:	f7ff fdf5 	bl	8008c48 <ptr_to_mem>
 800905e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	791b      	ldrb	r3, [r3, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d13f      	bne.n	80090e8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	881b      	ldrh	r3, [r3, #0]
 800906c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009070:	d106      	bne.n	8009080 <mem_trim+0xe8>
 8009072:	4b41      	ldr	r3, [pc, #260]	@ (8009178 <mem_trim+0x1e0>)
 8009074:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8009078:	4943      	ldr	r1, [pc, #268]	@ (8009188 <mem_trim+0x1f0>)
 800907a:	4841      	ldr	r0, [pc, #260]	@ (8009180 <mem_trim+0x1e8>)
 800907c:	f00a f8ee 	bl	801325c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	881b      	ldrh	r3, [r3, #0]
 8009084:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009086:	8afa      	ldrh	r2, [r7, #22]
 8009088:	8bfb      	ldrh	r3, [r7, #30]
 800908a:	4413      	add	r3, r2
 800908c:	b29b      	uxth	r3, r3
 800908e:	3308      	adds	r3, #8
 8009090:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009092:	4b3e      	ldr	r3, [pc, #248]	@ (800918c <mem_trim+0x1f4>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	429a      	cmp	r2, r3
 800909a:	d106      	bne.n	80090aa <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800909c:	89fb      	ldrh	r3, [r7, #14]
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff fdd2 	bl	8008c48 <ptr_to_mem>
 80090a4:	4603      	mov	r3, r0
 80090a6:	4a39      	ldr	r2, [pc, #228]	@ (800918c <mem_trim+0x1f4>)
 80090a8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80090aa:	89fb      	ldrh	r3, [r7, #14]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7ff fdcb 	bl	8008c48 <ptr_to_mem>
 80090b2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	2200      	movs	r2, #0
 80090b8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	89ba      	ldrh	r2, [r7, #12]
 80090be:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	8afa      	ldrh	r2, [r7, #22]
 80090c4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	89fa      	ldrh	r2, [r7, #14]
 80090ca:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090d4:	d047      	beq.n	8009166 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	4618      	mov	r0, r3
 80090dc:	f7ff fdb4 	bl	8008c48 <ptr_to_mem>
 80090e0:	4602      	mov	r2, r0
 80090e2:	89fb      	ldrh	r3, [r7, #14]
 80090e4:	8053      	strh	r3, [r2, #2]
 80090e6:	e03e      	b.n	8009166 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80090e8:	8bfb      	ldrh	r3, [r7, #30]
 80090ea:	f103 0214 	add.w	r2, r3, #20
 80090ee:	8abb      	ldrh	r3, [r7, #20]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d838      	bhi.n	8009166 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80090f4:	8afa      	ldrh	r2, [r7, #22]
 80090f6:	8bfb      	ldrh	r3, [r7, #30]
 80090f8:	4413      	add	r3, r2
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	3308      	adds	r3, #8
 80090fe:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009108:	d106      	bne.n	8009118 <mem_trim+0x180>
 800910a:	4b1b      	ldr	r3, [pc, #108]	@ (8009178 <mem_trim+0x1e0>)
 800910c:	f240 3216 	movw	r2, #790	@ 0x316
 8009110:	491d      	ldr	r1, [pc, #116]	@ (8009188 <mem_trim+0x1f0>)
 8009112:	481b      	ldr	r0, [pc, #108]	@ (8009180 <mem_trim+0x1e8>)
 8009114:	f00a f8a2 	bl	801325c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009118:	89fb      	ldrh	r3, [r7, #14]
 800911a:	4618      	mov	r0, r3
 800911c:	f7ff fd94 	bl	8008c48 <ptr_to_mem>
 8009120:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009122:	4b1a      	ldr	r3, [pc, #104]	@ (800918c <mem_trim+0x1f4>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	429a      	cmp	r2, r3
 800912a:	d202      	bcs.n	8009132 <mem_trim+0x19a>
      lfree = mem2;
 800912c:	4a17      	ldr	r2, [pc, #92]	@ (800918c <mem_trim+0x1f4>)
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	2200      	movs	r2, #0
 8009136:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	881a      	ldrh	r2, [r3, #0]
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	8afa      	ldrh	r2, [r7, #22]
 8009144:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	89fa      	ldrh	r2, [r7, #14]
 800914a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	881b      	ldrh	r3, [r3, #0]
 8009150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009154:	d007      	beq.n	8009166 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	4618      	mov	r0, r3
 800915c:	f7ff fd74 	bl	8008c48 <ptr_to_mem>
 8009160:	4602      	mov	r2, r0
 8009162:	89fb      	ldrh	r3, [r7, #14]
 8009164:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8009166:	687b      	ldr	r3, [r7, #4]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3720      	adds	r7, #32
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20005ac0 	.word	0x20005ac0
 8009174:	20005ac4 	.word	0x20005ac4
 8009178:	08014770 	.word	0x08014770
 800917c:	080148e0 	.word	0x080148e0
 8009180:	080147b8 	.word	0x080147b8
 8009184:	080148f8 	.word	0x080148f8
 8009188:	08014918 	.word	0x08014918
 800918c:	20005ac8 	.word	0x20005ac8

08009190 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b088      	sub	sp, #32
 8009194:	af00      	add	r7, sp, #0
 8009196:	4603      	mov	r3, r0
 8009198:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800919a:	88fb      	ldrh	r3, [r7, #6]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <mem_malloc+0x14>
    return NULL;
 80091a0:	2300      	movs	r3, #0
 80091a2:	e0d9      	b.n	8009358 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80091a4:	88fb      	ldrh	r3, [r7, #6]
 80091a6:	3303      	adds	r3, #3
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	f023 0303 	bic.w	r3, r3, #3
 80091ae:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80091b0:	8bbb      	ldrh	r3, [r7, #28]
 80091b2:	2b0b      	cmp	r3, #11
 80091b4:	d801      	bhi.n	80091ba <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80091b6:	230c      	movs	r3, #12
 80091b8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80091ba:	8bbb      	ldrh	r3, [r7, #28]
 80091bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091c0:	d803      	bhi.n	80091ca <mem_malloc+0x3a>
 80091c2:	8bba      	ldrh	r2, [r7, #28]
 80091c4:	88fb      	ldrh	r3, [r7, #6]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d201      	bcs.n	80091ce <mem_malloc+0x3e>
    return NULL;
 80091ca:	2300      	movs	r3, #0
 80091cc:	e0c4      	b.n	8009358 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80091ce:	4b64      	ldr	r3, [pc, #400]	@ (8009360 <mem_malloc+0x1d0>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7ff fd4a 	bl	8008c6c <mem_to_ptr>
 80091d8:	4603      	mov	r3, r0
 80091da:	83fb      	strh	r3, [r7, #30]
 80091dc:	e0b4      	b.n	8009348 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80091de:	8bfb      	ldrh	r3, [r7, #30]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7ff fd31 	bl	8008c48 <ptr_to_mem>
 80091e6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	791b      	ldrb	r3, [r3, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f040 80a4 	bne.w	800933a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	461a      	mov	r2, r3
 80091f8:	8bfb      	ldrh	r3, [r7, #30]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	f1a3 0208 	sub.w	r2, r3, #8
 8009200:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009202:	429a      	cmp	r2, r3
 8009204:	f0c0 8099 	bcc.w	800933a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	461a      	mov	r2, r3
 800920e:	8bfb      	ldrh	r3, [r7, #30]
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	f1a3 0208 	sub.w	r2, r3, #8
 8009216:	8bbb      	ldrh	r3, [r7, #28]
 8009218:	3314      	adds	r3, #20
 800921a:	429a      	cmp	r2, r3
 800921c:	d333      	bcc.n	8009286 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800921e:	8bfa      	ldrh	r2, [r7, #30]
 8009220:	8bbb      	ldrh	r3, [r7, #28]
 8009222:	4413      	add	r3, r2
 8009224:	b29b      	uxth	r3, r3
 8009226:	3308      	adds	r3, #8
 8009228:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800922a:	8a7b      	ldrh	r3, [r7, #18]
 800922c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009230:	d106      	bne.n	8009240 <mem_malloc+0xb0>
 8009232:	4b4c      	ldr	r3, [pc, #304]	@ (8009364 <mem_malloc+0x1d4>)
 8009234:	f240 3287 	movw	r2, #903	@ 0x387
 8009238:	494b      	ldr	r1, [pc, #300]	@ (8009368 <mem_malloc+0x1d8>)
 800923a:	484c      	ldr	r0, [pc, #304]	@ (800936c <mem_malloc+0x1dc>)
 800923c:	f00a f80e 	bl	801325c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009240:	8a7b      	ldrh	r3, [r7, #18]
 8009242:	4618      	mov	r0, r3
 8009244:	f7ff fd00 	bl	8008c48 <ptr_to_mem>
 8009248:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	881a      	ldrh	r2, [r3, #0]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	8bfa      	ldrh	r2, [r7, #30]
 800925c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	8a7a      	ldrh	r2, [r7, #18]
 8009262:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	2201      	movs	r2, #1
 8009268:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	881b      	ldrh	r3, [r3, #0]
 800926e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009272:	d00b      	beq.n	800928c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	4618      	mov	r0, r3
 800927a:	f7ff fce5 	bl	8008c48 <ptr_to_mem>
 800927e:	4602      	mov	r2, r0
 8009280:	8a7b      	ldrh	r3, [r7, #18]
 8009282:	8053      	strh	r3, [r2, #2]
 8009284:	e002      	b.n	800928c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2201      	movs	r2, #1
 800928a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800928c:	4b34      	ldr	r3, [pc, #208]	@ (8009360 <mem_malloc+0x1d0>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	429a      	cmp	r2, r3
 8009294:	d127      	bne.n	80092e6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8009296:	4b32      	ldr	r3, [pc, #200]	@ (8009360 <mem_malloc+0x1d0>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800929c:	e005      	b.n	80092aa <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	881b      	ldrh	r3, [r3, #0]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7ff fcd0 	bl	8008c48 <ptr_to_mem>
 80092a8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	791b      	ldrb	r3, [r3, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d004      	beq.n	80092bc <mem_malloc+0x12c>
 80092b2:	4b2f      	ldr	r3, [pc, #188]	@ (8009370 <mem_malloc+0x1e0>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	69ba      	ldr	r2, [r7, #24]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d1f0      	bne.n	800929e <mem_malloc+0x10e>
          }
          lfree = cur;
 80092bc:	4a28      	ldr	r2, [pc, #160]	@ (8009360 <mem_malloc+0x1d0>)
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80092c2:	4b27      	ldr	r3, [pc, #156]	@ (8009360 <mem_malloc+0x1d0>)
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	4b2a      	ldr	r3, [pc, #168]	@ (8009370 <mem_malloc+0x1e0>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d00b      	beq.n	80092e6 <mem_malloc+0x156>
 80092ce:	4b24      	ldr	r3, [pc, #144]	@ (8009360 <mem_malloc+0x1d0>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	791b      	ldrb	r3, [r3, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d006      	beq.n	80092e6 <mem_malloc+0x156>
 80092d8:	4b22      	ldr	r3, [pc, #136]	@ (8009364 <mem_malloc+0x1d4>)
 80092da:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80092de:	4925      	ldr	r1, [pc, #148]	@ (8009374 <mem_malloc+0x1e4>)
 80092e0:	4822      	ldr	r0, [pc, #136]	@ (800936c <mem_malloc+0x1dc>)
 80092e2:	f009 ffbb 	bl	801325c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80092e6:	8bba      	ldrh	r2, [r7, #28]
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	4413      	add	r3, r2
 80092ec:	3308      	adds	r3, #8
 80092ee:	4a20      	ldr	r2, [pc, #128]	@ (8009370 <mem_malloc+0x1e0>)
 80092f0:	6812      	ldr	r2, [r2, #0]
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d906      	bls.n	8009304 <mem_malloc+0x174>
 80092f6:	4b1b      	ldr	r3, [pc, #108]	@ (8009364 <mem_malloc+0x1d4>)
 80092f8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80092fc:	491e      	ldr	r1, [pc, #120]	@ (8009378 <mem_malloc+0x1e8>)
 80092fe:	481b      	ldr	r0, [pc, #108]	@ (800936c <mem_malloc+0x1dc>)
 8009300:	f009 ffac 	bl	801325c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	f003 0303 	and.w	r3, r3, #3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d006      	beq.n	800931c <mem_malloc+0x18c>
 800930e:	4b15      	ldr	r3, [pc, #84]	@ (8009364 <mem_malloc+0x1d4>)
 8009310:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8009314:	4919      	ldr	r1, [pc, #100]	@ (800937c <mem_malloc+0x1ec>)
 8009316:	4815      	ldr	r0, [pc, #84]	@ (800936c <mem_malloc+0x1dc>)
 8009318:	f009 ffa0 	bl	801325c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	f003 0303 	and.w	r3, r3, #3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d006      	beq.n	8009334 <mem_malloc+0x1a4>
 8009326:	4b0f      	ldr	r3, [pc, #60]	@ (8009364 <mem_malloc+0x1d4>)
 8009328:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800932c:	4914      	ldr	r1, [pc, #80]	@ (8009380 <mem_malloc+0x1f0>)
 800932e:	480f      	ldr	r0, [pc, #60]	@ (800936c <mem_malloc+0x1dc>)
 8009330:	f009 ff94 	bl	801325c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	3308      	adds	r3, #8
 8009338:	e00e      	b.n	8009358 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800933a:	8bfb      	ldrh	r3, [r7, #30]
 800933c:	4618      	mov	r0, r3
 800933e:	f7ff fc83 	bl	8008c48 <ptr_to_mem>
 8009342:	4603      	mov	r3, r0
 8009344:	881b      	ldrh	r3, [r3, #0]
 8009346:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009348:	8bfa      	ldrh	r2, [r7, #30]
 800934a:	8bbb      	ldrh	r3, [r7, #28]
 800934c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8009350:	429a      	cmp	r2, r3
 8009352:	f4ff af44 	bcc.w	80091de <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3720      	adds	r7, #32
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	20005ac8 	.word	0x20005ac8
 8009364:	08014770 	.word	0x08014770
 8009368:	08014918 	.word	0x08014918
 800936c:	080147b8 	.word	0x080147b8
 8009370:	20005ac4 	.word	0x20005ac4
 8009374:	0801492c 	.word	0x0801492c
 8009378:	08014948 	.word	0x08014948
 800937c:	08014978 	.word	0x08014978
 8009380:	080149a8 	.word	0x080149a8

08009384 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	2200      	movs	r2, #0
 8009392:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	3303      	adds	r3, #3
 800939a:	f023 0303 	bic.w	r3, r3, #3
 800939e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80093a0:	2300      	movs	r3, #0
 80093a2:	60fb      	str	r3, [r7, #12]
 80093a4:	e011      	b.n	80093ca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	881b      	ldrh	r3, [r3, #0]
 80093bc:	461a      	mov	r2, r3
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	4413      	add	r3, r2
 80093c2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	3301      	adds	r3, #1
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	885b      	ldrh	r3, [r3, #2]
 80093ce:	461a      	mov	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	4293      	cmp	r3, r2
 80093d4:	dbe7      	blt.n	80093a6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80093d6:	bf00      	nop
 80093d8:	bf00      	nop
 80093da:	3714      	adds	r7, #20
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80093ea:	2300      	movs	r3, #0
 80093ec:	80fb      	strh	r3, [r7, #6]
 80093ee:	e009      	b.n	8009404 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80093f0:	88fb      	ldrh	r3, [r7, #6]
 80093f2:	4a08      	ldr	r2, [pc, #32]	@ (8009414 <memp_init+0x30>)
 80093f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7ff ffc3 	bl	8009384 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80093fe:	88fb      	ldrh	r3, [r7, #6]
 8009400:	3301      	adds	r3, #1
 8009402:	80fb      	strh	r3, [r7, #6]
 8009404:	88fb      	ldrh	r3, [r7, #6]
 8009406:	2b08      	cmp	r3, #8
 8009408:	d9f2      	bls.n	80093f0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800940a:	bf00      	nop
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	0801718c 	.word	0x0801718c

08009418 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d012      	beq.n	8009454 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	6812      	ldr	r2, [r2, #0]
 8009436:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f003 0303 	and.w	r3, r3, #3
 800943e:	2b00      	cmp	r3, #0
 8009440:	d006      	beq.n	8009450 <do_memp_malloc_pool+0x38>
 8009442:	4b07      	ldr	r3, [pc, #28]	@ (8009460 <do_memp_malloc_pool+0x48>)
 8009444:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009448:	4906      	ldr	r1, [pc, #24]	@ (8009464 <do_memp_malloc_pool+0x4c>)
 800944a:	4807      	ldr	r0, [pc, #28]	@ (8009468 <do_memp_malloc_pool+0x50>)
 800944c:	f009 ff06 	bl	801325c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	e000      	b.n	8009456 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	080149cc 	.word	0x080149cc
 8009464:	080149fc 	.word	0x080149fc
 8009468:	08014a20 	.word	0x08014a20

0800946c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d106      	bne.n	8009488 <memp_malloc_pool+0x1c>
 800947a:	4b0a      	ldr	r3, [pc, #40]	@ (80094a4 <memp_malloc_pool+0x38>)
 800947c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8009480:	4909      	ldr	r1, [pc, #36]	@ (80094a8 <memp_malloc_pool+0x3c>)
 8009482:	480a      	ldr	r0, [pc, #40]	@ (80094ac <memp_malloc_pool+0x40>)
 8009484:	f009 feea 	bl	801325c <iprintf>
  if (desc == NULL) {
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d101      	bne.n	8009492 <memp_malloc_pool+0x26>
    return NULL;
 800948e:	2300      	movs	r3, #0
 8009490:	e003      	b.n	800949a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7ff ffc0 	bl	8009418 <do_memp_malloc_pool>
 8009498:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800949a:	4618      	mov	r0, r3
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	080149cc 	.word	0x080149cc
 80094a8:	08014a48 	.word	0x08014a48
 80094ac:	08014a20 	.word	0x08014a20

080094b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80094ba:	79fb      	ldrb	r3, [r7, #7]
 80094bc:	2b08      	cmp	r3, #8
 80094be:	d908      	bls.n	80094d2 <memp_malloc+0x22>
 80094c0:	4b0a      	ldr	r3, [pc, #40]	@ (80094ec <memp_malloc+0x3c>)
 80094c2:	f240 1257 	movw	r2, #343	@ 0x157
 80094c6:	490a      	ldr	r1, [pc, #40]	@ (80094f0 <memp_malloc+0x40>)
 80094c8:	480a      	ldr	r0, [pc, #40]	@ (80094f4 <memp_malloc+0x44>)
 80094ca:	f009 fec7 	bl	801325c <iprintf>
 80094ce:	2300      	movs	r3, #0
 80094d0:	e008      	b.n	80094e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80094d2:	79fb      	ldrb	r3, [r7, #7]
 80094d4:	4a08      	ldr	r2, [pc, #32]	@ (80094f8 <memp_malloc+0x48>)
 80094d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094da:	4618      	mov	r0, r3
 80094dc:	f7ff ff9c 	bl	8009418 <do_memp_malloc_pool>
 80094e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80094e2:	68fb      	ldr	r3, [r7, #12]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	080149cc 	.word	0x080149cc
 80094f0:	08014a5c 	.word	0x08014a5c
 80094f4:	08014a20 	.word	0x08014a20
 80094f8:	0801718c 	.word	0x0801718c

080094fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	f003 0303 	and.w	r3, r3, #3
 800950c:	2b00      	cmp	r3, #0
 800950e:	d006      	beq.n	800951e <do_memp_free_pool+0x22>
 8009510:	4b0a      	ldr	r3, [pc, #40]	@ (800953c <do_memp_free_pool+0x40>)
 8009512:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8009516:	490a      	ldr	r1, [pc, #40]	@ (8009540 <do_memp_free_pool+0x44>)
 8009518:	480a      	ldr	r0, [pc, #40]	@ (8009544 <do_memp_free_pool+0x48>)
 800951a:	f009 fe9f 	bl	801325c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009534:	bf00      	nop
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	080149cc 	.word	0x080149cc
 8009540:	08014a7c 	.word	0x08014a7c
 8009544:	08014a20 	.word	0x08014a20

08009548 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d106      	bne.n	8009566 <memp_free_pool+0x1e>
 8009558:	4b0a      	ldr	r3, [pc, #40]	@ (8009584 <memp_free_pool+0x3c>)
 800955a:	f240 1295 	movw	r2, #405	@ 0x195
 800955e:	490a      	ldr	r1, [pc, #40]	@ (8009588 <memp_free_pool+0x40>)
 8009560:	480a      	ldr	r0, [pc, #40]	@ (800958c <memp_free_pool+0x44>)
 8009562:	f009 fe7b 	bl	801325c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d007      	beq.n	800957c <memp_free_pool+0x34>
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d004      	beq.n	800957c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7ff ffc1 	bl	80094fc <do_memp_free_pool>
 800957a:	e000      	b.n	800957e <memp_free_pool+0x36>
    return;
 800957c:	bf00      	nop
}
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	080149cc 	.word	0x080149cc
 8009588:	08014a48 	.word	0x08014a48
 800958c:	08014a20 	.word	0x08014a20

08009590 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	4603      	mov	r3, r0
 8009598:	6039      	str	r1, [r7, #0]
 800959a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	2b08      	cmp	r3, #8
 80095a0:	d907      	bls.n	80095b2 <memp_free+0x22>
 80095a2:	4b0c      	ldr	r3, [pc, #48]	@ (80095d4 <memp_free+0x44>)
 80095a4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80095a8:	490b      	ldr	r1, [pc, #44]	@ (80095d8 <memp_free+0x48>)
 80095aa:	480c      	ldr	r0, [pc, #48]	@ (80095dc <memp_free+0x4c>)
 80095ac:	f009 fe56 	bl	801325c <iprintf>
 80095b0:	e00c      	b.n	80095cc <memp_free+0x3c>

  if (mem == NULL) {
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d008      	beq.n	80095ca <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80095b8:	79fb      	ldrb	r3, [r7, #7]
 80095ba:	4a09      	ldr	r2, [pc, #36]	@ (80095e0 <memp_free+0x50>)
 80095bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7ff ff9a 	bl	80094fc <do_memp_free_pool>
 80095c8:	e000      	b.n	80095cc <memp_free+0x3c>
    return;
 80095ca:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	080149cc 	.word	0x080149cc
 80095d8:	08014a9c 	.word	0x08014a9c
 80095dc:	08014a20 	.word	0x08014a20
 80095e0:	0801718c 	.word	0x0801718c

080095e4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80095e4:	b480      	push	{r7}
 80095e6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80095e8:	bf00      	nop
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
	...

080095f4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d108      	bne.n	800961a <netif_add+0x26>
 8009608:	4b57      	ldr	r3, [pc, #348]	@ (8009768 <netif_add+0x174>)
 800960a:	f240 1227 	movw	r2, #295	@ 0x127
 800960e:	4957      	ldr	r1, [pc, #348]	@ (800976c <netif_add+0x178>)
 8009610:	4857      	ldr	r0, [pc, #348]	@ (8009770 <netif_add+0x17c>)
 8009612:	f009 fe23 	bl	801325c <iprintf>
 8009616:	2300      	movs	r3, #0
 8009618:	e0a2      	b.n	8009760 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800961a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961c:	2b00      	cmp	r3, #0
 800961e:	d108      	bne.n	8009632 <netif_add+0x3e>
 8009620:	4b51      	ldr	r3, [pc, #324]	@ (8009768 <netif_add+0x174>)
 8009622:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8009626:	4953      	ldr	r1, [pc, #332]	@ (8009774 <netif_add+0x180>)
 8009628:	4851      	ldr	r0, [pc, #324]	@ (8009770 <netif_add+0x17c>)
 800962a:	f009 fe17 	bl	801325c <iprintf>
 800962e:	2300      	movs	r3, #0
 8009630:	e096      	b.n	8009760 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d101      	bne.n	800963c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009638:	4b4f      	ldr	r3, [pc, #316]	@ (8009778 <netif_add+0x184>)
 800963a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009642:	4b4d      	ldr	r3, [pc, #308]	@ (8009778 <netif_add+0x184>)
 8009644:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800964c:	4b4a      	ldr	r3, [pc, #296]	@ (8009778 <netif_add+0x184>)
 800964e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	4a45      	ldr	r2, [pc, #276]	@ (800977c <netif_add+0x188>)
 8009666:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6a3a      	ldr	r2, [r7, #32]
 8009680:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009682:	4b3f      	ldr	r3, [pc, #252]	@ (8009780 <netif_add+0x18c>)
 8009684:	781a      	ldrb	r2, [r3, #0]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009690:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	68b9      	ldr	r1, [r7, #8]
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 f913 	bl	80098c4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800969e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	4798      	blx	r3
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <netif_add+0xba>
    return NULL;
 80096aa:	2300      	movs	r3, #0
 80096ac:	e058      	b.n	8009760 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80096b4:	2bff      	cmp	r3, #255	@ 0xff
 80096b6:	d103      	bne.n	80096c0 <netif_add+0xcc>
        netif->num = 0;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80096c0:	2300      	movs	r3, #0
 80096c2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80096c4:	4b2f      	ldr	r3, [pc, #188]	@ (8009784 <netif_add+0x190>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	617b      	str	r3, [r7, #20]
 80096ca:	e02b      	b.n	8009724 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d106      	bne.n	80096e2 <netif_add+0xee>
 80096d4:	4b24      	ldr	r3, [pc, #144]	@ (8009768 <netif_add+0x174>)
 80096d6:	f240 128b 	movw	r2, #395	@ 0x18b
 80096da:	492b      	ldr	r1, [pc, #172]	@ (8009788 <netif_add+0x194>)
 80096dc:	4824      	ldr	r0, [pc, #144]	@ (8009770 <netif_add+0x17c>)
 80096de:	f009 fdbd 	bl	801325c <iprintf>
        num_netifs++;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	3301      	adds	r3, #1
 80096e6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	2bff      	cmp	r3, #255	@ 0xff
 80096ec:	dd06      	ble.n	80096fc <netif_add+0x108>
 80096ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009768 <netif_add+0x174>)
 80096f0:	f240 128d 	movw	r2, #397	@ 0x18d
 80096f4:	4925      	ldr	r1, [pc, #148]	@ (800978c <netif_add+0x198>)
 80096f6:	481e      	ldr	r0, [pc, #120]	@ (8009770 <netif_add+0x17c>)
 80096f8:	f009 fdb0 	bl	801325c <iprintf>
        if (netif2->num == netif->num) {
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009708:	429a      	cmp	r2, r3
 800970a:	d108      	bne.n	800971e <netif_add+0x12a>
          netif->num++;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009712:	3301      	adds	r3, #1
 8009714:	b2da      	uxtb	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800971c:	e005      	b.n	800972a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	617b      	str	r3, [r7, #20]
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1d0      	bne.n	80096cc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1be      	bne.n	80096ae <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009736:	2bfe      	cmp	r3, #254	@ 0xfe
 8009738:	d103      	bne.n	8009742 <netif_add+0x14e>
    netif_num = 0;
 800973a:	4b11      	ldr	r3, [pc, #68]	@ (8009780 <netif_add+0x18c>)
 800973c:	2200      	movs	r2, #0
 800973e:	701a      	strb	r2, [r3, #0]
 8009740:	e006      	b.n	8009750 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009748:	3301      	adds	r3, #1
 800974a:	b2da      	uxtb	r2, r3
 800974c:	4b0c      	ldr	r3, [pc, #48]	@ (8009780 <netif_add+0x18c>)
 800974e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009750:	4b0c      	ldr	r3, [pc, #48]	@ (8009784 <netif_add+0x190>)
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009758:	4a0a      	ldr	r2, [pc, #40]	@ (8009784 <netif_add+0x190>)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800975e:	68fb      	ldr	r3, [r7, #12]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	08014ab8 	.word	0x08014ab8
 800976c:	08014b4c 	.word	0x08014b4c
 8009770:	08014b08 	.word	0x08014b08
 8009774:	08014b68 	.word	0x08014b68
 8009778:	080171f0 	.word	0x080171f0
 800977c:	08009b9f 	.word	0x08009b9f
 8009780:	200089c0 	.word	0x200089c0
 8009784:	200089b8 	.word	0x200089b8
 8009788:	08014b8c 	.word	0x08014b8c
 800978c:	08014ba0 	.word	0x08014ba0

08009790 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f002 fbe7 	bl	800bf70 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f007 f815 	bl	80107d4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80097aa:	bf00      	nop
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
	...

080097b4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d106      	bne.n	80097d4 <netif_do_set_ipaddr+0x20>
 80097c6:	4b1d      	ldr	r3, [pc, #116]	@ (800983c <netif_do_set_ipaddr+0x88>)
 80097c8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80097cc:	491c      	ldr	r1, [pc, #112]	@ (8009840 <netif_do_set_ipaddr+0x8c>)
 80097ce:	481d      	ldr	r0, [pc, #116]	@ (8009844 <netif_do_set_ipaddr+0x90>)
 80097d0:	f009 fd44 	bl	801325c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d106      	bne.n	80097e8 <netif_do_set_ipaddr+0x34>
 80097da:	4b18      	ldr	r3, [pc, #96]	@ (800983c <netif_do_set_ipaddr+0x88>)
 80097dc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80097e0:	4917      	ldr	r1, [pc, #92]	@ (8009840 <netif_do_set_ipaddr+0x8c>)
 80097e2:	4818      	ldr	r0, [pc, #96]	@ (8009844 <netif_do_set_ipaddr+0x90>)
 80097e4:	f009 fd3a 	bl	801325c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	3304      	adds	r3, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d01c      	beq.n	8009830 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	3304      	adds	r3, #4
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009806:	f107 0314 	add.w	r3, r7, #20
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff ffbf 	bl	8009790 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d002      	beq.n	800981e <netif_do_set_ipaddr+0x6a>
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	e000      	b.n	8009820 <netif_do_set_ipaddr+0x6c>
 800981e:	2300      	movs	r3, #0
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009824:	2101      	movs	r1, #1
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f000 f8d2 	bl	80099d0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800982c:	2301      	movs	r3, #1
 800982e:	e000      	b.n	8009832 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3718      	adds	r7, #24
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	08014ab8 	.word	0x08014ab8
 8009840:	08014bd0 	.word	0x08014bd0
 8009844:	08014b08 	.word	0x08014b08

08009848 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	3308      	adds	r3, #8
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	429a      	cmp	r2, r3
 8009860:	d00a      	beq.n	8009878 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <netif_do_set_netmask+0x26>
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	e000      	b.n	8009870 <netif_do_set_netmask+0x28>
 800986e:	2300      	movs	r3, #0
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009874:	2301      	movs	r3, #1
 8009876:	e000      	b.n	800987a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009886:	b480      	push	{r7}
 8009888:	b085      	sub	sp, #20
 800988a:	af00      	add	r7, sp, #0
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	330c      	adds	r3, #12
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	429a      	cmp	r2, r3
 800989e:	d00a      	beq.n	80098b6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <netif_do_set_gw+0x26>
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	e000      	b.n	80098ae <netif_do_set_gw+0x28>
 80098ac:	2300      	movs	r3, #0
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80098b2:	2301      	movs	r3, #1
 80098b4:	e000      	b.n	80098b8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b088      	sub	sp, #32
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
 80098d0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80098d2:	2300      	movs	r3, #0
 80098d4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80098d6:	2300      	movs	r3, #0
 80098d8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80098e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009954 <netif_set_addr+0x90>)
 80098e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80098ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009954 <netif_set_addr+0x90>)
 80098ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d101      	bne.n	80098f8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80098f4:	4b17      	ldr	r3, [pc, #92]	@ (8009954 <netif_set_addr+0x90>)
 80098f6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d003      	beq.n	8009906 <netif_set_addr+0x42>
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <netif_set_addr+0x46>
 8009906:	2301      	movs	r3, #1
 8009908:	e000      	b.n	800990c <netif_set_addr+0x48>
 800990a:	2300      	movs	r3, #0
 800990c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d006      	beq.n	8009922 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009914:	f107 0310 	add.w	r3, r7, #16
 8009918:	461a      	mov	r2, r3
 800991a:	68b9      	ldr	r1, [r7, #8]
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f7ff ff49 	bl	80097b4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009922:	69fa      	ldr	r2, [r7, #28]
 8009924:	6879      	ldr	r1, [r7, #4]
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f7ff ff8e 	bl	8009848 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800992c:	69ba      	ldr	r2, [r7, #24]
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f7ff ffa8 	bl	8009886 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d106      	bne.n	800994a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800993c:	f107 0310 	add.w	r3, r7, #16
 8009940:	461a      	mov	r2, r3
 8009942:	68b9      	ldr	r1, [r7, #8]
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f7ff ff35 	bl	80097b4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800994a:	bf00      	nop
 800994c:	3720      	adds	r7, #32
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	080171f0 	.word	0x080171f0

08009958 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009960:	4a04      	ldr	r2, [pc, #16]	@ (8009974 <netif_set_default+0x1c>)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009966:	bf00      	nop
 8009968:	370c      	adds	r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	200089bc 	.word	0x200089bc

08009978 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d107      	bne.n	8009996 <netif_set_up+0x1e>
 8009986:	4b0f      	ldr	r3, [pc, #60]	@ (80099c4 <netif_set_up+0x4c>)
 8009988:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800998c:	490e      	ldr	r1, [pc, #56]	@ (80099c8 <netif_set_up+0x50>)
 800998e:	480f      	ldr	r0, [pc, #60]	@ (80099cc <netif_set_up+0x54>)
 8009990:	f009 fc64 	bl	801325c <iprintf>
 8009994:	e013      	b.n	80099be <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10c      	bne.n	80099be <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80099aa:	f043 0301 	orr.w	r3, r3, #1
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80099b6:	2103      	movs	r1, #3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f809 	bl	80099d0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	08014ab8 	.word	0x08014ab8
 80099c8:	08014c40 	.word	0x08014c40
 80099cc:	08014b08 	.word	0x08014b08

080099d0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	460b      	mov	r3, r1
 80099da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d106      	bne.n	80099f0 <netif_issue_reports+0x20>
 80099e2:	4b18      	ldr	r3, [pc, #96]	@ (8009a44 <netif_issue_reports+0x74>)
 80099e4:	f240 326d 	movw	r2, #877	@ 0x36d
 80099e8:	4917      	ldr	r1, [pc, #92]	@ (8009a48 <netif_issue_reports+0x78>)
 80099ea:	4818      	ldr	r0, [pc, #96]	@ (8009a4c <netif_issue_reports+0x7c>)
 80099ec:	f009 fc36 	bl	801325c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80099f6:	f003 0304 	and.w	r3, r3, #4
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d01e      	beq.n	8009a3c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009a04:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d017      	beq.n	8009a3c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009a0c:	78fb      	ldrb	r3, [r7, #3]
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d013      	beq.n	8009a3e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	3304      	adds	r3, #4
 8009a1a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00e      	beq.n	8009a3e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009a26:	f003 0308 	and.w	r3, r3, #8
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d007      	beq.n	8009a3e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	3304      	adds	r3, #4
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f007 fe37 	bl	80116a8 <etharp_request>
 8009a3a:	e000      	b.n	8009a3e <netif_issue_reports+0x6e>
    return;
 8009a3c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	08014ab8 	.word	0x08014ab8
 8009a48:	08014c5c 	.word	0x08014c5c
 8009a4c:	08014b08 	.word	0x08014b08

08009a50 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d107      	bne.n	8009a6e <netif_set_down+0x1e>
 8009a5e:	4b12      	ldr	r3, [pc, #72]	@ (8009aa8 <netif_set_down+0x58>)
 8009a60:	f240 329b 	movw	r2, #923	@ 0x39b
 8009a64:	4911      	ldr	r1, [pc, #68]	@ (8009aac <netif_set_down+0x5c>)
 8009a66:	4812      	ldr	r0, [pc, #72]	@ (8009ab0 <netif_set_down+0x60>)
 8009a68:	f009 fbf8 	bl	801325c <iprintf>
 8009a6c:	e019      	b.n	8009aa2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d012      	beq.n	8009aa2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009a82:	f023 0301 	bic.w	r3, r3, #1
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009a94:	f003 0308 	and.w	r3, r3, #8
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d002      	beq.n	8009aa2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f007 f9c1 	bl	8010e24 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	08014ab8 	.word	0x08014ab8
 8009aac:	08014c80 	.word	0x08014c80
 8009ab0:	08014b08 	.word	0x08014b08

08009ab4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d107      	bne.n	8009ad2 <netif_set_link_up+0x1e>
 8009ac2:	4b13      	ldr	r3, [pc, #76]	@ (8009b10 <netif_set_link_up+0x5c>)
 8009ac4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8009ac8:	4912      	ldr	r1, [pc, #72]	@ (8009b14 <netif_set_link_up+0x60>)
 8009aca:	4813      	ldr	r0, [pc, #76]	@ (8009b18 <netif_set_link_up+0x64>)
 8009acc:	f009 fbc6 	bl	801325c <iprintf>
 8009ad0:	e01b      	b.n	8009b0a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009ad8:	f003 0304 	and.w	r3, r3, #4
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d114      	bne.n	8009b0a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009ae6:	f043 0304 	orr.w	r3, r3, #4
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009af2:	2103      	movs	r1, #3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7ff ff6b 	bl	80099d0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d003      	beq.n	8009b0a <netif_set_link_up+0x56>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	69db      	ldr	r3, [r3, #28]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	08014ab8 	.word	0x08014ab8
 8009b14:	08014ca0 	.word	0x08014ca0
 8009b18:	08014b08 	.word	0x08014b08

08009b1c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d107      	bne.n	8009b3a <netif_set_link_down+0x1e>
 8009b2a:	4b11      	ldr	r3, [pc, #68]	@ (8009b70 <netif_set_link_down+0x54>)
 8009b2c:	f240 4206 	movw	r2, #1030	@ 0x406
 8009b30:	4910      	ldr	r1, [pc, #64]	@ (8009b74 <netif_set_link_down+0x58>)
 8009b32:	4811      	ldr	r0, [pc, #68]	@ (8009b78 <netif_set_link_down+0x5c>)
 8009b34:	f009 fb92 	bl	801325c <iprintf>
 8009b38:	e017      	b.n	8009b6a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009b40:	f003 0304 	and.w	r3, r3, #4
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d010      	beq.n	8009b6a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009b4e:	f023 0304 	bic.w	r3, r3, #4
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	69db      	ldr	r3, [r3, #28]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d003      	beq.n	8009b6a <netif_set_link_down+0x4e>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	69db      	ldr	r3, [r3, #28]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	08014ab8 	.word	0x08014ab8
 8009b74:	08014cc4 	.word	0x08014cc4
 8009b78:	08014b08 	.word	0x08014b08

08009b7c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	61da      	str	r2, [r3, #28]
  }
}
 8009b92:	bf00      	nop
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b085      	sub	sp, #20
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009baa:	f06f 030b 	mvn.w	r3, #11
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3714      	adds	r7, #20
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
	...

08009bbc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d013      	beq.n	8009bf4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8009c04 <netif_get_by_index+0x48>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	60fb      	str	r3, [r7, #12]
 8009bd2:	e00c      	b.n	8009bee <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009bda:	3301      	adds	r3, #1
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	79fa      	ldrb	r2, [r7, #7]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d101      	bne.n	8009be8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	e006      	b.n	8009bf6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	60fb      	str	r3, [r7, #12]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d1ef      	bne.n	8009bd4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	200089b8 	.word	0x200089b8

08009c08 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8009c40 <pbuf_free_ooseq+0x38>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009c14:	4b0b      	ldr	r3, [pc, #44]	@ (8009c44 <pbuf_free_ooseq+0x3c>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	607b      	str	r3, [r7, #4]
 8009c1a:	e00a      	b.n	8009c32 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d003      	beq.n	8009c2c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f002 f9e1 	bl	800bfec <tcp_free_ooseq>
      return;
 8009c2a:	e005      	b.n	8009c38 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	607b      	str	r3, [r7, #4]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1f1      	bne.n	8009c1c <pbuf_free_ooseq+0x14>
    }
  }
}
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	200089c1 	.word	0x200089c1
 8009c44:	200089d0 	.word	0x200089d0

08009c48 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009c4c:	4b03      	ldr	r3, [pc, #12]	@ (8009c5c <pbuf_pool_is_empty+0x14>)
 8009c4e:	2201      	movs	r2, #1
 8009c50:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009c52:	bf00      	nop
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	200089c1 	.word	0x200089c1

08009c60 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	460b      	mov	r3, r1
 8009c70:	80fb      	strh	r3, [r7, #6]
 8009c72:	4613      	mov	r3, r2
 8009c74:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	88fa      	ldrh	r2, [r7, #6]
 8009c86:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	88ba      	ldrh	r2, [r7, #4]
 8009c8c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009c8e:	8b3b      	ldrh	r3, [r7, #24]
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	7f3a      	ldrb	r2, [r7, #28]
 8009c9a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	73da      	strb	r2, [r3, #15]
}
 8009ca8:	bf00      	nop
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b08c      	sub	sp, #48	@ 0x30
 8009cb8:	af02      	add	r7, sp, #8
 8009cba:	4603      	mov	r3, r0
 8009cbc:	71fb      	strb	r3, [r7, #7]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	80bb      	strh	r3, [r7, #4]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009cca:	887b      	ldrh	r3, [r7, #2]
 8009ccc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8009cd0:	d07f      	beq.n	8009dd2 <pbuf_alloc+0x11e>
 8009cd2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8009cd6:	f300 80c8 	bgt.w	8009e6a <pbuf_alloc+0x1b6>
 8009cda:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8009cde:	d010      	beq.n	8009d02 <pbuf_alloc+0x4e>
 8009ce0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8009ce4:	f300 80c1 	bgt.w	8009e6a <pbuf_alloc+0x1b6>
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d002      	beq.n	8009cf2 <pbuf_alloc+0x3e>
 8009cec:	2b41      	cmp	r3, #65	@ 0x41
 8009cee:	f040 80bc 	bne.w	8009e6a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009cf2:	887a      	ldrh	r2, [r7, #2]
 8009cf4:	88bb      	ldrh	r3, [r7, #4]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	f000 f8d1 	bl	8009ea0 <pbuf_alloc_reference>
 8009cfe:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8009d00:	e0bd      	b.n	8009e7e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009d02:	2300      	movs	r3, #0
 8009d04:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8009d06:	2300      	movs	r3, #0
 8009d08:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009d0a:	88bb      	ldrh	r3, [r7, #4]
 8009d0c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009d0e:	2008      	movs	r0, #8
 8009d10:	f7ff fbce 	bl	80094b0 <memp_malloc>
 8009d14:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d109      	bne.n	8009d30 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009d1c:	f7ff ff94 	bl	8009c48 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d002      	beq.n	8009d2c <pbuf_alloc+0x78>
            pbuf_free(p);
 8009d26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d28:	f000 faa8 	bl	800a27c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e0a7      	b.n	8009e80 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009d30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d32:	3303      	adds	r3, #3
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	f023 0303 	bic.w	r3, r3, #3
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	8b7a      	ldrh	r2, [r7, #26]
 8009d44:	4293      	cmp	r3, r2
 8009d46:	bf28      	it	cs
 8009d48:	4613      	movcs	r3, r2
 8009d4a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009d4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d4e:	3310      	adds	r3, #16
 8009d50:	693a      	ldr	r2, [r7, #16]
 8009d52:	4413      	add	r3, r2
 8009d54:	3303      	adds	r3, #3
 8009d56:	f023 0303 	bic.w	r3, r3, #3
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	89f9      	ldrh	r1, [r7, #14]
 8009d5e:	8b7a      	ldrh	r2, [r7, #26]
 8009d60:	2300      	movs	r3, #0
 8009d62:	9301      	str	r3, [sp, #4]
 8009d64:	887b      	ldrh	r3, [r7, #2]
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	4601      	mov	r1, r0
 8009d6c:	6938      	ldr	r0, [r7, #16]
 8009d6e:	f7ff ff77 	bl	8009c60 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	f003 0303 	and.w	r3, r3, #3
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d006      	beq.n	8009d8c <pbuf_alloc+0xd8>
 8009d7e:	4b42      	ldr	r3, [pc, #264]	@ (8009e88 <pbuf_alloc+0x1d4>)
 8009d80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d84:	4941      	ldr	r1, [pc, #260]	@ (8009e8c <pbuf_alloc+0x1d8>)
 8009d86:	4842      	ldr	r0, [pc, #264]	@ (8009e90 <pbuf_alloc+0x1dc>)
 8009d88:	f009 fa68 	bl	801325c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009d8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d8e:	3303      	adds	r3, #3
 8009d90:	f023 0303 	bic.w	r3, r3, #3
 8009d94:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8009d98:	d106      	bne.n	8009da8 <pbuf_alloc+0xf4>
 8009d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8009e88 <pbuf_alloc+0x1d4>)
 8009d9c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8009da0:	493c      	ldr	r1, [pc, #240]	@ (8009e94 <pbuf_alloc+0x1e0>)
 8009da2:	483b      	ldr	r0, [pc, #236]	@ (8009e90 <pbuf_alloc+0x1dc>)
 8009da4:	f009 fa5a 	bl	801325c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d102      	bne.n	8009db4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009db2:	e002      	b.n	8009dba <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009dbe:	8b7a      	ldrh	r2, [r7, #26]
 8009dc0:	89fb      	ldrh	r3, [r7, #14]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8009dca:	8b7b      	ldrh	r3, [r7, #26]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d19e      	bne.n	8009d0e <pbuf_alloc+0x5a>
      break;
 8009dd0:	e055      	b.n	8009e7e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009dd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009dd4:	3303      	adds	r3, #3
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	f023 0303 	bic.w	r3, r3, #3
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	88bb      	ldrh	r3, [r7, #4]
 8009de0:	3303      	adds	r3, #3
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	f023 0303 	bic.w	r3, r3, #3
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	4413      	add	r3, r2
 8009dec:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009dee:	8b3b      	ldrh	r3, [r7, #24]
 8009df0:	3310      	adds	r3, #16
 8009df2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009df4:	8b3a      	ldrh	r2, [r7, #24]
 8009df6:	88bb      	ldrh	r3, [r7, #4]
 8009df8:	3303      	adds	r3, #3
 8009dfa:	f023 0303 	bic.w	r3, r3, #3
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d306      	bcc.n	8009e10 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009e02:	8afa      	ldrh	r2, [r7, #22]
 8009e04:	88bb      	ldrh	r3, [r7, #4]
 8009e06:	3303      	adds	r3, #3
 8009e08:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d201      	bcs.n	8009e14 <pbuf_alloc+0x160>
        return NULL;
 8009e10:	2300      	movs	r3, #0
 8009e12:	e035      	b.n	8009e80 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009e14:	8afb      	ldrh	r3, [r7, #22]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7ff f9ba 	bl	8009190 <mem_malloc>
 8009e1c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d101      	bne.n	8009e28 <pbuf_alloc+0x174>
        return NULL;
 8009e24:	2300      	movs	r3, #0
 8009e26:	e02b      	b.n	8009e80 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009e28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009e2a:	3310      	adds	r3, #16
 8009e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e2e:	4413      	add	r3, r2
 8009e30:	3303      	adds	r3, #3
 8009e32:	f023 0303 	bic.w	r3, r3, #3
 8009e36:	4618      	mov	r0, r3
 8009e38:	88b9      	ldrh	r1, [r7, #4]
 8009e3a:	88ba      	ldrh	r2, [r7, #4]
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	9301      	str	r3, [sp, #4]
 8009e40:	887b      	ldrh	r3, [r7, #2]
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	460b      	mov	r3, r1
 8009e46:	4601      	mov	r1, r0
 8009e48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e4a:	f7ff ff09 	bl	8009c60 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	f003 0303 	and.w	r3, r3, #3
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d010      	beq.n	8009e7c <pbuf_alloc+0x1c8>
 8009e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8009e88 <pbuf_alloc+0x1d4>)
 8009e5c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8009e60:	490d      	ldr	r1, [pc, #52]	@ (8009e98 <pbuf_alloc+0x1e4>)
 8009e62:	480b      	ldr	r0, [pc, #44]	@ (8009e90 <pbuf_alloc+0x1dc>)
 8009e64:	f009 f9fa 	bl	801325c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009e68:	e008      	b.n	8009e7c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009e6a:	4b07      	ldr	r3, [pc, #28]	@ (8009e88 <pbuf_alloc+0x1d4>)
 8009e6c:	f240 1227 	movw	r2, #295	@ 0x127
 8009e70:	490a      	ldr	r1, [pc, #40]	@ (8009e9c <pbuf_alloc+0x1e8>)
 8009e72:	4807      	ldr	r0, [pc, #28]	@ (8009e90 <pbuf_alloc+0x1dc>)
 8009e74:	f009 f9f2 	bl	801325c <iprintf>
      return NULL;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	e001      	b.n	8009e80 <pbuf_alloc+0x1cc>
      break;
 8009e7c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3728      	adds	r7, #40	@ 0x28
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	08014ce8 	.word	0x08014ce8
 8009e8c:	08014d18 	.word	0x08014d18
 8009e90:	08014d48 	.word	0x08014d48
 8009e94:	08014d70 	.word	0x08014d70
 8009e98:	08014da4 	.word	0x08014da4
 8009e9c:	08014dd0 	.word	0x08014dd0

08009ea0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af02      	add	r7, sp, #8
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	807b      	strh	r3, [r7, #2]
 8009eac:	4613      	mov	r3, r2
 8009eae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009eb0:	883b      	ldrh	r3, [r7, #0]
 8009eb2:	2b41      	cmp	r3, #65	@ 0x41
 8009eb4:	d009      	beq.n	8009eca <pbuf_alloc_reference+0x2a>
 8009eb6:	883b      	ldrh	r3, [r7, #0]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d006      	beq.n	8009eca <pbuf_alloc_reference+0x2a>
 8009ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8009efc <pbuf_alloc_reference+0x5c>)
 8009ebe:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8009ec2:	490f      	ldr	r1, [pc, #60]	@ (8009f00 <pbuf_alloc_reference+0x60>)
 8009ec4:	480f      	ldr	r0, [pc, #60]	@ (8009f04 <pbuf_alloc_reference+0x64>)
 8009ec6:	f009 f9c9 	bl	801325c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009eca:	2007      	movs	r0, #7
 8009ecc:	f7ff faf0 	bl	80094b0 <memp_malloc>
 8009ed0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d101      	bne.n	8009edc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	e00b      	b.n	8009ef4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009edc:	8879      	ldrh	r1, [r7, #2]
 8009ede:	887a      	ldrh	r2, [r7, #2]
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	9301      	str	r3, [sp, #4]
 8009ee4:	883b      	ldrh	r3, [r7, #0]
 8009ee6:	9300      	str	r3, [sp, #0]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	6879      	ldr	r1, [r7, #4]
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f7ff feb7 	bl	8009c60 <pbuf_init_alloced_pbuf>
  return p;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	08014ce8 	.word	0x08014ce8
 8009f00:	08014dec 	.word	0x08014dec
 8009f04:	08014d48 	.word	0x08014d48

08009f08 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b088      	sub	sp, #32
 8009f0c:	af02      	add	r7, sp, #8
 8009f0e:	607b      	str	r3, [r7, #4]
 8009f10:	4603      	mov	r3, r0
 8009f12:	73fb      	strb	r3, [r7, #15]
 8009f14:	460b      	mov	r3, r1
 8009f16:	81bb      	strh	r3, [r7, #12]
 8009f18:	4613      	mov	r3, r2
 8009f1a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
 8009f1e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009f20:	8a7b      	ldrh	r3, [r7, #18]
 8009f22:	3303      	adds	r3, #3
 8009f24:	f023 0203 	bic.w	r2, r3, #3
 8009f28:	89bb      	ldrh	r3, [r7, #12]
 8009f2a:	441a      	add	r2, r3
 8009f2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d901      	bls.n	8009f36 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009f32:	2300      	movs	r3, #0
 8009f34:	e018      	b.n	8009f68 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d007      	beq.n	8009f4c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009f3c:	8a7b      	ldrh	r3, [r7, #18]
 8009f3e:	3303      	adds	r3, #3
 8009f40:	f023 0303 	bic.w	r3, r3, #3
 8009f44:	6a3a      	ldr	r2, [r7, #32]
 8009f46:	4413      	add	r3, r2
 8009f48:	617b      	str	r3, [r7, #20]
 8009f4a:	e001      	b.n	8009f50 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	89b9      	ldrh	r1, [r7, #12]
 8009f54:	89ba      	ldrh	r2, [r7, #12]
 8009f56:	2302      	movs	r3, #2
 8009f58:	9301      	str	r3, [sp, #4]
 8009f5a:	897b      	ldrh	r3, [r7, #10]
 8009f5c:	9300      	str	r3, [sp, #0]
 8009f5e:	460b      	mov	r3, r1
 8009f60:	6979      	ldr	r1, [r7, #20]
 8009f62:	f7ff fe7d 	bl	8009c60 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009f66:	687b      	ldr	r3, [r7, #4]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d106      	bne.n	8009f90 <pbuf_realloc+0x20>
 8009f82:	4b3a      	ldr	r3, [pc, #232]	@ (800a06c <pbuf_realloc+0xfc>)
 8009f84:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8009f88:	4939      	ldr	r1, [pc, #228]	@ (800a070 <pbuf_realloc+0x100>)
 8009f8a:	483a      	ldr	r0, [pc, #232]	@ (800a074 <pbuf_realloc+0x104>)
 8009f8c:	f009 f966 	bl	801325c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	891b      	ldrh	r3, [r3, #8]
 8009f94:	887a      	ldrh	r2, [r7, #2]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d263      	bcs.n	800a062 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	891a      	ldrh	r2, [r3, #8]
 8009f9e:	887b      	ldrh	r3, [r7, #2]
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009fa4:	887b      	ldrh	r3, [r7, #2]
 8009fa6:	817b      	strh	r3, [r7, #10]
  q = p;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009fac:	e018      	b.n	8009fe0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	895b      	ldrh	r3, [r3, #10]
 8009fb2:	897a      	ldrh	r2, [r7, #10]
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	891a      	ldrh	r2, [r3, #8]
 8009fbc:	893b      	ldrh	r3, [r7, #8]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d106      	bne.n	8009fe0 <pbuf_realloc+0x70>
 8009fd2:	4b26      	ldr	r3, [pc, #152]	@ (800a06c <pbuf_realloc+0xfc>)
 8009fd4:	f240 12af 	movw	r2, #431	@ 0x1af
 8009fd8:	4927      	ldr	r1, [pc, #156]	@ (800a078 <pbuf_realloc+0x108>)
 8009fda:	4826      	ldr	r0, [pc, #152]	@ (800a074 <pbuf_realloc+0x104>)
 8009fdc:	f009 f93e 	bl	801325c <iprintf>
  while (rem_len > q->len) {
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	895b      	ldrh	r3, [r3, #10]
 8009fe4:	897a      	ldrh	r2, [r7, #10]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d8e1      	bhi.n	8009fae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	7b1b      	ldrb	r3, [r3, #12]
 8009fee:	f003 030f 	and.w	r3, r3, #15
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d121      	bne.n	800a03a <pbuf_realloc+0xca>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	895b      	ldrh	r3, [r3, #10]
 8009ffa:	897a      	ldrh	r2, [r7, #10]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d01c      	beq.n	800a03a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	7b5b      	ldrb	r3, [r3, #13]
 800a004:	f003 0302 	and.w	r3, r3, #2
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d116      	bne.n	800a03a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	685a      	ldr	r2, [r3, #4]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	b29a      	uxth	r2, r3
 800a016:	897b      	ldrh	r3, [r7, #10]
 800a018:	4413      	add	r3, r2
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	4619      	mov	r1, r3
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f7fe ffba 	bl	8008f98 <mem_trim>
 800a024:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d106      	bne.n	800a03a <pbuf_realloc+0xca>
 800a02c:	4b0f      	ldr	r3, [pc, #60]	@ (800a06c <pbuf_realloc+0xfc>)
 800a02e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800a032:	4912      	ldr	r1, [pc, #72]	@ (800a07c <pbuf_realloc+0x10c>)
 800a034:	480f      	ldr	r0, [pc, #60]	@ (800a074 <pbuf_realloc+0x104>)
 800a036:	f009 f911 	bl	801325c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	897a      	ldrh	r2, [r7, #10]
 800a03e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	895a      	ldrh	r2, [r3, #10]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d004      	beq.n	800a05a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4618      	mov	r0, r3
 800a056:	f000 f911 	bl	800a27c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	e000      	b.n	800a064 <pbuf_realloc+0xf4>
    return;
 800a062:	bf00      	nop

}
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	08014ce8 	.word	0x08014ce8
 800a070:	08014e00 	.word	0x08014e00
 800a074:	08014d48 	.word	0x08014d48
 800a078:	08014e18 	.word	0x08014e18
 800a07c:	08014e30 	.word	0x08014e30

0800a080 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	4613      	mov	r3, r2
 800a08c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d106      	bne.n	800a0a2 <pbuf_add_header_impl+0x22>
 800a094:	4b2b      	ldr	r3, [pc, #172]	@ (800a144 <pbuf_add_header_impl+0xc4>)
 800a096:	f240 12df 	movw	r2, #479	@ 0x1df
 800a09a:	492b      	ldr	r1, [pc, #172]	@ (800a148 <pbuf_add_header_impl+0xc8>)
 800a09c:	482b      	ldr	r0, [pc, #172]	@ (800a14c <pbuf_add_header_impl+0xcc>)
 800a09e:	f009 f8dd 	bl	801325c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d003      	beq.n	800a0b0 <pbuf_add_header_impl+0x30>
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0ae:	d301      	bcc.n	800a0b4 <pbuf_add_header_impl+0x34>
    return 1;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e043      	b.n	800a13c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d101      	bne.n	800a0be <pbuf_add_header_impl+0x3e>
    return 0;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	e03e      	b.n	800a13c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	891a      	ldrh	r2, [r3, #8]
 800a0c6:	8a7b      	ldrh	r3, [r7, #18]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	8a7a      	ldrh	r2, [r7, #18]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d901      	bls.n	800a0d6 <pbuf_add_header_impl+0x56>
    return 1;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e032      	b.n	800a13c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	7b1b      	ldrb	r3, [r3, #12]
 800a0da:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a0dc:	8a3b      	ldrh	r3, [r7, #16]
 800a0de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00c      	beq.n	800a100 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	425b      	negs	r3, r3
 800a0ee:	4413      	add	r3, r2
 800a0f0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3310      	adds	r3, #16
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d20d      	bcs.n	800a118 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e01d      	b.n	800a13c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a100:	79fb      	ldrb	r3, [r7, #7]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d006      	beq.n	800a114 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	425b      	negs	r3, r3
 800a10e:	4413      	add	r3, r2
 800a110:	617b      	str	r3, [r7, #20]
 800a112:	e001      	b.n	800a118 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a114:	2301      	movs	r3, #1
 800a116:	e011      	b.n	800a13c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	895a      	ldrh	r2, [r3, #10]
 800a122:	8a7b      	ldrh	r3, [r7, #18]
 800a124:	4413      	add	r3, r2
 800a126:	b29a      	uxth	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	891a      	ldrh	r2, [r3, #8]
 800a130:	8a7b      	ldrh	r3, [r7, #18]
 800a132:	4413      	add	r3, r2
 800a134:	b29a      	uxth	r2, r3
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	811a      	strh	r2, [r3, #8]


  return 0;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3718      	adds	r7, #24
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	08014ce8 	.word	0x08014ce8
 800a148:	08014e4c 	.word	0x08014e4c
 800a14c:	08014d48 	.word	0x08014d48

0800a150 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a15a:	2200      	movs	r2, #0
 800a15c:	6839      	ldr	r1, [r7, #0]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7ff ff8e 	bl	800a080 <pbuf_add_header_impl>
 800a164:	4603      	mov	r3, r0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d106      	bne.n	800a18e <pbuf_remove_header+0x1e>
 800a180:	4b20      	ldr	r3, [pc, #128]	@ (800a204 <pbuf_remove_header+0x94>)
 800a182:	f240 224b 	movw	r2, #587	@ 0x24b
 800a186:	4920      	ldr	r1, [pc, #128]	@ (800a208 <pbuf_remove_header+0x98>)
 800a188:	4820      	ldr	r0, [pc, #128]	@ (800a20c <pbuf_remove_header+0x9c>)
 800a18a:	f009 f867 	bl	801325c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d003      	beq.n	800a19c <pbuf_remove_header+0x2c>
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a19a:	d301      	bcc.n	800a1a0 <pbuf_remove_header+0x30>
    return 1;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e02c      	b.n	800a1fa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <pbuf_remove_header+0x3a>
    return 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e027      	b.n	800a1fa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	895b      	ldrh	r3, [r3, #10]
 800a1b2:	89fa      	ldrh	r2, [r7, #14]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d908      	bls.n	800a1ca <pbuf_remove_header+0x5a>
 800a1b8:	4b12      	ldr	r3, [pc, #72]	@ (800a204 <pbuf_remove_header+0x94>)
 800a1ba:	f240 2255 	movw	r2, #597	@ 0x255
 800a1be:	4914      	ldr	r1, [pc, #80]	@ (800a210 <pbuf_remove_header+0xa0>)
 800a1c0:	4812      	ldr	r0, [pc, #72]	@ (800a20c <pbuf_remove_header+0x9c>)
 800a1c2:	f009 f84b 	bl	801325c <iprintf>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e017      	b.n	800a1fa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685a      	ldr	r2, [r3, #4]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	441a      	add	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	895a      	ldrh	r2, [r3, #10]
 800a1e0:	89fb      	ldrh	r3, [r7, #14]
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	891a      	ldrh	r2, [r3, #8]
 800a1ee:	89fb      	ldrh	r3, [r7, #14]
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	08014ce8 	.word	0x08014ce8
 800a208:	08014e4c 	.word	0x08014e4c
 800a20c:	08014d48 	.word	0x08014d48
 800a210:	08014e58 	.word	0x08014e58

0800a214 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	460b      	mov	r3, r1
 800a21e:	807b      	strh	r3, [r7, #2]
 800a220:	4613      	mov	r3, r2
 800a222:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a224:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	da08      	bge.n	800a23e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a22c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a230:	425b      	negs	r3, r3
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7ff ff9b 	bl	800a170 <pbuf_remove_header>
 800a23a:	4603      	mov	r3, r0
 800a23c:	e007      	b.n	800a24e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a23e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a242:	787a      	ldrb	r2, [r7, #1]
 800a244:	4619      	mov	r1, r3
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7ff ff1a 	bl	800a080 <pbuf_add_header_impl>
 800a24c:	4603      	mov	r3, r0
  }
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b082      	sub	sp, #8
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	460b      	mov	r3, r1
 800a260:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a262:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a266:	2201      	movs	r2, #1
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7ff ffd2 	bl	800a214 <pbuf_header_impl>
 800a270:	4603      	mov	r3, r0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
	...

0800a27c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d10b      	bne.n	800a2a2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d106      	bne.n	800a29e <pbuf_free+0x22>
 800a290:	4b38      	ldr	r3, [pc, #224]	@ (800a374 <pbuf_free+0xf8>)
 800a292:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800a296:	4938      	ldr	r1, [pc, #224]	@ (800a378 <pbuf_free+0xfc>)
 800a298:	4838      	ldr	r0, [pc, #224]	@ (800a37c <pbuf_free+0x100>)
 800a29a:	f008 ffdf 	bl	801325c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	e063      	b.n	800a36a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a2a6:	e05c      	b.n	800a362 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	7b9b      	ldrb	r3, [r3, #14]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d106      	bne.n	800a2be <pbuf_free+0x42>
 800a2b0:	4b30      	ldr	r3, [pc, #192]	@ (800a374 <pbuf_free+0xf8>)
 800a2b2:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800a2b6:	4932      	ldr	r1, [pc, #200]	@ (800a380 <pbuf_free+0x104>)
 800a2b8:	4830      	ldr	r0, [pc, #192]	@ (800a37c <pbuf_free+0x100>)
 800a2ba:	f008 ffcf 	bl	801325c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	7b9b      	ldrb	r3, [r3, #14]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	b2da      	uxtb	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	739a      	strb	r2, [r3, #14]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	7b9b      	ldrb	r3, [r3, #14]
 800a2ce:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a2d0:	7dbb      	ldrb	r3, [r7, #22]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d143      	bne.n	800a35e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	7b1b      	ldrb	r3, [r3, #12]
 800a2e0:	f003 030f 	and.w	r3, r3, #15
 800a2e4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	7b5b      	ldrb	r3, [r3, #13]
 800a2ea:	f003 0302 	and.w	r3, r3, #2
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d011      	beq.n	800a316 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d106      	bne.n	800a30c <pbuf_free+0x90>
 800a2fe:	4b1d      	ldr	r3, [pc, #116]	@ (800a374 <pbuf_free+0xf8>)
 800a300:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800a304:	491f      	ldr	r1, [pc, #124]	@ (800a384 <pbuf_free+0x108>)
 800a306:	481d      	ldr	r0, [pc, #116]	@ (800a37c <pbuf_free+0x100>)
 800a308:	f008 ffa8 	bl	801325c <iprintf>
        pc->custom_free_function(p);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	4798      	blx	r3
 800a314:	e01d      	b.n	800a352 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a316:	7bfb      	ldrb	r3, [r7, #15]
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d104      	bne.n	800a326 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a31c:	6879      	ldr	r1, [r7, #4]
 800a31e:	2008      	movs	r0, #8
 800a320:	f7ff f936 	bl	8009590 <memp_free>
 800a324:	e015      	b.n	800a352 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a326:	7bfb      	ldrb	r3, [r7, #15]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d104      	bne.n	800a336 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a32c:	6879      	ldr	r1, [r7, #4]
 800a32e:	2007      	movs	r0, #7
 800a330:	f7ff f92e 	bl	8009590 <memp_free>
 800a334:	e00d      	b.n	800a352 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a336:	7bfb      	ldrb	r3, [r7, #15]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d103      	bne.n	800a344 <pbuf_free+0xc8>
          mem_free(p);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7fe fdc1 	bl	8008ec4 <mem_free>
 800a342:	e006      	b.n	800a352 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a344:	4b0b      	ldr	r3, [pc, #44]	@ (800a374 <pbuf_free+0xf8>)
 800a346:	f240 320f 	movw	r2, #783	@ 0x30f
 800a34a:	490f      	ldr	r1, [pc, #60]	@ (800a388 <pbuf_free+0x10c>)
 800a34c:	480b      	ldr	r0, [pc, #44]	@ (800a37c <pbuf_free+0x100>)
 800a34e:	f008 ff85 	bl	801325c <iprintf>
        }
      }
      count++;
 800a352:	7dfb      	ldrb	r3, [r7, #23]
 800a354:	3301      	adds	r3, #1
 800a356:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	607b      	str	r3, [r7, #4]
 800a35c:	e001      	b.n	800a362 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a35e:	2300      	movs	r3, #0
 800a360:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d19f      	bne.n	800a2a8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a368:	7dfb      	ldrb	r3, [r7, #23]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3718      	adds	r7, #24
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	08014ce8 	.word	0x08014ce8
 800a378:	08014e4c 	.word	0x08014e4c
 800a37c:	08014d48 	.word	0x08014d48
 800a380:	08014e78 	.word	0x08014e78
 800a384:	08014e90 	.word	0x08014e90
 800a388:	08014eb4 	.word	0x08014eb4

0800a38c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a398:	e005      	b.n	800a3a6 <pbuf_clen+0x1a>
    ++len;
 800a39a:	89fb      	ldrh	r3, [r7, #14]
 800a39c:	3301      	adds	r3, #1
 800a39e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1f6      	bne.n	800a39a <pbuf_clen+0xe>
  }
  return len;
 800a3ac:	89fb      	ldrh	r3, [r7, #14]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
	...

0800a3bc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d010      	beq.n	800a3ec <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	7b9b      	ldrb	r3, [r3, #14]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	b2da      	uxtb	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	7b9b      	ldrb	r3, [r3, #14]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d106      	bne.n	800a3ec <pbuf_ref+0x30>
 800a3de:	4b05      	ldr	r3, [pc, #20]	@ (800a3f4 <pbuf_ref+0x38>)
 800a3e0:	f240 3242 	movw	r2, #834	@ 0x342
 800a3e4:	4904      	ldr	r1, [pc, #16]	@ (800a3f8 <pbuf_ref+0x3c>)
 800a3e6:	4805      	ldr	r0, [pc, #20]	@ (800a3fc <pbuf_ref+0x40>)
 800a3e8:	f008 ff38 	bl	801325c <iprintf>
  }
}
 800a3ec:	bf00      	nop
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	08014ce8 	.word	0x08014ce8
 800a3f8:	08014ec8 	.word	0x08014ec8
 800a3fc:	08014d48 	.word	0x08014d48

0800a400 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <pbuf_cat+0x16>
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d107      	bne.n	800a426 <pbuf_cat+0x26>
 800a416:	4b20      	ldr	r3, [pc, #128]	@ (800a498 <pbuf_cat+0x98>)
 800a418:	f240 3259 	movw	r2, #857	@ 0x359
 800a41c:	491f      	ldr	r1, [pc, #124]	@ (800a49c <pbuf_cat+0x9c>)
 800a41e:	4820      	ldr	r0, [pc, #128]	@ (800a4a0 <pbuf_cat+0xa0>)
 800a420:	f008 ff1c 	bl	801325c <iprintf>
 800a424:	e034      	b.n	800a490 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	60fb      	str	r3, [r7, #12]
 800a42a:	e00a      	b.n	800a442 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	891a      	ldrh	r2, [r3, #8]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	891b      	ldrh	r3, [r3, #8]
 800a434:	4413      	add	r3, r2
 800a436:	b29a      	uxth	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	60fb      	str	r3, [r7, #12]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1f0      	bne.n	800a42c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	891a      	ldrh	r2, [r3, #8]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	895b      	ldrh	r3, [r3, #10]
 800a452:	429a      	cmp	r2, r3
 800a454:	d006      	beq.n	800a464 <pbuf_cat+0x64>
 800a456:	4b10      	ldr	r3, [pc, #64]	@ (800a498 <pbuf_cat+0x98>)
 800a458:	f240 3262 	movw	r2, #866	@ 0x362
 800a45c:	4911      	ldr	r1, [pc, #68]	@ (800a4a4 <pbuf_cat+0xa4>)
 800a45e:	4810      	ldr	r0, [pc, #64]	@ (800a4a0 <pbuf_cat+0xa0>)
 800a460:	f008 fefc 	bl	801325c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d006      	beq.n	800a47a <pbuf_cat+0x7a>
 800a46c:	4b0a      	ldr	r3, [pc, #40]	@ (800a498 <pbuf_cat+0x98>)
 800a46e:	f240 3263 	movw	r2, #867	@ 0x363
 800a472:	490d      	ldr	r1, [pc, #52]	@ (800a4a8 <pbuf_cat+0xa8>)
 800a474:	480a      	ldr	r0, [pc, #40]	@ (800a4a0 <pbuf_cat+0xa0>)
 800a476:	f008 fef1 	bl	801325c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	891a      	ldrh	r2, [r3, #8]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	891b      	ldrh	r3, [r3, #8]
 800a482:	4413      	add	r3, r2
 800a484:	b29a      	uxth	r2, r3
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	08014ce8 	.word	0x08014ce8
 800a49c:	08014edc 	.word	0x08014edc
 800a4a0:	08014d48 	.word	0x08014d48
 800a4a4:	08014f14 	.word	0x08014f14
 800a4a8:	08014f44 	.word	0x08014f44

0800a4ac <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f7ff ffa1 	bl	800a400 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a4be:	6838      	ldr	r0, [r7, #0]
 800a4c0:	f7ff ff7c 	bl	800a3bc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a4c4:	bf00      	nop
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	617b      	str	r3, [r7, #20]
 800a4da:	2300      	movs	r3, #0
 800a4dc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d008      	beq.n	800a4f6 <pbuf_copy+0x2a>
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d005      	beq.n	800a4f6 <pbuf_copy+0x2a>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	891a      	ldrh	r2, [r3, #8]
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	891b      	ldrh	r3, [r3, #8]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d209      	bcs.n	800a50a <pbuf_copy+0x3e>
 800a4f6:	4b57      	ldr	r3, [pc, #348]	@ (800a654 <pbuf_copy+0x188>)
 800a4f8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800a4fc:	4956      	ldr	r1, [pc, #344]	@ (800a658 <pbuf_copy+0x18c>)
 800a4fe:	4857      	ldr	r0, [pc, #348]	@ (800a65c <pbuf_copy+0x190>)
 800a500:	f008 feac 	bl	801325c <iprintf>
 800a504:	f06f 030f 	mvn.w	r3, #15
 800a508:	e09f      	b.n	800a64a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	895b      	ldrh	r3, [r3, #10]
 800a50e:	461a      	mov	r2, r3
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	1ad2      	subs	r2, r2, r3
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	895b      	ldrh	r3, [r3, #10]
 800a518:	4619      	mov	r1, r3
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	1acb      	subs	r3, r1, r3
 800a51e:	429a      	cmp	r2, r3
 800a520:	d306      	bcc.n	800a530 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	895b      	ldrh	r3, [r3, #10]
 800a526:	461a      	mov	r2, r3
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	60fb      	str	r3, [r7, #12]
 800a52e:	e005      	b.n	800a53c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	895b      	ldrh	r3, [r3, #10]
 800a534:	461a      	mov	r2, r3
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	685a      	ldr	r2, [r3, #4]
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	18d0      	adds	r0, r2, r3
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685a      	ldr	r2, [r3, #4]
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	4413      	add	r3, r2
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4619      	mov	r1, r3
 800a550:	f008 ffc3 	bl	80134da <memcpy>
    offset_to += len;
 800a554:	697a      	ldr	r2, [r7, #20]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	4413      	add	r3, r2
 800a55a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	4413      	add	r3, r2
 800a562:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	895b      	ldrh	r3, [r3, #10]
 800a568:	461a      	mov	r2, r3
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d906      	bls.n	800a57e <pbuf_copy+0xb2>
 800a570:	4b38      	ldr	r3, [pc, #224]	@ (800a654 <pbuf_copy+0x188>)
 800a572:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800a576:	493a      	ldr	r1, [pc, #232]	@ (800a660 <pbuf_copy+0x194>)
 800a578:	4838      	ldr	r0, [pc, #224]	@ (800a65c <pbuf_copy+0x190>)
 800a57a:	f008 fe6f 	bl	801325c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	895b      	ldrh	r3, [r3, #10]
 800a582:	461a      	mov	r2, r3
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	4293      	cmp	r3, r2
 800a588:	d906      	bls.n	800a598 <pbuf_copy+0xcc>
 800a58a:	4b32      	ldr	r3, [pc, #200]	@ (800a654 <pbuf_copy+0x188>)
 800a58c:	f240 32da 	movw	r2, #986	@ 0x3da
 800a590:	4934      	ldr	r1, [pc, #208]	@ (800a664 <pbuf_copy+0x198>)
 800a592:	4832      	ldr	r0, [pc, #200]	@ (800a65c <pbuf_copy+0x190>)
 800a594:	f008 fe62 	bl	801325c <iprintf>
    if (offset_from >= p_from->len) {
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	895b      	ldrh	r3, [r3, #10]
 800a59c:	461a      	mov	r2, r3
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d304      	bcc.n	800a5ae <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	895b      	ldrh	r3, [r3, #10]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d114      	bne.n	800a5e4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d10c      	bne.n	800a5e4 <pbuf_copy+0x118>
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d009      	beq.n	800a5e4 <pbuf_copy+0x118>
 800a5d0:	4b20      	ldr	r3, [pc, #128]	@ (800a654 <pbuf_copy+0x188>)
 800a5d2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800a5d6:	4924      	ldr	r1, [pc, #144]	@ (800a668 <pbuf_copy+0x19c>)
 800a5d8:	4820      	ldr	r0, [pc, #128]	@ (800a65c <pbuf_copy+0x190>)
 800a5da:	f008 fe3f 	bl	801325c <iprintf>
 800a5de:	f06f 030f 	mvn.w	r3, #15
 800a5e2:	e032      	b.n	800a64a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d013      	beq.n	800a612 <pbuf_copy+0x146>
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	895a      	ldrh	r2, [r3, #10]
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	891b      	ldrh	r3, [r3, #8]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d10d      	bne.n	800a612 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d009      	beq.n	800a612 <pbuf_copy+0x146>
 800a5fe:	4b15      	ldr	r3, [pc, #84]	@ (800a654 <pbuf_copy+0x188>)
 800a600:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800a604:	4919      	ldr	r1, [pc, #100]	@ (800a66c <pbuf_copy+0x1a0>)
 800a606:	4815      	ldr	r0, [pc, #84]	@ (800a65c <pbuf_copy+0x190>)
 800a608:	f008 fe28 	bl	801325c <iprintf>
 800a60c:	f06f 0305 	mvn.w	r3, #5
 800a610:	e01b      	b.n	800a64a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d013      	beq.n	800a640 <pbuf_copy+0x174>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	895a      	ldrh	r2, [r3, #10]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	891b      	ldrh	r3, [r3, #8]
 800a620:	429a      	cmp	r2, r3
 800a622:	d10d      	bne.n	800a640 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d009      	beq.n	800a640 <pbuf_copy+0x174>
 800a62c:	4b09      	ldr	r3, [pc, #36]	@ (800a654 <pbuf_copy+0x188>)
 800a62e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800a632:	490e      	ldr	r1, [pc, #56]	@ (800a66c <pbuf_copy+0x1a0>)
 800a634:	4809      	ldr	r0, [pc, #36]	@ (800a65c <pbuf_copy+0x190>)
 800a636:	f008 fe11 	bl	801325c <iprintf>
 800a63a:	f06f 0305 	mvn.w	r3, #5
 800a63e:	e004      	b.n	800a64a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	f47f af61 	bne.w	800a50a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3718      	adds	r7, #24
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	08014ce8 	.word	0x08014ce8
 800a658:	08014f90 	.word	0x08014f90
 800a65c:	08014d48 	.word	0x08014d48
 800a660:	08014fc0 	.word	0x08014fc0
 800a664:	08014fd8 	.word	0x08014fd8
 800a668:	08014ff4 	.word	0x08014ff4
 800a66c:	08015004 	.word	0x08015004

0800a670 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b088      	sub	sp, #32
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	4611      	mov	r1, r2
 800a67c:	461a      	mov	r2, r3
 800a67e:	460b      	mov	r3, r1
 800a680:	80fb      	strh	r3, [r7, #6]
 800a682:	4613      	mov	r3, r2
 800a684:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d108      	bne.n	800a6a6 <pbuf_copy_partial+0x36>
 800a694:	4b2b      	ldr	r3, [pc, #172]	@ (800a744 <pbuf_copy_partial+0xd4>)
 800a696:	f240 420a 	movw	r2, #1034	@ 0x40a
 800a69a:	492b      	ldr	r1, [pc, #172]	@ (800a748 <pbuf_copy_partial+0xd8>)
 800a69c:	482b      	ldr	r0, [pc, #172]	@ (800a74c <pbuf_copy_partial+0xdc>)
 800a69e:	f008 fddd 	bl	801325c <iprintf>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	e04a      	b.n	800a73c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d108      	bne.n	800a6be <pbuf_copy_partial+0x4e>
 800a6ac:	4b25      	ldr	r3, [pc, #148]	@ (800a744 <pbuf_copy_partial+0xd4>)
 800a6ae:	f240 420b 	movw	r2, #1035	@ 0x40b
 800a6b2:	4927      	ldr	r1, [pc, #156]	@ (800a750 <pbuf_copy_partial+0xe0>)
 800a6b4:	4825      	ldr	r0, [pc, #148]	@ (800a74c <pbuf_copy_partial+0xdc>)
 800a6b6:	f008 fdd1 	bl	801325c <iprintf>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	e03e      	b.n	800a73c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	61fb      	str	r3, [r7, #28]
 800a6c2:	e034      	b.n	800a72e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a6c4:	88bb      	ldrh	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00a      	beq.n	800a6e0 <pbuf_copy_partial+0x70>
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	895b      	ldrh	r3, [r3, #10]
 800a6ce:	88ba      	ldrh	r2, [r7, #4]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d305      	bcc.n	800a6e0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	895b      	ldrh	r3, [r3, #10]
 800a6d8:	88ba      	ldrh	r2, [r7, #4]
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	80bb      	strh	r3, [r7, #4]
 800a6de:	e023      	b.n	800a728 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	895a      	ldrh	r2, [r3, #10]
 800a6e4:	88bb      	ldrh	r3, [r7, #4]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a6ea:	8b3a      	ldrh	r2, [r7, #24]
 800a6ec:	88fb      	ldrh	r3, [r7, #6]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d901      	bls.n	800a6f6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a6f2:	88fb      	ldrh	r3, [r7, #6]
 800a6f4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a6f6:	8b7b      	ldrh	r3, [r7, #26]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	18d0      	adds	r0, r2, r3
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	685a      	ldr	r2, [r3, #4]
 800a700:	88bb      	ldrh	r3, [r7, #4]
 800a702:	4413      	add	r3, r2
 800a704:	8b3a      	ldrh	r2, [r7, #24]
 800a706:	4619      	mov	r1, r3
 800a708:	f008 fee7 	bl	80134da <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a70c:	8afa      	ldrh	r2, [r7, #22]
 800a70e:	8b3b      	ldrh	r3, [r7, #24]
 800a710:	4413      	add	r3, r2
 800a712:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a714:	8b7a      	ldrh	r2, [r7, #26]
 800a716:	8b3b      	ldrh	r3, [r7, #24]
 800a718:	4413      	add	r3, r2
 800a71a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a71c:	88fa      	ldrh	r2, [r7, #6]
 800a71e:	8b3b      	ldrh	r3, [r7, #24]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a724:	2300      	movs	r3, #0
 800a726:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	61fb      	str	r3, [r7, #28]
 800a72e:	88fb      	ldrh	r3, [r7, #6]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d002      	beq.n	800a73a <pbuf_copy_partial+0xca>
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1c4      	bne.n	800a6c4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a73a:	8afb      	ldrh	r3, [r7, #22]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3720      	adds	r7, #32
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	08014ce8 	.word	0x08014ce8
 800a748:	08015030 	.word	0x08015030
 800a74c:	08014d48 	.word	0x08014d48
 800a750:	08015050 	.word	0x08015050

0800a754 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b088      	sub	sp, #32
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	4613      	mov	r3, r2
 800a760:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800a762:	88fb      	ldrh	r3, [r7, #6]
 800a764:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800a766:	2300      	movs	r3, #0
 800a768:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d109      	bne.n	800a784 <pbuf_take+0x30>
 800a770:	4b3a      	ldr	r3, [pc, #232]	@ (800a85c <pbuf_take+0x108>)
 800a772:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800a776:	493a      	ldr	r1, [pc, #232]	@ (800a860 <pbuf_take+0x10c>)
 800a778:	483a      	ldr	r0, [pc, #232]	@ (800a864 <pbuf_take+0x110>)
 800a77a:	f008 fd6f 	bl	801325c <iprintf>
 800a77e:	f06f 030f 	mvn.w	r3, #15
 800a782:	e067      	b.n	800a854 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d109      	bne.n	800a79e <pbuf_take+0x4a>
 800a78a:	4b34      	ldr	r3, [pc, #208]	@ (800a85c <pbuf_take+0x108>)
 800a78c:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800a790:	4935      	ldr	r1, [pc, #212]	@ (800a868 <pbuf_take+0x114>)
 800a792:	4834      	ldr	r0, [pc, #208]	@ (800a864 <pbuf_take+0x110>)
 800a794:	f008 fd62 	bl	801325c <iprintf>
 800a798:	f06f 030f 	mvn.w	r3, #15
 800a79c:	e05a      	b.n	800a854 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	891b      	ldrh	r3, [r3, #8]
 800a7a2:	88fa      	ldrh	r2, [r7, #6]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d909      	bls.n	800a7bc <pbuf_take+0x68>
 800a7a8:	4b2c      	ldr	r3, [pc, #176]	@ (800a85c <pbuf_take+0x108>)
 800a7aa:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800a7ae:	492f      	ldr	r1, [pc, #188]	@ (800a86c <pbuf_take+0x118>)
 800a7b0:	482c      	ldr	r0, [pc, #176]	@ (800a864 <pbuf_take+0x110>)
 800a7b2:	f008 fd53 	bl	801325c <iprintf>
 800a7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ba:	e04b      	b.n	800a854 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d007      	beq.n	800a7d2 <pbuf_take+0x7e>
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d004      	beq.n	800a7d2 <pbuf_take+0x7e>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	891b      	ldrh	r3, [r3, #8]
 800a7cc:	88fa      	ldrh	r2, [r7, #6]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d902      	bls.n	800a7d8 <pbuf_take+0x84>
    return ERR_ARG;
 800a7d2:	f06f 030f 	mvn.w	r3, #15
 800a7d6:	e03d      	b.n	800a854 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	61fb      	str	r3, [r7, #28]
 800a7dc:	e028      	b.n	800a830 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d106      	bne.n	800a7f2 <pbuf_take+0x9e>
 800a7e4:	4b1d      	ldr	r3, [pc, #116]	@ (800a85c <pbuf_take+0x108>)
 800a7e6:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800a7ea:	4921      	ldr	r1, [pc, #132]	@ (800a870 <pbuf_take+0x11c>)
 800a7ec:	481d      	ldr	r0, [pc, #116]	@ (800a864 <pbuf_take+0x110>)
 800a7ee:	f008 fd35 	bl	801325c <iprintf>
    buf_copy_len = total_copy_len;
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	895b      	ldrh	r3, [r3, #10]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d902      	bls.n	800a808 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	895b      	ldrh	r3, [r3, #10]
 800a806:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	6858      	ldr	r0, [r3, #4]
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	4413      	add	r3, r2
 800a812:	69ba      	ldr	r2, [r7, #24]
 800a814:	4619      	mov	r1, r3
 800a816:	f008 fe60 	bl	80134da <memcpy>
    total_copy_len -= buf_copy_len;
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	4413      	add	r3, r2
 800a828:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	61fb      	str	r3, [r7, #28]
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1d3      	bne.n	800a7de <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d103      	bne.n	800a844 <pbuf_take+0xf0>
 800a83c:	88fb      	ldrh	r3, [r7, #6]
 800a83e:	693a      	ldr	r2, [r7, #16]
 800a840:	429a      	cmp	r2, r3
 800a842:	d006      	beq.n	800a852 <pbuf_take+0xfe>
 800a844:	4b05      	ldr	r3, [pc, #20]	@ (800a85c <pbuf_take+0x108>)
 800a846:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800a84a:	490a      	ldr	r1, [pc, #40]	@ (800a874 <pbuf_take+0x120>)
 800a84c:	4805      	ldr	r0, [pc, #20]	@ (800a864 <pbuf_take+0x110>)
 800a84e:	f008 fd05 	bl	801325c <iprintf>
  return ERR_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3720      	adds	r7, #32
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	08014ce8 	.word	0x08014ce8
 800a860:	080150c0 	.word	0x080150c0
 800a864:	08014d48 	.word	0x08014d48
 800a868:	080150d8 	.word	0x080150d8
 800a86c:	080150f4 	.word	0x080150f4
 800a870:	08015114 	.word	0x08015114
 800a874:	0801512c 	.word	0x0801512c

0800a878 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	603a      	str	r2, [r7, #0]
 800a882:	71fb      	strb	r3, [r7, #7]
 800a884:	460b      	mov	r3, r1
 800a886:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	8919      	ldrh	r1, [r3, #8]
 800a88c:	88ba      	ldrh	r2, [r7, #4]
 800a88e:	79fb      	ldrb	r3, [r7, #7]
 800a890:	4618      	mov	r0, r3
 800a892:	f7ff fa0f 	bl	8009cb4 <pbuf_alloc>
 800a896:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d101      	bne.n	800a8a2 <pbuf_clone+0x2a>
    return NULL;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e011      	b.n	800a8c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a8a2:	6839      	ldr	r1, [r7, #0]
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f7ff fe11 	bl	800a4cc <pbuf_copy>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a8ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d006      	beq.n	800a8c4 <pbuf_clone+0x4c>
 800a8b6:	4b06      	ldr	r3, [pc, #24]	@ (800a8d0 <pbuf_clone+0x58>)
 800a8b8:	f240 5224 	movw	r2, #1316	@ 0x524
 800a8bc:	4905      	ldr	r1, [pc, #20]	@ (800a8d4 <pbuf_clone+0x5c>)
 800a8be:	4806      	ldr	r0, [pc, #24]	@ (800a8d8 <pbuf_clone+0x60>)
 800a8c0:	f008 fccc 	bl	801325c <iprintf>
  return q;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	08014ce8 	.word	0x08014ce8
 800a8d4:	0801515c 	.word	0x0801515c
 800a8d8:	08014d48 	.word	0x08014d48

0800a8dc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a8e0:	f008 fb38 	bl	8012f54 <rand>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	4b01      	ldr	r3, [pc, #4]	@ (800a8fc <tcp_init+0x20>)
 800a8f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a8f8:	bf00      	nop
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20000094 	.word	0x20000094

0800a900 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	7d1b      	ldrb	r3, [r3, #20]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d105      	bne.n	800a91c <tcp_free+0x1c>
 800a910:	4b06      	ldr	r3, [pc, #24]	@ (800a92c <tcp_free+0x2c>)
 800a912:	22d4      	movs	r2, #212	@ 0xd4
 800a914:	4906      	ldr	r1, [pc, #24]	@ (800a930 <tcp_free+0x30>)
 800a916:	4807      	ldr	r0, [pc, #28]	@ (800a934 <tcp_free+0x34>)
 800a918:	f008 fca0 	bl	801325c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a91c:	6879      	ldr	r1, [r7, #4]
 800a91e:	2001      	movs	r0, #1
 800a920:	f7fe fe36 	bl	8009590 <memp_free>
}
 800a924:	bf00      	nop
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	080151e8 	.word	0x080151e8
 800a930:	08015218 	.word	0x08015218
 800a934:	0801522c 	.word	0x0801522c

0800a938 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	7d1b      	ldrb	r3, [r3, #20]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d105      	bne.n	800a954 <tcp_free_listen+0x1c>
 800a948:	4b06      	ldr	r3, [pc, #24]	@ (800a964 <tcp_free_listen+0x2c>)
 800a94a:	22df      	movs	r2, #223	@ 0xdf
 800a94c:	4906      	ldr	r1, [pc, #24]	@ (800a968 <tcp_free_listen+0x30>)
 800a94e:	4807      	ldr	r0, [pc, #28]	@ (800a96c <tcp_free_listen+0x34>)
 800a950:	f008 fc84 	bl	801325c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a954:	6879      	ldr	r1, [r7, #4]
 800a956:	2002      	movs	r0, #2
 800a958:	f7fe fe1a 	bl	8009590 <memp_free>
}
 800a95c:	bf00      	nop
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	080151e8 	.word	0x080151e8
 800a968:	08015254 	.word	0x08015254
 800a96c:	0801522c 	.word	0x0801522c

0800a970 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a974:	f000 fea4 	bl	800b6c0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a978:	4b07      	ldr	r3, [pc, #28]	@ (800a998 <tcp_tmr+0x28>)
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	3301      	adds	r3, #1
 800a97e:	b2da      	uxtb	r2, r3
 800a980:	4b05      	ldr	r3, [pc, #20]	@ (800a998 <tcp_tmr+0x28>)
 800a982:	701a      	strb	r2, [r3, #0]
 800a984:	4b04      	ldr	r3, [pc, #16]	@ (800a998 <tcp_tmr+0x28>)
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a990:	f000 fb54 	bl	800b03c <tcp_slowtmr>
  }
}
 800a994:	bf00      	nop
 800a996:	bd80      	pop	{r7, pc}
 800a998:	200089d9 	.word	0x200089d9

0800a99c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d105      	bne.n	800a9b8 <tcp_remove_listener+0x1c>
 800a9ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e4 <tcp_remove_listener+0x48>)
 800a9ae:	22ff      	movs	r2, #255	@ 0xff
 800a9b0:	490d      	ldr	r1, [pc, #52]	@ (800a9e8 <tcp_remove_listener+0x4c>)
 800a9b2:	480e      	ldr	r0, [pc, #56]	@ (800a9ec <tcp_remove_listener+0x50>)
 800a9b4:	f008 fc52 	bl	801325c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	60fb      	str	r3, [r7, #12]
 800a9bc:	e00a      	b.n	800a9d4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d102      	bne.n	800a9ce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	60fb      	str	r3, [r7, #12]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1f1      	bne.n	800a9be <tcp_remove_listener+0x22>
    }
  }
}
 800a9da:	bf00      	nop
 800a9dc:	bf00      	nop
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	080151e8 	.word	0x080151e8
 800a9e8:	08015270 	.word	0x08015270
 800a9ec:	0801522c 	.word	0x0801522c

0800a9f0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d106      	bne.n	800aa0c <tcp_listen_closed+0x1c>
 800a9fe:	4b14      	ldr	r3, [pc, #80]	@ (800aa50 <tcp_listen_closed+0x60>)
 800aa00:	f240 1211 	movw	r2, #273	@ 0x111
 800aa04:	4913      	ldr	r1, [pc, #76]	@ (800aa54 <tcp_listen_closed+0x64>)
 800aa06:	4814      	ldr	r0, [pc, #80]	@ (800aa58 <tcp_listen_closed+0x68>)
 800aa08:	f008 fc28 	bl	801325c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	7d1b      	ldrb	r3, [r3, #20]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d006      	beq.n	800aa22 <tcp_listen_closed+0x32>
 800aa14:	4b0e      	ldr	r3, [pc, #56]	@ (800aa50 <tcp_listen_closed+0x60>)
 800aa16:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800aa1a:	4910      	ldr	r1, [pc, #64]	@ (800aa5c <tcp_listen_closed+0x6c>)
 800aa1c:	480e      	ldr	r0, [pc, #56]	@ (800aa58 <tcp_listen_closed+0x68>)
 800aa1e:	f008 fc1d 	bl	801325c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aa22:	2301      	movs	r3, #1
 800aa24:	60fb      	str	r3, [r7, #12]
 800aa26:	e00b      	b.n	800aa40 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800aa28:	4a0d      	ldr	r2, [pc, #52]	@ (800aa60 <tcp_listen_closed+0x70>)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7ff ffb1 	bl	800a99c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	60fb      	str	r3, [r7, #12]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	d9f0      	bls.n	800aa28 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800aa46:	bf00      	nop
 800aa48:	bf00      	nop
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	080151e8 	.word	0x080151e8
 800aa54:	08015298 	.word	0x08015298
 800aa58:	0801522c 	.word	0x0801522c
 800aa5c:	080152a4 	.word	0x080152a4
 800aa60:	080171c8 	.word	0x080171c8

0800aa64 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800aa64:	b5b0      	push	{r4, r5, r7, lr}
 800aa66:	b088      	sub	sp, #32
 800aa68:	af04      	add	r7, sp, #16
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d106      	bne.n	800aa84 <tcp_close_shutdown+0x20>
 800aa76:	4b63      	ldr	r3, [pc, #396]	@ (800ac04 <tcp_close_shutdown+0x1a0>)
 800aa78:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800aa7c:	4962      	ldr	r1, [pc, #392]	@ (800ac08 <tcp_close_shutdown+0x1a4>)
 800aa7e:	4863      	ldr	r0, [pc, #396]	@ (800ac0c <tcp_close_shutdown+0x1a8>)
 800aa80:	f008 fbec 	bl	801325c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800aa84:	78fb      	ldrb	r3, [r7, #3]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d066      	beq.n	800ab58 <tcp_close_shutdown+0xf4>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	7d1b      	ldrb	r3, [r3, #20]
 800aa8e:	2b04      	cmp	r3, #4
 800aa90:	d003      	beq.n	800aa9a <tcp_close_shutdown+0x36>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	7d1b      	ldrb	r3, [r3, #20]
 800aa96:	2b07      	cmp	r3, #7
 800aa98:	d15e      	bne.n	800ab58 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d104      	bne.n	800aaac <tcp_close_shutdown+0x48>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaa6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800aaaa:	d055      	beq.n	800ab58 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	8b5b      	ldrh	r3, [r3, #26]
 800aab0:	f003 0310 	and.w	r3, r3, #16
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d106      	bne.n	800aac6 <tcp_close_shutdown+0x62>
 800aab8:	4b52      	ldr	r3, [pc, #328]	@ (800ac04 <tcp_close_shutdown+0x1a0>)
 800aaba:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800aabe:	4954      	ldr	r1, [pc, #336]	@ (800ac10 <tcp_close_shutdown+0x1ac>)
 800aac0:	4852      	ldr	r0, [pc, #328]	@ (800ac0c <tcp_close_shutdown+0x1a8>)
 800aac2:	f008 fbcb 	bl	801325c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800aace:	687d      	ldr	r5, [r7, #4]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	3304      	adds	r3, #4
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	8ad2      	ldrh	r2, [r2, #22]
 800aad8:	6879      	ldr	r1, [r7, #4]
 800aada:	8b09      	ldrh	r1, [r1, #24]
 800aadc:	9102      	str	r1, [sp, #8]
 800aade:	9201      	str	r2, [sp, #4]
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	462b      	mov	r3, r5
 800aae4:	4622      	mov	r2, r4
 800aae6:	4601      	mov	r1, r0
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f004 fe8d 	bl	800f808 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f001 f8c8 	bl	800bc84 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800aaf4:	4b47      	ldr	r3, [pc, #284]	@ (800ac14 <tcp_close_shutdown+0x1b0>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d105      	bne.n	800ab0a <tcp_close_shutdown+0xa6>
 800aafe:	4b45      	ldr	r3, [pc, #276]	@ (800ac14 <tcp_close_shutdown+0x1b0>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	4a43      	ldr	r2, [pc, #268]	@ (800ac14 <tcp_close_shutdown+0x1b0>)
 800ab06:	6013      	str	r3, [r2, #0]
 800ab08:	e013      	b.n	800ab32 <tcp_close_shutdown+0xce>
 800ab0a:	4b42      	ldr	r3, [pc, #264]	@ (800ac14 <tcp_close_shutdown+0x1b0>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	60fb      	str	r3, [r7, #12]
 800ab10:	e00c      	b.n	800ab2c <tcp_close_shutdown+0xc8>
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d104      	bne.n	800ab26 <tcp_close_shutdown+0xc2>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	68da      	ldr	r2, [r3, #12]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	60da      	str	r2, [r3, #12]
 800ab24:	e005      	b.n	800ab32 <tcp_close_shutdown+0xce>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	60fb      	str	r3, [r7, #12]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1ef      	bne.n	800ab12 <tcp_close_shutdown+0xae>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	60da      	str	r2, [r3, #12]
 800ab38:	4b37      	ldr	r3, [pc, #220]	@ (800ac18 <tcp_close_shutdown+0x1b4>)
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ab3e:	4b37      	ldr	r3, [pc, #220]	@ (800ac1c <tcp_close_shutdown+0x1b8>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d102      	bne.n	800ab4e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ab48:	f003 fd5c 	bl	800e604 <tcp_trigger_input_pcb_close>
 800ab4c:	e002      	b.n	800ab54 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f7ff fed6 	bl	800a900 <tcp_free>
      }
      return ERR_OK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	e050      	b.n	800abfa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	7d1b      	ldrb	r3, [r3, #20]
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d03b      	beq.n	800abd8 <tcp_close_shutdown+0x174>
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	dc44      	bgt.n	800abee <tcp_close_shutdown+0x18a>
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d002      	beq.n	800ab6e <tcp_close_shutdown+0x10a>
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d02a      	beq.n	800abc2 <tcp_close_shutdown+0x15e>
 800ab6c:	e03f      	b.n	800abee <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	8adb      	ldrh	r3, [r3, #22]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d021      	beq.n	800abba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ab76:	4b2a      	ldr	r3, [pc, #168]	@ (800ac20 <tcp_close_shutdown+0x1bc>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d105      	bne.n	800ab8c <tcp_close_shutdown+0x128>
 800ab80:	4b27      	ldr	r3, [pc, #156]	@ (800ac20 <tcp_close_shutdown+0x1bc>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	4a26      	ldr	r2, [pc, #152]	@ (800ac20 <tcp_close_shutdown+0x1bc>)
 800ab88:	6013      	str	r3, [r2, #0]
 800ab8a:	e013      	b.n	800abb4 <tcp_close_shutdown+0x150>
 800ab8c:	4b24      	ldr	r3, [pc, #144]	@ (800ac20 <tcp_close_shutdown+0x1bc>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	60bb      	str	r3, [r7, #8]
 800ab92:	e00c      	b.n	800abae <tcp_close_shutdown+0x14a>
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d104      	bne.n	800aba8 <tcp_close_shutdown+0x144>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68da      	ldr	r2, [r3, #12]
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	60da      	str	r2, [r3, #12]
 800aba6:	e005      	b.n	800abb4 <tcp_close_shutdown+0x150>
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	60bb      	str	r3, [r7, #8]
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1ef      	bne.n	800ab94 <tcp_close_shutdown+0x130>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7ff fea0 	bl	800a900 <tcp_free>
      break;
 800abc0:	e01a      	b.n	800abf8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7ff ff14 	bl	800a9f0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800abc8:	6879      	ldr	r1, [r7, #4]
 800abca:	4816      	ldr	r0, [pc, #88]	@ (800ac24 <tcp_close_shutdown+0x1c0>)
 800abcc:	f001 f8aa 	bl	800bd24 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7ff feb1 	bl	800a938 <tcp_free_listen>
      break;
 800abd6:	e00f      	b.n	800abf8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800abd8:	6879      	ldr	r1, [r7, #4]
 800abda:	480e      	ldr	r0, [pc, #56]	@ (800ac14 <tcp_close_shutdown+0x1b0>)
 800abdc:	f001 f8a2 	bl	800bd24 <tcp_pcb_remove>
 800abe0:	4b0d      	ldr	r3, [pc, #52]	@ (800ac18 <tcp_close_shutdown+0x1b4>)
 800abe2:	2201      	movs	r2, #1
 800abe4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f7ff fe8a 	bl	800a900 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800abec:	e004      	b.n	800abf8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 f81a 	bl	800ac28 <tcp_close_shutdown_fin>
 800abf4:	4603      	mov	r3, r0
 800abf6:	e000      	b.n	800abfa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bdb0      	pop	{r4, r5, r7, pc}
 800ac02:	bf00      	nop
 800ac04:	080151e8 	.word	0x080151e8
 800ac08:	080152bc 	.word	0x080152bc
 800ac0c:	0801522c 	.word	0x0801522c
 800ac10:	080152dc 	.word	0x080152dc
 800ac14:	200089d0 	.word	0x200089d0
 800ac18:	200089d8 	.word	0x200089d8
 800ac1c:	20008a10 	.word	0x20008a10
 800ac20:	200089c8 	.word	0x200089c8
 800ac24:	200089cc 	.word	0x200089cc

0800ac28 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d106      	bne.n	800ac44 <tcp_close_shutdown_fin+0x1c>
 800ac36:	4b2e      	ldr	r3, [pc, #184]	@ (800acf0 <tcp_close_shutdown_fin+0xc8>)
 800ac38:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800ac3c:	492d      	ldr	r1, [pc, #180]	@ (800acf4 <tcp_close_shutdown_fin+0xcc>)
 800ac3e:	482e      	ldr	r0, [pc, #184]	@ (800acf8 <tcp_close_shutdown_fin+0xd0>)
 800ac40:	f008 fb0c 	bl	801325c <iprintf>

  switch (pcb->state) {
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	7d1b      	ldrb	r3, [r3, #20]
 800ac48:	2b07      	cmp	r3, #7
 800ac4a:	d020      	beq.n	800ac8e <tcp_close_shutdown_fin+0x66>
 800ac4c:	2b07      	cmp	r3, #7
 800ac4e:	dc2b      	bgt.n	800aca8 <tcp_close_shutdown_fin+0x80>
 800ac50:	2b03      	cmp	r3, #3
 800ac52:	d002      	beq.n	800ac5a <tcp_close_shutdown_fin+0x32>
 800ac54:	2b04      	cmp	r3, #4
 800ac56:	d00d      	beq.n	800ac74 <tcp_close_shutdown_fin+0x4c>
 800ac58:	e026      	b.n	800aca8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f003 fee2 	bl	800ea24 <tcp_send_fin>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ac64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d11f      	bne.n	800acac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2205      	movs	r2, #5
 800ac70:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ac72:	e01b      	b.n	800acac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f003 fed5 	bl	800ea24 <tcp_send_fin>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ac7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d114      	bne.n	800acb0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2205      	movs	r2, #5
 800ac8a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ac8c:	e010      	b.n	800acb0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f003 fec8 	bl	800ea24 <tcp_send_fin>
 800ac94:	4603      	mov	r3, r0
 800ac96:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ac98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d109      	bne.n	800acb4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2209      	movs	r2, #9
 800aca4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800aca6:	e005      	b.n	800acb4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800aca8:	2300      	movs	r3, #0
 800acaa:	e01c      	b.n	800ace6 <tcp_close_shutdown_fin+0xbe>
      break;
 800acac:	bf00      	nop
 800acae:	e002      	b.n	800acb6 <tcp_close_shutdown_fin+0x8e>
      break;
 800acb0:	bf00      	nop
 800acb2:	e000      	b.n	800acb6 <tcp_close_shutdown_fin+0x8e>
      break;
 800acb4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800acb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d103      	bne.n	800acc6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f003 ffee 	bl	800eca0 <tcp_output>
 800acc4:	e00d      	b.n	800ace2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800acc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acce:	d108      	bne.n	800ace2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	8b5b      	ldrh	r3, [r3, #26]
 800acd4:	f043 0308 	orr.w	r3, r3, #8
 800acd8:	b29a      	uxth	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800acde:	2300      	movs	r3, #0
 800ace0:	e001      	b.n	800ace6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ace2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	080151e8 	.word	0x080151e8
 800acf4:	08015298 	.word	0x08015298
 800acf8:	0801522c 	.word	0x0801522c

0800acfc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d109      	bne.n	800ad1e <tcp_close+0x22>
 800ad0a:	4b0f      	ldr	r3, [pc, #60]	@ (800ad48 <tcp_close+0x4c>)
 800ad0c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ad10:	490e      	ldr	r1, [pc, #56]	@ (800ad4c <tcp_close+0x50>)
 800ad12:	480f      	ldr	r0, [pc, #60]	@ (800ad50 <tcp_close+0x54>)
 800ad14:	f008 faa2 	bl	801325c <iprintf>
 800ad18:	f06f 030f 	mvn.w	r3, #15
 800ad1c:	e00f      	b.n	800ad3e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	7d1b      	ldrb	r3, [r3, #20]
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d006      	beq.n	800ad34 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	8b5b      	ldrh	r3, [r3, #26]
 800ad2a:	f043 0310 	orr.w	r3, r3, #16
 800ad2e:	b29a      	uxth	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ad34:	2101      	movs	r1, #1
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7ff fe94 	bl	800aa64 <tcp_close_shutdown>
 800ad3c:	4603      	mov	r3, r0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	080151e8 	.word	0x080151e8
 800ad4c:	080152f8 	.word	0x080152f8
 800ad50:	0801522c 	.word	0x0801522c

0800ad54 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08e      	sub	sp, #56	@ 0x38
 800ad58:	af04      	add	r7, sp, #16
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d107      	bne.n	800ad74 <tcp_abandon+0x20>
 800ad64:	4b52      	ldr	r3, [pc, #328]	@ (800aeb0 <tcp_abandon+0x15c>)
 800ad66:	f240 223d 	movw	r2, #573	@ 0x23d
 800ad6a:	4952      	ldr	r1, [pc, #328]	@ (800aeb4 <tcp_abandon+0x160>)
 800ad6c:	4852      	ldr	r0, [pc, #328]	@ (800aeb8 <tcp_abandon+0x164>)
 800ad6e:	f008 fa75 	bl	801325c <iprintf>
 800ad72:	e099      	b.n	800aea8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	7d1b      	ldrb	r3, [r3, #20]
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d106      	bne.n	800ad8a <tcp_abandon+0x36>
 800ad7c:	4b4c      	ldr	r3, [pc, #304]	@ (800aeb0 <tcp_abandon+0x15c>)
 800ad7e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800ad82:	494e      	ldr	r1, [pc, #312]	@ (800aebc <tcp_abandon+0x168>)
 800ad84:	484c      	ldr	r0, [pc, #304]	@ (800aeb8 <tcp_abandon+0x164>)
 800ad86:	f008 fa69 	bl	801325c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	7d1b      	ldrb	r3, [r3, #20]
 800ad8e:	2b0a      	cmp	r3, #10
 800ad90:	d107      	bne.n	800ada2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ad92:	6879      	ldr	r1, [r7, #4]
 800ad94:	484a      	ldr	r0, [pc, #296]	@ (800aec0 <tcp_abandon+0x16c>)
 800ad96:	f000 ffc5 	bl	800bd24 <tcp_pcb_remove>
    tcp_free(pcb);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7ff fdb0 	bl	800a900 <tcp_free>
 800ada0:	e082      	b.n	800aea8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adbc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	7d1b      	ldrb	r3, [r3, #20]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d126      	bne.n	800ae1a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	8adb      	ldrh	r3, [r3, #22]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d02e      	beq.n	800ae32 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800add4:	4b3b      	ldr	r3, [pc, #236]	@ (800aec4 <tcp_abandon+0x170>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	429a      	cmp	r2, r3
 800addc:	d105      	bne.n	800adea <tcp_abandon+0x96>
 800adde:	4b39      	ldr	r3, [pc, #228]	@ (800aec4 <tcp_abandon+0x170>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	4a37      	ldr	r2, [pc, #220]	@ (800aec4 <tcp_abandon+0x170>)
 800ade6:	6013      	str	r3, [r2, #0]
 800ade8:	e013      	b.n	800ae12 <tcp_abandon+0xbe>
 800adea:	4b36      	ldr	r3, [pc, #216]	@ (800aec4 <tcp_abandon+0x170>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	61fb      	str	r3, [r7, #28]
 800adf0:	e00c      	b.n	800ae0c <tcp_abandon+0xb8>
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d104      	bne.n	800ae06 <tcp_abandon+0xb2>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68da      	ldr	r2, [r3, #12]
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	60da      	str	r2, [r3, #12]
 800ae04:	e005      	b.n	800ae12 <tcp_abandon+0xbe>
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	61fb      	str	r3, [r7, #28]
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1ef      	bne.n	800adf2 <tcp_abandon+0x9e>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	60da      	str	r2, [r3, #12]
 800ae18:	e00b      	b.n	800ae32 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	8adb      	ldrh	r3, [r3, #22]
 800ae22:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ae24:	6879      	ldr	r1, [r7, #4]
 800ae26:	4828      	ldr	r0, [pc, #160]	@ (800aec8 <tcp_abandon+0x174>)
 800ae28:	f000 ff7c 	bl	800bd24 <tcp_pcb_remove>
 800ae2c:	4b27      	ldr	r3, [pc, #156]	@ (800aecc <tcp_abandon+0x178>)
 800ae2e:	2201      	movs	r2, #1
 800ae30:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d004      	beq.n	800ae44 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 fd1e 	bl	800b880 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d004      	beq.n	800ae56 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae50:	4618      	mov	r0, r3
 800ae52:	f000 fd15 	bl	800b880 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d004      	beq.n	800ae68 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 fd0c 	bl	800b880 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ae68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00e      	beq.n	800ae8c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ae6e:	6879      	ldr	r1, [r7, #4]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3304      	adds	r3, #4
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	8b12      	ldrh	r2, [r2, #24]
 800ae78:	9202      	str	r2, [sp, #8]
 800ae7a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ae7c:	9201      	str	r2, [sp, #4]
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	460b      	mov	r3, r1
 800ae82:	697a      	ldr	r2, [r7, #20]
 800ae84:	69b9      	ldr	r1, [r7, #24]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f004 fcbe 	bl	800f808 <tcp_rst>
    }
    last_state = pcb->state;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	7d1b      	ldrb	r3, [r3, #20]
 800ae90:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff fd34 	bl	800a900 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d004      	beq.n	800aea8 <tcp_abandon+0x154>
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	f06f 010c 	mvn.w	r1, #12
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	4798      	blx	r3
  }
}
 800aea8:	3728      	adds	r7, #40	@ 0x28
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	080151e8 	.word	0x080151e8
 800aeb4:	0801532c 	.word	0x0801532c
 800aeb8:	0801522c 	.word	0x0801522c
 800aebc:	08015348 	.word	0x08015348
 800aec0:	200089d4 	.word	0x200089d4
 800aec4:	200089c8 	.word	0x200089c8
 800aec8:	200089d0 	.word	0x200089d0
 800aecc:	200089d8 	.word	0x200089d8

0800aed0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800aed8:	2101      	movs	r1, #1
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f7ff ff3a 	bl	800ad54 <tcp_abandon>
}
 800aee0:	bf00      	nop
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d106      	bne.n	800af04 <tcp_update_rcv_ann_wnd+0x1c>
 800aef6:	4b25      	ldr	r3, [pc, #148]	@ (800af8c <tcp_update_rcv_ann_wnd+0xa4>)
 800aef8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800aefc:	4924      	ldr	r1, [pc, #144]	@ (800af90 <tcp_update_rcv_ann_wnd+0xa8>)
 800aefe:	4825      	ldr	r0, [pc, #148]	@ (800af94 <tcp_update_rcv_ann_wnd+0xac>)
 800af00:	f008 f9ac 	bl	801325c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800af0c:	4413      	add	r3, r2
 800af0e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800af18:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800af1c:	bf28      	it	cs
 800af1e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800af22:	b292      	uxth	r2, r2
 800af24:	4413      	add	r3, r2
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	db08      	blt.n	800af40 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	e020      	b.n	800af82 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af48:	1ad3      	subs	r3, r2, r3
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dd03      	ble.n	800af56 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800af54:	e014      	b.n	800af80 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af68:	d306      	bcc.n	800af78 <tcp_update_rcv_ann_wnd+0x90>
 800af6a:	4b08      	ldr	r3, [pc, #32]	@ (800af8c <tcp_update_rcv_ann_wnd+0xa4>)
 800af6c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800af70:	4909      	ldr	r1, [pc, #36]	@ (800af98 <tcp_update_rcv_ann_wnd+0xb0>)
 800af72:	4808      	ldr	r0, [pc, #32]	@ (800af94 <tcp_update_rcv_ann_wnd+0xac>)
 800af74:	f008 f972 	bl	801325c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800af80:	2300      	movs	r3, #0
  }
}
 800af82:	4618      	mov	r0, r3
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	080151e8 	.word	0x080151e8
 800af90:	08015444 	.word	0x08015444
 800af94:	0801522c 	.word	0x0801522c
 800af98:	08015468 	.word	0x08015468

0800af9c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	460b      	mov	r3, r1
 800afa6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d107      	bne.n	800afbe <tcp_recved+0x22>
 800afae:	4b1f      	ldr	r3, [pc, #124]	@ (800b02c <tcp_recved+0x90>)
 800afb0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800afb4:	491e      	ldr	r1, [pc, #120]	@ (800b030 <tcp_recved+0x94>)
 800afb6:	481f      	ldr	r0, [pc, #124]	@ (800b034 <tcp_recved+0x98>)
 800afb8:	f008 f950 	bl	801325c <iprintf>
 800afbc:	e032      	b.n	800b024 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	7d1b      	ldrb	r3, [r3, #20]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d106      	bne.n	800afd4 <tcp_recved+0x38>
 800afc6:	4b19      	ldr	r3, [pc, #100]	@ (800b02c <tcp_recved+0x90>)
 800afc8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800afcc:	491a      	ldr	r1, [pc, #104]	@ (800b038 <tcp_recved+0x9c>)
 800afce:	4819      	ldr	r0, [pc, #100]	@ (800b034 <tcp_recved+0x98>)
 800afd0:	f008 f944 	bl	801325c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800afd8:	887b      	ldrh	r3, [r7, #2]
 800afda:	4413      	add	r3, r2
 800afdc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800afde:	89fb      	ldrh	r3, [r7, #14]
 800afe0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800afe4:	d804      	bhi.n	800aff0 <tcp_recved+0x54>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afea:	89fa      	ldrh	r2, [r7, #14]
 800afec:	429a      	cmp	r2, r3
 800afee:	d204      	bcs.n	800affa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800aff6:	851a      	strh	r2, [r3, #40]	@ 0x28
 800aff8:	e002      	b.n	800b000 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	89fa      	ldrh	r2, [r7, #14]
 800affe:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7ff ff71 	bl	800aee8 <tcp_update_rcv_ann_wnd>
 800b006:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800b00e:	d309      	bcc.n	800b024 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	8b5b      	ldrh	r3, [r3, #26]
 800b014:	f043 0302 	orr.w	r3, r3, #2
 800b018:	b29a      	uxth	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f003 fe3e 	bl	800eca0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	080151e8 	.word	0x080151e8
 800b030:	08015484 	.word	0x08015484
 800b034:	0801522c 	.word	0x0801522c
 800b038:	0801549c 	.word	0x0801549c

0800b03c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b03c:	b5b0      	push	{r4, r5, r7, lr}
 800b03e:	b090      	sub	sp, #64	@ 0x40
 800b040:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b042:	2300      	movs	r3, #0
 800b044:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800b048:	4b95      	ldr	r3, [pc, #596]	@ (800b2a0 <tcp_slowtmr+0x264>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	3301      	adds	r3, #1
 800b04e:	4a94      	ldr	r2, [pc, #592]	@ (800b2a0 <tcp_slowtmr+0x264>)
 800b050:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b052:	4b94      	ldr	r3, [pc, #592]	@ (800b2a4 <tcp_slowtmr+0x268>)
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	3301      	adds	r3, #1
 800b058:	b2da      	uxtb	r2, r3
 800b05a:	4b92      	ldr	r3, [pc, #584]	@ (800b2a4 <tcp_slowtmr+0x268>)
 800b05c:	701a      	strb	r2, [r3, #0]
 800b05e:	e000      	b.n	800b062 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800b060:	bf00      	nop
  prev = NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800b066:	4b90      	ldr	r3, [pc, #576]	@ (800b2a8 <tcp_slowtmr+0x26c>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b06c:	e29f      	b.n	800b5ae <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b070:	7d1b      	ldrb	r3, [r3, #20]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d106      	bne.n	800b084 <tcp_slowtmr+0x48>
 800b076:	4b8d      	ldr	r3, [pc, #564]	@ (800b2ac <tcp_slowtmr+0x270>)
 800b078:	f240 42be 	movw	r2, #1214	@ 0x4be
 800b07c:	498c      	ldr	r1, [pc, #560]	@ (800b2b0 <tcp_slowtmr+0x274>)
 800b07e:	488d      	ldr	r0, [pc, #564]	@ (800b2b4 <tcp_slowtmr+0x278>)
 800b080:	f008 f8ec 	bl	801325c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b086:	7d1b      	ldrb	r3, [r3, #20]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d106      	bne.n	800b09a <tcp_slowtmr+0x5e>
 800b08c:	4b87      	ldr	r3, [pc, #540]	@ (800b2ac <tcp_slowtmr+0x270>)
 800b08e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800b092:	4989      	ldr	r1, [pc, #548]	@ (800b2b8 <tcp_slowtmr+0x27c>)
 800b094:	4887      	ldr	r0, [pc, #540]	@ (800b2b4 <tcp_slowtmr+0x278>)
 800b096:	f008 f8e1 	bl	801325c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b09c:	7d1b      	ldrb	r3, [r3, #20]
 800b09e:	2b0a      	cmp	r3, #10
 800b0a0:	d106      	bne.n	800b0b0 <tcp_slowtmr+0x74>
 800b0a2:	4b82      	ldr	r3, [pc, #520]	@ (800b2ac <tcp_slowtmr+0x270>)
 800b0a4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800b0a8:	4984      	ldr	r1, [pc, #528]	@ (800b2bc <tcp_slowtmr+0x280>)
 800b0aa:	4882      	ldr	r0, [pc, #520]	@ (800b2b4 <tcp_slowtmr+0x278>)
 800b0ac:	f008 f8d6 	bl	801325c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b2:	7f9a      	ldrb	r2, [r3, #30]
 800b0b4:	4b7b      	ldr	r3, [pc, #492]	@ (800b2a4 <tcp_slowtmr+0x268>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d105      	bne.n	800b0c8 <tcp_slowtmr+0x8c>
      prev = pcb;
 800b0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0be:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800b0c6:	e272      	b.n	800b5ae <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800b0c8:	4b76      	ldr	r3, [pc, #472]	@ (800b2a4 <tcp_slowtmr+0x268>)
 800b0ca:	781a      	ldrb	r2, [r3, #0]
 800b0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ce:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0de:	7d1b      	ldrb	r3, [r3, #20]
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	d10a      	bne.n	800b0fa <tcp_slowtmr+0xbe>
 800b0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b0ea:	2b05      	cmp	r3, #5
 800b0ec:	d905      	bls.n	800b0fa <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800b0ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b0f8:	e11e      	b.n	800b338 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b100:	2b0b      	cmp	r3, #11
 800b102:	d905      	bls.n	800b110 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800b104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b108:	3301      	adds	r3, #1
 800b10a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b10e:	e113      	b.n	800b338 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800b110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b112:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b116:	2b00      	cmp	r3, #0
 800b118:	d075      	beq.n	800b206 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b11c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d006      	beq.n	800b130 <tcp_slowtmr+0xf4>
 800b122:	4b62      	ldr	r3, [pc, #392]	@ (800b2ac <tcp_slowtmr+0x270>)
 800b124:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800b128:	4965      	ldr	r1, [pc, #404]	@ (800b2c0 <tcp_slowtmr+0x284>)
 800b12a:	4862      	ldr	r0, [pc, #392]	@ (800b2b4 <tcp_slowtmr+0x278>)
 800b12c:	f008 f896 	bl	801325c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b134:	2b00      	cmp	r3, #0
 800b136:	d106      	bne.n	800b146 <tcp_slowtmr+0x10a>
 800b138:	4b5c      	ldr	r3, [pc, #368]	@ (800b2ac <tcp_slowtmr+0x270>)
 800b13a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800b13e:	4961      	ldr	r1, [pc, #388]	@ (800b2c4 <tcp_slowtmr+0x288>)
 800b140:	485c      	ldr	r0, [pc, #368]	@ (800b2b4 <tcp_slowtmr+0x278>)
 800b142:	f008 f88b 	bl	801325c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b148:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800b14c:	2b0b      	cmp	r3, #11
 800b14e:	d905      	bls.n	800b15c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800b150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b154:	3301      	adds	r3, #1
 800b156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b15a:	e0ed      	b.n	800b338 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b162:	3b01      	subs	r3, #1
 800b164:	4a58      	ldr	r2, [pc, #352]	@ (800b2c8 <tcp_slowtmr+0x28c>)
 800b166:	5cd3      	ldrb	r3, [r2, r3]
 800b168:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b16c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b170:	7c7a      	ldrb	r2, [r7, #17]
 800b172:	429a      	cmp	r2, r3
 800b174:	d907      	bls.n	800b186 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800b176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b178:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b17c:	3301      	adds	r3, #1
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b182:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800b186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b188:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b18c:	7c7a      	ldrb	r2, [r7, #17]
 800b18e:	429a      	cmp	r2, r3
 800b190:	f200 80d2 	bhi.w	800b338 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800b194:	2301      	movs	r3, #1
 800b196:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800b198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d108      	bne.n	800b1b4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b1a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b1a4:	f004 fc24 	bl	800f9f0 <tcp_zero_window_probe>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d014      	beq.n	800b1d8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	623b      	str	r3, [r7, #32]
 800b1b2:	e011      	b.n	800b1d8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b1be:	f003 fae9 	bl	800e794 <tcp_split_unsent_seg>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d107      	bne.n	800b1d8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800b1c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b1ca:	f003 fd69 	bl	800eca0 <tcp_output>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f000 80ac 	beq.w	800b338 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800b1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ea:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b1ee:	2b06      	cmp	r3, #6
 800b1f0:	f200 80a2 	bhi.w	800b338 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800b1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b200:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800b204:	e098      	b.n	800b338 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b208:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	db0f      	blt.n	800b230 <tcp_slowtmr+0x1f4>
 800b210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b212:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b216:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d008      	beq.n	800b230 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800b21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b220:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b224:	b29b      	uxth	r3, r3
 800b226:	3301      	adds	r3, #1
 800b228:	b29b      	uxth	r3, r3
 800b22a:	b21a      	sxth	r2, r3
 800b22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800b230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b232:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800b236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b238:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800b23c:	429a      	cmp	r2, r3
 800b23e:	db7b      	blt.n	800b338 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b240:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b242:	f004 f821 	bl	800f288 <tcp_rexmit_rto_prepare>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d007      	beq.n	800b25c <tcp_slowtmr+0x220>
 800b24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b24e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b250:	2b00      	cmp	r3, #0
 800b252:	d171      	bne.n	800b338 <tcp_slowtmr+0x2fc>
 800b254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d06d      	beq.n	800b338 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800b25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b25e:	7d1b      	ldrb	r3, [r3, #20]
 800b260:	2b02      	cmp	r3, #2
 800b262:	d03a      	beq.n	800b2da <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b266:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b26a:	2b0c      	cmp	r3, #12
 800b26c:	bf28      	it	cs
 800b26e:	230c      	movcs	r3, #12
 800b270:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b274:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b278:	10db      	asrs	r3, r3, #3
 800b27a:	b21b      	sxth	r3, r3
 800b27c:	461a      	mov	r2, r3
 800b27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b280:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b284:	4413      	add	r3, r2
 800b286:	7efa      	ldrb	r2, [r7, #27]
 800b288:	4910      	ldr	r1, [pc, #64]	@ (800b2cc <tcp_slowtmr+0x290>)
 800b28a:	5c8a      	ldrb	r2, [r1, r2]
 800b28c:	4093      	lsls	r3, r2
 800b28e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800b296:	4293      	cmp	r3, r2
 800b298:	dc1a      	bgt.n	800b2d0 <tcp_slowtmr+0x294>
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	b21a      	sxth	r2, r3
 800b29e:	e019      	b.n	800b2d4 <tcp_slowtmr+0x298>
 800b2a0:	200089c4 	.word	0x200089c4
 800b2a4:	200089da 	.word	0x200089da
 800b2a8:	200089d0 	.word	0x200089d0
 800b2ac:	080151e8 	.word	0x080151e8
 800b2b0:	0801552c 	.word	0x0801552c
 800b2b4:	0801522c 	.word	0x0801522c
 800b2b8:	08015558 	.word	0x08015558
 800b2bc:	08015584 	.word	0x08015584
 800b2c0:	080155b4 	.word	0x080155b4
 800b2c4:	080155e8 	.word	0x080155e8
 800b2c8:	080171c0 	.word	0x080171c0
 800b2cc:	080171b0 	.word	0x080171b0
 800b2d0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800b2da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2dc:	2200      	movs	r2, #0
 800b2de:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	bf28      	it	cs
 800b2f0:	4613      	movcs	r3, r2
 800b2f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b2f4:	8a7b      	ldrh	r3, [r7, #18]
 800b2f6:	085b      	lsrs	r3, r3, #1
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2fc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b302:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b308:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b30a:	005b      	lsls	r3, r3, #1
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	429a      	cmp	r2, r3
 800b310:	d206      	bcs.n	800b320 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b314:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b316:	005b      	lsls	r3, r3, #1
 800b318:	b29a      	uxth	r2, r3
 800b31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b31c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800b320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b322:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800b324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b326:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800b32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b32c:	2200      	movs	r2, #0
 800b32e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800b332:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b334:	f004 f818 	bl	800f368 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800b338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b33a:	7d1b      	ldrb	r3, [r3, #20]
 800b33c:	2b06      	cmp	r3, #6
 800b33e:	d111      	bne.n	800b364 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800b340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b342:	8b5b      	ldrh	r3, [r3, #26]
 800b344:	f003 0310 	and.w	r3, r3, #16
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00b      	beq.n	800b364 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b34c:	4b9d      	ldr	r3, [pc, #628]	@ (800b5c4 <tcp_slowtmr+0x588>)
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b352:	6a1b      	ldr	r3, [r3, #32]
 800b354:	1ad3      	subs	r3, r2, r3
 800b356:	2b28      	cmp	r3, #40	@ 0x28
 800b358:	d904      	bls.n	800b364 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800b35a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b35e:	3301      	adds	r3, #1
 800b360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b366:	7a5b      	ldrb	r3, [r3, #9]
 800b368:	f003 0308 	and.w	r3, r3, #8
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d04c      	beq.n	800b40a <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800b370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b372:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b374:	2b04      	cmp	r3, #4
 800b376:	d003      	beq.n	800b380 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800b378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b37a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b37c:	2b07      	cmp	r3, #7
 800b37e:	d144      	bne.n	800b40a <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b380:	4b90      	ldr	r3, [pc, #576]	@ (800b5c4 <tcp_slowtmr+0x588>)
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b386:	6a1b      	ldr	r3, [r3, #32]
 800b388:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b38c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b390:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800b394:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800b398:	498b      	ldr	r1, [pc, #556]	@ (800b5c8 <tcp_slowtmr+0x58c>)
 800b39a:	fba1 1303 	umull	r1, r3, r1, r3
 800b39e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d90a      	bls.n	800b3ba <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800b3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800b3ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b3b8:	e027      	b.n	800b40a <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3ba:	4b82      	ldr	r3, [pc, #520]	@ (800b5c4 <tcp_slowtmr+0x588>)
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800b3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3cc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	4b7e      	ldr	r3, [pc, #504]	@ (800b5cc <tcp_slowtmr+0x590>)
 800b3d4:	fb00 f303 	mul.w	r3, r0, r3
 800b3d8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b3da:	497b      	ldr	r1, [pc, #492]	@ (800b5c8 <tcp_slowtmr+0x58c>)
 800b3dc:	fba1 1303 	umull	r1, r3, r1, r3
 800b3e0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d911      	bls.n	800b40a <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800b3e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b3e8:	f004 fac2 	bl	800f970 <tcp_keepalive>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800b3f2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d107      	bne.n	800b40a <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800b3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3fc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800b400:	3301      	adds	r3, #1
 800b402:	b2da      	uxtb	r2, r3
 800b404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b406:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800b40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d011      	beq.n	800b436 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b412:	4b6c      	ldr	r3, [pc, #432]	@ (800b5c4 <tcp_slowtmr+0x588>)
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	1ad2      	subs	r2, r2, r3
 800b41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b41e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800b422:	4619      	mov	r1, r3
 800b424:	460b      	mov	r3, r1
 800b426:	005b      	lsls	r3, r3, #1
 800b428:	440b      	add	r3, r1
 800b42a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d302      	bcc.n	800b436 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800b430:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b432:	f000 fddb 	bl	800bfec <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800b436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b438:	7d1b      	ldrb	r3, [r3, #20]
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	d10b      	bne.n	800b456 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b43e:	4b61      	ldr	r3, [pc, #388]	@ (800b5c4 <tcp_slowtmr+0x588>)
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b444:	6a1b      	ldr	r3, [r3, #32]
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	2b28      	cmp	r3, #40	@ 0x28
 800b44a:	d904      	bls.n	800b456 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800b44c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b450:	3301      	adds	r3, #1
 800b452:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800b456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b458:	7d1b      	ldrb	r3, [r3, #20]
 800b45a:	2b09      	cmp	r3, #9
 800b45c:	d10b      	bne.n	800b476 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b45e:	4b59      	ldr	r3, [pc, #356]	@ (800b5c4 <tcp_slowtmr+0x588>)
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b464:	6a1b      	ldr	r3, [r3, #32]
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	2bf0      	cmp	r3, #240	@ 0xf0
 800b46a:	d904      	bls.n	800b476 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800b46c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b470:	3301      	adds	r3, #1
 800b472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800b476:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d060      	beq.n	800b540 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800b47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b484:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800b486:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b488:	f000 fbfc 	bl	800bc84 <tcp_pcb_purge>
      if (prev != NULL) {
 800b48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d010      	beq.n	800b4b4 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b492:	4b4f      	ldr	r3, [pc, #316]	@ (800b5d0 <tcp_slowtmr+0x594>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b498:	429a      	cmp	r2, r3
 800b49a:	d106      	bne.n	800b4aa <tcp_slowtmr+0x46e>
 800b49c:	4b4d      	ldr	r3, [pc, #308]	@ (800b5d4 <tcp_slowtmr+0x598>)
 800b49e:	f240 526d 	movw	r2, #1389	@ 0x56d
 800b4a2:	494d      	ldr	r1, [pc, #308]	@ (800b5d8 <tcp_slowtmr+0x59c>)
 800b4a4:	484d      	ldr	r0, [pc, #308]	@ (800b5dc <tcp_slowtmr+0x5a0>)
 800b4a6:	f007 fed9 	bl	801325c <iprintf>
        prev->next = pcb->next;
 800b4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ac:	68da      	ldr	r2, [r3, #12]
 800b4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b0:	60da      	str	r2, [r3, #12]
 800b4b2:	e00f      	b.n	800b4d4 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b4b4:	4b46      	ldr	r3, [pc, #280]	@ (800b5d0 <tcp_slowtmr+0x594>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d006      	beq.n	800b4cc <tcp_slowtmr+0x490>
 800b4be:	4b45      	ldr	r3, [pc, #276]	@ (800b5d4 <tcp_slowtmr+0x598>)
 800b4c0:	f240 5271 	movw	r2, #1393	@ 0x571
 800b4c4:	4946      	ldr	r1, [pc, #280]	@ (800b5e0 <tcp_slowtmr+0x5a4>)
 800b4c6:	4845      	ldr	r0, [pc, #276]	@ (800b5dc <tcp_slowtmr+0x5a0>)
 800b4c8:	f007 fec8 	bl	801325c <iprintf>
        tcp_active_pcbs = pcb->next;
 800b4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	4a3f      	ldr	r2, [pc, #252]	@ (800b5d0 <tcp_slowtmr+0x594>)
 800b4d2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800b4d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d013      	beq.n	800b504 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4de:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800b4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b4e4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800b4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4ec:	8ad2      	ldrh	r2, [r2, #22]
 800b4ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4f0:	8b09      	ldrh	r1, [r1, #24]
 800b4f2:	9102      	str	r1, [sp, #8]
 800b4f4:	9201      	str	r2, [sp, #4]
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	462b      	mov	r3, r5
 800b4fa:	4622      	mov	r2, r4
 800b4fc:	4601      	mov	r1, r0
 800b4fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b500:	f004 f982 	bl	800f808 <tcp_rst>
      err_arg = pcb->callback_arg;
 800b504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b50c:	7d1b      	ldrb	r3, [r3, #20]
 800b50e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b512:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800b51a:	6838      	ldr	r0, [r7, #0]
 800b51c:	f7ff f9f0 	bl	800a900 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800b520:	4b30      	ldr	r3, [pc, #192]	@ (800b5e4 <tcp_slowtmr+0x5a8>)
 800b522:	2200      	movs	r2, #0
 800b524:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d004      	beq.n	800b536 <tcp_slowtmr+0x4fa>
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f06f 010c 	mvn.w	r1, #12
 800b532:	68b8      	ldr	r0, [r7, #8]
 800b534:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b536:	4b2b      	ldr	r3, [pc, #172]	@ (800b5e4 <tcp_slowtmr+0x5a8>)
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d037      	beq.n	800b5ae <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800b53e:	e590      	b.n	800b062 <tcp_slowtmr+0x26>
      prev = pcb;
 800b540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b542:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800b54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b54c:	7f1b      	ldrb	r3, [r3, #28]
 800b54e:	3301      	adds	r3, #1
 800b550:	b2da      	uxtb	r2, r3
 800b552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b554:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b558:	7f1a      	ldrb	r2, [r3, #28]
 800b55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b55c:	7f5b      	ldrb	r3, [r3, #29]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d325      	bcc.n	800b5ae <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800b562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b564:	2200      	movs	r2, #0
 800b566:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800b568:	4b1e      	ldr	r3, [pc, #120]	@ (800b5e4 <tcp_slowtmr+0x5a8>)
 800b56a:	2200      	movs	r2, #0
 800b56c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00b      	beq.n	800b590 <tcp_slowtmr+0x554>
 800b578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b57e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b580:	6912      	ldr	r2, [r2, #16]
 800b582:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b584:	4610      	mov	r0, r2
 800b586:	4798      	blx	r3
 800b588:	4603      	mov	r3, r0
 800b58a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800b58e:	e002      	b.n	800b596 <tcp_slowtmr+0x55a>
 800b590:	2300      	movs	r3, #0
 800b592:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800b596:	4b13      	ldr	r3, [pc, #76]	@ (800b5e4 <tcp_slowtmr+0x5a8>)
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f47f ad60 	bne.w	800b060 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b5a0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d102      	bne.n	800b5ae <tcp_slowtmr+0x572>
          tcp_output(prev);
 800b5a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5aa:	f003 fb79 	bl	800eca0 <tcp_output>
  while (pcb != NULL) {
 800b5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f47f ad5c 	bne.w	800b06e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800b5ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e8 <tcp_slowtmr+0x5ac>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b5c0:	e067      	b.n	800b692 <tcp_slowtmr+0x656>
 800b5c2:	bf00      	nop
 800b5c4:	200089c4 	.word	0x200089c4
 800b5c8:	10624dd3 	.word	0x10624dd3
 800b5cc:	000124f8 	.word	0x000124f8
 800b5d0:	200089d0 	.word	0x200089d0
 800b5d4:	080151e8 	.word	0x080151e8
 800b5d8:	08015620 	.word	0x08015620
 800b5dc:	0801522c 	.word	0x0801522c
 800b5e0:	0801564c 	.word	0x0801564c
 800b5e4:	200089d8 	.word	0x200089d8
 800b5e8:	200089d4 	.word	0x200089d4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ee:	7d1b      	ldrb	r3, [r3, #20]
 800b5f0:	2b0a      	cmp	r3, #10
 800b5f2:	d006      	beq.n	800b602 <tcp_slowtmr+0x5c6>
 800b5f4:	4b2b      	ldr	r3, [pc, #172]	@ (800b6a4 <tcp_slowtmr+0x668>)
 800b5f6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800b5fa:	492b      	ldr	r1, [pc, #172]	@ (800b6a8 <tcp_slowtmr+0x66c>)
 800b5fc:	482b      	ldr	r0, [pc, #172]	@ (800b6ac <tcp_slowtmr+0x670>)
 800b5fe:	f007 fe2d 	bl	801325c <iprintf>
    pcb_remove = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b608:	4b29      	ldr	r3, [pc, #164]	@ (800b6b0 <tcp_slowtmr+0x674>)
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b60e:	6a1b      	ldr	r3, [r3, #32]
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	2bf0      	cmp	r3, #240	@ 0xf0
 800b614:	d904      	bls.n	800b620 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800b616:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b61a:	3301      	adds	r3, #1
 800b61c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b624:	2b00      	cmp	r3, #0
 800b626:	d02f      	beq.n	800b688 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b628:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b62a:	f000 fb2b 	bl	800bc84 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b630:	2b00      	cmp	r3, #0
 800b632:	d010      	beq.n	800b656 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b634:	4b1f      	ldr	r3, [pc, #124]	@ (800b6b4 <tcp_slowtmr+0x678>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d106      	bne.n	800b64c <tcp_slowtmr+0x610>
 800b63e:	4b19      	ldr	r3, [pc, #100]	@ (800b6a4 <tcp_slowtmr+0x668>)
 800b640:	f240 52af 	movw	r2, #1455	@ 0x5af
 800b644:	491c      	ldr	r1, [pc, #112]	@ (800b6b8 <tcp_slowtmr+0x67c>)
 800b646:	4819      	ldr	r0, [pc, #100]	@ (800b6ac <tcp_slowtmr+0x670>)
 800b648:	f007 fe08 	bl	801325c <iprintf>
        prev->next = pcb->next;
 800b64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b64e:	68da      	ldr	r2, [r3, #12]
 800b650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b652:	60da      	str	r2, [r3, #12]
 800b654:	e00f      	b.n	800b676 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b656:	4b17      	ldr	r3, [pc, #92]	@ (800b6b4 <tcp_slowtmr+0x678>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d006      	beq.n	800b66e <tcp_slowtmr+0x632>
 800b660:	4b10      	ldr	r3, [pc, #64]	@ (800b6a4 <tcp_slowtmr+0x668>)
 800b662:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800b666:	4915      	ldr	r1, [pc, #84]	@ (800b6bc <tcp_slowtmr+0x680>)
 800b668:	4810      	ldr	r0, [pc, #64]	@ (800b6ac <tcp_slowtmr+0x670>)
 800b66a:	f007 fdf7 	bl	801325c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	4a10      	ldr	r2, [pc, #64]	@ (800b6b4 <tcp_slowtmr+0x678>)
 800b674:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b678:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800b680:	69f8      	ldr	r0, [r7, #28]
 800b682:	f7ff f93d 	bl	800a900 <tcp_free>
 800b686:	e004      	b.n	800b692 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800b688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b68a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1a9      	bne.n	800b5ec <tcp_slowtmr+0x5b0>
    }
  }
}
 800b698:	bf00      	nop
 800b69a:	bf00      	nop
 800b69c:	3730      	adds	r7, #48	@ 0x30
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bdb0      	pop	{r4, r5, r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	080151e8 	.word	0x080151e8
 800b6a8:	08015678 	.word	0x08015678
 800b6ac:	0801522c 	.word	0x0801522c
 800b6b0:	200089c4 	.word	0x200089c4
 800b6b4:	200089d4 	.word	0x200089d4
 800b6b8:	080156a8 	.word	0x080156a8
 800b6bc:	080156d0 	.word	0x080156d0

0800b6c0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b6c6:	4b2d      	ldr	r3, [pc, #180]	@ (800b77c <tcp_fasttmr+0xbc>)
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	b2da      	uxtb	r2, r3
 800b6ce:	4b2b      	ldr	r3, [pc, #172]	@ (800b77c <tcp_fasttmr+0xbc>)
 800b6d0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b6d2:	4b2b      	ldr	r3, [pc, #172]	@ (800b780 <tcp_fasttmr+0xc0>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b6d8:	e048      	b.n	800b76c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	7f9a      	ldrb	r2, [r3, #30]
 800b6de:	4b27      	ldr	r3, [pc, #156]	@ (800b77c <tcp_fasttmr+0xbc>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d03f      	beq.n	800b766 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b6e6:	4b25      	ldr	r3, [pc, #148]	@ (800b77c <tcp_fasttmr+0xbc>)
 800b6e8:	781a      	ldrb	r2, [r3, #0]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	8b5b      	ldrh	r3, [r3, #26]
 800b6f2:	f003 0301 	and.w	r3, r3, #1
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d010      	beq.n	800b71c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	8b5b      	ldrh	r3, [r3, #26]
 800b6fe:	f043 0302 	orr.w	r3, r3, #2
 800b702:	b29a      	uxth	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f003 fac9 	bl	800eca0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	8b5b      	ldrh	r3, [r3, #26]
 800b712:	f023 0303 	bic.w	r3, r3, #3
 800b716:	b29a      	uxth	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	8b5b      	ldrh	r3, [r3, #26]
 800b720:	f003 0308 	and.w	r3, r3, #8
 800b724:	2b00      	cmp	r3, #0
 800b726:	d009      	beq.n	800b73c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	8b5b      	ldrh	r3, [r3, #26]
 800b72c:	f023 0308 	bic.w	r3, r3, #8
 800b730:	b29a      	uxth	r2, r3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7ff fa76 	bl	800ac28 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00a      	beq.n	800b760 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b74a:	4b0e      	ldr	r3, [pc, #56]	@ (800b784 <tcp_fasttmr+0xc4>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f819 	bl	800b788 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b756:	4b0b      	ldr	r3, [pc, #44]	@ (800b784 <tcp_fasttmr+0xc4>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d000      	beq.n	800b760 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b75e:	e7b8      	b.n	800b6d2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	607b      	str	r3, [r7, #4]
 800b764:	e002      	b.n	800b76c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1b3      	bne.n	800b6da <tcp_fasttmr+0x1a>
    }
  }
}
 800b772:	bf00      	nop
 800b774:	bf00      	nop
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	200089da 	.word	0x200089da
 800b780:	200089d0 	.word	0x200089d0
 800b784:	200089d8 	.word	0x200089d8

0800b788 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b788:	b590      	push	{r4, r7, lr}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d109      	bne.n	800b7aa <tcp_process_refused_data+0x22>
 800b796:	4b37      	ldr	r3, [pc, #220]	@ (800b874 <tcp_process_refused_data+0xec>)
 800b798:	f240 6209 	movw	r2, #1545	@ 0x609
 800b79c:	4936      	ldr	r1, [pc, #216]	@ (800b878 <tcp_process_refused_data+0xf0>)
 800b79e:	4837      	ldr	r0, [pc, #220]	@ (800b87c <tcp_process_refused_data+0xf4>)
 800b7a0:	f007 fd5c 	bl	801325c <iprintf>
 800b7a4:	f06f 030f 	mvn.w	r3, #15
 800b7a8:	e060      	b.n	800b86c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b7ae:	7b5b      	ldrb	r3, [r3, #13]
 800b7b0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b7b6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00b      	beq.n	800b7e0 <tcp_process_refused_data+0x58>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6918      	ldr	r0, [r3, #16]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	68ba      	ldr	r2, [r7, #8]
 800b7d6:	6879      	ldr	r1, [r7, #4]
 800b7d8:	47a0      	blx	r4
 800b7da:	4603      	mov	r3, r0
 800b7dc:	73fb      	strb	r3, [r7, #15]
 800b7de:	e007      	b.n	800b7f0 <tcp_process_refused_data+0x68>
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	6879      	ldr	r1, [r7, #4]
 800b7e6:	2000      	movs	r0, #0
 800b7e8:	f000 f8a4 	bl	800b934 <tcp_recv_null>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b7f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d12a      	bne.n	800b84e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b7f8:	7bbb      	ldrb	r3, [r7, #14]
 800b7fa:	f003 0320 	and.w	r3, r3, #32
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d033      	beq.n	800b86a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b806:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b80a:	d005      	beq.n	800b818 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b810:	3301      	adds	r3, #1
 800b812:	b29a      	uxth	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00b      	beq.n	800b83a <tcp_process_refused_data+0xb2>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6918      	ldr	r0, [r3, #16]
 800b82c:	2300      	movs	r3, #0
 800b82e:	2200      	movs	r2, #0
 800b830:	6879      	ldr	r1, [r7, #4]
 800b832:	47a0      	blx	r4
 800b834:	4603      	mov	r3, r0
 800b836:	73fb      	strb	r3, [r7, #15]
 800b838:	e001      	b.n	800b83e <tcp_process_refused_data+0xb6>
 800b83a:	2300      	movs	r3, #0
 800b83c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b83e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b842:	f113 0f0d 	cmn.w	r3, #13
 800b846:	d110      	bne.n	800b86a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b848:	f06f 030c 	mvn.w	r3, #12
 800b84c:	e00e      	b.n	800b86c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b84e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b852:	f113 0f0d 	cmn.w	r3, #13
 800b856:	d102      	bne.n	800b85e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b858:	f06f 030c 	mvn.w	r3, #12
 800b85c:	e006      	b.n	800b86c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800b864:	f06f 0304 	mvn.w	r3, #4
 800b868:	e000      	b.n	800b86c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3714      	adds	r7, #20
 800b870:	46bd      	mov	sp, r7
 800b872:	bd90      	pop	{r4, r7, pc}
 800b874:	080151e8 	.word	0x080151e8
 800b878:	080156f8 	.word	0x080156f8
 800b87c:	0801522c 	.word	0x0801522c

0800b880 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b888:	e007      	b.n	800b89a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 f80a 	bl	800b8aa <tcp_seg_free>
    seg = next;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1f4      	bne.n	800b88a <tcp_segs_free+0xa>
  }
}
 800b8a0:	bf00      	nop
 800b8a2:	bf00      	nop
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b082      	sub	sp, #8
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00c      	beq.n	800b8d2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d004      	beq.n	800b8ca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fe fcd9 	bl	800a27c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b8ca:	6879      	ldr	r1, [r7, #4]
 800b8cc:	2003      	movs	r0, #3
 800b8ce:	f7fd fe5f 	bl	8009590 <memp_free>
  }
}
 800b8d2:	bf00      	nop
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d106      	bne.n	800b8f8 <tcp_seg_copy+0x1c>
 800b8ea:	4b0f      	ldr	r3, [pc, #60]	@ (800b928 <tcp_seg_copy+0x4c>)
 800b8ec:	f240 6282 	movw	r2, #1666	@ 0x682
 800b8f0:	490e      	ldr	r1, [pc, #56]	@ (800b92c <tcp_seg_copy+0x50>)
 800b8f2:	480f      	ldr	r0, [pc, #60]	@ (800b930 <tcp_seg_copy+0x54>)
 800b8f4:	f007 fcb2 	bl	801325c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b8f8:	2003      	movs	r0, #3
 800b8fa:	f7fd fdd9 	bl	80094b0 <memp_malloc>
 800b8fe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d101      	bne.n	800b90a <tcp_seg_copy+0x2e>
    return NULL;
 800b906:	2300      	movs	r3, #0
 800b908:	e00a      	b.n	800b920 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b90a:	2210      	movs	r2, #16
 800b90c:	6879      	ldr	r1, [r7, #4]
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f007 fde3 	bl	80134da <memcpy>
  pbuf_ref(cseg->p);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	4618      	mov	r0, r3
 800b91a:	f7fe fd4f 	bl	800a3bc <pbuf_ref>
  return cseg;
 800b91e:	68fb      	ldr	r3, [r7, #12]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	080151e8 	.word	0x080151e8
 800b92c:	0801573c 	.word	0x0801573c
 800b930:	0801522c 	.word	0x0801522c

0800b934 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	607a      	str	r2, [r7, #4]
 800b940:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d109      	bne.n	800b95c <tcp_recv_null+0x28>
 800b948:	4b12      	ldr	r3, [pc, #72]	@ (800b994 <tcp_recv_null+0x60>)
 800b94a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800b94e:	4912      	ldr	r1, [pc, #72]	@ (800b998 <tcp_recv_null+0x64>)
 800b950:	4812      	ldr	r0, [pc, #72]	@ (800b99c <tcp_recv_null+0x68>)
 800b952:	f007 fc83 	bl	801325c <iprintf>
 800b956:	f06f 030f 	mvn.w	r3, #15
 800b95a:	e016      	b.n	800b98a <tcp_recv_null+0x56>

  if (p != NULL) {
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d009      	beq.n	800b976 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	891b      	ldrh	r3, [r3, #8]
 800b966:	4619      	mov	r1, r3
 800b968:	68b8      	ldr	r0, [r7, #8]
 800b96a:	f7ff fb17 	bl	800af9c <tcp_recved>
    pbuf_free(p);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f7fe fc84 	bl	800a27c <pbuf_free>
 800b974:	e008      	b.n	800b988 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b976:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d104      	bne.n	800b988 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b97e:	68b8      	ldr	r0, [r7, #8]
 800b980:	f7ff f9bc 	bl	800acfc <tcp_close>
 800b984:	4603      	mov	r3, r0
 800b986:	e000      	b.n	800b98a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	080151e8 	.word	0x080151e8
 800b998:	08015758 	.word	0x08015758
 800b99c:	0801522c 	.word	0x0801522c

0800b9a0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b9aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	db01      	blt.n	800b9b6 <tcp_kill_prio+0x16>
 800b9b2:	79fb      	ldrb	r3, [r7, #7]
 800b9b4:	e000      	b.n	800b9b8 <tcp_kill_prio+0x18>
 800b9b6:	237f      	movs	r3, #127	@ 0x7f
 800b9b8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b9ba:	7afb      	ldrb	r3, [r7, #11]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d034      	beq.n	800ba2a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b9c0:	7afb      	ldrb	r3, [r7, #11]
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9ce:	4b19      	ldr	r3, [pc, #100]	@ (800ba34 <tcp_kill_prio+0x94>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	617b      	str	r3, [r7, #20]
 800b9d4:	e01f      	b.n	800ba16 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	7d5b      	ldrb	r3, [r3, #21]
 800b9da:	7afa      	ldrb	r2, [r7, #11]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d80c      	bhi.n	800b9fa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b9e4:	7afa      	ldrb	r2, [r7, #11]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d112      	bne.n	800ba10 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b9ea:	4b13      	ldr	r3, [pc, #76]	@ (800ba38 <tcp_kill_prio+0x98>)
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	6a1b      	ldr	r3, [r3, #32]
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	68fa      	ldr	r2, [r7, #12]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d80a      	bhi.n	800ba10 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b9fa:	4b0f      	ldr	r3, [pc, #60]	@ (800ba38 <tcp_kill_prio+0x98>)
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	1ad3      	subs	r3, r2, r3
 800ba04:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	7d5b      	ldrb	r3, [r3, #21]
 800ba0e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	617b      	str	r3, [r7, #20]
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d1dc      	bne.n	800b9d6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d004      	beq.n	800ba2c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ba22:	6938      	ldr	r0, [r7, #16]
 800ba24:	f7ff fa54 	bl	800aed0 <tcp_abort>
 800ba28:	e000      	b.n	800ba2c <tcp_kill_prio+0x8c>
    return;
 800ba2a:	bf00      	nop
  }
}
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	200089d0 	.word	0x200089d0
 800ba38:	200089c4 	.word	0x200089c4

0800ba3c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	4603      	mov	r3, r0
 800ba44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ba46:	79fb      	ldrb	r3, [r7, #7]
 800ba48:	2b08      	cmp	r3, #8
 800ba4a:	d009      	beq.n	800ba60 <tcp_kill_state+0x24>
 800ba4c:	79fb      	ldrb	r3, [r7, #7]
 800ba4e:	2b09      	cmp	r3, #9
 800ba50:	d006      	beq.n	800ba60 <tcp_kill_state+0x24>
 800ba52:	4b1a      	ldr	r3, [pc, #104]	@ (800babc <tcp_kill_state+0x80>)
 800ba54:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800ba58:	4919      	ldr	r1, [pc, #100]	@ (800bac0 <tcp_kill_state+0x84>)
 800ba5a:	481a      	ldr	r0, [pc, #104]	@ (800bac4 <tcp_kill_state+0x88>)
 800ba5c:	f007 fbfe 	bl	801325c <iprintf>

  inactivity = 0;
 800ba60:	2300      	movs	r3, #0
 800ba62:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ba64:	2300      	movs	r3, #0
 800ba66:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba68:	4b17      	ldr	r3, [pc, #92]	@ (800bac8 <tcp_kill_state+0x8c>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	617b      	str	r3, [r7, #20]
 800ba6e:	e017      	b.n	800baa0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	7d1b      	ldrb	r3, [r3, #20]
 800ba74:	79fa      	ldrb	r2, [r7, #7]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d10f      	bne.n	800ba9a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ba7a:	4b14      	ldr	r3, [pc, #80]	@ (800bacc <tcp_kill_state+0x90>)
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	6a1b      	ldr	r3, [r3, #32]
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d807      	bhi.n	800ba9a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ba8a:	4b10      	ldr	r3, [pc, #64]	@ (800bacc <tcp_kill_state+0x90>)
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	6a1b      	ldr	r3, [r3, #32]
 800ba92:	1ad3      	subs	r3, r2, r3
 800ba94:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	617b      	str	r3, [r7, #20]
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d1e4      	bne.n	800ba70 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d003      	beq.n	800bab4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800baac:	2100      	movs	r1, #0
 800baae:	6938      	ldr	r0, [r7, #16]
 800bab0:	f7ff f950 	bl	800ad54 <tcp_abandon>
  }
}
 800bab4:	bf00      	nop
 800bab6:	3718      	adds	r7, #24
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	080151e8 	.word	0x080151e8
 800bac0:	08015774 	.word	0x08015774
 800bac4:	0801522c 	.word	0x0801522c
 800bac8:	200089d0 	.word	0x200089d0
 800bacc:	200089c4 	.word	0x200089c4

0800bad0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bad6:	2300      	movs	r3, #0
 800bad8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bada:	2300      	movs	r3, #0
 800badc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bade:	4b12      	ldr	r3, [pc, #72]	@ (800bb28 <tcp_kill_timewait+0x58>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	60fb      	str	r3, [r7, #12]
 800bae4:	e012      	b.n	800bb0c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bae6:	4b11      	ldr	r3, [pc, #68]	@ (800bb2c <tcp_kill_timewait+0x5c>)
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6a1b      	ldr	r3, [r3, #32]
 800baee:	1ad3      	subs	r3, r2, r3
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d807      	bhi.n	800bb06 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800baf6:	4b0d      	ldr	r3, [pc, #52]	@ (800bb2c <tcp_kill_timewait+0x5c>)
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6a1b      	ldr	r3, [r3, #32]
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	60fb      	str	r3, [r7, #12]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d1e9      	bne.n	800bae6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bb18:	68b8      	ldr	r0, [r7, #8]
 800bb1a:	f7ff f9d9 	bl	800aed0 <tcp_abort>
  }
}
 800bb1e:	bf00      	nop
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	200089d4 	.word	0x200089d4
 800bb2c:	200089c4 	.word	0x200089c4

0800bb30 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bb36:	4b10      	ldr	r3, [pc, #64]	@ (800bb78 <tcp_handle_closepend+0x48>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bb3c:	e014      	b.n	800bb68 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	8b5b      	ldrh	r3, [r3, #26]
 800bb48:	f003 0308 	and.w	r3, r3, #8
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d009      	beq.n	800bb64 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	8b5b      	ldrh	r3, [r3, #26]
 800bb54:	f023 0308 	bic.w	r3, r3, #8
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7ff f862 	bl	800ac28 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1e7      	bne.n	800bb3e <tcp_handle_closepend+0xe>
  }
}
 800bb6e:	bf00      	nop
 800bb70:	bf00      	nop
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	200089d0 	.word	0x200089d0

0800bb7c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	4603      	mov	r3, r0
 800bb84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bb86:	2001      	movs	r0, #1
 800bb88:	f7fd fc92 	bl	80094b0 <memp_malloc>
 800bb8c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d126      	bne.n	800bbe2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bb94:	f7ff ffcc 	bl	800bb30 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bb98:	f7ff ff9a 	bl	800bad0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bb9c:	2001      	movs	r0, #1
 800bb9e:	f7fd fc87 	bl	80094b0 <memp_malloc>
 800bba2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d11b      	bne.n	800bbe2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bbaa:	2009      	movs	r0, #9
 800bbac:	f7ff ff46 	bl	800ba3c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bbb0:	2001      	movs	r0, #1
 800bbb2:	f7fd fc7d 	bl	80094b0 <memp_malloc>
 800bbb6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d111      	bne.n	800bbe2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bbbe:	2008      	movs	r0, #8
 800bbc0:	f7ff ff3c 	bl	800ba3c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bbc4:	2001      	movs	r0, #1
 800bbc6:	f7fd fc73 	bl	80094b0 <memp_malloc>
 800bbca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d107      	bne.n	800bbe2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bbd2:	79fb      	ldrb	r3, [r7, #7]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7ff fee3 	bl	800b9a0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bbda:	2001      	movs	r0, #1
 800bbdc:	f7fd fc68 	bl	80094b0 <memp_malloc>
 800bbe0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d03f      	beq.n	800bc68 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bbe8:	229c      	movs	r2, #156	@ 0x9c
 800bbea:	2100      	movs	r1, #0
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f007 fbd6 	bl	801339e <memset>
    pcb->prio = prio;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	79fa      	ldrb	r2, [r7, #7]
 800bbf6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800bbfe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800bc08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	22ff      	movs	r2, #255	@ 0xff
 800bc16:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800bc1e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2206      	movs	r2, #6
 800bc24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2206      	movs	r2, #6
 800bc2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bc34:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800bc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc74 <tcp_alloc+0xf8>)
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bc46:	4b0c      	ldr	r3, [pc, #48]	@ (800bc78 <tcp_alloc+0xfc>)
 800bc48:	781a      	ldrb	r2, [r3, #0]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800bc54:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	4a08      	ldr	r2, [pc, #32]	@ (800bc7c <tcp_alloc+0x100>)
 800bc5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4a07      	ldr	r2, [pc, #28]	@ (800bc80 <tcp_alloc+0x104>)
 800bc64:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bc68:	68fb      	ldr	r3, [r7, #12]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	200089c4 	.word	0x200089c4
 800bc78:	200089da 	.word	0x200089da
 800bc7c:	0800b935 	.word	0x0800b935
 800bc80:	006ddd00 	.word	0x006ddd00

0800bc84 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d107      	bne.n	800bca2 <tcp_pcb_purge+0x1e>
 800bc92:	4b21      	ldr	r3, [pc, #132]	@ (800bd18 <tcp_pcb_purge+0x94>)
 800bc94:	f640 0251 	movw	r2, #2129	@ 0x851
 800bc98:	4920      	ldr	r1, [pc, #128]	@ (800bd1c <tcp_pcb_purge+0x98>)
 800bc9a:	4821      	ldr	r0, [pc, #132]	@ (800bd20 <tcp_pcb_purge+0x9c>)
 800bc9c:	f007 fade 	bl	801325c <iprintf>
 800bca0:	e037      	b.n	800bd12 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	7d1b      	ldrb	r3, [r3, #20]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d033      	beq.n	800bd12 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800bcae:	2b0a      	cmp	r3, #10
 800bcb0:	d02f      	beq.n	800bd12 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d02b      	beq.n	800bd12 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d007      	beq.n	800bcd2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe fad8 	bl	800a27c <pbuf_free>
      pcb->refused_data = NULL;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d002      	beq.n	800bce0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 f986 	bl	800bfec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bce6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7ff fdc7 	bl	800b880 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff fdc2 	bl	800b880 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	66da      	str	r2, [r3, #108]	@ 0x6c
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	080151e8 	.word	0x080151e8
 800bd1c:	08015834 	.word	0x08015834
 800bd20:	0801522c 	.word	0x0801522c

0800bd24 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d106      	bne.n	800bd42 <tcp_pcb_remove+0x1e>
 800bd34:	4b3e      	ldr	r3, [pc, #248]	@ (800be30 <tcp_pcb_remove+0x10c>)
 800bd36:	f640 0283 	movw	r2, #2179	@ 0x883
 800bd3a:	493e      	ldr	r1, [pc, #248]	@ (800be34 <tcp_pcb_remove+0x110>)
 800bd3c:	483e      	ldr	r0, [pc, #248]	@ (800be38 <tcp_pcb_remove+0x114>)
 800bd3e:	f007 fa8d 	bl	801325c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d106      	bne.n	800bd56 <tcp_pcb_remove+0x32>
 800bd48:	4b39      	ldr	r3, [pc, #228]	@ (800be30 <tcp_pcb_remove+0x10c>)
 800bd4a:	f640 0284 	movw	r2, #2180	@ 0x884
 800bd4e:	493b      	ldr	r1, [pc, #236]	@ (800be3c <tcp_pcb_remove+0x118>)
 800bd50:	4839      	ldr	r0, [pc, #228]	@ (800be38 <tcp_pcb_remove+0x114>)
 800bd52:	f007 fa83 	bl	801325c <iprintf>

  TCP_RMV(pcblist, pcb);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	683a      	ldr	r2, [r7, #0]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d105      	bne.n	800bd6c <tcp_pcb_remove+0x48>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	68da      	ldr	r2, [r3, #12]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	601a      	str	r2, [r3, #0]
 800bd6a:	e013      	b.n	800bd94 <tcp_pcb_remove+0x70>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	60fb      	str	r3, [r7, #12]
 800bd72:	e00c      	b.n	800bd8e <tcp_pcb_remove+0x6a>
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d104      	bne.n	800bd88 <tcp_pcb_remove+0x64>
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	68da      	ldr	r2, [r3, #12]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	60da      	str	r2, [r3, #12]
 800bd86:	e005      	b.n	800bd94 <tcp_pcb_remove+0x70>
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	60fb      	str	r3, [r7, #12]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1ef      	bne.n	800bd74 <tcp_pcb_remove+0x50>
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	2200      	movs	r2, #0
 800bd98:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800bd9a:	6838      	ldr	r0, [r7, #0]
 800bd9c:	f7ff ff72 	bl	800bc84 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	7d1b      	ldrb	r3, [r3, #20]
 800bda4:	2b0a      	cmp	r3, #10
 800bda6:	d013      	beq.n	800bdd0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d00f      	beq.n	800bdd0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	8b5b      	ldrh	r3, [r3, #26]
 800bdb4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d009      	beq.n	800bdd0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	8b5b      	ldrh	r3, [r3, #26]
 800bdc0:	f043 0302 	orr.w	r3, r3, #2
 800bdc4:	b29a      	uxth	r2, r3
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bdca:	6838      	ldr	r0, [r7, #0]
 800bdcc:	f002 ff68 	bl	800eca0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	7d1b      	ldrb	r3, [r3, #20]
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d020      	beq.n	800be1a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d006      	beq.n	800bdee <tcp_pcb_remove+0xca>
 800bde0:	4b13      	ldr	r3, [pc, #76]	@ (800be30 <tcp_pcb_remove+0x10c>)
 800bde2:	f640 0293 	movw	r2, #2195	@ 0x893
 800bde6:	4916      	ldr	r1, [pc, #88]	@ (800be40 <tcp_pcb_remove+0x11c>)
 800bde8:	4813      	ldr	r0, [pc, #76]	@ (800be38 <tcp_pcb_remove+0x114>)
 800bdea:	f007 fa37 	bl	801325c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d006      	beq.n	800be04 <tcp_pcb_remove+0xe0>
 800bdf6:	4b0e      	ldr	r3, [pc, #56]	@ (800be30 <tcp_pcb_remove+0x10c>)
 800bdf8:	f640 0294 	movw	r2, #2196	@ 0x894
 800bdfc:	4911      	ldr	r1, [pc, #68]	@ (800be44 <tcp_pcb_remove+0x120>)
 800bdfe:	480e      	ldr	r0, [pc, #56]	@ (800be38 <tcp_pcb_remove+0x114>)
 800be00:	f007 fa2c 	bl	801325c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d006      	beq.n	800be1a <tcp_pcb_remove+0xf6>
 800be0c:	4b08      	ldr	r3, [pc, #32]	@ (800be30 <tcp_pcb_remove+0x10c>)
 800be0e:	f640 0296 	movw	r2, #2198	@ 0x896
 800be12:	490d      	ldr	r1, [pc, #52]	@ (800be48 <tcp_pcb_remove+0x124>)
 800be14:	4808      	ldr	r0, [pc, #32]	@ (800be38 <tcp_pcb_remove+0x114>)
 800be16:	f007 fa21 	bl	801325c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	2200      	movs	r2, #0
 800be1e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	2200      	movs	r2, #0
 800be24:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800be26:	bf00      	nop
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	080151e8 	.word	0x080151e8
 800be34:	08015850 	.word	0x08015850
 800be38:	0801522c 	.word	0x0801522c
 800be3c:	0801586c 	.word	0x0801586c
 800be40:	0801588c 	.word	0x0801588c
 800be44:	080158a4 	.word	0x080158a4
 800be48:	080158c0 	.word	0x080158c0

0800be4c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d106      	bne.n	800be68 <tcp_next_iss+0x1c>
 800be5a:	4b0a      	ldr	r3, [pc, #40]	@ (800be84 <tcp_next_iss+0x38>)
 800be5c:	f640 02af 	movw	r2, #2223	@ 0x8af
 800be60:	4909      	ldr	r1, [pc, #36]	@ (800be88 <tcp_next_iss+0x3c>)
 800be62:	480a      	ldr	r0, [pc, #40]	@ (800be8c <tcp_next_iss+0x40>)
 800be64:	f007 f9fa 	bl	801325c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800be68:	4b09      	ldr	r3, [pc, #36]	@ (800be90 <tcp_next_iss+0x44>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	4b09      	ldr	r3, [pc, #36]	@ (800be94 <tcp_next_iss+0x48>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4413      	add	r3, r2
 800be72:	4a07      	ldr	r2, [pc, #28]	@ (800be90 <tcp_next_iss+0x44>)
 800be74:	6013      	str	r3, [r2, #0]
  return iss;
 800be76:	4b06      	ldr	r3, [pc, #24]	@ (800be90 <tcp_next_iss+0x44>)
 800be78:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	080151e8 	.word	0x080151e8
 800be88:	080158d8 	.word	0x080158d8
 800be8c:	0801522c 	.word	0x0801522c
 800be90:	20000098 	.word	0x20000098
 800be94:	200089c4 	.word	0x200089c4

0800be98 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b086      	sub	sp, #24
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	4603      	mov	r3, r0
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	607a      	str	r2, [r7, #4]
 800bea4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d106      	bne.n	800beba <tcp_eff_send_mss_netif+0x22>
 800beac:	4b14      	ldr	r3, [pc, #80]	@ (800bf00 <tcp_eff_send_mss_netif+0x68>)
 800beae:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800beb2:	4914      	ldr	r1, [pc, #80]	@ (800bf04 <tcp_eff_send_mss_netif+0x6c>)
 800beb4:	4814      	ldr	r0, [pc, #80]	@ (800bf08 <tcp_eff_send_mss_netif+0x70>)
 800beb6:	f007 f9d1 	bl	801325c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d101      	bne.n	800bec4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800bec0:	89fb      	ldrh	r3, [r7, #14]
 800bec2:	e019      	b.n	800bef8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bec8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800beca:	8afb      	ldrh	r3, [r7, #22]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d012      	beq.n	800bef6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800bed0:	2328      	movs	r3, #40	@ 0x28
 800bed2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800bed4:	8afa      	ldrh	r2, [r7, #22]
 800bed6:	8abb      	ldrh	r3, [r7, #20]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d904      	bls.n	800bee6 <tcp_eff_send_mss_netif+0x4e>
 800bedc:	8afa      	ldrh	r2, [r7, #22]
 800bede:	8abb      	ldrh	r3, [r7, #20]
 800bee0:	1ad3      	subs	r3, r2, r3
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	e000      	b.n	800bee8 <tcp_eff_send_mss_netif+0x50>
 800bee6:	2300      	movs	r3, #0
 800bee8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800beea:	8a7a      	ldrh	r2, [r7, #18]
 800beec:	89fb      	ldrh	r3, [r7, #14]
 800beee:	4293      	cmp	r3, r2
 800bef0:	bf28      	it	cs
 800bef2:	4613      	movcs	r3, r2
 800bef4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800bef6:	89fb      	ldrh	r3, [r7, #14]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3718      	adds	r7, #24
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	080151e8 	.word	0x080151e8
 800bf04:	080158f4 	.word	0x080158f4
 800bf08:	0801522c 	.word	0x0801522c

0800bf0c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d119      	bne.n	800bf54 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800bf20:	4b10      	ldr	r3, [pc, #64]	@ (800bf64 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800bf22:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800bf26:	4910      	ldr	r1, [pc, #64]	@ (800bf68 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800bf28:	4810      	ldr	r0, [pc, #64]	@ (800bf6c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800bf2a:	f007 f997 	bl	801325c <iprintf>

  while (pcb != NULL) {
 800bf2e:	e011      	b.n	800bf54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d108      	bne.n	800bf4e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	f7fe ffc4 	bl	800aed0 <tcp_abort>
      pcb = next;
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	60fb      	str	r3, [r7, #12]
 800bf4c:	e002      	b.n	800bf54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1ea      	bne.n	800bf30 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800bf5a:	bf00      	nop
 800bf5c:	bf00      	nop
 800bf5e:	3710      	adds	r7, #16
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	080151e8 	.word	0x080151e8
 800bf68:	0801591c 	.word	0x0801591c
 800bf6c:	0801522c 	.word	0x0801522c

0800bf70 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d02a      	beq.n	800bfd6 <tcp_netif_ip_addr_changed+0x66>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d026      	beq.n	800bfd6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bf88:	4b15      	ldr	r3, [pc, #84]	@ (800bfe0 <tcp_netif_ip_addr_changed+0x70>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f7ff ffbc 	bl	800bf0c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bf94:	4b13      	ldr	r3, [pc, #76]	@ (800bfe4 <tcp_netif_ip_addr_changed+0x74>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f7ff ffb6 	bl	800bf0c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d017      	beq.n	800bfd6 <tcp_netif_ip_addr_changed+0x66>
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d013      	beq.n	800bfd6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bfae:	4b0e      	ldr	r3, [pc, #56]	@ (800bfe8 <tcp_netif_ip_addr_changed+0x78>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	60fb      	str	r3, [r7, #12]
 800bfb4:	e00c      	b.n	800bfd0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d103      	bne.n	800bfca <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	68db      	ldr	r3, [r3, #12]
 800bfce:	60fb      	str	r3, [r7, #12]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1ef      	bne.n	800bfb6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800bfd6:	bf00      	nop
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	200089d0 	.word	0x200089d0
 800bfe4:	200089c8 	.word	0x200089c8
 800bfe8:	200089cc 	.word	0x200089cc

0800bfec <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d007      	beq.n	800c00c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c000:	4618      	mov	r0, r3
 800c002:	f7ff fc3d 	bl	800b880 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c00c:	bf00      	nop
 800c00e:	3708      	adds	r7, #8
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c014:	b590      	push	{r4, r7, lr}
 800c016:	b08d      	sub	sp, #52	@ 0x34
 800c018:	af04      	add	r7, sp, #16
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d105      	bne.n	800c030 <tcp_input+0x1c>
 800c024:	4b9b      	ldr	r3, [pc, #620]	@ (800c294 <tcp_input+0x280>)
 800c026:	2283      	movs	r2, #131	@ 0x83
 800c028:	499b      	ldr	r1, [pc, #620]	@ (800c298 <tcp_input+0x284>)
 800c02a:	489c      	ldr	r0, [pc, #624]	@ (800c29c <tcp_input+0x288>)
 800c02c:	f007 f916 	bl	801325c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	4a9a      	ldr	r2, [pc, #616]	@ (800c2a0 <tcp_input+0x28c>)
 800c036:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	895b      	ldrh	r3, [r3, #10]
 800c03c:	2b13      	cmp	r3, #19
 800c03e:	f240 83d1 	bls.w	800c7e4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c042:	4b98      	ldr	r3, [pc, #608]	@ (800c2a4 <tcp_input+0x290>)
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	4a97      	ldr	r2, [pc, #604]	@ (800c2a4 <tcp_input+0x290>)
 800c048:	6812      	ldr	r2, [r2, #0]
 800c04a:	4611      	mov	r1, r2
 800c04c:	4618      	mov	r0, r3
 800c04e:	f005 ff61 	bl	8011f14 <ip4_addr_isbroadcast_u32>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	f040 83c7 	bne.w	800c7e8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c05a:	4b92      	ldr	r3, [pc, #584]	@ (800c2a4 <tcp_input+0x290>)
 800c05c:	695b      	ldr	r3, [r3, #20]
 800c05e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c062:	2be0      	cmp	r3, #224	@ 0xe0
 800c064:	f000 83c0 	beq.w	800c7e8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c068:	4b8d      	ldr	r3, [pc, #564]	@ (800c2a0 <tcp_input+0x28c>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	899b      	ldrh	r3, [r3, #12]
 800c06e:	b29b      	uxth	r3, r3
 800c070:	4618      	mov	r0, r3
 800c072:	f7fc fda5 	bl	8008bc0 <lwip_htons>
 800c076:	4603      	mov	r3, r0
 800c078:	0b1b      	lsrs	r3, r3, #12
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c082:	7cbb      	ldrb	r3, [r7, #18]
 800c084:	2b13      	cmp	r3, #19
 800c086:	f240 83b1 	bls.w	800c7ec <tcp_input+0x7d8>
 800c08a:	7cbb      	ldrb	r3, [r7, #18]
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	891b      	ldrh	r3, [r3, #8]
 800c092:	429a      	cmp	r2, r3
 800c094:	f200 83aa 	bhi.w	800c7ec <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c098:	7cbb      	ldrb	r3, [r7, #18]
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	3b14      	subs	r3, #20
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	4b81      	ldr	r3, [pc, #516]	@ (800c2a8 <tcp_input+0x294>)
 800c0a2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c0a4:	4b81      	ldr	r3, [pc, #516]	@ (800c2ac <tcp_input+0x298>)
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	895a      	ldrh	r2, [r3, #10]
 800c0ae:	7cbb      	ldrb	r3, [r7, #18]
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d309      	bcc.n	800c0ca <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c0b6:	4b7c      	ldr	r3, [pc, #496]	@ (800c2a8 <tcp_input+0x294>)
 800c0b8:	881a      	ldrh	r2, [r3, #0]
 800c0ba:	4b7d      	ldr	r3, [pc, #500]	@ (800c2b0 <tcp_input+0x29c>)
 800c0bc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c0be:	7cbb      	ldrb	r3, [r7, #18]
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f7fe f854 	bl	800a170 <pbuf_remove_header>
 800c0c8:	e04e      	b.n	800c168 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d105      	bne.n	800c0de <tcp_input+0xca>
 800c0d2:	4b70      	ldr	r3, [pc, #448]	@ (800c294 <tcp_input+0x280>)
 800c0d4:	22c2      	movs	r2, #194	@ 0xc2
 800c0d6:	4977      	ldr	r1, [pc, #476]	@ (800c2b4 <tcp_input+0x2a0>)
 800c0d8:	4870      	ldr	r0, [pc, #448]	@ (800c29c <tcp_input+0x288>)
 800c0da:	f007 f8bf 	bl	801325c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c0de:	2114      	movs	r1, #20
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f7fe f845 	bl	800a170 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	895a      	ldrh	r2, [r3, #10]
 800c0ea:	4b71      	ldr	r3, [pc, #452]	@ (800c2b0 <tcp_input+0x29c>)
 800c0ec:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c0ee:	4b6e      	ldr	r3, [pc, #440]	@ (800c2a8 <tcp_input+0x294>)
 800c0f0:	881a      	ldrh	r2, [r3, #0]
 800c0f2:	4b6f      	ldr	r3, [pc, #444]	@ (800c2b0 <tcp_input+0x29c>)
 800c0f4:	881b      	ldrh	r3, [r3, #0]
 800c0f6:	1ad3      	subs	r3, r2, r3
 800c0f8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c0fa:	4b6d      	ldr	r3, [pc, #436]	@ (800c2b0 <tcp_input+0x29c>)
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	4619      	mov	r1, r3
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7fe f835 	bl	800a170 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	895b      	ldrh	r3, [r3, #10]
 800c10c:	8a3a      	ldrh	r2, [r7, #16]
 800c10e:	429a      	cmp	r2, r3
 800c110:	f200 836e 	bhi.w	800c7f0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	4a64      	ldr	r2, [pc, #400]	@ (800c2ac <tcp_input+0x298>)
 800c11c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	8a3a      	ldrh	r2, [r7, #16]
 800c124:	4611      	mov	r1, r2
 800c126:	4618      	mov	r0, r3
 800c128:	f7fe f822 	bl	800a170 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	891a      	ldrh	r2, [r3, #8]
 800c130:	8a3b      	ldrh	r3, [r7, #16]
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	b29a      	uxth	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	895b      	ldrh	r3, [r3, #10]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d005      	beq.n	800c14e <tcp_input+0x13a>
 800c142:	4b54      	ldr	r3, [pc, #336]	@ (800c294 <tcp_input+0x280>)
 800c144:	22df      	movs	r2, #223	@ 0xdf
 800c146:	495c      	ldr	r1, [pc, #368]	@ (800c2b8 <tcp_input+0x2a4>)
 800c148:	4854      	ldr	r0, [pc, #336]	@ (800c29c <tcp_input+0x288>)
 800c14a:	f007 f887 	bl	801325c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	891a      	ldrh	r2, [r3, #8]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	891b      	ldrh	r3, [r3, #8]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d005      	beq.n	800c168 <tcp_input+0x154>
 800c15c:	4b4d      	ldr	r3, [pc, #308]	@ (800c294 <tcp_input+0x280>)
 800c15e:	22e0      	movs	r2, #224	@ 0xe0
 800c160:	4956      	ldr	r1, [pc, #344]	@ (800c2bc <tcp_input+0x2a8>)
 800c162:	484e      	ldr	r0, [pc, #312]	@ (800c29c <tcp_input+0x288>)
 800c164:	f007 f87a 	bl	801325c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c168:	4b4d      	ldr	r3, [pc, #308]	@ (800c2a0 <tcp_input+0x28c>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	881b      	ldrh	r3, [r3, #0]
 800c16e:	b29b      	uxth	r3, r3
 800c170:	4a4b      	ldr	r2, [pc, #300]	@ (800c2a0 <tcp_input+0x28c>)
 800c172:	6814      	ldr	r4, [r2, #0]
 800c174:	4618      	mov	r0, r3
 800c176:	f7fc fd23 	bl	8008bc0 <lwip_htons>
 800c17a:	4603      	mov	r3, r0
 800c17c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c17e:	4b48      	ldr	r3, [pc, #288]	@ (800c2a0 <tcp_input+0x28c>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	885b      	ldrh	r3, [r3, #2]
 800c184:	b29b      	uxth	r3, r3
 800c186:	4a46      	ldr	r2, [pc, #280]	@ (800c2a0 <tcp_input+0x28c>)
 800c188:	6814      	ldr	r4, [r2, #0]
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fc fd18 	bl	8008bc0 <lwip_htons>
 800c190:	4603      	mov	r3, r0
 800c192:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c194:	4b42      	ldr	r3, [pc, #264]	@ (800c2a0 <tcp_input+0x28c>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	4a41      	ldr	r2, [pc, #260]	@ (800c2a0 <tcp_input+0x28c>)
 800c19c:	6814      	ldr	r4, [r2, #0]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fc fd24 	bl	8008bec <lwip_htonl>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	6063      	str	r3, [r4, #4]
 800c1a8:	6863      	ldr	r3, [r4, #4]
 800c1aa:	4a45      	ldr	r2, [pc, #276]	@ (800c2c0 <tcp_input+0x2ac>)
 800c1ac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c1ae:	4b3c      	ldr	r3, [pc, #240]	@ (800c2a0 <tcp_input+0x28c>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	689b      	ldr	r3, [r3, #8]
 800c1b4:	4a3a      	ldr	r2, [pc, #232]	@ (800c2a0 <tcp_input+0x28c>)
 800c1b6:	6814      	ldr	r4, [r2, #0]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7fc fd17 	bl	8008bec <lwip_htonl>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	60a3      	str	r3, [r4, #8]
 800c1c2:	68a3      	ldr	r3, [r4, #8]
 800c1c4:	4a3f      	ldr	r2, [pc, #252]	@ (800c2c4 <tcp_input+0x2b0>)
 800c1c6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c1c8:	4b35      	ldr	r3, [pc, #212]	@ (800c2a0 <tcp_input+0x28c>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	89db      	ldrh	r3, [r3, #14]
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	4a33      	ldr	r2, [pc, #204]	@ (800c2a0 <tcp_input+0x28c>)
 800c1d2:	6814      	ldr	r4, [r2, #0]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fc fcf3 	bl	8008bc0 <lwip_htons>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c1de:	4b30      	ldr	r3, [pc, #192]	@ (800c2a0 <tcp_input+0x28c>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	899b      	ldrh	r3, [r3, #12]
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fc fcea 	bl	8008bc0 <lwip_htons>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c1f4:	b2da      	uxtb	r2, r3
 800c1f6:	4b34      	ldr	r3, [pc, #208]	@ (800c2c8 <tcp_input+0x2b4>)
 800c1f8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	891a      	ldrh	r2, [r3, #8]
 800c1fe:	4b33      	ldr	r3, [pc, #204]	@ (800c2cc <tcp_input+0x2b8>)
 800c200:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c202:	4b31      	ldr	r3, [pc, #196]	@ (800c2c8 <tcp_input+0x2b4>)
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	f003 0303 	and.w	r3, r3, #3
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00c      	beq.n	800c228 <tcp_input+0x214>
    tcplen++;
 800c20e:	4b2f      	ldr	r3, [pc, #188]	@ (800c2cc <tcp_input+0x2b8>)
 800c210:	881b      	ldrh	r3, [r3, #0]
 800c212:	3301      	adds	r3, #1
 800c214:	b29a      	uxth	r2, r3
 800c216:	4b2d      	ldr	r3, [pc, #180]	@ (800c2cc <tcp_input+0x2b8>)
 800c218:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	891a      	ldrh	r2, [r3, #8]
 800c21e:	4b2b      	ldr	r3, [pc, #172]	@ (800c2cc <tcp_input+0x2b8>)
 800c220:	881b      	ldrh	r3, [r3, #0]
 800c222:	429a      	cmp	r2, r3
 800c224:	f200 82e6 	bhi.w	800c7f4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c228:	2300      	movs	r3, #0
 800c22a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c22c:	4b28      	ldr	r3, [pc, #160]	@ (800c2d0 <tcp_input+0x2bc>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	61fb      	str	r3, [r7, #28]
 800c232:	e09d      	b.n	800c370 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	7d1b      	ldrb	r3, [r3, #20]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d105      	bne.n	800c248 <tcp_input+0x234>
 800c23c:	4b15      	ldr	r3, [pc, #84]	@ (800c294 <tcp_input+0x280>)
 800c23e:	22fb      	movs	r2, #251	@ 0xfb
 800c240:	4924      	ldr	r1, [pc, #144]	@ (800c2d4 <tcp_input+0x2c0>)
 800c242:	4816      	ldr	r0, [pc, #88]	@ (800c29c <tcp_input+0x288>)
 800c244:	f007 f80a 	bl	801325c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	7d1b      	ldrb	r3, [r3, #20]
 800c24c:	2b0a      	cmp	r3, #10
 800c24e:	d105      	bne.n	800c25c <tcp_input+0x248>
 800c250:	4b10      	ldr	r3, [pc, #64]	@ (800c294 <tcp_input+0x280>)
 800c252:	22fc      	movs	r2, #252	@ 0xfc
 800c254:	4920      	ldr	r1, [pc, #128]	@ (800c2d8 <tcp_input+0x2c4>)
 800c256:	4811      	ldr	r0, [pc, #68]	@ (800c29c <tcp_input+0x288>)
 800c258:	f007 f800 	bl	801325c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	7d1b      	ldrb	r3, [r3, #20]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d105      	bne.n	800c270 <tcp_input+0x25c>
 800c264:	4b0b      	ldr	r3, [pc, #44]	@ (800c294 <tcp_input+0x280>)
 800c266:	22fd      	movs	r2, #253	@ 0xfd
 800c268:	491c      	ldr	r1, [pc, #112]	@ (800c2dc <tcp_input+0x2c8>)
 800c26a:	480c      	ldr	r0, [pc, #48]	@ (800c29c <tcp_input+0x288>)
 800c26c:	f006 fff6 	bl	801325c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	7a1b      	ldrb	r3, [r3, #8]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d033      	beq.n	800c2e0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	7a1a      	ldrb	r2, [r3, #8]
 800c27c:	4b09      	ldr	r3, [pc, #36]	@ (800c2a4 <tcp_input+0x290>)
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c284:	3301      	adds	r3, #1
 800c286:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c288:	429a      	cmp	r2, r3
 800c28a:	d029      	beq.n	800c2e0 <tcp_input+0x2cc>
      prev = pcb;
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	61bb      	str	r3, [r7, #24]
      continue;
 800c290:	e06b      	b.n	800c36a <tcp_input+0x356>
 800c292:	bf00      	nop
 800c294:	08015950 	.word	0x08015950
 800c298:	08015984 	.word	0x08015984
 800c29c:	0801599c 	.word	0x0801599c
 800c2a0:	200089ec 	.word	0x200089ec
 800c2a4:	20005694 	.word	0x20005694
 800c2a8:	200089f0 	.word	0x200089f0
 800c2ac:	200089f4 	.word	0x200089f4
 800c2b0:	200089f2 	.word	0x200089f2
 800c2b4:	080159c4 	.word	0x080159c4
 800c2b8:	080159d4 	.word	0x080159d4
 800c2bc:	080159e0 	.word	0x080159e0
 800c2c0:	200089fc 	.word	0x200089fc
 800c2c4:	20008a00 	.word	0x20008a00
 800c2c8:	20008a08 	.word	0x20008a08
 800c2cc:	20008a06 	.word	0x20008a06
 800c2d0:	200089d0 	.word	0x200089d0
 800c2d4:	08015a00 	.word	0x08015a00
 800c2d8:	08015a28 	.word	0x08015a28
 800c2dc:	08015a54 	.word	0x08015a54
    }

    if (pcb->remote_port == tcphdr->src &&
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	8b1a      	ldrh	r2, [r3, #24]
 800c2e4:	4b72      	ldr	r3, [pc, #456]	@ (800c4b0 <tcp_input+0x49c>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	881b      	ldrh	r3, [r3, #0]
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d13a      	bne.n	800c366 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	8ada      	ldrh	r2, [r3, #22]
 800c2f4:	4b6e      	ldr	r3, [pc, #440]	@ (800c4b0 <tcp_input+0x49c>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	885b      	ldrh	r3, [r3, #2]
 800c2fa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d132      	bne.n	800c366 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	685a      	ldr	r2, [r3, #4]
 800c304:	4b6b      	ldr	r3, [pc, #428]	@ (800c4b4 <tcp_input+0x4a0>)
 800c306:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c308:	429a      	cmp	r2, r3
 800c30a:	d12c      	bne.n	800c366 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	4b68      	ldr	r3, [pc, #416]	@ (800c4b4 <tcp_input+0x4a0>)
 800c312:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c314:	429a      	cmp	r2, r3
 800c316:	d126      	bne.n	800c366 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	69fa      	ldr	r2, [r7, #28]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d106      	bne.n	800c330 <tcp_input+0x31c>
 800c322:	4b65      	ldr	r3, [pc, #404]	@ (800c4b8 <tcp_input+0x4a4>)
 800c324:	f240 120d 	movw	r2, #269	@ 0x10d
 800c328:	4964      	ldr	r1, [pc, #400]	@ (800c4bc <tcp_input+0x4a8>)
 800c32a:	4865      	ldr	r0, [pc, #404]	@ (800c4c0 <tcp_input+0x4ac>)
 800c32c:	f006 ff96 	bl	801325c <iprintf>
      if (prev != NULL) {
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00a      	beq.n	800c34c <tcp_input+0x338>
        prev->next = pcb->next;
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	68da      	ldr	r2, [r3, #12]
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c33e:	4b61      	ldr	r3, [pc, #388]	@ (800c4c4 <tcp_input+0x4b0>)
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c346:	4a5f      	ldr	r2, [pc, #380]	@ (800c4c4 <tcp_input+0x4b0>)
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	69fa      	ldr	r2, [r7, #28]
 800c352:	429a      	cmp	r2, r3
 800c354:	d111      	bne.n	800c37a <tcp_input+0x366>
 800c356:	4b58      	ldr	r3, [pc, #352]	@ (800c4b8 <tcp_input+0x4a4>)
 800c358:	f240 1215 	movw	r2, #277	@ 0x115
 800c35c:	495a      	ldr	r1, [pc, #360]	@ (800c4c8 <tcp_input+0x4b4>)
 800c35e:	4858      	ldr	r0, [pc, #352]	@ (800c4c0 <tcp_input+0x4ac>)
 800c360:	f006 ff7c 	bl	801325c <iprintf>
      break;
 800c364:	e009      	b.n	800c37a <tcp_input+0x366>
    }
    prev = pcb;
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	61fb      	str	r3, [r7, #28]
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	2b00      	cmp	r3, #0
 800c374:	f47f af5e 	bne.w	800c234 <tcp_input+0x220>
 800c378:	e000      	b.n	800c37c <tcp_input+0x368>
      break;
 800c37a:	bf00      	nop
  }

  if (pcb == NULL) {
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f040 80aa 	bne.w	800c4d8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c384:	4b51      	ldr	r3, [pc, #324]	@ (800c4cc <tcp_input+0x4b8>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	61fb      	str	r3, [r7, #28]
 800c38a:	e03f      	b.n	800c40c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	7d1b      	ldrb	r3, [r3, #20]
 800c390:	2b0a      	cmp	r3, #10
 800c392:	d006      	beq.n	800c3a2 <tcp_input+0x38e>
 800c394:	4b48      	ldr	r3, [pc, #288]	@ (800c4b8 <tcp_input+0x4a4>)
 800c396:	f240 121f 	movw	r2, #287	@ 0x11f
 800c39a:	494d      	ldr	r1, [pc, #308]	@ (800c4d0 <tcp_input+0x4bc>)
 800c39c:	4848      	ldr	r0, [pc, #288]	@ (800c4c0 <tcp_input+0x4ac>)
 800c39e:	f006 ff5d 	bl	801325c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	7a1b      	ldrb	r3, [r3, #8]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d009      	beq.n	800c3be <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	7a1a      	ldrb	r2, [r3, #8]
 800c3ae:	4b41      	ldr	r3, [pc, #260]	@ (800c4b4 <tcp_input+0x4a0>)
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d122      	bne.n	800c404 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	8b1a      	ldrh	r2, [r3, #24]
 800c3c2:	4b3b      	ldr	r3, [pc, #236]	@ (800c4b0 <tcp_input+0x49c>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	881b      	ldrh	r3, [r3, #0]
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d11b      	bne.n	800c406 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	8ada      	ldrh	r2, [r3, #22]
 800c3d2:	4b37      	ldr	r3, [pc, #220]	@ (800c4b0 <tcp_input+0x49c>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	885b      	ldrh	r3, [r3, #2]
 800c3d8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d113      	bne.n	800c406 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	685a      	ldr	r2, [r3, #4]
 800c3e2:	4b34      	ldr	r3, [pc, #208]	@ (800c4b4 <tcp_input+0x4a0>)
 800c3e4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d10d      	bne.n	800c406 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	4b31      	ldr	r3, [pc, #196]	@ (800c4b4 <tcp_input+0x4a0>)
 800c3f0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d107      	bne.n	800c406 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c3f6:	69f8      	ldr	r0, [r7, #28]
 800c3f8:	f000 fb56 	bl	800caa8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f7fd ff3d 	bl	800a27c <pbuf_free>
        return;
 800c402:	e1fd      	b.n	800c800 <tcp_input+0x7ec>
        continue;
 800c404:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	61fb      	str	r3, [r7, #28]
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d1bc      	bne.n	800c38c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c412:	2300      	movs	r3, #0
 800c414:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c416:	4b2f      	ldr	r3, [pc, #188]	@ (800c4d4 <tcp_input+0x4c0>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	617b      	str	r3, [r7, #20]
 800c41c:	e02a      	b.n	800c474 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	7a1b      	ldrb	r3, [r3, #8]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00c      	beq.n	800c440 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	7a1a      	ldrb	r2, [r3, #8]
 800c42a:	4b22      	ldr	r3, [pc, #136]	@ (800c4b4 <tcp_input+0x4a0>)
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c432:	3301      	adds	r3, #1
 800c434:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c436:	429a      	cmp	r2, r3
 800c438:	d002      	beq.n	800c440 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	61bb      	str	r3, [r7, #24]
        continue;
 800c43e:	e016      	b.n	800c46e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	8ada      	ldrh	r2, [r3, #22]
 800c444:	4b1a      	ldr	r3, [pc, #104]	@ (800c4b0 <tcp_input+0x49c>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	885b      	ldrh	r3, [r3, #2]
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d10c      	bne.n	800c46a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	4b17      	ldr	r3, [pc, #92]	@ (800c4b4 <tcp_input+0x4a0>)
 800c456:	695b      	ldr	r3, [r3, #20]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d00f      	beq.n	800c47c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00d      	beq.n	800c47e <tcp_input+0x46a>
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d009      	beq.n	800c47e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	617b      	str	r3, [r7, #20]
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1d1      	bne.n	800c41e <tcp_input+0x40a>
 800c47a:	e000      	b.n	800c47e <tcp_input+0x46a>
            break;
 800c47c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d029      	beq.n	800c4d8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00a      	beq.n	800c4a0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	68da      	ldr	r2, [r3, #12]
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c492:	4b10      	ldr	r3, [pc, #64]	@ (800c4d4 <tcp_input+0x4c0>)
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c49a:	4a0e      	ldr	r2, [pc, #56]	@ (800c4d4 <tcp_input+0x4c0>)
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c4a0:	6978      	ldr	r0, [r7, #20]
 800c4a2:	f000 fa03 	bl	800c8ac <tcp_listen_input>
      }
      pbuf_free(p);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f7fd fee8 	bl	800a27c <pbuf_free>
      return;
 800c4ac:	e1a8      	b.n	800c800 <tcp_input+0x7ec>
 800c4ae:	bf00      	nop
 800c4b0:	200089ec 	.word	0x200089ec
 800c4b4:	20005694 	.word	0x20005694
 800c4b8:	08015950 	.word	0x08015950
 800c4bc:	08015a7c 	.word	0x08015a7c
 800c4c0:	0801599c 	.word	0x0801599c
 800c4c4:	200089d0 	.word	0x200089d0
 800c4c8:	08015aa8 	.word	0x08015aa8
 800c4cc:	200089d4 	.word	0x200089d4
 800c4d0:	08015ad4 	.word	0x08015ad4
 800c4d4:	200089cc 	.word	0x200089cc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f000 8158 	beq.w	800c790 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c4e0:	4b95      	ldr	r3, [pc, #596]	@ (800c738 <tcp_input+0x724>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	891a      	ldrh	r2, [r3, #8]
 800c4ea:	4b93      	ldr	r3, [pc, #588]	@ (800c738 <tcp_input+0x724>)
 800c4ec:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c4ee:	4a92      	ldr	r2, [pc, #584]	@ (800c738 <tcp_input+0x724>)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c4f4:	4b91      	ldr	r3, [pc, #580]	@ (800c73c <tcp_input+0x728>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a8f      	ldr	r2, [pc, #572]	@ (800c738 <tcp_input+0x724>)
 800c4fa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c4fc:	4b90      	ldr	r3, [pc, #576]	@ (800c740 <tcp_input+0x72c>)
 800c4fe:	2200      	movs	r2, #0
 800c500:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c502:	4b90      	ldr	r3, [pc, #576]	@ (800c744 <tcp_input+0x730>)
 800c504:	2200      	movs	r2, #0
 800c506:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c508:	4b8f      	ldr	r3, [pc, #572]	@ (800c748 <tcp_input+0x734>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c50e:	4b8f      	ldr	r3, [pc, #572]	@ (800c74c <tcp_input+0x738>)
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	f003 0308 	and.w	r3, r3, #8
 800c516:	2b00      	cmp	r3, #0
 800c518:	d006      	beq.n	800c528 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	7b5b      	ldrb	r3, [r3, #13]
 800c51e:	f043 0301 	orr.w	r3, r3, #1
 800c522:	b2da      	uxtb	r2, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d017      	beq.n	800c560 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c530:	69f8      	ldr	r0, [r7, #28]
 800c532:	f7ff f929 	bl	800b788 <tcp_process_refused_data>
 800c536:	4603      	mov	r3, r0
 800c538:	f113 0f0d 	cmn.w	r3, #13
 800c53c:	d007      	beq.n	800c54e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c542:	2b00      	cmp	r3, #0
 800c544:	d00c      	beq.n	800c560 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c546:	4b82      	ldr	r3, [pc, #520]	@ (800c750 <tcp_input+0x73c>)
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d008      	beq.n	800c560 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c54e:	69fb      	ldr	r3, [r7, #28]
 800c550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c552:	2b00      	cmp	r3, #0
 800c554:	f040 80e3 	bne.w	800c71e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c558:	69f8      	ldr	r0, [r7, #28]
 800c55a:	f003 f9a7 	bl	800f8ac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c55e:	e0de      	b.n	800c71e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800c560:	4a7c      	ldr	r2, [pc, #496]	@ (800c754 <tcp_input+0x740>)
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c566:	69f8      	ldr	r0, [r7, #28]
 800c568:	f000 fb18 	bl	800cb9c <tcp_process>
 800c56c:	4603      	mov	r3, r0
 800c56e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c570:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c574:	f113 0f0d 	cmn.w	r3, #13
 800c578:	f000 80d3 	beq.w	800c722 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800c57c:	4b71      	ldr	r3, [pc, #452]	@ (800c744 <tcp_input+0x730>)
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	f003 0308 	and.w	r3, r3, #8
 800c584:	2b00      	cmp	r3, #0
 800c586:	d015      	beq.n	800c5b4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d008      	beq.n	800c5a4 <tcp_input+0x590>
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c598:	69fa      	ldr	r2, [r7, #28]
 800c59a:	6912      	ldr	r2, [r2, #16]
 800c59c:	f06f 010d 	mvn.w	r1, #13
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c5a4:	69f9      	ldr	r1, [r7, #28]
 800c5a6:	486c      	ldr	r0, [pc, #432]	@ (800c758 <tcp_input+0x744>)
 800c5a8:	f7ff fbbc 	bl	800bd24 <tcp_pcb_remove>
        tcp_free(pcb);
 800c5ac:	69f8      	ldr	r0, [r7, #28]
 800c5ae:	f7fe f9a7 	bl	800a900 <tcp_free>
 800c5b2:	e0da      	b.n	800c76a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c5b8:	4b63      	ldr	r3, [pc, #396]	@ (800c748 <tcp_input+0x734>)
 800c5ba:	881b      	ldrh	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d01d      	beq.n	800c5fc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c5c0:	4b61      	ldr	r3, [pc, #388]	@ (800c748 <tcp_input+0x734>)
 800c5c2:	881b      	ldrh	r3, [r3, #0]
 800c5c4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00a      	beq.n	800c5e6 <tcp_input+0x5d2>
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5d6:	69fa      	ldr	r2, [r7, #28]
 800c5d8:	6910      	ldr	r0, [r2, #16]
 800c5da:	89fa      	ldrh	r2, [r7, #14]
 800c5dc:	69f9      	ldr	r1, [r7, #28]
 800c5de:	4798      	blx	r3
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	74fb      	strb	r3, [r7, #19]
 800c5e4:	e001      	b.n	800c5ea <tcp_input+0x5d6>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c5ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c5ee:	f113 0f0d 	cmn.w	r3, #13
 800c5f2:	f000 8098 	beq.w	800c726 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c5f6:	4b54      	ldr	r3, [pc, #336]	@ (800c748 <tcp_input+0x734>)
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c5fc:	69f8      	ldr	r0, [r7, #28]
 800c5fe:	f000 f915 	bl	800c82c <tcp_input_delayed_close>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	f040 8090 	bne.w	800c72a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c60a:	4b4d      	ldr	r3, [pc, #308]	@ (800c740 <tcp_input+0x72c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d041      	beq.n	800c696 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c616:	2b00      	cmp	r3, #0
 800c618:	d006      	beq.n	800c628 <tcp_input+0x614>
 800c61a:	4b50      	ldr	r3, [pc, #320]	@ (800c75c <tcp_input+0x748>)
 800c61c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c620:	494f      	ldr	r1, [pc, #316]	@ (800c760 <tcp_input+0x74c>)
 800c622:	4850      	ldr	r0, [pc, #320]	@ (800c764 <tcp_input+0x750>)
 800c624:	f006 fe1a 	bl	801325c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	8b5b      	ldrh	r3, [r3, #26]
 800c62c:	f003 0310 	and.w	r3, r3, #16
 800c630:	2b00      	cmp	r3, #0
 800c632:	d008      	beq.n	800c646 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c634:	4b42      	ldr	r3, [pc, #264]	@ (800c740 <tcp_input+0x72c>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4618      	mov	r0, r3
 800c63a:	f7fd fe1f 	bl	800a27c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c63e:	69f8      	ldr	r0, [r7, #28]
 800c640:	f7fe fc46 	bl	800aed0 <tcp_abort>
            goto aborted;
 800c644:	e091      	b.n	800c76a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00c      	beq.n	800c66a <tcp_input+0x656>
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	6918      	ldr	r0, [r3, #16]
 800c65a:	4b39      	ldr	r3, [pc, #228]	@ (800c740 <tcp_input+0x72c>)
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	2300      	movs	r3, #0
 800c660:	69f9      	ldr	r1, [r7, #28]
 800c662:	47a0      	blx	r4
 800c664:	4603      	mov	r3, r0
 800c666:	74fb      	strb	r3, [r7, #19]
 800c668:	e008      	b.n	800c67c <tcp_input+0x668>
 800c66a:	4b35      	ldr	r3, [pc, #212]	@ (800c740 <tcp_input+0x72c>)
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	2300      	movs	r3, #0
 800c670:	69f9      	ldr	r1, [r7, #28]
 800c672:	2000      	movs	r0, #0
 800c674:	f7ff f95e 	bl	800b934 <tcp_recv_null>
 800c678:	4603      	mov	r3, r0
 800c67a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c67c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c680:	f113 0f0d 	cmn.w	r3, #13
 800c684:	d053      	beq.n	800c72e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c686:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d003      	beq.n	800c696 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c68e:	4b2c      	ldr	r3, [pc, #176]	@ (800c740 <tcp_input+0x72c>)
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c696:	4b2b      	ldr	r3, [pc, #172]	@ (800c744 <tcp_input+0x730>)
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	f003 0320 	and.w	r3, r3, #32
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d030      	beq.n	800c704 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d009      	beq.n	800c6be <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c6ae:	7b5a      	ldrb	r2, [r3, #13]
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c6b4:	f042 0220 	orr.w	r2, r2, #32
 800c6b8:	b2d2      	uxtb	r2, r2
 800c6ba:	735a      	strb	r2, [r3, #13]
 800c6bc:	e022      	b.n	800c704 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6c2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c6c6:	d005      	beq.n	800c6d4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	b29a      	uxth	r2, r3
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00b      	beq.n	800c6f6 <tcp_input+0x6e2>
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	6918      	ldr	r0, [r3, #16]
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	69f9      	ldr	r1, [r7, #28]
 800c6ee:	47a0      	blx	r4
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	74fb      	strb	r3, [r7, #19]
 800c6f4:	e001      	b.n	800c6fa <tcp_input+0x6e6>
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c6fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6fe:	f113 0f0d 	cmn.w	r3, #13
 800c702:	d016      	beq.n	800c732 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c704:	4b13      	ldr	r3, [pc, #76]	@ (800c754 <tcp_input+0x740>)
 800c706:	2200      	movs	r2, #0
 800c708:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c70a:	69f8      	ldr	r0, [r7, #28]
 800c70c:	f000 f88e 	bl	800c82c <tcp_input_delayed_close>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d128      	bne.n	800c768 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c716:	69f8      	ldr	r0, [r7, #28]
 800c718:	f002 fac2 	bl	800eca0 <tcp_output>
 800c71c:	e025      	b.n	800c76a <tcp_input+0x756>
        goto aborted;
 800c71e:	bf00      	nop
 800c720:	e023      	b.n	800c76a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c722:	bf00      	nop
 800c724:	e021      	b.n	800c76a <tcp_input+0x756>
              goto aborted;
 800c726:	bf00      	nop
 800c728:	e01f      	b.n	800c76a <tcp_input+0x756>
          goto aborted;
 800c72a:	bf00      	nop
 800c72c:	e01d      	b.n	800c76a <tcp_input+0x756>
            goto aborted;
 800c72e:	bf00      	nop
 800c730:	e01b      	b.n	800c76a <tcp_input+0x756>
              goto aborted;
 800c732:	bf00      	nop
 800c734:	e019      	b.n	800c76a <tcp_input+0x756>
 800c736:	bf00      	nop
 800c738:	200089dc 	.word	0x200089dc
 800c73c:	200089ec 	.word	0x200089ec
 800c740:	20008a0c 	.word	0x20008a0c
 800c744:	20008a09 	.word	0x20008a09
 800c748:	20008a04 	.word	0x20008a04
 800c74c:	20008a08 	.word	0x20008a08
 800c750:	20008a06 	.word	0x20008a06
 800c754:	20008a10 	.word	0x20008a10
 800c758:	200089d0 	.word	0x200089d0
 800c75c:	08015950 	.word	0x08015950
 800c760:	08015b04 	.word	0x08015b04
 800c764:	0801599c 	.word	0x0801599c
          goto aborted;
 800c768:	bf00      	nop
    tcp_input_pcb = NULL;
 800c76a:	4b27      	ldr	r3, [pc, #156]	@ (800c808 <tcp_input+0x7f4>)
 800c76c:	2200      	movs	r2, #0
 800c76e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c770:	4b26      	ldr	r3, [pc, #152]	@ (800c80c <tcp_input+0x7f8>)
 800c772:	2200      	movs	r2, #0
 800c774:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c776:	4b26      	ldr	r3, [pc, #152]	@ (800c810 <tcp_input+0x7fc>)
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d03f      	beq.n	800c7fe <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800c77e:	4b24      	ldr	r3, [pc, #144]	@ (800c810 <tcp_input+0x7fc>)
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	4618      	mov	r0, r3
 800c784:	f7fd fd7a 	bl	800a27c <pbuf_free>
      inseg.p = NULL;
 800c788:	4b21      	ldr	r3, [pc, #132]	@ (800c810 <tcp_input+0x7fc>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c78e:	e036      	b.n	800c7fe <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c790:	4b20      	ldr	r3, [pc, #128]	@ (800c814 <tcp_input+0x800>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	899b      	ldrh	r3, [r3, #12]
 800c796:	b29b      	uxth	r3, r3
 800c798:	4618      	mov	r0, r3
 800c79a:	f7fc fa11 	bl	8008bc0 <lwip_htons>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	f003 0304 	and.w	r3, r3, #4
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d118      	bne.n	800c7dc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7aa:	4b1b      	ldr	r3, [pc, #108]	@ (800c818 <tcp_input+0x804>)
 800c7ac:	6819      	ldr	r1, [r3, #0]
 800c7ae:	4b1b      	ldr	r3, [pc, #108]	@ (800c81c <tcp_input+0x808>)
 800c7b0:	881b      	ldrh	r3, [r3, #0]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	4b1a      	ldr	r3, [pc, #104]	@ (800c820 <tcp_input+0x80c>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7ba:	4b16      	ldr	r3, [pc, #88]	@ (800c814 <tcp_input+0x800>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7be:	885b      	ldrh	r3, [r3, #2]
 800c7c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7c2:	4a14      	ldr	r2, [pc, #80]	@ (800c814 <tcp_input+0x800>)
 800c7c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7c6:	8812      	ldrh	r2, [r2, #0]
 800c7c8:	b292      	uxth	r2, r2
 800c7ca:	9202      	str	r2, [sp, #8]
 800c7cc:	9301      	str	r3, [sp, #4]
 800c7ce:	4b15      	ldr	r3, [pc, #84]	@ (800c824 <tcp_input+0x810>)
 800c7d0:	9300      	str	r3, [sp, #0]
 800c7d2:	4b15      	ldr	r3, [pc, #84]	@ (800c828 <tcp_input+0x814>)
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	f003 f816 	bl	800f808 <tcp_rst>
    pbuf_free(p);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f7fd fd4d 	bl	800a27c <pbuf_free>
  return;
 800c7e2:	e00c      	b.n	800c7fe <tcp_input+0x7ea>
    goto dropped;
 800c7e4:	bf00      	nop
 800c7e6:	e006      	b.n	800c7f6 <tcp_input+0x7e2>
    goto dropped;
 800c7e8:	bf00      	nop
 800c7ea:	e004      	b.n	800c7f6 <tcp_input+0x7e2>
    goto dropped;
 800c7ec:	bf00      	nop
 800c7ee:	e002      	b.n	800c7f6 <tcp_input+0x7e2>
      goto dropped;
 800c7f0:	bf00      	nop
 800c7f2:	e000      	b.n	800c7f6 <tcp_input+0x7e2>
      goto dropped;
 800c7f4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f7fd fd40 	bl	800a27c <pbuf_free>
 800c7fc:	e000      	b.n	800c800 <tcp_input+0x7ec>
  return;
 800c7fe:	bf00      	nop
}
 800c800:	3724      	adds	r7, #36	@ 0x24
 800c802:	46bd      	mov	sp, r7
 800c804:	bd90      	pop	{r4, r7, pc}
 800c806:	bf00      	nop
 800c808:	20008a10 	.word	0x20008a10
 800c80c:	20008a0c 	.word	0x20008a0c
 800c810:	200089dc 	.word	0x200089dc
 800c814:	200089ec 	.word	0x200089ec
 800c818:	20008a00 	.word	0x20008a00
 800c81c:	20008a06 	.word	0x20008a06
 800c820:	200089fc 	.word	0x200089fc
 800c824:	200056a4 	.word	0x200056a4
 800c828:	200056a8 	.word	0x200056a8

0800c82c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d106      	bne.n	800c848 <tcp_input_delayed_close+0x1c>
 800c83a:	4b17      	ldr	r3, [pc, #92]	@ (800c898 <tcp_input_delayed_close+0x6c>)
 800c83c:	f240 225a 	movw	r2, #602	@ 0x25a
 800c840:	4916      	ldr	r1, [pc, #88]	@ (800c89c <tcp_input_delayed_close+0x70>)
 800c842:	4817      	ldr	r0, [pc, #92]	@ (800c8a0 <tcp_input_delayed_close+0x74>)
 800c844:	f006 fd0a 	bl	801325c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c848:	4b16      	ldr	r3, [pc, #88]	@ (800c8a4 <tcp_input_delayed_close+0x78>)
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	f003 0310 	and.w	r3, r3, #16
 800c850:	2b00      	cmp	r3, #0
 800c852:	d01c      	beq.n	800c88e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	8b5b      	ldrh	r3, [r3, #26]
 800c858:	f003 0310 	and.w	r3, r3, #16
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d10d      	bne.n	800c87c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c866:	2b00      	cmp	r3, #0
 800c868:	d008      	beq.n	800c87c <tcp_input_delayed_close+0x50>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	6912      	ldr	r2, [r2, #16]
 800c874:	f06f 010e 	mvn.w	r1, #14
 800c878:	4610      	mov	r0, r2
 800c87a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c87c:	6879      	ldr	r1, [r7, #4]
 800c87e:	480a      	ldr	r0, [pc, #40]	@ (800c8a8 <tcp_input_delayed_close+0x7c>)
 800c880:	f7ff fa50 	bl	800bd24 <tcp_pcb_remove>
    tcp_free(pcb);
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f7fe f83b 	bl	800a900 <tcp_free>
    return 1;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e000      	b.n	800c890 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c88e:	2300      	movs	r3, #0
}
 800c890:	4618      	mov	r0, r3
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	08015950 	.word	0x08015950
 800c89c:	08015b20 	.word	0x08015b20
 800c8a0:	0801599c 	.word	0x0801599c
 800c8a4:	20008a09 	.word	0x20008a09
 800c8a8:	200089d0 	.word	0x200089d0

0800c8ac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c8ac:	b590      	push	{r4, r7, lr}
 800c8ae:	b08b      	sub	sp, #44	@ 0x2c
 800c8b0:	af04      	add	r7, sp, #16
 800c8b2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c8b4:	4b6f      	ldr	r3, [pc, #444]	@ (800ca74 <tcp_listen_input+0x1c8>)
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f040 80d2 	bne.w	800ca66 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d106      	bne.n	800c8d6 <tcp_listen_input+0x2a>
 800c8c8:	4b6b      	ldr	r3, [pc, #428]	@ (800ca78 <tcp_listen_input+0x1cc>)
 800c8ca:	f240 2281 	movw	r2, #641	@ 0x281
 800c8ce:	496b      	ldr	r1, [pc, #428]	@ (800ca7c <tcp_listen_input+0x1d0>)
 800c8d0:	486b      	ldr	r0, [pc, #428]	@ (800ca80 <tcp_listen_input+0x1d4>)
 800c8d2:	f006 fcc3 	bl	801325c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c8d6:	4b67      	ldr	r3, [pc, #412]	@ (800ca74 <tcp_listen_input+0x1c8>)
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	f003 0310 	and.w	r3, r3, #16
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d019      	beq.n	800c916 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8e2:	4b68      	ldr	r3, [pc, #416]	@ (800ca84 <tcp_listen_input+0x1d8>)
 800c8e4:	6819      	ldr	r1, [r3, #0]
 800c8e6:	4b68      	ldr	r3, [pc, #416]	@ (800ca88 <tcp_listen_input+0x1dc>)
 800c8e8:	881b      	ldrh	r3, [r3, #0]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	4b67      	ldr	r3, [pc, #412]	@ (800ca8c <tcp_listen_input+0x1e0>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c8f2:	4b67      	ldr	r3, [pc, #412]	@ (800ca90 <tcp_listen_input+0x1e4>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8f6:	885b      	ldrh	r3, [r3, #2]
 800c8f8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c8fa:	4a65      	ldr	r2, [pc, #404]	@ (800ca90 <tcp_listen_input+0x1e4>)
 800c8fc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8fe:	8812      	ldrh	r2, [r2, #0]
 800c900:	b292      	uxth	r2, r2
 800c902:	9202      	str	r2, [sp, #8]
 800c904:	9301      	str	r3, [sp, #4]
 800c906:	4b63      	ldr	r3, [pc, #396]	@ (800ca94 <tcp_listen_input+0x1e8>)
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	4b63      	ldr	r3, [pc, #396]	@ (800ca98 <tcp_listen_input+0x1ec>)
 800c90c:	4602      	mov	r2, r0
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f002 ff7a 	bl	800f808 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c914:	e0a9      	b.n	800ca6a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c916:	4b57      	ldr	r3, [pc, #348]	@ (800ca74 <tcp_listen_input+0x1c8>)
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	f003 0302 	and.w	r3, r3, #2
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f000 80a3 	beq.w	800ca6a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	7d5b      	ldrb	r3, [r3, #21]
 800c928:	4618      	mov	r0, r3
 800c92a:	f7ff f927 	bl	800bb7c <tcp_alloc>
 800c92e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d111      	bne.n	800c95a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	699b      	ldr	r3, [r3, #24]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d00a      	beq.n	800c954 <tcp_listen_input+0xa8>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	699b      	ldr	r3, [r3, #24]
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	6910      	ldr	r0, [r2, #16]
 800c946:	f04f 32ff 	mov.w	r2, #4294967295
 800c94a:	2100      	movs	r1, #0
 800c94c:	4798      	blx	r3
 800c94e:	4603      	mov	r3, r0
 800c950:	73bb      	strb	r3, [r7, #14]
      return;
 800c952:	e08b      	b.n	800ca6c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c954:	23f0      	movs	r3, #240	@ 0xf0
 800c956:	73bb      	strb	r3, [r7, #14]
      return;
 800c958:	e088      	b.n	800ca6c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c95a:	4b50      	ldr	r3, [pc, #320]	@ (800ca9c <tcp_listen_input+0x1f0>)
 800c95c:	695a      	ldr	r2, [r3, #20]
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c962:	4b4e      	ldr	r3, [pc, #312]	@ (800ca9c <tcp_listen_input+0x1f0>)
 800c964:	691a      	ldr	r2, [r3, #16]
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	8ada      	ldrh	r2, [r3, #22]
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c972:	4b47      	ldr	r3, [pc, #284]	@ (800ca90 <tcp_listen_input+0x1e4>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	881b      	ldrh	r3, [r3, #0]
 800c978:	b29a      	uxth	r2, r3
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	2203      	movs	r2, #3
 800c982:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c984:	4b41      	ldr	r3, [pc, #260]	@ (800ca8c <tcp_listen_input+0x1e0>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	1c5a      	adds	r2, r3, #1
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800c996:	6978      	ldr	r0, [r7, #20]
 800c998:	f7ff fa58 	bl	800be4c <tcp_next_iss>
 800c99c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	693a      	ldr	r2, [r7, #16]
 800c9a2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	693a      	ldr	r2, [r7, #16]
 800c9ae:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c9b6:	4b35      	ldr	r3, [pc, #212]	@ (800ca8c <tcp_listen_input+0x1e0>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	1e5a      	subs	r2, r3, #1
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	691a      	ldr	r2, [r3, #16]
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	7a5b      	ldrb	r3, [r3, #9]
 800c9d2:	f003 030c 	and.w	r3, r3, #12
 800c9d6:	b2da      	uxtb	r2, r3
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	7a1a      	ldrb	r2, [r3, #8]
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c9e4:	4b2e      	ldr	r3, [pc, #184]	@ (800caa0 <tcp_listen_input+0x1f4>)
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	60da      	str	r2, [r3, #12]
 800c9ec:	4a2c      	ldr	r2, [pc, #176]	@ (800caa0 <tcp_listen_input+0x1f4>)
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	6013      	str	r3, [r2, #0]
 800c9f2:	f003 f8cb 	bl	800fb8c <tcp_timer_needed>
 800c9f6:	4b2b      	ldr	r3, [pc, #172]	@ (800caa4 <tcp_listen_input+0x1f8>)
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c9fc:	6978      	ldr	r0, [r7, #20]
 800c9fe:	f001 fd8b 	bl	800e518 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ca02:	4b23      	ldr	r3, [pc, #140]	@ (800ca90 <tcp_listen_input+0x1e4>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	89db      	ldrh	r3, [r3, #14]
 800ca08:	b29a      	uxth	r2, r3
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	3304      	adds	r3, #4
 800ca24:	4618      	mov	r0, r3
 800ca26:	f004 ffdf 	bl	80119e8 <ip4_route>
 800ca2a:	4601      	mov	r1, r0
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	3304      	adds	r3, #4
 800ca30:	461a      	mov	r2, r3
 800ca32:	4620      	mov	r0, r4
 800ca34:	f7ff fa30 	bl	800be98 <tcp_eff_send_mss_netif>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ca40:	2112      	movs	r1, #18
 800ca42:	6978      	ldr	r0, [r7, #20]
 800ca44:	f002 f83e 	bl	800eac4 <tcp_enqueue_flags>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ca4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d004      	beq.n	800ca5e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ca54:	2100      	movs	r1, #0
 800ca56:	6978      	ldr	r0, [r7, #20]
 800ca58:	f7fe f97c 	bl	800ad54 <tcp_abandon>
      return;
 800ca5c:	e006      	b.n	800ca6c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ca5e:	6978      	ldr	r0, [r7, #20]
 800ca60:	f002 f91e 	bl	800eca0 <tcp_output>
  return;
 800ca64:	e001      	b.n	800ca6a <tcp_listen_input+0x1be>
    return;
 800ca66:	bf00      	nop
 800ca68:	e000      	b.n	800ca6c <tcp_listen_input+0x1c0>
  return;
 800ca6a:	bf00      	nop
}
 800ca6c:	371c      	adds	r7, #28
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd90      	pop	{r4, r7, pc}
 800ca72:	bf00      	nop
 800ca74:	20008a08 	.word	0x20008a08
 800ca78:	08015950 	.word	0x08015950
 800ca7c:	08015b48 	.word	0x08015b48
 800ca80:	0801599c 	.word	0x0801599c
 800ca84:	20008a00 	.word	0x20008a00
 800ca88:	20008a06 	.word	0x20008a06
 800ca8c:	200089fc 	.word	0x200089fc
 800ca90:	200089ec 	.word	0x200089ec
 800ca94:	200056a4 	.word	0x200056a4
 800ca98:	200056a8 	.word	0x200056a8
 800ca9c:	20005694 	.word	0x20005694
 800caa0:	200089d0 	.word	0x200089d0
 800caa4:	200089d8 	.word	0x200089d8

0800caa8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b086      	sub	sp, #24
 800caac:	af04      	add	r7, sp, #16
 800caae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cab0:	4b2f      	ldr	r3, [pc, #188]	@ (800cb70 <tcp_timewait_input+0xc8>)
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	f003 0304 	and.w	r3, r3, #4
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d153      	bne.n	800cb64 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d106      	bne.n	800cad0 <tcp_timewait_input+0x28>
 800cac2:	4b2c      	ldr	r3, [pc, #176]	@ (800cb74 <tcp_timewait_input+0xcc>)
 800cac4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800cac8:	492b      	ldr	r1, [pc, #172]	@ (800cb78 <tcp_timewait_input+0xd0>)
 800caca:	482c      	ldr	r0, [pc, #176]	@ (800cb7c <tcp_timewait_input+0xd4>)
 800cacc:	f006 fbc6 	bl	801325c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cad0:	4b27      	ldr	r3, [pc, #156]	@ (800cb70 <tcp_timewait_input+0xc8>)
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	f003 0302 	and.w	r3, r3, #2
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d02a      	beq.n	800cb32 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cadc:	4b28      	ldr	r3, [pc, #160]	@ (800cb80 <tcp_timewait_input+0xd8>)
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cae4:	1ad3      	subs	r3, r2, r3
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	db2d      	blt.n	800cb46 <tcp_timewait_input+0x9e>
 800caea:	4b25      	ldr	r3, [pc, #148]	@ (800cb80 <tcp_timewait_input+0xd8>)
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caf2:	6879      	ldr	r1, [r7, #4]
 800caf4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800caf6:	440b      	add	r3, r1
 800caf8:	1ad3      	subs	r3, r2, r3
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	dc23      	bgt.n	800cb46 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cafe:	4b21      	ldr	r3, [pc, #132]	@ (800cb84 <tcp_timewait_input+0xdc>)
 800cb00:	6819      	ldr	r1, [r3, #0]
 800cb02:	4b21      	ldr	r3, [pc, #132]	@ (800cb88 <tcp_timewait_input+0xe0>)
 800cb04:	881b      	ldrh	r3, [r3, #0]
 800cb06:	461a      	mov	r2, r3
 800cb08:	4b1d      	ldr	r3, [pc, #116]	@ (800cb80 <tcp_timewait_input+0xd8>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb0e:	4b1f      	ldr	r3, [pc, #124]	@ (800cb8c <tcp_timewait_input+0xe4>)
 800cb10:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb12:	885b      	ldrh	r3, [r3, #2]
 800cb14:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb16:	4a1d      	ldr	r2, [pc, #116]	@ (800cb8c <tcp_timewait_input+0xe4>)
 800cb18:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb1a:	8812      	ldrh	r2, [r2, #0]
 800cb1c:	b292      	uxth	r2, r2
 800cb1e:	9202      	str	r2, [sp, #8]
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	4b1b      	ldr	r3, [pc, #108]	@ (800cb90 <tcp_timewait_input+0xe8>)
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	4b1b      	ldr	r3, [pc, #108]	@ (800cb94 <tcp_timewait_input+0xec>)
 800cb28:	4602      	mov	r2, r0
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f002 fe6c 	bl	800f808 <tcp_rst>
      return;
 800cb30:	e01b      	b.n	800cb6a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cb32:	4b0f      	ldr	r3, [pc, #60]	@ (800cb70 <tcp_timewait_input+0xc8>)
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	f003 0301 	and.w	r3, r3, #1
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d003      	beq.n	800cb46 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cb3e:	4b16      	ldr	r3, [pc, #88]	@ (800cb98 <tcp_timewait_input+0xf0>)
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cb46:	4b10      	ldr	r3, [pc, #64]	@ (800cb88 <tcp_timewait_input+0xe0>)
 800cb48:	881b      	ldrh	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00c      	beq.n	800cb68 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	8b5b      	ldrh	r3, [r3, #26]
 800cb52:	f043 0302 	orr.w	r3, r3, #2
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f002 f89f 	bl	800eca0 <tcp_output>
  }
  return;
 800cb62:	e001      	b.n	800cb68 <tcp_timewait_input+0xc0>
    return;
 800cb64:	bf00      	nop
 800cb66:	e000      	b.n	800cb6a <tcp_timewait_input+0xc2>
  return;
 800cb68:	bf00      	nop
}
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	20008a08 	.word	0x20008a08
 800cb74:	08015950 	.word	0x08015950
 800cb78:	08015b68 	.word	0x08015b68
 800cb7c:	0801599c 	.word	0x0801599c
 800cb80:	200089fc 	.word	0x200089fc
 800cb84:	20008a00 	.word	0x20008a00
 800cb88:	20008a06 	.word	0x20008a06
 800cb8c:	200089ec 	.word	0x200089ec
 800cb90:	200056a4 	.word	0x200056a4
 800cb94:	200056a8 	.word	0x200056a8
 800cb98:	200089c4 	.word	0x200089c4

0800cb9c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cb9c:	b590      	push	{r4, r7, lr}
 800cb9e:	b08d      	sub	sp, #52	@ 0x34
 800cba0:	af04      	add	r7, sp, #16
 800cba2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d106      	bne.n	800cbc0 <tcp_process+0x24>
 800cbb2:	4b9d      	ldr	r3, [pc, #628]	@ (800ce28 <tcp_process+0x28c>)
 800cbb4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800cbb8:	499c      	ldr	r1, [pc, #624]	@ (800ce2c <tcp_process+0x290>)
 800cbba:	489d      	ldr	r0, [pc, #628]	@ (800ce30 <tcp_process+0x294>)
 800cbbc:	f006 fb4e 	bl	801325c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cbc0:	4b9c      	ldr	r3, [pc, #624]	@ (800ce34 <tcp_process+0x298>)
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	f003 0304 	and.w	r3, r3, #4
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d04e      	beq.n	800cc6a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	7d1b      	ldrb	r3, [r3, #20]
 800cbd0:	2b02      	cmp	r3, #2
 800cbd2:	d108      	bne.n	800cbe6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cbd8:	4b97      	ldr	r3, [pc, #604]	@ (800ce38 <tcp_process+0x29c>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d123      	bne.n	800cc28 <tcp_process+0x8c>
        acceptable = 1;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	76fb      	strb	r3, [r7, #27]
 800cbe4:	e020      	b.n	800cc28 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cbea:	4b94      	ldr	r3, [pc, #592]	@ (800ce3c <tcp_process+0x2a0>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d102      	bne.n	800cbf8 <tcp_process+0x5c>
        acceptable = 1;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	76fb      	strb	r3, [r7, #27]
 800cbf6:	e017      	b.n	800cc28 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cbf8:	4b90      	ldr	r3, [pc, #576]	@ (800ce3c <tcp_process+0x2a0>)
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc00:	1ad3      	subs	r3, r2, r3
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	db10      	blt.n	800cc28 <tcp_process+0x8c>
 800cc06:	4b8d      	ldr	r3, [pc, #564]	@ (800ce3c <tcp_process+0x2a0>)
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc0e:	6879      	ldr	r1, [r7, #4]
 800cc10:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cc12:	440b      	add	r3, r1
 800cc14:	1ad3      	subs	r3, r2, r3
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	dc06      	bgt.n	800cc28 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	8b5b      	ldrh	r3, [r3, #26]
 800cc1e:	f043 0302 	orr.w	r3, r3, #2
 800cc22:	b29a      	uxth	r2, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800cc28:	7efb      	ldrb	r3, [r7, #27]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d01b      	beq.n	800cc66 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	7d1b      	ldrb	r3, [r3, #20]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d106      	bne.n	800cc44 <tcp_process+0xa8>
 800cc36:	4b7c      	ldr	r3, [pc, #496]	@ (800ce28 <tcp_process+0x28c>)
 800cc38:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800cc3c:	4980      	ldr	r1, [pc, #512]	@ (800ce40 <tcp_process+0x2a4>)
 800cc3e:	487c      	ldr	r0, [pc, #496]	@ (800ce30 <tcp_process+0x294>)
 800cc40:	f006 fb0c 	bl	801325c <iprintf>
      recv_flags |= TF_RESET;
 800cc44:	4b7f      	ldr	r3, [pc, #508]	@ (800ce44 <tcp_process+0x2a8>)
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	f043 0308 	orr.w	r3, r3, #8
 800cc4c:	b2da      	uxtb	r2, r3
 800cc4e:	4b7d      	ldr	r3, [pc, #500]	@ (800ce44 <tcp_process+0x2a8>)
 800cc50:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	8b5b      	ldrh	r3, [r3, #26]
 800cc56:	f023 0301 	bic.w	r3, r3, #1
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800cc60:	f06f 030d 	mvn.w	r3, #13
 800cc64:	e37a      	b.n	800d35c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800cc66:	2300      	movs	r3, #0
 800cc68:	e378      	b.n	800d35c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800cc6a:	4b72      	ldr	r3, [pc, #456]	@ (800ce34 <tcp_process+0x298>)
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	f003 0302 	and.w	r3, r3, #2
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d010      	beq.n	800cc98 <tcp_process+0xfc>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	7d1b      	ldrb	r3, [r3, #20]
 800cc7a:	2b02      	cmp	r3, #2
 800cc7c:	d00c      	beq.n	800cc98 <tcp_process+0xfc>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	7d1b      	ldrb	r3, [r3, #20]
 800cc82:	2b03      	cmp	r3, #3
 800cc84:	d008      	beq.n	800cc98 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	8b5b      	ldrh	r3, [r3, #26]
 800cc8a:	f043 0302 	orr.w	r3, r3, #2
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	e361      	b.n	800d35c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	8b5b      	ldrh	r3, [r3, #26]
 800cc9c:	f003 0310 	and.w	r3, r3, #16
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d103      	bne.n	800ccac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800cca4:	4b68      	ldr	r3, [pc, #416]	@ (800ce48 <tcp_process+0x2ac>)
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f001 fc2b 	bl	800e518 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	7d1b      	ldrb	r3, [r3, #20]
 800ccc6:	3b02      	subs	r3, #2
 800ccc8:	2b07      	cmp	r3, #7
 800ccca:	f200 8337 	bhi.w	800d33c <tcp_process+0x7a0>
 800ccce:	a201      	add	r2, pc, #4	@ (adr r2, 800ccd4 <tcp_process+0x138>)
 800ccd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd4:	0800ccf5 	.word	0x0800ccf5
 800ccd8:	0800cf25 	.word	0x0800cf25
 800ccdc:	0800d09d 	.word	0x0800d09d
 800cce0:	0800d0c7 	.word	0x0800d0c7
 800cce4:	0800d1eb 	.word	0x0800d1eb
 800cce8:	0800d09d 	.word	0x0800d09d
 800ccec:	0800d277 	.word	0x0800d277
 800ccf0:	0800d307 	.word	0x0800d307
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ccf4:	4b4f      	ldr	r3, [pc, #316]	@ (800ce34 <tcp_process+0x298>)
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	f003 0310 	and.w	r3, r3, #16
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f000 80e4 	beq.w	800ceca <tcp_process+0x32e>
 800cd02:	4b4c      	ldr	r3, [pc, #304]	@ (800ce34 <tcp_process+0x298>)
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	f003 0302 	and.w	r3, r3, #2
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f000 80dd 	beq.w	800ceca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd14:	1c5a      	adds	r2, r3, #1
 800cd16:	4b48      	ldr	r3, [pc, #288]	@ (800ce38 <tcp_process+0x29c>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	f040 80d5 	bne.w	800ceca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800cd20:	4b46      	ldr	r3, [pc, #280]	@ (800ce3c <tcp_process+0x2a0>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	1c5a      	adds	r2, r3, #1
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800cd32:	4b41      	ldr	r3, [pc, #260]	@ (800ce38 <tcp_process+0x29c>)
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800cd3a:	4b44      	ldr	r3, [pc, #272]	@ (800ce4c <tcp_process+0x2b0>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	89db      	ldrh	r3, [r3, #14]
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cd54:	4b39      	ldr	r3, [pc, #228]	@ (800ce3c <tcp_process+0x2a0>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	1e5a      	subs	r2, r3, #1
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2204      	movs	r2, #4
 800cd62:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	3304      	adds	r3, #4
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f004 fe3b 	bl	80119e8 <ip4_route>
 800cd72:	4601      	mov	r1, r0
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	3304      	adds	r3, #4
 800cd78:	461a      	mov	r2, r3
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f7ff f88c 	bl	800be98 <tcp_eff_send_mss_netif>
 800cd80:	4603      	mov	r3, r0
 800cd82:	461a      	mov	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cd8c:	009a      	lsls	r2, r3, #2
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cd92:	005b      	lsls	r3, r3, #1
 800cd94:	f241 111c 	movw	r1, #4380	@ 0x111c
 800cd98:	428b      	cmp	r3, r1
 800cd9a:	bf38      	it	cc
 800cd9c:	460b      	movcc	r3, r1
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d204      	bcs.n	800cdac <tcp_process+0x210>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	e00d      	b.n	800cdc8 <tcp_process+0x22c>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cdb0:	005b      	lsls	r3, r3, #1
 800cdb2:	f241 121c 	movw	r2, #4380	@ 0x111c
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d904      	bls.n	800cdc4 <tcp_process+0x228>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cdbe:	005b      	lsls	r3, r3, #1
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	e001      	b.n	800cdc8 <tcp_process+0x22c>
 800cdc4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d106      	bne.n	800cde6 <tcp_process+0x24a>
 800cdd8:	4b13      	ldr	r3, [pc, #76]	@ (800ce28 <tcp_process+0x28c>)
 800cdda:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800cdde:	491c      	ldr	r1, [pc, #112]	@ (800ce50 <tcp_process+0x2b4>)
 800cde0:	4813      	ldr	r0, [pc, #76]	@ (800ce30 <tcp_process+0x294>)
 800cde2:	f006 fa3b 	bl	801325c <iprintf>
        --pcb->snd_queuelen;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cdec:	3b01      	subs	r3, #1
 800cdee:	b29a      	uxth	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdfa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d12a      	bne.n	800ce58 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce06:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d106      	bne.n	800ce1c <tcp_process+0x280>
 800ce0e:	4b06      	ldr	r3, [pc, #24]	@ (800ce28 <tcp_process+0x28c>)
 800ce10:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800ce14:	490f      	ldr	r1, [pc, #60]	@ (800ce54 <tcp_process+0x2b8>)
 800ce16:	4806      	ldr	r0, [pc, #24]	@ (800ce30 <tcp_process+0x294>)
 800ce18:	f006 fa20 	bl	801325c <iprintf>
          pcb->unsent = rseg->next;
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ce24:	e01c      	b.n	800ce60 <tcp_process+0x2c4>
 800ce26:	bf00      	nop
 800ce28:	08015950 	.word	0x08015950
 800ce2c:	08015b88 	.word	0x08015b88
 800ce30:	0801599c 	.word	0x0801599c
 800ce34:	20008a08 	.word	0x20008a08
 800ce38:	20008a00 	.word	0x20008a00
 800ce3c:	200089fc 	.word	0x200089fc
 800ce40:	08015ba4 	.word	0x08015ba4
 800ce44:	20008a09 	.word	0x20008a09
 800ce48:	200089c4 	.word	0x200089c4
 800ce4c:	200089ec 	.word	0x200089ec
 800ce50:	08015bc4 	.word	0x08015bc4
 800ce54:	08015bdc 	.word	0x08015bdc
        } else {
          pcb->unacked = rseg->next;
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800ce60:	69f8      	ldr	r0, [r7, #28]
 800ce62:	f7fe fd22 	bl	800b8aa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d104      	bne.n	800ce78 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ce74:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ce76:	e006      	b.n	800ce86 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2200      	movs	r2, #0
 800ce82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00a      	beq.n	800cea6 <tcp_process+0x30a>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	6910      	ldr	r0, [r2, #16]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	6879      	ldr	r1, [r7, #4]
 800ce9e:	4798      	blx	r3
 800cea0:	4603      	mov	r3, r0
 800cea2:	76bb      	strb	r3, [r7, #26]
 800cea4:	e001      	b.n	800ceaa <tcp_process+0x30e>
 800cea6:	2300      	movs	r3, #0
 800cea8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ceaa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ceae:	f113 0f0d 	cmn.w	r3, #13
 800ceb2:	d102      	bne.n	800ceba <tcp_process+0x31e>
          return ERR_ABRT;
 800ceb4:	f06f 030c 	mvn.w	r3, #12
 800ceb8:	e250      	b.n	800d35c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	8b5b      	ldrh	r3, [r3, #26]
 800cebe:	f043 0302 	orr.w	r3, r3, #2
 800cec2:	b29a      	uxth	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800cec8:	e23a      	b.n	800d340 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ceca:	4b98      	ldr	r3, [pc, #608]	@ (800d12c <tcp_process+0x590>)
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	f003 0310 	and.w	r3, r3, #16
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f000 8234 	beq.w	800d340 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ced8:	4b95      	ldr	r3, [pc, #596]	@ (800d130 <tcp_process+0x594>)
 800ceda:	6819      	ldr	r1, [r3, #0]
 800cedc:	4b95      	ldr	r3, [pc, #596]	@ (800d134 <tcp_process+0x598>)
 800cede:	881b      	ldrh	r3, [r3, #0]
 800cee0:	461a      	mov	r2, r3
 800cee2:	4b95      	ldr	r3, [pc, #596]	@ (800d138 <tcp_process+0x59c>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cee8:	4b94      	ldr	r3, [pc, #592]	@ (800d13c <tcp_process+0x5a0>)
 800ceea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ceec:	885b      	ldrh	r3, [r3, #2]
 800ceee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cef0:	4a92      	ldr	r2, [pc, #584]	@ (800d13c <tcp_process+0x5a0>)
 800cef2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cef4:	8812      	ldrh	r2, [r2, #0]
 800cef6:	b292      	uxth	r2, r2
 800cef8:	9202      	str	r2, [sp, #8]
 800cefa:	9301      	str	r3, [sp, #4]
 800cefc:	4b90      	ldr	r3, [pc, #576]	@ (800d140 <tcp_process+0x5a4>)
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	4b90      	ldr	r3, [pc, #576]	@ (800d144 <tcp_process+0x5a8>)
 800cf02:	4602      	mov	r2, r0
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f002 fc7f 	bl	800f808 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cf10:	2b05      	cmp	r3, #5
 800cf12:	f200 8215 	bhi.w	800d340 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f002 fa4b 	bl	800f3b8 <tcp_rexmit_rto>
      break;
 800cf22:	e20d      	b.n	800d340 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800cf24:	4b81      	ldr	r3, [pc, #516]	@ (800d12c <tcp_process+0x590>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	f003 0310 	and.w	r3, r3, #16
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f000 80a1 	beq.w	800d074 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cf32:	4b7f      	ldr	r3, [pc, #508]	@ (800d130 <tcp_process+0x594>)
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	3b01      	subs	r3, #1
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	db7e      	blt.n	800d040 <tcp_process+0x4a4>
 800cf42:	4b7b      	ldr	r3, [pc, #492]	@ (800d130 <tcp_process+0x594>)
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf4a:	1ad3      	subs	r3, r2, r3
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	dc77      	bgt.n	800d040 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2204      	movs	r2, #4
 800cf54:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d102      	bne.n	800cf64 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800cf5e:	23fa      	movs	r3, #250	@ 0xfa
 800cf60:	76bb      	strb	r3, [r7, #26]
 800cf62:	e01d      	b.n	800cfa0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf68:	699b      	ldr	r3, [r3, #24]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d106      	bne.n	800cf7c <tcp_process+0x3e0>
 800cf6e:	4b76      	ldr	r3, [pc, #472]	@ (800d148 <tcp_process+0x5ac>)
 800cf70:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800cf74:	4975      	ldr	r1, [pc, #468]	@ (800d14c <tcp_process+0x5b0>)
 800cf76:	4876      	ldr	r0, [pc, #472]	@ (800d150 <tcp_process+0x5b4>)
 800cf78:	f006 f970 	bl	801325c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf80:	699b      	ldr	r3, [r3, #24]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00a      	beq.n	800cf9c <tcp_process+0x400>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf8a:	699b      	ldr	r3, [r3, #24]
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	6910      	ldr	r0, [r2, #16]
 800cf90:	2200      	movs	r2, #0
 800cf92:	6879      	ldr	r1, [r7, #4]
 800cf94:	4798      	blx	r3
 800cf96:	4603      	mov	r3, r0
 800cf98:	76bb      	strb	r3, [r7, #26]
 800cf9a:	e001      	b.n	800cfa0 <tcp_process+0x404>
 800cf9c:	23f0      	movs	r3, #240	@ 0xf0
 800cf9e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800cfa0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00a      	beq.n	800cfbe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800cfa8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cfac:	f113 0f0d 	cmn.w	r3, #13
 800cfb0:	d002      	beq.n	800cfb8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f7fd ff8c 	bl	800aed0 <tcp_abort>
            }
            return ERR_ABRT;
 800cfb8:	f06f 030c 	mvn.w	r3, #12
 800cfbc:	e1ce      	b.n	800d35c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 fae0 	bl	800d584 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800cfc4:	4b63      	ldr	r3, [pc, #396]	@ (800d154 <tcp_process+0x5b8>)
 800cfc6:	881b      	ldrh	r3, [r3, #0]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d005      	beq.n	800cfd8 <tcp_process+0x43c>
            recv_acked--;
 800cfcc:	4b61      	ldr	r3, [pc, #388]	@ (800d154 <tcp_process+0x5b8>)
 800cfce:	881b      	ldrh	r3, [r3, #0]
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	b29a      	uxth	r2, r3
 800cfd4:	4b5f      	ldr	r3, [pc, #380]	@ (800d154 <tcp_process+0x5b8>)
 800cfd6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cfdc:	009a      	lsls	r2, r3, #2
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cfe2:	005b      	lsls	r3, r3, #1
 800cfe4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800cfe8:	428b      	cmp	r3, r1
 800cfea:	bf38      	it	cc
 800cfec:	460b      	movcc	r3, r1
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d204      	bcs.n	800cffc <tcp_process+0x460>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	e00d      	b.n	800d018 <tcp_process+0x47c>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d000:	005b      	lsls	r3, r3, #1
 800d002:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d006:	4293      	cmp	r3, r2
 800d008:	d904      	bls.n	800d014 <tcp_process+0x478>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d00e:	005b      	lsls	r3, r3, #1
 800d010:	b29b      	uxth	r3, r3
 800d012:	e001      	b.n	800d018 <tcp_process+0x47c>
 800d014:	f241 131c 	movw	r3, #4380	@ 0x111c
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d01e:	4b4e      	ldr	r3, [pc, #312]	@ (800d158 <tcp_process+0x5bc>)
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	f003 0320 	and.w	r3, r3, #32
 800d026:	2b00      	cmp	r3, #0
 800d028:	d037      	beq.n	800d09a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	8b5b      	ldrh	r3, [r3, #26]
 800d02e:	f043 0302 	orr.w	r3, r3, #2
 800d032:	b29a      	uxth	r2, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2207      	movs	r2, #7
 800d03c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d03e:	e02c      	b.n	800d09a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d040:	4b3b      	ldr	r3, [pc, #236]	@ (800d130 <tcp_process+0x594>)
 800d042:	6819      	ldr	r1, [r3, #0]
 800d044:	4b3b      	ldr	r3, [pc, #236]	@ (800d134 <tcp_process+0x598>)
 800d046:	881b      	ldrh	r3, [r3, #0]
 800d048:	461a      	mov	r2, r3
 800d04a:	4b3b      	ldr	r3, [pc, #236]	@ (800d138 <tcp_process+0x59c>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d050:	4b3a      	ldr	r3, [pc, #232]	@ (800d13c <tcp_process+0x5a0>)
 800d052:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d054:	885b      	ldrh	r3, [r3, #2]
 800d056:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d058:	4a38      	ldr	r2, [pc, #224]	@ (800d13c <tcp_process+0x5a0>)
 800d05a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d05c:	8812      	ldrh	r2, [r2, #0]
 800d05e:	b292      	uxth	r2, r2
 800d060:	9202      	str	r2, [sp, #8]
 800d062:	9301      	str	r3, [sp, #4]
 800d064:	4b36      	ldr	r3, [pc, #216]	@ (800d140 <tcp_process+0x5a4>)
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	4b36      	ldr	r3, [pc, #216]	@ (800d144 <tcp_process+0x5a8>)
 800d06a:	4602      	mov	r2, r0
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f002 fbcb 	bl	800f808 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d072:	e167      	b.n	800d344 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d074:	4b2d      	ldr	r3, [pc, #180]	@ (800d12c <tcp_process+0x590>)
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	f003 0302 	and.w	r3, r3, #2
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f000 8161 	beq.w	800d344 <tcp_process+0x7a8>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d086:	1e5a      	subs	r2, r3, #1
 800d088:	4b2b      	ldr	r3, [pc, #172]	@ (800d138 <tcp_process+0x59c>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	f040 8159 	bne.w	800d344 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f002 f9b2 	bl	800f3fc <tcp_rexmit>
      break;
 800d098:	e154      	b.n	800d344 <tcp_process+0x7a8>
 800d09a:	e153      	b.n	800d344 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 fa71 	bl	800d584 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d0a2:	4b2d      	ldr	r3, [pc, #180]	@ (800d158 <tcp_process+0x5bc>)
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	f003 0320 	and.w	r3, r3, #32
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f000 814c 	beq.w	800d348 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	8b5b      	ldrh	r3, [r3, #26]
 800d0b4:	f043 0302 	orr.w	r3, r3, #2
 800d0b8:	b29a      	uxth	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2207      	movs	r2, #7
 800d0c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d0c4:	e140      	b.n	800d348 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 fa5c 	bl	800d584 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d0cc:	4b22      	ldr	r3, [pc, #136]	@ (800d158 <tcp_process+0x5bc>)
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	f003 0320 	and.w	r3, r3, #32
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d071      	beq.n	800d1bc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d0d8:	4b14      	ldr	r3, [pc, #80]	@ (800d12c <tcp_process+0x590>)
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	f003 0310 	and.w	r3, r3, #16
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d060      	beq.n	800d1a6 <tcp_process+0x60a>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d0e8:	4b11      	ldr	r3, [pc, #68]	@ (800d130 <tcp_process+0x594>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d15a      	bne.n	800d1a6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d156      	bne.n	800d1a6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	8b5b      	ldrh	r3, [r3, #26]
 800d0fc:	f043 0302 	orr.w	r3, r3, #2
 800d100:	b29a      	uxth	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f7fe fdbc 	bl	800bc84 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d10c:	4b13      	ldr	r3, [pc, #76]	@ (800d15c <tcp_process+0x5c0>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	429a      	cmp	r2, r3
 800d114:	d105      	bne.n	800d122 <tcp_process+0x586>
 800d116:	4b11      	ldr	r3, [pc, #68]	@ (800d15c <tcp_process+0x5c0>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	4a0f      	ldr	r2, [pc, #60]	@ (800d15c <tcp_process+0x5c0>)
 800d11e:	6013      	str	r3, [r2, #0]
 800d120:	e02e      	b.n	800d180 <tcp_process+0x5e4>
 800d122:	4b0e      	ldr	r3, [pc, #56]	@ (800d15c <tcp_process+0x5c0>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	617b      	str	r3, [r7, #20]
 800d128:	e027      	b.n	800d17a <tcp_process+0x5de>
 800d12a:	bf00      	nop
 800d12c:	20008a08 	.word	0x20008a08
 800d130:	20008a00 	.word	0x20008a00
 800d134:	20008a06 	.word	0x20008a06
 800d138:	200089fc 	.word	0x200089fc
 800d13c:	200089ec 	.word	0x200089ec
 800d140:	200056a4 	.word	0x200056a4
 800d144:	200056a8 	.word	0x200056a8
 800d148:	08015950 	.word	0x08015950
 800d14c:	08015bf0 	.word	0x08015bf0
 800d150:	0801599c 	.word	0x0801599c
 800d154:	20008a04 	.word	0x20008a04
 800d158:	20008a09 	.word	0x20008a09
 800d15c:	200089d0 	.word	0x200089d0
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	429a      	cmp	r2, r3
 800d168:	d104      	bne.n	800d174 <tcp_process+0x5d8>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	68da      	ldr	r2, [r3, #12]
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	60da      	str	r2, [r3, #12]
 800d172:	e005      	b.n	800d180 <tcp_process+0x5e4>
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	68db      	ldr	r3, [r3, #12]
 800d178:	617b      	str	r3, [r7, #20]
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d1ef      	bne.n	800d160 <tcp_process+0x5c4>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	60da      	str	r2, [r3, #12]
 800d186:	4b77      	ldr	r3, [pc, #476]	@ (800d364 <tcp_process+0x7c8>)
 800d188:	2201      	movs	r2, #1
 800d18a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	220a      	movs	r2, #10
 800d190:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d192:	4b75      	ldr	r3, [pc, #468]	@ (800d368 <tcp_process+0x7cc>)
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	60da      	str	r2, [r3, #12]
 800d19a:	4a73      	ldr	r2, [pc, #460]	@ (800d368 <tcp_process+0x7cc>)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6013      	str	r3, [r2, #0]
 800d1a0:	f002 fcf4 	bl	800fb8c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d1a4:	e0d2      	b.n	800d34c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	8b5b      	ldrh	r3, [r3, #26]
 800d1aa:	f043 0302 	orr.w	r3, r3, #2
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2208      	movs	r2, #8
 800d1b8:	751a      	strb	r2, [r3, #20]
      break;
 800d1ba:	e0c7      	b.n	800d34c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d1bc:	4b6b      	ldr	r3, [pc, #428]	@ (800d36c <tcp_process+0x7d0>)
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	f003 0310 	and.w	r3, r3, #16
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 80c1 	beq.w	800d34c <tcp_process+0x7b0>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d1ce:	4b68      	ldr	r3, [pc, #416]	@ (800d370 <tcp_process+0x7d4>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	f040 80ba 	bne.w	800d34c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	f040 80b5 	bne.w	800d34c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2206      	movs	r2, #6
 800d1e6:	751a      	strb	r2, [r3, #20]
      break;
 800d1e8:	e0b0      	b.n	800d34c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f9ca 	bl	800d584 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d1f0:	4b60      	ldr	r3, [pc, #384]	@ (800d374 <tcp_process+0x7d8>)
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	f003 0320 	and.w	r3, r3, #32
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	f000 80a9 	beq.w	800d350 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	8b5b      	ldrh	r3, [r3, #26]
 800d202:	f043 0302 	orr.w	r3, r3, #2
 800d206:	b29a      	uxth	r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f7fe fd39 	bl	800bc84 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d212:	4b59      	ldr	r3, [pc, #356]	@ (800d378 <tcp_process+0x7dc>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d105      	bne.n	800d228 <tcp_process+0x68c>
 800d21c:	4b56      	ldr	r3, [pc, #344]	@ (800d378 <tcp_process+0x7dc>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	4a55      	ldr	r2, [pc, #340]	@ (800d378 <tcp_process+0x7dc>)
 800d224:	6013      	str	r3, [r2, #0]
 800d226:	e013      	b.n	800d250 <tcp_process+0x6b4>
 800d228:	4b53      	ldr	r3, [pc, #332]	@ (800d378 <tcp_process+0x7dc>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	613b      	str	r3, [r7, #16]
 800d22e:	e00c      	b.n	800d24a <tcp_process+0x6ae>
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	429a      	cmp	r2, r3
 800d238:	d104      	bne.n	800d244 <tcp_process+0x6a8>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	68da      	ldr	r2, [r3, #12]
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	60da      	str	r2, [r3, #12]
 800d242:	e005      	b.n	800d250 <tcp_process+0x6b4>
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	68db      	ldr	r3, [r3, #12]
 800d248:	613b      	str	r3, [r7, #16]
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d1ef      	bne.n	800d230 <tcp_process+0x694>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	60da      	str	r2, [r3, #12]
 800d256:	4b43      	ldr	r3, [pc, #268]	@ (800d364 <tcp_process+0x7c8>)
 800d258:	2201      	movs	r2, #1
 800d25a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	220a      	movs	r2, #10
 800d260:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d262:	4b41      	ldr	r3, [pc, #260]	@ (800d368 <tcp_process+0x7cc>)
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	60da      	str	r2, [r3, #12]
 800d26a:	4a3f      	ldr	r2, [pc, #252]	@ (800d368 <tcp_process+0x7cc>)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6013      	str	r3, [r2, #0]
 800d270:	f002 fc8c 	bl	800fb8c <tcp_timer_needed>
      }
      break;
 800d274:	e06c      	b.n	800d350 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 f984 	bl	800d584 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d27c:	4b3b      	ldr	r3, [pc, #236]	@ (800d36c <tcp_process+0x7d0>)
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	f003 0310 	and.w	r3, r3, #16
 800d284:	2b00      	cmp	r3, #0
 800d286:	d065      	beq.n	800d354 <tcp_process+0x7b8>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d28c:	4b38      	ldr	r3, [pc, #224]	@ (800d370 <tcp_process+0x7d4>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	429a      	cmp	r2, r3
 800d292:	d15f      	bne.n	800d354 <tcp_process+0x7b8>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d15b      	bne.n	800d354 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f7fe fcf1 	bl	800bc84 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d2a2:	4b35      	ldr	r3, [pc, #212]	@ (800d378 <tcp_process+0x7dc>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d105      	bne.n	800d2b8 <tcp_process+0x71c>
 800d2ac:	4b32      	ldr	r3, [pc, #200]	@ (800d378 <tcp_process+0x7dc>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	4a31      	ldr	r2, [pc, #196]	@ (800d378 <tcp_process+0x7dc>)
 800d2b4:	6013      	str	r3, [r2, #0]
 800d2b6:	e013      	b.n	800d2e0 <tcp_process+0x744>
 800d2b8:	4b2f      	ldr	r3, [pc, #188]	@ (800d378 <tcp_process+0x7dc>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	60fb      	str	r3, [r7, #12]
 800d2be:	e00c      	b.n	800d2da <tcp_process+0x73e>
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d104      	bne.n	800d2d4 <tcp_process+0x738>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	68da      	ldr	r2, [r3, #12]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	60da      	str	r2, [r3, #12]
 800d2d2:	e005      	b.n	800d2e0 <tcp_process+0x744>
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	68db      	ldr	r3, [r3, #12]
 800d2d8:	60fb      	str	r3, [r7, #12]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d1ef      	bne.n	800d2c0 <tcp_process+0x724>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	60da      	str	r2, [r3, #12]
 800d2e6:	4b1f      	ldr	r3, [pc, #124]	@ (800d364 <tcp_process+0x7c8>)
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	220a      	movs	r2, #10
 800d2f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d2f2:	4b1d      	ldr	r3, [pc, #116]	@ (800d368 <tcp_process+0x7cc>)
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	60da      	str	r2, [r3, #12]
 800d2fa:	4a1b      	ldr	r2, [pc, #108]	@ (800d368 <tcp_process+0x7cc>)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6013      	str	r3, [r2, #0]
 800d300:	f002 fc44 	bl	800fb8c <tcp_timer_needed>
      }
      break;
 800d304:	e026      	b.n	800d354 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 f93c 	bl	800d584 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d30c:	4b17      	ldr	r3, [pc, #92]	@ (800d36c <tcp_process+0x7d0>)
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	f003 0310 	and.w	r3, r3, #16
 800d314:	2b00      	cmp	r3, #0
 800d316:	d01f      	beq.n	800d358 <tcp_process+0x7bc>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d31c:	4b14      	ldr	r3, [pc, #80]	@ (800d370 <tcp_process+0x7d4>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	429a      	cmp	r2, r3
 800d322:	d119      	bne.n	800d358 <tcp_process+0x7bc>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d115      	bne.n	800d358 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d32c:	4b11      	ldr	r3, [pc, #68]	@ (800d374 <tcp_process+0x7d8>)
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	f043 0310 	orr.w	r3, r3, #16
 800d334:	b2da      	uxtb	r2, r3
 800d336:	4b0f      	ldr	r3, [pc, #60]	@ (800d374 <tcp_process+0x7d8>)
 800d338:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d33a:	e00d      	b.n	800d358 <tcp_process+0x7bc>
    default:
      break;
 800d33c:	bf00      	nop
 800d33e:	e00c      	b.n	800d35a <tcp_process+0x7be>
      break;
 800d340:	bf00      	nop
 800d342:	e00a      	b.n	800d35a <tcp_process+0x7be>
      break;
 800d344:	bf00      	nop
 800d346:	e008      	b.n	800d35a <tcp_process+0x7be>
      break;
 800d348:	bf00      	nop
 800d34a:	e006      	b.n	800d35a <tcp_process+0x7be>
      break;
 800d34c:	bf00      	nop
 800d34e:	e004      	b.n	800d35a <tcp_process+0x7be>
      break;
 800d350:	bf00      	nop
 800d352:	e002      	b.n	800d35a <tcp_process+0x7be>
      break;
 800d354:	bf00      	nop
 800d356:	e000      	b.n	800d35a <tcp_process+0x7be>
      break;
 800d358:	bf00      	nop
  }
  return ERR_OK;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3724      	adds	r7, #36	@ 0x24
 800d360:	46bd      	mov	sp, r7
 800d362:	bd90      	pop	{r4, r7, pc}
 800d364:	200089d8 	.word	0x200089d8
 800d368:	200089d4 	.word	0x200089d4
 800d36c:	20008a08 	.word	0x20008a08
 800d370:	20008a00 	.word	0x20008a00
 800d374:	20008a09 	.word	0x20008a09
 800d378:	200089d0 	.word	0x200089d0

0800d37c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d37c:	b590      	push	{r4, r7, lr}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d106      	bne.n	800d39a <tcp_oos_insert_segment+0x1e>
 800d38c:	4b3b      	ldr	r3, [pc, #236]	@ (800d47c <tcp_oos_insert_segment+0x100>)
 800d38e:	f240 421f 	movw	r2, #1055	@ 0x41f
 800d392:	493b      	ldr	r1, [pc, #236]	@ (800d480 <tcp_oos_insert_segment+0x104>)
 800d394:	483b      	ldr	r0, [pc, #236]	@ (800d484 <tcp_oos_insert_segment+0x108>)
 800d396:	f005 ff61 	bl	801325c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	899b      	ldrh	r3, [r3, #12]
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7fb fc0c 	bl	8008bc0 <lwip_htons>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	b2db      	uxtb	r3, r3
 800d3ac:	f003 0301 	and.w	r3, r3, #1
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d028      	beq.n	800d406 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d3b4:	6838      	ldr	r0, [r7, #0]
 800d3b6:	f7fe fa63 	bl	800b880 <tcp_segs_free>
    next = NULL;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	603b      	str	r3, [r7, #0]
 800d3be:	e056      	b.n	800d46e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	899b      	ldrh	r3, [r3, #12]
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fb fbf9 	bl	8008bc0 <lwip_htons>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	f003 0301 	and.w	r3, r3, #1
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00d      	beq.n	800d3f6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	899b      	ldrh	r3, [r3, #12]
 800d3e0:	b29c      	uxth	r4, r3
 800d3e2:	2001      	movs	r0, #1
 800d3e4:	f7fb fbec 	bl	8008bc0 <lwip_htons>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	4322      	orrs	r2, r4
 800d3f2:	b292      	uxth	r2, r2
 800d3f4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f7fe fa52 	bl	800b8aa <tcp_seg_free>
    while (next &&
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00e      	beq.n	800d42a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	891b      	ldrh	r3, [r3, #8]
 800d410:	461a      	mov	r2, r3
 800d412:	4b1d      	ldr	r3, [pc, #116]	@ (800d488 <tcp_oos_insert_segment+0x10c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	441a      	add	r2, r3
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	68db      	ldr	r3, [r3, #12]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	6839      	ldr	r1, [r7, #0]
 800d420:	8909      	ldrh	r1, [r1, #8]
 800d422:	440b      	add	r3, r1
 800d424:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d426:	2b00      	cmp	r3, #0
 800d428:	daca      	bge.n	800d3c0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d01e      	beq.n	800d46e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	891b      	ldrh	r3, [r3, #8]
 800d434:	461a      	mov	r2, r3
 800d436:	4b14      	ldr	r3, [pc, #80]	@ (800d488 <tcp_oos_insert_segment+0x10c>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	441a      	add	r2, r3
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d444:	2b00      	cmp	r3, #0
 800d446:	dd12      	ble.n	800d46e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	b29a      	uxth	r2, r3
 800d450:	4b0d      	ldr	r3, [pc, #52]	@ (800d488 <tcp_oos_insert_segment+0x10c>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	b29b      	uxth	r3, r3
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	b29a      	uxth	r2, r3
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	685a      	ldr	r2, [r3, #4]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	891b      	ldrh	r3, [r3, #8]
 800d466:	4619      	mov	r1, r3
 800d468:	4610      	mov	r0, r2
 800d46a:	f7fc fd81 	bl	8009f70 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	683a      	ldr	r2, [r7, #0]
 800d472:	601a      	str	r2, [r3, #0]
}
 800d474:	bf00      	nop
 800d476:	3714      	adds	r7, #20
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd90      	pop	{r4, r7, pc}
 800d47c:	08015950 	.word	0x08015950
 800d480:	08015c10 	.word	0x08015c10
 800d484:	0801599c 	.word	0x0801599c
 800d488:	200089fc 	.word	0x200089fc

0800d48c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d48c:	b5b0      	push	{r4, r5, r7, lr}
 800d48e:	b086      	sub	sp, #24
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	60b9      	str	r1, [r7, #8]
 800d496:	607a      	str	r2, [r7, #4]
 800d498:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d49a:	e03e      	b.n	800d51a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fc ff6e 	bl	800a38c <pbuf_clen>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d4ba:	8a7a      	ldrh	r2, [r7, #18]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d906      	bls.n	800d4ce <tcp_free_acked_segments+0x42>
 800d4c0:	4b2a      	ldr	r3, [pc, #168]	@ (800d56c <tcp_free_acked_segments+0xe0>)
 800d4c2:	f240 4257 	movw	r2, #1111	@ 0x457
 800d4c6:	492a      	ldr	r1, [pc, #168]	@ (800d570 <tcp_free_acked_segments+0xe4>)
 800d4c8:	482a      	ldr	r0, [pc, #168]	@ (800d574 <tcp_free_acked_segments+0xe8>)
 800d4ca:	f005 fec7 	bl	801325c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800d4d4:	8a7b      	ldrh	r3, [r7, #18]
 800d4d6:	1ad3      	subs	r3, r2, r3
 800d4d8:	b29a      	uxth	r2, r3
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	891a      	ldrh	r2, [r3, #8]
 800d4e4:	4b24      	ldr	r3, [pc, #144]	@ (800d578 <tcp_free_acked_segments+0xec>)
 800d4e6:	881b      	ldrh	r3, [r3, #0]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	4b22      	ldr	r3, [pc, #136]	@ (800d578 <tcp_free_acked_segments+0xec>)
 800d4ee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d4f0:	6978      	ldr	r0, [r7, #20]
 800d4f2:	f7fe f9da 	bl	800b8aa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00c      	beq.n	800d51a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d109      	bne.n	800d51a <tcp_free_acked_segments+0x8e>
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d106      	bne.n	800d51a <tcp_free_acked_segments+0x8e>
 800d50c:	4b17      	ldr	r3, [pc, #92]	@ (800d56c <tcp_free_acked_segments+0xe0>)
 800d50e:	f240 4261 	movw	r2, #1121	@ 0x461
 800d512:	491a      	ldr	r1, [pc, #104]	@ (800d57c <tcp_free_acked_segments+0xf0>)
 800d514:	4817      	ldr	r0, [pc, #92]	@ (800d574 <tcp_free_acked_segments+0xe8>)
 800d516:	f005 fea1 	bl	801325c <iprintf>
  while (seg_list != NULL &&
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d020      	beq.n	800d562 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	4618      	mov	r0, r3
 800d528:	f7fb fb60 	bl	8008bec <lwip_htonl>
 800d52c:	4604      	mov	r4, r0
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	891b      	ldrh	r3, [r3, #8]
 800d532:	461d      	mov	r5, r3
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	899b      	ldrh	r3, [r3, #12]
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7fb fb3f 	bl	8008bc0 <lwip_htons>
 800d542:	4603      	mov	r3, r0
 800d544:	b2db      	uxtb	r3, r3
 800d546:	f003 0303 	and.w	r3, r3, #3
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d001      	beq.n	800d552 <tcp_free_acked_segments+0xc6>
 800d54e:	2301      	movs	r3, #1
 800d550:	e000      	b.n	800d554 <tcp_free_acked_segments+0xc8>
 800d552:	2300      	movs	r3, #0
 800d554:	442b      	add	r3, r5
 800d556:	18e2      	adds	r2, r4, r3
 800d558:	4b09      	ldr	r3, [pc, #36]	@ (800d580 <tcp_free_acked_segments+0xf4>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d55e:	2b00      	cmp	r3, #0
 800d560:	dd9c      	ble.n	800d49c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d562:	68bb      	ldr	r3, [r7, #8]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3718      	adds	r7, #24
 800d568:	46bd      	mov	sp, r7
 800d56a:	bdb0      	pop	{r4, r5, r7, pc}
 800d56c:	08015950 	.word	0x08015950
 800d570:	08015c38 	.word	0x08015c38
 800d574:	0801599c 	.word	0x0801599c
 800d578:	20008a04 	.word	0x20008a04
 800d57c:	08015c60 	.word	0x08015c60
 800d580:	20008a00 	.word	0x20008a00

0800d584 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d584:	b5b0      	push	{r4, r5, r7, lr}
 800d586:	b094      	sub	sp, #80	@ 0x50
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d106      	bne.n	800d5a4 <tcp_receive+0x20>
 800d596:	4b91      	ldr	r3, [pc, #580]	@ (800d7dc <tcp_receive+0x258>)
 800d598:	f240 427b 	movw	r2, #1147	@ 0x47b
 800d59c:	4990      	ldr	r1, [pc, #576]	@ (800d7e0 <tcp_receive+0x25c>)
 800d59e:	4891      	ldr	r0, [pc, #580]	@ (800d7e4 <tcp_receive+0x260>)
 800d5a0:	f005 fe5c 	bl	801325c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	7d1b      	ldrb	r3, [r3, #20]
 800d5a8:	2b03      	cmp	r3, #3
 800d5aa:	d806      	bhi.n	800d5ba <tcp_receive+0x36>
 800d5ac:	4b8b      	ldr	r3, [pc, #556]	@ (800d7dc <tcp_receive+0x258>)
 800d5ae:	f240 427c 	movw	r2, #1148	@ 0x47c
 800d5b2:	498d      	ldr	r1, [pc, #564]	@ (800d7e8 <tcp_receive+0x264>)
 800d5b4:	488b      	ldr	r0, [pc, #556]	@ (800d7e4 <tcp_receive+0x260>)
 800d5b6:	f005 fe51 	bl	801325c <iprintf>

  if (flags & TCP_ACK) {
 800d5ba:	4b8c      	ldr	r3, [pc, #560]	@ (800d7ec <tcp_receive+0x268>)
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	f003 0310 	and.w	r3, r3, #16
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	f000 8264 	beq.w	800da90 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5d4:	4413      	add	r3, r2
 800d5d6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d5dc:	4b84      	ldr	r3, [pc, #528]	@ (800d7f0 <tcp_receive+0x26c>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	db1b      	blt.n	800d61e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d5ea:	4b81      	ldr	r3, [pc, #516]	@ (800d7f0 <tcp_receive+0x26c>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d106      	bne.n	800d600 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d5f6:	4b7f      	ldr	r3, [pc, #508]	@ (800d7f4 <tcp_receive+0x270>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	1ad3      	subs	r3, r2, r3
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	db0e      	blt.n	800d61e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d604:	4b7b      	ldr	r3, [pc, #492]	@ (800d7f4 <tcp_receive+0x270>)
 800d606:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d608:	429a      	cmp	r2, r3
 800d60a:	d125      	bne.n	800d658 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d60c:	4b7a      	ldr	r3, [pc, #488]	@ (800d7f8 <tcp_receive+0x274>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	89db      	ldrh	r3, [r3, #14]
 800d612:	b29a      	uxth	r2, r3
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d91c      	bls.n	800d658 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d61e:	4b76      	ldr	r3, [pc, #472]	@ (800d7f8 <tcp_receive+0x274>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	89db      	ldrh	r3, [r3, #14]
 800d624:	b29a      	uxth	r2, r3
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d638:	429a      	cmp	r2, r3
 800d63a:	d205      	bcs.n	800d648 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800d648:	4b69      	ldr	r3, [pc, #420]	@ (800d7f0 <tcp_receive+0x26c>)
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800d650:	4b68      	ldr	r3, [pc, #416]	@ (800d7f4 <tcp_receive+0x270>)
 800d652:	681a      	ldr	r2, [r3, #0]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d658:	4b66      	ldr	r3, [pc, #408]	@ (800d7f4 <tcp_receive+0x270>)
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d660:	1ad3      	subs	r3, r2, r3
 800d662:	2b00      	cmp	r3, #0
 800d664:	dc58      	bgt.n	800d718 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d666:	4b65      	ldr	r3, [pc, #404]	@ (800d7fc <tcp_receive+0x278>)
 800d668:	881b      	ldrh	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d14b      	bne.n	800d706 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800d678:	4413      	add	r3, r2
 800d67a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d142      	bne.n	800d706 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d686:	2b00      	cmp	r3, #0
 800d688:	db3d      	blt.n	800d706 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d68e:	4b59      	ldr	r3, [pc, #356]	@ (800d7f4 <tcp_receive+0x270>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	429a      	cmp	r2, r3
 800d694:	d137      	bne.n	800d706 <tcp_receive+0x182>
              found_dupack = 1;
 800d696:	2301      	movs	r3, #1
 800d698:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d6a0:	2bff      	cmp	r3, #255	@ 0xff
 800d6a2:	d007      	beq.n	800d6b4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	b2da      	uxtb	r2, r3
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d6ba:	2b03      	cmp	r3, #3
 800d6bc:	d91b      	bls.n	800d6f6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d6c8:	4413      	add	r3, r2
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d30a      	bcc.n	800d6ec <tcp_receive+0x168>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d6e0:	4413      	add	r3, r2
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d6ea:	e004      	b.n	800d6f6 <tcp_receive+0x172>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d6f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d6fc:	2b02      	cmp	r3, #2
 800d6fe:	d902      	bls.n	800d706 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f001 fee7 	bl	800f4d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d708:	2b00      	cmp	r3, #0
 800d70a:	f040 8161 	bne.w	800d9d0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d716:	e15b      	b.n	800d9d0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d718:	4b36      	ldr	r3, [pc, #216]	@ (800d7f4 <tcp_receive+0x270>)
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d720:	1ad3      	subs	r3, r2, r3
 800d722:	3b01      	subs	r3, #1
 800d724:	2b00      	cmp	r3, #0
 800d726:	f2c0 814e 	blt.w	800d9c6 <tcp_receive+0x442>
 800d72a:	4b32      	ldr	r3, [pc, #200]	@ (800d7f4 <tcp_receive+0x270>)
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d732:	1ad3      	subs	r3, r2, r3
 800d734:	2b00      	cmp	r3, #0
 800d736:	f300 8146 	bgt.w	800d9c6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	8b5b      	ldrh	r3, [r3, #26]
 800d73e:	f003 0304 	and.w	r3, r3, #4
 800d742:	2b00      	cmp	r3, #0
 800d744:	d010      	beq.n	800d768 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	8b5b      	ldrh	r3, [r3, #26]
 800d74a:	f023 0304 	bic.w	r3, r3, #4
 800d74e:	b29a      	uxth	r2, r3
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d776:	10db      	asrs	r3, r3, #3
 800d778:	b21b      	sxth	r3, r3
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d782:	b29b      	uxth	r3, r3
 800d784:	4413      	add	r3, r2
 800d786:	b29b      	uxth	r3, r3
 800d788:	b21a      	sxth	r2, r3
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d790:	4b18      	ldr	r3, [pc, #96]	@ (800d7f4 <tcp_receive+0x270>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	b29a      	uxth	r2, r3
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	1ad3      	subs	r3, r2, r3
 800d79e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800d7a8:	4b12      	ldr	r3, [pc, #72]	@ (800d7f4 <tcp_receive+0x270>)
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	7d1b      	ldrb	r3, [r3, #20]
 800d7b4:	2b03      	cmp	r3, #3
 800d7b6:	f240 8097 	bls.w	800d8e8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d245      	bcs.n	800d856 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	8b5b      	ldrh	r3, [r3, #26]
 800d7ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d014      	beq.n	800d800 <tcp_receive+0x27c>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	e013      	b.n	800d802 <tcp_receive+0x27e>
 800d7da:	bf00      	nop
 800d7dc:	08015950 	.word	0x08015950
 800d7e0:	08015c80 	.word	0x08015c80
 800d7e4:	0801599c 	.word	0x0801599c
 800d7e8:	08015c9c 	.word	0x08015c9c
 800d7ec:	20008a08 	.word	0x20008a08
 800d7f0:	200089fc 	.word	0x200089fc
 800d7f4:	20008a00 	.word	0x20008a00
 800d7f8:	200089ec 	.word	0x200089ec
 800d7fc:	20008a06 	.word	0x20008a06
 800d800:	2302      	movs	r3, #2
 800d802:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d806:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d810:	fb12 f303 	smulbb	r3, r2, r3
 800d814:	b29b      	uxth	r3, r3
 800d816:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d818:	4293      	cmp	r3, r2
 800d81a:	bf28      	it	cs
 800d81c:	4613      	movcs	r3, r2
 800d81e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d826:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d828:	4413      	add	r3, r2
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d832:	429a      	cmp	r2, r3
 800d834:	d309      	bcc.n	800d84a <tcp_receive+0x2c6>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d83c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d83e:	4413      	add	r3, r2
 800d840:	b29a      	uxth	r2, r3
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d848:	e04e      	b.n	800d8e8 <tcp_receive+0x364>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d850:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d854:	e048      	b.n	800d8e8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d85c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d85e:	4413      	add	r3, r2
 800d860:	b29a      	uxth	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d868:	429a      	cmp	r2, r3
 800d86a:	d309      	bcc.n	800d880 <tcp_receive+0x2fc>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d872:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d874:	4413      	add	r3, r2
 800d876:	b29a      	uxth	r2, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d87e:	e004      	b.n	800d88a <tcp_receive+0x306>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d886:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d896:	429a      	cmp	r2, r3
 800d898:	d326      	bcc.n	800d8e8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d8a6:	1ad3      	subs	r3, r2, r3
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d8ba:	4413      	add	r3, r2
 800d8bc:	b29a      	uxth	r2, r3
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d30a      	bcc.n	800d8de <tcp_receive+0x35a>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d8d2:	4413      	add	r3, r2
 800d8d4:	b29a      	uxth	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d8dc:	e004      	b.n	800d8e8 <tcp_receive+0x364>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d8e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8f0:	4a98      	ldr	r2, [pc, #608]	@ (800db54 <tcp_receive+0x5d0>)
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f7ff fdca 	bl	800d48c <tcp_free_acked_segments>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d906:	4a94      	ldr	r2, [pc, #592]	@ (800db58 <tcp_receive+0x5d4>)
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7ff fdbf 	bl	800d48c <tcp_free_acked_segments>
 800d90e:	4602      	mov	r2, r0
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d104      	bne.n	800d926 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d922:	861a      	strh	r2, [r3, #48]	@ 0x30
 800d924:	e002      	b.n	800d92c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2200      	movs	r2, #0
 800d930:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d936:	2b00      	cmp	r3, #0
 800d938:	d103      	bne.n	800d942 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2200      	movs	r2, #0
 800d93e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800d948:	4b84      	ldr	r3, [pc, #528]	@ (800db5c <tcp_receive+0x5d8>)
 800d94a:	881b      	ldrh	r3, [r3, #0]
 800d94c:	4413      	add	r3, r2
 800d94e:	b29a      	uxth	r2, r3
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	8b5b      	ldrh	r3, [r3, #26]
 800d95a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d035      	beq.n	800d9ce <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d966:	2b00      	cmp	r3, #0
 800d968:	d118      	bne.n	800d99c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00c      	beq.n	800d98c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fb f934 	bl	8008bec <lwip_htonl>
 800d984:	4603      	mov	r3, r0
 800d986:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d988:	2b00      	cmp	r3, #0
 800d98a:	dc20      	bgt.n	800d9ce <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	8b5b      	ldrh	r3, [r3, #26]
 800d990:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d994:	b29a      	uxth	r2, r3
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d99a:	e018      	b.n	800d9ce <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7fb f91f 	bl	8008bec <lwip_htonl>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	1ae3      	subs	r3, r4, r3
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	dc0b      	bgt.n	800d9ce <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	8b5b      	ldrh	r3, [r3, #26]
 800d9ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d9be:	b29a      	uxth	r2, r3
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d9c4:	e003      	b.n	800d9ce <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f001 ff70 	bl	800f8ac <tcp_send_empty_ack>
 800d9cc:	e000      	b.n	800d9d0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d9ce:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d05b      	beq.n	800da90 <tcp_receive+0x50c>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9dc:	4b60      	ldr	r3, [pc, #384]	@ (800db60 <tcp_receive+0x5dc>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	1ad3      	subs	r3, r2, r3
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	da54      	bge.n	800da90 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d9e6:	4b5f      	ldr	r3, [pc, #380]	@ (800db64 <tcp_receive+0x5e0>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	b29a      	uxth	r2, r3
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	1ad3      	subs	r3, r2, r3
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d9fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800da04:	10db      	asrs	r3, r3, #3
 800da06:	b21b      	sxth	r3, r3
 800da08:	b29b      	uxth	r3, r3
 800da0a:	1ad3      	subs	r3, r2, r3
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800da18:	b29a      	uxth	r2, r3
 800da1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800da1e:	4413      	add	r3, r2
 800da20:	b29b      	uxth	r3, r3
 800da22:	b21a      	sxth	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800da28:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	da05      	bge.n	800da3c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800da30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800da34:	425b      	negs	r3, r3
 800da36:	b29b      	uxth	r3, r3
 800da38:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800da3c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800da46:	109b      	asrs	r3, r3, #2
 800da48:	b21b      	sxth	r3, r3
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	1ad3      	subs	r3, r2, r3
 800da4e:	b29b      	uxth	r3, r3
 800da50:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800da5a:	b29a      	uxth	r2, r3
 800da5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800da60:	4413      	add	r3, r2
 800da62:	b29b      	uxth	r3, r3
 800da64:	b21a      	sxth	r2, r3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800da70:	10db      	asrs	r3, r3, #3
 800da72:	b21b      	sxth	r3, r3
 800da74:	b29a      	uxth	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	4413      	add	r3, r2
 800da80:	b29b      	uxth	r3, r3
 800da82:	b21a      	sxth	r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800da90:	4b35      	ldr	r3, [pc, #212]	@ (800db68 <tcp_receive+0x5e4>)
 800da92:	881b      	ldrh	r3, [r3, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	f000 84df 	beq.w	800e458 <tcp_receive+0xed4>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	7d1b      	ldrb	r3, [r3, #20]
 800da9e:	2b06      	cmp	r3, #6
 800daa0:	f200 84da 	bhi.w	800e458 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800daa8:	4b30      	ldr	r3, [pc, #192]	@ (800db6c <tcp_receive+0x5e8>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	1ad3      	subs	r3, r2, r3
 800daae:	3b01      	subs	r3, #1
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f2c0 808f 	blt.w	800dbd4 <tcp_receive+0x650>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800daba:	4b2b      	ldr	r3, [pc, #172]	@ (800db68 <tcp_receive+0x5e4>)
 800dabc:	881b      	ldrh	r3, [r3, #0]
 800dabe:	4619      	mov	r1, r3
 800dac0:	4b2a      	ldr	r3, [pc, #168]	@ (800db6c <tcp_receive+0x5e8>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	440b      	add	r3, r1
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	3301      	adds	r3, #1
 800daca:	2b00      	cmp	r3, #0
 800dacc:	f300 8082 	bgt.w	800dbd4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800dad0:	4b27      	ldr	r3, [pc, #156]	@ (800db70 <tcp_receive+0x5ec>)
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dada:	4b24      	ldr	r3, [pc, #144]	@ (800db6c <tcp_receive+0x5e8>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800dae2:	4b23      	ldr	r3, [pc, #140]	@ (800db70 <tcp_receive+0x5ec>)
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d106      	bne.n	800daf8 <tcp_receive+0x574>
 800daea:	4b22      	ldr	r3, [pc, #136]	@ (800db74 <tcp_receive+0x5f0>)
 800daec:	f240 5294 	movw	r2, #1428	@ 0x594
 800daf0:	4921      	ldr	r1, [pc, #132]	@ (800db78 <tcp_receive+0x5f4>)
 800daf2:	4822      	ldr	r0, [pc, #136]	@ (800db7c <tcp_receive+0x5f8>)
 800daf4:	f005 fbb2 	bl	801325c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800daf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dafa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800dafe:	4293      	cmp	r3, r2
 800db00:	d906      	bls.n	800db10 <tcp_receive+0x58c>
 800db02:	4b1c      	ldr	r3, [pc, #112]	@ (800db74 <tcp_receive+0x5f0>)
 800db04:	f240 5295 	movw	r2, #1429	@ 0x595
 800db08:	491d      	ldr	r1, [pc, #116]	@ (800db80 <tcp_receive+0x5fc>)
 800db0a:	481c      	ldr	r0, [pc, #112]	@ (800db7c <tcp_receive+0x5f8>)
 800db0c:	f005 fba6 	bl	801325c <iprintf>
      off = (u16_t)off32;
 800db10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db12:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800db16:	4b16      	ldr	r3, [pc, #88]	@ (800db70 <tcp_receive+0x5ec>)
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	891b      	ldrh	r3, [r3, #8]
 800db1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800db20:	429a      	cmp	r2, r3
 800db22:	d906      	bls.n	800db32 <tcp_receive+0x5ae>
 800db24:	4b13      	ldr	r3, [pc, #76]	@ (800db74 <tcp_receive+0x5f0>)
 800db26:	f240 5297 	movw	r2, #1431	@ 0x597
 800db2a:	4916      	ldr	r1, [pc, #88]	@ (800db84 <tcp_receive+0x600>)
 800db2c:	4813      	ldr	r0, [pc, #76]	@ (800db7c <tcp_receive+0x5f8>)
 800db2e:	f005 fb95 	bl	801325c <iprintf>
      inseg.len -= off;
 800db32:	4b0f      	ldr	r3, [pc, #60]	@ (800db70 <tcp_receive+0x5ec>)
 800db34:	891a      	ldrh	r2, [r3, #8]
 800db36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800db3a:	1ad3      	subs	r3, r2, r3
 800db3c:	b29a      	uxth	r2, r3
 800db3e:	4b0c      	ldr	r3, [pc, #48]	@ (800db70 <tcp_receive+0x5ec>)
 800db40:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800db42:	4b0b      	ldr	r3, [pc, #44]	@ (800db70 <tcp_receive+0x5ec>)
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	891a      	ldrh	r2, [r3, #8]
 800db48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800db4c:	1ad3      	subs	r3, r2, r3
 800db4e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800db50:	e02a      	b.n	800dba8 <tcp_receive+0x624>
 800db52:	bf00      	nop
 800db54:	08015cb8 	.word	0x08015cb8
 800db58:	08015cc0 	.word	0x08015cc0
 800db5c:	20008a04 	.word	0x20008a04
 800db60:	20008a00 	.word	0x20008a00
 800db64:	200089c4 	.word	0x200089c4
 800db68:	20008a06 	.word	0x20008a06
 800db6c:	200089fc 	.word	0x200089fc
 800db70:	200089dc 	.word	0x200089dc
 800db74:	08015950 	.word	0x08015950
 800db78:	08015cc8 	.word	0x08015cc8
 800db7c:	0801599c 	.word	0x0801599c
 800db80:	08015cd8 	.word	0x08015cd8
 800db84:	08015ce8 	.word	0x08015ce8
        off -= p->len;
 800db88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db8a:	895b      	ldrh	r3, [r3, #10]
 800db8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800db96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db98:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800db9a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800db9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db9e:	2200      	movs	r2, #0
 800dba0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800dba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800dba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbaa:	895b      	ldrh	r3, [r3, #10]
 800dbac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d8e9      	bhi.n	800db88 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800dbb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dbb8:	4619      	mov	r1, r3
 800dbba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800dbbc:	f7fc fad8 	bl	800a170 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbc4:	4a90      	ldr	r2, [pc, #576]	@ (800de08 <tcp_receive+0x884>)
 800dbc6:	6013      	str	r3, [r2, #0]
 800dbc8:	4b90      	ldr	r3, [pc, #576]	@ (800de0c <tcp_receive+0x888>)
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	4a8e      	ldr	r2, [pc, #568]	@ (800de08 <tcp_receive+0x884>)
 800dbce:	6812      	ldr	r2, [r2, #0]
 800dbd0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dbd2:	e00d      	b.n	800dbf0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800dbd4:	4b8c      	ldr	r3, [pc, #560]	@ (800de08 <tcp_receive+0x884>)
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbdc:	1ad3      	subs	r3, r2, r3
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	da06      	bge.n	800dbf0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	8b5b      	ldrh	r3, [r3, #26]
 800dbe6:	f043 0302 	orr.w	r3, r3, #2
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dbf0:	4b85      	ldr	r3, [pc, #532]	@ (800de08 <tcp_receive+0x884>)
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbf8:	1ad3      	subs	r3, r2, r3
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f2c0 8427 	blt.w	800e44e <tcp_receive+0xeca>
 800dc00:	4b81      	ldr	r3, [pc, #516]	@ (800de08 <tcp_receive+0x884>)
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc08:	6879      	ldr	r1, [r7, #4]
 800dc0a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dc0c:	440b      	add	r3, r1
 800dc0e:	1ad3      	subs	r3, r2, r3
 800dc10:	3301      	adds	r3, #1
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	f300 841b 	bgt.w	800e44e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc1c:	4b7a      	ldr	r3, [pc, #488]	@ (800de08 <tcp_receive+0x884>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	f040 8298 	bne.w	800e156 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800dc26:	4b79      	ldr	r3, [pc, #484]	@ (800de0c <tcp_receive+0x888>)
 800dc28:	891c      	ldrh	r4, [r3, #8]
 800dc2a:	4b78      	ldr	r3, [pc, #480]	@ (800de0c <tcp_receive+0x888>)
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	899b      	ldrh	r3, [r3, #12]
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fa ffc4 	bl	8008bc0 <lwip_htons>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	f003 0303 	and.w	r3, r3, #3
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d001      	beq.n	800dc48 <tcp_receive+0x6c4>
 800dc44:	2301      	movs	r3, #1
 800dc46:	e000      	b.n	800dc4a <tcp_receive+0x6c6>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	4423      	add	r3, r4
 800dc4c:	b29a      	uxth	r2, r3
 800dc4e:	4b70      	ldr	r3, [pc, #448]	@ (800de10 <tcp_receive+0x88c>)
 800dc50:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dc56:	4b6e      	ldr	r3, [pc, #440]	@ (800de10 <tcp_receive+0x88c>)
 800dc58:	881b      	ldrh	r3, [r3, #0]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d274      	bcs.n	800dd48 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dc5e:	4b6b      	ldr	r3, [pc, #428]	@ (800de0c <tcp_receive+0x888>)
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	899b      	ldrh	r3, [r3, #12]
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fa ffaa 	bl	8008bc0 <lwip_htons>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	f003 0301 	and.w	r3, r3, #1
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d01e      	beq.n	800dcb6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800dc78:	4b64      	ldr	r3, [pc, #400]	@ (800de0c <tcp_receive+0x888>)
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	899b      	ldrh	r3, [r3, #12]
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	b21b      	sxth	r3, r3
 800dc82:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dc86:	b21c      	sxth	r4, r3
 800dc88:	4b60      	ldr	r3, [pc, #384]	@ (800de0c <tcp_receive+0x888>)
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	899b      	ldrh	r3, [r3, #12]
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fa ff95 	bl	8008bc0 <lwip_htons>
 800dc96:	4603      	mov	r3, r0
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7fa ff8d 	bl	8008bc0 <lwip_htons>
 800dca6:	4603      	mov	r3, r0
 800dca8:	b21b      	sxth	r3, r3
 800dcaa:	4323      	orrs	r3, r4
 800dcac:	b21a      	sxth	r2, r3
 800dcae:	4b57      	ldr	r3, [pc, #348]	@ (800de0c <tcp_receive+0x888>)
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	b292      	uxth	r2, r2
 800dcb4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dcba:	4b54      	ldr	r3, [pc, #336]	@ (800de0c <tcp_receive+0x888>)
 800dcbc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800dcbe:	4b53      	ldr	r3, [pc, #332]	@ (800de0c <tcp_receive+0x888>)
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	899b      	ldrh	r3, [r3, #12]
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7fa ff7a 	bl	8008bc0 <lwip_htons>
 800dccc:	4603      	mov	r3, r0
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	f003 0302 	and.w	r3, r3, #2
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d005      	beq.n	800dce4 <tcp_receive+0x760>
            inseg.len -= 1;
 800dcd8:	4b4c      	ldr	r3, [pc, #304]	@ (800de0c <tcp_receive+0x888>)
 800dcda:	891b      	ldrh	r3, [r3, #8]
 800dcdc:	3b01      	subs	r3, #1
 800dcde:	b29a      	uxth	r2, r3
 800dce0:	4b4a      	ldr	r3, [pc, #296]	@ (800de0c <tcp_receive+0x888>)
 800dce2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800dce4:	4b49      	ldr	r3, [pc, #292]	@ (800de0c <tcp_receive+0x888>)
 800dce6:	685b      	ldr	r3, [r3, #4]
 800dce8:	4a48      	ldr	r2, [pc, #288]	@ (800de0c <tcp_receive+0x888>)
 800dcea:	8912      	ldrh	r2, [r2, #8]
 800dcec:	4611      	mov	r1, r2
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7fc f93e 	bl	8009f70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800dcf4:	4b45      	ldr	r3, [pc, #276]	@ (800de0c <tcp_receive+0x888>)
 800dcf6:	891c      	ldrh	r4, [r3, #8]
 800dcf8:	4b44      	ldr	r3, [pc, #272]	@ (800de0c <tcp_receive+0x888>)
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	899b      	ldrh	r3, [r3, #12]
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7fa ff5d 	bl	8008bc0 <lwip_htons>
 800dd06:	4603      	mov	r3, r0
 800dd08:	b2db      	uxtb	r3, r3
 800dd0a:	f003 0303 	and.w	r3, r3, #3
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d001      	beq.n	800dd16 <tcp_receive+0x792>
 800dd12:	2301      	movs	r3, #1
 800dd14:	e000      	b.n	800dd18 <tcp_receive+0x794>
 800dd16:	2300      	movs	r3, #0
 800dd18:	4423      	add	r3, r4
 800dd1a:	b29a      	uxth	r2, r3
 800dd1c:	4b3c      	ldr	r3, [pc, #240]	@ (800de10 <tcp_receive+0x88c>)
 800dd1e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dd20:	4b3b      	ldr	r3, [pc, #236]	@ (800de10 <tcp_receive+0x88c>)
 800dd22:	881b      	ldrh	r3, [r3, #0]
 800dd24:	461a      	mov	r2, r3
 800dd26:	4b38      	ldr	r3, [pc, #224]	@ (800de08 <tcp_receive+0x884>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	441a      	add	r2, r3
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd30:	6879      	ldr	r1, [r7, #4]
 800dd32:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dd34:	440b      	add	r3, r1
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d006      	beq.n	800dd48 <tcp_receive+0x7c4>
 800dd3a:	4b36      	ldr	r3, [pc, #216]	@ (800de14 <tcp_receive+0x890>)
 800dd3c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800dd40:	4935      	ldr	r1, [pc, #212]	@ (800de18 <tcp_receive+0x894>)
 800dd42:	4836      	ldr	r0, [pc, #216]	@ (800de1c <tcp_receive+0x898>)
 800dd44:	f005 fa8a 	bl	801325c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	f000 80e6 	beq.w	800df1e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dd52:	4b2e      	ldr	r3, [pc, #184]	@ (800de0c <tcp_receive+0x888>)
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	899b      	ldrh	r3, [r3, #12]
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7fa ff30 	bl	8008bc0 <lwip_htons>
 800dd60:	4603      	mov	r3, r0
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	f003 0301 	and.w	r3, r3, #1
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d010      	beq.n	800dd8e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800dd6c:	e00a      	b.n	800dd84 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd72:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800dd7e:	68f8      	ldr	r0, [r7, #12]
 800dd80:	f7fd fd93 	bl	800b8aa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d1f0      	bne.n	800dd6e <tcp_receive+0x7ea>
 800dd8c:	e0c7      	b.n	800df1e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800dd94:	e051      	b.n	800de3a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800dd96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	899b      	ldrh	r3, [r3, #12]
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7fa ff0e 	bl	8008bc0 <lwip_htons>
 800dda4:	4603      	mov	r3, r0
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	f003 0301 	and.w	r3, r3, #1
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d03c      	beq.n	800de2a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ddb0:	4b16      	ldr	r3, [pc, #88]	@ (800de0c <tcp_receive+0x888>)
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	899b      	ldrh	r3, [r3, #12]
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7fa ff01 	bl	8008bc0 <lwip_htons>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d12f      	bne.n	800de2a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ddca:	4b10      	ldr	r3, [pc, #64]	@ (800de0c <tcp_receive+0x888>)
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	899b      	ldrh	r3, [r3, #12]
 800ddd0:	b29c      	uxth	r4, r3
 800ddd2:	2001      	movs	r0, #1
 800ddd4:	f7fa fef4 	bl	8008bc0 <lwip_htons>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	461a      	mov	r2, r3
 800dddc:	4b0b      	ldr	r3, [pc, #44]	@ (800de0c <tcp_receive+0x888>)
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	4322      	orrs	r2, r4
 800dde2:	b292      	uxth	r2, r2
 800dde4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800dde6:	4b09      	ldr	r3, [pc, #36]	@ (800de0c <tcp_receive+0x888>)
 800dde8:	891c      	ldrh	r4, [r3, #8]
 800ddea:	4b08      	ldr	r3, [pc, #32]	@ (800de0c <tcp_receive+0x888>)
 800ddec:	68db      	ldr	r3, [r3, #12]
 800ddee:	899b      	ldrh	r3, [r3, #12]
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7fa fee4 	bl	8008bc0 <lwip_htons>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	f003 0303 	and.w	r3, r3, #3
 800de00:	2b00      	cmp	r3, #0
 800de02:	d00d      	beq.n	800de20 <tcp_receive+0x89c>
 800de04:	2301      	movs	r3, #1
 800de06:	e00c      	b.n	800de22 <tcp_receive+0x89e>
 800de08:	200089fc 	.word	0x200089fc
 800de0c:	200089dc 	.word	0x200089dc
 800de10:	20008a06 	.word	0x20008a06
 800de14:	08015950 	.word	0x08015950
 800de18:	08015cf8 	.word	0x08015cf8
 800de1c:	0801599c 	.word	0x0801599c
 800de20:	2300      	movs	r3, #0
 800de22:	4423      	add	r3, r4
 800de24:	b29a      	uxth	r2, r3
 800de26:	4b98      	ldr	r3, [pc, #608]	@ (800e088 <tcp_receive+0xb04>)
 800de28:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800de2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de2c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800de2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800de34:	6938      	ldr	r0, [r7, #16]
 800de36:	f7fd fd38 	bl	800b8aa <tcp_seg_free>
            while (next &&
 800de3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d00e      	beq.n	800de5e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800de40:	4b91      	ldr	r3, [pc, #580]	@ (800e088 <tcp_receive+0xb04>)
 800de42:	881b      	ldrh	r3, [r3, #0]
 800de44:	461a      	mov	r2, r3
 800de46:	4b91      	ldr	r3, [pc, #580]	@ (800e08c <tcp_receive+0xb08>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	441a      	add	r2, r3
 800de4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800de54:	8909      	ldrh	r1, [r1, #8]
 800de56:	440b      	add	r3, r1
 800de58:	1ad3      	subs	r3, r2, r3
            while (next &&
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	da9b      	bge.n	800dd96 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800de5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de60:	2b00      	cmp	r3, #0
 800de62:	d059      	beq.n	800df18 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800de64:	4b88      	ldr	r3, [pc, #544]	@ (800e088 <tcp_receive+0xb04>)
 800de66:	881b      	ldrh	r3, [r3, #0]
 800de68:	461a      	mov	r2, r3
 800de6a:	4b88      	ldr	r3, [pc, #544]	@ (800e08c <tcp_receive+0xb08>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	441a      	add	r2, r3
 800de70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	1ad3      	subs	r3, r2, r3
            if (next &&
 800de78:	2b00      	cmp	r3, #0
 800de7a:	dd4d      	ble.n	800df18 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800de7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de7e:	68db      	ldr	r3, [r3, #12]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	b29a      	uxth	r2, r3
 800de84:	4b81      	ldr	r3, [pc, #516]	@ (800e08c <tcp_receive+0xb08>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	b29b      	uxth	r3, r3
 800de8a:	1ad3      	subs	r3, r2, r3
 800de8c:	b29a      	uxth	r2, r3
 800de8e:	4b80      	ldr	r3, [pc, #512]	@ (800e090 <tcp_receive+0xb0c>)
 800de90:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800de92:	4b7f      	ldr	r3, [pc, #508]	@ (800e090 <tcp_receive+0xb0c>)
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	899b      	ldrh	r3, [r3, #12]
 800de98:	b29b      	uxth	r3, r3
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7fa fe90 	bl	8008bc0 <lwip_htons>
 800dea0:	4603      	mov	r3, r0
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	f003 0302 	and.w	r3, r3, #2
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d005      	beq.n	800deb8 <tcp_receive+0x934>
                inseg.len -= 1;
 800deac:	4b78      	ldr	r3, [pc, #480]	@ (800e090 <tcp_receive+0xb0c>)
 800deae:	891b      	ldrh	r3, [r3, #8]
 800deb0:	3b01      	subs	r3, #1
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	4b76      	ldr	r3, [pc, #472]	@ (800e090 <tcp_receive+0xb0c>)
 800deb6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800deb8:	4b75      	ldr	r3, [pc, #468]	@ (800e090 <tcp_receive+0xb0c>)
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	4a74      	ldr	r2, [pc, #464]	@ (800e090 <tcp_receive+0xb0c>)
 800debe:	8912      	ldrh	r2, [r2, #8]
 800dec0:	4611      	mov	r1, r2
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fc f854 	bl	8009f70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800dec8:	4b71      	ldr	r3, [pc, #452]	@ (800e090 <tcp_receive+0xb0c>)
 800deca:	891c      	ldrh	r4, [r3, #8]
 800decc:	4b70      	ldr	r3, [pc, #448]	@ (800e090 <tcp_receive+0xb0c>)
 800dece:	68db      	ldr	r3, [r3, #12]
 800ded0:	899b      	ldrh	r3, [r3, #12]
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7fa fe73 	bl	8008bc0 <lwip_htons>
 800deda:	4603      	mov	r3, r0
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	f003 0303 	and.w	r3, r3, #3
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d001      	beq.n	800deea <tcp_receive+0x966>
 800dee6:	2301      	movs	r3, #1
 800dee8:	e000      	b.n	800deec <tcp_receive+0x968>
 800deea:	2300      	movs	r3, #0
 800deec:	4423      	add	r3, r4
 800deee:	b29a      	uxth	r2, r3
 800def0:	4b65      	ldr	r3, [pc, #404]	@ (800e088 <tcp_receive+0xb04>)
 800def2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800def4:	4b64      	ldr	r3, [pc, #400]	@ (800e088 <tcp_receive+0xb04>)
 800def6:	881b      	ldrh	r3, [r3, #0]
 800def8:	461a      	mov	r2, r3
 800defa:	4b64      	ldr	r3, [pc, #400]	@ (800e08c <tcp_receive+0xb08>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	441a      	add	r2, r3
 800df00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df02:	68db      	ldr	r3, [r3, #12]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	429a      	cmp	r2, r3
 800df08:	d006      	beq.n	800df18 <tcp_receive+0x994>
 800df0a:	4b62      	ldr	r3, [pc, #392]	@ (800e094 <tcp_receive+0xb10>)
 800df0c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800df10:	4961      	ldr	r1, [pc, #388]	@ (800e098 <tcp_receive+0xb14>)
 800df12:	4862      	ldr	r0, [pc, #392]	@ (800e09c <tcp_receive+0xb18>)
 800df14:	f005 f9a2 	bl	801325c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800df1c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800df1e:	4b5a      	ldr	r3, [pc, #360]	@ (800e088 <tcp_receive+0xb04>)
 800df20:	881b      	ldrh	r3, [r3, #0]
 800df22:	461a      	mov	r2, r3
 800df24:	4b59      	ldr	r3, [pc, #356]	@ (800e08c <tcp_receive+0xb08>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	441a      	add	r2, r3
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800df32:	4b55      	ldr	r3, [pc, #340]	@ (800e088 <tcp_receive+0xb04>)
 800df34:	881b      	ldrh	r3, [r3, #0]
 800df36:	429a      	cmp	r2, r3
 800df38:	d206      	bcs.n	800df48 <tcp_receive+0x9c4>
 800df3a:	4b56      	ldr	r3, [pc, #344]	@ (800e094 <tcp_receive+0xb10>)
 800df3c:	f240 6207 	movw	r2, #1543	@ 0x607
 800df40:	4957      	ldr	r1, [pc, #348]	@ (800e0a0 <tcp_receive+0xb1c>)
 800df42:	4856      	ldr	r0, [pc, #344]	@ (800e09c <tcp_receive+0xb18>)
 800df44:	f005 f98a 	bl	801325c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800df4c:	4b4e      	ldr	r3, [pc, #312]	@ (800e088 <tcp_receive+0xb04>)
 800df4e:	881b      	ldrh	r3, [r3, #0]
 800df50:	1ad3      	subs	r3, r2, r3
 800df52:	b29a      	uxth	r2, r3
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7fc ffc5 	bl	800aee8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800df5e:	4b4c      	ldr	r3, [pc, #304]	@ (800e090 <tcp_receive+0xb0c>)
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	891b      	ldrh	r3, [r3, #8]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d006      	beq.n	800df76 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800df68:	4b49      	ldr	r3, [pc, #292]	@ (800e090 <tcp_receive+0xb0c>)
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	4a4d      	ldr	r2, [pc, #308]	@ (800e0a4 <tcp_receive+0xb20>)
 800df6e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800df70:	4b47      	ldr	r3, [pc, #284]	@ (800e090 <tcp_receive+0xb0c>)
 800df72:	2200      	movs	r2, #0
 800df74:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800df76:	4b46      	ldr	r3, [pc, #280]	@ (800e090 <tcp_receive+0xb0c>)
 800df78:	68db      	ldr	r3, [r3, #12]
 800df7a:	899b      	ldrh	r3, [r3, #12]
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fa fe1e 	bl	8008bc0 <lwip_htons>
 800df84:	4603      	mov	r3, r0
 800df86:	b2db      	uxtb	r3, r3
 800df88:	f003 0301 	and.w	r3, r3, #1
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f000 80b8 	beq.w	800e102 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800df92:	4b45      	ldr	r3, [pc, #276]	@ (800e0a8 <tcp_receive+0xb24>)
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	f043 0320 	orr.w	r3, r3, #32
 800df9a:	b2da      	uxtb	r2, r3
 800df9c:	4b42      	ldr	r3, [pc, #264]	@ (800e0a8 <tcp_receive+0xb24>)
 800df9e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800dfa0:	e0af      	b.n	800e102 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dfa6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	4a36      	ldr	r2, [pc, #216]	@ (800e08c <tcp_receive+0xb08>)
 800dfb2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	891b      	ldrh	r3, [r3, #8]
 800dfb8:	461c      	mov	r4, r3
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	899b      	ldrh	r3, [r3, #12]
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7fa fdfc 	bl	8008bc0 <lwip_htons>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	f003 0303 	and.w	r3, r3, #3
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d001      	beq.n	800dfd8 <tcp_receive+0xa54>
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e000      	b.n	800dfda <tcp_receive+0xa56>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	191a      	adds	r2, r3, r4
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfe0:	441a      	add	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfea:	461c      	mov	r4, r3
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	891b      	ldrh	r3, [r3, #8]
 800dff0:	461d      	mov	r5, r3
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	899b      	ldrh	r3, [r3, #12]
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fa fde0 	bl	8008bc0 <lwip_htons>
 800e000:	4603      	mov	r3, r0
 800e002:	b2db      	uxtb	r3, r3
 800e004:	f003 0303 	and.w	r3, r3, #3
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <tcp_receive+0xa8c>
 800e00c:	2301      	movs	r3, #1
 800e00e:	e000      	b.n	800e012 <tcp_receive+0xa8e>
 800e010:	2300      	movs	r3, #0
 800e012:	442b      	add	r3, r5
 800e014:	429c      	cmp	r4, r3
 800e016:	d206      	bcs.n	800e026 <tcp_receive+0xaa2>
 800e018:	4b1e      	ldr	r3, [pc, #120]	@ (800e094 <tcp_receive+0xb10>)
 800e01a:	f240 622b 	movw	r2, #1579	@ 0x62b
 800e01e:	4923      	ldr	r1, [pc, #140]	@ (800e0ac <tcp_receive+0xb28>)
 800e020:	481e      	ldr	r0, [pc, #120]	@ (800e09c <tcp_receive+0xb18>)
 800e022:	f005 f91b 	bl	801325c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	891b      	ldrh	r3, [r3, #8]
 800e02a:	461c      	mov	r4, r3
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	899b      	ldrh	r3, [r3, #12]
 800e032:	b29b      	uxth	r3, r3
 800e034:	4618      	mov	r0, r3
 800e036:	f7fa fdc3 	bl	8008bc0 <lwip_htons>
 800e03a:	4603      	mov	r3, r0
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	f003 0303 	and.w	r3, r3, #3
 800e042:	2b00      	cmp	r3, #0
 800e044:	d001      	beq.n	800e04a <tcp_receive+0xac6>
 800e046:	2301      	movs	r3, #1
 800e048:	e000      	b.n	800e04c <tcp_receive+0xac8>
 800e04a:	2300      	movs	r3, #0
 800e04c:	1919      	adds	r1, r3, r4
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e052:	b28b      	uxth	r3, r1
 800e054:	1ad3      	subs	r3, r2, r3
 800e056:	b29a      	uxth	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f7fc ff43 	bl	800aee8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	891b      	ldrh	r3, [r3, #8]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d028      	beq.n	800e0be <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e06c:	4b0d      	ldr	r3, [pc, #52]	@ (800e0a4 <tcp_receive+0xb20>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d01d      	beq.n	800e0b0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800e074:	4b0b      	ldr	r3, [pc, #44]	@ (800e0a4 <tcp_receive+0xb20>)
 800e076:	681a      	ldr	r2, [r3, #0]
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	4619      	mov	r1, r3
 800e07e:	4610      	mov	r0, r2
 800e080:	f7fc f9be 	bl	800a400 <pbuf_cat>
 800e084:	e018      	b.n	800e0b8 <tcp_receive+0xb34>
 800e086:	bf00      	nop
 800e088:	20008a06 	.word	0x20008a06
 800e08c:	200089fc 	.word	0x200089fc
 800e090:	200089dc 	.word	0x200089dc
 800e094:	08015950 	.word	0x08015950
 800e098:	08015d30 	.word	0x08015d30
 800e09c:	0801599c 	.word	0x0801599c
 800e0a0:	08015d6c 	.word	0x08015d6c
 800e0a4:	20008a0c 	.word	0x20008a0c
 800e0a8:	20008a09 	.word	0x20008a09
 800e0ac:	08015d8c 	.word	0x08015d8c
            } else {
              recv_data = cseg->p;
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	4a70      	ldr	r2, [pc, #448]	@ (800e278 <tcp_receive+0xcf4>)
 800e0b6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	899b      	ldrh	r3, [r3, #12]
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fa fd7a 	bl	8008bc0 <lwip_htons>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	f003 0301 	and.w	r3, r3, #1
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d00d      	beq.n	800e0f4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e0d8:	4b68      	ldr	r3, [pc, #416]	@ (800e27c <tcp_receive+0xcf8>)
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	f043 0320 	orr.w	r3, r3, #32
 800e0e0:	b2da      	uxtb	r2, r3
 800e0e2:	4b66      	ldr	r3, [pc, #408]	@ (800e27c <tcp_receive+0xcf8>)
 800e0e4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	7d1b      	ldrb	r3, [r3, #20]
 800e0ea:	2b04      	cmp	r3, #4
 800e0ec:	d102      	bne.n	800e0f4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2207      	movs	r2, #7
 800e0f2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800e0fc:	68b8      	ldr	r0, [r7, #8]
 800e0fe:	f7fd fbd4 	bl	800b8aa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e106:	2b00      	cmp	r3, #0
 800e108:	d008      	beq.n	800e11c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	685a      	ldr	r2, [r3, #4]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800e116:	429a      	cmp	r2, r3
 800e118:	f43f af43 	beq.w	800dfa2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	8b5b      	ldrh	r3, [r3, #26]
 800e120:	f003 0301 	and.w	r3, r3, #1
 800e124:	2b00      	cmp	r3, #0
 800e126:	d00e      	beq.n	800e146 <tcp_receive+0xbc2>
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	8b5b      	ldrh	r3, [r3, #26]
 800e12c:	f023 0301 	bic.w	r3, r3, #1
 800e130:	b29a      	uxth	r2, r3
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	835a      	strh	r2, [r3, #26]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	8b5b      	ldrh	r3, [r3, #26]
 800e13a:	f043 0302 	orr.w	r3, r3, #2
 800e13e:	b29a      	uxth	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e144:	e187      	b.n	800e456 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	8b5b      	ldrh	r3, [r3, #26]
 800e14a:	f043 0301 	orr.w	r3, r3, #1
 800e14e:	b29a      	uxth	r2, r3
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e154:	e17f      	b.n	800e456 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d106      	bne.n	800e16c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e15e:	4848      	ldr	r0, [pc, #288]	@ (800e280 <tcp_receive+0xcfc>)
 800e160:	f7fd fbbc 	bl	800b8dc <tcp_seg_copy>
 800e164:	4602      	mov	r2, r0
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	675a      	str	r2, [r3, #116]	@ 0x74
 800e16a:	e16c      	b.n	800e446 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e16c:	2300      	movs	r3, #0
 800e16e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e174:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e176:	e156      	b.n	800e426 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800e178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e17a:	68db      	ldr	r3, [r3, #12]
 800e17c:	685a      	ldr	r2, [r3, #4]
 800e17e:	4b41      	ldr	r3, [pc, #260]	@ (800e284 <tcp_receive+0xd00>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	429a      	cmp	r2, r3
 800e184:	d11d      	bne.n	800e1c2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e186:	4b3e      	ldr	r3, [pc, #248]	@ (800e280 <tcp_receive+0xcfc>)
 800e188:	891a      	ldrh	r2, [r3, #8]
 800e18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e18c:	891b      	ldrh	r3, [r3, #8]
 800e18e:	429a      	cmp	r2, r3
 800e190:	f240 814e 	bls.w	800e430 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e194:	483a      	ldr	r0, [pc, #232]	@ (800e280 <tcp_receive+0xcfc>)
 800e196:	f7fd fba1 	bl	800b8dc <tcp_seg_copy>
 800e19a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	f000 8148 	beq.w	800e434 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800e1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d003      	beq.n	800e1b2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800e1aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1ac:	697a      	ldr	r2, [r7, #20]
 800e1ae:	601a      	str	r2, [r3, #0]
 800e1b0:	e002      	b.n	800e1b8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	697a      	ldr	r2, [r7, #20]
 800e1b6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e1b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e1ba:	6978      	ldr	r0, [r7, #20]
 800e1bc:	f7ff f8de 	bl	800d37c <tcp_oos_insert_segment>
                }
                break;
 800e1c0:	e138      	b.n	800e434 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d117      	bne.n	800e1f8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e1c8:	4b2e      	ldr	r3, [pc, #184]	@ (800e284 <tcp_receive+0xd00>)
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	1ad3      	subs	r3, r2, r3
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	da57      	bge.n	800e288 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e1d8:	4829      	ldr	r0, [pc, #164]	@ (800e280 <tcp_receive+0xcfc>)
 800e1da:	f7fd fb7f 	bl	800b8dc <tcp_seg_copy>
 800e1de:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	f000 8128 	beq.w	800e438 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	69ba      	ldr	r2, [r7, #24]
 800e1ec:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e1ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e1f0:	69b8      	ldr	r0, [r7, #24]
 800e1f2:	f7ff f8c3 	bl	800d37c <tcp_oos_insert_segment>
                  }
                  break;
 800e1f6:	e11f      	b.n	800e438 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e1f8:	4b22      	ldr	r3, [pc, #136]	@ (800e284 <tcp_receive+0xd00>)
 800e1fa:	681a      	ldr	r2, [r3, #0]
 800e1fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1fe:	68db      	ldr	r3, [r3, #12]
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	1ad3      	subs	r3, r2, r3
 800e204:	3b01      	subs	r3, #1
 800e206:	2b00      	cmp	r3, #0
 800e208:	db3e      	blt.n	800e288 <tcp_receive+0xd04>
 800e20a:	4b1e      	ldr	r3, [pc, #120]	@ (800e284 <tcp_receive+0xd00>)
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e210:	68db      	ldr	r3, [r3, #12]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	1ad3      	subs	r3, r2, r3
 800e216:	3301      	adds	r3, #1
 800e218:	2b00      	cmp	r3, #0
 800e21a:	dc35      	bgt.n	800e288 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e21c:	4818      	ldr	r0, [pc, #96]	@ (800e280 <tcp_receive+0xcfc>)
 800e21e:	f7fd fb5d 	bl	800b8dc <tcp_seg_copy>
 800e222:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	2b00      	cmp	r3, #0
 800e228:	f000 8108 	beq.w	800e43c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e22c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e234:	8912      	ldrh	r2, [r2, #8]
 800e236:	441a      	add	r2, r3
 800e238:	4b12      	ldr	r3, [pc, #72]	@ (800e284 <tcp_receive+0xd00>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	1ad3      	subs	r3, r2, r3
 800e23e:	2b00      	cmp	r3, #0
 800e240:	dd12      	ble.n	800e268 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e242:	4b10      	ldr	r3, [pc, #64]	@ (800e284 <tcp_receive+0xd00>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	b29a      	uxth	r2, r3
 800e248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	b29b      	uxth	r3, r3
 800e250:	1ad3      	subs	r3, r2, r3
 800e252:	b29a      	uxth	r2, r3
 800e254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e256:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e25a:	685a      	ldr	r2, [r3, #4]
 800e25c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e25e:	891b      	ldrh	r3, [r3, #8]
 800e260:	4619      	mov	r1, r3
 800e262:	4610      	mov	r0, r2
 800e264:	f7fb fe84 	bl	8009f70 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e26a:	69fa      	ldr	r2, [r7, #28]
 800e26c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e26e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e270:	69f8      	ldr	r0, [r7, #28]
 800e272:	f7ff f883 	bl	800d37c <tcp_oos_insert_segment>
                  }
                  break;
 800e276:	e0e1      	b.n	800e43c <tcp_receive+0xeb8>
 800e278:	20008a0c 	.word	0x20008a0c
 800e27c:	20008a09 	.word	0x20008a09
 800e280:	200089dc 	.word	0x200089dc
 800e284:	200089fc 	.word	0x200089fc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e28a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	2b00      	cmp	r3, #0
 800e292:	f040 80c5 	bne.w	800e420 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e296:	4b7f      	ldr	r3, [pc, #508]	@ (800e494 <tcp_receive+0xf10>)
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e29c:	68db      	ldr	r3, [r3, #12]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f340 80bc 	ble.w	800e420 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2aa:	68db      	ldr	r3, [r3, #12]
 800e2ac:	899b      	ldrh	r3, [r3, #12]
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7fa fc85 	bl	8008bc0 <lwip_htons>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	b2db      	uxtb	r3, r3
 800e2ba:	f003 0301 	and.w	r3, r3, #1
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	f040 80be 	bne.w	800e440 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e2c4:	4874      	ldr	r0, [pc, #464]	@ (800e498 <tcp_receive+0xf14>)
 800e2c6:	f7fd fb09 	bl	800b8dc <tcp_seg_copy>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 80b5 	beq.w	800e444 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2e2:	8912      	ldrh	r2, [r2, #8]
 800e2e4:	441a      	add	r2, r3
 800e2e6:	4b6b      	ldr	r3, [pc, #428]	@ (800e494 <tcp_receive+0xf10>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	1ad3      	subs	r3, r2, r3
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	dd12      	ble.n	800e316 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e2f0:	4b68      	ldr	r3, [pc, #416]	@ (800e494 <tcp_receive+0xf10>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	b29a      	uxth	r2, r3
 800e2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	1ad3      	subs	r3, r2, r3
 800e300:	b29a      	uxth	r2, r3
 800e302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e304:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e308:	685a      	ldr	r2, [r3, #4]
 800e30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30c:	891b      	ldrh	r3, [r3, #8]
 800e30e:	4619      	mov	r1, r3
 800e310:	4610      	mov	r0, r2
 800e312:	f7fb fe2d 	bl	8009f70 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e316:	4b61      	ldr	r3, [pc, #388]	@ (800e49c <tcp_receive+0xf18>)
 800e318:	881b      	ldrh	r3, [r3, #0]
 800e31a:	461a      	mov	r2, r3
 800e31c:	4b5d      	ldr	r3, [pc, #372]	@ (800e494 <tcp_receive+0xf10>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	441a      	add	r2, r3
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e326:	6879      	ldr	r1, [r7, #4]
 800e328:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e32a:	440b      	add	r3, r1
 800e32c:	1ad3      	subs	r3, r2, r3
 800e32e:	2b00      	cmp	r3, #0
 800e330:	f340 8088 	ble.w	800e444 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	899b      	ldrh	r3, [r3, #12]
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fa fc3e 	bl	8008bc0 <lwip_htons>
 800e344:	4603      	mov	r3, r0
 800e346:	b2db      	uxtb	r3, r3
 800e348:	f003 0301 	and.w	r3, r3, #1
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d021      	beq.n	800e394 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	899b      	ldrh	r3, [r3, #12]
 800e358:	b29b      	uxth	r3, r3
 800e35a:	b21b      	sxth	r3, r3
 800e35c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e360:	b21c      	sxth	r4, r3
 800e362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	899b      	ldrh	r3, [r3, #12]
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7fa fc27 	bl	8008bc0 <lwip_htons>
 800e372:	4603      	mov	r3, r0
 800e374:	b2db      	uxtb	r3, r3
 800e376:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7fa fc1f 	bl	8008bc0 <lwip_htons>
 800e382:	4603      	mov	r3, r0
 800e384:	b21b      	sxth	r3, r3
 800e386:	4323      	orrs	r3, r4
 800e388:	b21a      	sxth	r2, r3
 800e38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	68db      	ldr	r3, [r3, #12]
 800e390:	b292      	uxth	r2, r2
 800e392:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e398:	b29a      	uxth	r2, r3
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e39e:	4413      	add	r3, r2
 800e3a0:	b299      	uxth	r1, r3
 800e3a2:	4b3c      	ldr	r3, [pc, #240]	@ (800e494 <tcp_receive+0xf10>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	b29a      	uxth	r2, r3
 800e3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	1a8a      	subs	r2, r1, r2
 800e3ae:	b292      	uxth	r2, r2
 800e3b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	685a      	ldr	r2, [r3, #4]
 800e3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	891b      	ldrh	r3, [r3, #8]
 800e3be:	4619      	mov	r1, r3
 800e3c0:	4610      	mov	r0, r2
 800e3c2:	f7fb fdd5 	bl	8009f70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	891c      	ldrh	r4, [r3, #8]
 800e3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	899b      	ldrh	r3, [r3, #12]
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fa fbf2 	bl	8008bc0 <lwip_htons>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	f003 0303 	and.w	r3, r3, #3
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d001      	beq.n	800e3ec <tcp_receive+0xe68>
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	e000      	b.n	800e3ee <tcp_receive+0xe6a>
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	4423      	add	r3, r4
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	4b2a      	ldr	r3, [pc, #168]	@ (800e49c <tcp_receive+0xf18>)
 800e3f4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e3f6:	4b29      	ldr	r3, [pc, #164]	@ (800e49c <tcp_receive+0xf18>)
 800e3f8:	881b      	ldrh	r3, [r3, #0]
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	4b25      	ldr	r3, [pc, #148]	@ (800e494 <tcp_receive+0xf10>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	441a      	add	r2, r3
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e406:	6879      	ldr	r1, [r7, #4]
 800e408:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e40a:	440b      	add	r3, r1
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d019      	beq.n	800e444 <tcp_receive+0xec0>
 800e410:	4b23      	ldr	r3, [pc, #140]	@ (800e4a0 <tcp_receive+0xf1c>)
 800e412:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800e416:	4923      	ldr	r1, [pc, #140]	@ (800e4a4 <tcp_receive+0xf20>)
 800e418:	4823      	ldr	r0, [pc, #140]	@ (800e4a8 <tcp_receive+0xf24>)
 800e41a:	f004 ff1f 	bl	801325c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e41e:	e011      	b.n	800e444 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e428:	2b00      	cmp	r3, #0
 800e42a:	f47f aea5 	bne.w	800e178 <tcp_receive+0xbf4>
 800e42e:	e00a      	b.n	800e446 <tcp_receive+0xec2>
                break;
 800e430:	bf00      	nop
 800e432:	e008      	b.n	800e446 <tcp_receive+0xec2>
                break;
 800e434:	bf00      	nop
 800e436:	e006      	b.n	800e446 <tcp_receive+0xec2>
                  break;
 800e438:	bf00      	nop
 800e43a:	e004      	b.n	800e446 <tcp_receive+0xec2>
                  break;
 800e43c:	bf00      	nop
 800e43e:	e002      	b.n	800e446 <tcp_receive+0xec2>
                  break;
 800e440:	bf00      	nop
 800e442:	e000      	b.n	800e446 <tcp_receive+0xec2>
                break;
 800e444:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f001 fa30 	bl	800f8ac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e44c:	e003      	b.n	800e456 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f001 fa2c 	bl	800f8ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e454:	e01a      	b.n	800e48c <tcp_receive+0xf08>
 800e456:	e019      	b.n	800e48c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e458:	4b0e      	ldr	r3, [pc, #56]	@ (800e494 <tcp_receive+0xf10>)
 800e45a:	681a      	ldr	r2, [r3, #0]
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e460:	1ad3      	subs	r3, r2, r3
 800e462:	2b00      	cmp	r3, #0
 800e464:	db0a      	blt.n	800e47c <tcp_receive+0xef8>
 800e466:	4b0b      	ldr	r3, [pc, #44]	@ (800e494 <tcp_receive+0xf10>)
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e46e:	6879      	ldr	r1, [r7, #4]
 800e470:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e472:	440b      	add	r3, r1
 800e474:	1ad3      	subs	r3, r2, r3
 800e476:	3301      	adds	r3, #1
 800e478:	2b00      	cmp	r3, #0
 800e47a:	dd07      	ble.n	800e48c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	8b5b      	ldrh	r3, [r3, #26]
 800e480:	f043 0302 	orr.w	r3, r3, #2
 800e484:	b29a      	uxth	r2, r3
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e48a:	e7ff      	b.n	800e48c <tcp_receive+0xf08>
 800e48c:	bf00      	nop
 800e48e:	3750      	adds	r7, #80	@ 0x50
 800e490:	46bd      	mov	sp, r7
 800e492:	bdb0      	pop	{r4, r5, r7, pc}
 800e494:	200089fc 	.word	0x200089fc
 800e498:	200089dc 	.word	0x200089dc
 800e49c:	20008a06 	.word	0x20008a06
 800e4a0:	08015950 	.word	0x08015950
 800e4a4:	08015cf8 	.word	0x08015cf8
 800e4a8:	0801599c 	.word	0x0801599c

0800e4ac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e4b2:	4b15      	ldr	r3, [pc, #84]	@ (800e508 <tcp_get_next_optbyte+0x5c>)
 800e4b4:	881b      	ldrh	r3, [r3, #0]
 800e4b6:	1c5a      	adds	r2, r3, #1
 800e4b8:	b291      	uxth	r1, r2
 800e4ba:	4a13      	ldr	r2, [pc, #76]	@ (800e508 <tcp_get_next_optbyte+0x5c>)
 800e4bc:	8011      	strh	r1, [r2, #0]
 800e4be:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e4c0:	4b12      	ldr	r3, [pc, #72]	@ (800e50c <tcp_get_next_optbyte+0x60>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d004      	beq.n	800e4d2 <tcp_get_next_optbyte+0x26>
 800e4c8:	4b11      	ldr	r3, [pc, #68]	@ (800e510 <tcp_get_next_optbyte+0x64>)
 800e4ca:	881b      	ldrh	r3, [r3, #0]
 800e4cc:	88fa      	ldrh	r2, [r7, #6]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d208      	bcs.n	800e4e4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e4d2:	4b10      	ldr	r3, [pc, #64]	@ (800e514 <tcp_get_next_optbyte+0x68>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	3314      	adds	r3, #20
 800e4d8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e4da:	88fb      	ldrh	r3, [r7, #6]
 800e4dc:	683a      	ldr	r2, [r7, #0]
 800e4de:	4413      	add	r3, r2
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	e00b      	b.n	800e4fc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e4e4:	88fb      	ldrh	r3, [r7, #6]
 800e4e6:	b2da      	uxtb	r2, r3
 800e4e8:	4b09      	ldr	r3, [pc, #36]	@ (800e510 <tcp_get_next_optbyte+0x64>)
 800e4ea:	881b      	ldrh	r3, [r3, #0]
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	1ad3      	subs	r3, r2, r3
 800e4f0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e4f2:	4b06      	ldr	r3, [pc, #24]	@ (800e50c <tcp_get_next_optbyte+0x60>)
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	797b      	ldrb	r3, [r7, #5]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	370c      	adds	r7, #12
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr
 800e508:	200089f8 	.word	0x200089f8
 800e50c:	200089f4 	.word	0x200089f4
 800e510:	200089f2 	.word	0x200089f2
 800e514:	200089ec 	.word	0x200089ec

0800e518 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d106      	bne.n	800e534 <tcp_parseopt+0x1c>
 800e526:	4b32      	ldr	r3, [pc, #200]	@ (800e5f0 <tcp_parseopt+0xd8>)
 800e528:	f240 727d 	movw	r2, #1917	@ 0x77d
 800e52c:	4931      	ldr	r1, [pc, #196]	@ (800e5f4 <tcp_parseopt+0xdc>)
 800e52e:	4832      	ldr	r0, [pc, #200]	@ (800e5f8 <tcp_parseopt+0xe0>)
 800e530:	f004 fe94 	bl	801325c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e534:	4b31      	ldr	r3, [pc, #196]	@ (800e5fc <tcp_parseopt+0xe4>)
 800e536:	881b      	ldrh	r3, [r3, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d056      	beq.n	800e5ea <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e53c:	4b30      	ldr	r3, [pc, #192]	@ (800e600 <tcp_parseopt+0xe8>)
 800e53e:	2200      	movs	r2, #0
 800e540:	801a      	strh	r2, [r3, #0]
 800e542:	e046      	b.n	800e5d2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800e544:	f7ff ffb2 	bl	800e4ac <tcp_get_next_optbyte>
 800e548:	4603      	mov	r3, r0
 800e54a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e54c:	7bfb      	ldrb	r3, [r7, #15]
 800e54e:	2b02      	cmp	r3, #2
 800e550:	d006      	beq.n	800e560 <tcp_parseopt+0x48>
 800e552:	2b02      	cmp	r3, #2
 800e554:	dc2a      	bgt.n	800e5ac <tcp_parseopt+0x94>
 800e556:	2b00      	cmp	r3, #0
 800e558:	d042      	beq.n	800e5e0 <tcp_parseopt+0xc8>
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d038      	beq.n	800e5d0 <tcp_parseopt+0xb8>
 800e55e:	e025      	b.n	800e5ac <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e560:	f7ff ffa4 	bl	800e4ac <tcp_get_next_optbyte>
 800e564:	4603      	mov	r3, r0
 800e566:	2b04      	cmp	r3, #4
 800e568:	d13c      	bne.n	800e5e4 <tcp_parseopt+0xcc>
 800e56a:	4b25      	ldr	r3, [pc, #148]	@ (800e600 <tcp_parseopt+0xe8>)
 800e56c:	881b      	ldrh	r3, [r3, #0]
 800e56e:	3301      	adds	r3, #1
 800e570:	4a22      	ldr	r2, [pc, #136]	@ (800e5fc <tcp_parseopt+0xe4>)
 800e572:	8812      	ldrh	r2, [r2, #0]
 800e574:	4293      	cmp	r3, r2
 800e576:	da35      	bge.n	800e5e4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e578:	f7ff ff98 	bl	800e4ac <tcp_get_next_optbyte>
 800e57c:	4603      	mov	r3, r0
 800e57e:	021b      	lsls	r3, r3, #8
 800e580:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e582:	f7ff ff93 	bl	800e4ac <tcp_get_next_optbyte>
 800e586:	4603      	mov	r3, r0
 800e588:	461a      	mov	r2, r3
 800e58a:	89bb      	ldrh	r3, [r7, #12]
 800e58c:	4313      	orrs	r3, r2
 800e58e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e590:	89bb      	ldrh	r3, [r7, #12]
 800e592:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e596:	d804      	bhi.n	800e5a2 <tcp_parseopt+0x8a>
 800e598:	89bb      	ldrh	r3, [r7, #12]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d001      	beq.n	800e5a2 <tcp_parseopt+0x8a>
 800e59e:	89ba      	ldrh	r2, [r7, #12]
 800e5a0:	e001      	b.n	800e5a6 <tcp_parseopt+0x8e>
 800e5a2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800e5aa:	e012      	b.n	800e5d2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e5ac:	f7ff ff7e 	bl	800e4ac <tcp_get_next_optbyte>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e5b4:	7afb      	ldrb	r3, [r7, #11]
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d916      	bls.n	800e5e8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e5ba:	7afb      	ldrb	r3, [r7, #11]
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	4b10      	ldr	r3, [pc, #64]	@ (800e600 <tcp_parseopt+0xe8>)
 800e5c0:	881b      	ldrh	r3, [r3, #0]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	b29b      	uxth	r3, r3
 800e5c6:	3b02      	subs	r3, #2
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800e600 <tcp_parseopt+0xe8>)
 800e5cc:	801a      	strh	r2, [r3, #0]
 800e5ce:	e000      	b.n	800e5d2 <tcp_parseopt+0xba>
          break;
 800e5d0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e600 <tcp_parseopt+0xe8>)
 800e5d4:	881a      	ldrh	r2, [r3, #0]
 800e5d6:	4b09      	ldr	r3, [pc, #36]	@ (800e5fc <tcp_parseopt+0xe4>)
 800e5d8:	881b      	ldrh	r3, [r3, #0]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d3b2      	bcc.n	800e544 <tcp_parseopt+0x2c>
 800e5de:	e004      	b.n	800e5ea <tcp_parseopt+0xd2>
          return;
 800e5e0:	bf00      	nop
 800e5e2:	e002      	b.n	800e5ea <tcp_parseopt+0xd2>
            return;
 800e5e4:	bf00      	nop
 800e5e6:	e000      	b.n	800e5ea <tcp_parseopt+0xd2>
            return;
 800e5e8:	bf00      	nop
      }
    }
  }
}
 800e5ea:	3710      	adds	r7, #16
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	08015950 	.word	0x08015950
 800e5f4:	08015db4 	.word	0x08015db4
 800e5f8:	0801599c 	.word	0x0801599c
 800e5fc:	200089f0 	.word	0x200089f0
 800e600:	200089f8 	.word	0x200089f8

0800e604 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e604:	b480      	push	{r7}
 800e606:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e608:	4b05      	ldr	r3, [pc, #20]	@ (800e620 <tcp_trigger_input_pcb_close+0x1c>)
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	f043 0310 	orr.w	r3, r3, #16
 800e610:	b2da      	uxtb	r2, r3
 800e612:	4b03      	ldr	r3, [pc, #12]	@ (800e620 <tcp_trigger_input_pcb_close+0x1c>)
 800e614:	701a      	strb	r2, [r3, #0]
}
 800e616:	bf00      	nop
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr
 800e620:	20008a09 	.word	0x20008a09

0800e624 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	60f8      	str	r0, [r7, #12]
 800e62c:	60b9      	str	r1, [r7, #8]
 800e62e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d00a      	beq.n	800e64c <tcp_route+0x28>
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	7a1b      	ldrb	r3, [r3, #8]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d006      	beq.n	800e64c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	7a1b      	ldrb	r3, [r3, #8]
 800e642:	4618      	mov	r0, r3
 800e644:	f7fb faba 	bl	8009bbc <netif_get_by_index>
 800e648:	4603      	mov	r3, r0
 800e64a:	e003      	b.n	800e654 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f003 f9cb 	bl	80119e8 <ip4_route>
 800e652:	4603      	mov	r3, r0
  }
}
 800e654:	4618      	mov	r0, r3
 800e656:	3710      	adds	r7, #16
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e65c:	b590      	push	{r4, r7, lr}
 800e65e:	b087      	sub	sp, #28
 800e660:	af00      	add	r7, sp, #0
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	603b      	str	r3, [r7, #0]
 800e668:	4613      	mov	r3, r2
 800e66a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d105      	bne.n	800e67e <tcp_create_segment+0x22>
 800e672:	4b43      	ldr	r3, [pc, #268]	@ (800e780 <tcp_create_segment+0x124>)
 800e674:	22a3      	movs	r2, #163	@ 0xa3
 800e676:	4943      	ldr	r1, [pc, #268]	@ (800e784 <tcp_create_segment+0x128>)
 800e678:	4843      	ldr	r0, [pc, #268]	@ (800e788 <tcp_create_segment+0x12c>)
 800e67a:	f004 fdef 	bl	801325c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d105      	bne.n	800e690 <tcp_create_segment+0x34>
 800e684:	4b3e      	ldr	r3, [pc, #248]	@ (800e780 <tcp_create_segment+0x124>)
 800e686:	22a4      	movs	r2, #164	@ 0xa4
 800e688:	4940      	ldr	r1, [pc, #256]	@ (800e78c <tcp_create_segment+0x130>)
 800e68a:	483f      	ldr	r0, [pc, #252]	@ (800e788 <tcp_create_segment+0x12c>)
 800e68c:	f004 fde6 	bl	801325c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e690:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e694:	009b      	lsls	r3, r3, #2
 800e696:	b2db      	uxtb	r3, r3
 800e698:	f003 0304 	and.w	r3, r3, #4
 800e69c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e69e:	2003      	movs	r0, #3
 800e6a0:	f7fa ff06 	bl	80094b0 <memp_malloc>
 800e6a4:	6138      	str	r0, [r7, #16]
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d104      	bne.n	800e6b6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e6ac:	68b8      	ldr	r0, [r7, #8]
 800e6ae:	f7fb fde5 	bl	800a27c <pbuf_free>
    return NULL;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	e060      	b.n	800e778 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e6bc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	68ba      	ldr	r2, [r7, #8]
 800e6c8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	891a      	ldrh	r2, [r3, #8]
 800e6ce:	7dfb      	ldrb	r3, [r7, #23]
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d205      	bcs.n	800e6e2 <tcp_create_segment+0x86>
 800e6d6:	4b2a      	ldr	r3, [pc, #168]	@ (800e780 <tcp_create_segment+0x124>)
 800e6d8:	22b0      	movs	r2, #176	@ 0xb0
 800e6da:	492d      	ldr	r1, [pc, #180]	@ (800e790 <tcp_create_segment+0x134>)
 800e6dc:	482a      	ldr	r0, [pc, #168]	@ (800e788 <tcp_create_segment+0x12c>)
 800e6de:	f004 fdbd 	bl	801325c <iprintf>
  seg->len = p->tot_len - optlen;
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	891a      	ldrh	r2, [r3, #8]
 800e6e6:	7dfb      	ldrb	r3, [r7, #23]
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	1ad3      	subs	r3, r2, r3
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e6f2:	2114      	movs	r1, #20
 800e6f4:	68b8      	ldr	r0, [r7, #8]
 800e6f6:	f7fb fd2b 	bl	800a150 <pbuf_add_header>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d004      	beq.n	800e70a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e700:	6938      	ldr	r0, [r7, #16]
 800e702:	f7fd f8d2 	bl	800b8aa <tcp_seg_free>
    return NULL;
 800e706:	2300      	movs	r3, #0
 800e708:	e036      	b.n	800e778 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	685a      	ldr	r2, [r3, #4]
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	8ada      	ldrh	r2, [r3, #22]
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	68dc      	ldr	r4, [r3, #12]
 800e71c:	4610      	mov	r0, r2
 800e71e:	f7fa fa4f 	bl	8008bc0 <lwip_htons>
 800e722:	4603      	mov	r3, r0
 800e724:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	8b1a      	ldrh	r2, [r3, #24]
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	68dc      	ldr	r4, [r3, #12]
 800e72e:	4610      	mov	r0, r2
 800e730:	f7fa fa46 	bl	8008bc0 <lwip_htons>
 800e734:	4603      	mov	r3, r0
 800e736:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	68dc      	ldr	r4, [r3, #12]
 800e73c:	6838      	ldr	r0, [r7, #0]
 800e73e:	f7fa fa55 	bl	8008bec <lwip_htonl>
 800e742:	4603      	mov	r3, r0
 800e744:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e746:	7dfb      	ldrb	r3, [r7, #23]
 800e748:	089b      	lsrs	r3, r3, #2
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	3305      	adds	r3, #5
 800e74e:	b29b      	uxth	r3, r3
 800e750:	031b      	lsls	r3, r3, #12
 800e752:	b29a      	uxth	r2, r3
 800e754:	79fb      	ldrb	r3, [r7, #7]
 800e756:	b29b      	uxth	r3, r3
 800e758:	4313      	orrs	r3, r2
 800e75a:	b29a      	uxth	r2, r3
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	68dc      	ldr	r4, [r3, #12]
 800e760:	4610      	mov	r0, r2
 800e762:	f7fa fa2d 	bl	8008bc0 <lwip_htons>
 800e766:	4603      	mov	r3, r0
 800e768:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	2200      	movs	r2, #0
 800e770:	749a      	strb	r2, [r3, #18]
 800e772:	2200      	movs	r2, #0
 800e774:	74da      	strb	r2, [r3, #19]
  return seg;
 800e776:	693b      	ldr	r3, [r7, #16]
}
 800e778:	4618      	mov	r0, r3
 800e77a:	371c      	adds	r7, #28
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd90      	pop	{r4, r7, pc}
 800e780:	08015dd0 	.word	0x08015dd0
 800e784:	08015e04 	.word	0x08015e04
 800e788:	08015e24 	.word	0x08015e24
 800e78c:	08015e4c 	.word	0x08015e4c
 800e790:	08015e70 	.word	0x08015e70

0800e794 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e794:	b590      	push	{r4, r7, lr}
 800e796:	b08b      	sub	sp, #44	@ 0x2c
 800e798:	af02      	add	r7, sp, #8
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	460b      	mov	r3, r1
 800e79e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	61fb      	str	r3, [r7, #28]
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d106      	bne.n	800e7c0 <tcp_split_unsent_seg+0x2c>
 800e7b2:	4b95      	ldr	r3, [pc, #596]	@ (800ea08 <tcp_split_unsent_seg+0x274>)
 800e7b4:	f240 324b 	movw	r2, #843	@ 0x34b
 800e7b8:	4994      	ldr	r1, [pc, #592]	@ (800ea0c <tcp_split_unsent_seg+0x278>)
 800e7ba:	4895      	ldr	r0, [pc, #596]	@ (800ea10 <tcp_split_unsent_seg+0x27c>)
 800e7bc:	f004 fd4e 	bl	801325c <iprintf>

  useg = pcb->unsent;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7c4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d102      	bne.n	800e7d2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e7cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e7d0:	e116      	b.n	800ea00 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e7d2:	887b      	ldrh	r3, [r7, #2]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d109      	bne.n	800e7ec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e7d8:	4b8b      	ldr	r3, [pc, #556]	@ (800ea08 <tcp_split_unsent_seg+0x274>)
 800e7da:	f240 3253 	movw	r2, #851	@ 0x353
 800e7de:	498d      	ldr	r1, [pc, #564]	@ (800ea14 <tcp_split_unsent_seg+0x280>)
 800e7e0:	488b      	ldr	r0, [pc, #556]	@ (800ea10 <tcp_split_unsent_seg+0x27c>)
 800e7e2:	f004 fd3b 	bl	801325c <iprintf>
    return ERR_VAL;
 800e7e6:	f06f 0305 	mvn.w	r3, #5
 800e7ea:	e109      	b.n	800ea00 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	891b      	ldrh	r3, [r3, #8]
 800e7f0:	887a      	ldrh	r2, [r7, #2]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d301      	bcc.n	800e7fa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	e102      	b.n	800ea00 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7fe:	887a      	ldrh	r2, [r7, #2]
 800e800:	429a      	cmp	r2, r3
 800e802:	d906      	bls.n	800e812 <tcp_split_unsent_seg+0x7e>
 800e804:	4b80      	ldr	r3, [pc, #512]	@ (800ea08 <tcp_split_unsent_seg+0x274>)
 800e806:	f240 325b 	movw	r2, #859	@ 0x35b
 800e80a:	4983      	ldr	r1, [pc, #524]	@ (800ea18 <tcp_split_unsent_seg+0x284>)
 800e80c:	4880      	ldr	r0, [pc, #512]	@ (800ea10 <tcp_split_unsent_seg+0x27c>)
 800e80e:	f004 fd25 	bl	801325c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	891b      	ldrh	r3, [r3, #8]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d106      	bne.n	800e828 <tcp_split_unsent_seg+0x94>
 800e81a:	4b7b      	ldr	r3, [pc, #492]	@ (800ea08 <tcp_split_unsent_seg+0x274>)
 800e81c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800e820:	497e      	ldr	r1, [pc, #504]	@ (800ea1c <tcp_split_unsent_seg+0x288>)
 800e822:	487b      	ldr	r0, [pc, #492]	@ (800ea10 <tcp_split_unsent_seg+0x27c>)
 800e824:	f004 fd1a 	bl	801325c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	7a9b      	ldrb	r3, [r3, #10]
 800e82c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e82e:	7bfb      	ldrb	r3, [r7, #15]
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	b2db      	uxtb	r3, r3
 800e834:	f003 0304 	and.w	r3, r3, #4
 800e838:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	891a      	ldrh	r2, [r3, #8]
 800e83e:	887b      	ldrh	r3, [r7, #2]
 800e840:	1ad3      	subs	r3, r2, r3
 800e842:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e844:	7bbb      	ldrb	r3, [r7, #14]
 800e846:	b29a      	uxth	r2, r3
 800e848:	89bb      	ldrh	r3, [r7, #12]
 800e84a:	4413      	add	r3, r2
 800e84c:	b29b      	uxth	r3, r3
 800e84e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e852:	4619      	mov	r1, r3
 800e854:	2036      	movs	r0, #54	@ 0x36
 800e856:	f7fb fa2d 	bl	8009cb4 <pbuf_alloc>
 800e85a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f000 80b7 	beq.w	800e9d2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	891a      	ldrh	r2, [r3, #8]
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	891b      	ldrh	r3, [r3, #8]
 800e86e:	1ad3      	subs	r3, r2, r3
 800e870:	b29a      	uxth	r2, r3
 800e872:	887b      	ldrh	r3, [r7, #2]
 800e874:	4413      	add	r3, r2
 800e876:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	6858      	ldr	r0, [r3, #4]
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	685a      	ldr	r2, [r3, #4]
 800e880:	7bbb      	ldrb	r3, [r7, #14]
 800e882:	18d1      	adds	r1, r2, r3
 800e884:	897b      	ldrh	r3, [r7, #10]
 800e886:	89ba      	ldrh	r2, [r7, #12]
 800e888:	f7fb fef2 	bl	800a670 <pbuf_copy_partial>
 800e88c:	4603      	mov	r3, r0
 800e88e:	461a      	mov	r2, r3
 800e890:	89bb      	ldrh	r3, [r7, #12]
 800e892:	4293      	cmp	r3, r2
 800e894:	f040 809f 	bne.w	800e9d6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	899b      	ldrh	r3, [r3, #12]
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7fa f98d 	bl	8008bc0 <lwip_htons>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e8ae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e8b4:	7efb      	ldrb	r3, [r7, #27]
 800e8b6:	f003 0308 	and.w	r3, r3, #8
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d007      	beq.n	800e8ce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e8be:	7efb      	ldrb	r3, [r7, #27]
 800e8c0:	f023 0308 	bic.w	r3, r3, #8
 800e8c4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e8c6:	7ebb      	ldrb	r3, [r7, #26]
 800e8c8:	f043 0308 	orr.w	r3, r3, #8
 800e8cc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e8ce:	7efb      	ldrb	r3, [r7, #27]
 800e8d0:	f003 0301 	and.w	r3, r3, #1
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d007      	beq.n	800e8e8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e8d8:	7efb      	ldrb	r3, [r7, #27]
 800e8da:	f023 0301 	bic.w	r3, r3, #1
 800e8de:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e8e0:	7ebb      	ldrb	r3, [r7, #26]
 800e8e2:	f043 0301 	orr.w	r3, r3, #1
 800e8e6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7fa f97c 	bl	8008bec <lwip_htonl>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	887b      	ldrh	r3, [r7, #2]
 800e8f8:	18d1      	adds	r1, r2, r3
 800e8fa:	7eba      	ldrb	r2, [r7, #26]
 800e8fc:	7bfb      	ldrb	r3, [r7, #15]
 800e8fe:	9300      	str	r3, [sp, #0]
 800e900:	460b      	mov	r3, r1
 800e902:	6939      	ldr	r1, [r7, #16]
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f7ff fea9 	bl	800e65c <tcp_create_segment>
 800e90a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d063      	beq.n	800e9da <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	4618      	mov	r0, r3
 800e918:	f7fb fd38 	bl	800a38c <pbuf_clen>
 800e91c:	4603      	mov	r3, r0
 800e91e:	461a      	mov	r2, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e926:	1a9b      	subs	r3, r3, r2
 800e928:	b29a      	uxth	r2, r3
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	6858      	ldr	r0, [r3, #4]
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	891a      	ldrh	r2, [r3, #8]
 800e93a:	89bb      	ldrh	r3, [r7, #12]
 800e93c:	1ad3      	subs	r3, r2, r3
 800e93e:	b29b      	uxth	r3, r3
 800e940:	4619      	mov	r1, r3
 800e942:	f7fb fb15 	bl	8009f70 <pbuf_realloc>
  useg->len -= remainder;
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	891a      	ldrh	r2, [r3, #8]
 800e94a:	89bb      	ldrh	r3, [r7, #12]
 800e94c:	1ad3      	subs	r3, r2, r3
 800e94e:	b29a      	uxth	r2, r3
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	68db      	ldr	r3, [r3, #12]
 800e958:	899b      	ldrh	r3, [r3, #12]
 800e95a:	b29c      	uxth	r4, r3
 800e95c:	7efb      	ldrb	r3, [r7, #27]
 800e95e:	b29b      	uxth	r3, r3
 800e960:	4618      	mov	r0, r3
 800e962:	f7fa f92d 	bl	8008bc0 <lwip_htons>
 800e966:	4603      	mov	r3, r0
 800e968:	461a      	mov	r2, r3
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	4322      	orrs	r2, r4
 800e970:	b292      	uxth	r2, r2
 800e972:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	4618      	mov	r0, r3
 800e97a:	f7fb fd07 	bl	800a38c <pbuf_clen>
 800e97e:	4603      	mov	r3, r0
 800e980:	461a      	mov	r2, r3
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e988:	4413      	add	r3, r2
 800e98a:	b29a      	uxth	r2, r3
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	685b      	ldr	r3, [r3, #4]
 800e996:	4618      	mov	r0, r3
 800e998:	f7fb fcf8 	bl	800a38c <pbuf_clen>
 800e99c:	4603      	mov	r3, r0
 800e99e:	461a      	mov	r2, r3
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e9a6:	4413      	add	r3, r2
 800e9a8:	b29a      	uxth	r2, r3
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	69fa      	ldr	r2, [r7, #28]
 800e9bc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d103      	bne.n	800e9ce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	e016      	b.n	800ea00 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e9d2:	bf00      	nop
 800e9d4:	e002      	b.n	800e9dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e9d6:	bf00      	nop
 800e9d8:	e000      	b.n	800e9dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e9da:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d006      	beq.n	800e9f0 <tcp_split_unsent_seg+0x25c>
 800e9e2:	4b09      	ldr	r3, [pc, #36]	@ (800ea08 <tcp_split_unsent_seg+0x274>)
 800e9e4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800e9e8:	490d      	ldr	r1, [pc, #52]	@ (800ea20 <tcp_split_unsent_seg+0x28c>)
 800e9ea:	4809      	ldr	r0, [pc, #36]	@ (800ea10 <tcp_split_unsent_seg+0x27c>)
 800e9ec:	f004 fc36 	bl	801325c <iprintf>
  if (p != NULL) {
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d002      	beq.n	800e9fc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e9f6:	6938      	ldr	r0, [r7, #16]
 800e9f8:	f7fb fc40 	bl	800a27c <pbuf_free>
  }

  return ERR_MEM;
 800e9fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3724      	adds	r7, #36	@ 0x24
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd90      	pop	{r4, r7, pc}
 800ea08:	08015dd0 	.word	0x08015dd0
 800ea0c:	08016164 	.word	0x08016164
 800ea10:	08015e24 	.word	0x08015e24
 800ea14:	08016188 	.word	0x08016188
 800ea18:	080161ac 	.word	0x080161ac
 800ea1c:	080161bc 	.word	0x080161bc
 800ea20:	080161cc 	.word	0x080161cc

0800ea24 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ea24:	b590      	push	{r4, r7, lr}
 800ea26:	b085      	sub	sp, #20
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d106      	bne.n	800ea40 <tcp_send_fin+0x1c>
 800ea32:	4b21      	ldr	r3, [pc, #132]	@ (800eab8 <tcp_send_fin+0x94>)
 800ea34:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800ea38:	4920      	ldr	r1, [pc, #128]	@ (800eabc <tcp_send_fin+0x98>)
 800ea3a:	4821      	ldr	r0, [pc, #132]	@ (800eac0 <tcp_send_fin+0x9c>)
 800ea3c:	f004 fc0e 	bl	801325c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d02e      	beq.n	800eaa6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea4c:	60fb      	str	r3, [r7, #12]
 800ea4e:	e002      	b.n	800ea56 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d1f8      	bne.n	800ea50 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	899b      	ldrh	r3, [r3, #12]
 800ea64:	b29b      	uxth	r3, r3
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fa f8aa 	bl	8008bc0 <lwip_htons>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	f003 0307 	and.w	r3, r3, #7
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d116      	bne.n	800eaa6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	899b      	ldrh	r3, [r3, #12]
 800ea7e:	b29c      	uxth	r4, r3
 800ea80:	2001      	movs	r0, #1
 800ea82:	f7fa f89d 	bl	8008bc0 <lwip_htons>
 800ea86:	4603      	mov	r3, r0
 800ea88:	461a      	mov	r2, r3
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	4322      	orrs	r2, r4
 800ea90:	b292      	uxth	r2, r2
 800ea92:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	8b5b      	ldrh	r3, [r3, #26]
 800ea98:	f043 0320 	orr.w	r3, r3, #32
 800ea9c:	b29a      	uxth	r2, r3
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	e004      	b.n	800eab0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800eaa6:	2101      	movs	r1, #1
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f000 f80b 	bl	800eac4 <tcp_enqueue_flags>
 800eaae:	4603      	mov	r3, r0
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3714      	adds	r7, #20
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd90      	pop	{r4, r7, pc}
 800eab8:	08015dd0 	.word	0x08015dd0
 800eabc:	080161d8 	.word	0x080161d8
 800eac0:	08015e24 	.word	0x08015e24

0800eac4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b08a      	sub	sp, #40	@ 0x28
 800eac8:	af02      	add	r7, sp, #8
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	460b      	mov	r3, r1
 800eace:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ead0:	2300      	movs	r3, #0
 800ead2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ead4:	2300      	movs	r3, #0
 800ead6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ead8:	78fb      	ldrb	r3, [r7, #3]
 800eada:	f003 0303 	and.w	r3, r3, #3
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d106      	bne.n	800eaf0 <tcp_enqueue_flags+0x2c>
 800eae2:	4b67      	ldr	r3, [pc, #412]	@ (800ec80 <tcp_enqueue_flags+0x1bc>)
 800eae4:	f240 4211 	movw	r2, #1041	@ 0x411
 800eae8:	4966      	ldr	r1, [pc, #408]	@ (800ec84 <tcp_enqueue_flags+0x1c0>)
 800eaea:	4867      	ldr	r0, [pc, #412]	@ (800ec88 <tcp_enqueue_flags+0x1c4>)
 800eaec:	f004 fbb6 	bl	801325c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d106      	bne.n	800eb04 <tcp_enqueue_flags+0x40>
 800eaf6:	4b62      	ldr	r3, [pc, #392]	@ (800ec80 <tcp_enqueue_flags+0x1bc>)
 800eaf8:	f240 4213 	movw	r2, #1043	@ 0x413
 800eafc:	4963      	ldr	r1, [pc, #396]	@ (800ec8c <tcp_enqueue_flags+0x1c8>)
 800eafe:	4862      	ldr	r0, [pc, #392]	@ (800ec88 <tcp_enqueue_flags+0x1c4>)
 800eb00:	f004 fbac 	bl	801325c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800eb04:	78fb      	ldrb	r3, [r7, #3]
 800eb06:	f003 0302 	and.w	r3, r3, #2
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d001      	beq.n	800eb12 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800eb0e:	2301      	movs	r3, #1
 800eb10:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800eb12:	7ffb      	ldrb	r3, [r7, #31]
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	f003 0304 	and.w	r3, r3, #4
 800eb1c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800eb1e:	7dfb      	ldrb	r3, [r7, #23]
 800eb20:	b29b      	uxth	r3, r3
 800eb22:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800eb26:	4619      	mov	r1, r3
 800eb28:	2036      	movs	r0, #54	@ 0x36
 800eb2a:	f7fb f8c3 	bl	8009cb4 <pbuf_alloc>
 800eb2e:	6138      	str	r0, [r7, #16]
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d109      	bne.n	800eb4a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	8b5b      	ldrh	r3, [r3, #26]
 800eb3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800eb44:	f04f 33ff 	mov.w	r3, #4294967295
 800eb48:	e095      	b.n	800ec76 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	895a      	ldrh	r2, [r3, #10]
 800eb4e:	7dfb      	ldrb	r3, [r7, #23]
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d206      	bcs.n	800eb64 <tcp_enqueue_flags+0xa0>
 800eb56:	4b4a      	ldr	r3, [pc, #296]	@ (800ec80 <tcp_enqueue_flags+0x1bc>)
 800eb58:	f240 4239 	movw	r2, #1081	@ 0x439
 800eb5c:	494c      	ldr	r1, [pc, #304]	@ (800ec90 <tcp_enqueue_flags+0x1cc>)
 800eb5e:	484a      	ldr	r0, [pc, #296]	@ (800ec88 <tcp_enqueue_flags+0x1c4>)
 800eb60:	f004 fb7c 	bl	801325c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800eb68:	78fa      	ldrb	r2, [r7, #3]
 800eb6a:	7ffb      	ldrb	r3, [r7, #31]
 800eb6c:	9300      	str	r3, [sp, #0]
 800eb6e:	460b      	mov	r3, r1
 800eb70:	6939      	ldr	r1, [r7, #16]
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7ff fd72 	bl	800e65c <tcp_create_segment>
 800eb78:	60f8      	str	r0, [r7, #12]
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d109      	bne.n	800eb94 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	8b5b      	ldrh	r3, [r3, #26]
 800eb84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb88:	b29a      	uxth	r2, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800eb8e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb92:	e070      	b.n	800ec76 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	68db      	ldr	r3, [r3, #12]
 800eb98:	f003 0303 	and.w	r3, r3, #3
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d006      	beq.n	800ebae <tcp_enqueue_flags+0xea>
 800eba0:	4b37      	ldr	r3, [pc, #220]	@ (800ec80 <tcp_enqueue_flags+0x1bc>)
 800eba2:	f240 4242 	movw	r2, #1090	@ 0x442
 800eba6:	493b      	ldr	r1, [pc, #236]	@ (800ec94 <tcp_enqueue_flags+0x1d0>)
 800eba8:	4837      	ldr	r0, [pc, #220]	@ (800ec88 <tcp_enqueue_flags+0x1c4>)
 800ebaa:	f004 fb57 	bl	801325c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	891b      	ldrh	r3, [r3, #8]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d006      	beq.n	800ebc4 <tcp_enqueue_flags+0x100>
 800ebb6:	4b32      	ldr	r3, [pc, #200]	@ (800ec80 <tcp_enqueue_flags+0x1bc>)
 800ebb8:	f240 4243 	movw	r2, #1091	@ 0x443
 800ebbc:	4936      	ldr	r1, [pc, #216]	@ (800ec98 <tcp_enqueue_flags+0x1d4>)
 800ebbe:	4832      	ldr	r0, [pc, #200]	@ (800ec88 <tcp_enqueue_flags+0x1c4>)
 800ebc0:	f004 fb4c 	bl	801325c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d103      	bne.n	800ebd4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ebd2:	e00d      	b.n	800ebf0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebd8:	61bb      	str	r3, [r7, #24]
 800ebda:	e002      	b.n	800ebe2 <tcp_enqueue_flags+0x11e>
 800ebdc:	69bb      	ldr	r3, [r7, #24]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	61bb      	str	r3, [r7, #24]
 800ebe2:	69bb      	ldr	r3, [r7, #24]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d1f8      	bne.n	800ebdc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ebea:	69bb      	ldr	r3, [r7, #24]
 800ebec:	68fa      	ldr	r2, [r7, #12]
 800ebee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ebf8:	78fb      	ldrb	r3, [r7, #3]
 800ebfa:	f003 0302 	and.w	r3, r3, #2
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d104      	bne.n	800ec0c <tcp_enqueue_flags+0x148>
 800ec02:	78fb      	ldrb	r3, [r7, #3]
 800ec04:	f003 0301 	and.w	r3, r3, #1
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d004      	beq.n	800ec16 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ec10:	1c5a      	adds	r2, r3, #1
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ec16:	78fb      	ldrb	r3, [r7, #3]
 800ec18:	f003 0301 	and.w	r3, r3, #1
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d006      	beq.n	800ec2e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	8b5b      	ldrh	r3, [r3, #26]
 800ec24:	f043 0320 	orr.w	r3, r3, #32
 800ec28:	b29a      	uxth	r2, r3
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7fb fbaa 	bl	800a38c <pbuf_clen>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	461a      	mov	r2, r3
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ec42:	4413      	add	r3, r2
 800ec44:	b29a      	uxth	r2, r3
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d00e      	beq.n	800ec74 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d10a      	bne.n	800ec74 <tcp_enqueue_flags+0x1b0>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d106      	bne.n	800ec74 <tcp_enqueue_flags+0x1b0>
 800ec66:	4b06      	ldr	r3, [pc, #24]	@ (800ec80 <tcp_enqueue_flags+0x1bc>)
 800ec68:	f240 4265 	movw	r2, #1125	@ 0x465
 800ec6c:	490b      	ldr	r1, [pc, #44]	@ (800ec9c <tcp_enqueue_flags+0x1d8>)
 800ec6e:	4806      	ldr	r0, [pc, #24]	@ (800ec88 <tcp_enqueue_flags+0x1c4>)
 800ec70:	f004 faf4 	bl	801325c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ec74:	2300      	movs	r3, #0
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3720      	adds	r7, #32
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	08015dd0 	.word	0x08015dd0
 800ec84:	080161f4 	.word	0x080161f4
 800ec88:	08015e24 	.word	0x08015e24
 800ec8c:	0801624c 	.word	0x0801624c
 800ec90:	0801626c 	.word	0x0801626c
 800ec94:	080162a8 	.word	0x080162a8
 800ec98:	080162c0 	.word	0x080162c0
 800ec9c:	080162ec 	.word	0x080162ec

0800eca0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800eca0:	b5b0      	push	{r4, r5, r7, lr}
 800eca2:	b08a      	sub	sp, #40	@ 0x28
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d106      	bne.n	800ecbc <tcp_output+0x1c>
 800ecae:	4b8a      	ldr	r3, [pc, #552]	@ (800eed8 <tcp_output+0x238>)
 800ecb0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800ecb4:	4989      	ldr	r1, [pc, #548]	@ (800eedc <tcp_output+0x23c>)
 800ecb6:	488a      	ldr	r0, [pc, #552]	@ (800eee0 <tcp_output+0x240>)
 800ecb8:	f004 fad0 	bl	801325c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	7d1b      	ldrb	r3, [r3, #20]
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d106      	bne.n	800ecd2 <tcp_output+0x32>
 800ecc4:	4b84      	ldr	r3, [pc, #528]	@ (800eed8 <tcp_output+0x238>)
 800ecc6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800ecca:	4986      	ldr	r1, [pc, #536]	@ (800eee4 <tcp_output+0x244>)
 800eccc:	4884      	ldr	r0, [pc, #528]	@ (800eee0 <tcp_output+0x240>)
 800ecce:	f004 fac5 	bl	801325c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ecd2:	4b85      	ldr	r3, [pc, #532]	@ (800eee8 <tcp_output+0x248>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	687a      	ldr	r2, [r7, #4]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d101      	bne.n	800ece0 <tcp_output+0x40>
    return ERR_OK;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	e1ce      	b.n	800f07e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ecec:	4293      	cmp	r3, r2
 800ecee:	bf28      	it	cs
 800ecf0:	4613      	movcs	r3, r2
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecfa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800ecfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d10b      	bne.n	800ed1a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	8b5b      	ldrh	r3, [r3, #26]
 800ed06:	f003 0302 	and.w	r3, r3, #2
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	f000 81aa 	beq.w	800f064 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f000 fdcb 	bl	800f8ac <tcp_send_empty_ack>
 800ed16:	4603      	mov	r3, r0
 800ed18:	e1b1      	b.n	800f07e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ed1a:	6879      	ldr	r1, [r7, #4]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	3304      	adds	r3, #4
 800ed20:	461a      	mov	r2, r3
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f7ff fc7e 	bl	800e624 <tcp_route>
 800ed28:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d102      	bne.n	800ed36 <tcp_output+0x96>
    return ERR_RTE;
 800ed30:	f06f 0303 	mvn.w	r3, #3
 800ed34:	e1a3      	b.n	800f07e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d003      	beq.n	800ed44 <tcp_output+0xa4>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d111      	bne.n	800ed68 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d002      	beq.n	800ed50 <tcp_output+0xb0>
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	3304      	adds	r3, #4
 800ed4e:	e000      	b.n	800ed52 <tcp_output+0xb2>
 800ed50:	2300      	movs	r3, #0
 800ed52:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d102      	bne.n	800ed60 <tcp_output+0xc0>
      return ERR_RTE;
 800ed5a:	f06f 0303 	mvn.w	r3, #3
 800ed5e:	e18e      	b.n	800f07e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	681a      	ldr	r2, [r3, #0]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ed68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed6a:	68db      	ldr	r3, [r3, #12]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7f9 ff3c 	bl	8008bec <lwip_htonl>
 800ed74:	4602      	mov	r2, r0
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed7a:	1ad3      	subs	r3, r2, r3
 800ed7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed7e:	8912      	ldrh	r2, [r2, #8]
 800ed80:	4413      	add	r3, r2
 800ed82:	69ba      	ldr	r2, [r7, #24]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d227      	bcs.n	800edd8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ed8e:	461a      	mov	r2, r3
 800ed90:	69bb      	ldr	r3, [r7, #24]
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d114      	bne.n	800edc0 <tcp_output+0x120>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d110      	bne.n	800edc0 <tcp_output+0x120>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d10b      	bne.n	800edc0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2200      	movs	r2, #0
 800edac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2201      	movs	r2, #1
 800edb4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	8b5b      	ldrh	r3, [r3, #26]
 800edc4:	f003 0302 	and.w	r3, r3, #2
 800edc8:	2b00      	cmp	r3, #0
 800edca:	f000 814d 	beq.w	800f068 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 fd6c 	bl	800f8ac <tcp_send_empty_ack>
 800edd4:	4603      	mov	r3, r0
 800edd6:	e152      	b.n	800f07e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2200      	movs	r2, #0
 800eddc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ede4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ede6:	6a3b      	ldr	r3, [r7, #32]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f000 811c 	beq.w	800f026 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800edee:	e002      	b.n	800edf6 <tcp_output+0x156>
 800edf0:	6a3b      	ldr	r3, [r7, #32]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	623b      	str	r3, [r7, #32]
 800edf6:	6a3b      	ldr	r3, [r7, #32]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d1f8      	bne.n	800edf0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800edfe:	e112      	b.n	800f026 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ee00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	899b      	ldrh	r3, [r3, #12]
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7f9 fed9 	bl	8008bc0 <lwip_htons>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	f003 0304 	and.w	r3, r3, #4
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d006      	beq.n	800ee28 <tcp_output+0x188>
 800ee1a:	4b2f      	ldr	r3, [pc, #188]	@ (800eed8 <tcp_output+0x238>)
 800ee1c:	f240 5236 	movw	r2, #1334	@ 0x536
 800ee20:	4932      	ldr	r1, [pc, #200]	@ (800eeec <tcp_output+0x24c>)
 800ee22:	482f      	ldr	r0, [pc, #188]	@ (800eee0 <tcp_output+0x240>)
 800ee24:	f004 fa1a 	bl	801325c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d01f      	beq.n	800ee70 <tcp_output+0x1d0>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	8b5b      	ldrh	r3, [r3, #26]
 800ee34:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d119      	bne.n	800ee70 <tcp_output+0x1d0>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d00b      	beq.n	800ee5c <tcp_output+0x1bc>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d110      	bne.n	800ee70 <tcp_output+0x1d0>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee52:	891a      	ldrh	r2, [r3, #8]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d209      	bcs.n	800ee70 <tcp_output+0x1d0>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d004      	beq.n	800ee70 <tcp_output+0x1d0>
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ee6c:	2b08      	cmp	r3, #8
 800ee6e:	d901      	bls.n	800ee74 <tcp_output+0x1d4>
 800ee70:	2301      	movs	r3, #1
 800ee72:	e000      	b.n	800ee76 <tcp_output+0x1d6>
 800ee74:	2300      	movs	r3, #0
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d106      	bne.n	800ee88 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	8b5b      	ldrh	r3, [r3, #26]
 800ee7e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	f000 80e4 	beq.w	800f050 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	7d1b      	ldrb	r3, [r3, #20]
 800ee8c:	2b02      	cmp	r3, #2
 800ee8e:	d00d      	beq.n	800eeac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ee90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee92:	68db      	ldr	r3, [r3, #12]
 800ee94:	899b      	ldrh	r3, [r3, #12]
 800ee96:	b29c      	uxth	r4, r3
 800ee98:	2010      	movs	r0, #16
 800ee9a:	f7f9 fe91 	bl	8008bc0 <lwip_htons>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	461a      	mov	r2, r3
 800eea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eea4:	68db      	ldr	r3, [r3, #12]
 800eea6:	4322      	orrs	r2, r4
 800eea8:	b292      	uxth	r2, r2
 800eeaa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800eeac:	697a      	ldr	r2, [r7, #20]
 800eeae:	6879      	ldr	r1, [r7, #4]
 800eeb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eeb2:	f000 f909 	bl	800f0c8 <tcp_output_segment>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800eeba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d016      	beq.n	800eef0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	8b5b      	ldrh	r3, [r3, #26]
 800eec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eeca:	b29a      	uxth	r2, r3
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	835a      	strh	r2, [r3, #26]
      return err;
 800eed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eed4:	e0d3      	b.n	800f07e <tcp_output+0x3de>
 800eed6:	bf00      	nop
 800eed8:	08015dd0 	.word	0x08015dd0
 800eedc:	08016314 	.word	0x08016314
 800eee0:	08015e24 	.word	0x08015e24
 800eee4:	0801632c 	.word	0x0801632c
 800eee8:	20008a10 	.word	0x20008a10
 800eeec:	08016354 	.word	0x08016354
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800eef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef2:	681a      	ldr	r2, [r3, #0]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	7d1b      	ldrb	r3, [r3, #20]
 800eefc:	2b02      	cmp	r3, #2
 800eefe:	d006      	beq.n	800ef0e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	8b5b      	ldrh	r3, [r3, #26]
 800ef04:	f023 0303 	bic.w	r3, r3, #3
 800ef08:	b29a      	uxth	r2, r3
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ef0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7f9 fe69 	bl	8008bec <lwip_htonl>
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef1e:	891b      	ldrh	r3, [r3, #8]
 800ef20:	461d      	mov	r5, r3
 800ef22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef24:	68db      	ldr	r3, [r3, #12]
 800ef26:	899b      	ldrh	r3, [r3, #12]
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7f9 fe48 	bl	8008bc0 <lwip_htons>
 800ef30:	4603      	mov	r3, r0
 800ef32:	b2db      	uxtb	r3, r3
 800ef34:	f003 0303 	and.w	r3, r3, #3
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d001      	beq.n	800ef40 <tcp_output+0x2a0>
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	e000      	b.n	800ef42 <tcp_output+0x2a2>
 800ef40:	2300      	movs	r3, #0
 800ef42:	442b      	add	r3, r5
 800ef44:	4423      	add	r3, r4
 800ef46:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	1ad3      	subs	r3, r2, r3
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	da02      	bge.n	800ef5a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	68ba      	ldr	r2, [r7, #8]
 800ef58:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ef5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef5c:	891b      	ldrh	r3, [r3, #8]
 800ef5e:	461c      	mov	r4, r3
 800ef60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	899b      	ldrh	r3, [r3, #12]
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f7f9 fe29 	bl	8008bc0 <lwip_htons>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	f003 0303 	and.w	r3, r3, #3
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d001      	beq.n	800ef7e <tcp_output+0x2de>
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	e000      	b.n	800ef80 <tcp_output+0x2e0>
 800ef7e:	2300      	movs	r3, #0
 800ef80:	4423      	add	r3, r4
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d049      	beq.n	800f01a <tcp_output+0x37a>
      seg->next = NULL;
 800ef86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef88:	2200      	movs	r2, #0
 800ef8a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d105      	bne.n	800efa0 <tcp_output+0x300>
        pcb->unacked = seg;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef98:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800ef9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef9c:	623b      	str	r3, [r7, #32]
 800ef9e:	e03f      	b.n	800f020 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800efa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efa2:	68db      	ldr	r3, [r3, #12]
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7f9 fe20 	bl	8008bec <lwip_htonl>
 800efac:	4604      	mov	r4, r0
 800efae:	6a3b      	ldr	r3, [r7, #32]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7f9 fe19 	bl	8008bec <lwip_htonl>
 800efba:	4603      	mov	r3, r0
 800efbc:	1ae3      	subs	r3, r4, r3
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	da24      	bge.n	800f00c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	3370      	adds	r3, #112	@ 0x70
 800efc6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800efc8:	e002      	b.n	800efd0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d011      	beq.n	800effc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	68db      	ldr	r3, [r3, #12]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7f9 fe03 	bl	8008bec <lwip_htonl>
 800efe6:	4604      	mov	r4, r0
 800efe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	4618      	mov	r0, r3
 800eff0:	f7f9 fdfc 	bl	8008bec <lwip_htonl>
 800eff4:	4603      	mov	r3, r0
 800eff6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800eff8:	2b00      	cmp	r3, #0
 800effa:	dbe6      	blt.n	800efca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800effc:	69fb      	ldr	r3, [r7, #28]
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f002:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f008:	601a      	str	r2, [r3, #0]
 800f00a:	e009      	b.n	800f020 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f00c:	6a3b      	ldr	r3, [r7, #32]
 800f00e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f010:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f012:	6a3b      	ldr	r3, [r7, #32]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	623b      	str	r3, [r7, #32]
 800f018:	e002      	b.n	800f020 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f01a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f01c:	f7fc fc45 	bl	800b8aa <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f024:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800f026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d012      	beq.n	800f052 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	4618      	mov	r0, r3
 800f034:	f7f9 fdda 	bl	8008bec <lwip_htonl>
 800f038:	4602      	mov	r2, r0
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f03e:	1ad3      	subs	r3, r2, r3
 800f040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f042:	8912      	ldrh	r2, [r2, #8]
 800f044:	4413      	add	r3, r2
  while (seg != NULL &&
 800f046:	69ba      	ldr	r2, [r7, #24]
 800f048:	429a      	cmp	r2, r3
 800f04a:	f4bf aed9 	bcs.w	800ee00 <tcp_output+0x160>
 800f04e:	e000      	b.n	800f052 <tcp_output+0x3b2>
      break;
 800f050:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f056:	2b00      	cmp	r3, #0
 800f058:	d108      	bne.n	800f06c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2200      	movs	r2, #0
 800f05e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800f062:	e004      	b.n	800f06e <tcp_output+0x3ce>
    goto output_done;
 800f064:	bf00      	nop
 800f066:	e002      	b.n	800f06e <tcp_output+0x3ce>
    goto output_done;
 800f068:	bf00      	nop
 800f06a:	e000      	b.n	800f06e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f06c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	8b5b      	ldrh	r3, [r3, #26]
 800f072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f076:	b29a      	uxth	r2, r3
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3728      	adds	r7, #40	@ 0x28
 800f082:	46bd      	mov	sp, r7
 800f084:	bdb0      	pop	{r4, r5, r7, pc}
 800f086:	bf00      	nop

0800f088 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d106      	bne.n	800f0a4 <tcp_output_segment_busy+0x1c>
 800f096:	4b09      	ldr	r3, [pc, #36]	@ (800f0bc <tcp_output_segment_busy+0x34>)
 800f098:	f240 529a 	movw	r2, #1434	@ 0x59a
 800f09c:	4908      	ldr	r1, [pc, #32]	@ (800f0c0 <tcp_output_segment_busy+0x38>)
 800f09e:	4809      	ldr	r0, [pc, #36]	@ (800f0c4 <tcp_output_segment_busy+0x3c>)
 800f0a0:	f004 f8dc 	bl	801325c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	685b      	ldr	r3, [r3, #4]
 800f0a8:	7b9b      	ldrb	r3, [r3, #14]
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d001      	beq.n	800f0b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e000      	b.n	800f0b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f0b2:	2300      	movs	r3, #0
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3708      	adds	r7, #8
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}
 800f0bc:	08015dd0 	.word	0x08015dd0
 800f0c0:	0801636c 	.word	0x0801636c
 800f0c4:	08015e24 	.word	0x08015e24

0800f0c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f0c8:	b5b0      	push	{r4, r5, r7, lr}
 800f0ca:	b08c      	sub	sp, #48	@ 0x30
 800f0cc:	af04      	add	r7, sp, #16
 800f0ce:	60f8      	str	r0, [r7, #12]
 800f0d0:	60b9      	str	r1, [r7, #8]
 800f0d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d106      	bne.n	800f0e8 <tcp_output_segment+0x20>
 800f0da:	4b64      	ldr	r3, [pc, #400]	@ (800f26c <tcp_output_segment+0x1a4>)
 800f0dc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800f0e0:	4963      	ldr	r1, [pc, #396]	@ (800f270 <tcp_output_segment+0x1a8>)
 800f0e2:	4864      	ldr	r0, [pc, #400]	@ (800f274 <tcp_output_segment+0x1ac>)
 800f0e4:	f004 f8ba 	bl	801325c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d106      	bne.n	800f0fc <tcp_output_segment+0x34>
 800f0ee:	4b5f      	ldr	r3, [pc, #380]	@ (800f26c <tcp_output_segment+0x1a4>)
 800f0f0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800f0f4:	4960      	ldr	r1, [pc, #384]	@ (800f278 <tcp_output_segment+0x1b0>)
 800f0f6:	485f      	ldr	r0, [pc, #380]	@ (800f274 <tcp_output_segment+0x1ac>)
 800f0f8:	f004 f8b0 	bl	801325c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d106      	bne.n	800f110 <tcp_output_segment+0x48>
 800f102:	4b5a      	ldr	r3, [pc, #360]	@ (800f26c <tcp_output_segment+0x1a4>)
 800f104:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800f108:	495c      	ldr	r1, [pc, #368]	@ (800f27c <tcp_output_segment+0x1b4>)
 800f10a:	485a      	ldr	r0, [pc, #360]	@ (800f274 <tcp_output_segment+0x1ac>)
 800f10c:	f004 f8a6 	bl	801325c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f110:	68f8      	ldr	r0, [r7, #12]
 800f112:	f7ff ffb9 	bl	800f088 <tcp_output_segment_busy>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d001      	beq.n	800f120 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f11c:	2300      	movs	r3, #0
 800f11e:	e0a1      	b.n	800f264 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	68dc      	ldr	r4, [r3, #12]
 800f128:	4610      	mov	r0, r2
 800f12a:	f7f9 fd5f 	bl	8008bec <lwip_htonl>
 800f12e:	4603      	mov	r3, r0
 800f130:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	68dc      	ldr	r4, [r3, #12]
 800f13a:	4610      	mov	r0, r2
 800f13c:	f7f9 fd40 	bl	8008bc0 <lwip_htons>
 800f140:	4603      	mov	r3, r0
 800f142:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f148:	68ba      	ldr	r2, [r7, #8]
 800f14a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800f14c:	441a      	add	r2, r3
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	3314      	adds	r3, #20
 800f158:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	7a9b      	ldrb	r3, [r3, #10]
 800f15e:	f003 0301 	and.w	r3, r3, #1
 800f162:	2b00      	cmp	r3, #0
 800f164:	d015      	beq.n	800f192 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	3304      	adds	r3, #4
 800f16a:	461a      	mov	r2, r3
 800f16c:	6879      	ldr	r1, [r7, #4]
 800f16e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800f172:	f7fc fe91 	bl	800be98 <tcp_eff_send_mss_netif>
 800f176:	4603      	mov	r3, r0
 800f178:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f17a:	8b7b      	ldrh	r3, [r7, #26]
 800f17c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800f180:	4618      	mov	r0, r3
 800f182:	f7f9 fd33 	bl	8008bec <lwip_htonl>
 800f186:	4602      	mov	r2, r0
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	3304      	adds	r3, #4
 800f190:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f198:	2b00      	cmp	r3, #0
 800f19a:	da02      	bge.n	800f1a2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d10c      	bne.n	800f1c4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f1aa:	4b35      	ldr	r3, [pc, #212]	@ (800f280 <tcp_output_segment+0x1b8>)
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7f9 fd17 	bl	8008bec <lwip_htonl>
 800f1be:	4602      	mov	r2, r0
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	68da      	ldr	r2, [r3, #12]
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	685b      	ldr	r3, [r3, #4]
 800f1cc:	685b      	ldr	r3, [r3, #4]
 800f1ce:	1ad3      	subs	r3, r2, r3
 800f1d0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	8959      	ldrh	r1, [r3, #10]
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	8b3a      	ldrh	r2, [r7, #24]
 800f1de:	1a8a      	subs	r2, r1, r2
 800f1e0:	b292      	uxth	r2, r2
 800f1e2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	8919      	ldrh	r1, [r3, #8]
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	8b3a      	ldrh	r2, [r7, #24]
 800f1f0:	1a8a      	subs	r2, r1, r2
 800f1f2:	b292      	uxth	r2, r2
 800f1f4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	68fa      	ldr	r2, [r7, #12]
 800f1fc:	68d2      	ldr	r2, [r2, #12]
 800f1fe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	68db      	ldr	r3, [r3, #12]
 800f204:	2200      	movs	r2, #0
 800f206:	741a      	strb	r2, [r3, #16]
 800f208:	2200      	movs	r2, #0
 800f20a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	68da      	ldr	r2, [r3, #12]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	7a9b      	ldrb	r3, [r3, #10]
 800f214:	f003 0301 	and.w	r3, r3, #1
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d001      	beq.n	800f220 <tcp_output_segment+0x158>
 800f21c:	2318      	movs	r3, #24
 800f21e:	e000      	b.n	800f222 <tcp_output_segment+0x15a>
 800f220:	2314      	movs	r3, #20
 800f222:	4413      	add	r3, r2
 800f224:	69fa      	ldr	r2, [r7, #28]
 800f226:	429a      	cmp	r2, r3
 800f228:	d006      	beq.n	800f238 <tcp_output_segment+0x170>
 800f22a:	4b10      	ldr	r3, [pc, #64]	@ (800f26c <tcp_output_segment+0x1a4>)
 800f22c:	f240 621c 	movw	r2, #1564	@ 0x61c
 800f230:	4914      	ldr	r1, [pc, #80]	@ (800f284 <tcp_output_segment+0x1bc>)
 800f232:	4810      	ldr	r0, [pc, #64]	@ (800f274 <tcp_output_segment+0x1ac>)
 800f234:	f004 f812 	bl	801325c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	6858      	ldr	r0, [r3, #4]
 800f23c:	68b9      	ldr	r1, [r7, #8]
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	1d1c      	adds	r4, r3, #4
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	7add      	ldrb	r5, [r3, #11]
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	7a9b      	ldrb	r3, [r3, #10]
 800f24a:	687a      	ldr	r2, [r7, #4]
 800f24c:	9202      	str	r2, [sp, #8]
 800f24e:	2206      	movs	r2, #6
 800f250:	9201      	str	r2, [sp, #4]
 800f252:	9300      	str	r3, [sp, #0]
 800f254:	462b      	mov	r3, r5
 800f256:	4622      	mov	r2, r4
 800f258:	f002 fd84 	bl	8011d64 <ip4_output_if>
 800f25c:	4603      	mov	r3, r0
 800f25e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f260:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f264:	4618      	mov	r0, r3
 800f266:	3720      	adds	r7, #32
 800f268:	46bd      	mov	sp, r7
 800f26a:	bdb0      	pop	{r4, r5, r7, pc}
 800f26c:	08015dd0 	.word	0x08015dd0
 800f270:	08016394 	.word	0x08016394
 800f274:	08015e24 	.word	0x08015e24
 800f278:	080163b4 	.word	0x080163b4
 800f27c:	080163d4 	.word	0x080163d4
 800f280:	200089c4 	.word	0x200089c4
 800f284:	080163f8 	.word	0x080163f8

0800f288 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f288:	b5b0      	push	{r4, r5, r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d106      	bne.n	800f2a4 <tcp_rexmit_rto_prepare+0x1c>
 800f296:	4b31      	ldr	r3, [pc, #196]	@ (800f35c <tcp_rexmit_rto_prepare+0xd4>)
 800f298:	f240 6263 	movw	r2, #1635	@ 0x663
 800f29c:	4930      	ldr	r1, [pc, #192]	@ (800f360 <tcp_rexmit_rto_prepare+0xd8>)
 800f29e:	4831      	ldr	r0, [pc, #196]	@ (800f364 <tcp_rexmit_rto_prepare+0xdc>)
 800f2a0:	f003 ffdc 	bl	801325c <iprintf>

  if (pcb->unacked == NULL) {
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d102      	bne.n	800f2b2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f2ac:	f06f 0305 	mvn.w	r3, #5
 800f2b0:	e050      	b.n	800f354 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2b6:	60fb      	str	r3, [r7, #12]
 800f2b8:	e00b      	b.n	800f2d2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f2ba:	68f8      	ldr	r0, [r7, #12]
 800f2bc:	f7ff fee4 	bl	800f088 <tcp_output_segment_busy>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d002      	beq.n	800f2cc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f2c6:	f06f 0305 	mvn.w	r3, #5
 800f2ca:	e043      	b.n	800f354 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	60fb      	str	r3, [r7, #12]
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d1ef      	bne.n	800f2ba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f2da:	68f8      	ldr	r0, [r7, #12]
 800f2dc:	f7ff fed4 	bl	800f088 <tcp_output_segment_busy>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d002      	beq.n	800f2ec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f2e6:	f06f 0305 	mvn.w	r3, #5
 800f2ea:	e033      	b.n	800f354 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	8b5b      	ldrh	r3, [r3, #26]
 800f306:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800f30a:	b29a      	uxth	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	4618      	mov	r0, r3
 800f318:	f7f9 fc68 	bl	8008bec <lwip_htonl>
 800f31c:	4604      	mov	r4, r0
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	891b      	ldrh	r3, [r3, #8]
 800f322:	461d      	mov	r5, r3
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	68db      	ldr	r3, [r3, #12]
 800f328:	899b      	ldrh	r3, [r3, #12]
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7f9 fc47 	bl	8008bc0 <lwip_htons>
 800f332:	4603      	mov	r3, r0
 800f334:	b2db      	uxtb	r3, r3
 800f336:	f003 0303 	and.w	r3, r3, #3
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d001      	beq.n	800f342 <tcp_rexmit_rto_prepare+0xba>
 800f33e:	2301      	movs	r3, #1
 800f340:	e000      	b.n	800f344 <tcp_rexmit_rto_prepare+0xbc>
 800f342:	2300      	movs	r3, #0
 800f344:	442b      	add	r3, r5
 800f346:	18e2      	adds	r2, r4, r3
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2200      	movs	r2, #0
 800f350:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800f352:	2300      	movs	r3, #0
}
 800f354:	4618      	mov	r0, r3
 800f356:	3710      	adds	r7, #16
 800f358:	46bd      	mov	sp, r7
 800f35a:	bdb0      	pop	{r4, r5, r7, pc}
 800f35c:	08015dd0 	.word	0x08015dd0
 800f360:	0801640c 	.word	0x0801640c
 800f364:	08015e24 	.word	0x08015e24

0800f368 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d106      	bne.n	800f384 <tcp_rexmit_rto_commit+0x1c>
 800f376:	4b0d      	ldr	r3, [pc, #52]	@ (800f3ac <tcp_rexmit_rto_commit+0x44>)
 800f378:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800f37c:	490c      	ldr	r1, [pc, #48]	@ (800f3b0 <tcp_rexmit_rto_commit+0x48>)
 800f37e:	480d      	ldr	r0, [pc, #52]	@ (800f3b4 <tcp_rexmit_rto_commit+0x4c>)
 800f380:	f003 ff6c 	bl	801325c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f38a:	2bff      	cmp	r3, #255	@ 0xff
 800f38c:	d007      	beq.n	800f39e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f394:	3301      	adds	r3, #1
 800f396:	b2da      	uxtb	r2, r3
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7ff fc7e 	bl	800eca0 <tcp_output>
}
 800f3a4:	bf00      	nop
 800f3a6:	3708      	adds	r7, #8
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	08015dd0 	.word	0x08015dd0
 800f3b0:	08016430 	.word	0x08016430
 800f3b4:	08015e24 	.word	0x08015e24

0800f3b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b082      	sub	sp, #8
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d106      	bne.n	800f3d4 <tcp_rexmit_rto+0x1c>
 800f3c6:	4b0a      	ldr	r3, [pc, #40]	@ (800f3f0 <tcp_rexmit_rto+0x38>)
 800f3c8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800f3cc:	4909      	ldr	r1, [pc, #36]	@ (800f3f4 <tcp_rexmit_rto+0x3c>)
 800f3ce:	480a      	ldr	r0, [pc, #40]	@ (800f3f8 <tcp_rexmit_rto+0x40>)
 800f3d0:	f003 ff44 	bl	801325c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f7ff ff57 	bl	800f288 <tcp_rexmit_rto_prepare>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d102      	bne.n	800f3e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f7ff ffc1 	bl	800f368 <tcp_rexmit_rto_commit>
  }
}
 800f3e6:	bf00      	nop
 800f3e8:	3708      	adds	r7, #8
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	08015dd0 	.word	0x08015dd0
 800f3f4:	08016454 	.word	0x08016454
 800f3f8:	08015e24 	.word	0x08015e24

0800f3fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f3fc:	b590      	push	{r4, r7, lr}
 800f3fe:	b085      	sub	sp, #20
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d106      	bne.n	800f418 <tcp_rexmit+0x1c>
 800f40a:	4b2f      	ldr	r3, [pc, #188]	@ (800f4c8 <tcp_rexmit+0xcc>)
 800f40c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800f410:	492e      	ldr	r1, [pc, #184]	@ (800f4cc <tcp_rexmit+0xd0>)
 800f412:	482f      	ldr	r0, [pc, #188]	@ (800f4d0 <tcp_rexmit+0xd4>)
 800f414:	f003 ff22 	bl	801325c <iprintf>

  if (pcb->unacked == NULL) {
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d102      	bne.n	800f426 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f420:	f06f 0305 	mvn.w	r3, #5
 800f424:	e04c      	b.n	800f4c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f42a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f42c:	68b8      	ldr	r0, [r7, #8]
 800f42e:	f7ff fe2b 	bl	800f088 <tcp_output_segment_busy>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d002      	beq.n	800f43e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f438:	f06f 0305 	mvn.w	r3, #5
 800f43c:	e040      	b.n	800f4c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	336c      	adds	r3, #108	@ 0x6c
 800f44a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f44c:	e002      	b.n	800f454 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d011      	beq.n	800f480 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	68db      	ldr	r3, [r3, #12]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	4618      	mov	r0, r3
 800f466:	f7f9 fbc1 	bl	8008bec <lwip_htonl>
 800f46a:	4604      	mov	r4, r0
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	4618      	mov	r0, r3
 800f474:	f7f9 fbba 	bl	8008bec <lwip_htonl>
 800f478:	4603      	mov	r3, r0
 800f47a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	dbe6      	blt.n	800f44e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	681a      	ldr	r2, [r3, #0]
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	68ba      	ldr	r2, [r7, #8]
 800f48c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d103      	bne.n	800f49e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2200      	movs	r2, #0
 800f49a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f4a4:	2bff      	cmp	r3, #255	@ 0xff
 800f4a6:	d007      	beq.n	800f4b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	b2da      	uxtb	r2, r3
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f4be:	2300      	movs	r3, #0
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3714      	adds	r7, #20
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd90      	pop	{r4, r7, pc}
 800f4c8:	08015dd0 	.word	0x08015dd0
 800f4cc:	08016470 	.word	0x08016470
 800f4d0:	08015e24 	.word	0x08015e24

0800f4d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d106      	bne.n	800f4f0 <tcp_rexmit_fast+0x1c>
 800f4e2:	4b2a      	ldr	r3, [pc, #168]	@ (800f58c <tcp_rexmit_fast+0xb8>)
 800f4e4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800f4e8:	4929      	ldr	r1, [pc, #164]	@ (800f590 <tcp_rexmit_fast+0xbc>)
 800f4ea:	482a      	ldr	r0, [pc, #168]	@ (800f594 <tcp_rexmit_fast+0xc0>)
 800f4ec:	f003 feb6 	bl	801325c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d044      	beq.n	800f582 <tcp_rexmit_fast+0xae>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	8b5b      	ldrh	r3, [r3, #26]
 800f4fc:	f003 0304 	and.w	r3, r3, #4
 800f500:	2b00      	cmp	r3, #0
 800f502:	d13e      	bne.n	800f582 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f7ff ff79 	bl	800f3fc <tcp_rexmit>
 800f50a:	4603      	mov	r3, r0
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d138      	bne.n	800f582 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f51c:	4293      	cmp	r3, r2
 800f51e:	bf28      	it	cs
 800f520:	4613      	movcs	r3, r2
 800f522:	b29b      	uxth	r3, r3
 800f524:	0fda      	lsrs	r2, r3, #31
 800f526:	4413      	add	r3, r2
 800f528:	105b      	asrs	r3, r3, #1
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f538:	461a      	mov	r2, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f53e:	005b      	lsls	r3, r3, #1
 800f540:	429a      	cmp	r2, r3
 800f542:	d206      	bcs.n	800f552 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f548:	005b      	lsls	r3, r3, #1
 800f54a:	b29a      	uxth	r2, r3
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f55c:	4619      	mov	r1, r3
 800f55e:	0049      	lsls	r1, r1, #1
 800f560:	440b      	add	r3, r1
 800f562:	b29b      	uxth	r3, r3
 800f564:	4413      	add	r3, r2
 800f566:	b29a      	uxth	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	8b5b      	ldrh	r3, [r3, #26]
 800f572:	f043 0304 	orr.w	r3, r3, #4
 800f576:	b29a      	uxth	r2, r3
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2200      	movs	r2, #0
 800f580:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800f582:	bf00      	nop
 800f584:	3708      	adds	r7, #8
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
 800f58a:	bf00      	nop
 800f58c:	08015dd0 	.word	0x08015dd0
 800f590:	08016488 	.word	0x08016488
 800f594:	08015e24 	.word	0x08015e24

0800f598 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b086      	sub	sp, #24
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	607b      	str	r3, [r7, #4]
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	817b      	strh	r3, [r7, #10]
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f5aa:	897a      	ldrh	r2, [r7, #10]
 800f5ac:	893b      	ldrh	r3, [r7, #8]
 800f5ae:	4413      	add	r3, r2
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	3314      	adds	r3, #20
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	2022      	movs	r0, #34	@ 0x22
 800f5be:	f7fa fb79 	bl	8009cb4 <pbuf_alloc>
 800f5c2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d04d      	beq.n	800f666 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f5ca:	897b      	ldrh	r3, [r7, #10]
 800f5cc:	3313      	adds	r3, #19
 800f5ce:	697a      	ldr	r2, [r7, #20]
 800f5d0:	8952      	ldrh	r2, [r2, #10]
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	db06      	blt.n	800f5e4 <tcp_output_alloc_header_common+0x4c>
 800f5d6:	4b26      	ldr	r3, [pc, #152]	@ (800f670 <tcp_output_alloc_header_common+0xd8>)
 800f5d8:	f240 7223 	movw	r2, #1827	@ 0x723
 800f5dc:	4925      	ldr	r1, [pc, #148]	@ (800f674 <tcp_output_alloc_header_common+0xdc>)
 800f5de:	4826      	ldr	r0, [pc, #152]	@ (800f678 <tcp_output_alloc_header_common+0xe0>)
 800f5e0:	f003 fe3c 	bl	801325c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f5ea:	8c3b      	ldrh	r3, [r7, #32]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7f9 fae7 	bl	8008bc0 <lwip_htons>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f5fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7f9 fadf 	bl	8008bc0 <lwip_htons>
 800f602:	4603      	mov	r3, r0
 800f604:	461a      	mov	r2, r3
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f610:	68f8      	ldr	r0, [r7, #12]
 800f612:	f7f9 faeb 	bl	8008bec <lwip_htonl>
 800f616:	4602      	mov	r2, r0
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f61c:	897b      	ldrh	r3, [r7, #10]
 800f61e:	089b      	lsrs	r3, r3, #2
 800f620:	b29b      	uxth	r3, r3
 800f622:	3305      	adds	r3, #5
 800f624:	b29b      	uxth	r3, r3
 800f626:	031b      	lsls	r3, r3, #12
 800f628:	b29a      	uxth	r2, r3
 800f62a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f62e:	b29b      	uxth	r3, r3
 800f630:	4313      	orrs	r3, r2
 800f632:	b29b      	uxth	r3, r3
 800f634:	4618      	mov	r0, r3
 800f636:	f7f9 fac3 	bl	8008bc0 <lwip_htons>
 800f63a:	4603      	mov	r3, r0
 800f63c:	461a      	mov	r2, r3
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f642:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f644:	4618      	mov	r0, r3
 800f646:	f7f9 fabb 	bl	8008bc0 <lwip_htons>
 800f64a:	4603      	mov	r3, r0
 800f64c:	461a      	mov	r2, r3
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	2200      	movs	r2, #0
 800f656:	741a      	strb	r2, [r3, #16]
 800f658:	2200      	movs	r2, #0
 800f65a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	2200      	movs	r2, #0
 800f660:	749a      	strb	r2, [r3, #18]
 800f662:	2200      	movs	r2, #0
 800f664:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f666:	697b      	ldr	r3, [r7, #20]
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3718      	adds	r7, #24
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	08015dd0 	.word	0x08015dd0
 800f674:	080164a8 	.word	0x080164a8
 800f678:	08015e24 	.word	0x08015e24

0800f67c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f67c:	b5b0      	push	{r4, r5, r7, lr}
 800f67e:	b08a      	sub	sp, #40	@ 0x28
 800f680:	af04      	add	r7, sp, #16
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	607b      	str	r3, [r7, #4]
 800f686:	460b      	mov	r3, r1
 800f688:	817b      	strh	r3, [r7, #10]
 800f68a:	4613      	mov	r3, r2
 800f68c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d106      	bne.n	800f6a2 <tcp_output_alloc_header+0x26>
 800f694:	4b15      	ldr	r3, [pc, #84]	@ (800f6ec <tcp_output_alloc_header+0x70>)
 800f696:	f240 7242 	movw	r2, #1858	@ 0x742
 800f69a:	4915      	ldr	r1, [pc, #84]	@ (800f6f0 <tcp_output_alloc_header+0x74>)
 800f69c:	4815      	ldr	r0, [pc, #84]	@ (800f6f4 <tcp_output_alloc_header+0x78>)
 800f69e:	f003 fddd 	bl	801325c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	8adb      	ldrh	r3, [r3, #22]
 800f6aa:	68fa      	ldr	r2, [r7, #12]
 800f6ac:	8b12      	ldrh	r2, [r2, #24]
 800f6ae:	68f9      	ldr	r1, [r7, #12]
 800f6b0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800f6b2:	893d      	ldrh	r5, [r7, #8]
 800f6b4:	897c      	ldrh	r4, [r7, #10]
 800f6b6:	9103      	str	r1, [sp, #12]
 800f6b8:	2110      	movs	r1, #16
 800f6ba:	9102      	str	r1, [sp, #8]
 800f6bc:	9201      	str	r2, [sp, #4]
 800f6be:	9300      	str	r3, [sp, #0]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	462a      	mov	r2, r5
 800f6c4:	4621      	mov	r1, r4
 800f6c6:	f7ff ff67 	bl	800f598 <tcp_output_alloc_header_common>
 800f6ca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d006      	beq.n	800f6e0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6d6:	68fa      	ldr	r2, [r7, #12]
 800f6d8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800f6da:	441a      	add	r2, r3
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800f6e0:	697b      	ldr	r3, [r7, #20]
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3718      	adds	r7, #24
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bdb0      	pop	{r4, r5, r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	08015dd0 	.word	0x08015dd0
 800f6f0:	080164d8 	.word	0x080164d8
 800f6f4:	08015e24 	.word	0x08015e24

0800f6f8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b088      	sub	sp, #32
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	4611      	mov	r1, r2
 800f704:	461a      	mov	r2, r3
 800f706:	460b      	mov	r3, r1
 800f708:	71fb      	strb	r3, [r7, #7]
 800f70a:	4613      	mov	r3, r2
 800f70c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f70e:	2300      	movs	r3, #0
 800f710:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d106      	bne.n	800f726 <tcp_output_fill_options+0x2e>
 800f718:	4b12      	ldr	r3, [pc, #72]	@ (800f764 <tcp_output_fill_options+0x6c>)
 800f71a:	f240 7256 	movw	r2, #1878	@ 0x756
 800f71e:	4912      	ldr	r1, [pc, #72]	@ (800f768 <tcp_output_fill_options+0x70>)
 800f720:	4812      	ldr	r0, [pc, #72]	@ (800f76c <tcp_output_fill_options+0x74>)
 800f722:	f003 fd9b 	bl	801325c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	685b      	ldr	r3, [r3, #4]
 800f72a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	3314      	adds	r3, #20
 800f730:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f732:	8bfb      	ldrh	r3, [r7, #30]
 800f734:	009b      	lsls	r3, r3, #2
 800f736:	461a      	mov	r2, r3
 800f738:	79fb      	ldrb	r3, [r7, #7]
 800f73a:	009b      	lsls	r3, r3, #2
 800f73c:	f003 0304 	and.w	r3, r3, #4
 800f740:	4413      	add	r3, r2
 800f742:	3314      	adds	r3, #20
 800f744:	69ba      	ldr	r2, [r7, #24]
 800f746:	4413      	add	r3, r2
 800f748:	697a      	ldr	r2, [r7, #20]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d006      	beq.n	800f75c <tcp_output_fill_options+0x64>
 800f74e:	4b05      	ldr	r3, [pc, #20]	@ (800f764 <tcp_output_fill_options+0x6c>)
 800f750:	f240 7275 	movw	r2, #1909	@ 0x775
 800f754:	4906      	ldr	r1, [pc, #24]	@ (800f770 <tcp_output_fill_options+0x78>)
 800f756:	4805      	ldr	r0, [pc, #20]	@ (800f76c <tcp_output_fill_options+0x74>)
 800f758:	f003 fd80 	bl	801325c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f75c:	bf00      	nop
 800f75e:	3720      	adds	r7, #32
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}
 800f764:	08015dd0 	.word	0x08015dd0
 800f768:	08016500 	.word	0x08016500
 800f76c:	08015e24 	.word	0x08015e24
 800f770:	080163f8 	.word	0x080163f8

0800f774 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b08a      	sub	sp, #40	@ 0x28
 800f778:	af04      	add	r7, sp, #16
 800f77a:	60f8      	str	r0, [r7, #12]
 800f77c:	60b9      	str	r1, [r7, #8]
 800f77e:	607a      	str	r2, [r7, #4]
 800f780:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d106      	bne.n	800f796 <tcp_output_control_segment+0x22>
 800f788:	4b1c      	ldr	r3, [pc, #112]	@ (800f7fc <tcp_output_control_segment+0x88>)
 800f78a:	f240 7287 	movw	r2, #1927	@ 0x787
 800f78e:	491c      	ldr	r1, [pc, #112]	@ (800f800 <tcp_output_control_segment+0x8c>)
 800f790:	481c      	ldr	r0, [pc, #112]	@ (800f804 <tcp_output_control_segment+0x90>)
 800f792:	f003 fd63 	bl	801325c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f796:	683a      	ldr	r2, [r7, #0]
 800f798:	6879      	ldr	r1, [r7, #4]
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	f7fe ff42 	bl	800e624 <tcp_route>
 800f7a0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d102      	bne.n	800f7ae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f7a8:	23fc      	movs	r3, #252	@ 0xfc
 800f7aa:	75fb      	strb	r3, [r7, #23]
 800f7ac:	e01c      	b.n	800f7e8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d006      	beq.n	800f7c2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	7adb      	ldrb	r3, [r3, #11]
 800f7b8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	7a9b      	ldrb	r3, [r3, #10]
 800f7be:	757b      	strb	r3, [r7, #21]
 800f7c0:	e003      	b.n	800f7ca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f7c2:	23ff      	movs	r3, #255	@ 0xff
 800f7c4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f7ca:	7dba      	ldrb	r2, [r7, #22]
 800f7cc:	693b      	ldr	r3, [r7, #16]
 800f7ce:	9302      	str	r3, [sp, #8]
 800f7d0:	2306      	movs	r3, #6
 800f7d2:	9301      	str	r3, [sp, #4]
 800f7d4:	7d7b      	ldrb	r3, [r7, #21]
 800f7d6:	9300      	str	r3, [sp, #0]
 800f7d8:	4613      	mov	r3, r2
 800f7da:	683a      	ldr	r2, [r7, #0]
 800f7dc:	6879      	ldr	r1, [r7, #4]
 800f7de:	68b8      	ldr	r0, [r7, #8]
 800f7e0:	f002 fac0 	bl	8011d64 <ip4_output_if>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f7e8:	68b8      	ldr	r0, [r7, #8]
 800f7ea:	f7fa fd47 	bl	800a27c <pbuf_free>
  return err;
 800f7ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3718      	adds	r7, #24
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	08015dd0 	.word	0x08015dd0
 800f800:	08016528 	.word	0x08016528
 800f804:	08015e24 	.word	0x08015e24

0800f808 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f808:	b590      	push	{r4, r7, lr}
 800f80a:	b08b      	sub	sp, #44	@ 0x2c
 800f80c:	af04      	add	r7, sp, #16
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	607a      	str	r2, [r7, #4]
 800f814:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d106      	bne.n	800f82a <tcp_rst+0x22>
 800f81c:	4b1f      	ldr	r3, [pc, #124]	@ (800f89c <tcp_rst+0x94>)
 800f81e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800f822:	491f      	ldr	r1, [pc, #124]	@ (800f8a0 <tcp_rst+0x98>)
 800f824:	481f      	ldr	r0, [pc, #124]	@ (800f8a4 <tcp_rst+0x9c>)
 800f826:	f003 fd19 	bl	801325c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d106      	bne.n	800f83e <tcp_rst+0x36>
 800f830:	4b1a      	ldr	r3, [pc, #104]	@ (800f89c <tcp_rst+0x94>)
 800f832:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800f836:	491c      	ldr	r1, [pc, #112]	@ (800f8a8 <tcp_rst+0xa0>)
 800f838:	481a      	ldr	r0, [pc, #104]	@ (800f8a4 <tcp_rst+0x9c>)
 800f83a:	f003 fd0f 	bl	801325c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f83e:	2300      	movs	r3, #0
 800f840:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f842:	f246 0308 	movw	r3, #24584	@ 0x6008
 800f846:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f848:	7dfb      	ldrb	r3, [r7, #23]
 800f84a:	b29c      	uxth	r4, r3
 800f84c:	68b8      	ldr	r0, [r7, #8]
 800f84e:	f7f9 f9cd 	bl	8008bec <lwip_htonl>
 800f852:	4602      	mov	r2, r0
 800f854:	8abb      	ldrh	r3, [r7, #20]
 800f856:	9303      	str	r3, [sp, #12]
 800f858:	2314      	movs	r3, #20
 800f85a:	9302      	str	r3, [sp, #8]
 800f85c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800f85e:	9301      	str	r3, [sp, #4]
 800f860:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f862:	9300      	str	r3, [sp, #0]
 800f864:	4613      	mov	r3, r2
 800f866:	2200      	movs	r2, #0
 800f868:	4621      	mov	r1, r4
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f7ff fe94 	bl	800f598 <tcp_output_alloc_header_common>
 800f870:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d00c      	beq.n	800f892 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f878:	7dfb      	ldrb	r3, [r7, #23]
 800f87a:	2200      	movs	r2, #0
 800f87c:	6939      	ldr	r1, [r7, #16]
 800f87e:	68f8      	ldr	r0, [r7, #12]
 800f880:	f7ff ff3a 	bl	800f6f8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f886:	683a      	ldr	r2, [r7, #0]
 800f888:	6939      	ldr	r1, [r7, #16]
 800f88a:	68f8      	ldr	r0, [r7, #12]
 800f88c:	f7ff ff72 	bl	800f774 <tcp_output_control_segment>
 800f890:	e000      	b.n	800f894 <tcp_rst+0x8c>
    return;
 800f892:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f894:	371c      	adds	r7, #28
 800f896:	46bd      	mov	sp, r7
 800f898:	bd90      	pop	{r4, r7, pc}
 800f89a:	bf00      	nop
 800f89c:	08015dd0 	.word	0x08015dd0
 800f8a0:	08016554 	.word	0x08016554
 800f8a4:	08015e24 	.word	0x08015e24
 800f8a8:	08016570 	.word	0x08016570

0800f8ac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f8ac:	b590      	push	{r4, r7, lr}
 800f8ae:	b087      	sub	sp, #28
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d106      	bne.n	800f8d0 <tcp_send_empty_ack+0x24>
 800f8c2:	4b28      	ldr	r3, [pc, #160]	@ (800f964 <tcp_send_empty_ack+0xb8>)
 800f8c4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800f8c8:	4927      	ldr	r1, [pc, #156]	@ (800f968 <tcp_send_empty_ack+0xbc>)
 800f8ca:	4828      	ldr	r0, [pc, #160]	@ (800f96c <tcp_send_empty_ack+0xc0>)
 800f8cc:	f003 fcc6 	bl	801325c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f8d0:	7dfb      	ldrb	r3, [r7, #23]
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	f003 0304 	and.w	r3, r3, #4
 800f8da:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f8dc:	7d7b      	ldrb	r3, [r7, #21]
 800f8de:	b29c      	uxth	r4, r3
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7f9 f981 	bl	8008bec <lwip_htonl>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	4621      	mov	r1, r4
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f7ff fec3 	bl	800f67c <tcp_output_alloc_header>
 800f8f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d109      	bne.n	800f912 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	8b5b      	ldrh	r3, [r3, #26]
 800f902:	f043 0303 	orr.w	r3, r3, #3
 800f906:	b29a      	uxth	r2, r3
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f90c:	f06f 0301 	mvn.w	r3, #1
 800f910:	e023      	b.n	800f95a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f912:	7dbb      	ldrb	r3, [r7, #22]
 800f914:	7dfa      	ldrb	r2, [r7, #23]
 800f916:	6939      	ldr	r1, [r7, #16]
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f7ff feed 	bl	800f6f8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	3304      	adds	r3, #4
 800f924:	6939      	ldr	r1, [r7, #16]
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f7ff ff24 	bl	800f774 <tcp_output_control_segment>
 800f92c:	4603      	mov	r3, r0
 800f92e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d007      	beq.n	800f948 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	8b5b      	ldrh	r3, [r3, #26]
 800f93c:	f043 0303 	orr.w	r3, r3, #3
 800f940:	b29a      	uxth	r2, r3
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	835a      	strh	r2, [r3, #26]
 800f946:	e006      	b.n	800f956 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	8b5b      	ldrh	r3, [r3, #26]
 800f94c:	f023 0303 	bic.w	r3, r3, #3
 800f950:	b29a      	uxth	r2, r3
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f956:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	371c      	adds	r7, #28
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd90      	pop	{r4, r7, pc}
 800f962:	bf00      	nop
 800f964:	08015dd0 	.word	0x08015dd0
 800f968:	0801658c 	.word	0x0801658c
 800f96c:	08015e24 	.word	0x08015e24

0800f970 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f970:	b590      	push	{r4, r7, lr}
 800f972:	b087      	sub	sp, #28
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f978:	2300      	movs	r3, #0
 800f97a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d106      	bne.n	800f990 <tcp_keepalive+0x20>
 800f982:	4b18      	ldr	r3, [pc, #96]	@ (800f9e4 <tcp_keepalive+0x74>)
 800f984:	f640 0224 	movw	r2, #2084	@ 0x824
 800f988:	4917      	ldr	r1, [pc, #92]	@ (800f9e8 <tcp_keepalive+0x78>)
 800f98a:	4818      	ldr	r0, [pc, #96]	@ (800f9ec <tcp_keepalive+0x7c>)
 800f98c:	f003 fc66 	bl	801325c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f990:	7dfb      	ldrb	r3, [r7, #23]
 800f992:	b29c      	uxth	r4, r3
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f998:	3b01      	subs	r3, #1
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7f9 f926 	bl	8008bec <lwip_htonl>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f7ff fe68 	bl	800f67c <tcp_output_alloc_header>
 800f9ac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d102      	bne.n	800f9ba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f9b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f9b8:	e010      	b.n	800f9dc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f9ba:	7dfb      	ldrb	r3, [r7, #23]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	6939      	ldr	r1, [r7, #16]
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f7ff fe99 	bl	800f6f8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f9c6:	687a      	ldr	r2, [r7, #4]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	3304      	adds	r3, #4
 800f9cc:	6939      	ldr	r1, [r7, #16]
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f7ff fed0 	bl	800f774 <tcp_output_control_segment>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f9d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f9dc:	4618      	mov	r0, r3
 800f9de:	371c      	adds	r7, #28
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd90      	pop	{r4, r7, pc}
 800f9e4:	08015dd0 	.word	0x08015dd0
 800f9e8:	080165ac 	.word	0x080165ac
 800f9ec:	08015e24 	.word	0x08015e24

0800f9f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f9f0:	b590      	push	{r4, r7, lr}
 800f9f2:	b08b      	sub	sp, #44	@ 0x2c
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d106      	bne.n	800fa12 <tcp_zero_window_probe+0x22>
 800fa04:	4b4c      	ldr	r3, [pc, #304]	@ (800fb38 <tcp_zero_window_probe+0x148>)
 800fa06:	f640 024f 	movw	r2, #2127	@ 0x84f
 800fa0a:	494c      	ldr	r1, [pc, #304]	@ (800fb3c <tcp_zero_window_probe+0x14c>)
 800fa0c:	484c      	ldr	r0, [pc, #304]	@ (800fb40 <tcp_zero_window_probe+0x150>)
 800fa0e:	f003 fc25 	bl	801325c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa16:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fa18:	6a3b      	ldr	r3, [r7, #32]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d101      	bne.n	800fa22 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	e086      	b.n	800fb30 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800fa28:	2bff      	cmp	r3, #255	@ 0xff
 800fa2a:	d007      	beq.n	800fa3c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800fa32:	3301      	adds	r3, #1
 800fa34:	b2da      	uxtb	r2, r3
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fa3c:	6a3b      	ldr	r3, [r7, #32]
 800fa3e:	68db      	ldr	r3, [r3, #12]
 800fa40:	899b      	ldrh	r3, [r3, #12]
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7f9 f8bb 	bl	8008bc0 <lwip_htons>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	f003 0301 	and.w	r3, r3, #1
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d005      	beq.n	800fa62 <tcp_zero_window_probe+0x72>
 800fa56:	6a3b      	ldr	r3, [r7, #32]
 800fa58:	891b      	ldrh	r3, [r3, #8]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d101      	bne.n	800fa62 <tcp_zero_window_probe+0x72>
 800fa5e:	2301      	movs	r3, #1
 800fa60:	e000      	b.n	800fa64 <tcp_zero_window_probe+0x74>
 800fa62:	2300      	movs	r3, #0
 800fa64:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fa66:	7ffb      	ldrb	r3, [r7, #31]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	bf0c      	ite	eq
 800fa6c:	2301      	moveq	r3, #1
 800fa6e:	2300      	movne	r3, #0
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fa74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa78:	b299      	uxth	r1, r3
 800fa7a:	6a3b      	ldr	r3, [r7, #32]
 800fa7c:	68db      	ldr	r3, [r3, #12]
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	8bba      	ldrh	r2, [r7, #28]
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f7ff fdfa 	bl	800f67c <tcp_output_alloc_header>
 800fa88:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fa8a:	69bb      	ldr	r3, [r7, #24]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d102      	bne.n	800fa96 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fa90:	f04f 33ff 	mov.w	r3, #4294967295
 800fa94:	e04c      	b.n	800fb30 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	685b      	ldr	r3, [r3, #4]
 800fa9a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fa9c:	7ffb      	ldrb	r3, [r7, #31]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d011      	beq.n	800fac6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	899b      	ldrh	r3, [r3, #12]
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	b21b      	sxth	r3, r3
 800faaa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800faae:	b21c      	sxth	r4, r3
 800fab0:	2011      	movs	r0, #17
 800fab2:	f7f9 f885 	bl	8008bc0 <lwip_htons>
 800fab6:	4603      	mov	r3, r0
 800fab8:	b21b      	sxth	r3, r3
 800faba:	4323      	orrs	r3, r4
 800fabc:	b21b      	sxth	r3, r3
 800fabe:	b29a      	uxth	r2, r3
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	819a      	strh	r2, [r3, #12]
 800fac4:	e010      	b.n	800fae8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800fac6:	69bb      	ldr	r3, [r7, #24]
 800fac8:	685b      	ldr	r3, [r3, #4]
 800faca:	3314      	adds	r3, #20
 800facc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800face:	6a3b      	ldr	r3, [r7, #32]
 800fad0:	6858      	ldr	r0, [r3, #4]
 800fad2:	6a3b      	ldr	r3, [r7, #32]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	891a      	ldrh	r2, [r3, #8]
 800fad8:	6a3b      	ldr	r3, [r7, #32]
 800fada:	891b      	ldrh	r3, [r3, #8]
 800fadc:	1ad3      	subs	r3, r2, r3
 800fade:	b29b      	uxth	r3, r3
 800fae0:	2201      	movs	r2, #1
 800fae2:	6939      	ldr	r1, [r7, #16]
 800fae4:	f7fa fdc4 	bl	800a670 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fae8:	6a3b      	ldr	r3, [r7, #32]
 800faea:	68db      	ldr	r3, [r3, #12]
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	4618      	mov	r0, r3
 800faf0:	f7f9 f87c 	bl	8008bec <lwip_htonl>
 800faf4:	4603      	mov	r3, r0
 800faf6:	3301      	adds	r3, #1
 800faf8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	1ad3      	subs	r3, r2, r3
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	da02      	bge.n	800fb0c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	68fa      	ldr	r2, [r7, #12]
 800fb0a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fb0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fb10:	2200      	movs	r2, #0
 800fb12:	69b9      	ldr	r1, [r7, #24]
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f7ff fdef 	bl	800f6f8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fb1a:	687a      	ldr	r2, [r7, #4]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	3304      	adds	r3, #4
 800fb20:	69b9      	ldr	r1, [r7, #24]
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7ff fe26 	bl	800f774 <tcp_output_control_segment>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fb2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	372c      	adds	r7, #44	@ 0x2c
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd90      	pop	{r4, r7, pc}
 800fb38:	08015dd0 	.word	0x08015dd0
 800fb3c:	080165c8 	.word	0x080165c8
 800fb40:	08015e24 	.word	0x08015e24

0800fb44 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800fb4c:	f7fa ff10 	bl	800a970 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800fb50:	4b0a      	ldr	r3, [pc, #40]	@ (800fb7c <tcpip_tcp_timer+0x38>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d103      	bne.n	800fb60 <tcpip_tcp_timer+0x1c>
 800fb58:	4b09      	ldr	r3, [pc, #36]	@ (800fb80 <tcpip_tcp_timer+0x3c>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d005      	beq.n	800fb6c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fb60:	2200      	movs	r2, #0
 800fb62:	4908      	ldr	r1, [pc, #32]	@ (800fb84 <tcpip_tcp_timer+0x40>)
 800fb64:	20fa      	movs	r0, #250	@ 0xfa
 800fb66:	f000 f8f3 	bl	800fd50 <sys_timeout>
 800fb6a:	e003      	b.n	800fb74 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fb6c:	4b06      	ldr	r3, [pc, #24]	@ (800fb88 <tcpip_tcp_timer+0x44>)
 800fb6e:	2200      	movs	r2, #0
 800fb70:	601a      	str	r2, [r3, #0]
  }
}
 800fb72:	bf00      	nop
 800fb74:	bf00      	nop
 800fb76:	3708      	adds	r7, #8
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	200089d0 	.word	0x200089d0
 800fb80:	200089d4 	.word	0x200089d4
 800fb84:	0800fb45 	.word	0x0800fb45
 800fb88:	20008a1c 	.word	0x20008a1c

0800fb8c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800fb90:	4b0a      	ldr	r3, [pc, #40]	@ (800fbbc <tcp_timer_needed+0x30>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d10f      	bne.n	800fbb8 <tcp_timer_needed+0x2c>
 800fb98:	4b09      	ldr	r3, [pc, #36]	@ (800fbc0 <tcp_timer_needed+0x34>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d103      	bne.n	800fba8 <tcp_timer_needed+0x1c>
 800fba0:	4b08      	ldr	r3, [pc, #32]	@ (800fbc4 <tcp_timer_needed+0x38>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d007      	beq.n	800fbb8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800fba8:	4b04      	ldr	r3, [pc, #16]	@ (800fbbc <tcp_timer_needed+0x30>)
 800fbaa:	2201      	movs	r2, #1
 800fbac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fbae:	2200      	movs	r2, #0
 800fbb0:	4905      	ldr	r1, [pc, #20]	@ (800fbc8 <tcp_timer_needed+0x3c>)
 800fbb2:	20fa      	movs	r0, #250	@ 0xfa
 800fbb4:	f000 f8cc 	bl	800fd50 <sys_timeout>
  }
}
 800fbb8:	bf00      	nop
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	20008a1c 	.word	0x20008a1c
 800fbc0:	200089d0 	.word	0x200089d0
 800fbc4:	200089d4 	.word	0x200089d4
 800fbc8:	0800fb45 	.word	0x0800fb45

0800fbcc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b086      	sub	sp, #24
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fbd8:	2006      	movs	r0, #6
 800fbda:	f7f9 fc69 	bl	80094b0 <memp_malloc>
 800fbde:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d109      	bne.n	800fbfa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d151      	bne.n	800fc90 <sys_timeout_abs+0xc4>
 800fbec:	4b2a      	ldr	r3, [pc, #168]	@ (800fc98 <sys_timeout_abs+0xcc>)
 800fbee:	22be      	movs	r2, #190	@ 0xbe
 800fbf0:	492a      	ldr	r1, [pc, #168]	@ (800fc9c <sys_timeout_abs+0xd0>)
 800fbf2:	482b      	ldr	r0, [pc, #172]	@ (800fca0 <sys_timeout_abs+0xd4>)
 800fbf4:	f003 fb32 	bl	801325c <iprintf>
    return;
 800fbf8:	e04a      	b.n	800fc90 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	68ba      	ldr	r2, [r7, #8]
 800fc04:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	68fa      	ldr	r2, [r7, #12]
 800fc10:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fc12:	4b24      	ldr	r3, [pc, #144]	@ (800fca4 <sys_timeout_abs+0xd8>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d103      	bne.n	800fc22 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800fc1a:	4a22      	ldr	r2, [pc, #136]	@ (800fca4 <sys_timeout_abs+0xd8>)
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	6013      	str	r3, [r2, #0]
    return;
 800fc20:	e037      	b.n	800fc92 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	685a      	ldr	r2, [r3, #4]
 800fc26:	4b1f      	ldr	r3, [pc, #124]	@ (800fca4 <sys_timeout_abs+0xd8>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	1ad3      	subs	r3, r2, r3
 800fc2e:	0fdb      	lsrs	r3, r3, #31
 800fc30:	f003 0301 	and.w	r3, r3, #1
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d007      	beq.n	800fc4a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800fc3a:	4b1a      	ldr	r3, [pc, #104]	@ (800fca4 <sys_timeout_abs+0xd8>)
 800fc3c:	681a      	ldr	r2, [r3, #0]
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800fc42:	4a18      	ldr	r2, [pc, #96]	@ (800fca4 <sys_timeout_abs+0xd8>)
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	6013      	str	r3, [r2, #0]
 800fc48:	e023      	b.n	800fc92 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800fc4a:	4b16      	ldr	r3, [pc, #88]	@ (800fca4 <sys_timeout_abs+0xd8>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	617b      	str	r3, [r7, #20]
 800fc50:	e01a      	b.n	800fc88 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d00b      	beq.n	800fc72 <sys_timeout_abs+0xa6>
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	685a      	ldr	r2, [r3, #4]
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	1ad3      	subs	r3, r2, r3
 800fc66:	0fdb      	lsrs	r3, r3, #31
 800fc68:	f003 0301 	and.w	r3, r3, #1
 800fc6c:	b2db      	uxtb	r3, r3
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d007      	beq.n	800fc82 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	681a      	ldr	r2, [r3, #0]
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	693a      	ldr	r2, [r7, #16]
 800fc7e:	601a      	str	r2, [r3, #0]
        break;
 800fc80:	e007      	b.n	800fc92 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	617b      	str	r3, [r7, #20]
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d1e1      	bne.n	800fc52 <sys_timeout_abs+0x86>
 800fc8e:	e000      	b.n	800fc92 <sys_timeout_abs+0xc6>
    return;
 800fc90:	bf00      	nop
      }
    }
  }
}
 800fc92:	3718      	adds	r7, #24
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	080165ec 	.word	0x080165ec
 800fc9c:	08016620 	.word	0x08016620
 800fca0:	08016660 	.word	0x08016660
 800fca4:	20008a14 	.word	0x20008a14

0800fca8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b086      	sub	sp, #24
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	4798      	blx	r3

  now = sys_now();
 800fcba:	f7f8 fd81 	bl	80087c0 <sys_now>
 800fcbe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	4b0f      	ldr	r3, [pc, #60]	@ (800fd04 <lwip_cyclic_timer+0x5c>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	4413      	add	r3, r2
 800fcca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800fccc:	68fa      	ldr	r2, [r7, #12]
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	1ad3      	subs	r3, r2, r3
 800fcd2:	0fdb      	lsrs	r3, r3, #31
 800fcd4:	f003 0301 	and.w	r3, r3, #1
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d009      	beq.n	800fcf2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	4413      	add	r3, r2
 800fce6:	687a      	ldr	r2, [r7, #4]
 800fce8:	4907      	ldr	r1, [pc, #28]	@ (800fd08 <lwip_cyclic_timer+0x60>)
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7ff ff6e 	bl	800fbcc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800fcf0:	e004      	b.n	800fcfc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800fcf2:	687a      	ldr	r2, [r7, #4]
 800fcf4:	4904      	ldr	r1, [pc, #16]	@ (800fd08 <lwip_cyclic_timer+0x60>)
 800fcf6:	68f8      	ldr	r0, [r7, #12]
 800fcf8:	f7ff ff68 	bl	800fbcc <sys_timeout_abs>
}
 800fcfc:	bf00      	nop
 800fcfe:	3718      	adds	r7, #24
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	20008a18 	.word	0x20008a18
 800fd08:	0800fca9 	.word	0x0800fca9

0800fd0c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fd12:	2301      	movs	r3, #1
 800fd14:	607b      	str	r3, [r7, #4]
 800fd16:	e00e      	b.n	800fd36 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800fd18:	4a0b      	ldr	r2, [pc, #44]	@ (800fd48 <sys_timeouts_init+0x3c>)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	00db      	lsls	r3, r3, #3
 800fd24:	4a08      	ldr	r2, [pc, #32]	@ (800fd48 <sys_timeouts_init+0x3c>)
 800fd26:	4413      	add	r3, r2
 800fd28:	461a      	mov	r2, r3
 800fd2a:	4908      	ldr	r1, [pc, #32]	@ (800fd4c <sys_timeouts_init+0x40>)
 800fd2c:	f000 f810 	bl	800fd50 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	3301      	adds	r3, #1
 800fd34:	607b      	str	r3, [r7, #4]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2b02      	cmp	r3, #2
 800fd3a:	d9ed      	bls.n	800fd18 <sys_timeouts_init+0xc>
  }
}
 800fd3c:	bf00      	nop
 800fd3e:	bf00      	nop
 800fd40:	3708      	adds	r7, #8
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	bf00      	nop
 800fd48:	080171d8 	.word	0x080171d8
 800fd4c:	0800fca9 	.word	0x0800fca9

0800fd50 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd62:	d306      	bcc.n	800fd72 <sys_timeout+0x22>
 800fd64:	4b0a      	ldr	r3, [pc, #40]	@ (800fd90 <sys_timeout+0x40>)
 800fd66:	f240 1229 	movw	r2, #297	@ 0x129
 800fd6a:	490a      	ldr	r1, [pc, #40]	@ (800fd94 <sys_timeout+0x44>)
 800fd6c:	480a      	ldr	r0, [pc, #40]	@ (800fd98 <sys_timeout+0x48>)
 800fd6e:	f003 fa75 	bl	801325c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800fd72:	f7f8 fd25 	bl	80087c0 <sys_now>
 800fd76:	4602      	mov	r2, r0
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	4413      	add	r3, r2
 800fd7c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	68b9      	ldr	r1, [r7, #8]
 800fd82:	6978      	ldr	r0, [r7, #20]
 800fd84:	f7ff ff22 	bl	800fbcc <sys_timeout_abs>
#endif
}
 800fd88:	bf00      	nop
 800fd8a:	3718      	adds	r7, #24
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}
 800fd90:	080165ec 	.word	0x080165ec
 800fd94:	08016688 	.word	0x08016688
 800fd98:	08016660 	.word	0x08016660

0800fd9c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b084      	sub	sp, #16
 800fda0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800fda2:	f7f8 fd0d 	bl	80087c0 <sys_now>
 800fda6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800fda8:	4b1a      	ldr	r3, [pc, #104]	@ (800fe14 <sys_check_timeouts+0x78>)
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d001      	beq.n	800fdb6 <sys_check_timeouts+0x1a>
 800fdb2:	f7f9 ff29 	bl	8009c08 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800fdb6:	4b18      	ldr	r3, [pc, #96]	@ (800fe18 <sys_check_timeouts+0x7c>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d022      	beq.n	800fe08 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	68fa      	ldr	r2, [r7, #12]
 800fdc8:	1ad3      	subs	r3, r2, r3
 800fdca:	0fdb      	lsrs	r3, r3, #31
 800fdcc:	f003 0301 	and.w	r3, r3, #1
 800fdd0:	b2db      	uxtb	r3, r3
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d11a      	bne.n	800fe0c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	4a0f      	ldr	r2, [pc, #60]	@ (800fe18 <sys_check_timeouts+0x7c>)
 800fddc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	689b      	ldr	r3, [r3, #8]
 800fde2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	68db      	ldr	r3, [r3, #12]
 800fde8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	685b      	ldr	r3, [r3, #4]
 800fdee:	4a0b      	ldr	r2, [pc, #44]	@ (800fe1c <sys_check_timeouts+0x80>)
 800fdf0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800fdf2:	68b9      	ldr	r1, [r7, #8]
 800fdf4:	2006      	movs	r0, #6
 800fdf6:	f7f9 fbcb 	bl	8009590 <memp_free>
    if (handler != NULL) {
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d0d3      	beq.n	800fda8 <sys_check_timeouts+0xc>
      handler(arg);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6838      	ldr	r0, [r7, #0]
 800fe04:	4798      	blx	r3
  do {
 800fe06:	e7cf      	b.n	800fda8 <sys_check_timeouts+0xc>
      return;
 800fe08:	bf00      	nop
 800fe0a:	e000      	b.n	800fe0e <sys_check_timeouts+0x72>
      return;
 800fe0c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800fe0e:	3710      	adds	r7, #16
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	200089c1 	.word	0x200089c1
 800fe18:	20008a14 	.word	0x20008a14
 800fe1c:	20008a18 	.word	0x20008a18

0800fe20 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fe24:	f003 f896 	bl	8012f54 <rand>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800fe36:	b29a      	uxth	r2, r3
 800fe38:	4b01      	ldr	r3, [pc, #4]	@ (800fe40 <udp_init+0x20>)
 800fe3a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fe3c:	bf00      	nop
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	2000009c 	.word	0x2000009c

0800fe44 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800fe4e:	4b17      	ldr	r3, [pc, #92]	@ (800feac <udp_new_port+0x68>)
 800fe50:	881b      	ldrh	r3, [r3, #0]
 800fe52:	1c5a      	adds	r2, r3, #1
 800fe54:	b291      	uxth	r1, r2
 800fe56:	4a15      	ldr	r2, [pc, #84]	@ (800feac <udp_new_port+0x68>)
 800fe58:	8011      	strh	r1, [r2, #0]
 800fe5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d103      	bne.n	800fe6a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800fe62:	4b12      	ldr	r3, [pc, #72]	@ (800feac <udp_new_port+0x68>)
 800fe64:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800fe68:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fe6a:	4b11      	ldr	r3, [pc, #68]	@ (800feb0 <udp_new_port+0x6c>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	603b      	str	r3, [r7, #0]
 800fe70:	e011      	b.n	800fe96 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	8a5a      	ldrh	r2, [r3, #18]
 800fe76:	4b0d      	ldr	r3, [pc, #52]	@ (800feac <udp_new_port+0x68>)
 800fe78:	881b      	ldrh	r3, [r3, #0]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d108      	bne.n	800fe90 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800fe7e:	88fb      	ldrh	r3, [r7, #6]
 800fe80:	3301      	adds	r3, #1
 800fe82:	80fb      	strh	r3, [r7, #6]
 800fe84:	88fb      	ldrh	r3, [r7, #6]
 800fe86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fe8a:	d3e0      	bcc.n	800fe4e <udp_new_port+0xa>
        return 0;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	e007      	b.n	800fea0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	603b      	str	r3, [r7, #0]
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d1ea      	bne.n	800fe72 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800fe9c:	4b03      	ldr	r3, [pc, #12]	@ (800feac <udp_new_port+0x68>)
 800fe9e:	881b      	ldrh	r3, [r3, #0]
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	370c      	adds	r7, #12
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr
 800feac:	2000009c 	.word	0x2000009c
 800feb0:	20008a20 	.word	0x20008a20

0800feb4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b084      	sub	sp, #16
 800feb8:	af00      	add	r7, sp, #0
 800feba:	60f8      	str	r0, [r7, #12]
 800febc:	60b9      	str	r1, [r7, #8]
 800febe:	4613      	mov	r3, r2
 800fec0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d105      	bne.n	800fed4 <udp_input_local_match+0x20>
 800fec8:	4b27      	ldr	r3, [pc, #156]	@ (800ff68 <udp_input_local_match+0xb4>)
 800feca:	2287      	movs	r2, #135	@ 0x87
 800fecc:	4927      	ldr	r1, [pc, #156]	@ (800ff6c <udp_input_local_match+0xb8>)
 800fece:	4828      	ldr	r0, [pc, #160]	@ (800ff70 <udp_input_local_match+0xbc>)
 800fed0:	f003 f9c4 	bl	801325c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d105      	bne.n	800fee6 <udp_input_local_match+0x32>
 800feda:	4b23      	ldr	r3, [pc, #140]	@ (800ff68 <udp_input_local_match+0xb4>)
 800fedc:	2288      	movs	r2, #136	@ 0x88
 800fede:	4925      	ldr	r1, [pc, #148]	@ (800ff74 <udp_input_local_match+0xc0>)
 800fee0:	4823      	ldr	r0, [pc, #140]	@ (800ff70 <udp_input_local_match+0xbc>)
 800fee2:	f003 f9bb 	bl	801325c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	7a1b      	ldrb	r3, [r3, #8]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00b      	beq.n	800ff06 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	7a1a      	ldrb	r2, [r3, #8]
 800fef2:	4b21      	ldr	r3, [pc, #132]	@ (800ff78 <udp_input_local_match+0xc4>)
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fefa:	3301      	adds	r3, #1
 800fefc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d001      	beq.n	800ff06 <udp_input_local_match+0x52>
    return 0;
 800ff02:	2300      	movs	r3, #0
 800ff04:	e02b      	b.n	800ff5e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ff06:	79fb      	ldrb	r3, [r7, #7]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d018      	beq.n	800ff3e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d013      	beq.n	800ff3a <udp_input_local_match+0x86>
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d00f      	beq.n	800ff3a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ff1a:	4b17      	ldr	r3, [pc, #92]	@ (800ff78 <udp_input_local_match+0xc4>)
 800ff1c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ff1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff22:	d00a      	beq.n	800ff3a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	4b13      	ldr	r3, [pc, #76]	@ (800ff78 <udp_input_local_match+0xc4>)
 800ff2a:	695b      	ldr	r3, [r3, #20]
 800ff2c:	405a      	eors	r2, r3
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	3308      	adds	r3, #8
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d110      	bne.n	800ff5c <udp_input_local_match+0xa8>
          return 1;
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	e00f      	b.n	800ff5e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d009      	beq.n	800ff58 <udp_input_local_match+0xa4>
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d005      	beq.n	800ff58 <udp_input_local_match+0xa4>
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	4b09      	ldr	r3, [pc, #36]	@ (800ff78 <udp_input_local_match+0xc4>)
 800ff52:	695b      	ldr	r3, [r3, #20]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d101      	bne.n	800ff5c <udp_input_local_match+0xa8>
        return 1;
 800ff58:	2301      	movs	r3, #1
 800ff5a:	e000      	b.n	800ff5e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ff5c:	2300      	movs	r3, #0
}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3710      	adds	r7, #16
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}
 800ff66:	bf00      	nop
 800ff68:	080166d4 	.word	0x080166d4
 800ff6c:	08016704 	.word	0x08016704
 800ff70:	08016728 	.word	0x08016728
 800ff74:	08016750 	.word	0x08016750
 800ff78:	20005694 	.word	0x20005694

0800ff7c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ff7c:	b590      	push	{r4, r7, lr}
 800ff7e:	b08d      	sub	sp, #52	@ 0x34
 800ff80:	af02      	add	r7, sp, #8
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ff86:	2300      	movs	r3, #0
 800ff88:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d105      	bne.n	800ff9c <udp_input+0x20>
 800ff90:	4b7c      	ldr	r3, [pc, #496]	@ (8010184 <udp_input+0x208>)
 800ff92:	22cf      	movs	r2, #207	@ 0xcf
 800ff94:	497c      	ldr	r1, [pc, #496]	@ (8010188 <udp_input+0x20c>)
 800ff96:	487d      	ldr	r0, [pc, #500]	@ (801018c <udp_input+0x210>)
 800ff98:	f003 f960 	bl	801325c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d105      	bne.n	800ffae <udp_input+0x32>
 800ffa2:	4b78      	ldr	r3, [pc, #480]	@ (8010184 <udp_input+0x208>)
 800ffa4:	22d0      	movs	r2, #208	@ 0xd0
 800ffa6:	497a      	ldr	r1, [pc, #488]	@ (8010190 <udp_input+0x214>)
 800ffa8:	4878      	ldr	r0, [pc, #480]	@ (801018c <udp_input+0x210>)
 800ffaa:	f003 f957 	bl	801325c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	895b      	ldrh	r3, [r3, #10]
 800ffb2:	2b07      	cmp	r3, #7
 800ffb4:	d803      	bhi.n	800ffbe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f7fa f960 	bl	800a27c <pbuf_free>
    goto end;
 800ffbc:	e0de      	b.n	801017c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ffc4:	4b73      	ldr	r3, [pc, #460]	@ (8010194 <udp_input+0x218>)
 800ffc6:	695b      	ldr	r3, [r3, #20]
 800ffc8:	4a72      	ldr	r2, [pc, #456]	@ (8010194 <udp_input+0x218>)
 800ffca:	6812      	ldr	r2, [r2, #0]
 800ffcc:	4611      	mov	r1, r2
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f001 ffa0 	bl	8011f14 <ip4_addr_isbroadcast_u32>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	881b      	ldrh	r3, [r3, #0]
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7f8 fdee 	bl	8008bc0 <lwip_htons>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	885b      	ldrh	r3, [r3, #2]
 800ffec:	b29b      	uxth	r3, r3
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7f8 fde6 	bl	8008bc0 <lwip_htons>
 800fff4:	4603      	mov	r3, r0
 800fff6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800fff8:	2300      	movs	r3, #0
 800fffa:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800fffc:	2300      	movs	r3, #0
 800fffe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010000:	2300      	movs	r3, #0
 8010002:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010004:	4b64      	ldr	r3, [pc, #400]	@ (8010198 <udp_input+0x21c>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	627b      	str	r3, [r7, #36]	@ 0x24
 801000a:	e054      	b.n	80100b6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801000c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801000e:	8a5b      	ldrh	r3, [r3, #18]
 8010010:	89fa      	ldrh	r2, [r7, #14]
 8010012:	429a      	cmp	r2, r3
 8010014:	d14a      	bne.n	80100ac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010016:	7cfb      	ldrb	r3, [r7, #19]
 8010018:	461a      	mov	r2, r3
 801001a:	6839      	ldr	r1, [r7, #0]
 801001c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801001e:	f7ff ff49 	bl	800feb4 <udp_input_local_match>
 8010022:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010024:	2b00      	cmp	r3, #0
 8010026:	d041      	beq.n	80100ac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801002a:	7c1b      	ldrb	r3, [r3, #16]
 801002c:	f003 0304 	and.w	r3, r3, #4
 8010030:	2b00      	cmp	r3, #0
 8010032:	d11d      	bne.n	8010070 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d102      	bne.n	8010040 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801003a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801003c:	61fb      	str	r3, [r7, #28]
 801003e:	e017      	b.n	8010070 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010040:	7cfb      	ldrb	r3, [r7, #19]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d014      	beq.n	8010070 <udp_input+0xf4>
 8010046:	4b53      	ldr	r3, [pc, #332]	@ (8010194 <udp_input+0x218>)
 8010048:	695b      	ldr	r3, [r3, #20]
 801004a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801004e:	d10f      	bne.n	8010070 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010050:	69fb      	ldr	r3, [r7, #28]
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	3304      	adds	r3, #4
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	429a      	cmp	r2, r3
 801005c:	d008      	beq.n	8010070 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801005e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	3304      	adds	r3, #4
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	429a      	cmp	r2, r3
 801006a:	d101      	bne.n	8010070 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801006c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801006e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010072:	8a9b      	ldrh	r3, [r3, #20]
 8010074:	8a3a      	ldrh	r2, [r7, #16]
 8010076:	429a      	cmp	r2, r3
 8010078:	d118      	bne.n	80100ac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801007a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801007c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801007e:	2b00      	cmp	r3, #0
 8010080:	d005      	beq.n	801008e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010084:	685a      	ldr	r2, [r3, #4]
 8010086:	4b43      	ldr	r3, [pc, #268]	@ (8010194 <udp_input+0x218>)
 8010088:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801008a:	429a      	cmp	r2, r3
 801008c:	d10e      	bne.n	80100ac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801008e:	6a3b      	ldr	r3, [r7, #32]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d014      	beq.n	80100be <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010096:	68da      	ldr	r2, [r3, #12]
 8010098:	6a3b      	ldr	r3, [r7, #32]
 801009a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801009c:	4b3e      	ldr	r3, [pc, #248]	@ (8010198 <udp_input+0x21c>)
 801009e:	681a      	ldr	r2, [r3, #0]
 80100a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80100a4:	4a3c      	ldr	r2, [pc, #240]	@ (8010198 <udp_input+0x21c>)
 80100a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80100aa:	e008      	b.n	80100be <udp_input+0x142>
      }
    }

    prev = pcb;
 80100ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80100b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80100b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d1a7      	bne.n	801000c <udp_input+0x90>
 80100bc:	e000      	b.n	80100c0 <udp_input+0x144>
        break;
 80100be:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80100c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d101      	bne.n	80100ca <udp_input+0x14e>
    pcb = uncon_pcb;
 80100c6:	69fb      	ldr	r3, [r7, #28]
 80100c8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80100ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d002      	beq.n	80100d6 <udp_input+0x15a>
    for_us = 1;
 80100d0:	2301      	movs	r3, #1
 80100d2:	76fb      	strb	r3, [r7, #27]
 80100d4:	e00a      	b.n	80100ec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	3304      	adds	r3, #4
 80100da:	681a      	ldr	r2, [r3, #0]
 80100dc:	4b2d      	ldr	r3, [pc, #180]	@ (8010194 <udp_input+0x218>)
 80100de:	695b      	ldr	r3, [r3, #20]
 80100e0:	429a      	cmp	r2, r3
 80100e2:	bf0c      	ite	eq
 80100e4:	2301      	moveq	r3, #1
 80100e6:	2300      	movne	r3, #0
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80100ec:	7efb      	ldrb	r3, [r7, #27]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d041      	beq.n	8010176 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80100f2:	2108      	movs	r1, #8
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f7fa f83b 	bl	800a170 <pbuf_remove_header>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d00a      	beq.n	8010116 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010100:	4b20      	ldr	r3, [pc, #128]	@ (8010184 <udp_input+0x208>)
 8010102:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8010106:	4925      	ldr	r1, [pc, #148]	@ (801019c <udp_input+0x220>)
 8010108:	4820      	ldr	r0, [pc, #128]	@ (801018c <udp_input+0x210>)
 801010a:	f003 f8a7 	bl	801325c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f7fa f8b4 	bl	800a27c <pbuf_free>
      goto end;
 8010114:	e032      	b.n	801017c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010118:	2b00      	cmp	r3, #0
 801011a:	d012      	beq.n	8010142 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801011c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801011e:	699b      	ldr	r3, [r3, #24]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d00a      	beq.n	801013a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010126:	699c      	ldr	r4, [r3, #24]
 8010128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801012a:	69d8      	ldr	r0, [r3, #28]
 801012c:	8a3b      	ldrh	r3, [r7, #16]
 801012e:	9300      	str	r3, [sp, #0]
 8010130:	4b1b      	ldr	r3, [pc, #108]	@ (80101a0 <udp_input+0x224>)
 8010132:	687a      	ldr	r2, [r7, #4]
 8010134:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010136:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010138:	e021      	b.n	801017e <udp_input+0x202>
        pbuf_free(p);
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f7fa f89e 	bl	800a27c <pbuf_free>
        goto end;
 8010140:	e01c      	b.n	801017c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010142:	7cfb      	ldrb	r3, [r7, #19]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d112      	bne.n	801016e <udp_input+0x1f2>
 8010148:	4b12      	ldr	r3, [pc, #72]	@ (8010194 <udp_input+0x218>)
 801014a:	695b      	ldr	r3, [r3, #20]
 801014c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010150:	2be0      	cmp	r3, #224	@ 0xe0
 8010152:	d00c      	beq.n	801016e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010154:	4b0f      	ldr	r3, [pc, #60]	@ (8010194 <udp_input+0x218>)
 8010156:	899b      	ldrh	r3, [r3, #12]
 8010158:	3308      	adds	r3, #8
 801015a:	b29b      	uxth	r3, r3
 801015c:	b21b      	sxth	r3, r3
 801015e:	4619      	mov	r1, r3
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f7fa f878 	bl	800a256 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010166:	2103      	movs	r1, #3
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f001 fbb3 	bl	80118d4 <icmp_dest_unreach>
      pbuf_free(p);
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7fa f884 	bl	800a27c <pbuf_free>
  return;
 8010174:	e003      	b.n	801017e <udp_input+0x202>
    pbuf_free(p);
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f7fa f880 	bl	800a27c <pbuf_free>
  return;
 801017c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801017e:	372c      	adds	r7, #44	@ 0x2c
 8010180:	46bd      	mov	sp, r7
 8010182:	bd90      	pop	{r4, r7, pc}
 8010184:	080166d4 	.word	0x080166d4
 8010188:	08016778 	.word	0x08016778
 801018c:	08016728 	.word	0x08016728
 8010190:	08016790 	.word	0x08016790
 8010194:	20005694 	.word	0x20005694
 8010198:	20008a20 	.word	0x20008a20
 801019c:	080167ac 	.word	0x080167ac
 80101a0:	200056a4 	.word	0x200056a4

080101a4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d109      	bne.n	80101c8 <udp_send+0x24>
 80101b4:	4b11      	ldr	r3, [pc, #68]	@ (80101fc <udp_send+0x58>)
 80101b6:	f240 12d5 	movw	r2, #469	@ 0x1d5
 80101ba:	4911      	ldr	r1, [pc, #68]	@ (8010200 <udp_send+0x5c>)
 80101bc:	4811      	ldr	r0, [pc, #68]	@ (8010204 <udp_send+0x60>)
 80101be:	f003 f84d 	bl	801325c <iprintf>
 80101c2:	f06f 030f 	mvn.w	r3, #15
 80101c6:	e015      	b.n	80101f4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d109      	bne.n	80101e2 <udp_send+0x3e>
 80101ce:	4b0b      	ldr	r3, [pc, #44]	@ (80101fc <udp_send+0x58>)
 80101d0:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 80101d4:	490c      	ldr	r1, [pc, #48]	@ (8010208 <udp_send+0x64>)
 80101d6:	480b      	ldr	r0, [pc, #44]	@ (8010204 <udp_send+0x60>)
 80101d8:	f003 f840 	bl	801325c <iprintf>
 80101dc:	f06f 030f 	mvn.w	r3, #15
 80101e0:	e008      	b.n	80101f4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	1d1a      	adds	r2, r3, #4
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	8a9b      	ldrh	r3, [r3, #20]
 80101ea:	6839      	ldr	r1, [r7, #0]
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f000 f80d 	bl	801020c <udp_sendto>
 80101f2:	4603      	mov	r3, r0
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	3708      	adds	r7, #8
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	080166d4 	.word	0x080166d4
 8010200:	080167c8 	.word	0x080167c8
 8010204:	08016728 	.word	0x08016728
 8010208:	080167e0 	.word	0x080167e0

0801020c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b088      	sub	sp, #32
 8010210:	af02      	add	r7, sp, #8
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	607a      	str	r2, [r7, #4]
 8010218:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d109      	bne.n	8010234 <udp_sendto+0x28>
 8010220:	4b23      	ldr	r3, [pc, #140]	@ (80102b0 <udp_sendto+0xa4>)
 8010222:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010226:	4923      	ldr	r1, [pc, #140]	@ (80102b4 <udp_sendto+0xa8>)
 8010228:	4823      	ldr	r0, [pc, #140]	@ (80102b8 <udp_sendto+0xac>)
 801022a:	f003 f817 	bl	801325c <iprintf>
 801022e:	f06f 030f 	mvn.w	r3, #15
 8010232:	e038      	b.n	80102a6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d109      	bne.n	801024e <udp_sendto+0x42>
 801023a:	4b1d      	ldr	r3, [pc, #116]	@ (80102b0 <udp_sendto+0xa4>)
 801023c:	f240 2219 	movw	r2, #537	@ 0x219
 8010240:	491e      	ldr	r1, [pc, #120]	@ (80102bc <udp_sendto+0xb0>)
 8010242:	481d      	ldr	r0, [pc, #116]	@ (80102b8 <udp_sendto+0xac>)
 8010244:	f003 f80a 	bl	801325c <iprintf>
 8010248:	f06f 030f 	mvn.w	r3, #15
 801024c:	e02b      	b.n	80102a6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d109      	bne.n	8010268 <udp_sendto+0x5c>
 8010254:	4b16      	ldr	r3, [pc, #88]	@ (80102b0 <udp_sendto+0xa4>)
 8010256:	f240 221a 	movw	r2, #538	@ 0x21a
 801025a:	4919      	ldr	r1, [pc, #100]	@ (80102c0 <udp_sendto+0xb4>)
 801025c:	4816      	ldr	r0, [pc, #88]	@ (80102b8 <udp_sendto+0xac>)
 801025e:	f002 fffd 	bl	801325c <iprintf>
 8010262:	f06f 030f 	mvn.w	r3, #15
 8010266:	e01e      	b.n	80102a6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	7a1b      	ldrb	r3, [r3, #8]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d006      	beq.n	801027e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	7a1b      	ldrb	r3, [r3, #8]
 8010274:	4618      	mov	r0, r3
 8010276:	f7f9 fca1 	bl	8009bbc <netif_get_by_index>
 801027a:	6178      	str	r0, [r7, #20]
 801027c:	e003      	b.n	8010286 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f001 fbb2 	bl	80119e8 <ip4_route>
 8010284:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d102      	bne.n	8010292 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801028c:	f06f 0303 	mvn.w	r3, #3
 8010290:	e009      	b.n	80102a6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8010292:	887a      	ldrh	r2, [r7, #2]
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	9300      	str	r3, [sp, #0]
 8010298:	4613      	mov	r3, r2
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	68b9      	ldr	r1, [r7, #8]
 801029e:	68f8      	ldr	r0, [r7, #12]
 80102a0:	f000 f810 	bl	80102c4 <udp_sendto_if>
 80102a4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	3718      	adds	r7, #24
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}
 80102ae:	bf00      	nop
 80102b0:	080166d4 	.word	0x080166d4
 80102b4:	080167f8 	.word	0x080167f8
 80102b8:	08016728 	.word	0x08016728
 80102bc:	08016810 	.word	0x08016810
 80102c0:	0801682c 	.word	0x0801682c

080102c4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b088      	sub	sp, #32
 80102c8:	af02      	add	r7, sp, #8
 80102ca:	60f8      	str	r0, [r7, #12]
 80102cc:	60b9      	str	r1, [r7, #8]
 80102ce:	607a      	str	r2, [r7, #4]
 80102d0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d109      	bne.n	80102ec <udp_sendto_if+0x28>
 80102d8:	4b2e      	ldr	r3, [pc, #184]	@ (8010394 <udp_sendto_if+0xd0>)
 80102da:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80102de:	492e      	ldr	r1, [pc, #184]	@ (8010398 <udp_sendto_if+0xd4>)
 80102e0:	482e      	ldr	r0, [pc, #184]	@ (801039c <udp_sendto_if+0xd8>)
 80102e2:	f002 ffbb 	bl	801325c <iprintf>
 80102e6:	f06f 030f 	mvn.w	r3, #15
 80102ea:	e04f      	b.n	801038c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d109      	bne.n	8010306 <udp_sendto_if+0x42>
 80102f2:	4b28      	ldr	r3, [pc, #160]	@ (8010394 <udp_sendto_if+0xd0>)
 80102f4:	f240 2281 	movw	r2, #641	@ 0x281
 80102f8:	4929      	ldr	r1, [pc, #164]	@ (80103a0 <udp_sendto_if+0xdc>)
 80102fa:	4828      	ldr	r0, [pc, #160]	@ (801039c <udp_sendto_if+0xd8>)
 80102fc:	f002 ffae 	bl	801325c <iprintf>
 8010300:	f06f 030f 	mvn.w	r3, #15
 8010304:	e042      	b.n	801038c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d109      	bne.n	8010320 <udp_sendto_if+0x5c>
 801030c:	4b21      	ldr	r3, [pc, #132]	@ (8010394 <udp_sendto_if+0xd0>)
 801030e:	f240 2282 	movw	r2, #642	@ 0x282
 8010312:	4924      	ldr	r1, [pc, #144]	@ (80103a4 <udp_sendto_if+0xe0>)
 8010314:	4821      	ldr	r0, [pc, #132]	@ (801039c <udp_sendto_if+0xd8>)
 8010316:	f002 ffa1 	bl	801325c <iprintf>
 801031a:	f06f 030f 	mvn.w	r3, #15
 801031e:	e035      	b.n	801038c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010320:	6a3b      	ldr	r3, [r7, #32]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d109      	bne.n	801033a <udp_sendto_if+0x76>
 8010326:	4b1b      	ldr	r3, [pc, #108]	@ (8010394 <udp_sendto_if+0xd0>)
 8010328:	f240 2283 	movw	r2, #643	@ 0x283
 801032c:	491e      	ldr	r1, [pc, #120]	@ (80103a8 <udp_sendto_if+0xe4>)
 801032e:	481b      	ldr	r0, [pc, #108]	@ (801039c <udp_sendto_if+0xd8>)
 8010330:	f002 ff94 	bl	801325c <iprintf>
 8010334:	f06f 030f 	mvn.w	r3, #15
 8010338:	e028      	b.n	801038c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d009      	beq.n	8010354 <udp_sendto_if+0x90>
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d005      	beq.n	8010354 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010350:	2be0      	cmp	r3, #224	@ 0xe0
 8010352:	d103      	bne.n	801035c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010354:	6a3b      	ldr	r3, [r7, #32]
 8010356:	3304      	adds	r3, #4
 8010358:	617b      	str	r3, [r7, #20]
 801035a:	e00b      	b.n	8010374 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681a      	ldr	r2, [r3, #0]
 8010360:	6a3b      	ldr	r3, [r7, #32]
 8010362:	3304      	adds	r3, #4
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	429a      	cmp	r2, r3
 8010368:	d002      	beq.n	8010370 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801036a:	f06f 0303 	mvn.w	r3, #3
 801036e:	e00d      	b.n	801038c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010374:	887a      	ldrh	r2, [r7, #2]
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	9301      	str	r3, [sp, #4]
 801037a:	6a3b      	ldr	r3, [r7, #32]
 801037c:	9300      	str	r3, [sp, #0]
 801037e:	4613      	mov	r3, r2
 8010380:	687a      	ldr	r2, [r7, #4]
 8010382:	68b9      	ldr	r1, [r7, #8]
 8010384:	68f8      	ldr	r0, [r7, #12]
 8010386:	f000 f811 	bl	80103ac <udp_sendto_if_src>
 801038a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801038c:	4618      	mov	r0, r3
 801038e:	3718      	adds	r7, #24
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}
 8010394:	080166d4 	.word	0x080166d4
 8010398:	08016848 	.word	0x08016848
 801039c:	08016728 	.word	0x08016728
 80103a0:	08016864 	.word	0x08016864
 80103a4:	08016880 	.word	0x08016880
 80103a8:	080168a0 	.word	0x080168a0

080103ac <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b08c      	sub	sp, #48	@ 0x30
 80103b0:	af04      	add	r7, sp, #16
 80103b2:	60f8      	str	r0, [r7, #12]
 80103b4:	60b9      	str	r1, [r7, #8]
 80103b6:	607a      	str	r2, [r7, #4]
 80103b8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d109      	bne.n	80103d4 <udp_sendto_if_src+0x28>
 80103c0:	4b65      	ldr	r3, [pc, #404]	@ (8010558 <udp_sendto_if_src+0x1ac>)
 80103c2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80103c6:	4965      	ldr	r1, [pc, #404]	@ (801055c <udp_sendto_if_src+0x1b0>)
 80103c8:	4865      	ldr	r0, [pc, #404]	@ (8010560 <udp_sendto_if_src+0x1b4>)
 80103ca:	f002 ff47 	bl	801325c <iprintf>
 80103ce:	f06f 030f 	mvn.w	r3, #15
 80103d2:	e0bc      	b.n	801054e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d109      	bne.n	80103ee <udp_sendto_if_src+0x42>
 80103da:	4b5f      	ldr	r3, [pc, #380]	@ (8010558 <udp_sendto_if_src+0x1ac>)
 80103dc:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80103e0:	4960      	ldr	r1, [pc, #384]	@ (8010564 <udp_sendto_if_src+0x1b8>)
 80103e2:	485f      	ldr	r0, [pc, #380]	@ (8010560 <udp_sendto_if_src+0x1b4>)
 80103e4:	f002 ff3a 	bl	801325c <iprintf>
 80103e8:	f06f 030f 	mvn.w	r3, #15
 80103ec:	e0af      	b.n	801054e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d109      	bne.n	8010408 <udp_sendto_if_src+0x5c>
 80103f4:	4b58      	ldr	r3, [pc, #352]	@ (8010558 <udp_sendto_if_src+0x1ac>)
 80103f6:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80103fa:	495b      	ldr	r1, [pc, #364]	@ (8010568 <udp_sendto_if_src+0x1bc>)
 80103fc:	4858      	ldr	r0, [pc, #352]	@ (8010560 <udp_sendto_if_src+0x1b4>)
 80103fe:	f002 ff2d 	bl	801325c <iprintf>
 8010402:	f06f 030f 	mvn.w	r3, #15
 8010406:	e0a2      	b.n	801054e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801040a:	2b00      	cmp	r3, #0
 801040c:	d109      	bne.n	8010422 <udp_sendto_if_src+0x76>
 801040e:	4b52      	ldr	r3, [pc, #328]	@ (8010558 <udp_sendto_if_src+0x1ac>)
 8010410:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8010414:	4955      	ldr	r1, [pc, #340]	@ (801056c <udp_sendto_if_src+0x1c0>)
 8010416:	4852      	ldr	r0, [pc, #328]	@ (8010560 <udp_sendto_if_src+0x1b4>)
 8010418:	f002 ff20 	bl	801325c <iprintf>
 801041c:	f06f 030f 	mvn.w	r3, #15
 8010420:	e095      	b.n	801054e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010424:	2b00      	cmp	r3, #0
 8010426:	d109      	bne.n	801043c <udp_sendto_if_src+0x90>
 8010428:	4b4b      	ldr	r3, [pc, #300]	@ (8010558 <udp_sendto_if_src+0x1ac>)
 801042a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801042e:	4950      	ldr	r1, [pc, #320]	@ (8010570 <udp_sendto_if_src+0x1c4>)
 8010430:	484b      	ldr	r0, [pc, #300]	@ (8010560 <udp_sendto_if_src+0x1b4>)
 8010432:	f002 ff13 	bl	801325c <iprintf>
 8010436:	f06f 030f 	mvn.w	r3, #15
 801043a:	e088      	b.n	801054e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	8a5b      	ldrh	r3, [r3, #18]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d10f      	bne.n	8010464 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010444:	68f9      	ldr	r1, [r7, #12]
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	8a5b      	ldrh	r3, [r3, #18]
 801044a:	461a      	mov	r2, r3
 801044c:	68f8      	ldr	r0, [r7, #12]
 801044e:	f000 f893 	bl	8010578 <udp_bind>
 8010452:	4603      	mov	r3, r0
 8010454:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010456:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d002      	beq.n	8010464 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801045e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010462:	e074      	b.n	801054e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	891b      	ldrh	r3, [r3, #8]
 8010468:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801046c:	4293      	cmp	r3, r2
 801046e:	d902      	bls.n	8010476 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8010470:	f04f 33ff 	mov.w	r3, #4294967295
 8010474:	e06b      	b.n	801054e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8010476:	2108      	movs	r1, #8
 8010478:	68b8      	ldr	r0, [r7, #8]
 801047a:	f7f9 fe69 	bl	800a150 <pbuf_add_header>
 801047e:	4603      	mov	r3, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	d015      	beq.n	80104b0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010484:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010488:	2108      	movs	r1, #8
 801048a:	2022      	movs	r0, #34	@ 0x22
 801048c:	f7f9 fc12 	bl	8009cb4 <pbuf_alloc>
 8010490:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8010492:	69fb      	ldr	r3, [r7, #28]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d102      	bne.n	801049e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010498:	f04f 33ff 	mov.w	r3, #4294967295
 801049c:	e057      	b.n	801054e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	891b      	ldrh	r3, [r3, #8]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d006      	beq.n	80104b4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80104a6:	68b9      	ldr	r1, [r7, #8]
 80104a8:	69f8      	ldr	r0, [r7, #28]
 80104aa:	f7f9 ffff 	bl	800a4ac <pbuf_chain>
 80104ae:	e001      	b.n	80104b4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80104b4:	69fb      	ldr	r3, [r7, #28]
 80104b6:	895b      	ldrh	r3, [r3, #10]
 80104b8:	2b07      	cmp	r3, #7
 80104ba:	d806      	bhi.n	80104ca <udp_sendto_if_src+0x11e>
 80104bc:	4b26      	ldr	r3, [pc, #152]	@ (8010558 <udp_sendto_if_src+0x1ac>)
 80104be:	f240 320d 	movw	r2, #781	@ 0x30d
 80104c2:	492c      	ldr	r1, [pc, #176]	@ (8010574 <udp_sendto_if_src+0x1c8>)
 80104c4:	4826      	ldr	r0, [pc, #152]	@ (8010560 <udp_sendto_if_src+0x1b4>)
 80104c6:	f002 fec9 	bl	801325c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	8a5b      	ldrh	r3, [r3, #18]
 80104d4:	4618      	mov	r0, r3
 80104d6:	f7f8 fb73 	bl	8008bc0 <lwip_htons>
 80104da:	4603      	mov	r3, r0
 80104dc:	461a      	mov	r2, r3
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80104e2:	887b      	ldrh	r3, [r7, #2]
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7f8 fb6b 	bl	8008bc0 <lwip_htons>
 80104ea:	4603      	mov	r3, r0
 80104ec:	461a      	mov	r2, r3
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	2200      	movs	r2, #0
 80104f6:	719a      	strb	r2, [r3, #6]
 80104f8:	2200      	movs	r2, #0
 80104fa:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80104fc:	69fb      	ldr	r3, [r7, #28]
 80104fe:	891b      	ldrh	r3, [r3, #8]
 8010500:	4618      	mov	r0, r3
 8010502:	f7f8 fb5d 	bl	8008bc0 <lwip_htons>
 8010506:	4603      	mov	r3, r0
 8010508:	461a      	mov	r2, r3
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801050e:	2311      	movs	r3, #17
 8010510:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	7adb      	ldrb	r3, [r3, #11]
 8010516:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	7a9b      	ldrb	r3, [r3, #10]
 801051c:	7cb9      	ldrb	r1, [r7, #18]
 801051e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010520:	9202      	str	r2, [sp, #8]
 8010522:	7cfa      	ldrb	r2, [r7, #19]
 8010524:	9201      	str	r2, [sp, #4]
 8010526:	9300      	str	r3, [sp, #0]
 8010528:	460b      	mov	r3, r1
 801052a:	687a      	ldr	r2, [r7, #4]
 801052c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801052e:	69f8      	ldr	r0, [r7, #28]
 8010530:	f001 fc42 	bl	8011db8 <ip4_output_if_src>
 8010534:	4603      	mov	r3, r0
 8010536:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010538:	69fa      	ldr	r2, [r7, #28]
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	429a      	cmp	r2, r3
 801053e:	d004      	beq.n	801054a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010540:	69f8      	ldr	r0, [r7, #28]
 8010542:	f7f9 fe9b 	bl	800a27c <pbuf_free>
    q = NULL;
 8010546:	2300      	movs	r3, #0
 8010548:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801054a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801054e:	4618      	mov	r0, r3
 8010550:	3720      	adds	r7, #32
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	080166d4 	.word	0x080166d4
 801055c:	080168c0 	.word	0x080168c0
 8010560:	08016728 	.word	0x08016728
 8010564:	080168e0 	.word	0x080168e0
 8010568:	08016900 	.word	0x08016900
 801056c:	08016924 	.word	0x08016924
 8010570:	08016948 	.word	0x08016948
 8010574:	0801696c 	.word	0x0801696c

08010578 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b086      	sub	sp, #24
 801057c:	af00      	add	r7, sp, #0
 801057e:	60f8      	str	r0, [r7, #12]
 8010580:	60b9      	str	r1, [r7, #8]
 8010582:	4613      	mov	r3, r2
 8010584:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d101      	bne.n	8010590 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801058c:	4b39      	ldr	r3, [pc, #228]	@ (8010674 <udp_bind+0xfc>)
 801058e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d109      	bne.n	80105aa <udp_bind+0x32>
 8010596:	4b38      	ldr	r3, [pc, #224]	@ (8010678 <udp_bind+0x100>)
 8010598:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801059c:	4937      	ldr	r1, [pc, #220]	@ (801067c <udp_bind+0x104>)
 801059e:	4838      	ldr	r0, [pc, #224]	@ (8010680 <udp_bind+0x108>)
 80105a0:	f002 fe5c 	bl	801325c <iprintf>
 80105a4:	f06f 030f 	mvn.w	r3, #15
 80105a8:	e060      	b.n	801066c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80105aa:	2300      	movs	r3, #0
 80105ac:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80105ae:	4b35      	ldr	r3, [pc, #212]	@ (8010684 <udp_bind+0x10c>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	617b      	str	r3, [r7, #20]
 80105b4:	e009      	b.n	80105ca <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80105b6:	68fa      	ldr	r2, [r7, #12]
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d102      	bne.n	80105c4 <udp_bind+0x4c>
      rebind = 1;
 80105be:	2301      	movs	r3, #1
 80105c0:	74fb      	strb	r3, [r7, #19]
      break;
 80105c2:	e005      	b.n	80105d0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	68db      	ldr	r3, [r3, #12]
 80105c8:	617b      	str	r3, [r7, #20]
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d1f2      	bne.n	80105b6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80105d0:	88fb      	ldrh	r3, [r7, #6]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d109      	bne.n	80105ea <udp_bind+0x72>
    port = udp_new_port();
 80105d6:	f7ff fc35 	bl	800fe44 <udp_new_port>
 80105da:	4603      	mov	r3, r0
 80105dc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80105de:	88fb      	ldrh	r3, [r7, #6]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d12c      	bne.n	801063e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80105e4:	f06f 0307 	mvn.w	r3, #7
 80105e8:	e040      	b.n	801066c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80105ea:	4b26      	ldr	r3, [pc, #152]	@ (8010684 <udp_bind+0x10c>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	617b      	str	r3, [r7, #20]
 80105f0:	e022      	b.n	8010638 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80105f2:	68fa      	ldr	r2, [r7, #12]
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d01b      	beq.n	8010632 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	8a5b      	ldrh	r3, [r3, #18]
 80105fe:	88fa      	ldrh	r2, [r7, #6]
 8010600:	429a      	cmp	r2, r3
 8010602:	d116      	bne.n	8010632 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801060c:	429a      	cmp	r2, r3
 801060e:	d00d      	beq.n	801062c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d00a      	beq.n	801062c <udp_bind+0xb4>
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d006      	beq.n	801062c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801061e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010620:	2b00      	cmp	r3, #0
 8010622:	d003      	beq.n	801062c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d102      	bne.n	8010632 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801062c:	f06f 0307 	mvn.w	r3, #7
 8010630:	e01c      	b.n	801066c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	68db      	ldr	r3, [r3, #12]
 8010636:	617b      	str	r3, [r7, #20]
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d1d9      	bne.n	80105f2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d002      	beq.n	801064a <udp_bind+0xd2>
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	e000      	b.n	801064c <udp_bind+0xd4>
 801064a:	2300      	movs	r3, #0
 801064c:	68fa      	ldr	r2, [r7, #12]
 801064e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	88fa      	ldrh	r2, [r7, #6]
 8010654:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010656:	7cfb      	ldrb	r3, [r7, #19]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d106      	bne.n	801066a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801065c:	4b09      	ldr	r3, [pc, #36]	@ (8010684 <udp_bind+0x10c>)
 801065e:	681a      	ldr	r2, [r3, #0]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010664:	4a07      	ldr	r2, [pc, #28]	@ (8010684 <udp_bind+0x10c>)
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801066a:	2300      	movs	r3, #0
}
 801066c:	4618      	mov	r0, r3
 801066e:	3718      	adds	r7, #24
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	080171f0 	.word	0x080171f0
 8010678:	080166d4 	.word	0x080166d4
 801067c:	0801699c 	.word	0x0801699c
 8010680:	08016728 	.word	0x08016728
 8010684:	20008a20 	.word	0x20008a20

08010688 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b086      	sub	sp, #24
 801068c:	af00      	add	r7, sp, #0
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	4613      	mov	r3, r2
 8010694:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d109      	bne.n	80106b0 <udp_connect+0x28>
 801069c:	4b2c      	ldr	r3, [pc, #176]	@ (8010750 <udp_connect+0xc8>)
 801069e:	f240 4235 	movw	r2, #1077	@ 0x435
 80106a2:	492c      	ldr	r1, [pc, #176]	@ (8010754 <udp_connect+0xcc>)
 80106a4:	482c      	ldr	r0, [pc, #176]	@ (8010758 <udp_connect+0xd0>)
 80106a6:	f002 fdd9 	bl	801325c <iprintf>
 80106aa:	f06f 030f 	mvn.w	r3, #15
 80106ae:	e04b      	b.n	8010748 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d109      	bne.n	80106ca <udp_connect+0x42>
 80106b6:	4b26      	ldr	r3, [pc, #152]	@ (8010750 <udp_connect+0xc8>)
 80106b8:	f240 4236 	movw	r2, #1078	@ 0x436
 80106bc:	4927      	ldr	r1, [pc, #156]	@ (801075c <udp_connect+0xd4>)
 80106be:	4826      	ldr	r0, [pc, #152]	@ (8010758 <udp_connect+0xd0>)
 80106c0:	f002 fdcc 	bl	801325c <iprintf>
 80106c4:	f06f 030f 	mvn.w	r3, #15
 80106c8:	e03e      	b.n	8010748 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	8a5b      	ldrh	r3, [r3, #18]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d10f      	bne.n	80106f2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80106d2:	68f9      	ldr	r1, [r7, #12]
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	8a5b      	ldrh	r3, [r3, #18]
 80106d8:	461a      	mov	r2, r3
 80106da:	68f8      	ldr	r0, [r7, #12]
 80106dc:	f7ff ff4c 	bl	8010578 <udp_bind>
 80106e0:	4603      	mov	r3, r0
 80106e2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80106e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d002      	beq.n	80106f2 <udp_connect+0x6a>
      return err;
 80106ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106f0:	e02a      	b.n	8010748 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d002      	beq.n	80106fe <udp_connect+0x76>
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	e000      	b.n	8010700 <udp_connect+0x78>
 80106fe:	2300      	movs	r3, #0
 8010700:	68fa      	ldr	r2, [r7, #12]
 8010702:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	88fa      	ldrh	r2, [r7, #6]
 8010708:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	7c1b      	ldrb	r3, [r3, #16]
 801070e:	f043 0304 	orr.w	r3, r3, #4
 8010712:	b2da      	uxtb	r2, r3
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010718:	4b11      	ldr	r3, [pc, #68]	@ (8010760 <udp_connect+0xd8>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	617b      	str	r3, [r7, #20]
 801071e:	e008      	b.n	8010732 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010720:	68fa      	ldr	r2, [r7, #12]
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	429a      	cmp	r2, r3
 8010726:	d101      	bne.n	801072c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010728:	2300      	movs	r3, #0
 801072a:	e00d      	b.n	8010748 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	68db      	ldr	r3, [r3, #12]
 8010730:	617b      	str	r3, [r7, #20]
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d1f3      	bne.n	8010720 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010738:	4b09      	ldr	r3, [pc, #36]	@ (8010760 <udp_connect+0xd8>)
 801073a:	681a      	ldr	r2, [r3, #0]
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010740:	4a07      	ldr	r2, [pc, #28]	@ (8010760 <udp_connect+0xd8>)
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010746:	2300      	movs	r3, #0
}
 8010748:	4618      	mov	r0, r3
 801074a:	3718      	adds	r7, #24
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}
 8010750:	080166d4 	.word	0x080166d4
 8010754:	080169b4 	.word	0x080169b4
 8010758:	08016728 	.word	0x08016728
 801075c:	080169d0 	.word	0x080169d0
 8010760:	20008a20 	.word	0x20008a20

08010764 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b084      	sub	sp, #16
 8010768:	af00      	add	r7, sp, #0
 801076a:	60f8      	str	r0, [r7, #12]
 801076c:	60b9      	str	r1, [r7, #8]
 801076e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d107      	bne.n	8010786 <udp_recv+0x22>
 8010776:	4b08      	ldr	r3, [pc, #32]	@ (8010798 <udp_recv+0x34>)
 8010778:	f240 428a 	movw	r2, #1162	@ 0x48a
 801077c:	4907      	ldr	r1, [pc, #28]	@ (801079c <udp_recv+0x38>)
 801077e:	4808      	ldr	r0, [pc, #32]	@ (80107a0 <udp_recv+0x3c>)
 8010780:	f002 fd6c 	bl	801325c <iprintf>
 8010784:	e005      	b.n	8010792 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	68ba      	ldr	r2, [r7, #8]
 801078a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	61da      	str	r2, [r3, #28]
}
 8010792:	3710      	adds	r7, #16
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}
 8010798:	080166d4 	.word	0x080166d4
 801079c:	08016a08 	.word	0x08016a08
 80107a0:	08016728 	.word	0x08016728

080107a4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80107aa:	2000      	movs	r0, #0
 80107ac:	f7f8 fe80 	bl	80094b0 <memp_malloc>
 80107b0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d007      	beq.n	80107c8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80107b8:	2220      	movs	r2, #32
 80107ba:	2100      	movs	r1, #0
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f002 fdee 	bl	801339e <memset>
    pcb->ttl = UDP_TTL;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	22ff      	movs	r2, #255	@ 0xff
 80107c6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80107c8:	687b      	ldr	r3, [r7, #4]
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3708      	adds	r7, #8
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}
	...

080107d4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b085      	sub	sp, #20
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d01e      	beq.n	8010822 <udp_netif_ip_addr_changed+0x4e>
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d01a      	beq.n	8010822 <udp_netif_ip_addr_changed+0x4e>
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d017      	beq.n	8010822 <udp_netif_ip_addr_changed+0x4e>
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d013      	beq.n	8010822 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80107fa:	4b0d      	ldr	r3, [pc, #52]	@ (8010830 <udp_netif_ip_addr_changed+0x5c>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	60fb      	str	r3, [r7, #12]
 8010800:	e00c      	b.n	801081c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	429a      	cmp	r2, r3
 801080c:	d103      	bne.n	8010816 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	60fb      	str	r3, [r7, #12]
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d1ef      	bne.n	8010802 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010822:	bf00      	nop
 8010824:	3714      	adds	r7, #20
 8010826:	46bd      	mov	sp, r7
 8010828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082c:	4770      	bx	lr
 801082e:	bf00      	nop
 8010830:	20008a20 	.word	0x20008a20

08010834 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b082      	sub	sp, #8
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801083c:	4915      	ldr	r1, [pc, #84]	@ (8010894 <etharp_free_entry+0x60>)
 801083e:	687a      	ldr	r2, [r7, #4]
 8010840:	4613      	mov	r3, r2
 8010842:	005b      	lsls	r3, r3, #1
 8010844:	4413      	add	r3, r2
 8010846:	00db      	lsls	r3, r3, #3
 8010848:	440b      	add	r3, r1
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d013      	beq.n	8010878 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010850:	4910      	ldr	r1, [pc, #64]	@ (8010894 <etharp_free_entry+0x60>)
 8010852:	687a      	ldr	r2, [r7, #4]
 8010854:	4613      	mov	r3, r2
 8010856:	005b      	lsls	r3, r3, #1
 8010858:	4413      	add	r3, r2
 801085a:	00db      	lsls	r3, r3, #3
 801085c:	440b      	add	r3, r1
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	4618      	mov	r0, r3
 8010862:	f7f9 fd0b 	bl	800a27c <pbuf_free>
    arp_table[i].q = NULL;
 8010866:	490b      	ldr	r1, [pc, #44]	@ (8010894 <etharp_free_entry+0x60>)
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	4613      	mov	r3, r2
 801086c:	005b      	lsls	r3, r3, #1
 801086e:	4413      	add	r3, r2
 8010870:	00db      	lsls	r3, r3, #3
 8010872:	440b      	add	r3, r1
 8010874:	2200      	movs	r2, #0
 8010876:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010878:	4906      	ldr	r1, [pc, #24]	@ (8010894 <etharp_free_entry+0x60>)
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	4613      	mov	r3, r2
 801087e:	005b      	lsls	r3, r3, #1
 8010880:	4413      	add	r3, r2
 8010882:	00db      	lsls	r3, r3, #3
 8010884:	440b      	add	r3, r1
 8010886:	3314      	adds	r3, #20
 8010888:	2200      	movs	r2, #0
 801088a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801088c:	bf00      	nop
 801088e:	3708      	adds	r7, #8
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}
 8010894:	20008a24 	.word	0x20008a24

08010898 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801089e:	2300      	movs	r3, #0
 80108a0:	607b      	str	r3, [r7, #4]
 80108a2:	e096      	b.n	80109d2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80108a4:	494f      	ldr	r1, [pc, #316]	@ (80109e4 <etharp_tmr+0x14c>)
 80108a6:	687a      	ldr	r2, [r7, #4]
 80108a8:	4613      	mov	r3, r2
 80108aa:	005b      	lsls	r3, r3, #1
 80108ac:	4413      	add	r3, r2
 80108ae:	00db      	lsls	r3, r3, #3
 80108b0:	440b      	add	r3, r1
 80108b2:	3314      	adds	r3, #20
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80108b8:	78fb      	ldrb	r3, [r7, #3]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	f000 8086 	beq.w	80109cc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80108c0:	4948      	ldr	r1, [pc, #288]	@ (80109e4 <etharp_tmr+0x14c>)
 80108c2:	687a      	ldr	r2, [r7, #4]
 80108c4:	4613      	mov	r3, r2
 80108c6:	005b      	lsls	r3, r3, #1
 80108c8:	4413      	add	r3, r2
 80108ca:	00db      	lsls	r3, r3, #3
 80108cc:	440b      	add	r3, r1
 80108ce:	3312      	adds	r3, #18
 80108d0:	881b      	ldrh	r3, [r3, #0]
 80108d2:	3301      	adds	r3, #1
 80108d4:	b298      	uxth	r0, r3
 80108d6:	4943      	ldr	r1, [pc, #268]	@ (80109e4 <etharp_tmr+0x14c>)
 80108d8:	687a      	ldr	r2, [r7, #4]
 80108da:	4613      	mov	r3, r2
 80108dc:	005b      	lsls	r3, r3, #1
 80108de:	4413      	add	r3, r2
 80108e0:	00db      	lsls	r3, r3, #3
 80108e2:	440b      	add	r3, r1
 80108e4:	3312      	adds	r3, #18
 80108e6:	4602      	mov	r2, r0
 80108e8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80108ea:	493e      	ldr	r1, [pc, #248]	@ (80109e4 <etharp_tmr+0x14c>)
 80108ec:	687a      	ldr	r2, [r7, #4]
 80108ee:	4613      	mov	r3, r2
 80108f0:	005b      	lsls	r3, r3, #1
 80108f2:	4413      	add	r3, r2
 80108f4:	00db      	lsls	r3, r3, #3
 80108f6:	440b      	add	r3, r1
 80108f8:	3312      	adds	r3, #18
 80108fa:	881b      	ldrh	r3, [r3, #0]
 80108fc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8010900:	d215      	bcs.n	801092e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010902:	4938      	ldr	r1, [pc, #224]	@ (80109e4 <etharp_tmr+0x14c>)
 8010904:	687a      	ldr	r2, [r7, #4]
 8010906:	4613      	mov	r3, r2
 8010908:	005b      	lsls	r3, r3, #1
 801090a:	4413      	add	r3, r2
 801090c:	00db      	lsls	r3, r3, #3
 801090e:	440b      	add	r3, r1
 8010910:	3314      	adds	r3, #20
 8010912:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010914:	2b01      	cmp	r3, #1
 8010916:	d10e      	bne.n	8010936 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010918:	4932      	ldr	r1, [pc, #200]	@ (80109e4 <etharp_tmr+0x14c>)
 801091a:	687a      	ldr	r2, [r7, #4]
 801091c:	4613      	mov	r3, r2
 801091e:	005b      	lsls	r3, r3, #1
 8010920:	4413      	add	r3, r2
 8010922:	00db      	lsls	r3, r3, #3
 8010924:	440b      	add	r3, r1
 8010926:	3312      	adds	r3, #18
 8010928:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801092a:	2b04      	cmp	r3, #4
 801092c:	d903      	bls.n	8010936 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f7ff ff80 	bl	8010834 <etharp_free_entry>
 8010934:	e04a      	b.n	80109cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010936:	492b      	ldr	r1, [pc, #172]	@ (80109e4 <etharp_tmr+0x14c>)
 8010938:	687a      	ldr	r2, [r7, #4]
 801093a:	4613      	mov	r3, r2
 801093c:	005b      	lsls	r3, r3, #1
 801093e:	4413      	add	r3, r2
 8010940:	00db      	lsls	r3, r3, #3
 8010942:	440b      	add	r3, r1
 8010944:	3314      	adds	r3, #20
 8010946:	781b      	ldrb	r3, [r3, #0]
 8010948:	2b03      	cmp	r3, #3
 801094a:	d10a      	bne.n	8010962 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801094c:	4925      	ldr	r1, [pc, #148]	@ (80109e4 <etharp_tmr+0x14c>)
 801094e:	687a      	ldr	r2, [r7, #4]
 8010950:	4613      	mov	r3, r2
 8010952:	005b      	lsls	r3, r3, #1
 8010954:	4413      	add	r3, r2
 8010956:	00db      	lsls	r3, r3, #3
 8010958:	440b      	add	r3, r1
 801095a:	3314      	adds	r3, #20
 801095c:	2204      	movs	r2, #4
 801095e:	701a      	strb	r2, [r3, #0]
 8010960:	e034      	b.n	80109cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010962:	4920      	ldr	r1, [pc, #128]	@ (80109e4 <etharp_tmr+0x14c>)
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	4613      	mov	r3, r2
 8010968:	005b      	lsls	r3, r3, #1
 801096a:	4413      	add	r3, r2
 801096c:	00db      	lsls	r3, r3, #3
 801096e:	440b      	add	r3, r1
 8010970:	3314      	adds	r3, #20
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	2b04      	cmp	r3, #4
 8010976:	d10a      	bne.n	801098e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010978:	491a      	ldr	r1, [pc, #104]	@ (80109e4 <etharp_tmr+0x14c>)
 801097a:	687a      	ldr	r2, [r7, #4]
 801097c:	4613      	mov	r3, r2
 801097e:	005b      	lsls	r3, r3, #1
 8010980:	4413      	add	r3, r2
 8010982:	00db      	lsls	r3, r3, #3
 8010984:	440b      	add	r3, r1
 8010986:	3314      	adds	r3, #20
 8010988:	2202      	movs	r2, #2
 801098a:	701a      	strb	r2, [r3, #0]
 801098c:	e01e      	b.n	80109cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801098e:	4915      	ldr	r1, [pc, #84]	@ (80109e4 <etharp_tmr+0x14c>)
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	4613      	mov	r3, r2
 8010994:	005b      	lsls	r3, r3, #1
 8010996:	4413      	add	r3, r2
 8010998:	00db      	lsls	r3, r3, #3
 801099a:	440b      	add	r3, r1
 801099c:	3314      	adds	r3, #20
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d113      	bne.n	80109cc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80109a4:	490f      	ldr	r1, [pc, #60]	@ (80109e4 <etharp_tmr+0x14c>)
 80109a6:	687a      	ldr	r2, [r7, #4]
 80109a8:	4613      	mov	r3, r2
 80109aa:	005b      	lsls	r3, r3, #1
 80109ac:	4413      	add	r3, r2
 80109ae:	00db      	lsls	r3, r3, #3
 80109b0:	440b      	add	r3, r1
 80109b2:	3308      	adds	r3, #8
 80109b4:	6818      	ldr	r0, [r3, #0]
 80109b6:	687a      	ldr	r2, [r7, #4]
 80109b8:	4613      	mov	r3, r2
 80109ba:	005b      	lsls	r3, r3, #1
 80109bc:	4413      	add	r3, r2
 80109be:	00db      	lsls	r3, r3, #3
 80109c0:	4a08      	ldr	r2, [pc, #32]	@ (80109e4 <etharp_tmr+0x14c>)
 80109c2:	4413      	add	r3, r2
 80109c4:	3304      	adds	r3, #4
 80109c6:	4619      	mov	r1, r3
 80109c8:	f000 fe6e 	bl	80116a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	3301      	adds	r3, #1
 80109d0:	607b      	str	r3, [r7, #4]
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2b09      	cmp	r3, #9
 80109d6:	f77f af65 	ble.w	80108a4 <etharp_tmr+0xc>
      }
    }
  }
}
 80109da:	bf00      	nop
 80109dc:	bf00      	nop
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	20008a24 	.word	0x20008a24

080109e8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b08a      	sub	sp, #40	@ 0x28
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	460b      	mov	r3, r1
 80109f2:	607a      	str	r2, [r7, #4]
 80109f4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80109f6:	230a      	movs	r3, #10
 80109f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80109fa:	230a      	movs	r3, #10
 80109fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80109fe:	230a      	movs	r3, #10
 8010a00:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8010a02:	2300      	movs	r3, #0
 8010a04:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010a06:	230a      	movs	r3, #10
 8010a08:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	83bb      	strh	r3, [r7, #28]
 8010a0e:	2300      	movs	r3, #0
 8010a10:	837b      	strh	r3, [r7, #26]
 8010a12:	2300      	movs	r3, #0
 8010a14:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010a16:	2300      	movs	r3, #0
 8010a18:	843b      	strh	r3, [r7, #32]
 8010a1a:	e0ae      	b.n	8010b7a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010a1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a20:	49a6      	ldr	r1, [pc, #664]	@ (8010cbc <etharp_find_entry+0x2d4>)
 8010a22:	4613      	mov	r3, r2
 8010a24:	005b      	lsls	r3, r3, #1
 8010a26:	4413      	add	r3, r2
 8010a28:	00db      	lsls	r3, r3, #3
 8010a2a:	440b      	add	r3, r1
 8010a2c:	3314      	adds	r3, #20
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010a32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010a36:	2b0a      	cmp	r3, #10
 8010a38:	d105      	bne.n	8010a46 <etharp_find_entry+0x5e>
 8010a3a:	7dfb      	ldrb	r3, [r7, #23]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d102      	bne.n	8010a46 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010a40:	8c3b      	ldrh	r3, [r7, #32]
 8010a42:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010a44:	e095      	b.n	8010b72 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010a46:	7dfb      	ldrb	r3, [r7, #23]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	f000 8092 	beq.w	8010b72 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010a4e:	7dfb      	ldrb	r3, [r7, #23]
 8010a50:	2b01      	cmp	r3, #1
 8010a52:	d009      	beq.n	8010a68 <etharp_find_entry+0x80>
 8010a54:	7dfb      	ldrb	r3, [r7, #23]
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	d806      	bhi.n	8010a68 <etharp_find_entry+0x80>
 8010a5a:	4b99      	ldr	r3, [pc, #612]	@ (8010cc0 <etharp_find_entry+0x2d8>)
 8010a5c:	f240 1223 	movw	r2, #291	@ 0x123
 8010a60:	4998      	ldr	r1, [pc, #608]	@ (8010cc4 <etharp_find_entry+0x2dc>)
 8010a62:	4899      	ldr	r0, [pc, #612]	@ (8010cc8 <etharp_find_entry+0x2e0>)
 8010a64:	f002 fbfa 	bl	801325c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d020      	beq.n	8010ab0 <etharp_find_entry+0xc8>
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	6819      	ldr	r1, [r3, #0]
 8010a72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a76:	4891      	ldr	r0, [pc, #580]	@ (8010cbc <etharp_find_entry+0x2d4>)
 8010a78:	4613      	mov	r3, r2
 8010a7a:	005b      	lsls	r3, r3, #1
 8010a7c:	4413      	add	r3, r2
 8010a7e:	00db      	lsls	r3, r3, #3
 8010a80:	4403      	add	r3, r0
 8010a82:	3304      	adds	r3, #4
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	4299      	cmp	r1, r3
 8010a88:	d112      	bne.n	8010ab0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d00c      	beq.n	8010aaa <etharp_find_entry+0xc2>
 8010a90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a94:	4989      	ldr	r1, [pc, #548]	@ (8010cbc <etharp_find_entry+0x2d4>)
 8010a96:	4613      	mov	r3, r2
 8010a98:	005b      	lsls	r3, r3, #1
 8010a9a:	4413      	add	r3, r2
 8010a9c:	00db      	lsls	r3, r3, #3
 8010a9e:	440b      	add	r3, r1
 8010aa0:	3308      	adds	r3, #8
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	687a      	ldr	r2, [r7, #4]
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d102      	bne.n	8010ab0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010aaa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010aae:	e100      	b.n	8010cb2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010ab0:	7dfb      	ldrb	r3, [r7, #23]
 8010ab2:	2b01      	cmp	r3, #1
 8010ab4:	d140      	bne.n	8010b38 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010ab6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010aba:	4980      	ldr	r1, [pc, #512]	@ (8010cbc <etharp_find_entry+0x2d4>)
 8010abc:	4613      	mov	r3, r2
 8010abe:	005b      	lsls	r3, r3, #1
 8010ac0:	4413      	add	r3, r2
 8010ac2:	00db      	lsls	r3, r3, #3
 8010ac4:	440b      	add	r3, r1
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d01a      	beq.n	8010b02 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010acc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ad0:	497a      	ldr	r1, [pc, #488]	@ (8010cbc <etharp_find_entry+0x2d4>)
 8010ad2:	4613      	mov	r3, r2
 8010ad4:	005b      	lsls	r3, r3, #1
 8010ad6:	4413      	add	r3, r2
 8010ad8:	00db      	lsls	r3, r3, #3
 8010ada:	440b      	add	r3, r1
 8010adc:	3312      	adds	r3, #18
 8010ade:	881b      	ldrh	r3, [r3, #0]
 8010ae0:	8bba      	ldrh	r2, [r7, #28]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d845      	bhi.n	8010b72 <etharp_find_entry+0x18a>
            old_queue = i;
 8010ae6:	8c3b      	ldrh	r3, [r7, #32]
 8010ae8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010aea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010aee:	4973      	ldr	r1, [pc, #460]	@ (8010cbc <etharp_find_entry+0x2d4>)
 8010af0:	4613      	mov	r3, r2
 8010af2:	005b      	lsls	r3, r3, #1
 8010af4:	4413      	add	r3, r2
 8010af6:	00db      	lsls	r3, r3, #3
 8010af8:	440b      	add	r3, r1
 8010afa:	3312      	adds	r3, #18
 8010afc:	881b      	ldrh	r3, [r3, #0]
 8010afe:	83bb      	strh	r3, [r7, #28]
 8010b00:	e037      	b.n	8010b72 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010b02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b06:	496d      	ldr	r1, [pc, #436]	@ (8010cbc <etharp_find_entry+0x2d4>)
 8010b08:	4613      	mov	r3, r2
 8010b0a:	005b      	lsls	r3, r3, #1
 8010b0c:	4413      	add	r3, r2
 8010b0e:	00db      	lsls	r3, r3, #3
 8010b10:	440b      	add	r3, r1
 8010b12:	3312      	adds	r3, #18
 8010b14:	881b      	ldrh	r3, [r3, #0]
 8010b16:	8b7a      	ldrh	r2, [r7, #26]
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d82a      	bhi.n	8010b72 <etharp_find_entry+0x18a>
            old_pending = i;
 8010b1c:	8c3b      	ldrh	r3, [r7, #32]
 8010b1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8010b20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b24:	4965      	ldr	r1, [pc, #404]	@ (8010cbc <etharp_find_entry+0x2d4>)
 8010b26:	4613      	mov	r3, r2
 8010b28:	005b      	lsls	r3, r3, #1
 8010b2a:	4413      	add	r3, r2
 8010b2c:	00db      	lsls	r3, r3, #3
 8010b2e:	440b      	add	r3, r1
 8010b30:	3312      	adds	r3, #18
 8010b32:	881b      	ldrh	r3, [r3, #0]
 8010b34:	837b      	strh	r3, [r7, #26]
 8010b36:	e01c      	b.n	8010b72 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010b38:	7dfb      	ldrb	r3, [r7, #23]
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d919      	bls.n	8010b72 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010b3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b42:	495e      	ldr	r1, [pc, #376]	@ (8010cbc <etharp_find_entry+0x2d4>)
 8010b44:	4613      	mov	r3, r2
 8010b46:	005b      	lsls	r3, r3, #1
 8010b48:	4413      	add	r3, r2
 8010b4a:	00db      	lsls	r3, r3, #3
 8010b4c:	440b      	add	r3, r1
 8010b4e:	3312      	adds	r3, #18
 8010b50:	881b      	ldrh	r3, [r3, #0]
 8010b52:	8b3a      	ldrh	r2, [r7, #24]
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d80c      	bhi.n	8010b72 <etharp_find_entry+0x18a>
            old_stable = i;
 8010b58:	8c3b      	ldrh	r3, [r7, #32]
 8010b5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8010b5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b60:	4956      	ldr	r1, [pc, #344]	@ (8010cbc <etharp_find_entry+0x2d4>)
 8010b62:	4613      	mov	r3, r2
 8010b64:	005b      	lsls	r3, r3, #1
 8010b66:	4413      	add	r3, r2
 8010b68:	00db      	lsls	r3, r3, #3
 8010b6a:	440b      	add	r3, r1
 8010b6c:	3312      	adds	r3, #18
 8010b6e:	881b      	ldrh	r3, [r3, #0]
 8010b70:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b72:	8c3b      	ldrh	r3, [r7, #32]
 8010b74:	3301      	adds	r3, #1
 8010b76:	b29b      	uxth	r3, r3
 8010b78:	843b      	strh	r3, [r7, #32]
 8010b7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010b7e:	2b09      	cmp	r3, #9
 8010b80:	f77f af4c 	ble.w	8010a1c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010b84:	7afb      	ldrb	r3, [r7, #11]
 8010b86:	f003 0302 	and.w	r3, r3, #2
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d108      	bne.n	8010ba0 <etharp_find_entry+0x1b8>
 8010b8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010b92:	2b0a      	cmp	r3, #10
 8010b94:	d107      	bne.n	8010ba6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010b96:	7afb      	ldrb	r3, [r7, #11]
 8010b98:	f003 0301 	and.w	r3, r3, #1
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d102      	bne.n	8010ba6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ba4:	e085      	b.n	8010cb2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010ba6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010baa:	2b09      	cmp	r3, #9
 8010bac:	dc02      	bgt.n	8010bb4 <etharp_find_entry+0x1cc>
    i = empty;
 8010bae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010bb0:	843b      	strh	r3, [r7, #32]
 8010bb2:	e039      	b.n	8010c28 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010bb4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8010bb8:	2b09      	cmp	r3, #9
 8010bba:	dc14      	bgt.n	8010be6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010bbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010bbe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010bc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010bc4:	493d      	ldr	r1, [pc, #244]	@ (8010cbc <etharp_find_entry+0x2d4>)
 8010bc6:	4613      	mov	r3, r2
 8010bc8:	005b      	lsls	r3, r3, #1
 8010bca:	4413      	add	r3, r2
 8010bcc:	00db      	lsls	r3, r3, #3
 8010bce:	440b      	add	r3, r1
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d018      	beq.n	8010c08 <etharp_find_entry+0x220>
 8010bd6:	4b3a      	ldr	r3, [pc, #232]	@ (8010cc0 <etharp_find_entry+0x2d8>)
 8010bd8:	f240 126d 	movw	r2, #365	@ 0x16d
 8010bdc:	493b      	ldr	r1, [pc, #236]	@ (8010ccc <etharp_find_entry+0x2e4>)
 8010bde:	483a      	ldr	r0, [pc, #232]	@ (8010cc8 <etharp_find_entry+0x2e0>)
 8010be0:	f002 fb3c 	bl	801325c <iprintf>
 8010be4:	e010      	b.n	8010c08 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010be6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010bea:	2b09      	cmp	r3, #9
 8010bec:	dc02      	bgt.n	8010bf4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010bee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010bf0:	843b      	strh	r3, [r7, #32]
 8010bf2:	e009      	b.n	8010c08 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010bf4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010bf8:	2b09      	cmp	r3, #9
 8010bfa:	dc02      	bgt.n	8010c02 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010bfc:	8bfb      	ldrh	r3, [r7, #30]
 8010bfe:	843b      	strh	r3, [r7, #32]
 8010c00:	e002      	b.n	8010c08 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010c02:	f04f 33ff 	mov.w	r3, #4294967295
 8010c06:	e054      	b.n	8010cb2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010c08:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010c0c:	2b09      	cmp	r3, #9
 8010c0e:	dd06      	ble.n	8010c1e <etharp_find_entry+0x236>
 8010c10:	4b2b      	ldr	r3, [pc, #172]	@ (8010cc0 <etharp_find_entry+0x2d8>)
 8010c12:	f240 127f 	movw	r2, #383	@ 0x17f
 8010c16:	492e      	ldr	r1, [pc, #184]	@ (8010cd0 <etharp_find_entry+0x2e8>)
 8010c18:	482b      	ldr	r0, [pc, #172]	@ (8010cc8 <etharp_find_entry+0x2e0>)
 8010c1a:	f002 fb1f 	bl	801325c <iprintf>
    etharp_free_entry(i);
 8010c1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7ff fe06 	bl	8010834 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010c28:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010c2c:	2b09      	cmp	r3, #9
 8010c2e:	dd06      	ble.n	8010c3e <etharp_find_entry+0x256>
 8010c30:	4b23      	ldr	r3, [pc, #140]	@ (8010cc0 <etharp_find_entry+0x2d8>)
 8010c32:	f240 1283 	movw	r2, #387	@ 0x183
 8010c36:	4926      	ldr	r1, [pc, #152]	@ (8010cd0 <etharp_find_entry+0x2e8>)
 8010c38:	4823      	ldr	r0, [pc, #140]	@ (8010cc8 <etharp_find_entry+0x2e0>)
 8010c3a:	f002 fb0f 	bl	801325c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010c3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c42:	491e      	ldr	r1, [pc, #120]	@ (8010cbc <etharp_find_entry+0x2d4>)
 8010c44:	4613      	mov	r3, r2
 8010c46:	005b      	lsls	r3, r3, #1
 8010c48:	4413      	add	r3, r2
 8010c4a:	00db      	lsls	r3, r3, #3
 8010c4c:	440b      	add	r3, r1
 8010c4e:	3314      	adds	r3, #20
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d006      	beq.n	8010c64 <etharp_find_entry+0x27c>
 8010c56:	4b1a      	ldr	r3, [pc, #104]	@ (8010cc0 <etharp_find_entry+0x2d8>)
 8010c58:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8010c5c:	491d      	ldr	r1, [pc, #116]	@ (8010cd4 <etharp_find_entry+0x2ec>)
 8010c5e:	481a      	ldr	r0, [pc, #104]	@ (8010cc8 <etharp_find_entry+0x2e0>)
 8010c60:	f002 fafc 	bl	801325c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d00b      	beq.n	8010c82 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010c6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	6819      	ldr	r1, [r3, #0]
 8010c72:	4812      	ldr	r0, [pc, #72]	@ (8010cbc <etharp_find_entry+0x2d4>)
 8010c74:	4613      	mov	r3, r2
 8010c76:	005b      	lsls	r3, r3, #1
 8010c78:	4413      	add	r3, r2
 8010c7a:	00db      	lsls	r3, r3, #3
 8010c7c:	4403      	add	r3, r0
 8010c7e:	3304      	adds	r3, #4
 8010c80:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010c82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c86:	490d      	ldr	r1, [pc, #52]	@ (8010cbc <etharp_find_entry+0x2d4>)
 8010c88:	4613      	mov	r3, r2
 8010c8a:	005b      	lsls	r3, r3, #1
 8010c8c:	4413      	add	r3, r2
 8010c8e:	00db      	lsls	r3, r3, #3
 8010c90:	440b      	add	r3, r1
 8010c92:	3312      	adds	r3, #18
 8010c94:	2200      	movs	r2, #0
 8010c96:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010c98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c9c:	4907      	ldr	r1, [pc, #28]	@ (8010cbc <etharp_find_entry+0x2d4>)
 8010c9e:	4613      	mov	r3, r2
 8010ca0:	005b      	lsls	r3, r3, #1
 8010ca2:	4413      	add	r3, r2
 8010ca4:	00db      	lsls	r3, r3, #3
 8010ca6:	440b      	add	r3, r1
 8010ca8:	3308      	adds	r3, #8
 8010caa:	687a      	ldr	r2, [r7, #4]
 8010cac:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010cae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3728      	adds	r7, #40	@ 0x28
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	20008a24 	.word	0x20008a24
 8010cc0:	08016a38 	.word	0x08016a38
 8010cc4:	08016a70 	.word	0x08016a70
 8010cc8:	08016ab0 	.word	0x08016ab0
 8010ccc:	08016ad8 	.word	0x08016ad8
 8010cd0:	08016af0 	.word	0x08016af0
 8010cd4:	08016b04 	.word	0x08016b04

08010cd8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b088      	sub	sp, #32
 8010cdc:	af02      	add	r7, sp, #8
 8010cde:	60f8      	str	r0, [r7, #12]
 8010ce0:	60b9      	str	r1, [r7, #8]
 8010ce2:	607a      	str	r2, [r7, #4]
 8010ce4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010cec:	2b06      	cmp	r3, #6
 8010cee:	d006      	beq.n	8010cfe <etharp_update_arp_entry+0x26>
 8010cf0:	4b48      	ldr	r3, [pc, #288]	@ (8010e14 <etharp_update_arp_entry+0x13c>)
 8010cf2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8010cf6:	4948      	ldr	r1, [pc, #288]	@ (8010e18 <etharp_update_arp_entry+0x140>)
 8010cf8:	4848      	ldr	r0, [pc, #288]	@ (8010e1c <etharp_update_arp_entry+0x144>)
 8010cfa:	f002 faaf 	bl	801325c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d012      	beq.n	8010d2a <etharp_update_arp_entry+0x52>
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d00e      	beq.n	8010d2a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	68f9      	ldr	r1, [r7, #12]
 8010d12:	4618      	mov	r0, r3
 8010d14:	f001 f8fe 	bl	8011f14 <ip4_addr_isbroadcast_u32>
 8010d18:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d105      	bne.n	8010d2a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d26:	2be0      	cmp	r3, #224	@ 0xe0
 8010d28:	d102      	bne.n	8010d30 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010d2a:	f06f 030f 	mvn.w	r3, #15
 8010d2e:	e06c      	b.n	8010e0a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010d30:	78fb      	ldrb	r3, [r7, #3]
 8010d32:	68fa      	ldr	r2, [r7, #12]
 8010d34:	4619      	mov	r1, r3
 8010d36:	68b8      	ldr	r0, [r7, #8]
 8010d38:	f7ff fe56 	bl	80109e8 <etharp_find_entry>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010d40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	da02      	bge.n	8010d4e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010d48:	8afb      	ldrh	r3, [r7, #22]
 8010d4a:	b25b      	sxtb	r3, r3
 8010d4c:	e05d      	b.n	8010e0a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010d4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d52:	4933      	ldr	r1, [pc, #204]	@ (8010e20 <etharp_update_arp_entry+0x148>)
 8010d54:	4613      	mov	r3, r2
 8010d56:	005b      	lsls	r3, r3, #1
 8010d58:	4413      	add	r3, r2
 8010d5a:	00db      	lsls	r3, r3, #3
 8010d5c:	440b      	add	r3, r1
 8010d5e:	3314      	adds	r3, #20
 8010d60:	2202      	movs	r2, #2
 8010d62:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010d64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d68:	492d      	ldr	r1, [pc, #180]	@ (8010e20 <etharp_update_arp_entry+0x148>)
 8010d6a:	4613      	mov	r3, r2
 8010d6c:	005b      	lsls	r3, r3, #1
 8010d6e:	4413      	add	r3, r2
 8010d70:	00db      	lsls	r3, r3, #3
 8010d72:	440b      	add	r3, r1
 8010d74:	3308      	adds	r3, #8
 8010d76:	68fa      	ldr	r2, [r7, #12]
 8010d78:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010d7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d7e:	4613      	mov	r3, r2
 8010d80:	005b      	lsls	r3, r3, #1
 8010d82:	4413      	add	r3, r2
 8010d84:	00db      	lsls	r3, r3, #3
 8010d86:	3308      	adds	r3, #8
 8010d88:	4a25      	ldr	r2, [pc, #148]	@ (8010e20 <etharp_update_arp_entry+0x148>)
 8010d8a:	4413      	add	r3, r2
 8010d8c:	3304      	adds	r3, #4
 8010d8e:	2206      	movs	r2, #6
 8010d90:	6879      	ldr	r1, [r7, #4]
 8010d92:	4618      	mov	r0, r3
 8010d94:	f002 fba1 	bl	80134da <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010d98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d9c:	4920      	ldr	r1, [pc, #128]	@ (8010e20 <etharp_update_arp_entry+0x148>)
 8010d9e:	4613      	mov	r3, r2
 8010da0:	005b      	lsls	r3, r3, #1
 8010da2:	4413      	add	r3, r2
 8010da4:	00db      	lsls	r3, r3, #3
 8010da6:	440b      	add	r3, r1
 8010da8:	3312      	adds	r3, #18
 8010daa:	2200      	movs	r2, #0
 8010dac:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010dae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010db2:	491b      	ldr	r1, [pc, #108]	@ (8010e20 <etharp_update_arp_entry+0x148>)
 8010db4:	4613      	mov	r3, r2
 8010db6:	005b      	lsls	r3, r3, #1
 8010db8:	4413      	add	r3, r2
 8010dba:	00db      	lsls	r3, r3, #3
 8010dbc:	440b      	add	r3, r1
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d021      	beq.n	8010e08 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010dc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010dc8:	4915      	ldr	r1, [pc, #84]	@ (8010e20 <etharp_update_arp_entry+0x148>)
 8010dca:	4613      	mov	r3, r2
 8010dcc:	005b      	lsls	r3, r3, #1
 8010dce:	4413      	add	r3, r2
 8010dd0:	00db      	lsls	r3, r3, #3
 8010dd2:	440b      	add	r3, r1
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010dd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010ddc:	4910      	ldr	r1, [pc, #64]	@ (8010e20 <etharp_update_arp_entry+0x148>)
 8010dde:	4613      	mov	r3, r2
 8010de0:	005b      	lsls	r3, r3, #1
 8010de2:	4413      	add	r3, r2
 8010de4:	00db      	lsls	r3, r3, #3
 8010de6:	440b      	add	r3, r1
 8010de8:	2200      	movs	r2, #0
 8010dea:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8010df2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010df6:	9300      	str	r3, [sp, #0]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6939      	ldr	r1, [r7, #16]
 8010dfc:	68f8      	ldr	r0, [r7, #12]
 8010dfe:	f001 ff97 	bl	8012d30 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010e02:	6938      	ldr	r0, [r7, #16]
 8010e04:	f7f9 fa3a 	bl	800a27c <pbuf_free>
  }
  return ERR_OK;
 8010e08:	2300      	movs	r3, #0
}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	3718      	adds	r7, #24
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}
 8010e12:	bf00      	nop
 8010e14:	08016a38 	.word	0x08016a38
 8010e18:	08016b30 	.word	0x08016b30
 8010e1c:	08016ab0 	.word	0x08016ab0
 8010e20:	20008a24 	.word	0x20008a24

08010e24 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b084      	sub	sp, #16
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	60fb      	str	r3, [r7, #12]
 8010e30:	e01e      	b.n	8010e70 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010e32:	4913      	ldr	r1, [pc, #76]	@ (8010e80 <etharp_cleanup_netif+0x5c>)
 8010e34:	68fa      	ldr	r2, [r7, #12]
 8010e36:	4613      	mov	r3, r2
 8010e38:	005b      	lsls	r3, r3, #1
 8010e3a:	4413      	add	r3, r2
 8010e3c:	00db      	lsls	r3, r3, #3
 8010e3e:	440b      	add	r3, r1
 8010e40:	3314      	adds	r3, #20
 8010e42:	781b      	ldrb	r3, [r3, #0]
 8010e44:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010e46:	7afb      	ldrb	r3, [r7, #11]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d00e      	beq.n	8010e6a <etharp_cleanup_netif+0x46>
 8010e4c:	490c      	ldr	r1, [pc, #48]	@ (8010e80 <etharp_cleanup_netif+0x5c>)
 8010e4e:	68fa      	ldr	r2, [r7, #12]
 8010e50:	4613      	mov	r3, r2
 8010e52:	005b      	lsls	r3, r3, #1
 8010e54:	4413      	add	r3, r2
 8010e56:	00db      	lsls	r3, r3, #3
 8010e58:	440b      	add	r3, r1
 8010e5a:	3308      	adds	r3, #8
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	687a      	ldr	r2, [r7, #4]
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d102      	bne.n	8010e6a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010e64:	68f8      	ldr	r0, [r7, #12]
 8010e66:	f7ff fce5 	bl	8010834 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	60fb      	str	r3, [r7, #12]
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	2b09      	cmp	r3, #9
 8010e74:	dddd      	ble.n	8010e32 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010e76:	bf00      	nop
 8010e78:	bf00      	nop
 8010e7a:	3710      	adds	r7, #16
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}
 8010e80:	20008a24 	.word	0x20008a24

08010e84 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010e84:	b5b0      	push	{r4, r5, r7, lr}
 8010e86:	b08a      	sub	sp, #40	@ 0x28
 8010e88:	af04      	add	r7, sp, #16
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d107      	bne.n	8010ea4 <etharp_input+0x20>
 8010e94:	4b3d      	ldr	r3, [pc, #244]	@ (8010f8c <etharp_input+0x108>)
 8010e96:	f240 228a 	movw	r2, #650	@ 0x28a
 8010e9a:	493d      	ldr	r1, [pc, #244]	@ (8010f90 <etharp_input+0x10c>)
 8010e9c:	483d      	ldr	r0, [pc, #244]	@ (8010f94 <etharp_input+0x110>)
 8010e9e:	f002 f9dd 	bl	801325c <iprintf>
 8010ea2:	e06f      	b.n	8010f84 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	881b      	ldrh	r3, [r3, #0]
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010eb4:	d10c      	bne.n	8010ed0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010eba:	2b06      	cmp	r3, #6
 8010ebc:	d108      	bne.n	8010ed0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010ec2:	2b04      	cmp	r3, #4
 8010ec4:	d104      	bne.n	8010ed0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	885b      	ldrh	r3, [r3, #2]
 8010eca:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010ecc:	2b08      	cmp	r3, #8
 8010ece:	d003      	beq.n	8010ed8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f7f9 f9d3 	bl	800a27c <pbuf_free>
    return;
 8010ed6:	e055      	b.n	8010f84 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	330e      	adds	r3, #14
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	3318      	adds	r3, #24
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	3304      	adds	r3, #4
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d102      	bne.n	8010ef8 <etharp_input+0x74>
    for_us = 0;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	75fb      	strb	r3, [r7, #23]
 8010ef6:	e009      	b.n	8010f0c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010ef8:	68ba      	ldr	r2, [r7, #8]
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	3304      	adds	r3, #4
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	429a      	cmp	r2, r3
 8010f02:	bf0c      	ite	eq
 8010f04:	2301      	moveq	r3, #1
 8010f06:	2300      	movne	r3, #0
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010f0c:	693b      	ldr	r3, [r7, #16]
 8010f0e:	f103 0208 	add.w	r2, r3, #8
 8010f12:	7dfb      	ldrb	r3, [r7, #23]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d001      	beq.n	8010f1c <etharp_input+0x98>
 8010f18:	2301      	movs	r3, #1
 8010f1a:	e000      	b.n	8010f1e <etharp_input+0x9a>
 8010f1c:	2302      	movs	r3, #2
 8010f1e:	f107 010c 	add.w	r1, r7, #12
 8010f22:	6838      	ldr	r0, [r7, #0]
 8010f24:	f7ff fed8 	bl	8010cd8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	88db      	ldrh	r3, [r3, #6]
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f32:	d003      	beq.n	8010f3c <etharp_input+0xb8>
 8010f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f38:	d01e      	beq.n	8010f78 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010f3a:	e020      	b.n	8010f7e <etharp_input+0xfa>
      if (for_us) {
 8010f3c:	7dfb      	ldrb	r3, [r7, #23]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d01c      	beq.n	8010f7c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010f58:	693a      	ldr	r2, [r7, #16]
 8010f5a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010f5c:	2102      	movs	r1, #2
 8010f5e:	9103      	str	r1, [sp, #12]
 8010f60:	f107 010c 	add.w	r1, r7, #12
 8010f64:	9102      	str	r1, [sp, #8]
 8010f66:	9201      	str	r2, [sp, #4]
 8010f68:	9300      	str	r3, [sp, #0]
 8010f6a:	462b      	mov	r3, r5
 8010f6c:	4622      	mov	r2, r4
 8010f6e:	4601      	mov	r1, r0
 8010f70:	6838      	ldr	r0, [r7, #0]
 8010f72:	f000 faeb 	bl	801154c <etharp_raw>
      break;
 8010f76:	e001      	b.n	8010f7c <etharp_input+0xf8>
      break;
 8010f78:	bf00      	nop
 8010f7a:	e000      	b.n	8010f7e <etharp_input+0xfa>
      break;
 8010f7c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f7f9 f97c 	bl	800a27c <pbuf_free>
}
 8010f84:	3718      	adds	r7, #24
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bdb0      	pop	{r4, r5, r7, pc}
 8010f8a:	bf00      	nop
 8010f8c:	08016a38 	.word	0x08016a38
 8010f90:	08016b88 	.word	0x08016b88
 8010f94:	08016ab0 	.word	0x08016ab0

08010f98 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b086      	sub	sp, #24
 8010f9c:	af02      	add	r7, sp, #8
 8010f9e:	60f8      	str	r0, [r7, #12]
 8010fa0:	60b9      	str	r1, [r7, #8]
 8010fa2:	4613      	mov	r3, r2
 8010fa4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010fa6:	79fa      	ldrb	r2, [r7, #7]
 8010fa8:	4944      	ldr	r1, [pc, #272]	@ (80110bc <etharp_output_to_arp_index+0x124>)
 8010faa:	4613      	mov	r3, r2
 8010fac:	005b      	lsls	r3, r3, #1
 8010fae:	4413      	add	r3, r2
 8010fb0:	00db      	lsls	r3, r3, #3
 8010fb2:	440b      	add	r3, r1
 8010fb4:	3314      	adds	r3, #20
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	2b01      	cmp	r3, #1
 8010fba:	d806      	bhi.n	8010fca <etharp_output_to_arp_index+0x32>
 8010fbc:	4b40      	ldr	r3, [pc, #256]	@ (80110c0 <etharp_output_to_arp_index+0x128>)
 8010fbe:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8010fc2:	4940      	ldr	r1, [pc, #256]	@ (80110c4 <etharp_output_to_arp_index+0x12c>)
 8010fc4:	4840      	ldr	r0, [pc, #256]	@ (80110c8 <etharp_output_to_arp_index+0x130>)
 8010fc6:	f002 f949 	bl	801325c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010fca:	79fa      	ldrb	r2, [r7, #7]
 8010fcc:	493b      	ldr	r1, [pc, #236]	@ (80110bc <etharp_output_to_arp_index+0x124>)
 8010fce:	4613      	mov	r3, r2
 8010fd0:	005b      	lsls	r3, r3, #1
 8010fd2:	4413      	add	r3, r2
 8010fd4:	00db      	lsls	r3, r3, #3
 8010fd6:	440b      	add	r3, r1
 8010fd8:	3314      	adds	r3, #20
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	2b02      	cmp	r3, #2
 8010fde:	d153      	bne.n	8011088 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010fe0:	79fa      	ldrb	r2, [r7, #7]
 8010fe2:	4936      	ldr	r1, [pc, #216]	@ (80110bc <etharp_output_to_arp_index+0x124>)
 8010fe4:	4613      	mov	r3, r2
 8010fe6:	005b      	lsls	r3, r3, #1
 8010fe8:	4413      	add	r3, r2
 8010fea:	00db      	lsls	r3, r3, #3
 8010fec:	440b      	add	r3, r1
 8010fee:	3312      	adds	r3, #18
 8010ff0:	881b      	ldrh	r3, [r3, #0]
 8010ff2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8010ff6:	d919      	bls.n	801102c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010ff8:	79fa      	ldrb	r2, [r7, #7]
 8010ffa:	4613      	mov	r3, r2
 8010ffc:	005b      	lsls	r3, r3, #1
 8010ffe:	4413      	add	r3, r2
 8011000:	00db      	lsls	r3, r3, #3
 8011002:	4a2e      	ldr	r2, [pc, #184]	@ (80110bc <etharp_output_to_arp_index+0x124>)
 8011004:	4413      	add	r3, r2
 8011006:	3304      	adds	r3, #4
 8011008:	4619      	mov	r1, r3
 801100a:	68f8      	ldr	r0, [r7, #12]
 801100c:	f000 fb4c 	bl	80116a8 <etharp_request>
 8011010:	4603      	mov	r3, r0
 8011012:	2b00      	cmp	r3, #0
 8011014:	d138      	bne.n	8011088 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011016:	79fa      	ldrb	r2, [r7, #7]
 8011018:	4928      	ldr	r1, [pc, #160]	@ (80110bc <etharp_output_to_arp_index+0x124>)
 801101a:	4613      	mov	r3, r2
 801101c:	005b      	lsls	r3, r3, #1
 801101e:	4413      	add	r3, r2
 8011020:	00db      	lsls	r3, r3, #3
 8011022:	440b      	add	r3, r1
 8011024:	3314      	adds	r3, #20
 8011026:	2203      	movs	r2, #3
 8011028:	701a      	strb	r2, [r3, #0]
 801102a:	e02d      	b.n	8011088 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801102c:	79fa      	ldrb	r2, [r7, #7]
 801102e:	4923      	ldr	r1, [pc, #140]	@ (80110bc <etharp_output_to_arp_index+0x124>)
 8011030:	4613      	mov	r3, r2
 8011032:	005b      	lsls	r3, r3, #1
 8011034:	4413      	add	r3, r2
 8011036:	00db      	lsls	r3, r3, #3
 8011038:	440b      	add	r3, r1
 801103a:	3312      	adds	r3, #18
 801103c:	881b      	ldrh	r3, [r3, #0]
 801103e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8011042:	d321      	bcc.n	8011088 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011044:	79fa      	ldrb	r2, [r7, #7]
 8011046:	4613      	mov	r3, r2
 8011048:	005b      	lsls	r3, r3, #1
 801104a:	4413      	add	r3, r2
 801104c:	00db      	lsls	r3, r3, #3
 801104e:	4a1b      	ldr	r2, [pc, #108]	@ (80110bc <etharp_output_to_arp_index+0x124>)
 8011050:	4413      	add	r3, r2
 8011052:	1d19      	adds	r1, r3, #4
 8011054:	79fa      	ldrb	r2, [r7, #7]
 8011056:	4613      	mov	r3, r2
 8011058:	005b      	lsls	r3, r3, #1
 801105a:	4413      	add	r3, r2
 801105c:	00db      	lsls	r3, r3, #3
 801105e:	3308      	adds	r3, #8
 8011060:	4a16      	ldr	r2, [pc, #88]	@ (80110bc <etharp_output_to_arp_index+0x124>)
 8011062:	4413      	add	r3, r2
 8011064:	3304      	adds	r3, #4
 8011066:	461a      	mov	r2, r3
 8011068:	68f8      	ldr	r0, [r7, #12]
 801106a:	f000 fafb 	bl	8011664 <etharp_request_dst>
 801106e:	4603      	mov	r3, r0
 8011070:	2b00      	cmp	r3, #0
 8011072:	d109      	bne.n	8011088 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011074:	79fa      	ldrb	r2, [r7, #7]
 8011076:	4911      	ldr	r1, [pc, #68]	@ (80110bc <etharp_output_to_arp_index+0x124>)
 8011078:	4613      	mov	r3, r2
 801107a:	005b      	lsls	r3, r3, #1
 801107c:	4413      	add	r3, r2
 801107e:	00db      	lsls	r3, r3, #3
 8011080:	440b      	add	r3, r1
 8011082:	3314      	adds	r3, #20
 8011084:	2203      	movs	r2, #3
 8011086:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801108e:	79fa      	ldrb	r2, [r7, #7]
 8011090:	4613      	mov	r3, r2
 8011092:	005b      	lsls	r3, r3, #1
 8011094:	4413      	add	r3, r2
 8011096:	00db      	lsls	r3, r3, #3
 8011098:	3308      	adds	r3, #8
 801109a:	4a08      	ldr	r2, [pc, #32]	@ (80110bc <etharp_output_to_arp_index+0x124>)
 801109c:	4413      	add	r3, r2
 801109e:	3304      	adds	r3, #4
 80110a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80110a4:	9200      	str	r2, [sp, #0]
 80110a6:	460a      	mov	r2, r1
 80110a8:	68b9      	ldr	r1, [r7, #8]
 80110aa:	68f8      	ldr	r0, [r7, #12]
 80110ac:	f001 fe40 	bl	8012d30 <ethernet_output>
 80110b0:	4603      	mov	r3, r0
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3710      	adds	r7, #16
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}
 80110ba:	bf00      	nop
 80110bc:	20008a24 	.word	0x20008a24
 80110c0:	08016a38 	.word	0x08016a38
 80110c4:	08016ba8 	.word	0x08016ba8
 80110c8:	08016ab0 	.word	0x08016ab0

080110cc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b08a      	sub	sp, #40	@ 0x28
 80110d0:	af02      	add	r7, sp, #8
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	60b9      	str	r1, [r7, #8]
 80110d6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d106      	bne.n	80110f0 <etharp_output+0x24>
 80110e2:	4b73      	ldr	r3, [pc, #460]	@ (80112b0 <etharp_output+0x1e4>)
 80110e4:	f240 321e 	movw	r2, #798	@ 0x31e
 80110e8:	4972      	ldr	r1, [pc, #456]	@ (80112b4 <etharp_output+0x1e8>)
 80110ea:	4873      	ldr	r0, [pc, #460]	@ (80112b8 <etharp_output+0x1ec>)
 80110ec:	f002 f8b6 	bl	801325c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d106      	bne.n	8011104 <etharp_output+0x38>
 80110f6:	4b6e      	ldr	r3, [pc, #440]	@ (80112b0 <etharp_output+0x1e4>)
 80110f8:	f240 321f 	movw	r2, #799	@ 0x31f
 80110fc:	496f      	ldr	r1, [pc, #444]	@ (80112bc <etharp_output+0x1f0>)
 80110fe:	486e      	ldr	r0, [pc, #440]	@ (80112b8 <etharp_output+0x1ec>)
 8011100:	f002 f8ac 	bl	801325c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d106      	bne.n	8011118 <etharp_output+0x4c>
 801110a:	4b69      	ldr	r3, [pc, #420]	@ (80112b0 <etharp_output+0x1e4>)
 801110c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8011110:	496b      	ldr	r1, [pc, #428]	@ (80112c0 <etharp_output+0x1f4>)
 8011112:	4869      	ldr	r0, [pc, #420]	@ (80112b8 <etharp_output+0x1ec>)
 8011114:	f002 f8a2 	bl	801325c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	68f9      	ldr	r1, [r7, #12]
 801111e:	4618      	mov	r0, r3
 8011120:	f000 fef8 	bl	8011f14 <ip4_addr_isbroadcast_u32>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d002      	beq.n	8011130 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801112a:	4b66      	ldr	r3, [pc, #408]	@ (80112c4 <etharp_output+0x1f8>)
 801112c:	61fb      	str	r3, [r7, #28]
 801112e:	e0af      	b.n	8011290 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011138:	2be0      	cmp	r3, #224	@ 0xe0
 801113a:	d118      	bne.n	801116e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801113c:	2301      	movs	r3, #1
 801113e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011140:	2300      	movs	r3, #0
 8011142:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011144:	235e      	movs	r3, #94	@ 0x5e
 8011146:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	3301      	adds	r3, #1
 801114c:	781b      	ldrb	r3, [r3, #0]
 801114e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011152:	b2db      	uxtb	r3, r3
 8011154:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	3302      	adds	r3, #2
 801115a:	781b      	ldrb	r3, [r3, #0]
 801115c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	3303      	adds	r3, #3
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011166:	f107 0310 	add.w	r3, r7, #16
 801116a:	61fb      	str	r3, [r7, #28]
 801116c:	e090      	b.n	8011290 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681a      	ldr	r2, [r3, #0]
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	3304      	adds	r3, #4
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	405a      	eors	r2, r3
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	3308      	adds	r3, #8
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4013      	ands	r3, r2
 8011182:	2b00      	cmp	r3, #0
 8011184:	d012      	beq.n	80111ac <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801118c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8011190:	4293      	cmp	r3, r2
 8011192:	d00b      	beq.n	80111ac <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	330c      	adds	r3, #12
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d003      	beq.n	80111a6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	330c      	adds	r3, #12
 80111a2:	61bb      	str	r3, [r7, #24]
 80111a4:	e002      	b.n	80111ac <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80111a6:	f06f 0303 	mvn.w	r3, #3
 80111aa:	e07d      	b.n	80112a8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80111ac:	4b46      	ldr	r3, [pc, #280]	@ (80112c8 <etharp_output+0x1fc>)
 80111ae:	781b      	ldrb	r3, [r3, #0]
 80111b0:	4619      	mov	r1, r3
 80111b2:	4a46      	ldr	r2, [pc, #280]	@ (80112cc <etharp_output+0x200>)
 80111b4:	460b      	mov	r3, r1
 80111b6:	005b      	lsls	r3, r3, #1
 80111b8:	440b      	add	r3, r1
 80111ba:	00db      	lsls	r3, r3, #3
 80111bc:	4413      	add	r3, r2
 80111be:	3314      	adds	r3, #20
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	2b01      	cmp	r3, #1
 80111c4:	d925      	bls.n	8011212 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80111c6:	4b40      	ldr	r3, [pc, #256]	@ (80112c8 <etharp_output+0x1fc>)
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	4619      	mov	r1, r3
 80111cc:	4a3f      	ldr	r2, [pc, #252]	@ (80112cc <etharp_output+0x200>)
 80111ce:	460b      	mov	r3, r1
 80111d0:	005b      	lsls	r3, r3, #1
 80111d2:	440b      	add	r3, r1
 80111d4:	00db      	lsls	r3, r3, #3
 80111d6:	4413      	add	r3, r2
 80111d8:	3308      	adds	r3, #8
 80111da:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80111dc:	68fa      	ldr	r2, [r7, #12]
 80111de:	429a      	cmp	r2, r3
 80111e0:	d117      	bne.n	8011212 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80111e2:	69bb      	ldr	r3, [r7, #24]
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	4b38      	ldr	r3, [pc, #224]	@ (80112c8 <etharp_output+0x1fc>)
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	4618      	mov	r0, r3
 80111ec:	4937      	ldr	r1, [pc, #220]	@ (80112cc <etharp_output+0x200>)
 80111ee:	4603      	mov	r3, r0
 80111f0:	005b      	lsls	r3, r3, #1
 80111f2:	4403      	add	r3, r0
 80111f4:	00db      	lsls	r3, r3, #3
 80111f6:	440b      	add	r3, r1
 80111f8:	3304      	adds	r3, #4
 80111fa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d108      	bne.n	8011212 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011200:	4b31      	ldr	r3, [pc, #196]	@ (80112c8 <etharp_output+0x1fc>)
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	461a      	mov	r2, r3
 8011206:	68b9      	ldr	r1, [r7, #8]
 8011208:	68f8      	ldr	r0, [r7, #12]
 801120a:	f7ff fec5 	bl	8010f98 <etharp_output_to_arp_index>
 801120e:	4603      	mov	r3, r0
 8011210:	e04a      	b.n	80112a8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011212:	2300      	movs	r3, #0
 8011214:	75fb      	strb	r3, [r7, #23]
 8011216:	e031      	b.n	801127c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011218:	7dfa      	ldrb	r2, [r7, #23]
 801121a:	492c      	ldr	r1, [pc, #176]	@ (80112cc <etharp_output+0x200>)
 801121c:	4613      	mov	r3, r2
 801121e:	005b      	lsls	r3, r3, #1
 8011220:	4413      	add	r3, r2
 8011222:	00db      	lsls	r3, r3, #3
 8011224:	440b      	add	r3, r1
 8011226:	3314      	adds	r3, #20
 8011228:	781b      	ldrb	r3, [r3, #0]
 801122a:	2b01      	cmp	r3, #1
 801122c:	d923      	bls.n	8011276 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801122e:	7dfa      	ldrb	r2, [r7, #23]
 8011230:	4926      	ldr	r1, [pc, #152]	@ (80112cc <etharp_output+0x200>)
 8011232:	4613      	mov	r3, r2
 8011234:	005b      	lsls	r3, r3, #1
 8011236:	4413      	add	r3, r2
 8011238:	00db      	lsls	r3, r3, #3
 801123a:	440b      	add	r3, r1
 801123c:	3308      	adds	r3, #8
 801123e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011240:	68fa      	ldr	r2, [r7, #12]
 8011242:	429a      	cmp	r2, r3
 8011244:	d117      	bne.n	8011276 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011246:	69bb      	ldr	r3, [r7, #24]
 8011248:	6819      	ldr	r1, [r3, #0]
 801124a:	7dfa      	ldrb	r2, [r7, #23]
 801124c:	481f      	ldr	r0, [pc, #124]	@ (80112cc <etharp_output+0x200>)
 801124e:	4613      	mov	r3, r2
 8011250:	005b      	lsls	r3, r3, #1
 8011252:	4413      	add	r3, r2
 8011254:	00db      	lsls	r3, r3, #3
 8011256:	4403      	add	r3, r0
 8011258:	3304      	adds	r3, #4
 801125a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801125c:	4299      	cmp	r1, r3
 801125e:	d10a      	bne.n	8011276 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011260:	4a19      	ldr	r2, [pc, #100]	@ (80112c8 <etharp_output+0x1fc>)
 8011262:	7dfb      	ldrb	r3, [r7, #23]
 8011264:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011266:	7dfb      	ldrb	r3, [r7, #23]
 8011268:	461a      	mov	r2, r3
 801126a:	68b9      	ldr	r1, [r7, #8]
 801126c:	68f8      	ldr	r0, [r7, #12]
 801126e:	f7ff fe93 	bl	8010f98 <etharp_output_to_arp_index>
 8011272:	4603      	mov	r3, r0
 8011274:	e018      	b.n	80112a8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011276:	7dfb      	ldrb	r3, [r7, #23]
 8011278:	3301      	adds	r3, #1
 801127a:	75fb      	strb	r3, [r7, #23]
 801127c:	7dfb      	ldrb	r3, [r7, #23]
 801127e:	2b09      	cmp	r3, #9
 8011280:	d9ca      	bls.n	8011218 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011282:	68ba      	ldr	r2, [r7, #8]
 8011284:	69b9      	ldr	r1, [r7, #24]
 8011286:	68f8      	ldr	r0, [r7, #12]
 8011288:	f000 f822 	bl	80112d0 <etharp_query>
 801128c:	4603      	mov	r3, r0
 801128e:	e00b      	b.n	80112a8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8011296:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801129a:	9300      	str	r3, [sp, #0]
 801129c:	69fb      	ldr	r3, [r7, #28]
 801129e:	68b9      	ldr	r1, [r7, #8]
 80112a0:	68f8      	ldr	r0, [r7, #12]
 80112a2:	f001 fd45 	bl	8012d30 <ethernet_output>
 80112a6:	4603      	mov	r3, r0
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3720      	adds	r7, #32
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}
 80112b0:	08016a38 	.word	0x08016a38
 80112b4:	08016b88 	.word	0x08016b88
 80112b8:	08016ab0 	.word	0x08016ab0
 80112bc:	08016bd8 	.word	0x08016bd8
 80112c0:	08016b78 	.word	0x08016b78
 80112c4:	080171f4 	.word	0x080171f4
 80112c8:	20008b14 	.word	0x20008b14
 80112cc:	20008a24 	.word	0x20008a24

080112d0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b08c      	sub	sp, #48	@ 0x30
 80112d4:	af02      	add	r7, sp, #8
 80112d6:	60f8      	str	r0, [r7, #12]
 80112d8:	60b9      	str	r1, [r7, #8]
 80112da:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	3326      	adds	r3, #38	@ 0x26
 80112e0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80112e2:	23ff      	movs	r3, #255	@ 0xff
 80112e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80112e8:	2300      	movs	r3, #0
 80112ea:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	68f9      	ldr	r1, [r7, #12]
 80112f2:	4618      	mov	r0, r3
 80112f4:	f000 fe0e 	bl	8011f14 <ip4_addr_isbroadcast_u32>
 80112f8:	4603      	mov	r3, r0
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d10c      	bne.n	8011318 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011306:	2be0      	cmp	r3, #224	@ 0xe0
 8011308:	d006      	beq.n	8011318 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d003      	beq.n	8011318 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d102      	bne.n	801131e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011318:	f06f 030f 	mvn.w	r3, #15
 801131c:	e101      	b.n	8011522 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801131e:	68fa      	ldr	r2, [r7, #12]
 8011320:	2101      	movs	r1, #1
 8011322:	68b8      	ldr	r0, [r7, #8]
 8011324:	f7ff fb60 	bl	80109e8 <etharp_find_entry>
 8011328:	4603      	mov	r3, r0
 801132a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801132c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011330:	2b00      	cmp	r3, #0
 8011332:	da02      	bge.n	801133a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011334:	8a7b      	ldrh	r3, [r7, #18]
 8011336:	b25b      	sxtb	r3, r3
 8011338:	e0f3      	b.n	8011522 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801133a:	8a7b      	ldrh	r3, [r7, #18]
 801133c:	2b7e      	cmp	r3, #126	@ 0x7e
 801133e:	d906      	bls.n	801134e <etharp_query+0x7e>
 8011340:	4b7a      	ldr	r3, [pc, #488]	@ (801152c <etharp_query+0x25c>)
 8011342:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8011346:	497a      	ldr	r1, [pc, #488]	@ (8011530 <etharp_query+0x260>)
 8011348:	487a      	ldr	r0, [pc, #488]	@ (8011534 <etharp_query+0x264>)
 801134a:	f001 ff87 	bl	801325c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801134e:	8a7b      	ldrh	r3, [r7, #18]
 8011350:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011352:	7c7a      	ldrb	r2, [r7, #17]
 8011354:	4978      	ldr	r1, [pc, #480]	@ (8011538 <etharp_query+0x268>)
 8011356:	4613      	mov	r3, r2
 8011358:	005b      	lsls	r3, r3, #1
 801135a:	4413      	add	r3, r2
 801135c:	00db      	lsls	r3, r3, #3
 801135e:	440b      	add	r3, r1
 8011360:	3314      	adds	r3, #20
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d115      	bne.n	8011394 <etharp_query+0xc4>
    is_new_entry = 1;
 8011368:	2301      	movs	r3, #1
 801136a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801136c:	7c7a      	ldrb	r2, [r7, #17]
 801136e:	4972      	ldr	r1, [pc, #456]	@ (8011538 <etharp_query+0x268>)
 8011370:	4613      	mov	r3, r2
 8011372:	005b      	lsls	r3, r3, #1
 8011374:	4413      	add	r3, r2
 8011376:	00db      	lsls	r3, r3, #3
 8011378:	440b      	add	r3, r1
 801137a:	3314      	adds	r3, #20
 801137c:	2201      	movs	r2, #1
 801137e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011380:	7c7a      	ldrb	r2, [r7, #17]
 8011382:	496d      	ldr	r1, [pc, #436]	@ (8011538 <etharp_query+0x268>)
 8011384:	4613      	mov	r3, r2
 8011386:	005b      	lsls	r3, r3, #1
 8011388:	4413      	add	r3, r2
 801138a:	00db      	lsls	r3, r3, #3
 801138c:	440b      	add	r3, r1
 801138e:	3308      	adds	r3, #8
 8011390:	68fa      	ldr	r2, [r7, #12]
 8011392:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011394:	7c7a      	ldrb	r2, [r7, #17]
 8011396:	4968      	ldr	r1, [pc, #416]	@ (8011538 <etharp_query+0x268>)
 8011398:	4613      	mov	r3, r2
 801139a:	005b      	lsls	r3, r3, #1
 801139c:	4413      	add	r3, r2
 801139e:	00db      	lsls	r3, r3, #3
 80113a0:	440b      	add	r3, r1
 80113a2:	3314      	adds	r3, #20
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	2b01      	cmp	r3, #1
 80113a8:	d011      	beq.n	80113ce <etharp_query+0xfe>
 80113aa:	7c7a      	ldrb	r2, [r7, #17]
 80113ac:	4962      	ldr	r1, [pc, #392]	@ (8011538 <etharp_query+0x268>)
 80113ae:	4613      	mov	r3, r2
 80113b0:	005b      	lsls	r3, r3, #1
 80113b2:	4413      	add	r3, r2
 80113b4:	00db      	lsls	r3, r3, #3
 80113b6:	440b      	add	r3, r1
 80113b8:	3314      	adds	r3, #20
 80113ba:	781b      	ldrb	r3, [r3, #0]
 80113bc:	2b01      	cmp	r3, #1
 80113be:	d806      	bhi.n	80113ce <etharp_query+0xfe>
 80113c0:	4b5a      	ldr	r3, [pc, #360]	@ (801152c <etharp_query+0x25c>)
 80113c2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80113c6:	495d      	ldr	r1, [pc, #372]	@ (801153c <etharp_query+0x26c>)
 80113c8:	485a      	ldr	r0, [pc, #360]	@ (8011534 <etharp_query+0x264>)
 80113ca:	f001 ff47 	bl	801325c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80113ce:	6a3b      	ldr	r3, [r7, #32]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d102      	bne.n	80113da <etharp_query+0x10a>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d10c      	bne.n	80113f4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80113da:	68b9      	ldr	r1, [r7, #8]
 80113dc:	68f8      	ldr	r0, [r7, #12]
 80113de:	f000 f963 	bl	80116a8 <etharp_request>
 80113e2:	4603      	mov	r3, r0
 80113e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d102      	bne.n	80113f4 <etharp_query+0x124>
      return result;
 80113ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80113f2:	e096      	b.n	8011522 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d106      	bne.n	8011408 <etharp_query+0x138>
 80113fa:	4b4c      	ldr	r3, [pc, #304]	@ (801152c <etharp_query+0x25c>)
 80113fc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8011400:	494f      	ldr	r1, [pc, #316]	@ (8011540 <etharp_query+0x270>)
 8011402:	484c      	ldr	r0, [pc, #304]	@ (8011534 <etharp_query+0x264>)
 8011404:	f001 ff2a 	bl	801325c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011408:	7c7a      	ldrb	r2, [r7, #17]
 801140a:	494b      	ldr	r1, [pc, #300]	@ (8011538 <etharp_query+0x268>)
 801140c:	4613      	mov	r3, r2
 801140e:	005b      	lsls	r3, r3, #1
 8011410:	4413      	add	r3, r2
 8011412:	00db      	lsls	r3, r3, #3
 8011414:	440b      	add	r3, r1
 8011416:	3314      	adds	r3, #20
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	2b01      	cmp	r3, #1
 801141c:	d917      	bls.n	801144e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801141e:	4a49      	ldr	r2, [pc, #292]	@ (8011544 <etharp_query+0x274>)
 8011420:	7c7b      	ldrb	r3, [r7, #17]
 8011422:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011424:	7c7a      	ldrb	r2, [r7, #17]
 8011426:	4613      	mov	r3, r2
 8011428:	005b      	lsls	r3, r3, #1
 801142a:	4413      	add	r3, r2
 801142c:	00db      	lsls	r3, r3, #3
 801142e:	3308      	adds	r3, #8
 8011430:	4a41      	ldr	r2, [pc, #260]	@ (8011538 <etharp_query+0x268>)
 8011432:	4413      	add	r3, r2
 8011434:	3304      	adds	r3, #4
 8011436:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801143a:	9200      	str	r2, [sp, #0]
 801143c:	697a      	ldr	r2, [r7, #20]
 801143e:	6879      	ldr	r1, [r7, #4]
 8011440:	68f8      	ldr	r0, [r7, #12]
 8011442:	f001 fc75 	bl	8012d30 <ethernet_output>
 8011446:	4603      	mov	r3, r0
 8011448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801144c:	e067      	b.n	801151e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801144e:	7c7a      	ldrb	r2, [r7, #17]
 8011450:	4939      	ldr	r1, [pc, #228]	@ (8011538 <etharp_query+0x268>)
 8011452:	4613      	mov	r3, r2
 8011454:	005b      	lsls	r3, r3, #1
 8011456:	4413      	add	r3, r2
 8011458:	00db      	lsls	r3, r3, #3
 801145a:	440b      	add	r3, r1
 801145c:	3314      	adds	r3, #20
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	2b01      	cmp	r3, #1
 8011462:	d15c      	bne.n	801151e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011464:	2300      	movs	r3, #0
 8011466:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801146c:	e01c      	b.n	80114a8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801146e:	69fb      	ldr	r3, [r7, #28]
 8011470:	895a      	ldrh	r2, [r3, #10]
 8011472:	69fb      	ldr	r3, [r7, #28]
 8011474:	891b      	ldrh	r3, [r3, #8]
 8011476:	429a      	cmp	r2, r3
 8011478:	d10a      	bne.n	8011490 <etharp_query+0x1c0>
 801147a:	69fb      	ldr	r3, [r7, #28]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d006      	beq.n	8011490 <etharp_query+0x1c0>
 8011482:	4b2a      	ldr	r3, [pc, #168]	@ (801152c <etharp_query+0x25c>)
 8011484:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8011488:	492f      	ldr	r1, [pc, #188]	@ (8011548 <etharp_query+0x278>)
 801148a:	482a      	ldr	r0, [pc, #168]	@ (8011534 <etharp_query+0x264>)
 801148c:	f001 fee6 	bl	801325c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011490:	69fb      	ldr	r3, [r7, #28]
 8011492:	7b1b      	ldrb	r3, [r3, #12]
 8011494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011498:	2b00      	cmp	r3, #0
 801149a:	d002      	beq.n	80114a2 <etharp_query+0x1d2>
        copy_needed = 1;
 801149c:	2301      	movs	r3, #1
 801149e:	61bb      	str	r3, [r7, #24]
        break;
 80114a0:	e005      	b.n	80114ae <etharp_query+0x1de>
      }
      p = p->next;
 80114a2:	69fb      	ldr	r3, [r7, #28]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80114a8:	69fb      	ldr	r3, [r7, #28]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d1df      	bne.n	801146e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80114ae:	69bb      	ldr	r3, [r7, #24]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d007      	beq.n	80114c4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80114b4:	687a      	ldr	r2, [r7, #4]
 80114b6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80114ba:	200e      	movs	r0, #14
 80114bc:	f7f9 f9dc 	bl	800a878 <pbuf_clone>
 80114c0:	61f8      	str	r0, [r7, #28]
 80114c2:	e004      	b.n	80114ce <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80114c8:	69f8      	ldr	r0, [r7, #28]
 80114ca:	f7f8 ff77 	bl	800a3bc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80114ce:	69fb      	ldr	r3, [r7, #28]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d021      	beq.n	8011518 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80114d4:	7c7a      	ldrb	r2, [r7, #17]
 80114d6:	4918      	ldr	r1, [pc, #96]	@ (8011538 <etharp_query+0x268>)
 80114d8:	4613      	mov	r3, r2
 80114da:	005b      	lsls	r3, r3, #1
 80114dc:	4413      	add	r3, r2
 80114de:	00db      	lsls	r3, r3, #3
 80114e0:	440b      	add	r3, r1
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d00a      	beq.n	80114fe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80114e8:	7c7a      	ldrb	r2, [r7, #17]
 80114ea:	4913      	ldr	r1, [pc, #76]	@ (8011538 <etharp_query+0x268>)
 80114ec:	4613      	mov	r3, r2
 80114ee:	005b      	lsls	r3, r3, #1
 80114f0:	4413      	add	r3, r2
 80114f2:	00db      	lsls	r3, r3, #3
 80114f4:	440b      	add	r3, r1
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	4618      	mov	r0, r3
 80114fa:	f7f8 febf 	bl	800a27c <pbuf_free>
      }
      arp_table[i].q = p;
 80114fe:	7c7a      	ldrb	r2, [r7, #17]
 8011500:	490d      	ldr	r1, [pc, #52]	@ (8011538 <etharp_query+0x268>)
 8011502:	4613      	mov	r3, r2
 8011504:	005b      	lsls	r3, r3, #1
 8011506:	4413      	add	r3, r2
 8011508:	00db      	lsls	r3, r3, #3
 801150a:	440b      	add	r3, r1
 801150c:	69fa      	ldr	r2, [r7, #28]
 801150e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011510:	2300      	movs	r3, #0
 8011512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011516:	e002      	b.n	801151e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011518:	23ff      	movs	r3, #255	@ 0xff
 801151a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801151e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8011522:	4618      	mov	r0, r3
 8011524:	3728      	adds	r7, #40	@ 0x28
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}
 801152a:	bf00      	nop
 801152c:	08016a38 	.word	0x08016a38
 8011530:	08016be4 	.word	0x08016be4
 8011534:	08016ab0 	.word	0x08016ab0
 8011538:	20008a24 	.word	0x20008a24
 801153c:	08016bf4 	.word	0x08016bf4
 8011540:	08016bd8 	.word	0x08016bd8
 8011544:	20008b14 	.word	0x20008b14
 8011548:	08016c1c 	.word	0x08016c1c

0801154c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b08a      	sub	sp, #40	@ 0x28
 8011550:	af02      	add	r7, sp, #8
 8011552:	60f8      	str	r0, [r7, #12]
 8011554:	60b9      	str	r1, [r7, #8]
 8011556:	607a      	str	r2, [r7, #4]
 8011558:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801155a:	2300      	movs	r3, #0
 801155c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d106      	bne.n	8011572 <etharp_raw+0x26>
 8011564:	4b3a      	ldr	r3, [pc, #232]	@ (8011650 <etharp_raw+0x104>)
 8011566:	f240 4257 	movw	r2, #1111	@ 0x457
 801156a:	493a      	ldr	r1, [pc, #232]	@ (8011654 <etharp_raw+0x108>)
 801156c:	483a      	ldr	r0, [pc, #232]	@ (8011658 <etharp_raw+0x10c>)
 801156e:	f001 fe75 	bl	801325c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011572:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011576:	211c      	movs	r1, #28
 8011578:	200e      	movs	r0, #14
 801157a:	f7f8 fb9b 	bl	8009cb4 <pbuf_alloc>
 801157e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011580:	69bb      	ldr	r3, [r7, #24]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d102      	bne.n	801158c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011586:	f04f 33ff 	mov.w	r3, #4294967295
 801158a:	e05d      	b.n	8011648 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801158c:	69bb      	ldr	r3, [r7, #24]
 801158e:	895b      	ldrh	r3, [r3, #10]
 8011590:	2b1b      	cmp	r3, #27
 8011592:	d806      	bhi.n	80115a2 <etharp_raw+0x56>
 8011594:	4b2e      	ldr	r3, [pc, #184]	@ (8011650 <etharp_raw+0x104>)
 8011596:	f240 4262 	movw	r2, #1122	@ 0x462
 801159a:	4930      	ldr	r1, [pc, #192]	@ (801165c <etharp_raw+0x110>)
 801159c:	482e      	ldr	r0, [pc, #184]	@ (8011658 <etharp_raw+0x10c>)
 801159e:	f001 fe5d 	bl	801325c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80115a2:	69bb      	ldr	r3, [r7, #24]
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80115a8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7f7 fb08 	bl	8008bc0 <lwip_htons>
 80115b0:	4603      	mov	r3, r0
 80115b2:	461a      	mov	r2, r3
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80115be:	2b06      	cmp	r3, #6
 80115c0:	d006      	beq.n	80115d0 <etharp_raw+0x84>
 80115c2:	4b23      	ldr	r3, [pc, #140]	@ (8011650 <etharp_raw+0x104>)
 80115c4:	f240 4269 	movw	r2, #1129	@ 0x469
 80115c8:	4925      	ldr	r1, [pc, #148]	@ (8011660 <etharp_raw+0x114>)
 80115ca:	4823      	ldr	r0, [pc, #140]	@ (8011658 <etharp_raw+0x10c>)
 80115cc:	f001 fe46 	bl	801325c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	3308      	adds	r3, #8
 80115d4:	2206      	movs	r2, #6
 80115d6:	6839      	ldr	r1, [r7, #0]
 80115d8:	4618      	mov	r0, r3
 80115da:	f001 ff7e 	bl	80134da <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	3312      	adds	r3, #18
 80115e2:	2206      	movs	r2, #6
 80115e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80115e6:	4618      	mov	r0, r3
 80115e8:	f001 ff77 	bl	80134da <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	330e      	adds	r3, #14
 80115f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80115f2:	6812      	ldr	r2, [r2, #0]
 80115f4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	3318      	adds	r3, #24
 80115fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80115fc:	6812      	ldr	r2, [r2, #0]
 80115fe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	2200      	movs	r2, #0
 8011604:	701a      	strb	r2, [r3, #0]
 8011606:	2200      	movs	r2, #0
 8011608:	f042 0201 	orr.w	r2, r2, #1
 801160c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	2200      	movs	r2, #0
 8011612:	f042 0208 	orr.w	r2, r2, #8
 8011616:	709a      	strb	r2, [r3, #2]
 8011618:	2200      	movs	r2, #0
 801161a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	2206      	movs	r2, #6
 8011620:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	2204      	movs	r2, #4
 8011626:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011628:	f640 0306 	movw	r3, #2054	@ 0x806
 801162c:	9300      	str	r3, [sp, #0]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	68ba      	ldr	r2, [r7, #8]
 8011632:	69b9      	ldr	r1, [r7, #24]
 8011634:	68f8      	ldr	r0, [r7, #12]
 8011636:	f001 fb7b 	bl	8012d30 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801163a:	69b8      	ldr	r0, [r7, #24]
 801163c:	f7f8 fe1e 	bl	800a27c <pbuf_free>
  p = NULL;
 8011640:	2300      	movs	r3, #0
 8011642:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011644:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011648:	4618      	mov	r0, r3
 801164a:	3720      	adds	r7, #32
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}
 8011650:	08016a38 	.word	0x08016a38
 8011654:	08016b88 	.word	0x08016b88
 8011658:	08016ab0 	.word	0x08016ab0
 801165c:	08016c38 	.word	0x08016c38
 8011660:	08016c6c 	.word	0x08016c6c

08011664 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b088      	sub	sp, #32
 8011668:	af04      	add	r7, sp, #16
 801166a:	60f8      	str	r0, [r7, #12]
 801166c:	60b9      	str	r1, [r7, #8]
 801166e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011680:	2201      	movs	r2, #1
 8011682:	9203      	str	r2, [sp, #12]
 8011684:	68ba      	ldr	r2, [r7, #8]
 8011686:	9202      	str	r2, [sp, #8]
 8011688:	4a06      	ldr	r2, [pc, #24]	@ (80116a4 <etharp_request_dst+0x40>)
 801168a:	9201      	str	r2, [sp, #4]
 801168c:	9300      	str	r3, [sp, #0]
 801168e:	4603      	mov	r3, r0
 8011690:	687a      	ldr	r2, [r7, #4]
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f7ff ff5a 	bl	801154c <etharp_raw>
 8011698:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801169a:	4618      	mov	r0, r3
 801169c:	3710      	adds	r7, #16
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	080171fc 	.word	0x080171fc

080116a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80116b2:	4a05      	ldr	r2, [pc, #20]	@ (80116c8 <etharp_request+0x20>)
 80116b4:	6839      	ldr	r1, [r7, #0]
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f7ff ffd4 	bl	8011664 <etharp_request_dst>
 80116bc:	4603      	mov	r3, r0
}
 80116be:	4618      	mov	r0, r3
 80116c0:	3708      	adds	r7, #8
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}
 80116c6:	bf00      	nop
 80116c8:	080171f4 	.word	0x080171f4

080116cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b08e      	sub	sp, #56	@ 0x38
 80116d0:	af04      	add	r7, sp, #16
 80116d2:	6078      	str	r0, [r7, #4]
 80116d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80116d6:	4b79      	ldr	r3, [pc, #484]	@ (80118bc <icmp_input+0x1f0>)
 80116d8:	689b      	ldr	r3, [r3, #8]
 80116da:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80116dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116de:	781b      	ldrb	r3, [r3, #0]
 80116e0:	f003 030f 	and.w	r3, r3, #15
 80116e4:	b2db      	uxtb	r3, r3
 80116e6:	009b      	lsls	r3, r3, #2
 80116e8:	b2db      	uxtb	r3, r3
 80116ea:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80116ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80116ee:	2b13      	cmp	r3, #19
 80116f0:	f240 80cd 	bls.w	801188e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	895b      	ldrh	r3, [r3, #10]
 80116f8:	2b03      	cmp	r3, #3
 80116fa:	f240 80ca 	bls.w	8011892 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011708:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801170c:	2b00      	cmp	r3, #0
 801170e:	f000 80b7 	beq.w	8011880 <icmp_input+0x1b4>
 8011712:	2b08      	cmp	r3, #8
 8011714:	f040 80b7 	bne.w	8011886 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011718:	4b69      	ldr	r3, [pc, #420]	@ (80118c0 <icmp_input+0x1f4>)
 801171a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801171c:	4b67      	ldr	r3, [pc, #412]	@ (80118bc <icmp_input+0x1f0>)
 801171e:	695b      	ldr	r3, [r3, #20]
 8011720:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011724:	2be0      	cmp	r3, #224	@ 0xe0
 8011726:	f000 80bb 	beq.w	80118a0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801172a:	4b64      	ldr	r3, [pc, #400]	@ (80118bc <icmp_input+0x1f0>)
 801172c:	695b      	ldr	r3, [r3, #20]
 801172e:	4a63      	ldr	r2, [pc, #396]	@ (80118bc <icmp_input+0x1f0>)
 8011730:	6812      	ldr	r2, [r2, #0]
 8011732:	4611      	mov	r1, r2
 8011734:	4618      	mov	r0, r3
 8011736:	f000 fbed 	bl	8011f14 <ip4_addr_isbroadcast_u32>
 801173a:	4603      	mov	r3, r0
 801173c:	2b00      	cmp	r3, #0
 801173e:	f040 80b1 	bne.w	80118a4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	891b      	ldrh	r3, [r3, #8]
 8011746:	2b07      	cmp	r3, #7
 8011748:	f240 80a5 	bls.w	8011896 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801174c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801174e:	330e      	adds	r3, #14
 8011750:	4619      	mov	r1, r3
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	f7f8 fcfc 	bl	800a150 <pbuf_add_header>
 8011758:	4603      	mov	r3, r0
 801175a:	2b00      	cmp	r3, #0
 801175c:	d04b      	beq.n	80117f6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	891a      	ldrh	r2, [r3, #8]
 8011762:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011764:	4413      	add	r3, r2
 8011766:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	891b      	ldrh	r3, [r3, #8]
 801176c:	8b7a      	ldrh	r2, [r7, #26]
 801176e:	429a      	cmp	r2, r3
 8011770:	f0c0 809a 	bcc.w	80118a8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011774:	8b7b      	ldrh	r3, [r7, #26]
 8011776:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801177a:	4619      	mov	r1, r3
 801177c:	200e      	movs	r0, #14
 801177e:	f7f8 fa99 	bl	8009cb4 <pbuf_alloc>
 8011782:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	2b00      	cmp	r3, #0
 8011788:	f000 8090 	beq.w	80118ac <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	895b      	ldrh	r3, [r3, #10]
 8011790:	461a      	mov	r2, r3
 8011792:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011794:	3308      	adds	r3, #8
 8011796:	429a      	cmp	r2, r3
 8011798:	d203      	bcs.n	80117a2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801179a:	6978      	ldr	r0, [r7, #20]
 801179c:	f7f8 fd6e 	bl	800a27c <pbuf_free>
          goto icmperr;
 80117a0:	e085      	b.n	80118ae <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	685b      	ldr	r3, [r3, #4]
 80117a6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80117a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80117aa:	4618      	mov	r0, r3
 80117ac:	f001 fe95 	bl	80134da <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80117b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80117b2:	4619      	mov	r1, r3
 80117b4:	6978      	ldr	r0, [r7, #20]
 80117b6:	f7f8 fcdb 	bl	800a170 <pbuf_remove_header>
 80117ba:	4603      	mov	r3, r0
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d009      	beq.n	80117d4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80117c0:	4b40      	ldr	r3, [pc, #256]	@ (80118c4 <icmp_input+0x1f8>)
 80117c2:	22b6      	movs	r2, #182	@ 0xb6
 80117c4:	4940      	ldr	r1, [pc, #256]	@ (80118c8 <icmp_input+0x1fc>)
 80117c6:	4841      	ldr	r0, [pc, #260]	@ (80118cc <icmp_input+0x200>)
 80117c8:	f001 fd48 	bl	801325c <iprintf>
          pbuf_free(r);
 80117cc:	6978      	ldr	r0, [r7, #20]
 80117ce:	f7f8 fd55 	bl	800a27c <pbuf_free>
          goto icmperr;
 80117d2:	e06c      	b.n	80118ae <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80117d4:	6879      	ldr	r1, [r7, #4]
 80117d6:	6978      	ldr	r0, [r7, #20]
 80117d8:	f7f8 fe78 	bl	800a4cc <pbuf_copy>
 80117dc:	4603      	mov	r3, r0
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d003      	beq.n	80117ea <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80117e2:	6978      	ldr	r0, [r7, #20]
 80117e4:	f7f8 fd4a 	bl	800a27c <pbuf_free>
          goto icmperr;
 80117e8:	e061      	b.n	80118ae <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f7f8 fd46 	bl	800a27c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	607b      	str	r3, [r7, #4]
 80117f4:	e00f      	b.n	8011816 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80117f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80117f8:	330e      	adds	r3, #14
 80117fa:	4619      	mov	r1, r3
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f7f8 fcb7 	bl	800a170 <pbuf_remove_header>
 8011802:	4603      	mov	r3, r0
 8011804:	2b00      	cmp	r3, #0
 8011806:	d006      	beq.n	8011816 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011808:	4b2e      	ldr	r3, [pc, #184]	@ (80118c4 <icmp_input+0x1f8>)
 801180a:	22c7      	movs	r2, #199	@ 0xc7
 801180c:	4930      	ldr	r1, [pc, #192]	@ (80118d0 <icmp_input+0x204>)
 801180e:	482f      	ldr	r0, [pc, #188]	@ (80118cc <icmp_input+0x200>)
 8011810:	f001 fd24 	bl	801325c <iprintf>
          goto icmperr;
 8011814:	e04b      	b.n	80118ae <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801181c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801181e:	4619      	mov	r1, r3
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f7f8 fc95 	bl	800a150 <pbuf_add_header>
 8011826:	4603      	mov	r3, r0
 8011828:	2b00      	cmp	r3, #0
 801182a:	d12b      	bne.n	8011884 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011832:	69fb      	ldr	r3, [r7, #28]
 8011834:	681a      	ldr	r2, [r3, #0]
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801183a:	4b20      	ldr	r3, [pc, #128]	@ (80118bc <icmp_input+0x1f0>)
 801183c:	691a      	ldr	r2, [r3, #16]
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	2200      	movs	r2, #0
 8011846:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	2200      	movs	r2, #0
 801184c:	709a      	strb	r2, [r3, #2]
 801184e:	2200      	movs	r2, #0
 8011850:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	22ff      	movs	r2, #255	@ 0xff
 8011856:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	2200      	movs	r2, #0
 801185c:	729a      	strb	r2, [r3, #10]
 801185e:	2200      	movs	r2, #0
 8011860:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	9302      	str	r3, [sp, #8]
 8011866:	2301      	movs	r3, #1
 8011868:	9301      	str	r3, [sp, #4]
 801186a:	2300      	movs	r3, #0
 801186c:	9300      	str	r3, [sp, #0]
 801186e:	23ff      	movs	r3, #255	@ 0xff
 8011870:	2200      	movs	r2, #0
 8011872:	69f9      	ldr	r1, [r7, #28]
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f000 fa75 	bl	8011d64 <ip4_output_if>
 801187a:	4603      	mov	r3, r0
 801187c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801187e:	e001      	b.n	8011884 <icmp_input+0x1b8>
      break;
 8011880:	bf00      	nop
 8011882:	e000      	b.n	8011886 <icmp_input+0x1ba>
      break;
 8011884:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011886:	6878      	ldr	r0, [r7, #4]
 8011888:	f7f8 fcf8 	bl	800a27c <pbuf_free>
  return;
 801188c:	e013      	b.n	80118b6 <icmp_input+0x1ea>
    goto lenerr;
 801188e:	bf00      	nop
 8011890:	e002      	b.n	8011898 <icmp_input+0x1cc>
    goto lenerr;
 8011892:	bf00      	nop
 8011894:	e000      	b.n	8011898 <icmp_input+0x1cc>
        goto lenerr;
 8011896:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f7f8 fcef 	bl	800a27c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801189e:	e00a      	b.n	80118b6 <icmp_input+0x1ea>
        goto icmperr;
 80118a0:	bf00      	nop
 80118a2:	e004      	b.n	80118ae <icmp_input+0x1e2>
        goto icmperr;
 80118a4:	bf00      	nop
 80118a6:	e002      	b.n	80118ae <icmp_input+0x1e2>
          goto icmperr;
 80118a8:	bf00      	nop
 80118aa:	e000      	b.n	80118ae <icmp_input+0x1e2>
          goto icmperr;
 80118ac:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f7f8 fce4 	bl	800a27c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80118b4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80118b6:	3728      	adds	r7, #40	@ 0x28
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}
 80118bc:	20005694 	.word	0x20005694
 80118c0:	200056a8 	.word	0x200056a8
 80118c4:	08016cb0 	.word	0x08016cb0
 80118c8:	08016ce8 	.word	0x08016ce8
 80118cc:	08016d20 	.word	0x08016d20
 80118d0:	08016d48 	.word	0x08016d48

080118d4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	460b      	mov	r3, r1
 80118de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80118e0:	78fb      	ldrb	r3, [r7, #3]
 80118e2:	461a      	mov	r2, r3
 80118e4:	2103      	movs	r1, #3
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f000 f814 	bl	8011914 <icmp_send_response>
}
 80118ec:	bf00      	nop
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	460b      	mov	r3, r1
 80118fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011900:	78fb      	ldrb	r3, [r7, #3]
 8011902:	461a      	mov	r2, r3
 8011904:	210b      	movs	r1, #11
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f000 f804 	bl	8011914 <icmp_send_response>
}
 801190c:	bf00      	nop
 801190e:	3708      	adds	r7, #8
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}

08011914 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b08c      	sub	sp, #48	@ 0x30
 8011918:	af04      	add	r7, sp, #16
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	460b      	mov	r3, r1
 801191e:	70fb      	strb	r3, [r7, #3]
 8011920:	4613      	mov	r3, r2
 8011922:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011924:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011928:	2124      	movs	r1, #36	@ 0x24
 801192a:	2022      	movs	r0, #34	@ 0x22
 801192c:	f7f8 f9c2 	bl	8009cb4 <pbuf_alloc>
 8011930:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011932:	69fb      	ldr	r3, [r7, #28]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d04c      	beq.n	80119d2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011938:	69fb      	ldr	r3, [r7, #28]
 801193a:	895b      	ldrh	r3, [r3, #10]
 801193c:	2b23      	cmp	r3, #35	@ 0x23
 801193e:	d806      	bhi.n	801194e <icmp_send_response+0x3a>
 8011940:	4b26      	ldr	r3, [pc, #152]	@ (80119dc <icmp_send_response+0xc8>)
 8011942:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8011946:	4926      	ldr	r1, [pc, #152]	@ (80119e0 <icmp_send_response+0xcc>)
 8011948:	4826      	ldr	r0, [pc, #152]	@ (80119e4 <icmp_send_response+0xd0>)
 801194a:	f001 fc87 	bl	801325c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	685b      	ldr	r3, [r3, #4]
 8011952:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011954:	69fb      	ldr	r3, [r7, #28]
 8011956:	685b      	ldr	r3, [r3, #4]
 8011958:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	78fa      	ldrb	r2, [r7, #3]
 801195e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011960:	697b      	ldr	r3, [r7, #20]
 8011962:	78ba      	ldrb	r2, [r7, #2]
 8011964:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	2200      	movs	r2, #0
 801196a:	711a      	strb	r2, [r3, #4]
 801196c:	2200      	movs	r2, #0
 801196e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	2200      	movs	r2, #0
 8011974:	719a      	strb	r2, [r3, #6]
 8011976:	2200      	movs	r2, #0
 8011978:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801197a:	69fb      	ldr	r3, [r7, #28]
 801197c:	685b      	ldr	r3, [r3, #4]
 801197e:	f103 0008 	add.w	r0, r3, #8
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	685b      	ldr	r3, [r3, #4]
 8011986:	221c      	movs	r2, #28
 8011988:	4619      	mov	r1, r3
 801198a:	f001 fda6 	bl	80134da <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801198e:	69bb      	ldr	r3, [r7, #24]
 8011990:	68db      	ldr	r3, [r3, #12]
 8011992:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011994:	f107 030c 	add.w	r3, r7, #12
 8011998:	4618      	mov	r0, r3
 801199a:	f000 f825 	bl	80119e8 <ip4_route>
 801199e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80119a0:	693b      	ldr	r3, [r7, #16]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d011      	beq.n	80119ca <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	2200      	movs	r2, #0
 80119aa:	709a      	strb	r2, [r3, #2]
 80119ac:	2200      	movs	r2, #0
 80119ae:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80119b0:	f107 020c 	add.w	r2, r7, #12
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	9302      	str	r3, [sp, #8]
 80119b8:	2301      	movs	r3, #1
 80119ba:	9301      	str	r3, [sp, #4]
 80119bc:	2300      	movs	r3, #0
 80119be:	9300      	str	r3, [sp, #0]
 80119c0:	23ff      	movs	r3, #255	@ 0xff
 80119c2:	2100      	movs	r1, #0
 80119c4:	69f8      	ldr	r0, [r7, #28]
 80119c6:	f000 f9cd 	bl	8011d64 <ip4_output_if>
  }
  pbuf_free(q);
 80119ca:	69f8      	ldr	r0, [r7, #28]
 80119cc:	f7f8 fc56 	bl	800a27c <pbuf_free>
 80119d0:	e000      	b.n	80119d4 <icmp_send_response+0xc0>
    return;
 80119d2:	bf00      	nop
}
 80119d4:	3720      	adds	r7, #32
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bd80      	pop	{r7, pc}
 80119da:	bf00      	nop
 80119dc:	08016cb0 	.word	0x08016cb0
 80119e0:	08016d7c 	.word	0x08016d7c
 80119e4:	08016d20 	.word	0x08016d20

080119e8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80119e8:	b480      	push	{r7}
 80119ea:	b085      	sub	sp, #20
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80119f0:	4b33      	ldr	r3, [pc, #204]	@ (8011ac0 <ip4_route+0xd8>)
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	60fb      	str	r3, [r7, #12]
 80119f6:	e036      	b.n	8011a66 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80119fe:	f003 0301 	and.w	r3, r3, #1
 8011a02:	b2db      	uxtb	r3, r3
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d02b      	beq.n	8011a60 <ip4_route+0x78>
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011a0e:	089b      	lsrs	r3, r3, #2
 8011a10:	f003 0301 	and.w	r3, r3, #1
 8011a14:	b2db      	uxtb	r3, r3
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d022      	beq.n	8011a60 <ip4_route+0x78>
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	3304      	adds	r3, #4
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d01d      	beq.n	8011a60 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681a      	ldr	r2, [r3, #0]
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	3304      	adds	r3, #4
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	405a      	eors	r2, r3
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	3308      	adds	r3, #8
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	4013      	ands	r3, r2
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d101      	bne.n	8011a40 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	e038      	b.n	8011ab2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011a46:	f003 0302 	and.w	r3, r3, #2
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d108      	bne.n	8011a60 <ip4_route+0x78>
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681a      	ldr	r2, [r3, #0]
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	330c      	adds	r3, #12
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d101      	bne.n	8011a60 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	e028      	b.n	8011ab2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	60fb      	str	r3, [r7, #12]
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d1c5      	bne.n	80119f8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011a6c:	4b15      	ldr	r3, [pc, #84]	@ (8011ac4 <ip4_route+0xdc>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d01a      	beq.n	8011aaa <ip4_route+0xc2>
 8011a74:	4b13      	ldr	r3, [pc, #76]	@ (8011ac4 <ip4_route+0xdc>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011a7c:	f003 0301 	and.w	r3, r3, #1
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d012      	beq.n	8011aaa <ip4_route+0xc2>
 8011a84:	4b0f      	ldr	r3, [pc, #60]	@ (8011ac4 <ip4_route+0xdc>)
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011a8c:	f003 0304 	and.w	r3, r3, #4
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d00a      	beq.n	8011aaa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011a94:	4b0b      	ldr	r3, [pc, #44]	@ (8011ac4 <ip4_route+0xdc>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	3304      	adds	r3, #4
 8011a9a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d004      	beq.n	8011aaa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	b2db      	uxtb	r3, r3
 8011aa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8011aa8:	d101      	bne.n	8011aae <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	e001      	b.n	8011ab2 <ip4_route+0xca>
  }

  return netif_default;
 8011aae:	4b05      	ldr	r3, [pc, #20]	@ (8011ac4 <ip4_route+0xdc>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3714      	adds	r7, #20
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abc:	4770      	bx	lr
 8011abe:	bf00      	nop
 8011ac0:	200089b8 	.word	0x200089b8
 8011ac4:	200089bc 	.word	0x200089bc

08011ac8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011ad6:	f003 0301 	and.w	r3, r3, #1
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d016      	beq.n	8011b0e <ip4_input_accept+0x46>
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	3304      	adds	r3, #4
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d011      	beq.n	8011b0e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011aea:	4b0b      	ldr	r3, [pc, #44]	@ (8011b18 <ip4_input_accept+0x50>)
 8011aec:	695a      	ldr	r2, [r3, #20]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	3304      	adds	r3, #4
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d008      	beq.n	8011b0a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011af8:	4b07      	ldr	r3, [pc, #28]	@ (8011b18 <ip4_input_accept+0x50>)
 8011afa:	695b      	ldr	r3, [r3, #20]
 8011afc:	6879      	ldr	r1, [r7, #4]
 8011afe:	4618      	mov	r0, r3
 8011b00:	f000 fa08 	bl	8011f14 <ip4_addr_isbroadcast_u32>
 8011b04:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d001      	beq.n	8011b0e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	e000      	b.n	8011b10 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011b0e:	2300      	movs	r3, #0
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3708      	adds	r7, #8
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}
 8011b18:	20005694 	.word	0x20005694

08011b1c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b086      	sub	sp, #24
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	781b      	ldrb	r3, [r3, #0]
 8011b30:	091b      	lsrs	r3, r3, #4
 8011b32:	b2db      	uxtb	r3, r3
 8011b34:	2b04      	cmp	r3, #4
 8011b36:	d004      	beq.n	8011b42 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f7f8 fb9f 	bl	800a27c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	e107      	b.n	8011d52 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011b42:	697b      	ldr	r3, [r7, #20]
 8011b44:	781b      	ldrb	r3, [r3, #0]
 8011b46:	f003 030f 	and.w	r3, r3, #15
 8011b4a:	b2db      	uxtb	r3, r3
 8011b4c:	009b      	lsls	r3, r3, #2
 8011b4e:	b2db      	uxtb	r3, r3
 8011b50:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	885b      	ldrh	r3, [r3, #2]
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7f7 f831 	bl	8008bc0 <lwip_htons>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	891b      	ldrh	r3, [r3, #8]
 8011b66:	89ba      	ldrh	r2, [r7, #12]
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d204      	bcs.n	8011b76 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011b6c:	89bb      	ldrh	r3, [r7, #12]
 8011b6e:	4619      	mov	r1, r3
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f7f8 f9fd 	bl	8009f70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	895b      	ldrh	r3, [r3, #10]
 8011b7a:	89fa      	ldrh	r2, [r7, #14]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d807      	bhi.n	8011b90 <ip4_input+0x74>
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	891b      	ldrh	r3, [r3, #8]
 8011b84:	89ba      	ldrh	r2, [r7, #12]
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d802      	bhi.n	8011b90 <ip4_input+0x74>
 8011b8a:	89fb      	ldrh	r3, [r7, #14]
 8011b8c:	2b13      	cmp	r3, #19
 8011b8e:	d804      	bhi.n	8011b9a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f7f8 fb73 	bl	800a27c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011b96:	2300      	movs	r3, #0
 8011b98:	e0db      	b.n	8011d52 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011b9a:	697b      	ldr	r3, [r7, #20]
 8011b9c:	691b      	ldr	r3, [r3, #16]
 8011b9e:	4a6f      	ldr	r2, [pc, #444]	@ (8011d5c <ip4_input+0x240>)
 8011ba0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	68db      	ldr	r3, [r3, #12]
 8011ba6:	4a6d      	ldr	r2, [pc, #436]	@ (8011d5c <ip4_input+0x240>)
 8011ba8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011baa:	4b6c      	ldr	r3, [pc, #432]	@ (8011d5c <ip4_input+0x240>)
 8011bac:	695b      	ldr	r3, [r3, #20]
 8011bae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011bb2:	2be0      	cmp	r3, #224	@ 0xe0
 8011bb4:	d112      	bne.n	8011bdc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011bbc:	f003 0301 	and.w	r3, r3, #1
 8011bc0:	b2db      	uxtb	r3, r3
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d007      	beq.n	8011bd6 <ip4_input+0xba>
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	3304      	adds	r3, #4
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d002      	beq.n	8011bd6 <ip4_input+0xba>
      netif = inp;
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	613b      	str	r3, [r7, #16]
 8011bd4:	e02a      	b.n	8011c2c <ip4_input+0x110>
    } else {
      netif = NULL;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	613b      	str	r3, [r7, #16]
 8011bda:	e027      	b.n	8011c2c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011bdc:	6838      	ldr	r0, [r7, #0]
 8011bde:	f7ff ff73 	bl	8011ac8 <ip4_input_accept>
 8011be2:	4603      	mov	r3, r0
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d002      	beq.n	8011bee <ip4_input+0xd2>
      netif = inp;
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	613b      	str	r3, [r7, #16]
 8011bec:	e01e      	b.n	8011c2c <ip4_input+0x110>
    } else {
      netif = NULL;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011bf2:	4b5a      	ldr	r3, [pc, #360]	@ (8011d5c <ip4_input+0x240>)
 8011bf4:	695b      	ldr	r3, [r3, #20]
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	2b7f      	cmp	r3, #127	@ 0x7f
 8011bfa:	d017      	beq.n	8011c2c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011bfc:	4b58      	ldr	r3, [pc, #352]	@ (8011d60 <ip4_input+0x244>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	613b      	str	r3, [r7, #16]
 8011c02:	e00e      	b.n	8011c22 <ip4_input+0x106>
          if (netif == inp) {
 8011c04:	693a      	ldr	r2, [r7, #16]
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d006      	beq.n	8011c1a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011c0c:	6938      	ldr	r0, [r7, #16]
 8011c0e:	f7ff ff5b 	bl	8011ac8 <ip4_input_accept>
 8011c12:	4603      	mov	r3, r0
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d108      	bne.n	8011c2a <ip4_input+0x10e>
 8011c18:	e000      	b.n	8011c1c <ip4_input+0x100>
            continue;
 8011c1a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	613b      	str	r3, [r7, #16]
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d1ed      	bne.n	8011c04 <ip4_input+0xe8>
 8011c28:	e000      	b.n	8011c2c <ip4_input+0x110>
            break;
 8011c2a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8011d5c <ip4_input+0x240>)
 8011c2e:	691b      	ldr	r3, [r3, #16]
 8011c30:	6839      	ldr	r1, [r7, #0]
 8011c32:	4618      	mov	r0, r3
 8011c34:	f000 f96e 	bl	8011f14 <ip4_addr_isbroadcast_u32>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d105      	bne.n	8011c4a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011c3e:	4b47      	ldr	r3, [pc, #284]	@ (8011d5c <ip4_input+0x240>)
 8011c40:	691b      	ldr	r3, [r3, #16]
 8011c42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011c46:	2be0      	cmp	r3, #224	@ 0xe0
 8011c48:	d104      	bne.n	8011c54 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f7f8 fb16 	bl	800a27c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011c50:	2300      	movs	r3, #0
 8011c52:	e07e      	b.n	8011d52 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d104      	bne.n	8011c64 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f7f8 fb0e 	bl	800a27c <pbuf_free>
    return ERR_OK;
 8011c60:	2300      	movs	r3, #0
 8011c62:	e076      	b.n	8011d52 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	88db      	ldrh	r3, [r3, #6]
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8011c70:	4013      	ands	r3, r2
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d00b      	beq.n	8011c8e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f000 fc92 	bl	80125a0 <ip4_reass>
 8011c7c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d101      	bne.n	8011c88 <ip4_input+0x16c>
      return ERR_OK;
 8011c84:	2300      	movs	r3, #0
 8011c86:	e064      	b.n	8011d52 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	685b      	ldr	r3, [r3, #4]
 8011c8c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011c8e:	4a33      	ldr	r2, [pc, #204]	@ (8011d5c <ip4_input+0x240>)
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011c94:	4a31      	ldr	r2, [pc, #196]	@ (8011d5c <ip4_input+0x240>)
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011c9a:	4a30      	ldr	r2, [pc, #192]	@ (8011d5c <ip4_input+0x240>)
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	781b      	ldrb	r3, [r3, #0]
 8011ca4:	f003 030f 	and.w	r3, r3, #15
 8011ca8:	b2db      	uxtb	r3, r3
 8011caa:	009b      	lsls	r3, r3, #2
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	461a      	mov	r2, r3
 8011cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8011d5c <ip4_input+0x240>)
 8011cb2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011cb4:	89fb      	ldrh	r3, [r7, #14]
 8011cb6:	4619      	mov	r1, r3
 8011cb8:	6878      	ldr	r0, [r7, #4]
 8011cba:	f7f8 fa59 	bl	800a170 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	7a5b      	ldrb	r3, [r3, #9]
 8011cc2:	2b11      	cmp	r3, #17
 8011cc4:	d006      	beq.n	8011cd4 <ip4_input+0x1b8>
 8011cc6:	2b11      	cmp	r3, #17
 8011cc8:	dc13      	bgt.n	8011cf2 <ip4_input+0x1d6>
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d00c      	beq.n	8011ce8 <ip4_input+0x1cc>
 8011cce:	2b06      	cmp	r3, #6
 8011cd0:	d005      	beq.n	8011cde <ip4_input+0x1c2>
 8011cd2:	e00e      	b.n	8011cf2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011cd4:	6839      	ldr	r1, [r7, #0]
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f7fe f950 	bl	800ff7c <udp_input>
        break;
 8011cdc:	e026      	b.n	8011d2c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011cde:	6839      	ldr	r1, [r7, #0]
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f7fa f997 	bl	800c014 <tcp_input>
        break;
 8011ce6:	e021      	b.n	8011d2c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011ce8:	6839      	ldr	r1, [r7, #0]
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f7ff fcee 	bl	80116cc <icmp_input>
        break;
 8011cf0:	e01c      	b.n	8011d2c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8011d5c <ip4_input+0x240>)
 8011cf4:	695b      	ldr	r3, [r3, #20]
 8011cf6:	6939      	ldr	r1, [r7, #16]
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f000 f90b 	bl	8011f14 <ip4_addr_isbroadcast_u32>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d10f      	bne.n	8011d24 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011d04:	4b15      	ldr	r3, [pc, #84]	@ (8011d5c <ip4_input+0x240>)
 8011d06:	695b      	ldr	r3, [r3, #20]
 8011d08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011d0c:	2be0      	cmp	r3, #224	@ 0xe0
 8011d0e:	d009      	beq.n	8011d24 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011d10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011d14:	4619      	mov	r1, r3
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f7f8 fa9d 	bl	800a256 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011d1c:	2102      	movs	r1, #2
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f7ff fdd8 	bl	80118d4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f7f8 faa9 	bl	800a27c <pbuf_free>
        break;
 8011d2a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8011d5c <ip4_input+0x240>)
 8011d2e:	2200      	movs	r2, #0
 8011d30:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011d32:	4b0a      	ldr	r3, [pc, #40]	@ (8011d5c <ip4_input+0x240>)
 8011d34:	2200      	movs	r2, #0
 8011d36:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011d38:	4b08      	ldr	r3, [pc, #32]	@ (8011d5c <ip4_input+0x240>)
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011d3e:	4b07      	ldr	r3, [pc, #28]	@ (8011d5c <ip4_input+0x240>)
 8011d40:	2200      	movs	r2, #0
 8011d42:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011d44:	4b05      	ldr	r3, [pc, #20]	@ (8011d5c <ip4_input+0x240>)
 8011d46:	2200      	movs	r2, #0
 8011d48:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011d4a:	4b04      	ldr	r3, [pc, #16]	@ (8011d5c <ip4_input+0x240>)
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011d50:	2300      	movs	r3, #0
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	3718      	adds	r7, #24
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}
 8011d5a:	bf00      	nop
 8011d5c:	20005694 	.word	0x20005694
 8011d60:	200089b8 	.word	0x200089b8

08011d64 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b08a      	sub	sp, #40	@ 0x28
 8011d68:	af04      	add	r7, sp, #16
 8011d6a:	60f8      	str	r0, [r7, #12]
 8011d6c:	60b9      	str	r1, [r7, #8]
 8011d6e:	607a      	str	r2, [r7, #4]
 8011d70:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d009      	beq.n	8011d90 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d003      	beq.n	8011d8a <ip4_output_if+0x26>
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d102      	bne.n	8011d90 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d8c:	3304      	adds	r3, #4
 8011d8e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011d90:	78fa      	ldrb	r2, [r7, #3]
 8011d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d94:	9302      	str	r3, [sp, #8]
 8011d96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011d9a:	9301      	str	r3, [sp, #4]
 8011d9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011da0:	9300      	str	r3, [sp, #0]
 8011da2:	4613      	mov	r3, r2
 8011da4:	687a      	ldr	r2, [r7, #4]
 8011da6:	6979      	ldr	r1, [r7, #20]
 8011da8:	68f8      	ldr	r0, [r7, #12]
 8011daa:	f000 f805 	bl	8011db8 <ip4_output_if_src>
 8011dae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3718      	adds	r7, #24
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b088      	sub	sp, #32
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	60f8      	str	r0, [r7, #12]
 8011dc0:	60b9      	str	r1, [r7, #8]
 8011dc2:	607a      	str	r2, [r7, #4]
 8011dc4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	7b9b      	ldrb	r3, [r3, #14]
 8011dca:	2b01      	cmp	r3, #1
 8011dcc:	d006      	beq.n	8011ddc <ip4_output_if_src+0x24>
 8011dce:	4b4b      	ldr	r3, [pc, #300]	@ (8011efc <ip4_output_if_src+0x144>)
 8011dd0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8011dd4:	494a      	ldr	r1, [pc, #296]	@ (8011f00 <ip4_output_if_src+0x148>)
 8011dd6:	484b      	ldr	r0, [pc, #300]	@ (8011f04 <ip4_output_if_src+0x14c>)
 8011dd8:	f001 fa40 	bl	801325c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d060      	beq.n	8011ea4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011de2:	2314      	movs	r3, #20
 8011de4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011de6:	2114      	movs	r1, #20
 8011de8:	68f8      	ldr	r0, [r7, #12]
 8011dea:	f7f8 f9b1 	bl	800a150 <pbuf_add_header>
 8011dee:	4603      	mov	r3, r0
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d002      	beq.n	8011dfa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011df4:	f06f 0301 	mvn.w	r3, #1
 8011df8:	e07c      	b.n	8011ef4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	895b      	ldrh	r3, [r3, #10]
 8011e04:	2b13      	cmp	r3, #19
 8011e06:	d806      	bhi.n	8011e16 <ip4_output_if_src+0x5e>
 8011e08:	4b3c      	ldr	r3, [pc, #240]	@ (8011efc <ip4_output_if_src+0x144>)
 8011e0a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8011e0e:	493e      	ldr	r1, [pc, #248]	@ (8011f08 <ip4_output_if_src+0x150>)
 8011e10:	483c      	ldr	r0, [pc, #240]	@ (8011f04 <ip4_output_if_src+0x14c>)
 8011e12:	f001 fa23 	bl	801325c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011e16:	69fb      	ldr	r3, [r7, #28]
 8011e18:	78fa      	ldrb	r2, [r7, #3]
 8011e1a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011e1c:	69fb      	ldr	r3, [r7, #28]
 8011e1e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8011e22:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681a      	ldr	r2, [r3, #0]
 8011e28:	69fb      	ldr	r3, [r7, #28]
 8011e2a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011e2c:	8b7b      	ldrh	r3, [r7, #26]
 8011e2e:	089b      	lsrs	r3, r3, #2
 8011e30:	b29b      	uxth	r3, r3
 8011e32:	b2db      	uxtb	r3, r3
 8011e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e38:	b2da      	uxtb	r2, r3
 8011e3a:	69fb      	ldr	r3, [r7, #28]
 8011e3c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011e3e:	69fb      	ldr	r3, [r7, #28]
 8011e40:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011e44:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	891b      	ldrh	r3, [r3, #8]
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7f6 feb8 	bl	8008bc0 <lwip_htons>
 8011e50:	4603      	mov	r3, r0
 8011e52:	461a      	mov	r2, r3
 8011e54:	69fb      	ldr	r3, [r7, #28]
 8011e56:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011e58:	69fb      	ldr	r3, [r7, #28]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	719a      	strb	r2, [r3, #6]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011e62:	4b2a      	ldr	r3, [pc, #168]	@ (8011f0c <ip4_output_if_src+0x154>)
 8011e64:	881b      	ldrh	r3, [r3, #0]
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7f6 feaa 	bl	8008bc0 <lwip_htons>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	461a      	mov	r2, r3
 8011e70:	69fb      	ldr	r3, [r7, #28]
 8011e72:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011e74:	4b25      	ldr	r3, [pc, #148]	@ (8011f0c <ip4_output_if_src+0x154>)
 8011e76:	881b      	ldrh	r3, [r3, #0]
 8011e78:	3301      	adds	r3, #1
 8011e7a:	b29a      	uxth	r2, r3
 8011e7c:	4b23      	ldr	r3, [pc, #140]	@ (8011f0c <ip4_output_if_src+0x154>)
 8011e7e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d104      	bne.n	8011e90 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011e86:	4b22      	ldr	r3, [pc, #136]	@ (8011f10 <ip4_output_if_src+0x158>)
 8011e88:	681a      	ldr	r2, [r3, #0]
 8011e8a:	69fb      	ldr	r3, [r7, #28]
 8011e8c:	60da      	str	r2, [r3, #12]
 8011e8e:	e003      	b.n	8011e98 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	681a      	ldr	r2, [r3, #0]
 8011e94:	69fb      	ldr	r3, [r7, #28]
 8011e96:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011e98:	69fb      	ldr	r3, [r7, #28]
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	729a      	strb	r2, [r3, #10]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	72da      	strb	r2, [r3, #11]
 8011ea2:	e00f      	b.n	8011ec4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	895b      	ldrh	r3, [r3, #10]
 8011ea8:	2b13      	cmp	r3, #19
 8011eaa:	d802      	bhi.n	8011eb2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011eac:	f06f 0301 	mvn.w	r3, #1
 8011eb0:	e020      	b.n	8011ef4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	685b      	ldr	r3, [r3, #4]
 8011eb6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011eb8:	69fb      	ldr	r3, [r7, #28]
 8011eba:	691b      	ldr	r3, [r3, #16]
 8011ebc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011ebe:	f107 0314 	add.w	r3, r7, #20
 8011ec2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ec6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d00c      	beq.n	8011ee6 <ip4_output_if_src+0x12e>
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	891a      	ldrh	r2, [r3, #8]
 8011ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ed2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d906      	bls.n	8011ee6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011ed8:	687a      	ldr	r2, [r7, #4]
 8011eda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011edc:	68f8      	ldr	r0, [r7, #12]
 8011ede:	f000 fd53 	bl	8012988 <ip4_frag>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	e006      	b.n	8011ef4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ee8:	695b      	ldr	r3, [r3, #20]
 8011eea:	687a      	ldr	r2, [r7, #4]
 8011eec:	68f9      	ldr	r1, [r7, #12]
 8011eee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011ef0:	4798      	blx	r3
 8011ef2:	4603      	mov	r3, r0
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3720      	adds	r7, #32
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}
 8011efc:	08016da8 	.word	0x08016da8
 8011f00:	08016ddc 	.word	0x08016ddc
 8011f04:	08016de8 	.word	0x08016de8
 8011f08:	08016e10 	.word	0x08016e10
 8011f0c:	20008b16 	.word	0x20008b16
 8011f10:	080171f0 	.word	0x080171f0

08011f14 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011f14:	b480      	push	{r7}
 8011f16:	b085      	sub	sp, #20
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f28:	d002      	beq.n	8011f30 <ip4_addr_isbroadcast_u32+0x1c>
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d101      	bne.n	8011f34 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011f30:	2301      	movs	r3, #1
 8011f32:	e02a      	b.n	8011f8a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011f3a:	f003 0302 	and.w	r3, r3, #2
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d101      	bne.n	8011f46 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011f42:	2300      	movs	r3, #0
 8011f44:	e021      	b.n	8011f8a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	3304      	adds	r3, #4
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	687a      	ldr	r2, [r7, #4]
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d101      	bne.n	8011f56 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011f52:	2300      	movs	r3, #0
 8011f54:	e019      	b.n	8011f8a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011f56:	68fa      	ldr	r2, [r7, #12]
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	3304      	adds	r3, #4
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	405a      	eors	r2, r3
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	3308      	adds	r3, #8
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	4013      	ands	r3, r2
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d10d      	bne.n	8011f88 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	3308      	adds	r3, #8
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	43da      	mvns	r2, r3
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011f78:	683b      	ldr	r3, [r7, #0]
 8011f7a:	3308      	adds	r3, #8
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d101      	bne.n	8011f88 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011f84:	2301      	movs	r3, #1
 8011f86:	e000      	b.n	8011f8a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011f88:	2300      	movs	r3, #0
  }
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3714      	adds	r7, #20
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f94:	4770      	bx	lr
	...

08011f98 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b084      	sub	sp, #16
 8011f9c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011fa2:	4b12      	ldr	r3, [pc, #72]	@ (8011fec <ip_reass_tmr+0x54>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011fa8:	e018      	b.n	8011fdc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	7fdb      	ldrb	r3, [r3, #31]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d00b      	beq.n	8011fca <ip_reass_tmr+0x32>
      r->timer--;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	7fdb      	ldrb	r3, [r3, #31]
 8011fb6:	3b01      	subs	r3, #1
 8011fb8:	b2da      	uxtb	r2, r3
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	60fb      	str	r3, [r7, #12]
 8011fc8:	e008      	b.n	8011fdc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011fd4:	68b9      	ldr	r1, [r7, #8]
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f000 f80a 	bl	8011ff0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d1e3      	bne.n	8011faa <ip_reass_tmr+0x12>
    }
  }
}
 8011fe2:	bf00      	nop
 8011fe4:	bf00      	nop
 8011fe6:	3710      	adds	r7, #16
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}
 8011fec:	20008b18 	.word	0x20008b18

08011ff0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b088      	sub	sp, #32
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011ffe:	683a      	ldr	r2, [r7, #0]
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	429a      	cmp	r2, r3
 8012004:	d105      	bne.n	8012012 <ip_reass_free_complete_datagram+0x22>
 8012006:	4b45      	ldr	r3, [pc, #276]	@ (801211c <ip_reass_free_complete_datagram+0x12c>)
 8012008:	22ab      	movs	r2, #171	@ 0xab
 801200a:	4945      	ldr	r1, [pc, #276]	@ (8012120 <ip_reass_free_complete_datagram+0x130>)
 801200c:	4845      	ldr	r0, [pc, #276]	@ (8012124 <ip_reass_free_complete_datagram+0x134>)
 801200e:	f001 f925 	bl	801325c <iprintf>
  if (prev != NULL) {
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d00a      	beq.n	801202e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	429a      	cmp	r2, r3
 8012020:	d005      	beq.n	801202e <ip_reass_free_complete_datagram+0x3e>
 8012022:	4b3e      	ldr	r3, [pc, #248]	@ (801211c <ip_reass_free_complete_datagram+0x12c>)
 8012024:	22ad      	movs	r2, #173	@ 0xad
 8012026:	4940      	ldr	r1, [pc, #256]	@ (8012128 <ip_reass_free_complete_datagram+0x138>)
 8012028:	483e      	ldr	r0, [pc, #248]	@ (8012124 <ip_reass_free_complete_datagram+0x134>)
 801202a:	f001 f917 	bl	801325c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	685b      	ldr	r3, [r3, #4]
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	889b      	ldrh	r3, [r3, #4]
 801203a:	b29b      	uxth	r3, r3
 801203c:	2b00      	cmp	r3, #0
 801203e:	d12a      	bne.n	8012096 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	685b      	ldr	r3, [r3, #4]
 8012044:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801204e:	69bb      	ldr	r3, [r7, #24]
 8012050:	6858      	ldr	r0, [r3, #4]
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	3308      	adds	r3, #8
 8012056:	2214      	movs	r2, #20
 8012058:	4619      	mov	r1, r3
 801205a:	f001 fa3e 	bl	80134da <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801205e:	2101      	movs	r1, #1
 8012060:	69b8      	ldr	r0, [r7, #24]
 8012062:	f7ff fc47 	bl	80118f4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012066:	69b8      	ldr	r0, [r7, #24]
 8012068:	f7f8 f990 	bl	800a38c <pbuf_clen>
 801206c:	4603      	mov	r3, r0
 801206e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012070:	8bfa      	ldrh	r2, [r7, #30]
 8012072:	8a7b      	ldrh	r3, [r7, #18]
 8012074:	4413      	add	r3, r2
 8012076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801207a:	db05      	blt.n	8012088 <ip_reass_free_complete_datagram+0x98>
 801207c:	4b27      	ldr	r3, [pc, #156]	@ (801211c <ip_reass_free_complete_datagram+0x12c>)
 801207e:	22bc      	movs	r2, #188	@ 0xbc
 8012080:	492a      	ldr	r1, [pc, #168]	@ (801212c <ip_reass_free_complete_datagram+0x13c>)
 8012082:	4828      	ldr	r0, [pc, #160]	@ (8012124 <ip_reass_free_complete_datagram+0x134>)
 8012084:	f001 f8ea 	bl	801325c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012088:	8bfa      	ldrh	r2, [r7, #30]
 801208a:	8a7b      	ldrh	r3, [r7, #18]
 801208c:	4413      	add	r3, r2
 801208e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012090:	69b8      	ldr	r0, [r7, #24]
 8012092:	f7f8 f8f3 	bl	800a27c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	685b      	ldr	r3, [r3, #4]
 801209a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801209c:	e01f      	b.n	80120de <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801209e:	69bb      	ldr	r3, [r7, #24]
 80120a0:	685b      	ldr	r3, [r3, #4]
 80120a2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80120a4:	69bb      	ldr	r3, [r7, #24]
 80120a6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80120ae:	68f8      	ldr	r0, [r7, #12]
 80120b0:	f7f8 f96c 	bl	800a38c <pbuf_clen>
 80120b4:	4603      	mov	r3, r0
 80120b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80120b8:	8bfa      	ldrh	r2, [r7, #30]
 80120ba:	8a7b      	ldrh	r3, [r7, #18]
 80120bc:	4413      	add	r3, r2
 80120be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80120c2:	db05      	blt.n	80120d0 <ip_reass_free_complete_datagram+0xe0>
 80120c4:	4b15      	ldr	r3, [pc, #84]	@ (801211c <ip_reass_free_complete_datagram+0x12c>)
 80120c6:	22cc      	movs	r2, #204	@ 0xcc
 80120c8:	4918      	ldr	r1, [pc, #96]	@ (801212c <ip_reass_free_complete_datagram+0x13c>)
 80120ca:	4816      	ldr	r0, [pc, #88]	@ (8012124 <ip_reass_free_complete_datagram+0x134>)
 80120cc:	f001 f8c6 	bl	801325c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80120d0:	8bfa      	ldrh	r2, [r7, #30]
 80120d2:	8a7b      	ldrh	r3, [r7, #18]
 80120d4:	4413      	add	r3, r2
 80120d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80120d8:	68f8      	ldr	r0, [r7, #12]
 80120da:	f7f8 f8cf 	bl	800a27c <pbuf_free>
  while (p != NULL) {
 80120de:	69bb      	ldr	r3, [r7, #24]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d1dc      	bne.n	801209e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80120e4:	6839      	ldr	r1, [r7, #0]
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f000 f8c2 	bl	8012270 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80120ec:	4b10      	ldr	r3, [pc, #64]	@ (8012130 <ip_reass_free_complete_datagram+0x140>)
 80120ee:	881b      	ldrh	r3, [r3, #0]
 80120f0:	8bfa      	ldrh	r2, [r7, #30]
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d905      	bls.n	8012102 <ip_reass_free_complete_datagram+0x112>
 80120f6:	4b09      	ldr	r3, [pc, #36]	@ (801211c <ip_reass_free_complete_datagram+0x12c>)
 80120f8:	22d2      	movs	r2, #210	@ 0xd2
 80120fa:	490e      	ldr	r1, [pc, #56]	@ (8012134 <ip_reass_free_complete_datagram+0x144>)
 80120fc:	4809      	ldr	r0, [pc, #36]	@ (8012124 <ip_reass_free_complete_datagram+0x134>)
 80120fe:	f001 f8ad 	bl	801325c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012102:	4b0b      	ldr	r3, [pc, #44]	@ (8012130 <ip_reass_free_complete_datagram+0x140>)
 8012104:	881a      	ldrh	r2, [r3, #0]
 8012106:	8bfb      	ldrh	r3, [r7, #30]
 8012108:	1ad3      	subs	r3, r2, r3
 801210a:	b29a      	uxth	r2, r3
 801210c:	4b08      	ldr	r3, [pc, #32]	@ (8012130 <ip_reass_free_complete_datagram+0x140>)
 801210e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012110:	8bfb      	ldrh	r3, [r7, #30]
}
 8012112:	4618      	mov	r0, r3
 8012114:	3720      	adds	r7, #32
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}
 801211a:	bf00      	nop
 801211c:	08016e40 	.word	0x08016e40
 8012120:	08016e7c 	.word	0x08016e7c
 8012124:	08016e88 	.word	0x08016e88
 8012128:	08016eb0 	.word	0x08016eb0
 801212c:	08016ec4 	.word	0x08016ec4
 8012130:	20008b1c 	.word	0x20008b1c
 8012134:	08016ee4 	.word	0x08016ee4

08012138 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b08a      	sub	sp, #40	@ 0x28
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012142:	2300      	movs	r3, #0
 8012144:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012146:	2300      	movs	r3, #0
 8012148:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801214a:	2300      	movs	r3, #0
 801214c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801214e:	2300      	movs	r3, #0
 8012150:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012152:	2300      	movs	r3, #0
 8012154:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012156:	4b28      	ldr	r3, [pc, #160]	@ (80121f8 <ip_reass_remove_oldest_datagram+0xc0>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801215c:	e030      	b.n	80121c0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012160:	695a      	ldr	r2, [r3, #20]
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	68db      	ldr	r3, [r3, #12]
 8012166:	429a      	cmp	r2, r3
 8012168:	d10c      	bne.n	8012184 <ip_reass_remove_oldest_datagram+0x4c>
 801216a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801216c:	699a      	ldr	r2, [r3, #24]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	691b      	ldr	r3, [r3, #16]
 8012172:	429a      	cmp	r2, r3
 8012174:	d106      	bne.n	8012184 <ip_reass_remove_oldest_datagram+0x4c>
 8012176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012178:	899a      	ldrh	r2, [r3, #12]
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	889b      	ldrh	r3, [r3, #4]
 801217e:	b29b      	uxth	r3, r3
 8012180:	429a      	cmp	r2, r3
 8012182:	d014      	beq.n	80121ae <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	3301      	adds	r3, #1
 8012188:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801218a:	6a3b      	ldr	r3, [r7, #32]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d104      	bne.n	801219a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012192:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	61bb      	str	r3, [r7, #24]
 8012198:	e009      	b.n	80121ae <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801219c:	7fda      	ldrb	r2, [r3, #31]
 801219e:	6a3b      	ldr	r3, [r7, #32]
 80121a0:	7fdb      	ldrb	r3, [r3, #31]
 80121a2:	429a      	cmp	r2, r3
 80121a4:	d803      	bhi.n	80121ae <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80121a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121a8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80121aa:	69fb      	ldr	r3, [r7, #28]
 80121ac:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80121ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d001      	beq.n	80121ba <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80121b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80121ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80121c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d1cb      	bne.n	801215e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80121c6:	6a3b      	ldr	r3, [r7, #32]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d008      	beq.n	80121de <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80121cc:	69b9      	ldr	r1, [r7, #24]
 80121ce:	6a38      	ldr	r0, [r7, #32]
 80121d0:	f7ff ff0e 	bl	8011ff0 <ip_reass_free_complete_datagram>
 80121d4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80121d6:	697a      	ldr	r2, [r7, #20]
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	4413      	add	r3, r2
 80121dc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80121de:	697a      	ldr	r2, [r7, #20]
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	429a      	cmp	r2, r3
 80121e4:	da02      	bge.n	80121ec <ip_reass_remove_oldest_datagram+0xb4>
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	dcac      	bgt.n	8012146 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80121ec:	697b      	ldr	r3, [r7, #20]
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3728      	adds	r7, #40	@ 0x28
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}
 80121f6:	bf00      	nop
 80121f8:	20008b18 	.word	0x20008b18

080121fc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b084      	sub	sp, #16
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012206:	2004      	movs	r0, #4
 8012208:	f7f7 f952 	bl	80094b0 <memp_malloc>
 801220c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d110      	bne.n	8012236 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012214:	6839      	ldr	r1, [r7, #0]
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f7ff ff8e 	bl	8012138 <ip_reass_remove_oldest_datagram>
 801221c:	4602      	mov	r2, r0
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	4293      	cmp	r3, r2
 8012222:	dc03      	bgt.n	801222c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012224:	2004      	movs	r0, #4
 8012226:	f7f7 f943 	bl	80094b0 <memp_malloc>
 801222a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d101      	bne.n	8012236 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012232:	2300      	movs	r3, #0
 8012234:	e016      	b.n	8012264 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012236:	2220      	movs	r2, #32
 8012238:	2100      	movs	r1, #0
 801223a:	68f8      	ldr	r0, [r7, #12]
 801223c:	f001 f8af 	bl	801339e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	220f      	movs	r2, #15
 8012244:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012246:	4b09      	ldr	r3, [pc, #36]	@ (801226c <ip_reass_enqueue_new_datagram+0x70>)
 8012248:	681a      	ldr	r2, [r3, #0]
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801224e:	4a07      	ldr	r2, [pc, #28]	@ (801226c <ip_reass_enqueue_new_datagram+0x70>)
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	3308      	adds	r3, #8
 8012258:	2214      	movs	r2, #20
 801225a:	6879      	ldr	r1, [r7, #4]
 801225c:	4618      	mov	r0, r3
 801225e:	f001 f93c 	bl	80134da <memcpy>
  return ipr;
 8012262:	68fb      	ldr	r3, [r7, #12]
}
 8012264:	4618      	mov	r0, r3
 8012266:	3710      	adds	r7, #16
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}
 801226c:	20008b18 	.word	0x20008b18

08012270 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b082      	sub	sp, #8
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801227a:	4b10      	ldr	r3, [pc, #64]	@ (80122bc <ip_reass_dequeue_datagram+0x4c>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	687a      	ldr	r2, [r7, #4]
 8012280:	429a      	cmp	r2, r3
 8012282:	d104      	bne.n	801228e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	4a0c      	ldr	r2, [pc, #48]	@ (80122bc <ip_reass_dequeue_datagram+0x4c>)
 801228a:	6013      	str	r3, [r2, #0]
 801228c:	e00d      	b.n	80122aa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d106      	bne.n	80122a2 <ip_reass_dequeue_datagram+0x32>
 8012294:	4b0a      	ldr	r3, [pc, #40]	@ (80122c0 <ip_reass_dequeue_datagram+0x50>)
 8012296:	f240 1245 	movw	r2, #325	@ 0x145
 801229a:	490a      	ldr	r1, [pc, #40]	@ (80122c4 <ip_reass_dequeue_datagram+0x54>)
 801229c:	480a      	ldr	r0, [pc, #40]	@ (80122c8 <ip_reass_dequeue_datagram+0x58>)
 801229e:	f000 ffdd 	bl	801325c <iprintf>
    prev->next = ipr->next;
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681a      	ldr	r2, [r3, #0]
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80122aa:	6879      	ldr	r1, [r7, #4]
 80122ac:	2004      	movs	r0, #4
 80122ae:	f7f7 f96f 	bl	8009590 <memp_free>
}
 80122b2:	bf00      	nop
 80122b4:	3708      	adds	r7, #8
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	20008b18 	.word	0x20008b18
 80122c0:	08016e40 	.word	0x08016e40
 80122c4:	08016f08 	.word	0x08016f08
 80122c8:	08016e88 	.word	0x08016e88

080122cc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b08c      	sub	sp, #48	@ 0x30
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	60f8      	str	r0, [r7, #12]
 80122d4:	60b9      	str	r1, [r7, #8]
 80122d6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80122d8:	2300      	movs	r3, #0
 80122da:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80122dc:	2301      	movs	r3, #1
 80122de:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80122e0:	68bb      	ldr	r3, [r7, #8]
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80122e6:	69fb      	ldr	r3, [r7, #28]
 80122e8:	885b      	ldrh	r3, [r3, #2]
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7f6 fc67 	bl	8008bc0 <lwip_htons>
 80122f2:	4603      	mov	r3, r0
 80122f4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80122f6:	69fb      	ldr	r3, [r7, #28]
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	f003 030f 	and.w	r3, r3, #15
 80122fe:	b2db      	uxtb	r3, r3
 8012300:	009b      	lsls	r3, r3, #2
 8012302:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012304:	7e7b      	ldrb	r3, [r7, #25]
 8012306:	b29b      	uxth	r3, r3
 8012308:	8b7a      	ldrh	r2, [r7, #26]
 801230a:	429a      	cmp	r2, r3
 801230c:	d202      	bcs.n	8012314 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801230e:	f04f 33ff 	mov.w	r3, #4294967295
 8012312:	e135      	b.n	8012580 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012314:	7e7b      	ldrb	r3, [r7, #25]
 8012316:	b29b      	uxth	r3, r3
 8012318:	8b7a      	ldrh	r2, [r7, #26]
 801231a:	1ad3      	subs	r3, r2, r3
 801231c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801231e:	69fb      	ldr	r3, [r7, #28]
 8012320:	88db      	ldrh	r3, [r3, #6]
 8012322:	b29b      	uxth	r3, r3
 8012324:	4618      	mov	r0, r3
 8012326:	f7f6 fc4b 	bl	8008bc0 <lwip_htons>
 801232a:	4603      	mov	r3, r0
 801232c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012330:	b29b      	uxth	r3, r3
 8012332:	00db      	lsls	r3, r3, #3
 8012334:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	685b      	ldr	r3, [r3, #4]
 801233a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801233c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801233e:	2200      	movs	r2, #0
 8012340:	701a      	strb	r2, [r3, #0]
 8012342:	2200      	movs	r2, #0
 8012344:	705a      	strb	r2, [r3, #1]
 8012346:	2200      	movs	r2, #0
 8012348:	709a      	strb	r2, [r3, #2]
 801234a:	2200      	movs	r2, #0
 801234c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801234e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012350:	8afa      	ldrh	r2, [r7, #22]
 8012352:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012354:	8afa      	ldrh	r2, [r7, #22]
 8012356:	8b7b      	ldrh	r3, [r7, #26]
 8012358:	4413      	add	r3, r2
 801235a:	b29a      	uxth	r2, r3
 801235c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801235e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012362:	88db      	ldrh	r3, [r3, #6]
 8012364:	b29b      	uxth	r3, r3
 8012366:	8afa      	ldrh	r2, [r7, #22]
 8012368:	429a      	cmp	r2, r3
 801236a:	d902      	bls.n	8012372 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801236c:	f04f 33ff 	mov.w	r3, #4294967295
 8012370:	e106      	b.n	8012580 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	627b      	str	r3, [r7, #36]	@ 0x24
 8012378:	e068      	b.n	801244c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012382:	889b      	ldrh	r3, [r3, #4]
 8012384:	b29a      	uxth	r2, r3
 8012386:	693b      	ldr	r3, [r7, #16]
 8012388:	889b      	ldrh	r3, [r3, #4]
 801238a:	b29b      	uxth	r3, r3
 801238c:	429a      	cmp	r2, r3
 801238e:	d235      	bcs.n	80123fc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012394:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012398:	2b00      	cmp	r3, #0
 801239a:	d020      	beq.n	80123de <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801239c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801239e:	889b      	ldrh	r3, [r3, #4]
 80123a0:	b29a      	uxth	r2, r3
 80123a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123a4:	88db      	ldrh	r3, [r3, #6]
 80123a6:	b29b      	uxth	r3, r3
 80123a8:	429a      	cmp	r2, r3
 80123aa:	d307      	bcc.n	80123bc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80123ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123ae:	88db      	ldrh	r3, [r3, #6]
 80123b0:	b29a      	uxth	r2, r3
 80123b2:	693b      	ldr	r3, [r7, #16]
 80123b4:	889b      	ldrh	r3, [r3, #4]
 80123b6:	b29b      	uxth	r3, r3
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d902      	bls.n	80123c2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80123bc:	f04f 33ff 	mov.w	r3, #4294967295
 80123c0:	e0de      	b.n	8012580 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80123c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123c4:	68ba      	ldr	r2, [r7, #8]
 80123c6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80123c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123ca:	88db      	ldrh	r3, [r3, #6]
 80123cc:	b29a      	uxth	r2, r3
 80123ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123d0:	889b      	ldrh	r3, [r3, #4]
 80123d2:	b29b      	uxth	r3, r3
 80123d4:	429a      	cmp	r2, r3
 80123d6:	d03d      	beq.n	8012454 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80123d8:	2300      	movs	r3, #0
 80123da:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80123dc:	e03a      	b.n	8012454 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80123de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123e0:	88db      	ldrh	r3, [r3, #6]
 80123e2:	b29a      	uxth	r2, r3
 80123e4:	693b      	ldr	r3, [r7, #16]
 80123e6:	889b      	ldrh	r3, [r3, #4]
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d902      	bls.n	80123f4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80123ee:	f04f 33ff 	mov.w	r3, #4294967295
 80123f2:	e0c5      	b.n	8012580 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	68ba      	ldr	r2, [r7, #8]
 80123f8:	605a      	str	r2, [r3, #4]
      break;
 80123fa:	e02b      	b.n	8012454 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80123fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123fe:	889b      	ldrh	r3, [r3, #4]
 8012400:	b29a      	uxth	r2, r3
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	889b      	ldrh	r3, [r3, #4]
 8012406:	b29b      	uxth	r3, r3
 8012408:	429a      	cmp	r2, r3
 801240a:	d102      	bne.n	8012412 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801240c:	f04f 33ff 	mov.w	r3, #4294967295
 8012410:	e0b6      	b.n	8012580 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012414:	889b      	ldrh	r3, [r3, #4]
 8012416:	b29a      	uxth	r2, r3
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	88db      	ldrh	r3, [r3, #6]
 801241c:	b29b      	uxth	r3, r3
 801241e:	429a      	cmp	r2, r3
 8012420:	d202      	bcs.n	8012428 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012422:	f04f 33ff 	mov.w	r3, #4294967295
 8012426:	e0ab      	b.n	8012580 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801242a:	2b00      	cmp	r3, #0
 801242c:	d009      	beq.n	8012442 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801242e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012430:	88db      	ldrh	r3, [r3, #6]
 8012432:	b29a      	uxth	r2, r3
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	889b      	ldrh	r3, [r3, #4]
 8012438:	b29b      	uxth	r3, r3
 801243a:	429a      	cmp	r2, r3
 801243c:	d001      	beq.n	8012442 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801243e:	2300      	movs	r3, #0
 8012440:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012442:	693b      	ldr	r3, [r7, #16]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8012448:	693b      	ldr	r3, [r7, #16]
 801244a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801244e:	2b00      	cmp	r3, #0
 8012450:	d193      	bne.n	801237a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012452:	e000      	b.n	8012456 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012454:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012458:	2b00      	cmp	r3, #0
 801245a:	d12d      	bne.n	80124b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801245c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801245e:	2b00      	cmp	r3, #0
 8012460:	d01c      	beq.n	801249c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012464:	88db      	ldrh	r3, [r3, #6]
 8012466:	b29a      	uxth	r2, r3
 8012468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801246a:	889b      	ldrh	r3, [r3, #4]
 801246c:	b29b      	uxth	r3, r3
 801246e:	429a      	cmp	r2, r3
 8012470:	d906      	bls.n	8012480 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012472:	4b45      	ldr	r3, [pc, #276]	@ (8012588 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012474:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8012478:	4944      	ldr	r1, [pc, #272]	@ (801258c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801247a:	4845      	ldr	r0, [pc, #276]	@ (8012590 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801247c:	f000 feee 	bl	801325c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012482:	68ba      	ldr	r2, [r7, #8]
 8012484:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012488:	88db      	ldrh	r3, [r3, #6]
 801248a:	b29a      	uxth	r2, r3
 801248c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801248e:	889b      	ldrh	r3, [r3, #4]
 8012490:	b29b      	uxth	r3, r3
 8012492:	429a      	cmp	r2, r3
 8012494:	d010      	beq.n	80124b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012496:	2300      	movs	r3, #0
 8012498:	623b      	str	r3, [r7, #32]
 801249a:	e00d      	b.n	80124b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d006      	beq.n	80124b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80124a4:	4b38      	ldr	r3, [pc, #224]	@ (8012588 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80124a6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80124aa:	493a      	ldr	r1, [pc, #232]	@ (8012594 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80124ac:	4838      	ldr	r0, [pc, #224]	@ (8012590 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80124ae:	f000 fed5 	bl	801325c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	68ba      	ldr	r2, [r7, #8]
 80124b6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d105      	bne.n	80124ca <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	7f9b      	ldrb	r3, [r3, #30]
 80124c2:	f003 0301 	and.w	r3, r3, #1
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d059      	beq.n	801257e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80124ca:	6a3b      	ldr	r3, [r7, #32]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d04f      	beq.n	8012570 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	685b      	ldr	r3, [r3, #4]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d006      	beq.n	80124e6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	685b      	ldr	r3, [r3, #4]
 80124dc:	685b      	ldr	r3, [r3, #4]
 80124de:	889b      	ldrh	r3, [r3, #4]
 80124e0:	b29b      	uxth	r3, r3
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d002      	beq.n	80124ec <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80124e6:	2300      	movs	r3, #0
 80124e8:	623b      	str	r3, [r7, #32]
 80124ea:	e041      	b.n	8012570 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80124ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124ee:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80124f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80124f6:	e012      	b.n	801251e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80124f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124fa:	685b      	ldr	r3, [r3, #4]
 80124fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80124fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012500:	88db      	ldrh	r3, [r3, #6]
 8012502:	b29a      	uxth	r2, r3
 8012504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012506:	889b      	ldrh	r3, [r3, #4]
 8012508:	b29b      	uxth	r3, r3
 801250a:	429a      	cmp	r2, r3
 801250c:	d002      	beq.n	8012514 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801250e:	2300      	movs	r3, #0
 8012510:	623b      	str	r3, [r7, #32]
            break;
 8012512:	e007      	b.n	8012524 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012516:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8012518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801251e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012520:	2b00      	cmp	r3, #0
 8012522:	d1e9      	bne.n	80124f8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012524:	6a3b      	ldr	r3, [r7, #32]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d022      	beq.n	8012570 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d106      	bne.n	8012540 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012532:	4b15      	ldr	r3, [pc, #84]	@ (8012588 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012534:	f240 12df 	movw	r2, #479	@ 0x1df
 8012538:	4917      	ldr	r1, [pc, #92]	@ (8012598 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801253a:	4815      	ldr	r0, [pc, #84]	@ (8012590 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801253c:	f000 fe8e 	bl	801325c <iprintf>
          LWIP_ASSERT("sanity check",
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	685b      	ldr	r3, [r3, #4]
 8012546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012548:	429a      	cmp	r2, r3
 801254a:	d106      	bne.n	801255a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801254c:	4b0e      	ldr	r3, [pc, #56]	@ (8012588 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801254e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012552:	4911      	ldr	r1, [pc, #68]	@ (8012598 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012554:	480e      	ldr	r0, [pc, #56]	@ (8012590 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012556:	f000 fe81 	bl	801325c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801255a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d006      	beq.n	8012570 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012562:	4b09      	ldr	r3, [pc, #36]	@ (8012588 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012564:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8012568:	490c      	ldr	r1, [pc, #48]	@ (801259c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801256a:	4809      	ldr	r0, [pc, #36]	@ (8012590 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801256c:	f000 fe76 	bl	801325c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012570:	6a3b      	ldr	r3, [r7, #32]
 8012572:	2b00      	cmp	r3, #0
 8012574:	bf14      	ite	ne
 8012576:	2301      	movne	r3, #1
 8012578:	2300      	moveq	r3, #0
 801257a:	b2db      	uxtb	r3, r3
 801257c:	e000      	b.n	8012580 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801257e:	2300      	movs	r3, #0
}
 8012580:	4618      	mov	r0, r3
 8012582:	3730      	adds	r7, #48	@ 0x30
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}
 8012588:	08016e40 	.word	0x08016e40
 801258c:	08016f24 	.word	0x08016f24
 8012590:	08016e88 	.word	0x08016e88
 8012594:	08016f44 	.word	0x08016f44
 8012598:	08016f7c 	.word	0x08016f7c
 801259c:	08016f8c 	.word	0x08016f8c

080125a0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b08e      	sub	sp, #56	@ 0x38
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	685b      	ldr	r3, [r3, #4]
 80125ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80125ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125b0:	781b      	ldrb	r3, [r3, #0]
 80125b2:	f003 030f 	and.w	r3, r3, #15
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	009b      	lsls	r3, r3, #2
 80125ba:	b2db      	uxtb	r3, r3
 80125bc:	2b14      	cmp	r3, #20
 80125be:	f040 8171 	bne.w	80128a4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80125c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125c4:	88db      	ldrh	r3, [r3, #6]
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	4618      	mov	r0, r3
 80125ca:	f7f6 faf9 	bl	8008bc0 <lwip_htons>
 80125ce:	4603      	mov	r3, r0
 80125d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80125d4:	b29b      	uxth	r3, r3
 80125d6:	00db      	lsls	r3, r3, #3
 80125d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80125da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125dc:	885b      	ldrh	r3, [r3, #2]
 80125de:	b29b      	uxth	r3, r3
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7f6 faed 	bl	8008bc0 <lwip_htons>
 80125e6:	4603      	mov	r3, r0
 80125e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80125ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	f003 030f 	and.w	r3, r3, #15
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	009b      	lsls	r3, r3, #2
 80125f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80125fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80125fe:	b29b      	uxth	r3, r3
 8012600:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012602:	429a      	cmp	r2, r3
 8012604:	f0c0 8150 	bcc.w	80128a8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012608:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801260c:	b29b      	uxth	r3, r3
 801260e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012610:	1ad3      	subs	r3, r2, r3
 8012612:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012614:	6878      	ldr	r0, [r7, #4]
 8012616:	f7f7 feb9 	bl	800a38c <pbuf_clen>
 801261a:	4603      	mov	r3, r0
 801261c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801261e:	4b8c      	ldr	r3, [pc, #560]	@ (8012850 <ip4_reass+0x2b0>)
 8012620:	881b      	ldrh	r3, [r3, #0]
 8012622:	461a      	mov	r2, r3
 8012624:	8c3b      	ldrh	r3, [r7, #32]
 8012626:	4413      	add	r3, r2
 8012628:	2b0a      	cmp	r3, #10
 801262a:	dd10      	ble.n	801264e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801262c:	8c3b      	ldrh	r3, [r7, #32]
 801262e:	4619      	mov	r1, r3
 8012630:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012632:	f7ff fd81 	bl	8012138 <ip_reass_remove_oldest_datagram>
 8012636:	4603      	mov	r3, r0
 8012638:	2b00      	cmp	r3, #0
 801263a:	f000 8137 	beq.w	80128ac <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801263e:	4b84      	ldr	r3, [pc, #528]	@ (8012850 <ip4_reass+0x2b0>)
 8012640:	881b      	ldrh	r3, [r3, #0]
 8012642:	461a      	mov	r2, r3
 8012644:	8c3b      	ldrh	r3, [r7, #32]
 8012646:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012648:	2b0a      	cmp	r3, #10
 801264a:	f300 812f 	bgt.w	80128ac <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801264e:	4b81      	ldr	r3, [pc, #516]	@ (8012854 <ip4_reass+0x2b4>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	633b      	str	r3, [r7, #48]	@ 0x30
 8012654:	e015      	b.n	8012682 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012658:	695a      	ldr	r2, [r3, #20]
 801265a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801265c:	68db      	ldr	r3, [r3, #12]
 801265e:	429a      	cmp	r2, r3
 8012660:	d10c      	bne.n	801267c <ip4_reass+0xdc>
 8012662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012664:	699a      	ldr	r2, [r3, #24]
 8012666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012668:	691b      	ldr	r3, [r3, #16]
 801266a:	429a      	cmp	r2, r3
 801266c:	d106      	bne.n	801267c <ip4_reass+0xdc>
 801266e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012670:	899a      	ldrh	r2, [r3, #12]
 8012672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012674:	889b      	ldrh	r3, [r3, #4]
 8012676:	b29b      	uxth	r3, r3
 8012678:	429a      	cmp	r2, r3
 801267a:	d006      	beq.n	801268a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801267c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	633b      	str	r3, [r7, #48]	@ 0x30
 8012682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012684:	2b00      	cmp	r3, #0
 8012686:	d1e6      	bne.n	8012656 <ip4_reass+0xb6>
 8012688:	e000      	b.n	801268c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801268a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801268c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801268e:	2b00      	cmp	r3, #0
 8012690:	d109      	bne.n	80126a6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012692:	8c3b      	ldrh	r3, [r7, #32]
 8012694:	4619      	mov	r1, r3
 8012696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012698:	f7ff fdb0 	bl	80121fc <ip_reass_enqueue_new_datagram>
 801269c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801269e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d11c      	bne.n	80126de <ip4_reass+0x13e>
      goto nullreturn;
 80126a4:	e105      	b.n	80128b2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80126a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126a8:	88db      	ldrh	r3, [r3, #6]
 80126aa:	b29b      	uxth	r3, r3
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7f6 fa87 	bl	8008bc0 <lwip_htons>
 80126b2:	4603      	mov	r3, r0
 80126b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d110      	bne.n	80126de <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80126bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126be:	89db      	ldrh	r3, [r3, #14]
 80126c0:	4618      	mov	r0, r3
 80126c2:	f7f6 fa7d 	bl	8008bc0 <lwip_htons>
 80126c6:	4603      	mov	r3, r0
 80126c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d006      	beq.n	80126de <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80126d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126d2:	3308      	adds	r3, #8
 80126d4:	2214      	movs	r2, #20
 80126d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80126d8:	4618      	mov	r0, r3
 80126da:	f000 fefe 	bl	80134da <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80126de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126e0:	88db      	ldrh	r3, [r3, #6]
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	f003 0320 	and.w	r3, r3, #32
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	bf0c      	ite	eq
 80126ec:	2301      	moveq	r3, #1
 80126ee:	2300      	movne	r3, #0
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80126f4:	69fb      	ldr	r3, [r7, #28]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d00e      	beq.n	8012718 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80126fa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80126fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80126fe:	4413      	add	r3, r2
 8012700:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012702:	8b7a      	ldrh	r2, [r7, #26]
 8012704:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012706:	429a      	cmp	r2, r3
 8012708:	f0c0 80a0 	bcc.w	801284c <ip4_reass+0x2ac>
 801270c:	8b7b      	ldrh	r3, [r7, #26]
 801270e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8012712:	4293      	cmp	r3, r2
 8012714:	f200 809a 	bhi.w	801284c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012718:	69fa      	ldr	r2, [r7, #28]
 801271a:	6879      	ldr	r1, [r7, #4]
 801271c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801271e:	f7ff fdd5 	bl	80122cc <ip_reass_chain_frag_into_datagram_and_validate>
 8012722:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012724:	697b      	ldr	r3, [r7, #20]
 8012726:	f1b3 3fff 	cmp.w	r3, #4294967295
 801272a:	f000 809b 	beq.w	8012864 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801272e:	4b48      	ldr	r3, [pc, #288]	@ (8012850 <ip4_reass+0x2b0>)
 8012730:	881a      	ldrh	r2, [r3, #0]
 8012732:	8c3b      	ldrh	r3, [r7, #32]
 8012734:	4413      	add	r3, r2
 8012736:	b29a      	uxth	r2, r3
 8012738:	4b45      	ldr	r3, [pc, #276]	@ (8012850 <ip4_reass+0x2b0>)
 801273a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801273c:	69fb      	ldr	r3, [r7, #28]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d00d      	beq.n	801275e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012742:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012744:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012746:	4413      	add	r3, r2
 8012748:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801274a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801274c:	8a7a      	ldrh	r2, [r7, #18]
 801274e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012752:	7f9b      	ldrb	r3, [r3, #30]
 8012754:	f043 0301 	orr.w	r3, r3, #1
 8012758:	b2da      	uxtb	r2, r3
 801275a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801275c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	2b01      	cmp	r3, #1
 8012762:	d171      	bne.n	8012848 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012766:	8b9b      	ldrh	r3, [r3, #28]
 8012768:	3314      	adds	r3, #20
 801276a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801276c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	685b      	ldr	r3, [r3, #4]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012778:	685b      	ldr	r3, [r3, #4]
 801277a:	685b      	ldr	r3, [r3, #4]
 801277c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801277e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012780:	3308      	adds	r3, #8
 8012782:	2214      	movs	r2, #20
 8012784:	4619      	mov	r1, r3
 8012786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012788:	f000 fea7 	bl	80134da <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801278c:	8a3b      	ldrh	r3, [r7, #16]
 801278e:	4618      	mov	r0, r3
 8012790:	f7f6 fa16 	bl	8008bc0 <lwip_htons>
 8012794:	4603      	mov	r3, r0
 8012796:	461a      	mov	r2, r3
 8012798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801279a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801279c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801279e:	2200      	movs	r2, #0
 80127a0:	719a      	strb	r2, [r3, #6]
 80127a2:	2200      	movs	r2, #0
 80127a4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80127a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127a8:	2200      	movs	r2, #0
 80127aa:	729a      	strb	r2, [r3, #10]
 80127ac:	2200      	movs	r2, #0
 80127ae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80127b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127b2:	685b      	ldr	r3, [r3, #4]
 80127b4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80127b6:	e00d      	b.n	80127d4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80127b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127ba:	685b      	ldr	r3, [r3, #4]
 80127bc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80127be:	2114      	movs	r1, #20
 80127c0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80127c2:	f7f7 fcd5 	bl	800a170 <pbuf_remove_header>
      pbuf_cat(p, r);
 80127c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f7f7 fe19 	bl	800a400 <pbuf_cat>
      r = iprh->next_pbuf;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80127d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d1ee      	bne.n	80127b8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80127da:	4b1e      	ldr	r3, [pc, #120]	@ (8012854 <ip4_reass+0x2b4>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127e0:	429a      	cmp	r2, r3
 80127e2:	d102      	bne.n	80127ea <ip4_reass+0x24a>
      ipr_prev = NULL;
 80127e4:	2300      	movs	r3, #0
 80127e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80127e8:	e010      	b.n	801280c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80127ea:	4b1a      	ldr	r3, [pc, #104]	@ (8012854 <ip4_reass+0x2b4>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80127f0:	e007      	b.n	8012802 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80127f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127f8:	429a      	cmp	r2, r3
 80127fa:	d006      	beq.n	801280a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80127fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012804:	2b00      	cmp	r3, #0
 8012806:	d1f4      	bne.n	80127f2 <ip4_reass+0x252>
 8012808:	e000      	b.n	801280c <ip4_reass+0x26c>
          break;
 801280a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801280c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801280e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012810:	f7ff fd2e 	bl	8012270 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f7f7 fdb9 	bl	800a38c <pbuf_clen>
 801281a:	4603      	mov	r3, r0
 801281c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801281e:	4b0c      	ldr	r3, [pc, #48]	@ (8012850 <ip4_reass+0x2b0>)
 8012820:	881b      	ldrh	r3, [r3, #0]
 8012822:	8c3a      	ldrh	r2, [r7, #32]
 8012824:	429a      	cmp	r2, r3
 8012826:	d906      	bls.n	8012836 <ip4_reass+0x296>
 8012828:	4b0b      	ldr	r3, [pc, #44]	@ (8012858 <ip4_reass+0x2b8>)
 801282a:	f240 229b 	movw	r2, #667	@ 0x29b
 801282e:	490b      	ldr	r1, [pc, #44]	@ (801285c <ip4_reass+0x2bc>)
 8012830:	480b      	ldr	r0, [pc, #44]	@ (8012860 <ip4_reass+0x2c0>)
 8012832:	f000 fd13 	bl	801325c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012836:	4b06      	ldr	r3, [pc, #24]	@ (8012850 <ip4_reass+0x2b0>)
 8012838:	881a      	ldrh	r2, [r3, #0]
 801283a:	8c3b      	ldrh	r3, [r7, #32]
 801283c:	1ad3      	subs	r3, r2, r3
 801283e:	b29a      	uxth	r2, r3
 8012840:	4b03      	ldr	r3, [pc, #12]	@ (8012850 <ip4_reass+0x2b0>)
 8012842:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	e038      	b.n	80128ba <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012848:	2300      	movs	r3, #0
 801284a:	e036      	b.n	80128ba <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801284c:	bf00      	nop
 801284e:	e00a      	b.n	8012866 <ip4_reass+0x2c6>
 8012850:	20008b1c 	.word	0x20008b1c
 8012854:	20008b18 	.word	0x20008b18
 8012858:	08016e40 	.word	0x08016e40
 801285c:	08016fb0 	.word	0x08016fb0
 8012860:	08016e88 	.word	0x08016e88
    goto nullreturn_ipr;
 8012864:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012868:	2b00      	cmp	r3, #0
 801286a:	d106      	bne.n	801287a <ip4_reass+0x2da>
 801286c:	4b15      	ldr	r3, [pc, #84]	@ (80128c4 <ip4_reass+0x324>)
 801286e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8012872:	4915      	ldr	r1, [pc, #84]	@ (80128c8 <ip4_reass+0x328>)
 8012874:	4815      	ldr	r0, [pc, #84]	@ (80128cc <ip4_reass+0x32c>)
 8012876:	f000 fcf1 	bl	801325c <iprintf>
  if (ipr->p == NULL) {
 801287a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d116      	bne.n	80128b0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012882:	4b13      	ldr	r3, [pc, #76]	@ (80128d0 <ip4_reass+0x330>)
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012888:	429a      	cmp	r2, r3
 801288a:	d006      	beq.n	801289a <ip4_reass+0x2fa>
 801288c:	4b0d      	ldr	r3, [pc, #52]	@ (80128c4 <ip4_reass+0x324>)
 801288e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8012892:	4910      	ldr	r1, [pc, #64]	@ (80128d4 <ip4_reass+0x334>)
 8012894:	480d      	ldr	r0, [pc, #52]	@ (80128cc <ip4_reass+0x32c>)
 8012896:	f000 fce1 	bl	801325c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801289a:	2100      	movs	r1, #0
 801289c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801289e:	f7ff fce7 	bl	8012270 <ip_reass_dequeue_datagram>
 80128a2:	e006      	b.n	80128b2 <ip4_reass+0x312>
    goto nullreturn;
 80128a4:	bf00      	nop
 80128a6:	e004      	b.n	80128b2 <ip4_reass+0x312>
    goto nullreturn;
 80128a8:	bf00      	nop
 80128aa:	e002      	b.n	80128b2 <ip4_reass+0x312>
      goto nullreturn;
 80128ac:	bf00      	nop
 80128ae:	e000      	b.n	80128b2 <ip4_reass+0x312>
  }

nullreturn:
 80128b0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f7f7 fce2 	bl	800a27c <pbuf_free>
  return NULL;
 80128b8:	2300      	movs	r3, #0
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3738      	adds	r7, #56	@ 0x38
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}
 80128c2:	bf00      	nop
 80128c4:	08016e40 	.word	0x08016e40
 80128c8:	08016fcc 	.word	0x08016fcc
 80128cc:	08016e88 	.word	0x08016e88
 80128d0:	20008b18 	.word	0x20008b18
 80128d4:	08016fd8 	.word	0x08016fd8

080128d8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80128dc:	2005      	movs	r0, #5
 80128de:	f7f6 fde7 	bl	80094b0 <memp_malloc>
 80128e2:	4603      	mov	r3, r0
}
 80128e4:	4618      	mov	r0, r3
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b082      	sub	sp, #8
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d106      	bne.n	8012904 <ip_frag_free_pbuf_custom_ref+0x1c>
 80128f6:	4b07      	ldr	r3, [pc, #28]	@ (8012914 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80128f8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80128fc:	4906      	ldr	r1, [pc, #24]	@ (8012918 <ip_frag_free_pbuf_custom_ref+0x30>)
 80128fe:	4807      	ldr	r0, [pc, #28]	@ (801291c <ip_frag_free_pbuf_custom_ref+0x34>)
 8012900:	f000 fcac 	bl	801325c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012904:	6879      	ldr	r1, [r7, #4]
 8012906:	2005      	movs	r0, #5
 8012908:	f7f6 fe42 	bl	8009590 <memp_free>
}
 801290c:	bf00      	nop
 801290e:	3708      	adds	r7, #8
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}
 8012914:	08016e40 	.word	0x08016e40
 8012918:	08016ff8 	.word	0x08016ff8
 801291c:	08016e88 	.word	0x08016e88

08012920 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b084      	sub	sp, #16
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d106      	bne.n	8012940 <ipfrag_free_pbuf_custom+0x20>
 8012932:	4b11      	ldr	r3, [pc, #68]	@ (8012978 <ipfrag_free_pbuf_custom+0x58>)
 8012934:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8012938:	4910      	ldr	r1, [pc, #64]	@ (801297c <ipfrag_free_pbuf_custom+0x5c>)
 801293a:	4811      	ldr	r0, [pc, #68]	@ (8012980 <ipfrag_free_pbuf_custom+0x60>)
 801293c:	f000 fc8e 	bl	801325c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012940:	68fa      	ldr	r2, [r7, #12]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	429a      	cmp	r2, r3
 8012946:	d006      	beq.n	8012956 <ipfrag_free_pbuf_custom+0x36>
 8012948:	4b0b      	ldr	r3, [pc, #44]	@ (8012978 <ipfrag_free_pbuf_custom+0x58>)
 801294a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801294e:	490d      	ldr	r1, [pc, #52]	@ (8012984 <ipfrag_free_pbuf_custom+0x64>)
 8012950:	480b      	ldr	r0, [pc, #44]	@ (8012980 <ipfrag_free_pbuf_custom+0x60>)
 8012952:	f000 fc83 	bl	801325c <iprintf>
  if (pcr->original != NULL) {
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	695b      	ldr	r3, [r3, #20]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d004      	beq.n	8012968 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	695b      	ldr	r3, [r3, #20]
 8012962:	4618      	mov	r0, r3
 8012964:	f7f7 fc8a 	bl	800a27c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012968:	68f8      	ldr	r0, [r7, #12]
 801296a:	f7ff ffbd 	bl	80128e8 <ip_frag_free_pbuf_custom_ref>
}
 801296e:	bf00      	nop
 8012970:	3710      	adds	r7, #16
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}
 8012976:	bf00      	nop
 8012978:	08016e40 	.word	0x08016e40
 801297c:	08017004 	.word	0x08017004
 8012980:	08016e88 	.word	0x08016e88
 8012984:	08017010 	.word	0x08017010

08012988 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b094      	sub	sp, #80	@ 0x50
 801298c:	af02      	add	r7, sp, #8
 801298e:	60f8      	str	r0, [r7, #12]
 8012990:	60b9      	str	r1, [r7, #8]
 8012992:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012994:	2300      	movs	r3, #0
 8012996:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801299e:	3b14      	subs	r3, #20
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	da00      	bge.n	80129a6 <ip4_frag+0x1e>
 80129a4:	3307      	adds	r3, #7
 80129a6:	10db      	asrs	r3, r3, #3
 80129a8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80129aa:	2314      	movs	r3, #20
 80129ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	685b      	ldr	r3, [r3, #4]
 80129b2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80129b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129b6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80129b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	f003 030f 	and.w	r3, r3, #15
 80129c0:	b2db      	uxtb	r3, r3
 80129c2:	009b      	lsls	r3, r3, #2
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	2b14      	cmp	r3, #20
 80129c8:	d002      	beq.n	80129d0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80129ca:	f06f 0305 	mvn.w	r3, #5
 80129ce:	e110      	b.n	8012bf2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	895b      	ldrh	r3, [r3, #10]
 80129d4:	2b13      	cmp	r3, #19
 80129d6:	d809      	bhi.n	80129ec <ip4_frag+0x64>
 80129d8:	4b88      	ldr	r3, [pc, #544]	@ (8012bfc <ip4_frag+0x274>)
 80129da:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80129de:	4988      	ldr	r1, [pc, #544]	@ (8012c00 <ip4_frag+0x278>)
 80129e0:	4888      	ldr	r0, [pc, #544]	@ (8012c04 <ip4_frag+0x27c>)
 80129e2:	f000 fc3b 	bl	801325c <iprintf>
 80129e6:	f06f 0305 	mvn.w	r3, #5
 80129ea:	e102      	b.n	8012bf2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80129ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129ee:	88db      	ldrh	r3, [r3, #6]
 80129f0:	b29b      	uxth	r3, r3
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7f6 f8e4 	bl	8008bc0 <lwip_htons>
 80129f8:	4603      	mov	r3, r0
 80129fa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80129fc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80129fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012a02:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012a06:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	891b      	ldrh	r3, [r3, #8]
 8012a12:	3b14      	subs	r3, #20
 8012a14:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8012a18:	e0e1      	b.n	8012bde <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012a1a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012a1c:	00db      	lsls	r3, r3, #3
 8012a1e:	b29b      	uxth	r3, r3
 8012a20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012a24:	4293      	cmp	r3, r2
 8012a26:	bf28      	it	cs
 8012a28:	4613      	movcs	r3, r2
 8012a2a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012a2c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012a30:	2114      	movs	r1, #20
 8012a32:	200e      	movs	r0, #14
 8012a34:	f7f7 f93e 	bl	8009cb4 <pbuf_alloc>
 8012a38:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8012a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	f000 80d5 	beq.w	8012bec <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a44:	895b      	ldrh	r3, [r3, #10]
 8012a46:	2b13      	cmp	r3, #19
 8012a48:	d806      	bhi.n	8012a58 <ip4_frag+0xd0>
 8012a4a:	4b6c      	ldr	r3, [pc, #432]	@ (8012bfc <ip4_frag+0x274>)
 8012a4c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8012a50:	496d      	ldr	r1, [pc, #436]	@ (8012c08 <ip4_frag+0x280>)
 8012a52:	486c      	ldr	r0, [pc, #432]	@ (8012c04 <ip4_frag+0x27c>)
 8012a54:	f000 fc02 	bl	801325c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a5a:	685b      	ldr	r3, [r3, #4]
 8012a5c:	2214      	movs	r2, #20
 8012a5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012a60:	4618      	mov	r0, r3
 8012a62:	f000 fd3a 	bl	80134da <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a68:	685b      	ldr	r3, [r3, #4]
 8012a6a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8012a6c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012a6e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8012a72:	e064      	b.n	8012b3e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	895a      	ldrh	r2, [r3, #10]
 8012a78:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012a7a:	1ad3      	subs	r3, r2, r3
 8012a7c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	895b      	ldrh	r3, [r3, #10]
 8012a82:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d906      	bls.n	8012a96 <ip4_frag+0x10e>
 8012a88:	4b5c      	ldr	r3, [pc, #368]	@ (8012bfc <ip4_frag+0x274>)
 8012a8a:	f240 322d 	movw	r2, #813	@ 0x32d
 8012a8e:	495f      	ldr	r1, [pc, #380]	@ (8012c0c <ip4_frag+0x284>)
 8012a90:	485c      	ldr	r0, [pc, #368]	@ (8012c04 <ip4_frag+0x27c>)
 8012a92:	f000 fbe3 	bl	801325c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012a96:	8bfa      	ldrh	r2, [r7, #30]
 8012a98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012a9c:	4293      	cmp	r3, r2
 8012a9e:	bf28      	it	cs
 8012aa0:	4613      	movcs	r3, r2
 8012aa2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012aa6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d105      	bne.n	8012aba <ip4_frag+0x132>
        poff = 0;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	60fb      	str	r3, [r7, #12]
        continue;
 8012ab8:	e041      	b.n	8012b3e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012aba:	f7ff ff0d 	bl	80128d8 <ip_frag_alloc_pbuf_custom_ref>
 8012abe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012ac0:	69bb      	ldr	r3, [r7, #24]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d103      	bne.n	8012ace <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012ac6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012ac8:	f7f7 fbd8 	bl	800a27c <pbuf_free>
        goto memerr;
 8012acc:	e08f      	b.n	8012bee <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012ace:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012ad4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012ad6:	4413      	add	r3, r2
 8012ad8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8012adc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012ae0:	9201      	str	r2, [sp, #4]
 8012ae2:	9300      	str	r3, [sp, #0]
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	2241      	movs	r2, #65	@ 0x41
 8012ae8:	2000      	movs	r0, #0
 8012aea:	f7f7 fa0d 	bl	8009f08 <pbuf_alloced_custom>
 8012aee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d106      	bne.n	8012b04 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012af6:	69b8      	ldr	r0, [r7, #24]
 8012af8:	f7ff fef6 	bl	80128e8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012afc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012afe:	f7f7 fbbd 	bl	800a27c <pbuf_free>
        goto memerr;
 8012b02:	e074      	b.n	8012bee <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012b04:	68f8      	ldr	r0, [r7, #12]
 8012b06:	f7f7 fc59 	bl	800a3bc <pbuf_ref>
      pcr->original = p;
 8012b0a:	69bb      	ldr	r3, [r7, #24]
 8012b0c:	68fa      	ldr	r2, [r7, #12]
 8012b0e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012b10:	69bb      	ldr	r3, [r7, #24]
 8012b12:	4a3f      	ldr	r2, [pc, #252]	@ (8012c10 <ip4_frag+0x288>)
 8012b14:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012b16:	6979      	ldr	r1, [r7, #20]
 8012b18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012b1a:	f7f7 fc71 	bl	800a400 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012b1e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8012b22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012b26:	1ad3      	subs	r3, r2, r3
 8012b28:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8012b2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d004      	beq.n	8012b3e <ip4_frag+0x1b6>
        poff = 0;
 8012b34:	2300      	movs	r3, #0
 8012b36:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012b3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d196      	bne.n	8012a74 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012b46:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012b48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012b4c:	4413      	add	r3, r2
 8012b4e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012b54:	f1a3 0213 	sub.w	r2, r3, #19
 8012b58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	bfcc      	ite	gt
 8012b60:	2301      	movgt	r3, #1
 8012b62:	2300      	movle	r3, #0
 8012b64:	b2db      	uxtb	r3, r3
 8012b66:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012b68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012b6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b70:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8012b72:	6a3b      	ldr	r3, [r7, #32]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d002      	beq.n	8012b7e <ip4_frag+0x1f6>
 8012b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d003      	beq.n	8012b86 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012b7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012b80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012b84:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012b86:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7f6 f819 	bl	8008bc0 <lwip_htons>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	461a      	mov	r2, r3
 8012b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b94:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012b96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012b98:	3314      	adds	r3, #20
 8012b9a:	b29b      	uxth	r3, r3
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7f6 f80f 	bl	8008bc0 <lwip_htons>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	461a      	mov	r2, r3
 8012ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ba8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bac:	2200      	movs	r2, #0
 8012bae:	729a      	strb	r2, [r3, #10]
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012bb4:	68bb      	ldr	r3, [r7, #8]
 8012bb6:	695b      	ldr	r3, [r3, #20]
 8012bb8:	687a      	ldr	r2, [r7, #4]
 8012bba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012bbc:	68b8      	ldr	r0, [r7, #8]
 8012bbe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012bc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012bc2:	f7f7 fb5b 	bl	800a27c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012bc6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012bca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012bcc:	1ad3      	subs	r3, r2, r3
 8012bce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8012bd2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8012bd6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012bd8:	4413      	add	r3, r2
 8012bda:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8012bde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	f47f af19 	bne.w	8012a1a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012be8:	2300      	movs	r3, #0
 8012bea:	e002      	b.n	8012bf2 <ip4_frag+0x26a>
      goto memerr;
 8012bec:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	3748      	adds	r7, #72	@ 0x48
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}
 8012bfa:	bf00      	nop
 8012bfc:	08016e40 	.word	0x08016e40
 8012c00:	0801701c 	.word	0x0801701c
 8012c04:	08016e88 	.word	0x08016e88
 8012c08:	08017038 	.word	0x08017038
 8012c0c:	08017058 	.word	0x08017058
 8012c10:	08012921 	.word	0x08012921

08012c14 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b086      	sub	sp, #24
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
 8012c1c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012c1e:	230e      	movs	r3, #14
 8012c20:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	895b      	ldrh	r3, [r3, #10]
 8012c26:	2b0e      	cmp	r3, #14
 8012c28:	d96e      	bls.n	8012d08 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	7bdb      	ldrb	r3, [r3, #15]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d106      	bne.n	8012c40 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012c38:	3301      	adds	r3, #1
 8012c3a:	b2da      	uxtb	r2, r3
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	685b      	ldr	r3, [r3, #4]
 8012c44:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	7b1a      	ldrb	r2, [r3, #12]
 8012c4a:	7b5b      	ldrb	r3, [r3, #13]
 8012c4c:	021b      	lsls	r3, r3, #8
 8012c4e:	4313      	orrs	r3, r2
 8012c50:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	f003 0301 	and.w	r3, r3, #1
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d023      	beq.n	8012ca6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012c5e:	693b      	ldr	r3, [r7, #16]
 8012c60:	781b      	ldrb	r3, [r3, #0]
 8012c62:	2b01      	cmp	r3, #1
 8012c64:	d10f      	bne.n	8012c86 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	785b      	ldrb	r3, [r3, #1]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d11b      	bne.n	8012ca6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012c6e:	693b      	ldr	r3, [r7, #16]
 8012c70:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012c72:	2b5e      	cmp	r3, #94	@ 0x5e
 8012c74:	d117      	bne.n	8012ca6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	7b5b      	ldrb	r3, [r3, #13]
 8012c7a:	f043 0310 	orr.w	r3, r3, #16
 8012c7e:	b2da      	uxtb	r2, r3
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	735a      	strb	r2, [r3, #13]
 8012c84:	e00f      	b.n	8012ca6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012c86:	693b      	ldr	r3, [r7, #16]
 8012c88:	2206      	movs	r2, #6
 8012c8a:	4928      	ldr	r1, [pc, #160]	@ (8012d2c <ethernet_input+0x118>)
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f000 fb5c 	bl	801334a <memcmp>
 8012c92:	4603      	mov	r3, r0
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d106      	bne.n	8012ca6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	7b5b      	ldrb	r3, [r3, #13]
 8012c9c:	f043 0308 	orr.w	r3, r3, #8
 8012ca0:	b2da      	uxtb	r2, r3
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012ca6:	89fb      	ldrh	r3, [r7, #14]
 8012ca8:	2b08      	cmp	r3, #8
 8012caa:	d003      	beq.n	8012cb4 <ethernet_input+0xa0>
 8012cac:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8012cb0:	d014      	beq.n	8012cdc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012cb2:	e032      	b.n	8012d1a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012cba:	f003 0308 	and.w	r3, r3, #8
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d024      	beq.n	8012d0c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012cc2:	8afb      	ldrh	r3, [r7, #22]
 8012cc4:	4619      	mov	r1, r3
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f7f7 fa52 	bl	800a170 <pbuf_remove_header>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d11e      	bne.n	8012d10 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012cd2:	6839      	ldr	r1, [r7, #0]
 8012cd4:	6878      	ldr	r0, [r7, #4]
 8012cd6:	f7fe ff21 	bl	8011b1c <ip4_input>
      break;
 8012cda:	e013      	b.n	8012d04 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012ce2:	f003 0308 	and.w	r3, r3, #8
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d014      	beq.n	8012d14 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012cea:	8afb      	ldrh	r3, [r7, #22]
 8012cec:	4619      	mov	r1, r3
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f7f7 fa3e 	bl	800a170 <pbuf_remove_header>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d10e      	bne.n	8012d18 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012cfa:	6839      	ldr	r1, [r7, #0]
 8012cfc:	6878      	ldr	r0, [r7, #4]
 8012cfe:	f7fe f8c1 	bl	8010e84 <etharp_input>
      break;
 8012d02:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012d04:	2300      	movs	r3, #0
 8012d06:	e00c      	b.n	8012d22 <ethernet_input+0x10e>
    goto free_and_return;
 8012d08:	bf00      	nop
 8012d0a:	e006      	b.n	8012d1a <ethernet_input+0x106>
        goto free_and_return;
 8012d0c:	bf00      	nop
 8012d0e:	e004      	b.n	8012d1a <ethernet_input+0x106>
        goto free_and_return;
 8012d10:	bf00      	nop
 8012d12:	e002      	b.n	8012d1a <ethernet_input+0x106>
        goto free_and_return;
 8012d14:	bf00      	nop
 8012d16:	e000      	b.n	8012d1a <ethernet_input+0x106>
        goto free_and_return;
 8012d18:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f7f7 faae 	bl	800a27c <pbuf_free>
  return ERR_OK;
 8012d20:	2300      	movs	r3, #0
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	3718      	adds	r7, #24
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bd80      	pop	{r7, pc}
 8012d2a:	bf00      	nop
 8012d2c:	080171f4 	.word	0x080171f4

08012d30 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b086      	sub	sp, #24
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	60f8      	str	r0, [r7, #12]
 8012d38:	60b9      	str	r1, [r7, #8]
 8012d3a:	607a      	str	r2, [r7, #4]
 8012d3c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012d3e:	8c3b      	ldrh	r3, [r7, #32]
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7f5 ff3d 	bl	8008bc0 <lwip_htons>
 8012d46:	4603      	mov	r3, r0
 8012d48:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012d4a:	210e      	movs	r1, #14
 8012d4c:	68b8      	ldr	r0, [r7, #8]
 8012d4e:	f7f7 f9ff 	bl	800a150 <pbuf_add_header>
 8012d52:	4603      	mov	r3, r0
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d125      	bne.n	8012da4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012d58:	68bb      	ldr	r3, [r7, #8]
 8012d5a:	685b      	ldr	r3, [r3, #4]
 8012d5c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012d5e:	693b      	ldr	r3, [r7, #16]
 8012d60:	8afa      	ldrh	r2, [r7, #22]
 8012d62:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	2206      	movs	r2, #6
 8012d68:	6839      	ldr	r1, [r7, #0]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f000 fbb5 	bl	80134da <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012d70:	693b      	ldr	r3, [r7, #16]
 8012d72:	3306      	adds	r3, #6
 8012d74:	2206      	movs	r2, #6
 8012d76:	6879      	ldr	r1, [r7, #4]
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f000 fbae 	bl	80134da <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012d84:	2b06      	cmp	r3, #6
 8012d86:	d006      	beq.n	8012d96 <ethernet_output+0x66>
 8012d88:	4b0a      	ldr	r3, [pc, #40]	@ (8012db4 <ethernet_output+0x84>)
 8012d8a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8012d8e:	490a      	ldr	r1, [pc, #40]	@ (8012db8 <ethernet_output+0x88>)
 8012d90:	480a      	ldr	r0, [pc, #40]	@ (8012dbc <ethernet_output+0x8c>)
 8012d92:	f000 fa63 	bl	801325c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	699b      	ldr	r3, [r3, #24]
 8012d9a:	68b9      	ldr	r1, [r7, #8]
 8012d9c:	68f8      	ldr	r0, [r7, #12]
 8012d9e:	4798      	blx	r3
 8012da0:	4603      	mov	r3, r0
 8012da2:	e002      	b.n	8012daa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012da4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012da6:	f06f 0301 	mvn.w	r3, #1
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3718      	adds	r7, #24
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}
 8012db2:	bf00      	nop
 8012db4:	08017068 	.word	0x08017068
 8012db8:	080170a0 	.word	0x080170a0
 8012dbc:	080170d4 	.word	0x080170d4

08012dc0 <calloc>:
 8012dc0:	4b02      	ldr	r3, [pc, #8]	@ (8012dcc <calloc+0xc>)
 8012dc2:	460a      	mov	r2, r1
 8012dc4:	4601      	mov	r1, r0
 8012dc6:	6818      	ldr	r0, [r3, #0]
 8012dc8:	f000 b802 	b.w	8012dd0 <_calloc_r>
 8012dcc:	200000ac 	.word	0x200000ac

08012dd0 <_calloc_r>:
 8012dd0:	b570      	push	{r4, r5, r6, lr}
 8012dd2:	fba1 5402 	umull	r5, r4, r1, r2
 8012dd6:	b934      	cbnz	r4, 8012de6 <_calloc_r+0x16>
 8012dd8:	4629      	mov	r1, r5
 8012dda:	f000 f82f 	bl	8012e3c <_malloc_r>
 8012dde:	4606      	mov	r6, r0
 8012de0:	b928      	cbnz	r0, 8012dee <_calloc_r+0x1e>
 8012de2:	4630      	mov	r0, r6
 8012de4:	bd70      	pop	{r4, r5, r6, pc}
 8012de6:	220c      	movs	r2, #12
 8012de8:	6002      	str	r2, [r0, #0]
 8012dea:	2600      	movs	r6, #0
 8012dec:	e7f9      	b.n	8012de2 <_calloc_r+0x12>
 8012dee:	462a      	mov	r2, r5
 8012df0:	4621      	mov	r1, r4
 8012df2:	f000 fad4 	bl	801339e <memset>
 8012df6:	e7f4      	b.n	8012de2 <_calloc_r+0x12>

08012df8 <sbrk_aligned>:
 8012df8:	b570      	push	{r4, r5, r6, lr}
 8012dfa:	4e0f      	ldr	r6, [pc, #60]	@ (8012e38 <sbrk_aligned+0x40>)
 8012dfc:	460c      	mov	r4, r1
 8012dfe:	6831      	ldr	r1, [r6, #0]
 8012e00:	4605      	mov	r5, r0
 8012e02:	b911      	cbnz	r1, 8012e0a <sbrk_aligned+0x12>
 8012e04:	f000 fb1a 	bl	801343c <_sbrk_r>
 8012e08:	6030      	str	r0, [r6, #0]
 8012e0a:	4621      	mov	r1, r4
 8012e0c:	4628      	mov	r0, r5
 8012e0e:	f000 fb15 	bl	801343c <_sbrk_r>
 8012e12:	1c43      	adds	r3, r0, #1
 8012e14:	d103      	bne.n	8012e1e <sbrk_aligned+0x26>
 8012e16:	f04f 34ff 	mov.w	r4, #4294967295
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	bd70      	pop	{r4, r5, r6, pc}
 8012e1e:	1cc4      	adds	r4, r0, #3
 8012e20:	f024 0403 	bic.w	r4, r4, #3
 8012e24:	42a0      	cmp	r0, r4
 8012e26:	d0f8      	beq.n	8012e1a <sbrk_aligned+0x22>
 8012e28:	1a21      	subs	r1, r4, r0
 8012e2a:	4628      	mov	r0, r5
 8012e2c:	f000 fb06 	bl	801343c <_sbrk_r>
 8012e30:	3001      	adds	r0, #1
 8012e32:	d1f2      	bne.n	8012e1a <sbrk_aligned+0x22>
 8012e34:	e7ef      	b.n	8012e16 <sbrk_aligned+0x1e>
 8012e36:	bf00      	nop
 8012e38:	20008b20 	.word	0x20008b20

08012e3c <_malloc_r>:
 8012e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e40:	1ccd      	adds	r5, r1, #3
 8012e42:	f025 0503 	bic.w	r5, r5, #3
 8012e46:	3508      	adds	r5, #8
 8012e48:	2d0c      	cmp	r5, #12
 8012e4a:	bf38      	it	cc
 8012e4c:	250c      	movcc	r5, #12
 8012e4e:	2d00      	cmp	r5, #0
 8012e50:	4606      	mov	r6, r0
 8012e52:	db01      	blt.n	8012e58 <_malloc_r+0x1c>
 8012e54:	42a9      	cmp	r1, r5
 8012e56:	d904      	bls.n	8012e62 <_malloc_r+0x26>
 8012e58:	230c      	movs	r3, #12
 8012e5a:	6033      	str	r3, [r6, #0]
 8012e5c:	2000      	movs	r0, #0
 8012e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012f38 <_malloc_r+0xfc>
 8012e66:	f000 f869 	bl	8012f3c <__malloc_lock>
 8012e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8012e6e:	461c      	mov	r4, r3
 8012e70:	bb44      	cbnz	r4, 8012ec4 <_malloc_r+0x88>
 8012e72:	4629      	mov	r1, r5
 8012e74:	4630      	mov	r0, r6
 8012e76:	f7ff ffbf 	bl	8012df8 <sbrk_aligned>
 8012e7a:	1c43      	adds	r3, r0, #1
 8012e7c:	4604      	mov	r4, r0
 8012e7e:	d158      	bne.n	8012f32 <_malloc_r+0xf6>
 8012e80:	f8d8 4000 	ldr.w	r4, [r8]
 8012e84:	4627      	mov	r7, r4
 8012e86:	2f00      	cmp	r7, #0
 8012e88:	d143      	bne.n	8012f12 <_malloc_r+0xd6>
 8012e8a:	2c00      	cmp	r4, #0
 8012e8c:	d04b      	beq.n	8012f26 <_malloc_r+0xea>
 8012e8e:	6823      	ldr	r3, [r4, #0]
 8012e90:	4639      	mov	r1, r7
 8012e92:	4630      	mov	r0, r6
 8012e94:	eb04 0903 	add.w	r9, r4, r3
 8012e98:	f000 fad0 	bl	801343c <_sbrk_r>
 8012e9c:	4581      	cmp	r9, r0
 8012e9e:	d142      	bne.n	8012f26 <_malloc_r+0xea>
 8012ea0:	6821      	ldr	r1, [r4, #0]
 8012ea2:	1a6d      	subs	r5, r5, r1
 8012ea4:	4629      	mov	r1, r5
 8012ea6:	4630      	mov	r0, r6
 8012ea8:	f7ff ffa6 	bl	8012df8 <sbrk_aligned>
 8012eac:	3001      	adds	r0, #1
 8012eae:	d03a      	beq.n	8012f26 <_malloc_r+0xea>
 8012eb0:	6823      	ldr	r3, [r4, #0]
 8012eb2:	442b      	add	r3, r5
 8012eb4:	6023      	str	r3, [r4, #0]
 8012eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8012eba:	685a      	ldr	r2, [r3, #4]
 8012ebc:	bb62      	cbnz	r2, 8012f18 <_malloc_r+0xdc>
 8012ebe:	f8c8 7000 	str.w	r7, [r8]
 8012ec2:	e00f      	b.n	8012ee4 <_malloc_r+0xa8>
 8012ec4:	6822      	ldr	r2, [r4, #0]
 8012ec6:	1b52      	subs	r2, r2, r5
 8012ec8:	d420      	bmi.n	8012f0c <_malloc_r+0xd0>
 8012eca:	2a0b      	cmp	r2, #11
 8012ecc:	d917      	bls.n	8012efe <_malloc_r+0xc2>
 8012ece:	1961      	adds	r1, r4, r5
 8012ed0:	42a3      	cmp	r3, r4
 8012ed2:	6025      	str	r5, [r4, #0]
 8012ed4:	bf18      	it	ne
 8012ed6:	6059      	strne	r1, [r3, #4]
 8012ed8:	6863      	ldr	r3, [r4, #4]
 8012eda:	bf08      	it	eq
 8012edc:	f8c8 1000 	streq.w	r1, [r8]
 8012ee0:	5162      	str	r2, [r4, r5]
 8012ee2:	604b      	str	r3, [r1, #4]
 8012ee4:	4630      	mov	r0, r6
 8012ee6:	f000 f82f 	bl	8012f48 <__malloc_unlock>
 8012eea:	f104 000b 	add.w	r0, r4, #11
 8012eee:	1d23      	adds	r3, r4, #4
 8012ef0:	f020 0007 	bic.w	r0, r0, #7
 8012ef4:	1ac2      	subs	r2, r0, r3
 8012ef6:	bf1c      	itt	ne
 8012ef8:	1a1b      	subne	r3, r3, r0
 8012efa:	50a3      	strne	r3, [r4, r2]
 8012efc:	e7af      	b.n	8012e5e <_malloc_r+0x22>
 8012efe:	6862      	ldr	r2, [r4, #4]
 8012f00:	42a3      	cmp	r3, r4
 8012f02:	bf0c      	ite	eq
 8012f04:	f8c8 2000 	streq.w	r2, [r8]
 8012f08:	605a      	strne	r2, [r3, #4]
 8012f0a:	e7eb      	b.n	8012ee4 <_malloc_r+0xa8>
 8012f0c:	4623      	mov	r3, r4
 8012f0e:	6864      	ldr	r4, [r4, #4]
 8012f10:	e7ae      	b.n	8012e70 <_malloc_r+0x34>
 8012f12:	463c      	mov	r4, r7
 8012f14:	687f      	ldr	r7, [r7, #4]
 8012f16:	e7b6      	b.n	8012e86 <_malloc_r+0x4a>
 8012f18:	461a      	mov	r2, r3
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	42a3      	cmp	r3, r4
 8012f1e:	d1fb      	bne.n	8012f18 <_malloc_r+0xdc>
 8012f20:	2300      	movs	r3, #0
 8012f22:	6053      	str	r3, [r2, #4]
 8012f24:	e7de      	b.n	8012ee4 <_malloc_r+0xa8>
 8012f26:	230c      	movs	r3, #12
 8012f28:	6033      	str	r3, [r6, #0]
 8012f2a:	4630      	mov	r0, r6
 8012f2c:	f000 f80c 	bl	8012f48 <__malloc_unlock>
 8012f30:	e794      	b.n	8012e5c <_malloc_r+0x20>
 8012f32:	6005      	str	r5, [r0, #0]
 8012f34:	e7d6      	b.n	8012ee4 <_malloc_r+0xa8>
 8012f36:	bf00      	nop
 8012f38:	20008b24 	.word	0x20008b24

08012f3c <__malloc_lock>:
 8012f3c:	4801      	ldr	r0, [pc, #4]	@ (8012f44 <__malloc_lock+0x8>)
 8012f3e:	f000 baca 	b.w	80134d6 <__retarget_lock_acquire_recursive>
 8012f42:	bf00      	nop
 8012f44:	20008c68 	.word	0x20008c68

08012f48 <__malloc_unlock>:
 8012f48:	4801      	ldr	r0, [pc, #4]	@ (8012f50 <__malloc_unlock+0x8>)
 8012f4a:	f000 bac5 	b.w	80134d8 <__retarget_lock_release_recursive>
 8012f4e:	bf00      	nop
 8012f50:	20008c68 	.word	0x20008c68

08012f54 <rand>:
 8012f54:	4b16      	ldr	r3, [pc, #88]	@ (8012fb0 <rand+0x5c>)
 8012f56:	b510      	push	{r4, lr}
 8012f58:	681c      	ldr	r4, [r3, #0]
 8012f5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012f5c:	b9b3      	cbnz	r3, 8012f8c <rand+0x38>
 8012f5e:	2018      	movs	r0, #24
 8012f60:	f000 fb32 	bl	80135c8 <malloc>
 8012f64:	4602      	mov	r2, r0
 8012f66:	6320      	str	r0, [r4, #48]	@ 0x30
 8012f68:	b920      	cbnz	r0, 8012f74 <rand+0x20>
 8012f6a:	4b12      	ldr	r3, [pc, #72]	@ (8012fb4 <rand+0x60>)
 8012f6c:	4812      	ldr	r0, [pc, #72]	@ (8012fb8 <rand+0x64>)
 8012f6e:	2152      	movs	r1, #82	@ 0x52
 8012f70:	f000 fac2 	bl	80134f8 <__assert_func>
 8012f74:	4911      	ldr	r1, [pc, #68]	@ (8012fbc <rand+0x68>)
 8012f76:	4b12      	ldr	r3, [pc, #72]	@ (8012fc0 <rand+0x6c>)
 8012f78:	e9c0 1300 	strd	r1, r3, [r0]
 8012f7c:	4b11      	ldr	r3, [pc, #68]	@ (8012fc4 <rand+0x70>)
 8012f7e:	6083      	str	r3, [r0, #8]
 8012f80:	230b      	movs	r3, #11
 8012f82:	8183      	strh	r3, [r0, #12]
 8012f84:	2100      	movs	r1, #0
 8012f86:	2001      	movs	r0, #1
 8012f88:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012f8c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012f8e:	480e      	ldr	r0, [pc, #56]	@ (8012fc8 <rand+0x74>)
 8012f90:	690b      	ldr	r3, [r1, #16]
 8012f92:	694c      	ldr	r4, [r1, #20]
 8012f94:	4a0d      	ldr	r2, [pc, #52]	@ (8012fcc <rand+0x78>)
 8012f96:	4358      	muls	r0, r3
 8012f98:	fb02 0004 	mla	r0, r2, r4, r0
 8012f9c:	fba3 3202 	umull	r3, r2, r3, r2
 8012fa0:	3301      	adds	r3, #1
 8012fa2:	eb40 0002 	adc.w	r0, r0, r2
 8012fa6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012faa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8012fae:	bd10      	pop	{r4, pc}
 8012fb0:	200000ac 	.word	0x200000ac
 8012fb4:	08017202 	.word	0x08017202
 8012fb8:	08017219 	.word	0x08017219
 8012fbc:	abcd330e 	.word	0xabcd330e
 8012fc0:	e66d1234 	.word	0xe66d1234
 8012fc4:	0005deec 	.word	0x0005deec
 8012fc8:	5851f42d 	.word	0x5851f42d
 8012fcc:	4c957f2d 	.word	0x4c957f2d

08012fd0 <_strtol_l.isra.0>:
 8012fd0:	2b24      	cmp	r3, #36	@ 0x24
 8012fd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fd6:	4686      	mov	lr, r0
 8012fd8:	4690      	mov	r8, r2
 8012fda:	d801      	bhi.n	8012fe0 <_strtol_l.isra.0+0x10>
 8012fdc:	2b01      	cmp	r3, #1
 8012fde:	d106      	bne.n	8012fee <_strtol_l.isra.0+0x1e>
 8012fe0:	f000 fa4e 	bl	8013480 <__errno>
 8012fe4:	2316      	movs	r3, #22
 8012fe6:	6003      	str	r3, [r0, #0]
 8012fe8:	2000      	movs	r0, #0
 8012fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fee:	4834      	ldr	r0, [pc, #208]	@ (80130c0 <_strtol_l.isra.0+0xf0>)
 8012ff0:	460d      	mov	r5, r1
 8012ff2:	462a      	mov	r2, r5
 8012ff4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012ff8:	5d06      	ldrb	r6, [r0, r4]
 8012ffa:	f016 0608 	ands.w	r6, r6, #8
 8012ffe:	d1f8      	bne.n	8012ff2 <_strtol_l.isra.0+0x22>
 8013000:	2c2d      	cmp	r4, #45	@ 0x2d
 8013002:	d110      	bne.n	8013026 <_strtol_l.isra.0+0x56>
 8013004:	782c      	ldrb	r4, [r5, #0]
 8013006:	2601      	movs	r6, #1
 8013008:	1c95      	adds	r5, r2, #2
 801300a:	f033 0210 	bics.w	r2, r3, #16
 801300e:	d115      	bne.n	801303c <_strtol_l.isra.0+0x6c>
 8013010:	2c30      	cmp	r4, #48	@ 0x30
 8013012:	d10d      	bne.n	8013030 <_strtol_l.isra.0+0x60>
 8013014:	782a      	ldrb	r2, [r5, #0]
 8013016:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801301a:	2a58      	cmp	r2, #88	@ 0x58
 801301c:	d108      	bne.n	8013030 <_strtol_l.isra.0+0x60>
 801301e:	786c      	ldrb	r4, [r5, #1]
 8013020:	3502      	adds	r5, #2
 8013022:	2310      	movs	r3, #16
 8013024:	e00a      	b.n	801303c <_strtol_l.isra.0+0x6c>
 8013026:	2c2b      	cmp	r4, #43	@ 0x2b
 8013028:	bf04      	itt	eq
 801302a:	782c      	ldrbeq	r4, [r5, #0]
 801302c:	1c95      	addeq	r5, r2, #2
 801302e:	e7ec      	b.n	801300a <_strtol_l.isra.0+0x3a>
 8013030:	2b00      	cmp	r3, #0
 8013032:	d1f6      	bne.n	8013022 <_strtol_l.isra.0+0x52>
 8013034:	2c30      	cmp	r4, #48	@ 0x30
 8013036:	bf14      	ite	ne
 8013038:	230a      	movne	r3, #10
 801303a:	2308      	moveq	r3, #8
 801303c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013040:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013044:	2200      	movs	r2, #0
 8013046:	fbbc f9f3 	udiv	r9, ip, r3
 801304a:	4610      	mov	r0, r2
 801304c:	fb03 ca19 	mls	sl, r3, r9, ip
 8013050:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013054:	2f09      	cmp	r7, #9
 8013056:	d80f      	bhi.n	8013078 <_strtol_l.isra.0+0xa8>
 8013058:	463c      	mov	r4, r7
 801305a:	42a3      	cmp	r3, r4
 801305c:	dd1b      	ble.n	8013096 <_strtol_l.isra.0+0xc6>
 801305e:	1c57      	adds	r7, r2, #1
 8013060:	d007      	beq.n	8013072 <_strtol_l.isra.0+0xa2>
 8013062:	4581      	cmp	r9, r0
 8013064:	d314      	bcc.n	8013090 <_strtol_l.isra.0+0xc0>
 8013066:	d101      	bne.n	801306c <_strtol_l.isra.0+0x9c>
 8013068:	45a2      	cmp	sl, r4
 801306a:	db11      	blt.n	8013090 <_strtol_l.isra.0+0xc0>
 801306c:	fb00 4003 	mla	r0, r0, r3, r4
 8013070:	2201      	movs	r2, #1
 8013072:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013076:	e7eb      	b.n	8013050 <_strtol_l.isra.0+0x80>
 8013078:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801307c:	2f19      	cmp	r7, #25
 801307e:	d801      	bhi.n	8013084 <_strtol_l.isra.0+0xb4>
 8013080:	3c37      	subs	r4, #55	@ 0x37
 8013082:	e7ea      	b.n	801305a <_strtol_l.isra.0+0x8a>
 8013084:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013088:	2f19      	cmp	r7, #25
 801308a:	d804      	bhi.n	8013096 <_strtol_l.isra.0+0xc6>
 801308c:	3c57      	subs	r4, #87	@ 0x57
 801308e:	e7e4      	b.n	801305a <_strtol_l.isra.0+0x8a>
 8013090:	f04f 32ff 	mov.w	r2, #4294967295
 8013094:	e7ed      	b.n	8013072 <_strtol_l.isra.0+0xa2>
 8013096:	1c53      	adds	r3, r2, #1
 8013098:	d108      	bne.n	80130ac <_strtol_l.isra.0+0xdc>
 801309a:	2322      	movs	r3, #34	@ 0x22
 801309c:	f8ce 3000 	str.w	r3, [lr]
 80130a0:	4660      	mov	r0, ip
 80130a2:	f1b8 0f00 	cmp.w	r8, #0
 80130a6:	d0a0      	beq.n	8012fea <_strtol_l.isra.0+0x1a>
 80130a8:	1e69      	subs	r1, r5, #1
 80130aa:	e006      	b.n	80130ba <_strtol_l.isra.0+0xea>
 80130ac:	b106      	cbz	r6, 80130b0 <_strtol_l.isra.0+0xe0>
 80130ae:	4240      	negs	r0, r0
 80130b0:	f1b8 0f00 	cmp.w	r8, #0
 80130b4:	d099      	beq.n	8012fea <_strtol_l.isra.0+0x1a>
 80130b6:	2a00      	cmp	r2, #0
 80130b8:	d1f6      	bne.n	80130a8 <_strtol_l.isra.0+0xd8>
 80130ba:	f8c8 1000 	str.w	r1, [r8]
 80130be:	e794      	b.n	8012fea <_strtol_l.isra.0+0x1a>
 80130c0:	080172e1 	.word	0x080172e1

080130c4 <strtol>:
 80130c4:	4613      	mov	r3, r2
 80130c6:	460a      	mov	r2, r1
 80130c8:	4601      	mov	r1, r0
 80130ca:	4802      	ldr	r0, [pc, #8]	@ (80130d4 <strtol+0x10>)
 80130cc:	6800      	ldr	r0, [r0, #0]
 80130ce:	f7ff bf7f 	b.w	8012fd0 <_strtol_l.isra.0>
 80130d2:	bf00      	nop
 80130d4:	200000ac 	.word	0x200000ac

080130d8 <std>:
 80130d8:	2300      	movs	r3, #0
 80130da:	b510      	push	{r4, lr}
 80130dc:	4604      	mov	r4, r0
 80130de:	e9c0 3300 	strd	r3, r3, [r0]
 80130e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80130e6:	6083      	str	r3, [r0, #8]
 80130e8:	8181      	strh	r1, [r0, #12]
 80130ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80130ec:	81c2      	strh	r2, [r0, #14]
 80130ee:	6183      	str	r3, [r0, #24]
 80130f0:	4619      	mov	r1, r3
 80130f2:	2208      	movs	r2, #8
 80130f4:	305c      	adds	r0, #92	@ 0x5c
 80130f6:	f000 f952 	bl	801339e <memset>
 80130fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013130 <std+0x58>)
 80130fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80130fe:	4b0d      	ldr	r3, [pc, #52]	@ (8013134 <std+0x5c>)
 8013100:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013102:	4b0d      	ldr	r3, [pc, #52]	@ (8013138 <std+0x60>)
 8013104:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013106:	4b0d      	ldr	r3, [pc, #52]	@ (801313c <std+0x64>)
 8013108:	6323      	str	r3, [r4, #48]	@ 0x30
 801310a:	4b0d      	ldr	r3, [pc, #52]	@ (8013140 <std+0x68>)
 801310c:	6224      	str	r4, [r4, #32]
 801310e:	429c      	cmp	r4, r3
 8013110:	d006      	beq.n	8013120 <std+0x48>
 8013112:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013116:	4294      	cmp	r4, r2
 8013118:	d002      	beq.n	8013120 <std+0x48>
 801311a:	33d0      	adds	r3, #208	@ 0xd0
 801311c:	429c      	cmp	r4, r3
 801311e:	d105      	bne.n	801312c <std+0x54>
 8013120:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013128:	f000 b9d4 	b.w	80134d4 <__retarget_lock_init_recursive>
 801312c:	bd10      	pop	{r4, pc}
 801312e:	bf00      	nop
 8013130:	080132c5 	.word	0x080132c5
 8013134:	080132e7 	.word	0x080132e7
 8013138:	0801331f 	.word	0x0801331f
 801313c:	08013343 	.word	0x08013343
 8013140:	20008b28 	.word	0x20008b28

08013144 <stdio_exit_handler>:
 8013144:	4a02      	ldr	r2, [pc, #8]	@ (8013150 <stdio_exit_handler+0xc>)
 8013146:	4903      	ldr	r1, [pc, #12]	@ (8013154 <stdio_exit_handler+0x10>)
 8013148:	4803      	ldr	r0, [pc, #12]	@ (8013158 <stdio_exit_handler+0x14>)
 801314a:	f000 b869 	b.w	8013220 <_fwalk_sglue>
 801314e:	bf00      	nop
 8013150:	200000a0 	.word	0x200000a0
 8013154:	08013f2d 	.word	0x08013f2d
 8013158:	200000b0 	.word	0x200000b0

0801315c <cleanup_stdio>:
 801315c:	6841      	ldr	r1, [r0, #4]
 801315e:	4b0c      	ldr	r3, [pc, #48]	@ (8013190 <cleanup_stdio+0x34>)
 8013160:	4299      	cmp	r1, r3
 8013162:	b510      	push	{r4, lr}
 8013164:	4604      	mov	r4, r0
 8013166:	d001      	beq.n	801316c <cleanup_stdio+0x10>
 8013168:	f000 fee0 	bl	8013f2c <_fflush_r>
 801316c:	68a1      	ldr	r1, [r4, #8]
 801316e:	4b09      	ldr	r3, [pc, #36]	@ (8013194 <cleanup_stdio+0x38>)
 8013170:	4299      	cmp	r1, r3
 8013172:	d002      	beq.n	801317a <cleanup_stdio+0x1e>
 8013174:	4620      	mov	r0, r4
 8013176:	f000 fed9 	bl	8013f2c <_fflush_r>
 801317a:	68e1      	ldr	r1, [r4, #12]
 801317c:	4b06      	ldr	r3, [pc, #24]	@ (8013198 <cleanup_stdio+0x3c>)
 801317e:	4299      	cmp	r1, r3
 8013180:	d004      	beq.n	801318c <cleanup_stdio+0x30>
 8013182:	4620      	mov	r0, r4
 8013184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013188:	f000 bed0 	b.w	8013f2c <_fflush_r>
 801318c:	bd10      	pop	{r4, pc}
 801318e:	bf00      	nop
 8013190:	20008b28 	.word	0x20008b28
 8013194:	20008b90 	.word	0x20008b90
 8013198:	20008bf8 	.word	0x20008bf8

0801319c <global_stdio_init.part.0>:
 801319c:	b510      	push	{r4, lr}
 801319e:	4b0b      	ldr	r3, [pc, #44]	@ (80131cc <global_stdio_init.part.0+0x30>)
 80131a0:	4c0b      	ldr	r4, [pc, #44]	@ (80131d0 <global_stdio_init.part.0+0x34>)
 80131a2:	4a0c      	ldr	r2, [pc, #48]	@ (80131d4 <global_stdio_init.part.0+0x38>)
 80131a4:	601a      	str	r2, [r3, #0]
 80131a6:	4620      	mov	r0, r4
 80131a8:	2200      	movs	r2, #0
 80131aa:	2104      	movs	r1, #4
 80131ac:	f7ff ff94 	bl	80130d8 <std>
 80131b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80131b4:	2201      	movs	r2, #1
 80131b6:	2109      	movs	r1, #9
 80131b8:	f7ff ff8e 	bl	80130d8 <std>
 80131bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80131c0:	2202      	movs	r2, #2
 80131c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131c6:	2112      	movs	r1, #18
 80131c8:	f7ff bf86 	b.w	80130d8 <std>
 80131cc:	20008c60 	.word	0x20008c60
 80131d0:	20008b28 	.word	0x20008b28
 80131d4:	08013145 	.word	0x08013145

080131d8 <__sfp_lock_acquire>:
 80131d8:	4801      	ldr	r0, [pc, #4]	@ (80131e0 <__sfp_lock_acquire+0x8>)
 80131da:	f000 b97c 	b.w	80134d6 <__retarget_lock_acquire_recursive>
 80131de:	bf00      	nop
 80131e0:	20008c69 	.word	0x20008c69

080131e4 <__sfp_lock_release>:
 80131e4:	4801      	ldr	r0, [pc, #4]	@ (80131ec <__sfp_lock_release+0x8>)
 80131e6:	f000 b977 	b.w	80134d8 <__retarget_lock_release_recursive>
 80131ea:	bf00      	nop
 80131ec:	20008c69 	.word	0x20008c69

080131f0 <__sinit>:
 80131f0:	b510      	push	{r4, lr}
 80131f2:	4604      	mov	r4, r0
 80131f4:	f7ff fff0 	bl	80131d8 <__sfp_lock_acquire>
 80131f8:	6a23      	ldr	r3, [r4, #32]
 80131fa:	b11b      	cbz	r3, 8013204 <__sinit+0x14>
 80131fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013200:	f7ff bff0 	b.w	80131e4 <__sfp_lock_release>
 8013204:	4b04      	ldr	r3, [pc, #16]	@ (8013218 <__sinit+0x28>)
 8013206:	6223      	str	r3, [r4, #32]
 8013208:	4b04      	ldr	r3, [pc, #16]	@ (801321c <__sinit+0x2c>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d1f5      	bne.n	80131fc <__sinit+0xc>
 8013210:	f7ff ffc4 	bl	801319c <global_stdio_init.part.0>
 8013214:	e7f2      	b.n	80131fc <__sinit+0xc>
 8013216:	bf00      	nop
 8013218:	0801315d 	.word	0x0801315d
 801321c:	20008c60 	.word	0x20008c60

08013220 <_fwalk_sglue>:
 8013220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013224:	4607      	mov	r7, r0
 8013226:	4688      	mov	r8, r1
 8013228:	4614      	mov	r4, r2
 801322a:	2600      	movs	r6, #0
 801322c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013230:	f1b9 0901 	subs.w	r9, r9, #1
 8013234:	d505      	bpl.n	8013242 <_fwalk_sglue+0x22>
 8013236:	6824      	ldr	r4, [r4, #0]
 8013238:	2c00      	cmp	r4, #0
 801323a:	d1f7      	bne.n	801322c <_fwalk_sglue+0xc>
 801323c:	4630      	mov	r0, r6
 801323e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013242:	89ab      	ldrh	r3, [r5, #12]
 8013244:	2b01      	cmp	r3, #1
 8013246:	d907      	bls.n	8013258 <_fwalk_sglue+0x38>
 8013248:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801324c:	3301      	adds	r3, #1
 801324e:	d003      	beq.n	8013258 <_fwalk_sglue+0x38>
 8013250:	4629      	mov	r1, r5
 8013252:	4638      	mov	r0, r7
 8013254:	47c0      	blx	r8
 8013256:	4306      	orrs	r6, r0
 8013258:	3568      	adds	r5, #104	@ 0x68
 801325a:	e7e9      	b.n	8013230 <_fwalk_sglue+0x10>

0801325c <iprintf>:
 801325c:	b40f      	push	{r0, r1, r2, r3}
 801325e:	b507      	push	{r0, r1, r2, lr}
 8013260:	4906      	ldr	r1, [pc, #24]	@ (801327c <iprintf+0x20>)
 8013262:	ab04      	add	r3, sp, #16
 8013264:	6808      	ldr	r0, [r1, #0]
 8013266:	f853 2b04 	ldr.w	r2, [r3], #4
 801326a:	6881      	ldr	r1, [r0, #8]
 801326c:	9301      	str	r3, [sp, #4]
 801326e:	f000 fb35 	bl	80138dc <_vfiprintf_r>
 8013272:	b003      	add	sp, #12
 8013274:	f85d eb04 	ldr.w	lr, [sp], #4
 8013278:	b004      	add	sp, #16
 801327a:	4770      	bx	lr
 801327c:	200000ac 	.word	0x200000ac

08013280 <siprintf>:
 8013280:	b40e      	push	{r1, r2, r3}
 8013282:	b510      	push	{r4, lr}
 8013284:	b09d      	sub	sp, #116	@ 0x74
 8013286:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013288:	9002      	str	r0, [sp, #8]
 801328a:	9006      	str	r0, [sp, #24]
 801328c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013290:	480a      	ldr	r0, [pc, #40]	@ (80132bc <siprintf+0x3c>)
 8013292:	9107      	str	r1, [sp, #28]
 8013294:	9104      	str	r1, [sp, #16]
 8013296:	490a      	ldr	r1, [pc, #40]	@ (80132c0 <siprintf+0x40>)
 8013298:	f853 2b04 	ldr.w	r2, [r3], #4
 801329c:	9105      	str	r1, [sp, #20]
 801329e:	2400      	movs	r4, #0
 80132a0:	a902      	add	r1, sp, #8
 80132a2:	6800      	ldr	r0, [r0, #0]
 80132a4:	9301      	str	r3, [sp, #4]
 80132a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80132a8:	f000 f9f2 	bl	8013690 <_svfiprintf_r>
 80132ac:	9b02      	ldr	r3, [sp, #8]
 80132ae:	701c      	strb	r4, [r3, #0]
 80132b0:	b01d      	add	sp, #116	@ 0x74
 80132b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132b6:	b003      	add	sp, #12
 80132b8:	4770      	bx	lr
 80132ba:	bf00      	nop
 80132bc:	200000ac 	.word	0x200000ac
 80132c0:	ffff0208 	.word	0xffff0208

080132c4 <__sread>:
 80132c4:	b510      	push	{r4, lr}
 80132c6:	460c      	mov	r4, r1
 80132c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132cc:	f000 f8a4 	bl	8013418 <_read_r>
 80132d0:	2800      	cmp	r0, #0
 80132d2:	bfab      	itete	ge
 80132d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80132d6:	89a3      	ldrhlt	r3, [r4, #12]
 80132d8:	181b      	addge	r3, r3, r0
 80132da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80132de:	bfac      	ite	ge
 80132e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80132e2:	81a3      	strhlt	r3, [r4, #12]
 80132e4:	bd10      	pop	{r4, pc}

080132e6 <__swrite>:
 80132e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132ea:	461f      	mov	r7, r3
 80132ec:	898b      	ldrh	r3, [r1, #12]
 80132ee:	05db      	lsls	r3, r3, #23
 80132f0:	4605      	mov	r5, r0
 80132f2:	460c      	mov	r4, r1
 80132f4:	4616      	mov	r6, r2
 80132f6:	d505      	bpl.n	8013304 <__swrite+0x1e>
 80132f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132fc:	2302      	movs	r3, #2
 80132fe:	2200      	movs	r2, #0
 8013300:	f000 f878 	bl	80133f4 <_lseek_r>
 8013304:	89a3      	ldrh	r3, [r4, #12]
 8013306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801330a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801330e:	81a3      	strh	r3, [r4, #12]
 8013310:	4632      	mov	r2, r6
 8013312:	463b      	mov	r3, r7
 8013314:	4628      	mov	r0, r5
 8013316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801331a:	f000 b89f 	b.w	801345c <_write_r>

0801331e <__sseek>:
 801331e:	b510      	push	{r4, lr}
 8013320:	460c      	mov	r4, r1
 8013322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013326:	f000 f865 	bl	80133f4 <_lseek_r>
 801332a:	1c43      	adds	r3, r0, #1
 801332c:	89a3      	ldrh	r3, [r4, #12]
 801332e:	bf15      	itete	ne
 8013330:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013332:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013336:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801333a:	81a3      	strheq	r3, [r4, #12]
 801333c:	bf18      	it	ne
 801333e:	81a3      	strhne	r3, [r4, #12]
 8013340:	bd10      	pop	{r4, pc}

08013342 <__sclose>:
 8013342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013346:	f000 b845 	b.w	80133d4 <_close_r>

0801334a <memcmp>:
 801334a:	b510      	push	{r4, lr}
 801334c:	3901      	subs	r1, #1
 801334e:	4402      	add	r2, r0
 8013350:	4290      	cmp	r0, r2
 8013352:	d101      	bne.n	8013358 <memcmp+0xe>
 8013354:	2000      	movs	r0, #0
 8013356:	e005      	b.n	8013364 <memcmp+0x1a>
 8013358:	7803      	ldrb	r3, [r0, #0]
 801335a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801335e:	42a3      	cmp	r3, r4
 8013360:	d001      	beq.n	8013366 <memcmp+0x1c>
 8013362:	1b18      	subs	r0, r3, r4
 8013364:	bd10      	pop	{r4, pc}
 8013366:	3001      	adds	r0, #1
 8013368:	e7f2      	b.n	8013350 <memcmp+0x6>

0801336a <memmove>:
 801336a:	4288      	cmp	r0, r1
 801336c:	b510      	push	{r4, lr}
 801336e:	eb01 0402 	add.w	r4, r1, r2
 8013372:	d902      	bls.n	801337a <memmove+0x10>
 8013374:	4284      	cmp	r4, r0
 8013376:	4623      	mov	r3, r4
 8013378:	d807      	bhi.n	801338a <memmove+0x20>
 801337a:	1e43      	subs	r3, r0, #1
 801337c:	42a1      	cmp	r1, r4
 801337e:	d008      	beq.n	8013392 <memmove+0x28>
 8013380:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013384:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013388:	e7f8      	b.n	801337c <memmove+0x12>
 801338a:	4402      	add	r2, r0
 801338c:	4601      	mov	r1, r0
 801338e:	428a      	cmp	r2, r1
 8013390:	d100      	bne.n	8013394 <memmove+0x2a>
 8013392:	bd10      	pop	{r4, pc}
 8013394:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013398:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801339c:	e7f7      	b.n	801338e <memmove+0x24>

0801339e <memset>:
 801339e:	4402      	add	r2, r0
 80133a0:	4603      	mov	r3, r0
 80133a2:	4293      	cmp	r3, r2
 80133a4:	d100      	bne.n	80133a8 <memset+0xa>
 80133a6:	4770      	bx	lr
 80133a8:	f803 1b01 	strb.w	r1, [r3], #1
 80133ac:	e7f9      	b.n	80133a2 <memset+0x4>

080133ae <strncpy>:
 80133ae:	b510      	push	{r4, lr}
 80133b0:	3901      	subs	r1, #1
 80133b2:	4603      	mov	r3, r0
 80133b4:	b132      	cbz	r2, 80133c4 <strncpy+0x16>
 80133b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80133ba:	f803 4b01 	strb.w	r4, [r3], #1
 80133be:	3a01      	subs	r2, #1
 80133c0:	2c00      	cmp	r4, #0
 80133c2:	d1f7      	bne.n	80133b4 <strncpy+0x6>
 80133c4:	441a      	add	r2, r3
 80133c6:	2100      	movs	r1, #0
 80133c8:	4293      	cmp	r3, r2
 80133ca:	d100      	bne.n	80133ce <strncpy+0x20>
 80133cc:	bd10      	pop	{r4, pc}
 80133ce:	f803 1b01 	strb.w	r1, [r3], #1
 80133d2:	e7f9      	b.n	80133c8 <strncpy+0x1a>

080133d4 <_close_r>:
 80133d4:	b538      	push	{r3, r4, r5, lr}
 80133d6:	4d06      	ldr	r5, [pc, #24]	@ (80133f0 <_close_r+0x1c>)
 80133d8:	2300      	movs	r3, #0
 80133da:	4604      	mov	r4, r0
 80133dc:	4608      	mov	r0, r1
 80133de:	602b      	str	r3, [r5, #0]
 80133e0:	f7f0 f842 	bl	8003468 <_close>
 80133e4:	1c43      	adds	r3, r0, #1
 80133e6:	d102      	bne.n	80133ee <_close_r+0x1a>
 80133e8:	682b      	ldr	r3, [r5, #0]
 80133ea:	b103      	cbz	r3, 80133ee <_close_r+0x1a>
 80133ec:	6023      	str	r3, [r4, #0]
 80133ee:	bd38      	pop	{r3, r4, r5, pc}
 80133f0:	20008c64 	.word	0x20008c64

080133f4 <_lseek_r>:
 80133f4:	b538      	push	{r3, r4, r5, lr}
 80133f6:	4d07      	ldr	r5, [pc, #28]	@ (8013414 <_lseek_r+0x20>)
 80133f8:	4604      	mov	r4, r0
 80133fa:	4608      	mov	r0, r1
 80133fc:	4611      	mov	r1, r2
 80133fe:	2200      	movs	r2, #0
 8013400:	602a      	str	r2, [r5, #0]
 8013402:	461a      	mov	r2, r3
 8013404:	f7f0 f857 	bl	80034b6 <_lseek>
 8013408:	1c43      	adds	r3, r0, #1
 801340a:	d102      	bne.n	8013412 <_lseek_r+0x1e>
 801340c:	682b      	ldr	r3, [r5, #0]
 801340e:	b103      	cbz	r3, 8013412 <_lseek_r+0x1e>
 8013410:	6023      	str	r3, [r4, #0]
 8013412:	bd38      	pop	{r3, r4, r5, pc}
 8013414:	20008c64 	.word	0x20008c64

08013418 <_read_r>:
 8013418:	b538      	push	{r3, r4, r5, lr}
 801341a:	4d07      	ldr	r5, [pc, #28]	@ (8013438 <_read_r+0x20>)
 801341c:	4604      	mov	r4, r0
 801341e:	4608      	mov	r0, r1
 8013420:	4611      	mov	r1, r2
 8013422:	2200      	movs	r2, #0
 8013424:	602a      	str	r2, [r5, #0]
 8013426:	461a      	mov	r2, r3
 8013428:	f7ef ffe5 	bl	80033f6 <_read>
 801342c:	1c43      	adds	r3, r0, #1
 801342e:	d102      	bne.n	8013436 <_read_r+0x1e>
 8013430:	682b      	ldr	r3, [r5, #0]
 8013432:	b103      	cbz	r3, 8013436 <_read_r+0x1e>
 8013434:	6023      	str	r3, [r4, #0]
 8013436:	bd38      	pop	{r3, r4, r5, pc}
 8013438:	20008c64 	.word	0x20008c64

0801343c <_sbrk_r>:
 801343c:	b538      	push	{r3, r4, r5, lr}
 801343e:	4d06      	ldr	r5, [pc, #24]	@ (8013458 <_sbrk_r+0x1c>)
 8013440:	2300      	movs	r3, #0
 8013442:	4604      	mov	r4, r0
 8013444:	4608      	mov	r0, r1
 8013446:	602b      	str	r3, [r5, #0]
 8013448:	f7f0 f842 	bl	80034d0 <_sbrk>
 801344c:	1c43      	adds	r3, r0, #1
 801344e:	d102      	bne.n	8013456 <_sbrk_r+0x1a>
 8013450:	682b      	ldr	r3, [r5, #0]
 8013452:	b103      	cbz	r3, 8013456 <_sbrk_r+0x1a>
 8013454:	6023      	str	r3, [r4, #0]
 8013456:	bd38      	pop	{r3, r4, r5, pc}
 8013458:	20008c64 	.word	0x20008c64

0801345c <_write_r>:
 801345c:	b538      	push	{r3, r4, r5, lr}
 801345e:	4d07      	ldr	r5, [pc, #28]	@ (801347c <_write_r+0x20>)
 8013460:	4604      	mov	r4, r0
 8013462:	4608      	mov	r0, r1
 8013464:	4611      	mov	r1, r2
 8013466:	2200      	movs	r2, #0
 8013468:	602a      	str	r2, [r5, #0]
 801346a:	461a      	mov	r2, r3
 801346c:	f7ef ffe0 	bl	8003430 <_write>
 8013470:	1c43      	adds	r3, r0, #1
 8013472:	d102      	bne.n	801347a <_write_r+0x1e>
 8013474:	682b      	ldr	r3, [r5, #0]
 8013476:	b103      	cbz	r3, 801347a <_write_r+0x1e>
 8013478:	6023      	str	r3, [r4, #0]
 801347a:	bd38      	pop	{r3, r4, r5, pc}
 801347c:	20008c64 	.word	0x20008c64

08013480 <__errno>:
 8013480:	4b01      	ldr	r3, [pc, #4]	@ (8013488 <__errno+0x8>)
 8013482:	6818      	ldr	r0, [r3, #0]
 8013484:	4770      	bx	lr
 8013486:	bf00      	nop
 8013488:	200000ac 	.word	0x200000ac

0801348c <__libc_init_array>:
 801348c:	b570      	push	{r4, r5, r6, lr}
 801348e:	4d0d      	ldr	r5, [pc, #52]	@ (80134c4 <__libc_init_array+0x38>)
 8013490:	4c0d      	ldr	r4, [pc, #52]	@ (80134c8 <__libc_init_array+0x3c>)
 8013492:	1b64      	subs	r4, r4, r5
 8013494:	10a4      	asrs	r4, r4, #2
 8013496:	2600      	movs	r6, #0
 8013498:	42a6      	cmp	r6, r4
 801349a:	d109      	bne.n	80134b0 <__libc_init_array+0x24>
 801349c:	4d0b      	ldr	r5, [pc, #44]	@ (80134cc <__libc_init_array+0x40>)
 801349e:	4c0c      	ldr	r4, [pc, #48]	@ (80134d0 <__libc_init_array+0x44>)
 80134a0:	f001 f868 	bl	8014574 <_init>
 80134a4:	1b64      	subs	r4, r4, r5
 80134a6:	10a4      	asrs	r4, r4, #2
 80134a8:	2600      	movs	r6, #0
 80134aa:	42a6      	cmp	r6, r4
 80134ac:	d105      	bne.n	80134ba <__libc_init_array+0x2e>
 80134ae:	bd70      	pop	{r4, r5, r6, pc}
 80134b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80134b4:	4798      	blx	r3
 80134b6:	3601      	adds	r6, #1
 80134b8:	e7ee      	b.n	8013498 <__libc_init_array+0xc>
 80134ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80134be:	4798      	blx	r3
 80134c0:	3601      	adds	r6, #1
 80134c2:	e7f2      	b.n	80134aa <__libc_init_array+0x1e>
 80134c4:	08017400 	.word	0x08017400
 80134c8:	08017400 	.word	0x08017400
 80134cc:	08017400 	.word	0x08017400
 80134d0:	08017404 	.word	0x08017404

080134d4 <__retarget_lock_init_recursive>:
 80134d4:	4770      	bx	lr

080134d6 <__retarget_lock_acquire_recursive>:
 80134d6:	4770      	bx	lr

080134d8 <__retarget_lock_release_recursive>:
 80134d8:	4770      	bx	lr

080134da <memcpy>:
 80134da:	440a      	add	r2, r1
 80134dc:	4291      	cmp	r1, r2
 80134de:	f100 33ff 	add.w	r3, r0, #4294967295
 80134e2:	d100      	bne.n	80134e6 <memcpy+0xc>
 80134e4:	4770      	bx	lr
 80134e6:	b510      	push	{r4, lr}
 80134e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134f0:	4291      	cmp	r1, r2
 80134f2:	d1f9      	bne.n	80134e8 <memcpy+0xe>
 80134f4:	bd10      	pop	{r4, pc}
	...

080134f8 <__assert_func>:
 80134f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80134fa:	4614      	mov	r4, r2
 80134fc:	461a      	mov	r2, r3
 80134fe:	4b09      	ldr	r3, [pc, #36]	@ (8013524 <__assert_func+0x2c>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	4605      	mov	r5, r0
 8013504:	68d8      	ldr	r0, [r3, #12]
 8013506:	b14c      	cbz	r4, 801351c <__assert_func+0x24>
 8013508:	4b07      	ldr	r3, [pc, #28]	@ (8013528 <__assert_func+0x30>)
 801350a:	9100      	str	r1, [sp, #0]
 801350c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013510:	4906      	ldr	r1, [pc, #24]	@ (801352c <__assert_func+0x34>)
 8013512:	462b      	mov	r3, r5
 8013514:	f000 fd32 	bl	8013f7c <fiprintf>
 8013518:	f000 fdd6 	bl	80140c8 <abort>
 801351c:	4b04      	ldr	r3, [pc, #16]	@ (8013530 <__assert_func+0x38>)
 801351e:	461c      	mov	r4, r3
 8013520:	e7f3      	b.n	801350a <__assert_func+0x12>
 8013522:	bf00      	nop
 8013524:	200000ac 	.word	0x200000ac
 8013528:	08017271 	.word	0x08017271
 801352c:	0801727e 	.word	0x0801727e
 8013530:	080172ac 	.word	0x080172ac

08013534 <_free_r>:
 8013534:	b538      	push	{r3, r4, r5, lr}
 8013536:	4605      	mov	r5, r0
 8013538:	2900      	cmp	r1, #0
 801353a:	d041      	beq.n	80135c0 <_free_r+0x8c>
 801353c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013540:	1f0c      	subs	r4, r1, #4
 8013542:	2b00      	cmp	r3, #0
 8013544:	bfb8      	it	lt
 8013546:	18e4      	addlt	r4, r4, r3
 8013548:	f7ff fcf8 	bl	8012f3c <__malloc_lock>
 801354c:	4a1d      	ldr	r2, [pc, #116]	@ (80135c4 <_free_r+0x90>)
 801354e:	6813      	ldr	r3, [r2, #0]
 8013550:	b933      	cbnz	r3, 8013560 <_free_r+0x2c>
 8013552:	6063      	str	r3, [r4, #4]
 8013554:	6014      	str	r4, [r2, #0]
 8013556:	4628      	mov	r0, r5
 8013558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801355c:	f7ff bcf4 	b.w	8012f48 <__malloc_unlock>
 8013560:	42a3      	cmp	r3, r4
 8013562:	d908      	bls.n	8013576 <_free_r+0x42>
 8013564:	6820      	ldr	r0, [r4, #0]
 8013566:	1821      	adds	r1, r4, r0
 8013568:	428b      	cmp	r3, r1
 801356a:	bf01      	itttt	eq
 801356c:	6819      	ldreq	r1, [r3, #0]
 801356e:	685b      	ldreq	r3, [r3, #4]
 8013570:	1809      	addeq	r1, r1, r0
 8013572:	6021      	streq	r1, [r4, #0]
 8013574:	e7ed      	b.n	8013552 <_free_r+0x1e>
 8013576:	461a      	mov	r2, r3
 8013578:	685b      	ldr	r3, [r3, #4]
 801357a:	b10b      	cbz	r3, 8013580 <_free_r+0x4c>
 801357c:	42a3      	cmp	r3, r4
 801357e:	d9fa      	bls.n	8013576 <_free_r+0x42>
 8013580:	6811      	ldr	r1, [r2, #0]
 8013582:	1850      	adds	r0, r2, r1
 8013584:	42a0      	cmp	r0, r4
 8013586:	d10b      	bne.n	80135a0 <_free_r+0x6c>
 8013588:	6820      	ldr	r0, [r4, #0]
 801358a:	4401      	add	r1, r0
 801358c:	1850      	adds	r0, r2, r1
 801358e:	4283      	cmp	r3, r0
 8013590:	6011      	str	r1, [r2, #0]
 8013592:	d1e0      	bne.n	8013556 <_free_r+0x22>
 8013594:	6818      	ldr	r0, [r3, #0]
 8013596:	685b      	ldr	r3, [r3, #4]
 8013598:	6053      	str	r3, [r2, #4]
 801359a:	4408      	add	r0, r1
 801359c:	6010      	str	r0, [r2, #0]
 801359e:	e7da      	b.n	8013556 <_free_r+0x22>
 80135a0:	d902      	bls.n	80135a8 <_free_r+0x74>
 80135a2:	230c      	movs	r3, #12
 80135a4:	602b      	str	r3, [r5, #0]
 80135a6:	e7d6      	b.n	8013556 <_free_r+0x22>
 80135a8:	6820      	ldr	r0, [r4, #0]
 80135aa:	1821      	adds	r1, r4, r0
 80135ac:	428b      	cmp	r3, r1
 80135ae:	bf04      	itt	eq
 80135b0:	6819      	ldreq	r1, [r3, #0]
 80135b2:	685b      	ldreq	r3, [r3, #4]
 80135b4:	6063      	str	r3, [r4, #4]
 80135b6:	bf04      	itt	eq
 80135b8:	1809      	addeq	r1, r1, r0
 80135ba:	6021      	streq	r1, [r4, #0]
 80135bc:	6054      	str	r4, [r2, #4]
 80135be:	e7ca      	b.n	8013556 <_free_r+0x22>
 80135c0:	bd38      	pop	{r3, r4, r5, pc}
 80135c2:	bf00      	nop
 80135c4:	20008b24 	.word	0x20008b24

080135c8 <malloc>:
 80135c8:	4b02      	ldr	r3, [pc, #8]	@ (80135d4 <malloc+0xc>)
 80135ca:	4601      	mov	r1, r0
 80135cc:	6818      	ldr	r0, [r3, #0]
 80135ce:	f7ff bc35 	b.w	8012e3c <_malloc_r>
 80135d2:	bf00      	nop
 80135d4:	200000ac 	.word	0x200000ac

080135d8 <__ssputs_r>:
 80135d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135dc:	688e      	ldr	r6, [r1, #8]
 80135de:	461f      	mov	r7, r3
 80135e0:	42be      	cmp	r6, r7
 80135e2:	680b      	ldr	r3, [r1, #0]
 80135e4:	4682      	mov	sl, r0
 80135e6:	460c      	mov	r4, r1
 80135e8:	4690      	mov	r8, r2
 80135ea:	d82d      	bhi.n	8013648 <__ssputs_r+0x70>
 80135ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80135f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80135f4:	d026      	beq.n	8013644 <__ssputs_r+0x6c>
 80135f6:	6965      	ldr	r5, [r4, #20]
 80135f8:	6909      	ldr	r1, [r1, #16]
 80135fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80135fe:	eba3 0901 	sub.w	r9, r3, r1
 8013602:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013606:	1c7b      	adds	r3, r7, #1
 8013608:	444b      	add	r3, r9
 801360a:	106d      	asrs	r5, r5, #1
 801360c:	429d      	cmp	r5, r3
 801360e:	bf38      	it	cc
 8013610:	461d      	movcc	r5, r3
 8013612:	0553      	lsls	r3, r2, #21
 8013614:	d527      	bpl.n	8013666 <__ssputs_r+0x8e>
 8013616:	4629      	mov	r1, r5
 8013618:	f7ff fc10 	bl	8012e3c <_malloc_r>
 801361c:	4606      	mov	r6, r0
 801361e:	b360      	cbz	r0, 801367a <__ssputs_r+0xa2>
 8013620:	6921      	ldr	r1, [r4, #16]
 8013622:	464a      	mov	r2, r9
 8013624:	f7ff ff59 	bl	80134da <memcpy>
 8013628:	89a3      	ldrh	r3, [r4, #12]
 801362a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801362e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013632:	81a3      	strh	r3, [r4, #12]
 8013634:	6126      	str	r6, [r4, #16]
 8013636:	6165      	str	r5, [r4, #20]
 8013638:	444e      	add	r6, r9
 801363a:	eba5 0509 	sub.w	r5, r5, r9
 801363e:	6026      	str	r6, [r4, #0]
 8013640:	60a5      	str	r5, [r4, #8]
 8013642:	463e      	mov	r6, r7
 8013644:	42be      	cmp	r6, r7
 8013646:	d900      	bls.n	801364a <__ssputs_r+0x72>
 8013648:	463e      	mov	r6, r7
 801364a:	6820      	ldr	r0, [r4, #0]
 801364c:	4632      	mov	r2, r6
 801364e:	4641      	mov	r1, r8
 8013650:	f7ff fe8b 	bl	801336a <memmove>
 8013654:	68a3      	ldr	r3, [r4, #8]
 8013656:	1b9b      	subs	r3, r3, r6
 8013658:	60a3      	str	r3, [r4, #8]
 801365a:	6823      	ldr	r3, [r4, #0]
 801365c:	4433      	add	r3, r6
 801365e:	6023      	str	r3, [r4, #0]
 8013660:	2000      	movs	r0, #0
 8013662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013666:	462a      	mov	r2, r5
 8013668:	f000 fd35 	bl	80140d6 <_realloc_r>
 801366c:	4606      	mov	r6, r0
 801366e:	2800      	cmp	r0, #0
 8013670:	d1e0      	bne.n	8013634 <__ssputs_r+0x5c>
 8013672:	6921      	ldr	r1, [r4, #16]
 8013674:	4650      	mov	r0, sl
 8013676:	f7ff ff5d 	bl	8013534 <_free_r>
 801367a:	230c      	movs	r3, #12
 801367c:	f8ca 3000 	str.w	r3, [sl]
 8013680:	89a3      	ldrh	r3, [r4, #12]
 8013682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013686:	81a3      	strh	r3, [r4, #12]
 8013688:	f04f 30ff 	mov.w	r0, #4294967295
 801368c:	e7e9      	b.n	8013662 <__ssputs_r+0x8a>
	...

08013690 <_svfiprintf_r>:
 8013690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013694:	4698      	mov	r8, r3
 8013696:	898b      	ldrh	r3, [r1, #12]
 8013698:	061b      	lsls	r3, r3, #24
 801369a:	b09d      	sub	sp, #116	@ 0x74
 801369c:	4607      	mov	r7, r0
 801369e:	460d      	mov	r5, r1
 80136a0:	4614      	mov	r4, r2
 80136a2:	d510      	bpl.n	80136c6 <_svfiprintf_r+0x36>
 80136a4:	690b      	ldr	r3, [r1, #16]
 80136a6:	b973      	cbnz	r3, 80136c6 <_svfiprintf_r+0x36>
 80136a8:	2140      	movs	r1, #64	@ 0x40
 80136aa:	f7ff fbc7 	bl	8012e3c <_malloc_r>
 80136ae:	6028      	str	r0, [r5, #0]
 80136b0:	6128      	str	r0, [r5, #16]
 80136b2:	b930      	cbnz	r0, 80136c2 <_svfiprintf_r+0x32>
 80136b4:	230c      	movs	r3, #12
 80136b6:	603b      	str	r3, [r7, #0]
 80136b8:	f04f 30ff 	mov.w	r0, #4294967295
 80136bc:	b01d      	add	sp, #116	@ 0x74
 80136be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136c2:	2340      	movs	r3, #64	@ 0x40
 80136c4:	616b      	str	r3, [r5, #20]
 80136c6:	2300      	movs	r3, #0
 80136c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80136ca:	2320      	movs	r3, #32
 80136cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80136d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80136d4:	2330      	movs	r3, #48	@ 0x30
 80136d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013874 <_svfiprintf_r+0x1e4>
 80136da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80136de:	f04f 0901 	mov.w	r9, #1
 80136e2:	4623      	mov	r3, r4
 80136e4:	469a      	mov	sl, r3
 80136e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136ea:	b10a      	cbz	r2, 80136f0 <_svfiprintf_r+0x60>
 80136ec:	2a25      	cmp	r2, #37	@ 0x25
 80136ee:	d1f9      	bne.n	80136e4 <_svfiprintf_r+0x54>
 80136f0:	ebba 0b04 	subs.w	fp, sl, r4
 80136f4:	d00b      	beq.n	801370e <_svfiprintf_r+0x7e>
 80136f6:	465b      	mov	r3, fp
 80136f8:	4622      	mov	r2, r4
 80136fa:	4629      	mov	r1, r5
 80136fc:	4638      	mov	r0, r7
 80136fe:	f7ff ff6b 	bl	80135d8 <__ssputs_r>
 8013702:	3001      	adds	r0, #1
 8013704:	f000 80a7 	beq.w	8013856 <_svfiprintf_r+0x1c6>
 8013708:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801370a:	445a      	add	r2, fp
 801370c:	9209      	str	r2, [sp, #36]	@ 0x24
 801370e:	f89a 3000 	ldrb.w	r3, [sl]
 8013712:	2b00      	cmp	r3, #0
 8013714:	f000 809f 	beq.w	8013856 <_svfiprintf_r+0x1c6>
 8013718:	2300      	movs	r3, #0
 801371a:	f04f 32ff 	mov.w	r2, #4294967295
 801371e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013722:	f10a 0a01 	add.w	sl, sl, #1
 8013726:	9304      	str	r3, [sp, #16]
 8013728:	9307      	str	r3, [sp, #28]
 801372a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801372e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013730:	4654      	mov	r4, sl
 8013732:	2205      	movs	r2, #5
 8013734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013738:	484e      	ldr	r0, [pc, #312]	@ (8013874 <_svfiprintf_r+0x1e4>)
 801373a:	f7ec fd49 	bl	80001d0 <memchr>
 801373e:	9a04      	ldr	r2, [sp, #16]
 8013740:	b9d8      	cbnz	r0, 801377a <_svfiprintf_r+0xea>
 8013742:	06d0      	lsls	r0, r2, #27
 8013744:	bf44      	itt	mi
 8013746:	2320      	movmi	r3, #32
 8013748:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801374c:	0711      	lsls	r1, r2, #28
 801374e:	bf44      	itt	mi
 8013750:	232b      	movmi	r3, #43	@ 0x2b
 8013752:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013756:	f89a 3000 	ldrb.w	r3, [sl]
 801375a:	2b2a      	cmp	r3, #42	@ 0x2a
 801375c:	d015      	beq.n	801378a <_svfiprintf_r+0xfa>
 801375e:	9a07      	ldr	r2, [sp, #28]
 8013760:	4654      	mov	r4, sl
 8013762:	2000      	movs	r0, #0
 8013764:	f04f 0c0a 	mov.w	ip, #10
 8013768:	4621      	mov	r1, r4
 801376a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801376e:	3b30      	subs	r3, #48	@ 0x30
 8013770:	2b09      	cmp	r3, #9
 8013772:	d94b      	bls.n	801380c <_svfiprintf_r+0x17c>
 8013774:	b1b0      	cbz	r0, 80137a4 <_svfiprintf_r+0x114>
 8013776:	9207      	str	r2, [sp, #28]
 8013778:	e014      	b.n	80137a4 <_svfiprintf_r+0x114>
 801377a:	eba0 0308 	sub.w	r3, r0, r8
 801377e:	fa09 f303 	lsl.w	r3, r9, r3
 8013782:	4313      	orrs	r3, r2
 8013784:	9304      	str	r3, [sp, #16]
 8013786:	46a2      	mov	sl, r4
 8013788:	e7d2      	b.n	8013730 <_svfiprintf_r+0xa0>
 801378a:	9b03      	ldr	r3, [sp, #12]
 801378c:	1d19      	adds	r1, r3, #4
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	9103      	str	r1, [sp, #12]
 8013792:	2b00      	cmp	r3, #0
 8013794:	bfbb      	ittet	lt
 8013796:	425b      	neglt	r3, r3
 8013798:	f042 0202 	orrlt.w	r2, r2, #2
 801379c:	9307      	strge	r3, [sp, #28]
 801379e:	9307      	strlt	r3, [sp, #28]
 80137a0:	bfb8      	it	lt
 80137a2:	9204      	strlt	r2, [sp, #16]
 80137a4:	7823      	ldrb	r3, [r4, #0]
 80137a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80137a8:	d10a      	bne.n	80137c0 <_svfiprintf_r+0x130>
 80137aa:	7863      	ldrb	r3, [r4, #1]
 80137ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80137ae:	d132      	bne.n	8013816 <_svfiprintf_r+0x186>
 80137b0:	9b03      	ldr	r3, [sp, #12]
 80137b2:	1d1a      	adds	r2, r3, #4
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	9203      	str	r2, [sp, #12]
 80137b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80137bc:	3402      	adds	r4, #2
 80137be:	9305      	str	r3, [sp, #20]
 80137c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013884 <_svfiprintf_r+0x1f4>
 80137c4:	7821      	ldrb	r1, [r4, #0]
 80137c6:	2203      	movs	r2, #3
 80137c8:	4650      	mov	r0, sl
 80137ca:	f7ec fd01 	bl	80001d0 <memchr>
 80137ce:	b138      	cbz	r0, 80137e0 <_svfiprintf_r+0x150>
 80137d0:	9b04      	ldr	r3, [sp, #16]
 80137d2:	eba0 000a 	sub.w	r0, r0, sl
 80137d6:	2240      	movs	r2, #64	@ 0x40
 80137d8:	4082      	lsls	r2, r0
 80137da:	4313      	orrs	r3, r2
 80137dc:	3401      	adds	r4, #1
 80137de:	9304      	str	r3, [sp, #16]
 80137e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137e4:	4824      	ldr	r0, [pc, #144]	@ (8013878 <_svfiprintf_r+0x1e8>)
 80137e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80137ea:	2206      	movs	r2, #6
 80137ec:	f7ec fcf0 	bl	80001d0 <memchr>
 80137f0:	2800      	cmp	r0, #0
 80137f2:	d036      	beq.n	8013862 <_svfiprintf_r+0x1d2>
 80137f4:	4b21      	ldr	r3, [pc, #132]	@ (801387c <_svfiprintf_r+0x1ec>)
 80137f6:	bb1b      	cbnz	r3, 8013840 <_svfiprintf_r+0x1b0>
 80137f8:	9b03      	ldr	r3, [sp, #12]
 80137fa:	3307      	adds	r3, #7
 80137fc:	f023 0307 	bic.w	r3, r3, #7
 8013800:	3308      	adds	r3, #8
 8013802:	9303      	str	r3, [sp, #12]
 8013804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013806:	4433      	add	r3, r6
 8013808:	9309      	str	r3, [sp, #36]	@ 0x24
 801380a:	e76a      	b.n	80136e2 <_svfiprintf_r+0x52>
 801380c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013810:	460c      	mov	r4, r1
 8013812:	2001      	movs	r0, #1
 8013814:	e7a8      	b.n	8013768 <_svfiprintf_r+0xd8>
 8013816:	2300      	movs	r3, #0
 8013818:	3401      	adds	r4, #1
 801381a:	9305      	str	r3, [sp, #20]
 801381c:	4619      	mov	r1, r3
 801381e:	f04f 0c0a 	mov.w	ip, #10
 8013822:	4620      	mov	r0, r4
 8013824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013828:	3a30      	subs	r2, #48	@ 0x30
 801382a:	2a09      	cmp	r2, #9
 801382c:	d903      	bls.n	8013836 <_svfiprintf_r+0x1a6>
 801382e:	2b00      	cmp	r3, #0
 8013830:	d0c6      	beq.n	80137c0 <_svfiprintf_r+0x130>
 8013832:	9105      	str	r1, [sp, #20]
 8013834:	e7c4      	b.n	80137c0 <_svfiprintf_r+0x130>
 8013836:	fb0c 2101 	mla	r1, ip, r1, r2
 801383a:	4604      	mov	r4, r0
 801383c:	2301      	movs	r3, #1
 801383e:	e7f0      	b.n	8013822 <_svfiprintf_r+0x192>
 8013840:	ab03      	add	r3, sp, #12
 8013842:	9300      	str	r3, [sp, #0]
 8013844:	462a      	mov	r2, r5
 8013846:	4b0e      	ldr	r3, [pc, #56]	@ (8013880 <_svfiprintf_r+0x1f0>)
 8013848:	a904      	add	r1, sp, #16
 801384a:	4638      	mov	r0, r7
 801384c:	f3af 8000 	nop.w
 8013850:	1c42      	adds	r2, r0, #1
 8013852:	4606      	mov	r6, r0
 8013854:	d1d6      	bne.n	8013804 <_svfiprintf_r+0x174>
 8013856:	89ab      	ldrh	r3, [r5, #12]
 8013858:	065b      	lsls	r3, r3, #25
 801385a:	f53f af2d 	bmi.w	80136b8 <_svfiprintf_r+0x28>
 801385e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013860:	e72c      	b.n	80136bc <_svfiprintf_r+0x2c>
 8013862:	ab03      	add	r3, sp, #12
 8013864:	9300      	str	r3, [sp, #0]
 8013866:	462a      	mov	r2, r5
 8013868:	4b05      	ldr	r3, [pc, #20]	@ (8013880 <_svfiprintf_r+0x1f0>)
 801386a:	a904      	add	r1, sp, #16
 801386c:	4638      	mov	r0, r7
 801386e:	f000 f9bb 	bl	8013be8 <_printf_i>
 8013872:	e7ed      	b.n	8013850 <_svfiprintf_r+0x1c0>
 8013874:	080172ad 	.word	0x080172ad
 8013878:	080172b7 	.word	0x080172b7
 801387c:	00000000 	.word	0x00000000
 8013880:	080135d9 	.word	0x080135d9
 8013884:	080172b3 	.word	0x080172b3

08013888 <__sfputc_r>:
 8013888:	6893      	ldr	r3, [r2, #8]
 801388a:	3b01      	subs	r3, #1
 801388c:	2b00      	cmp	r3, #0
 801388e:	b410      	push	{r4}
 8013890:	6093      	str	r3, [r2, #8]
 8013892:	da08      	bge.n	80138a6 <__sfputc_r+0x1e>
 8013894:	6994      	ldr	r4, [r2, #24]
 8013896:	42a3      	cmp	r3, r4
 8013898:	db01      	blt.n	801389e <__sfputc_r+0x16>
 801389a:	290a      	cmp	r1, #10
 801389c:	d103      	bne.n	80138a6 <__sfputc_r+0x1e>
 801389e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138a2:	f000 bb7d 	b.w	8013fa0 <__swbuf_r>
 80138a6:	6813      	ldr	r3, [r2, #0]
 80138a8:	1c58      	adds	r0, r3, #1
 80138aa:	6010      	str	r0, [r2, #0]
 80138ac:	7019      	strb	r1, [r3, #0]
 80138ae:	4608      	mov	r0, r1
 80138b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138b4:	4770      	bx	lr

080138b6 <__sfputs_r>:
 80138b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138b8:	4606      	mov	r6, r0
 80138ba:	460f      	mov	r7, r1
 80138bc:	4614      	mov	r4, r2
 80138be:	18d5      	adds	r5, r2, r3
 80138c0:	42ac      	cmp	r4, r5
 80138c2:	d101      	bne.n	80138c8 <__sfputs_r+0x12>
 80138c4:	2000      	movs	r0, #0
 80138c6:	e007      	b.n	80138d8 <__sfputs_r+0x22>
 80138c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138cc:	463a      	mov	r2, r7
 80138ce:	4630      	mov	r0, r6
 80138d0:	f7ff ffda 	bl	8013888 <__sfputc_r>
 80138d4:	1c43      	adds	r3, r0, #1
 80138d6:	d1f3      	bne.n	80138c0 <__sfputs_r+0xa>
 80138d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080138dc <_vfiprintf_r>:
 80138dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138e0:	460d      	mov	r5, r1
 80138e2:	b09d      	sub	sp, #116	@ 0x74
 80138e4:	4614      	mov	r4, r2
 80138e6:	4698      	mov	r8, r3
 80138e8:	4606      	mov	r6, r0
 80138ea:	b118      	cbz	r0, 80138f4 <_vfiprintf_r+0x18>
 80138ec:	6a03      	ldr	r3, [r0, #32]
 80138ee:	b90b      	cbnz	r3, 80138f4 <_vfiprintf_r+0x18>
 80138f0:	f7ff fc7e 	bl	80131f0 <__sinit>
 80138f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80138f6:	07d9      	lsls	r1, r3, #31
 80138f8:	d405      	bmi.n	8013906 <_vfiprintf_r+0x2a>
 80138fa:	89ab      	ldrh	r3, [r5, #12]
 80138fc:	059a      	lsls	r2, r3, #22
 80138fe:	d402      	bmi.n	8013906 <_vfiprintf_r+0x2a>
 8013900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013902:	f7ff fde8 	bl	80134d6 <__retarget_lock_acquire_recursive>
 8013906:	89ab      	ldrh	r3, [r5, #12]
 8013908:	071b      	lsls	r3, r3, #28
 801390a:	d501      	bpl.n	8013910 <_vfiprintf_r+0x34>
 801390c:	692b      	ldr	r3, [r5, #16]
 801390e:	b99b      	cbnz	r3, 8013938 <_vfiprintf_r+0x5c>
 8013910:	4629      	mov	r1, r5
 8013912:	4630      	mov	r0, r6
 8013914:	f000 fb82 	bl	801401c <__swsetup_r>
 8013918:	b170      	cbz	r0, 8013938 <_vfiprintf_r+0x5c>
 801391a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801391c:	07dc      	lsls	r4, r3, #31
 801391e:	d504      	bpl.n	801392a <_vfiprintf_r+0x4e>
 8013920:	f04f 30ff 	mov.w	r0, #4294967295
 8013924:	b01d      	add	sp, #116	@ 0x74
 8013926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801392a:	89ab      	ldrh	r3, [r5, #12]
 801392c:	0598      	lsls	r0, r3, #22
 801392e:	d4f7      	bmi.n	8013920 <_vfiprintf_r+0x44>
 8013930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013932:	f7ff fdd1 	bl	80134d8 <__retarget_lock_release_recursive>
 8013936:	e7f3      	b.n	8013920 <_vfiprintf_r+0x44>
 8013938:	2300      	movs	r3, #0
 801393a:	9309      	str	r3, [sp, #36]	@ 0x24
 801393c:	2320      	movs	r3, #32
 801393e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013942:	f8cd 800c 	str.w	r8, [sp, #12]
 8013946:	2330      	movs	r3, #48	@ 0x30
 8013948:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013af8 <_vfiprintf_r+0x21c>
 801394c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013950:	f04f 0901 	mov.w	r9, #1
 8013954:	4623      	mov	r3, r4
 8013956:	469a      	mov	sl, r3
 8013958:	f813 2b01 	ldrb.w	r2, [r3], #1
 801395c:	b10a      	cbz	r2, 8013962 <_vfiprintf_r+0x86>
 801395e:	2a25      	cmp	r2, #37	@ 0x25
 8013960:	d1f9      	bne.n	8013956 <_vfiprintf_r+0x7a>
 8013962:	ebba 0b04 	subs.w	fp, sl, r4
 8013966:	d00b      	beq.n	8013980 <_vfiprintf_r+0xa4>
 8013968:	465b      	mov	r3, fp
 801396a:	4622      	mov	r2, r4
 801396c:	4629      	mov	r1, r5
 801396e:	4630      	mov	r0, r6
 8013970:	f7ff ffa1 	bl	80138b6 <__sfputs_r>
 8013974:	3001      	adds	r0, #1
 8013976:	f000 80a7 	beq.w	8013ac8 <_vfiprintf_r+0x1ec>
 801397a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801397c:	445a      	add	r2, fp
 801397e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013980:	f89a 3000 	ldrb.w	r3, [sl]
 8013984:	2b00      	cmp	r3, #0
 8013986:	f000 809f 	beq.w	8013ac8 <_vfiprintf_r+0x1ec>
 801398a:	2300      	movs	r3, #0
 801398c:	f04f 32ff 	mov.w	r2, #4294967295
 8013990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013994:	f10a 0a01 	add.w	sl, sl, #1
 8013998:	9304      	str	r3, [sp, #16]
 801399a:	9307      	str	r3, [sp, #28]
 801399c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80139a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80139a2:	4654      	mov	r4, sl
 80139a4:	2205      	movs	r2, #5
 80139a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139aa:	4853      	ldr	r0, [pc, #332]	@ (8013af8 <_vfiprintf_r+0x21c>)
 80139ac:	f7ec fc10 	bl	80001d0 <memchr>
 80139b0:	9a04      	ldr	r2, [sp, #16]
 80139b2:	b9d8      	cbnz	r0, 80139ec <_vfiprintf_r+0x110>
 80139b4:	06d1      	lsls	r1, r2, #27
 80139b6:	bf44      	itt	mi
 80139b8:	2320      	movmi	r3, #32
 80139ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80139be:	0713      	lsls	r3, r2, #28
 80139c0:	bf44      	itt	mi
 80139c2:	232b      	movmi	r3, #43	@ 0x2b
 80139c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80139c8:	f89a 3000 	ldrb.w	r3, [sl]
 80139cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80139ce:	d015      	beq.n	80139fc <_vfiprintf_r+0x120>
 80139d0:	9a07      	ldr	r2, [sp, #28]
 80139d2:	4654      	mov	r4, sl
 80139d4:	2000      	movs	r0, #0
 80139d6:	f04f 0c0a 	mov.w	ip, #10
 80139da:	4621      	mov	r1, r4
 80139dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139e0:	3b30      	subs	r3, #48	@ 0x30
 80139e2:	2b09      	cmp	r3, #9
 80139e4:	d94b      	bls.n	8013a7e <_vfiprintf_r+0x1a2>
 80139e6:	b1b0      	cbz	r0, 8013a16 <_vfiprintf_r+0x13a>
 80139e8:	9207      	str	r2, [sp, #28]
 80139ea:	e014      	b.n	8013a16 <_vfiprintf_r+0x13a>
 80139ec:	eba0 0308 	sub.w	r3, r0, r8
 80139f0:	fa09 f303 	lsl.w	r3, r9, r3
 80139f4:	4313      	orrs	r3, r2
 80139f6:	9304      	str	r3, [sp, #16]
 80139f8:	46a2      	mov	sl, r4
 80139fa:	e7d2      	b.n	80139a2 <_vfiprintf_r+0xc6>
 80139fc:	9b03      	ldr	r3, [sp, #12]
 80139fe:	1d19      	adds	r1, r3, #4
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	9103      	str	r1, [sp, #12]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	bfbb      	ittet	lt
 8013a08:	425b      	neglt	r3, r3
 8013a0a:	f042 0202 	orrlt.w	r2, r2, #2
 8013a0e:	9307      	strge	r3, [sp, #28]
 8013a10:	9307      	strlt	r3, [sp, #28]
 8013a12:	bfb8      	it	lt
 8013a14:	9204      	strlt	r2, [sp, #16]
 8013a16:	7823      	ldrb	r3, [r4, #0]
 8013a18:	2b2e      	cmp	r3, #46	@ 0x2e
 8013a1a:	d10a      	bne.n	8013a32 <_vfiprintf_r+0x156>
 8013a1c:	7863      	ldrb	r3, [r4, #1]
 8013a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013a20:	d132      	bne.n	8013a88 <_vfiprintf_r+0x1ac>
 8013a22:	9b03      	ldr	r3, [sp, #12]
 8013a24:	1d1a      	adds	r2, r3, #4
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	9203      	str	r2, [sp, #12]
 8013a2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013a2e:	3402      	adds	r4, #2
 8013a30:	9305      	str	r3, [sp, #20]
 8013a32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013b08 <_vfiprintf_r+0x22c>
 8013a36:	7821      	ldrb	r1, [r4, #0]
 8013a38:	2203      	movs	r2, #3
 8013a3a:	4650      	mov	r0, sl
 8013a3c:	f7ec fbc8 	bl	80001d0 <memchr>
 8013a40:	b138      	cbz	r0, 8013a52 <_vfiprintf_r+0x176>
 8013a42:	9b04      	ldr	r3, [sp, #16]
 8013a44:	eba0 000a 	sub.w	r0, r0, sl
 8013a48:	2240      	movs	r2, #64	@ 0x40
 8013a4a:	4082      	lsls	r2, r0
 8013a4c:	4313      	orrs	r3, r2
 8013a4e:	3401      	adds	r4, #1
 8013a50:	9304      	str	r3, [sp, #16]
 8013a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a56:	4829      	ldr	r0, [pc, #164]	@ (8013afc <_vfiprintf_r+0x220>)
 8013a58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013a5c:	2206      	movs	r2, #6
 8013a5e:	f7ec fbb7 	bl	80001d0 <memchr>
 8013a62:	2800      	cmp	r0, #0
 8013a64:	d03f      	beq.n	8013ae6 <_vfiprintf_r+0x20a>
 8013a66:	4b26      	ldr	r3, [pc, #152]	@ (8013b00 <_vfiprintf_r+0x224>)
 8013a68:	bb1b      	cbnz	r3, 8013ab2 <_vfiprintf_r+0x1d6>
 8013a6a:	9b03      	ldr	r3, [sp, #12]
 8013a6c:	3307      	adds	r3, #7
 8013a6e:	f023 0307 	bic.w	r3, r3, #7
 8013a72:	3308      	adds	r3, #8
 8013a74:	9303      	str	r3, [sp, #12]
 8013a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a78:	443b      	add	r3, r7
 8013a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a7c:	e76a      	b.n	8013954 <_vfiprintf_r+0x78>
 8013a7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a82:	460c      	mov	r4, r1
 8013a84:	2001      	movs	r0, #1
 8013a86:	e7a8      	b.n	80139da <_vfiprintf_r+0xfe>
 8013a88:	2300      	movs	r3, #0
 8013a8a:	3401      	adds	r4, #1
 8013a8c:	9305      	str	r3, [sp, #20]
 8013a8e:	4619      	mov	r1, r3
 8013a90:	f04f 0c0a 	mov.w	ip, #10
 8013a94:	4620      	mov	r0, r4
 8013a96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a9a:	3a30      	subs	r2, #48	@ 0x30
 8013a9c:	2a09      	cmp	r2, #9
 8013a9e:	d903      	bls.n	8013aa8 <_vfiprintf_r+0x1cc>
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d0c6      	beq.n	8013a32 <_vfiprintf_r+0x156>
 8013aa4:	9105      	str	r1, [sp, #20]
 8013aa6:	e7c4      	b.n	8013a32 <_vfiprintf_r+0x156>
 8013aa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8013aac:	4604      	mov	r4, r0
 8013aae:	2301      	movs	r3, #1
 8013ab0:	e7f0      	b.n	8013a94 <_vfiprintf_r+0x1b8>
 8013ab2:	ab03      	add	r3, sp, #12
 8013ab4:	9300      	str	r3, [sp, #0]
 8013ab6:	462a      	mov	r2, r5
 8013ab8:	4b12      	ldr	r3, [pc, #72]	@ (8013b04 <_vfiprintf_r+0x228>)
 8013aba:	a904      	add	r1, sp, #16
 8013abc:	4630      	mov	r0, r6
 8013abe:	f3af 8000 	nop.w
 8013ac2:	4607      	mov	r7, r0
 8013ac4:	1c78      	adds	r0, r7, #1
 8013ac6:	d1d6      	bne.n	8013a76 <_vfiprintf_r+0x19a>
 8013ac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013aca:	07d9      	lsls	r1, r3, #31
 8013acc:	d405      	bmi.n	8013ada <_vfiprintf_r+0x1fe>
 8013ace:	89ab      	ldrh	r3, [r5, #12]
 8013ad0:	059a      	lsls	r2, r3, #22
 8013ad2:	d402      	bmi.n	8013ada <_vfiprintf_r+0x1fe>
 8013ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013ad6:	f7ff fcff 	bl	80134d8 <__retarget_lock_release_recursive>
 8013ada:	89ab      	ldrh	r3, [r5, #12]
 8013adc:	065b      	lsls	r3, r3, #25
 8013ade:	f53f af1f 	bmi.w	8013920 <_vfiprintf_r+0x44>
 8013ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ae4:	e71e      	b.n	8013924 <_vfiprintf_r+0x48>
 8013ae6:	ab03      	add	r3, sp, #12
 8013ae8:	9300      	str	r3, [sp, #0]
 8013aea:	462a      	mov	r2, r5
 8013aec:	4b05      	ldr	r3, [pc, #20]	@ (8013b04 <_vfiprintf_r+0x228>)
 8013aee:	a904      	add	r1, sp, #16
 8013af0:	4630      	mov	r0, r6
 8013af2:	f000 f879 	bl	8013be8 <_printf_i>
 8013af6:	e7e4      	b.n	8013ac2 <_vfiprintf_r+0x1e6>
 8013af8:	080172ad 	.word	0x080172ad
 8013afc:	080172b7 	.word	0x080172b7
 8013b00:	00000000 	.word	0x00000000
 8013b04:	080138b7 	.word	0x080138b7
 8013b08:	080172b3 	.word	0x080172b3

08013b0c <_printf_common>:
 8013b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b10:	4616      	mov	r6, r2
 8013b12:	4698      	mov	r8, r3
 8013b14:	688a      	ldr	r2, [r1, #8]
 8013b16:	690b      	ldr	r3, [r1, #16]
 8013b18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013b1c:	4293      	cmp	r3, r2
 8013b1e:	bfb8      	it	lt
 8013b20:	4613      	movlt	r3, r2
 8013b22:	6033      	str	r3, [r6, #0]
 8013b24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013b28:	4607      	mov	r7, r0
 8013b2a:	460c      	mov	r4, r1
 8013b2c:	b10a      	cbz	r2, 8013b32 <_printf_common+0x26>
 8013b2e:	3301      	adds	r3, #1
 8013b30:	6033      	str	r3, [r6, #0]
 8013b32:	6823      	ldr	r3, [r4, #0]
 8013b34:	0699      	lsls	r1, r3, #26
 8013b36:	bf42      	ittt	mi
 8013b38:	6833      	ldrmi	r3, [r6, #0]
 8013b3a:	3302      	addmi	r3, #2
 8013b3c:	6033      	strmi	r3, [r6, #0]
 8013b3e:	6825      	ldr	r5, [r4, #0]
 8013b40:	f015 0506 	ands.w	r5, r5, #6
 8013b44:	d106      	bne.n	8013b54 <_printf_common+0x48>
 8013b46:	f104 0a19 	add.w	sl, r4, #25
 8013b4a:	68e3      	ldr	r3, [r4, #12]
 8013b4c:	6832      	ldr	r2, [r6, #0]
 8013b4e:	1a9b      	subs	r3, r3, r2
 8013b50:	42ab      	cmp	r3, r5
 8013b52:	dc26      	bgt.n	8013ba2 <_printf_common+0x96>
 8013b54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013b58:	6822      	ldr	r2, [r4, #0]
 8013b5a:	3b00      	subs	r3, #0
 8013b5c:	bf18      	it	ne
 8013b5e:	2301      	movne	r3, #1
 8013b60:	0692      	lsls	r2, r2, #26
 8013b62:	d42b      	bmi.n	8013bbc <_printf_common+0xb0>
 8013b64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013b68:	4641      	mov	r1, r8
 8013b6a:	4638      	mov	r0, r7
 8013b6c:	47c8      	blx	r9
 8013b6e:	3001      	adds	r0, #1
 8013b70:	d01e      	beq.n	8013bb0 <_printf_common+0xa4>
 8013b72:	6823      	ldr	r3, [r4, #0]
 8013b74:	6922      	ldr	r2, [r4, #16]
 8013b76:	f003 0306 	and.w	r3, r3, #6
 8013b7a:	2b04      	cmp	r3, #4
 8013b7c:	bf02      	ittt	eq
 8013b7e:	68e5      	ldreq	r5, [r4, #12]
 8013b80:	6833      	ldreq	r3, [r6, #0]
 8013b82:	1aed      	subeq	r5, r5, r3
 8013b84:	68a3      	ldr	r3, [r4, #8]
 8013b86:	bf0c      	ite	eq
 8013b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b8c:	2500      	movne	r5, #0
 8013b8e:	4293      	cmp	r3, r2
 8013b90:	bfc4      	itt	gt
 8013b92:	1a9b      	subgt	r3, r3, r2
 8013b94:	18ed      	addgt	r5, r5, r3
 8013b96:	2600      	movs	r6, #0
 8013b98:	341a      	adds	r4, #26
 8013b9a:	42b5      	cmp	r5, r6
 8013b9c:	d11a      	bne.n	8013bd4 <_printf_common+0xc8>
 8013b9e:	2000      	movs	r0, #0
 8013ba0:	e008      	b.n	8013bb4 <_printf_common+0xa8>
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	4652      	mov	r2, sl
 8013ba6:	4641      	mov	r1, r8
 8013ba8:	4638      	mov	r0, r7
 8013baa:	47c8      	blx	r9
 8013bac:	3001      	adds	r0, #1
 8013bae:	d103      	bne.n	8013bb8 <_printf_common+0xac>
 8013bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8013bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bb8:	3501      	adds	r5, #1
 8013bba:	e7c6      	b.n	8013b4a <_printf_common+0x3e>
 8013bbc:	18e1      	adds	r1, r4, r3
 8013bbe:	1c5a      	adds	r2, r3, #1
 8013bc0:	2030      	movs	r0, #48	@ 0x30
 8013bc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013bc6:	4422      	add	r2, r4
 8013bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013bcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013bd0:	3302      	adds	r3, #2
 8013bd2:	e7c7      	b.n	8013b64 <_printf_common+0x58>
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	4622      	mov	r2, r4
 8013bd8:	4641      	mov	r1, r8
 8013bda:	4638      	mov	r0, r7
 8013bdc:	47c8      	blx	r9
 8013bde:	3001      	adds	r0, #1
 8013be0:	d0e6      	beq.n	8013bb0 <_printf_common+0xa4>
 8013be2:	3601      	adds	r6, #1
 8013be4:	e7d9      	b.n	8013b9a <_printf_common+0x8e>
	...

08013be8 <_printf_i>:
 8013be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013bec:	7e0f      	ldrb	r7, [r1, #24]
 8013bee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013bf0:	2f78      	cmp	r7, #120	@ 0x78
 8013bf2:	4691      	mov	r9, r2
 8013bf4:	4680      	mov	r8, r0
 8013bf6:	460c      	mov	r4, r1
 8013bf8:	469a      	mov	sl, r3
 8013bfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013bfe:	d807      	bhi.n	8013c10 <_printf_i+0x28>
 8013c00:	2f62      	cmp	r7, #98	@ 0x62
 8013c02:	d80a      	bhi.n	8013c1a <_printf_i+0x32>
 8013c04:	2f00      	cmp	r7, #0
 8013c06:	f000 80d1 	beq.w	8013dac <_printf_i+0x1c4>
 8013c0a:	2f58      	cmp	r7, #88	@ 0x58
 8013c0c:	f000 80b8 	beq.w	8013d80 <_printf_i+0x198>
 8013c10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013c14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013c18:	e03a      	b.n	8013c90 <_printf_i+0xa8>
 8013c1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013c1e:	2b15      	cmp	r3, #21
 8013c20:	d8f6      	bhi.n	8013c10 <_printf_i+0x28>
 8013c22:	a101      	add	r1, pc, #4	@ (adr r1, 8013c28 <_printf_i+0x40>)
 8013c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013c28:	08013c81 	.word	0x08013c81
 8013c2c:	08013c95 	.word	0x08013c95
 8013c30:	08013c11 	.word	0x08013c11
 8013c34:	08013c11 	.word	0x08013c11
 8013c38:	08013c11 	.word	0x08013c11
 8013c3c:	08013c11 	.word	0x08013c11
 8013c40:	08013c95 	.word	0x08013c95
 8013c44:	08013c11 	.word	0x08013c11
 8013c48:	08013c11 	.word	0x08013c11
 8013c4c:	08013c11 	.word	0x08013c11
 8013c50:	08013c11 	.word	0x08013c11
 8013c54:	08013d93 	.word	0x08013d93
 8013c58:	08013cbf 	.word	0x08013cbf
 8013c5c:	08013d4d 	.word	0x08013d4d
 8013c60:	08013c11 	.word	0x08013c11
 8013c64:	08013c11 	.word	0x08013c11
 8013c68:	08013db5 	.word	0x08013db5
 8013c6c:	08013c11 	.word	0x08013c11
 8013c70:	08013cbf 	.word	0x08013cbf
 8013c74:	08013c11 	.word	0x08013c11
 8013c78:	08013c11 	.word	0x08013c11
 8013c7c:	08013d55 	.word	0x08013d55
 8013c80:	6833      	ldr	r3, [r6, #0]
 8013c82:	1d1a      	adds	r2, r3, #4
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	6032      	str	r2, [r6, #0]
 8013c88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013c8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013c90:	2301      	movs	r3, #1
 8013c92:	e09c      	b.n	8013dce <_printf_i+0x1e6>
 8013c94:	6833      	ldr	r3, [r6, #0]
 8013c96:	6820      	ldr	r0, [r4, #0]
 8013c98:	1d19      	adds	r1, r3, #4
 8013c9a:	6031      	str	r1, [r6, #0]
 8013c9c:	0606      	lsls	r6, r0, #24
 8013c9e:	d501      	bpl.n	8013ca4 <_printf_i+0xbc>
 8013ca0:	681d      	ldr	r5, [r3, #0]
 8013ca2:	e003      	b.n	8013cac <_printf_i+0xc4>
 8013ca4:	0645      	lsls	r5, r0, #25
 8013ca6:	d5fb      	bpl.n	8013ca0 <_printf_i+0xb8>
 8013ca8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013cac:	2d00      	cmp	r5, #0
 8013cae:	da03      	bge.n	8013cb8 <_printf_i+0xd0>
 8013cb0:	232d      	movs	r3, #45	@ 0x2d
 8013cb2:	426d      	negs	r5, r5
 8013cb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013cb8:	4858      	ldr	r0, [pc, #352]	@ (8013e1c <_printf_i+0x234>)
 8013cba:	230a      	movs	r3, #10
 8013cbc:	e011      	b.n	8013ce2 <_printf_i+0xfa>
 8013cbe:	6821      	ldr	r1, [r4, #0]
 8013cc0:	6833      	ldr	r3, [r6, #0]
 8013cc2:	0608      	lsls	r0, r1, #24
 8013cc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8013cc8:	d402      	bmi.n	8013cd0 <_printf_i+0xe8>
 8013cca:	0649      	lsls	r1, r1, #25
 8013ccc:	bf48      	it	mi
 8013cce:	b2ad      	uxthmi	r5, r5
 8013cd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8013cd2:	4852      	ldr	r0, [pc, #328]	@ (8013e1c <_printf_i+0x234>)
 8013cd4:	6033      	str	r3, [r6, #0]
 8013cd6:	bf14      	ite	ne
 8013cd8:	230a      	movne	r3, #10
 8013cda:	2308      	moveq	r3, #8
 8013cdc:	2100      	movs	r1, #0
 8013cde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013ce2:	6866      	ldr	r6, [r4, #4]
 8013ce4:	60a6      	str	r6, [r4, #8]
 8013ce6:	2e00      	cmp	r6, #0
 8013ce8:	db05      	blt.n	8013cf6 <_printf_i+0x10e>
 8013cea:	6821      	ldr	r1, [r4, #0]
 8013cec:	432e      	orrs	r6, r5
 8013cee:	f021 0104 	bic.w	r1, r1, #4
 8013cf2:	6021      	str	r1, [r4, #0]
 8013cf4:	d04b      	beq.n	8013d8e <_printf_i+0x1a6>
 8013cf6:	4616      	mov	r6, r2
 8013cf8:	fbb5 f1f3 	udiv	r1, r5, r3
 8013cfc:	fb03 5711 	mls	r7, r3, r1, r5
 8013d00:	5dc7      	ldrb	r7, [r0, r7]
 8013d02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013d06:	462f      	mov	r7, r5
 8013d08:	42bb      	cmp	r3, r7
 8013d0a:	460d      	mov	r5, r1
 8013d0c:	d9f4      	bls.n	8013cf8 <_printf_i+0x110>
 8013d0e:	2b08      	cmp	r3, #8
 8013d10:	d10b      	bne.n	8013d2a <_printf_i+0x142>
 8013d12:	6823      	ldr	r3, [r4, #0]
 8013d14:	07df      	lsls	r7, r3, #31
 8013d16:	d508      	bpl.n	8013d2a <_printf_i+0x142>
 8013d18:	6923      	ldr	r3, [r4, #16]
 8013d1a:	6861      	ldr	r1, [r4, #4]
 8013d1c:	4299      	cmp	r1, r3
 8013d1e:	bfde      	ittt	le
 8013d20:	2330      	movle	r3, #48	@ 0x30
 8013d22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013d26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013d2a:	1b92      	subs	r2, r2, r6
 8013d2c:	6122      	str	r2, [r4, #16]
 8013d2e:	f8cd a000 	str.w	sl, [sp]
 8013d32:	464b      	mov	r3, r9
 8013d34:	aa03      	add	r2, sp, #12
 8013d36:	4621      	mov	r1, r4
 8013d38:	4640      	mov	r0, r8
 8013d3a:	f7ff fee7 	bl	8013b0c <_printf_common>
 8013d3e:	3001      	adds	r0, #1
 8013d40:	d14a      	bne.n	8013dd8 <_printf_i+0x1f0>
 8013d42:	f04f 30ff 	mov.w	r0, #4294967295
 8013d46:	b004      	add	sp, #16
 8013d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d4c:	6823      	ldr	r3, [r4, #0]
 8013d4e:	f043 0320 	orr.w	r3, r3, #32
 8013d52:	6023      	str	r3, [r4, #0]
 8013d54:	4832      	ldr	r0, [pc, #200]	@ (8013e20 <_printf_i+0x238>)
 8013d56:	2778      	movs	r7, #120	@ 0x78
 8013d58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013d5c:	6823      	ldr	r3, [r4, #0]
 8013d5e:	6831      	ldr	r1, [r6, #0]
 8013d60:	061f      	lsls	r7, r3, #24
 8013d62:	f851 5b04 	ldr.w	r5, [r1], #4
 8013d66:	d402      	bmi.n	8013d6e <_printf_i+0x186>
 8013d68:	065f      	lsls	r7, r3, #25
 8013d6a:	bf48      	it	mi
 8013d6c:	b2ad      	uxthmi	r5, r5
 8013d6e:	6031      	str	r1, [r6, #0]
 8013d70:	07d9      	lsls	r1, r3, #31
 8013d72:	bf44      	itt	mi
 8013d74:	f043 0320 	orrmi.w	r3, r3, #32
 8013d78:	6023      	strmi	r3, [r4, #0]
 8013d7a:	b11d      	cbz	r5, 8013d84 <_printf_i+0x19c>
 8013d7c:	2310      	movs	r3, #16
 8013d7e:	e7ad      	b.n	8013cdc <_printf_i+0xf4>
 8013d80:	4826      	ldr	r0, [pc, #152]	@ (8013e1c <_printf_i+0x234>)
 8013d82:	e7e9      	b.n	8013d58 <_printf_i+0x170>
 8013d84:	6823      	ldr	r3, [r4, #0]
 8013d86:	f023 0320 	bic.w	r3, r3, #32
 8013d8a:	6023      	str	r3, [r4, #0]
 8013d8c:	e7f6      	b.n	8013d7c <_printf_i+0x194>
 8013d8e:	4616      	mov	r6, r2
 8013d90:	e7bd      	b.n	8013d0e <_printf_i+0x126>
 8013d92:	6833      	ldr	r3, [r6, #0]
 8013d94:	6825      	ldr	r5, [r4, #0]
 8013d96:	6961      	ldr	r1, [r4, #20]
 8013d98:	1d18      	adds	r0, r3, #4
 8013d9a:	6030      	str	r0, [r6, #0]
 8013d9c:	062e      	lsls	r6, r5, #24
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	d501      	bpl.n	8013da6 <_printf_i+0x1be>
 8013da2:	6019      	str	r1, [r3, #0]
 8013da4:	e002      	b.n	8013dac <_printf_i+0x1c4>
 8013da6:	0668      	lsls	r0, r5, #25
 8013da8:	d5fb      	bpl.n	8013da2 <_printf_i+0x1ba>
 8013daa:	8019      	strh	r1, [r3, #0]
 8013dac:	2300      	movs	r3, #0
 8013dae:	6123      	str	r3, [r4, #16]
 8013db0:	4616      	mov	r6, r2
 8013db2:	e7bc      	b.n	8013d2e <_printf_i+0x146>
 8013db4:	6833      	ldr	r3, [r6, #0]
 8013db6:	1d1a      	adds	r2, r3, #4
 8013db8:	6032      	str	r2, [r6, #0]
 8013dba:	681e      	ldr	r6, [r3, #0]
 8013dbc:	6862      	ldr	r2, [r4, #4]
 8013dbe:	2100      	movs	r1, #0
 8013dc0:	4630      	mov	r0, r6
 8013dc2:	f7ec fa05 	bl	80001d0 <memchr>
 8013dc6:	b108      	cbz	r0, 8013dcc <_printf_i+0x1e4>
 8013dc8:	1b80      	subs	r0, r0, r6
 8013dca:	6060      	str	r0, [r4, #4]
 8013dcc:	6863      	ldr	r3, [r4, #4]
 8013dce:	6123      	str	r3, [r4, #16]
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013dd6:	e7aa      	b.n	8013d2e <_printf_i+0x146>
 8013dd8:	6923      	ldr	r3, [r4, #16]
 8013dda:	4632      	mov	r2, r6
 8013ddc:	4649      	mov	r1, r9
 8013dde:	4640      	mov	r0, r8
 8013de0:	47d0      	blx	sl
 8013de2:	3001      	adds	r0, #1
 8013de4:	d0ad      	beq.n	8013d42 <_printf_i+0x15a>
 8013de6:	6823      	ldr	r3, [r4, #0]
 8013de8:	079b      	lsls	r3, r3, #30
 8013dea:	d413      	bmi.n	8013e14 <_printf_i+0x22c>
 8013dec:	68e0      	ldr	r0, [r4, #12]
 8013dee:	9b03      	ldr	r3, [sp, #12]
 8013df0:	4298      	cmp	r0, r3
 8013df2:	bfb8      	it	lt
 8013df4:	4618      	movlt	r0, r3
 8013df6:	e7a6      	b.n	8013d46 <_printf_i+0x15e>
 8013df8:	2301      	movs	r3, #1
 8013dfa:	4632      	mov	r2, r6
 8013dfc:	4649      	mov	r1, r9
 8013dfe:	4640      	mov	r0, r8
 8013e00:	47d0      	blx	sl
 8013e02:	3001      	adds	r0, #1
 8013e04:	d09d      	beq.n	8013d42 <_printf_i+0x15a>
 8013e06:	3501      	adds	r5, #1
 8013e08:	68e3      	ldr	r3, [r4, #12]
 8013e0a:	9903      	ldr	r1, [sp, #12]
 8013e0c:	1a5b      	subs	r3, r3, r1
 8013e0e:	42ab      	cmp	r3, r5
 8013e10:	dcf2      	bgt.n	8013df8 <_printf_i+0x210>
 8013e12:	e7eb      	b.n	8013dec <_printf_i+0x204>
 8013e14:	2500      	movs	r5, #0
 8013e16:	f104 0619 	add.w	r6, r4, #25
 8013e1a:	e7f5      	b.n	8013e08 <_printf_i+0x220>
 8013e1c:	080172be 	.word	0x080172be
 8013e20:	080172cf 	.word	0x080172cf

08013e24 <__sflush_r>:
 8013e24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e2c:	0716      	lsls	r6, r2, #28
 8013e2e:	4605      	mov	r5, r0
 8013e30:	460c      	mov	r4, r1
 8013e32:	d454      	bmi.n	8013ede <__sflush_r+0xba>
 8013e34:	684b      	ldr	r3, [r1, #4]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	dc02      	bgt.n	8013e40 <__sflush_r+0x1c>
 8013e3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	dd48      	ble.n	8013ed2 <__sflush_r+0xae>
 8013e40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013e42:	2e00      	cmp	r6, #0
 8013e44:	d045      	beq.n	8013ed2 <__sflush_r+0xae>
 8013e46:	2300      	movs	r3, #0
 8013e48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013e4c:	682f      	ldr	r7, [r5, #0]
 8013e4e:	6a21      	ldr	r1, [r4, #32]
 8013e50:	602b      	str	r3, [r5, #0]
 8013e52:	d030      	beq.n	8013eb6 <__sflush_r+0x92>
 8013e54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013e56:	89a3      	ldrh	r3, [r4, #12]
 8013e58:	0759      	lsls	r1, r3, #29
 8013e5a:	d505      	bpl.n	8013e68 <__sflush_r+0x44>
 8013e5c:	6863      	ldr	r3, [r4, #4]
 8013e5e:	1ad2      	subs	r2, r2, r3
 8013e60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013e62:	b10b      	cbz	r3, 8013e68 <__sflush_r+0x44>
 8013e64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013e66:	1ad2      	subs	r2, r2, r3
 8013e68:	2300      	movs	r3, #0
 8013e6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013e6c:	6a21      	ldr	r1, [r4, #32]
 8013e6e:	4628      	mov	r0, r5
 8013e70:	47b0      	blx	r6
 8013e72:	1c43      	adds	r3, r0, #1
 8013e74:	89a3      	ldrh	r3, [r4, #12]
 8013e76:	d106      	bne.n	8013e86 <__sflush_r+0x62>
 8013e78:	6829      	ldr	r1, [r5, #0]
 8013e7a:	291d      	cmp	r1, #29
 8013e7c:	d82b      	bhi.n	8013ed6 <__sflush_r+0xb2>
 8013e7e:	4a2a      	ldr	r2, [pc, #168]	@ (8013f28 <__sflush_r+0x104>)
 8013e80:	40ca      	lsrs	r2, r1
 8013e82:	07d6      	lsls	r6, r2, #31
 8013e84:	d527      	bpl.n	8013ed6 <__sflush_r+0xb2>
 8013e86:	2200      	movs	r2, #0
 8013e88:	6062      	str	r2, [r4, #4]
 8013e8a:	04d9      	lsls	r1, r3, #19
 8013e8c:	6922      	ldr	r2, [r4, #16]
 8013e8e:	6022      	str	r2, [r4, #0]
 8013e90:	d504      	bpl.n	8013e9c <__sflush_r+0x78>
 8013e92:	1c42      	adds	r2, r0, #1
 8013e94:	d101      	bne.n	8013e9a <__sflush_r+0x76>
 8013e96:	682b      	ldr	r3, [r5, #0]
 8013e98:	b903      	cbnz	r3, 8013e9c <__sflush_r+0x78>
 8013e9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8013e9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013e9e:	602f      	str	r7, [r5, #0]
 8013ea0:	b1b9      	cbz	r1, 8013ed2 <__sflush_r+0xae>
 8013ea2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013ea6:	4299      	cmp	r1, r3
 8013ea8:	d002      	beq.n	8013eb0 <__sflush_r+0x8c>
 8013eaa:	4628      	mov	r0, r5
 8013eac:	f7ff fb42 	bl	8013534 <_free_r>
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8013eb4:	e00d      	b.n	8013ed2 <__sflush_r+0xae>
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	4628      	mov	r0, r5
 8013eba:	47b0      	blx	r6
 8013ebc:	4602      	mov	r2, r0
 8013ebe:	1c50      	adds	r0, r2, #1
 8013ec0:	d1c9      	bne.n	8013e56 <__sflush_r+0x32>
 8013ec2:	682b      	ldr	r3, [r5, #0]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d0c6      	beq.n	8013e56 <__sflush_r+0x32>
 8013ec8:	2b1d      	cmp	r3, #29
 8013eca:	d001      	beq.n	8013ed0 <__sflush_r+0xac>
 8013ecc:	2b16      	cmp	r3, #22
 8013ece:	d11e      	bne.n	8013f0e <__sflush_r+0xea>
 8013ed0:	602f      	str	r7, [r5, #0]
 8013ed2:	2000      	movs	r0, #0
 8013ed4:	e022      	b.n	8013f1c <__sflush_r+0xf8>
 8013ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013eda:	b21b      	sxth	r3, r3
 8013edc:	e01b      	b.n	8013f16 <__sflush_r+0xf2>
 8013ede:	690f      	ldr	r7, [r1, #16]
 8013ee0:	2f00      	cmp	r7, #0
 8013ee2:	d0f6      	beq.n	8013ed2 <__sflush_r+0xae>
 8013ee4:	0793      	lsls	r3, r2, #30
 8013ee6:	680e      	ldr	r6, [r1, #0]
 8013ee8:	bf08      	it	eq
 8013eea:	694b      	ldreq	r3, [r1, #20]
 8013eec:	600f      	str	r7, [r1, #0]
 8013eee:	bf18      	it	ne
 8013ef0:	2300      	movne	r3, #0
 8013ef2:	eba6 0807 	sub.w	r8, r6, r7
 8013ef6:	608b      	str	r3, [r1, #8]
 8013ef8:	f1b8 0f00 	cmp.w	r8, #0
 8013efc:	dde9      	ble.n	8013ed2 <__sflush_r+0xae>
 8013efe:	6a21      	ldr	r1, [r4, #32]
 8013f00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013f02:	4643      	mov	r3, r8
 8013f04:	463a      	mov	r2, r7
 8013f06:	4628      	mov	r0, r5
 8013f08:	47b0      	blx	r6
 8013f0a:	2800      	cmp	r0, #0
 8013f0c:	dc08      	bgt.n	8013f20 <__sflush_r+0xfc>
 8013f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013f16:	81a3      	strh	r3, [r4, #12]
 8013f18:	f04f 30ff 	mov.w	r0, #4294967295
 8013f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f20:	4407      	add	r7, r0
 8013f22:	eba8 0800 	sub.w	r8, r8, r0
 8013f26:	e7e7      	b.n	8013ef8 <__sflush_r+0xd4>
 8013f28:	20400001 	.word	0x20400001

08013f2c <_fflush_r>:
 8013f2c:	b538      	push	{r3, r4, r5, lr}
 8013f2e:	690b      	ldr	r3, [r1, #16]
 8013f30:	4605      	mov	r5, r0
 8013f32:	460c      	mov	r4, r1
 8013f34:	b913      	cbnz	r3, 8013f3c <_fflush_r+0x10>
 8013f36:	2500      	movs	r5, #0
 8013f38:	4628      	mov	r0, r5
 8013f3a:	bd38      	pop	{r3, r4, r5, pc}
 8013f3c:	b118      	cbz	r0, 8013f46 <_fflush_r+0x1a>
 8013f3e:	6a03      	ldr	r3, [r0, #32]
 8013f40:	b90b      	cbnz	r3, 8013f46 <_fflush_r+0x1a>
 8013f42:	f7ff f955 	bl	80131f0 <__sinit>
 8013f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d0f3      	beq.n	8013f36 <_fflush_r+0xa>
 8013f4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013f50:	07d0      	lsls	r0, r2, #31
 8013f52:	d404      	bmi.n	8013f5e <_fflush_r+0x32>
 8013f54:	0599      	lsls	r1, r3, #22
 8013f56:	d402      	bmi.n	8013f5e <_fflush_r+0x32>
 8013f58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f5a:	f7ff fabc 	bl	80134d6 <__retarget_lock_acquire_recursive>
 8013f5e:	4628      	mov	r0, r5
 8013f60:	4621      	mov	r1, r4
 8013f62:	f7ff ff5f 	bl	8013e24 <__sflush_r>
 8013f66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013f68:	07da      	lsls	r2, r3, #31
 8013f6a:	4605      	mov	r5, r0
 8013f6c:	d4e4      	bmi.n	8013f38 <_fflush_r+0xc>
 8013f6e:	89a3      	ldrh	r3, [r4, #12]
 8013f70:	059b      	lsls	r3, r3, #22
 8013f72:	d4e1      	bmi.n	8013f38 <_fflush_r+0xc>
 8013f74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f76:	f7ff faaf 	bl	80134d8 <__retarget_lock_release_recursive>
 8013f7a:	e7dd      	b.n	8013f38 <_fflush_r+0xc>

08013f7c <fiprintf>:
 8013f7c:	b40e      	push	{r1, r2, r3}
 8013f7e:	b503      	push	{r0, r1, lr}
 8013f80:	4601      	mov	r1, r0
 8013f82:	ab03      	add	r3, sp, #12
 8013f84:	4805      	ldr	r0, [pc, #20]	@ (8013f9c <fiprintf+0x20>)
 8013f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f8a:	6800      	ldr	r0, [r0, #0]
 8013f8c:	9301      	str	r3, [sp, #4]
 8013f8e:	f7ff fca5 	bl	80138dc <_vfiprintf_r>
 8013f92:	b002      	add	sp, #8
 8013f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f98:	b003      	add	sp, #12
 8013f9a:	4770      	bx	lr
 8013f9c:	200000ac 	.word	0x200000ac

08013fa0 <__swbuf_r>:
 8013fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fa2:	460e      	mov	r6, r1
 8013fa4:	4614      	mov	r4, r2
 8013fa6:	4605      	mov	r5, r0
 8013fa8:	b118      	cbz	r0, 8013fb2 <__swbuf_r+0x12>
 8013faa:	6a03      	ldr	r3, [r0, #32]
 8013fac:	b90b      	cbnz	r3, 8013fb2 <__swbuf_r+0x12>
 8013fae:	f7ff f91f 	bl	80131f0 <__sinit>
 8013fb2:	69a3      	ldr	r3, [r4, #24]
 8013fb4:	60a3      	str	r3, [r4, #8]
 8013fb6:	89a3      	ldrh	r3, [r4, #12]
 8013fb8:	071a      	lsls	r2, r3, #28
 8013fba:	d501      	bpl.n	8013fc0 <__swbuf_r+0x20>
 8013fbc:	6923      	ldr	r3, [r4, #16]
 8013fbe:	b943      	cbnz	r3, 8013fd2 <__swbuf_r+0x32>
 8013fc0:	4621      	mov	r1, r4
 8013fc2:	4628      	mov	r0, r5
 8013fc4:	f000 f82a 	bl	801401c <__swsetup_r>
 8013fc8:	b118      	cbz	r0, 8013fd2 <__swbuf_r+0x32>
 8013fca:	f04f 37ff 	mov.w	r7, #4294967295
 8013fce:	4638      	mov	r0, r7
 8013fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fd2:	6823      	ldr	r3, [r4, #0]
 8013fd4:	6922      	ldr	r2, [r4, #16]
 8013fd6:	1a98      	subs	r0, r3, r2
 8013fd8:	6963      	ldr	r3, [r4, #20]
 8013fda:	b2f6      	uxtb	r6, r6
 8013fdc:	4283      	cmp	r3, r0
 8013fde:	4637      	mov	r7, r6
 8013fe0:	dc05      	bgt.n	8013fee <__swbuf_r+0x4e>
 8013fe2:	4621      	mov	r1, r4
 8013fe4:	4628      	mov	r0, r5
 8013fe6:	f7ff ffa1 	bl	8013f2c <_fflush_r>
 8013fea:	2800      	cmp	r0, #0
 8013fec:	d1ed      	bne.n	8013fca <__swbuf_r+0x2a>
 8013fee:	68a3      	ldr	r3, [r4, #8]
 8013ff0:	3b01      	subs	r3, #1
 8013ff2:	60a3      	str	r3, [r4, #8]
 8013ff4:	6823      	ldr	r3, [r4, #0]
 8013ff6:	1c5a      	adds	r2, r3, #1
 8013ff8:	6022      	str	r2, [r4, #0]
 8013ffa:	701e      	strb	r6, [r3, #0]
 8013ffc:	6962      	ldr	r2, [r4, #20]
 8013ffe:	1c43      	adds	r3, r0, #1
 8014000:	429a      	cmp	r2, r3
 8014002:	d004      	beq.n	801400e <__swbuf_r+0x6e>
 8014004:	89a3      	ldrh	r3, [r4, #12]
 8014006:	07db      	lsls	r3, r3, #31
 8014008:	d5e1      	bpl.n	8013fce <__swbuf_r+0x2e>
 801400a:	2e0a      	cmp	r6, #10
 801400c:	d1df      	bne.n	8013fce <__swbuf_r+0x2e>
 801400e:	4621      	mov	r1, r4
 8014010:	4628      	mov	r0, r5
 8014012:	f7ff ff8b 	bl	8013f2c <_fflush_r>
 8014016:	2800      	cmp	r0, #0
 8014018:	d0d9      	beq.n	8013fce <__swbuf_r+0x2e>
 801401a:	e7d6      	b.n	8013fca <__swbuf_r+0x2a>

0801401c <__swsetup_r>:
 801401c:	b538      	push	{r3, r4, r5, lr}
 801401e:	4b29      	ldr	r3, [pc, #164]	@ (80140c4 <__swsetup_r+0xa8>)
 8014020:	4605      	mov	r5, r0
 8014022:	6818      	ldr	r0, [r3, #0]
 8014024:	460c      	mov	r4, r1
 8014026:	b118      	cbz	r0, 8014030 <__swsetup_r+0x14>
 8014028:	6a03      	ldr	r3, [r0, #32]
 801402a:	b90b      	cbnz	r3, 8014030 <__swsetup_r+0x14>
 801402c:	f7ff f8e0 	bl	80131f0 <__sinit>
 8014030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014034:	0719      	lsls	r1, r3, #28
 8014036:	d422      	bmi.n	801407e <__swsetup_r+0x62>
 8014038:	06da      	lsls	r2, r3, #27
 801403a:	d407      	bmi.n	801404c <__swsetup_r+0x30>
 801403c:	2209      	movs	r2, #9
 801403e:	602a      	str	r2, [r5, #0]
 8014040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014044:	81a3      	strh	r3, [r4, #12]
 8014046:	f04f 30ff 	mov.w	r0, #4294967295
 801404a:	e033      	b.n	80140b4 <__swsetup_r+0x98>
 801404c:	0758      	lsls	r0, r3, #29
 801404e:	d512      	bpl.n	8014076 <__swsetup_r+0x5a>
 8014050:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014052:	b141      	cbz	r1, 8014066 <__swsetup_r+0x4a>
 8014054:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014058:	4299      	cmp	r1, r3
 801405a:	d002      	beq.n	8014062 <__swsetup_r+0x46>
 801405c:	4628      	mov	r0, r5
 801405e:	f7ff fa69 	bl	8013534 <_free_r>
 8014062:	2300      	movs	r3, #0
 8014064:	6363      	str	r3, [r4, #52]	@ 0x34
 8014066:	89a3      	ldrh	r3, [r4, #12]
 8014068:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801406c:	81a3      	strh	r3, [r4, #12]
 801406e:	2300      	movs	r3, #0
 8014070:	6063      	str	r3, [r4, #4]
 8014072:	6923      	ldr	r3, [r4, #16]
 8014074:	6023      	str	r3, [r4, #0]
 8014076:	89a3      	ldrh	r3, [r4, #12]
 8014078:	f043 0308 	orr.w	r3, r3, #8
 801407c:	81a3      	strh	r3, [r4, #12]
 801407e:	6923      	ldr	r3, [r4, #16]
 8014080:	b94b      	cbnz	r3, 8014096 <__swsetup_r+0x7a>
 8014082:	89a3      	ldrh	r3, [r4, #12]
 8014084:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801408c:	d003      	beq.n	8014096 <__swsetup_r+0x7a>
 801408e:	4621      	mov	r1, r4
 8014090:	4628      	mov	r0, r5
 8014092:	f000 f874 	bl	801417e <__smakebuf_r>
 8014096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801409a:	f013 0201 	ands.w	r2, r3, #1
 801409e:	d00a      	beq.n	80140b6 <__swsetup_r+0x9a>
 80140a0:	2200      	movs	r2, #0
 80140a2:	60a2      	str	r2, [r4, #8]
 80140a4:	6962      	ldr	r2, [r4, #20]
 80140a6:	4252      	negs	r2, r2
 80140a8:	61a2      	str	r2, [r4, #24]
 80140aa:	6922      	ldr	r2, [r4, #16]
 80140ac:	b942      	cbnz	r2, 80140c0 <__swsetup_r+0xa4>
 80140ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80140b2:	d1c5      	bne.n	8014040 <__swsetup_r+0x24>
 80140b4:	bd38      	pop	{r3, r4, r5, pc}
 80140b6:	0799      	lsls	r1, r3, #30
 80140b8:	bf58      	it	pl
 80140ba:	6962      	ldrpl	r2, [r4, #20]
 80140bc:	60a2      	str	r2, [r4, #8]
 80140be:	e7f4      	b.n	80140aa <__swsetup_r+0x8e>
 80140c0:	2000      	movs	r0, #0
 80140c2:	e7f7      	b.n	80140b4 <__swsetup_r+0x98>
 80140c4:	200000ac 	.word	0x200000ac

080140c8 <abort>:
 80140c8:	b508      	push	{r3, lr}
 80140ca:	2006      	movs	r0, #6
 80140cc:	f000 f8bc 	bl	8014248 <raise>
 80140d0:	2001      	movs	r0, #1
 80140d2:	f7ef f985 	bl	80033e0 <_exit>

080140d6 <_realloc_r>:
 80140d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140da:	4607      	mov	r7, r0
 80140dc:	4614      	mov	r4, r2
 80140de:	460d      	mov	r5, r1
 80140e0:	b921      	cbnz	r1, 80140ec <_realloc_r+0x16>
 80140e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140e6:	4611      	mov	r1, r2
 80140e8:	f7fe bea8 	b.w	8012e3c <_malloc_r>
 80140ec:	b92a      	cbnz	r2, 80140fa <_realloc_r+0x24>
 80140ee:	f7ff fa21 	bl	8013534 <_free_r>
 80140f2:	4625      	mov	r5, r4
 80140f4:	4628      	mov	r0, r5
 80140f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140fa:	f000 f8e3 	bl	80142c4 <_malloc_usable_size_r>
 80140fe:	4284      	cmp	r4, r0
 8014100:	4606      	mov	r6, r0
 8014102:	d802      	bhi.n	801410a <_realloc_r+0x34>
 8014104:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014108:	d8f4      	bhi.n	80140f4 <_realloc_r+0x1e>
 801410a:	4621      	mov	r1, r4
 801410c:	4638      	mov	r0, r7
 801410e:	f7fe fe95 	bl	8012e3c <_malloc_r>
 8014112:	4680      	mov	r8, r0
 8014114:	b908      	cbnz	r0, 801411a <_realloc_r+0x44>
 8014116:	4645      	mov	r5, r8
 8014118:	e7ec      	b.n	80140f4 <_realloc_r+0x1e>
 801411a:	42b4      	cmp	r4, r6
 801411c:	4622      	mov	r2, r4
 801411e:	4629      	mov	r1, r5
 8014120:	bf28      	it	cs
 8014122:	4632      	movcs	r2, r6
 8014124:	f7ff f9d9 	bl	80134da <memcpy>
 8014128:	4629      	mov	r1, r5
 801412a:	4638      	mov	r0, r7
 801412c:	f7ff fa02 	bl	8013534 <_free_r>
 8014130:	e7f1      	b.n	8014116 <_realloc_r+0x40>

08014132 <__swhatbuf_r>:
 8014132:	b570      	push	{r4, r5, r6, lr}
 8014134:	460c      	mov	r4, r1
 8014136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801413a:	2900      	cmp	r1, #0
 801413c:	b096      	sub	sp, #88	@ 0x58
 801413e:	4615      	mov	r5, r2
 8014140:	461e      	mov	r6, r3
 8014142:	da0d      	bge.n	8014160 <__swhatbuf_r+0x2e>
 8014144:	89a3      	ldrh	r3, [r4, #12]
 8014146:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801414a:	f04f 0100 	mov.w	r1, #0
 801414e:	bf14      	ite	ne
 8014150:	2340      	movne	r3, #64	@ 0x40
 8014152:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014156:	2000      	movs	r0, #0
 8014158:	6031      	str	r1, [r6, #0]
 801415a:	602b      	str	r3, [r5, #0]
 801415c:	b016      	add	sp, #88	@ 0x58
 801415e:	bd70      	pop	{r4, r5, r6, pc}
 8014160:	466a      	mov	r2, sp
 8014162:	f000 f879 	bl	8014258 <_fstat_r>
 8014166:	2800      	cmp	r0, #0
 8014168:	dbec      	blt.n	8014144 <__swhatbuf_r+0x12>
 801416a:	9901      	ldr	r1, [sp, #4]
 801416c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014170:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014174:	4259      	negs	r1, r3
 8014176:	4159      	adcs	r1, r3
 8014178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801417c:	e7eb      	b.n	8014156 <__swhatbuf_r+0x24>

0801417e <__smakebuf_r>:
 801417e:	898b      	ldrh	r3, [r1, #12]
 8014180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014182:	079d      	lsls	r5, r3, #30
 8014184:	4606      	mov	r6, r0
 8014186:	460c      	mov	r4, r1
 8014188:	d507      	bpl.n	801419a <__smakebuf_r+0x1c>
 801418a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801418e:	6023      	str	r3, [r4, #0]
 8014190:	6123      	str	r3, [r4, #16]
 8014192:	2301      	movs	r3, #1
 8014194:	6163      	str	r3, [r4, #20]
 8014196:	b003      	add	sp, #12
 8014198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801419a:	ab01      	add	r3, sp, #4
 801419c:	466a      	mov	r2, sp
 801419e:	f7ff ffc8 	bl	8014132 <__swhatbuf_r>
 80141a2:	9f00      	ldr	r7, [sp, #0]
 80141a4:	4605      	mov	r5, r0
 80141a6:	4639      	mov	r1, r7
 80141a8:	4630      	mov	r0, r6
 80141aa:	f7fe fe47 	bl	8012e3c <_malloc_r>
 80141ae:	b948      	cbnz	r0, 80141c4 <__smakebuf_r+0x46>
 80141b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141b4:	059a      	lsls	r2, r3, #22
 80141b6:	d4ee      	bmi.n	8014196 <__smakebuf_r+0x18>
 80141b8:	f023 0303 	bic.w	r3, r3, #3
 80141bc:	f043 0302 	orr.w	r3, r3, #2
 80141c0:	81a3      	strh	r3, [r4, #12]
 80141c2:	e7e2      	b.n	801418a <__smakebuf_r+0xc>
 80141c4:	89a3      	ldrh	r3, [r4, #12]
 80141c6:	6020      	str	r0, [r4, #0]
 80141c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80141cc:	81a3      	strh	r3, [r4, #12]
 80141ce:	9b01      	ldr	r3, [sp, #4]
 80141d0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80141d4:	b15b      	cbz	r3, 80141ee <__smakebuf_r+0x70>
 80141d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80141da:	4630      	mov	r0, r6
 80141dc:	f000 f84e 	bl	801427c <_isatty_r>
 80141e0:	b128      	cbz	r0, 80141ee <__smakebuf_r+0x70>
 80141e2:	89a3      	ldrh	r3, [r4, #12]
 80141e4:	f023 0303 	bic.w	r3, r3, #3
 80141e8:	f043 0301 	orr.w	r3, r3, #1
 80141ec:	81a3      	strh	r3, [r4, #12]
 80141ee:	89a3      	ldrh	r3, [r4, #12]
 80141f0:	431d      	orrs	r5, r3
 80141f2:	81a5      	strh	r5, [r4, #12]
 80141f4:	e7cf      	b.n	8014196 <__smakebuf_r+0x18>

080141f6 <_raise_r>:
 80141f6:	291f      	cmp	r1, #31
 80141f8:	b538      	push	{r3, r4, r5, lr}
 80141fa:	4605      	mov	r5, r0
 80141fc:	460c      	mov	r4, r1
 80141fe:	d904      	bls.n	801420a <_raise_r+0x14>
 8014200:	2316      	movs	r3, #22
 8014202:	6003      	str	r3, [r0, #0]
 8014204:	f04f 30ff 	mov.w	r0, #4294967295
 8014208:	bd38      	pop	{r3, r4, r5, pc}
 801420a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801420c:	b112      	cbz	r2, 8014214 <_raise_r+0x1e>
 801420e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014212:	b94b      	cbnz	r3, 8014228 <_raise_r+0x32>
 8014214:	4628      	mov	r0, r5
 8014216:	f000 f853 	bl	80142c0 <_getpid_r>
 801421a:	4622      	mov	r2, r4
 801421c:	4601      	mov	r1, r0
 801421e:	4628      	mov	r0, r5
 8014220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014224:	f000 b83a 	b.w	801429c <_kill_r>
 8014228:	2b01      	cmp	r3, #1
 801422a:	d00a      	beq.n	8014242 <_raise_r+0x4c>
 801422c:	1c59      	adds	r1, r3, #1
 801422e:	d103      	bne.n	8014238 <_raise_r+0x42>
 8014230:	2316      	movs	r3, #22
 8014232:	6003      	str	r3, [r0, #0]
 8014234:	2001      	movs	r0, #1
 8014236:	e7e7      	b.n	8014208 <_raise_r+0x12>
 8014238:	2100      	movs	r1, #0
 801423a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801423e:	4620      	mov	r0, r4
 8014240:	4798      	blx	r3
 8014242:	2000      	movs	r0, #0
 8014244:	e7e0      	b.n	8014208 <_raise_r+0x12>
	...

08014248 <raise>:
 8014248:	4b02      	ldr	r3, [pc, #8]	@ (8014254 <raise+0xc>)
 801424a:	4601      	mov	r1, r0
 801424c:	6818      	ldr	r0, [r3, #0]
 801424e:	f7ff bfd2 	b.w	80141f6 <_raise_r>
 8014252:	bf00      	nop
 8014254:	200000ac 	.word	0x200000ac

08014258 <_fstat_r>:
 8014258:	b538      	push	{r3, r4, r5, lr}
 801425a:	4d07      	ldr	r5, [pc, #28]	@ (8014278 <_fstat_r+0x20>)
 801425c:	2300      	movs	r3, #0
 801425e:	4604      	mov	r4, r0
 8014260:	4608      	mov	r0, r1
 8014262:	4611      	mov	r1, r2
 8014264:	602b      	str	r3, [r5, #0]
 8014266:	f7ef f90b 	bl	8003480 <_fstat>
 801426a:	1c43      	adds	r3, r0, #1
 801426c:	d102      	bne.n	8014274 <_fstat_r+0x1c>
 801426e:	682b      	ldr	r3, [r5, #0]
 8014270:	b103      	cbz	r3, 8014274 <_fstat_r+0x1c>
 8014272:	6023      	str	r3, [r4, #0]
 8014274:	bd38      	pop	{r3, r4, r5, pc}
 8014276:	bf00      	nop
 8014278:	20008c64 	.word	0x20008c64

0801427c <_isatty_r>:
 801427c:	b538      	push	{r3, r4, r5, lr}
 801427e:	4d06      	ldr	r5, [pc, #24]	@ (8014298 <_isatty_r+0x1c>)
 8014280:	2300      	movs	r3, #0
 8014282:	4604      	mov	r4, r0
 8014284:	4608      	mov	r0, r1
 8014286:	602b      	str	r3, [r5, #0]
 8014288:	f7ef f90a 	bl	80034a0 <_isatty>
 801428c:	1c43      	adds	r3, r0, #1
 801428e:	d102      	bne.n	8014296 <_isatty_r+0x1a>
 8014290:	682b      	ldr	r3, [r5, #0]
 8014292:	b103      	cbz	r3, 8014296 <_isatty_r+0x1a>
 8014294:	6023      	str	r3, [r4, #0]
 8014296:	bd38      	pop	{r3, r4, r5, pc}
 8014298:	20008c64 	.word	0x20008c64

0801429c <_kill_r>:
 801429c:	b538      	push	{r3, r4, r5, lr}
 801429e:	4d07      	ldr	r5, [pc, #28]	@ (80142bc <_kill_r+0x20>)
 80142a0:	2300      	movs	r3, #0
 80142a2:	4604      	mov	r4, r0
 80142a4:	4608      	mov	r0, r1
 80142a6:	4611      	mov	r1, r2
 80142a8:	602b      	str	r3, [r5, #0]
 80142aa:	f7ef f887 	bl	80033bc <_kill>
 80142ae:	1c43      	adds	r3, r0, #1
 80142b0:	d102      	bne.n	80142b8 <_kill_r+0x1c>
 80142b2:	682b      	ldr	r3, [r5, #0]
 80142b4:	b103      	cbz	r3, 80142b8 <_kill_r+0x1c>
 80142b6:	6023      	str	r3, [r4, #0]
 80142b8:	bd38      	pop	{r3, r4, r5, pc}
 80142ba:	bf00      	nop
 80142bc:	20008c64 	.word	0x20008c64

080142c0 <_getpid_r>:
 80142c0:	f7ef b874 	b.w	80033ac <_getpid>

080142c4 <_malloc_usable_size_r>:
 80142c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142c8:	1f18      	subs	r0, r3, #4
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	bfbc      	itt	lt
 80142ce:	580b      	ldrlt	r3, [r1, r0]
 80142d0:	18c0      	addlt	r0, r0, r3
 80142d2:	4770      	bx	lr

080142d4 <sqrt>:
 80142d4:	b538      	push	{r3, r4, r5, lr}
 80142d6:	ed2d 8b02 	vpush	{d8}
 80142da:	ec55 4b10 	vmov	r4, r5, d0
 80142de:	f000 f873 	bl	80143c8 <__ieee754_sqrt>
 80142e2:	4622      	mov	r2, r4
 80142e4:	462b      	mov	r3, r5
 80142e6:	4620      	mov	r0, r4
 80142e8:	4629      	mov	r1, r5
 80142ea:	eeb0 8a40 	vmov.f32	s16, s0
 80142ee:	eef0 8a60 	vmov.f32	s17, s1
 80142f2:	f7ec fc13 	bl	8000b1c <__aeabi_dcmpun>
 80142f6:	b990      	cbnz	r0, 801431e <sqrt+0x4a>
 80142f8:	2200      	movs	r2, #0
 80142fa:	2300      	movs	r3, #0
 80142fc:	4620      	mov	r0, r4
 80142fe:	4629      	mov	r1, r5
 8014300:	f7ec fbe4 	bl	8000acc <__aeabi_dcmplt>
 8014304:	b158      	cbz	r0, 801431e <sqrt+0x4a>
 8014306:	f7ff f8bb 	bl	8013480 <__errno>
 801430a:	2321      	movs	r3, #33	@ 0x21
 801430c:	6003      	str	r3, [r0, #0]
 801430e:	2200      	movs	r2, #0
 8014310:	2300      	movs	r3, #0
 8014312:	4610      	mov	r0, r2
 8014314:	4619      	mov	r1, r3
 8014316:	f7ec fa91 	bl	800083c <__aeabi_ddiv>
 801431a:	ec41 0b18 	vmov	d8, r0, r1
 801431e:	eeb0 0a48 	vmov.f32	s0, s16
 8014322:	eef0 0a68 	vmov.f32	s1, s17
 8014326:	ecbd 8b02 	vpop	{d8}
 801432a:	bd38      	pop	{r3, r4, r5, pc}

0801432c <fmax>:
 801432c:	b508      	push	{r3, lr}
 801432e:	ed2d 8b04 	vpush	{d8-d9}
 8014332:	eeb0 8a40 	vmov.f32	s16, s0
 8014336:	eef0 8a60 	vmov.f32	s17, s1
 801433a:	eeb0 9a41 	vmov.f32	s18, s2
 801433e:	eef0 9a61 	vmov.f32	s19, s3
 8014342:	f000 f81d 	bl	8014380 <__fpclassifyd>
 8014346:	b950      	cbnz	r0, 801435e <fmax+0x32>
 8014348:	eeb0 8a49 	vmov.f32	s16, s18
 801434c:	eef0 8a69 	vmov.f32	s17, s19
 8014350:	eeb0 0a48 	vmov.f32	s0, s16
 8014354:	eef0 0a68 	vmov.f32	s1, s17
 8014358:	ecbd 8b04 	vpop	{d8-d9}
 801435c:	bd08      	pop	{r3, pc}
 801435e:	eeb0 0a49 	vmov.f32	s0, s18
 8014362:	eef0 0a69 	vmov.f32	s1, s19
 8014366:	f000 f80b 	bl	8014380 <__fpclassifyd>
 801436a:	2800      	cmp	r0, #0
 801436c:	d0f0      	beq.n	8014350 <fmax+0x24>
 801436e:	ec53 2b19 	vmov	r2, r3, d9
 8014372:	ec51 0b18 	vmov	r0, r1, d8
 8014376:	f7ec fbc7 	bl	8000b08 <__aeabi_dcmpgt>
 801437a:	2800      	cmp	r0, #0
 801437c:	d0e4      	beq.n	8014348 <fmax+0x1c>
 801437e:	e7e7      	b.n	8014350 <fmax+0x24>

08014380 <__fpclassifyd>:
 8014380:	ec51 0b10 	vmov	r0, r1, d0
 8014384:	460b      	mov	r3, r1
 8014386:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 801438a:	b510      	push	{r4, lr}
 801438c:	d104      	bne.n	8014398 <__fpclassifyd+0x18>
 801438e:	2800      	cmp	r0, #0
 8014390:	bf0c      	ite	eq
 8014392:	2002      	moveq	r0, #2
 8014394:	2003      	movne	r0, #3
 8014396:	bd10      	pop	{r4, pc}
 8014398:	4a09      	ldr	r2, [pc, #36]	@ (80143c0 <__fpclassifyd+0x40>)
 801439a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 801439e:	4294      	cmp	r4, r2
 80143a0:	d908      	bls.n	80143b4 <__fpclassifyd+0x34>
 80143a2:	4a08      	ldr	r2, [pc, #32]	@ (80143c4 <__fpclassifyd+0x44>)
 80143a4:	4213      	tst	r3, r2
 80143a6:	d007      	beq.n	80143b8 <__fpclassifyd+0x38>
 80143a8:	4291      	cmp	r1, r2
 80143aa:	d107      	bne.n	80143bc <__fpclassifyd+0x3c>
 80143ac:	fab0 f080 	clz	r0, r0
 80143b0:	0940      	lsrs	r0, r0, #5
 80143b2:	e7f0      	b.n	8014396 <__fpclassifyd+0x16>
 80143b4:	2004      	movs	r0, #4
 80143b6:	e7ee      	b.n	8014396 <__fpclassifyd+0x16>
 80143b8:	2003      	movs	r0, #3
 80143ba:	e7ec      	b.n	8014396 <__fpclassifyd+0x16>
 80143bc:	2000      	movs	r0, #0
 80143be:	e7ea      	b.n	8014396 <__fpclassifyd+0x16>
 80143c0:	7fdfffff 	.word	0x7fdfffff
 80143c4:	7ff00000 	.word	0x7ff00000

080143c8 <__ieee754_sqrt>:
 80143c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143cc:	4a66      	ldr	r2, [pc, #408]	@ (8014568 <__ieee754_sqrt+0x1a0>)
 80143ce:	ec55 4b10 	vmov	r4, r5, d0
 80143d2:	43aa      	bics	r2, r5
 80143d4:	462b      	mov	r3, r5
 80143d6:	4621      	mov	r1, r4
 80143d8:	d110      	bne.n	80143fc <__ieee754_sqrt+0x34>
 80143da:	4622      	mov	r2, r4
 80143dc:	4620      	mov	r0, r4
 80143de:	4629      	mov	r1, r5
 80143e0:	f7ec f902 	bl	80005e8 <__aeabi_dmul>
 80143e4:	4602      	mov	r2, r0
 80143e6:	460b      	mov	r3, r1
 80143e8:	4620      	mov	r0, r4
 80143ea:	4629      	mov	r1, r5
 80143ec:	f7eb ff46 	bl	800027c <__adddf3>
 80143f0:	4604      	mov	r4, r0
 80143f2:	460d      	mov	r5, r1
 80143f4:	ec45 4b10 	vmov	d0, r4, r5
 80143f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143fc:	2d00      	cmp	r5, #0
 80143fe:	dc0e      	bgt.n	801441e <__ieee754_sqrt+0x56>
 8014400:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8014404:	4322      	orrs	r2, r4
 8014406:	d0f5      	beq.n	80143f4 <__ieee754_sqrt+0x2c>
 8014408:	b19d      	cbz	r5, 8014432 <__ieee754_sqrt+0x6a>
 801440a:	4622      	mov	r2, r4
 801440c:	4620      	mov	r0, r4
 801440e:	4629      	mov	r1, r5
 8014410:	f7eb ff32 	bl	8000278 <__aeabi_dsub>
 8014414:	4602      	mov	r2, r0
 8014416:	460b      	mov	r3, r1
 8014418:	f7ec fa10 	bl	800083c <__aeabi_ddiv>
 801441c:	e7e8      	b.n	80143f0 <__ieee754_sqrt+0x28>
 801441e:	152a      	asrs	r2, r5, #20
 8014420:	d115      	bne.n	801444e <__ieee754_sqrt+0x86>
 8014422:	2000      	movs	r0, #0
 8014424:	e009      	b.n	801443a <__ieee754_sqrt+0x72>
 8014426:	0acb      	lsrs	r3, r1, #11
 8014428:	3a15      	subs	r2, #21
 801442a:	0549      	lsls	r1, r1, #21
 801442c:	2b00      	cmp	r3, #0
 801442e:	d0fa      	beq.n	8014426 <__ieee754_sqrt+0x5e>
 8014430:	e7f7      	b.n	8014422 <__ieee754_sqrt+0x5a>
 8014432:	462a      	mov	r2, r5
 8014434:	e7fa      	b.n	801442c <__ieee754_sqrt+0x64>
 8014436:	005b      	lsls	r3, r3, #1
 8014438:	3001      	adds	r0, #1
 801443a:	02dc      	lsls	r4, r3, #11
 801443c:	d5fb      	bpl.n	8014436 <__ieee754_sqrt+0x6e>
 801443e:	1e44      	subs	r4, r0, #1
 8014440:	1b12      	subs	r2, r2, r4
 8014442:	f1c0 0420 	rsb	r4, r0, #32
 8014446:	fa21 f404 	lsr.w	r4, r1, r4
 801444a:	4323      	orrs	r3, r4
 801444c:	4081      	lsls	r1, r0
 801444e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014452:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8014456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801445a:	07d2      	lsls	r2, r2, #31
 801445c:	bf5c      	itt	pl
 801445e:	005b      	lslpl	r3, r3, #1
 8014460:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8014464:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014468:	bf58      	it	pl
 801446a:	0049      	lslpl	r1, r1, #1
 801446c:	2600      	movs	r6, #0
 801446e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8014472:	107f      	asrs	r7, r7, #1
 8014474:	0049      	lsls	r1, r1, #1
 8014476:	2016      	movs	r0, #22
 8014478:	4632      	mov	r2, r6
 801447a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801447e:	1915      	adds	r5, r2, r4
 8014480:	429d      	cmp	r5, r3
 8014482:	bfde      	ittt	le
 8014484:	192a      	addle	r2, r5, r4
 8014486:	1b5b      	suble	r3, r3, r5
 8014488:	1936      	addle	r6, r6, r4
 801448a:	0fcd      	lsrs	r5, r1, #31
 801448c:	3801      	subs	r0, #1
 801448e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8014492:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014496:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801449a:	d1f0      	bne.n	801447e <__ieee754_sqrt+0xb6>
 801449c:	4605      	mov	r5, r0
 801449e:	2420      	movs	r4, #32
 80144a0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80144a4:	4293      	cmp	r3, r2
 80144a6:	eb0c 0e00 	add.w	lr, ip, r0
 80144aa:	dc02      	bgt.n	80144b2 <__ieee754_sqrt+0xea>
 80144ac:	d113      	bne.n	80144d6 <__ieee754_sqrt+0x10e>
 80144ae:	458e      	cmp	lr, r1
 80144b0:	d811      	bhi.n	80144d6 <__ieee754_sqrt+0x10e>
 80144b2:	f1be 0f00 	cmp.w	lr, #0
 80144b6:	eb0e 000c 	add.w	r0, lr, ip
 80144ba:	da3f      	bge.n	801453c <__ieee754_sqrt+0x174>
 80144bc:	2800      	cmp	r0, #0
 80144be:	db3d      	blt.n	801453c <__ieee754_sqrt+0x174>
 80144c0:	f102 0801 	add.w	r8, r2, #1
 80144c4:	1a9b      	subs	r3, r3, r2
 80144c6:	458e      	cmp	lr, r1
 80144c8:	bf88      	it	hi
 80144ca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80144ce:	eba1 010e 	sub.w	r1, r1, lr
 80144d2:	4465      	add	r5, ip
 80144d4:	4642      	mov	r2, r8
 80144d6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80144da:	3c01      	subs	r4, #1
 80144dc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80144e0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80144e4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80144e8:	d1dc      	bne.n	80144a4 <__ieee754_sqrt+0xdc>
 80144ea:	4319      	orrs	r1, r3
 80144ec:	d01b      	beq.n	8014526 <__ieee754_sqrt+0x15e>
 80144ee:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 801456c <__ieee754_sqrt+0x1a4>
 80144f2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8014570 <__ieee754_sqrt+0x1a8>
 80144f6:	e9da 0100 	ldrd	r0, r1, [sl]
 80144fa:	e9db 2300 	ldrd	r2, r3, [fp]
 80144fe:	f7eb febb 	bl	8000278 <__aeabi_dsub>
 8014502:	e9da 8900 	ldrd	r8, r9, [sl]
 8014506:	4602      	mov	r2, r0
 8014508:	460b      	mov	r3, r1
 801450a:	4640      	mov	r0, r8
 801450c:	4649      	mov	r1, r9
 801450e:	f7ec fae7 	bl	8000ae0 <__aeabi_dcmple>
 8014512:	b140      	cbz	r0, 8014526 <__ieee754_sqrt+0x15e>
 8014514:	f1b5 3fff 	cmp.w	r5, #4294967295
 8014518:	e9da 0100 	ldrd	r0, r1, [sl]
 801451c:	e9db 2300 	ldrd	r2, r3, [fp]
 8014520:	d10e      	bne.n	8014540 <__ieee754_sqrt+0x178>
 8014522:	3601      	adds	r6, #1
 8014524:	4625      	mov	r5, r4
 8014526:	1073      	asrs	r3, r6, #1
 8014528:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 801452c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8014530:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8014534:	086b      	lsrs	r3, r5, #1
 8014536:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801453a:	e759      	b.n	80143f0 <__ieee754_sqrt+0x28>
 801453c:	4690      	mov	r8, r2
 801453e:	e7c1      	b.n	80144c4 <__ieee754_sqrt+0xfc>
 8014540:	f7eb fe9c 	bl	800027c <__adddf3>
 8014544:	e9da 8900 	ldrd	r8, r9, [sl]
 8014548:	4602      	mov	r2, r0
 801454a:	460b      	mov	r3, r1
 801454c:	4640      	mov	r0, r8
 801454e:	4649      	mov	r1, r9
 8014550:	f7ec fabc 	bl	8000acc <__aeabi_dcmplt>
 8014554:	b120      	cbz	r0, 8014560 <__ieee754_sqrt+0x198>
 8014556:	1cab      	adds	r3, r5, #2
 8014558:	bf08      	it	eq
 801455a:	3601      	addeq	r6, #1
 801455c:	3502      	adds	r5, #2
 801455e:	e7e2      	b.n	8014526 <__ieee754_sqrt+0x15e>
 8014560:	1c6b      	adds	r3, r5, #1
 8014562:	f023 0501 	bic.w	r5, r3, #1
 8014566:	e7de      	b.n	8014526 <__ieee754_sqrt+0x15e>
 8014568:	7ff00000 	.word	0x7ff00000
 801456c:	080173f0 	.word	0x080173f0
 8014570:	080173e8 	.word	0x080173e8

08014574 <_init>:
 8014574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014576:	bf00      	nop
 8014578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801457a:	bc08      	pop	{r3}
 801457c:	469e      	mov	lr, r3
 801457e:	4770      	bx	lr

08014580 <_fini>:
 8014580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014582:	bf00      	nop
 8014584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014586:	bc08      	pop	{r3}
 8014588:	469e      	mov	lr, r3
 801458a:	4770      	bx	lr
