
SMCONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001398c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d04  08013b1c  08013b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016820  08016820  00018100  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016820  08016820  00017820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016828  08016828  00018100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016828  08016828  00017828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801682c  0801682c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08016830  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00018100  2**0
                  CONTENTS
 10 .bss          00008b44  20000100  20000100  00018100  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20008c44  20008c44  00018100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00018100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c4e2  00000000  00000000  00018130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000675d  00000000  00000000  00044612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025c0  00000000  00000000  0004ad70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e2b  00000000  00000000  0004d330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fbed  00000000  00000000  0004f15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00036af7  00000000  00000000  0005ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc810  00000000  00000000  0009583f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019204f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000afb0  00000000  00000000  00192094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0019d044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013b04 	.word	0x08013b04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	08013b04 	.word	0x08013b04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b988 	b.w	8000f24 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	468e      	mov	lr, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	4688      	mov	r8, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4617      	mov	r7, r2
 8000c40:	d962      	bls.n	8000d08 <__udivmoddi4+0xdc>
 8000c42:	fab2 f682 	clz	r6, r2
 8000c46:	b14e      	cbz	r6, 8000c5c <__udivmoddi4+0x30>
 8000c48:	f1c6 0320 	rsb	r3, r6, #32
 8000c4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c50:	fa20 f303 	lsr.w	r3, r0, r3
 8000c54:	40b7      	lsls	r7, r6
 8000c56:	ea43 0808 	orr.w	r8, r3, r8
 8000c5a:	40b4      	lsls	r4, r6
 8000c5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c60:	fa1f fc87 	uxth.w	ip, r7
 8000c64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c68:	0c23      	lsrs	r3, r4, #16
 8000c6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c72:	fb01 f20c 	mul.w	r2, r1, ip
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c80:	f080 80ea 	bcs.w	8000e58 <__udivmoddi4+0x22c>
 8000c84:	429a      	cmp	r2, r3
 8000c86:	f240 80e7 	bls.w	8000e58 <__udivmoddi4+0x22c>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	443b      	add	r3, r7
 8000c8e:	1a9a      	subs	r2, r3, r2
 8000c90:	b2a3      	uxth	r3, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ca2:	459c      	cmp	ip, r3
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0x8e>
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cac:	f080 80d6 	bcs.w	8000e5c <__udivmoddi4+0x230>
 8000cb0:	459c      	cmp	ip, r3
 8000cb2:	f240 80d3 	bls.w	8000e5c <__udivmoddi4+0x230>
 8000cb6:	443b      	add	r3, r7
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbe:	eba3 030c 	sub.w	r3, r3, ip
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40f3      	lsrs	r3, r6
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xb6>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb0>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x14c>
 8000cea:	4573      	cmp	r3, lr
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xc8>
 8000cee:	4282      	cmp	r2, r0
 8000cf0:	f200 8105 	bhi.w	8000efe <__udivmoddi4+0x2d2>
 8000cf4:	1a84      	subs	r4, r0, r2
 8000cf6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	4690      	mov	r8, r2
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	d0e5      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d02:	e9c5 4800 	strd	r4, r8, [r5]
 8000d06:	e7e2      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f000 8090 	beq.w	8000e2e <__udivmoddi4+0x202>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f040 80a4 	bne.w	8000e60 <__udivmoddi4+0x234>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	0c03      	lsrs	r3, r0, #16
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	b280      	uxth	r0, r0
 8000d22:	b2bc      	uxth	r4, r7
 8000d24:	2101      	movs	r1, #1
 8000d26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d32:	fb04 f20c 	mul.w	r2, r4, ip
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x11e>
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d40:	d202      	bcs.n	8000d48 <__udivmoddi4+0x11c>
 8000d42:	429a      	cmp	r2, r3
 8000d44:	f200 80e0 	bhi.w	8000f08 <__udivmoddi4+0x2dc>
 8000d48:	46c4      	mov	ip, r8
 8000d4a:	1a9b      	subs	r3, r3, r2
 8000d4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d58:	fb02 f404 	mul.w	r4, r2, r4
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x144>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x142>
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	f200 80ca 	bhi.w	8000f02 <__udivmoddi4+0x2d6>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	1b1b      	subs	r3, r3, r4
 8000d72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa0e f401 	lsl.w	r4, lr, r1
 8000d88:	fa20 f306 	lsr.w	r3, r0, r6
 8000d8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d94:	4323      	orrs	r3, r4
 8000d96:	fa00 f801 	lsl.w	r8, r0, r1
 8000d9a:	fa1f fc87 	uxth.w	ip, r7
 8000d9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000da2:	0c1c      	lsrs	r4, r3, #16
 8000da4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d909      	bls.n	8000dcc <__udivmoddi4+0x1a0>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dbe:	f080 809c 	bcs.w	8000efa <__udivmoddi4+0x2ce>
 8000dc2:	45a6      	cmp	lr, r4
 8000dc4:	f240 8099 	bls.w	8000efa <__udivmoddi4+0x2ce>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	443c      	add	r4, r7
 8000dcc:	eba4 040e 	sub.w	r4, r4, lr
 8000dd0:	fa1f fe83 	uxth.w	lr, r3
 8000dd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000ddc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000de0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de4:	45a4      	cmp	ip, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1ce>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dee:	f080 8082 	bcs.w	8000ef6 <__udivmoddi4+0x2ca>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d97f      	bls.n	8000ef6 <__udivmoddi4+0x2ca>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfe:	eba4 040c 	sub.w	r4, r4, ip
 8000e02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e06:	4564      	cmp	r4, ip
 8000e08:	4673      	mov	r3, lr
 8000e0a:	46e1      	mov	r9, ip
 8000e0c:	d362      	bcc.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e0e:	d05f      	beq.n	8000ed0 <__udivmoddi4+0x2a4>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x1fe>
 8000e12:	ebb8 0203 	subs.w	r2, r8, r3
 8000e16:	eb64 0409 	sbc.w	r4, r4, r9
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e22:	431e      	orrs	r6, r3
 8000e24:	40cc      	lsrs	r4, r1
 8000e26:	e9c5 6400 	strd	r6, r4, [r5]
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	e74f      	b.n	8000cce <__udivmoddi4+0xa2>
 8000e2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e32:	0c01      	lsrs	r1, r0, #16
 8000e34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4638      	mov	r0, r7
 8000e42:	463c      	mov	r4, r7
 8000e44:	46b8      	mov	r8, r7
 8000e46:	46be      	mov	lr, r7
 8000e48:	2620      	movs	r6, #32
 8000e4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4e:	eba2 0208 	sub.w	r2, r2, r8
 8000e52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e56:	e766      	b.n	8000d26 <__udivmoddi4+0xfa>
 8000e58:	4601      	mov	r1, r0
 8000e5a:	e718      	b.n	8000c8e <__udivmoddi4+0x62>
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	e72c      	b.n	8000cba <__udivmoddi4+0x8e>
 8000e60:	f1c6 0220 	rsb	r2, r6, #32
 8000e64:	fa2e f302 	lsr.w	r3, lr, r2
 8000e68:	40b7      	lsls	r7, r6
 8000e6a:	40b1      	lsls	r1, r6
 8000e6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e74:	430a      	orrs	r2, r1
 8000e76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e80:	0c11      	lsrs	r1, r2, #16
 8000e82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e86:	fb08 f904 	mul.w	r9, r8, r4
 8000e8a:	40b0      	lsls	r0, r6
 8000e8c:	4589      	cmp	r9, r1
 8000e8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e92:	b280      	uxth	r0, r0
 8000e94:	d93e      	bls.n	8000f14 <__udivmoddi4+0x2e8>
 8000e96:	1879      	adds	r1, r7, r1
 8000e98:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e9c:	d201      	bcs.n	8000ea2 <__udivmoddi4+0x276>
 8000e9e:	4589      	cmp	r9, r1
 8000ea0:	d81f      	bhi.n	8000ee2 <__udivmoddi4+0x2b6>
 8000ea2:	eba1 0109 	sub.w	r1, r1, r9
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fb09 f804 	mul.w	r8, r9, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb8:	4542      	cmp	r2, r8
 8000eba:	d229      	bcs.n	8000f10 <__udivmoddi4+0x2e4>
 8000ebc:	18ba      	adds	r2, r7, r2
 8000ebe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ec2:	d2c4      	bcs.n	8000e4e <__udivmoddi4+0x222>
 8000ec4:	4542      	cmp	r2, r8
 8000ec6:	d2c2      	bcs.n	8000e4e <__udivmoddi4+0x222>
 8000ec8:	f1a9 0102 	sub.w	r1, r9, #2
 8000ecc:	443a      	add	r2, r7
 8000ece:	e7be      	b.n	8000e4e <__udivmoddi4+0x222>
 8000ed0:	45f0      	cmp	r8, lr
 8000ed2:	d29d      	bcs.n	8000e10 <__udivmoddi4+0x1e4>
 8000ed4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000edc:	3801      	subs	r0, #1
 8000ede:	46e1      	mov	r9, ip
 8000ee0:	e796      	b.n	8000e10 <__udivmoddi4+0x1e4>
 8000ee2:	eba7 0909 	sub.w	r9, r7, r9
 8000ee6:	4449      	add	r1, r9
 8000ee8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef0:	fb09 f804 	mul.w	r8, r9, r4
 8000ef4:	e7db      	b.n	8000eae <__udivmoddi4+0x282>
 8000ef6:	4673      	mov	r3, lr
 8000ef8:	e77f      	b.n	8000dfa <__udivmoddi4+0x1ce>
 8000efa:	4650      	mov	r0, sl
 8000efc:	e766      	b.n	8000dcc <__udivmoddi4+0x1a0>
 8000efe:	4608      	mov	r0, r1
 8000f00:	e6fd      	b.n	8000cfe <__udivmoddi4+0xd2>
 8000f02:	443b      	add	r3, r7
 8000f04:	3a02      	subs	r2, #2
 8000f06:	e733      	b.n	8000d70 <__udivmoddi4+0x144>
 8000f08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f0c:	443b      	add	r3, r7
 8000f0e:	e71c      	b.n	8000d4a <__udivmoddi4+0x11e>
 8000f10:	4649      	mov	r1, r9
 8000f12:	e79c      	b.n	8000e4e <__udivmoddi4+0x222>
 8000f14:	eba1 0109 	sub.w	r1, r1, r9
 8000f18:	46c4      	mov	ip, r8
 8000f1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1e:	fb09 f804 	mul.w	r8, r9, r4
 8000f22:	e7c4      	b.n	8000eae <__udivmoddi4+0x282>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <udpSocketInit>:
/* --------------------------------------- Прототипы функций библиотеки net.h --------------------------------------- */

/** Функция инициализации UDP сетевого интерфейса
 */
void udpSocketInit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
	/* Переменная ошибок работы UDP интерфейса */
	err_t err;

	/* Новый UDP управляющий блок */
	upcb = udp_new();
 8000f2e:	f00f f81f 	bl	800ff70 <udp_new>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a13      	ldr	r2, [pc, #76]	@ (8000f84 <udpSocketInit+0x5c>)
 8000f36:	6013      	str	r3, [r2, #0]

	/* Связать IP адрес и порт */
	ip_addr_t myIPaddr;

	/* IP адрес устройства */
	IP_ADDR4(&myIPaddr, 192, 168, 1, 156);
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <udpSocketInit+0x60>)
 8000f3a:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 1556);
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <udpSocketInit+0x5c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f107 0108 	add.w	r1, r7, #8
 8000f44:	f240 6214 	movw	r2, #1556	@ 0x614
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f00e fefb 	bl	800fd44 <udp_bind>

	/* Конфигурация IP адреса и порта назначения - ПК */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 1, 2);
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <udpSocketInit+0x64>)
 8000f50:	607b      	str	r3, [r7, #4]
	err = udp_connect(upcb, &DestIPaddr, 1555);
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <udpSocketInit+0x5c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	1d39      	adds	r1, r7, #4
 8000f58:	f240 6213 	movw	r2, #1555	@ 0x613
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00e ff79 	bl	800fe54 <udp_connect>
 8000f62:	4603      	mov	r3, r0
 8000f64:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d106      	bne.n	8000f7c <udpSocketInit+0x54>
	{
		/* Передача указателя на функцию обработчика входящих пакетов в структуру UDP интерфейса */
		udp_recv(upcb, udpReceiveCallback, NULL);
 8000f6e:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <udpSocketInit+0x5c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2200      	movs	r2, #0
 8000f74:	4906      	ldr	r1, [pc, #24]	@ (8000f90 <udpSocketInit+0x68>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f00e ffda 	bl	800ff30 <udp_recv>
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2000011c 	.word	0x2000011c
 8000f88:	9c01a8c0 	.word	0x9c01a8c0
 8000f8c:	0201a8c0 	.word	0x0201a8c0
 8000f90:	08000f95 	.word	0x08000f95

08000f94 <udpReceiveCallback>:

/** Функция обработки принятых пакетов UDP
 */
void udpReceiveCallback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b0c5      	sub	sp, #276	@ 0x114
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 8000f9e:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 8000fa2:	6020      	str	r0, [r4, #0]
 8000fa4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000fa8:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8000fac:	6001      	str	r1, [r0, #0]
 8000fae:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000fb2:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000fb6:	600a      	str	r2, [r1, #0]
 8000fb8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000fbc:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000fc0:	6013      	str	r3, [r2, #0]
	strncpy(rxBuf, (char *)p->payload, p->len);
 8000fc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6859      	ldr	r1, [r3, #4]
 8000fce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	895b      	ldrh	r3, [r3, #10]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4811      	ldr	r0, [pc, #68]	@ (8001024 <udpReceiveCallback+0x90>)
 8000fde:	f011 fd02 	bl	80129e6 <strncpy>
	counter ++;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <udpReceiveCallback+0x94>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	@ (8001028 <udpReceiveCallback+0x94>)
 8000fea:	6013      	str	r3, [r2, #0]
	pbuf_free(p);
 8000fec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ff0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f008 fd27 	bl	8009a48 <pbuf_free>

	char data[256];
	sprintf(data, "STM32: number of message received = %d\n", counter);
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <udpReceiveCallback+0x94>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	490a      	ldr	r1, [pc, #40]	@ (800102c <udpReceiveCallback+0x98>)
 8001004:	4618      	mov	r0, r3
 8001006:	f011 fc57 	bl	80128b8 <siprintf>

	udpClientSend(data);
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f80e 	bl	8001030 <udpClientSend>

	/* Вызов обработчик принятных сообщений */
	udpReceiveHandler();
 8001014:	f001 fa7a 	bl	800250c <udpReceiveHandler>
}
 8001018:	bf00      	nop
 800101a:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	bf00      	nop
 8001024:	20000120 	.word	0x20000120
 8001028:	200001a0 	.word	0x200001a0
 800102c:	08013b1c 	.word	0x08013b1c

08001030 <udpClientSend>:

/** Функция отправки сообщения по UDP
 */
void udpClientSend(char *buf)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0c4      	sub	sp, #272	@ 0x110
 8001034:	af00      	add	r7, sp, #0
 8001036:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800103a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800103e:	6018      	str	r0, [r3, #0]
	struct pbuf *txBuf;
	char data[256];

	int len = sprintf(data, "%s\n", (char *)buf);
 8001040:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001044:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001048:	f107 0008 	add.w	r0, r7, #8
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4917      	ldr	r1, [pc, #92]	@ (80010ac <udpClientSend+0x7c>)
 8001050:	f011 fc32 	bl	80128b8 <siprintf>
 8001054:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

	/* Выделить память под данные в буфере */
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8001058:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800105c:	b29b      	uxth	r3, r3
 800105e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001062:	4619      	mov	r1, r3
 8001064:	2036      	movs	r0, #54	@ 0x36
 8001066:	f008 fa0b 	bl	8009480 <pbuf_alloc>
 800106a:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

	if (txBuf != NULL)
 800106e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001072:	2b00      	cmp	r3, #0
 8001074:	d014      	beq.n	80010a0 <udpClientSend+0x70>
	{
		pbuf_take(txBuf, data, len);
 8001076:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800107a:	b29a      	uxth	r2, r3
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	4619      	mov	r1, r3
 8001082:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001086:	f008 ff4b 	bl	8009f20 <pbuf_take>
		udp_send(upcb, txBuf);
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <udpClientSend+0x80>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001092:	4618      	mov	r0, r3
 8001094:	f00e fc6c 	bl	800f970 <udp_send>
    	pbuf_free(txBuf);
 8001098:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800109c:	f008 fcd4 	bl	8009a48 <pbuf_free>
	}
}
 80010a0:	bf00      	nop
 80010a2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	08013b44 	.word	0x08013b44
 80010b0:	2000011c 	.word	0x2000011c

080010b4 <DWT_Init>:
  * @brief  This function initializes the DWT counter.
  * @param[in] None
  * @return None
  */
void DWT_Init()
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
	/* Allow the use of the counter DWT */
	SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <DWT_Init+0x28>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	@ (80010dc <DWT_Init+0x28>)
 80010be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010c2:	6013      	str	r3, [r2, #0]
	/* Turn on the counter */
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <DWT_Init+0x2c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <DWT_Init+0x2c>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6013      	str	r3, [r2, #0]

}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000edfc 	.word	0xe000edfc
 80010e0:	e0001000 	.word	0xe0001000

080010e4 <DWT_usDelay>:
  * @brief  This function produces a time delay in us.
  * @param[in] Time in us
  * @return None
  */
void DWT_usDelay(uint32_t us)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	/* Convert microseconds to processor ticks */
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <DWT_usDelay+0x3c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001124 <DWT_usDelay+0x40>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	0c9a      	lsrs	r2, r3, #18
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	fb02 f303 	mul.w	r3, r2, r3
 80010fe:	60fb      	str	r3, [r7, #12]
	/* Reset the counter */
	DWT_CYCCNT = 0;
 8001100:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <DWT_usDelay+0x44>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
	while(DWT_CYCCNT < us_count_tic);
 8001106:	bf00      	nop
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <DWT_usDelay+0x44>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	429a      	cmp	r2, r3
 8001110:	d8fa      	bhi.n	8001108 <DWT_usDelay+0x24>
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	20000078 	.word	0x20000078
 8001124:	431bde83 	.word	0x431bde83
 8001128:	e0001004 	.word	0xe0001004

0800112c <stepperFunctionsInit>:

/**	Функция инициализации указателей на функции из других областей программы
 * 	для использования в данной библиотеке
 */
void stepperFunctionsInit(writePinFunction_void_ptr function)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	setPin = function;
 8001134:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <stepperFunctionsInit+0x1c>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	200001a4 	.word	0x200001a4

0800114c <stepperInit>:
 *
 * 	Функция определяет пины шагового мотора и инициализирует начальные данные мотора -
 * 	позицию, направление, статус включения, глобальное определение поведения пинов DIR, EN
 */
void stepperInit(STEPPER_StructDef* stepper, STEPPER_PINS_StructDef* pins)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
	stepper->stepper_pins.GPIOx_step = pins->GPIOx_step;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
	stepper->stepper_pins.GPIO_Pin_step = pins->GPIO_Pin_step;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	889a      	ldrh	r2, [r3, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	809a      	strh	r2, [r3, #4]

	stepper->stepper_pins.GPIOx_dir = pins->GPIOx_dir;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	609a      	str	r2, [r3, #8]
	stepper->stepper_pins.GPIO_Pin_dir = pins->GPIO_Pin_dir;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	899a      	ldrh	r2, [r3, #12]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	819a      	strh	r2, [r3, #12]
//	stepper->pins.GPIOx_en = pins->GPIOx_en;
//	stepper->pins.GPIO_Pin_en = pins->GPIO_Pin_en;

	/* ------------------ НЕ ИСПОЛЬЗУЕТСЯ ----------------- */

	stepper->stepper_pins.GPIOx_en = 0x0;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
	stepper->stepper_pins.GPIO_Pin_en = 0x0;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	829a      	strh	r2, [r3, #20]

	stepper->pos = 0;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
	stepper->dir = 1;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	771a      	strb	r2, [r3, #28]
	stepper->en = OFF;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	775a      	strb	r2, [r3, #29]

	stepper->_globEn = false;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	779a      	strb	r2, [r3, #30]
	stepper->_globDir = false;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	77da      	strb	r2, [r3, #31]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <doStep>:

/** Сделать шаг мотором
 */
void doStep(STEPPER_StructDef* stepper)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	stepper->pos += stepper->dir;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7f1b      	ldrb	r3, [r3, #28]
 80011b8:	b25a      	sxtb	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	441a      	add	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
	setDir(stepper, stepper->dir); /* Установить пин DIR в нужное состояние в соответствии с направлением вращения */
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7f1b      	ldrb	r3, [r3, #28]
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f819 	bl	8001204 <setDir>

	setPin(stepper->stepper_pins.GPIOx_step, stepper->stepper_pins.GPIO_Pin_step, PIN_SET);
 80011d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <doStep+0x54>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6810      	ldr	r0, [r2, #0]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	8891      	ldrh	r1, [r2, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	4798      	blx	r3
	DWT_usDelay(DRIVER_STEP_TIME);
 80011e2:	2032      	movs	r0, #50	@ 0x32
 80011e4:	f7ff ff7e 	bl	80010e4 <DWT_usDelay>
	setPin(stepper->stepper_pins.GPIOx_step, stepper->stepper_pins.GPIO_Pin_step, PIN_RESET);
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <doStep+0x54>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6810      	ldr	r0, [r2, #0]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	8891      	ldrh	r1, [r2, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	4798      	blx	r3
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200001a4 	.word	0x200001a4

08001204 <setDir>:
 * 	dir = -1 - против часовой стрелки независимо от _globDir
 * 	Направление вращения определяется со стороны задней части мотора,
 * 	т.е. вал мотора смотрит от нас!
 */
void setDir(STEPPER_StructDef* stepper, int8_t dir)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
	if(stepper->_globDir == false)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7fdb      	ldrb	r3, [r3, #31]
 8001214:	f083 0301 	eor.w	r3, r3, #1
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d01b      	beq.n	8001256 <setDir+0x52>
	{
		if(dir == 1)
 800121e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d10b      	bne.n	800123e <setDir+0x3a>
		{
			stepper->dir = 1;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	771a      	strb	r2, [r3, #28]
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_SET);
 800122c:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <setDir+0x90>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6890      	ldr	r0, [r2, #8]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	8991      	ldrh	r1, [r2, #12]
 8001238:	2201      	movs	r2, #1
 800123a:	4798      	blx	r3
		else
		{
			stepper->dir = -1;
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_SET);
		}
}
 800123c:	e026      	b.n	800128c <setDir+0x88>
			stepper->dir = -1;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	22ff      	movs	r2, #255	@ 0xff
 8001242:	771a      	strb	r2, [r3, #28]
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_RESET);
 8001244:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <setDir+0x90>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6890      	ldr	r0, [r2, #8]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	8991      	ldrh	r1, [r2, #12]
 8001250:	2200      	movs	r2, #0
 8001252:	4798      	blx	r3
}
 8001254:	e01a      	b.n	800128c <setDir+0x88>
	else if(dir == 1)
 8001256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d10b      	bne.n	8001276 <setDir+0x72>
		stepper->dir = 1;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	771a      	strb	r2, [r3, #28]
		setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_RESET);
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <setDir+0x90>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6890      	ldr	r0, [r2, #8]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	8991      	ldrh	r1, [r2, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	4798      	blx	r3
}
 8001274:	e00a      	b.n	800128c <setDir+0x88>
			stepper->dir = -1;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	22ff      	movs	r2, #255	@ 0xff
 800127a:	771a      	strb	r2, [r3, #28]
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_SET);
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <setDir+0x90>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6890      	ldr	r0, [r2, #8]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	8991      	ldrh	r1, [r2, #12]
 8001288:	2201      	movs	r2, #1
 800128a:	4798      	blx	r3
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200001a4 	.word	0x200001a4

08001298 <enableStepper>:
/* ------------------ НЕ ИСПОЛЬЗУЕТСЯ ----------------- */

/** Включение мотора
 */
void enableStepper(STEPPER_StructDef* stepper)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	stepper->en = ON;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	775a      	strb	r2, [r3, #29]

	if(stepper->_globEn == false)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7f9b      	ldrb	r3, [r3, #30]
 80012aa:	f083 0301 	eor.w	r3, r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d008      	beq.n	80012c6 <enableStepper+0x2e>
	{
		setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_SET);
 80012b4:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <enableStepper+0x48>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6910      	ldr	r0, [r2, #16]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	8a91      	ldrh	r1, [r2, #20]
 80012c0:	2201      	movs	r2, #1
 80012c2:	4798      	blx	r3
	}
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_RESET);
}
 80012c4:	e007      	b.n	80012d6 <enableStepper+0x3e>
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_RESET);
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <enableStepper+0x48>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6910      	ldr	r0, [r2, #16]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	8a91      	ldrh	r1, [r2, #20]
 80012d2:	2200      	movs	r2, #0
 80012d4:	4798      	blx	r3
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200001a4 	.word	0x200001a4

080012e4 <disableStepper>:

/** Выключение мотора
 */
void disableStepper(STEPPER_StructDef* stepper)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	stepper->en = OFF;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	775a      	strb	r2, [r3, #29]

	if(stepper->_globEn == false)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7f9b      	ldrb	r3, [r3, #30]
 80012f6:	f083 0301 	eor.w	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <disableStepper+0x2e>
	{
		setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_RESET);
 8001300:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <disableStepper+0x48>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6910      	ldr	r0, [r2, #16]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	8a91      	ldrh	r1, [r2, #20]
 800130c:	2200      	movs	r2, #0
 800130e:	4798      	blx	r3
	}
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_SET);
}
 8001310:	e007      	b.n	8001322 <disableStepper+0x3e>
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_SET);
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <disableStepper+0x48>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6910      	ldr	r0, [r2, #16]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	8a91      	ldrh	r1, [r2, #20]
 800131e:	2201      	movs	r2, #1
 8001320:	4798      	blx	r3
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200001a4 	.word	0x200001a4

08001330 <driverFunctionsInit>:
/** Функция приема указателя на функцию получения времени в микросекундах.
 *  Используется таймер микроконтроллера и его регистр счетчика - TIMx->CNT
 *  function ОБЯЗАТЕЛЬНО должна быть определена в файле main.c
 */
void driverFunctionsInit(timeFunction_void_ptr function1, timeFunction_void_ptr function2, timeFunction_uint32_t_ptr function3, timeFunction_void_ptr function4)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
	startTimer = function1;
 800133e:	4a09      	ldr	r2, [pc, #36]	@ (8001364 <driverFunctionsInit+0x34>)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6013      	str	r3, [r2, #0]
	stopTimer = function2;
 8001344:	4a08      	ldr	r2, [pc, #32]	@ (8001368 <driverFunctionsInit+0x38>)
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	6013      	str	r3, [r2, #0]
	getMicros = function3;
 800134a:	4a08      	ldr	r2, [pc, #32]	@ (800136c <driverFunctionsInit+0x3c>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6013      	str	r3, [r2, #0]
	resetTimer = function4;
 8001350:	4a07      	ldr	r2, [pc, #28]	@ (8001370 <driverFunctionsInit+0x40>)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	6013      	str	r3, [r2, #0]
}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	200001a8 	.word	0x200001a8
 8001368:	200001ac 	.word	0x200001ac
 800136c:	200001b0 	.word	0x200001b0
 8001370:	200001b4 	.word	0x200001b4

08001374 <driverInit>:

/** Функция инициализации драйвера шагового мотора
 */
void driverInit(DRIVER_StructDef* driver, STEPPER_StructDef* stepper, DRIVER_LIMIT_SWITCH_PINS_StructDef* pins, uint32_t stepsPerRev)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
	driver->stepper = stepper;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	601a      	str	r2, [r3, #0]

	driver->driver_pins = pins;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	605a      	str	r2, [r3, #4]

	driver->_accelTime = 0;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
	driver->_speedPlannerPrd = 15000;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800139c:	819a      	strh	r2, [r3, #12]
	driver->_speedPlannerTime = 0;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
	driver->_plannerTime = 0;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]

	driver->_stopFlag = false;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	761a      	strb	r2, [r3, #24]
	driver->_stepsPerDeg = stepsPerRev / 360.0;
 80013b0:	6838      	ldr	r0, [r7, #0]
 80013b2:	f7ff f89f 	bl	80004f4 <__aeabi_ui2d>
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <driverInit+0xc8>)
 80013bc:	f7ff fa3e 	bl	800083c <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fbc8 	bl	8000b5c <__aeabi_d2f>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	61da      	str	r2, [r3, #28]
	driver->_prevTime = 0;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
	driver->_accelSpeed = 0;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	625a      	str	r2, [r3, #36]	@ 0x24
	driver->_target = 0;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	629a      	str	r2, [r3, #40]	@ 0x28
	driver->tickUs = 0;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	driver->_workState = INIT;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	driver->_autoPower = false;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	driver->_stopSpeed = 0;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	635a      	str	r2, [r3, #52]	@ 0x34
	driver->_maxSpeed = 300;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4a0e      	ldr	r2, [pc, #56]	@ (8001440 <driverInit+0xcc>)
 8001408:	639a      	str	r2, [r3, #56]	@ 0x38
	driver->_speed = 0;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	63da      	str	r2, [r3, #60]	@ 0x3c
	driver->_accel = 300;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001418:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	driver->_accelInv = 0;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	645a      	str	r2, [r3, #68]	@ 0x44
	driver->_curMode = POSITION_MODE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	driver->stepTime = 10000;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001432:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40768000 	.word	0x40768000
 8001440:	43960000 	.word	0x43960000

08001444 <resetTimers>:
}

/** Функция сброса всех таймеров
 */
void resetTimers(DRIVER_StructDef* driver)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	driver->_speedPlannerTime = driver->_plannerTime = driver->_prevTime = getMicros();
 800144c:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <resetTimers+0x2c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4798      	blx	r3
 8001452:	4602      	mov	r2, r0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	621a      	str	r2, [r3, #32]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1a      	ldr	r2, [r3, #32]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	615a      	str	r2, [r3, #20]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	611a      	str	r2, [r3, #16]
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200001b0 	.word	0x200001b0

08001474 <resetMotor>:

/** Установка текущей скорости мотора в ноль
 */
void resetMotor(DRIVER_StructDef* driver)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	driver->_accelSpeed = 0;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <tickDriver>:
/** Здесь происходит движение мотора, функция должна вызываться как можно чаще,
 * 	имеется встроенный таймер на тиках микропроцессора
 * 	Возвращает BUSY, если мотор запущен в режиме POSITION_MODE или VELOCITY_MODE
 */
workState_t tickDriver(DRIVER_StructDef* driver)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	if (driver->_workState == BUSY)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d14e      	bne.n	8001540 <tickDriver+0xb0>
	{
		driver->tickUs = getMicros();
 80014a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001550 <tickDriver+0xc0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4798      	blx	r3
 80014a8:	4602      	mov	r2, r0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* POSITION_MODE */
		if (driver->_curMode == POSITION_MODE && driver->_accel != 0 && driver->_maxSpeed >= MIN_SPEED_POS_MODE) plannerPositionMode(driver);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d111      	bne.n	80014dc <tickDriver+0x4c>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00c      	beq.n	80014dc <tickDriver+0x4c>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80014c8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80014cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	db02      	blt.n	80014dc <tickDriver+0x4c>
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f88a 	bl	80015f0 <plannerPositionMode>

		/* VELOCITY_MODE */
		if (driver->_curMode == VELOCITY_MODE && driver->_accel != 0) plannerVelocityMode(driver);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d107      	bne.n	80014f6 <tickDriver+0x66>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <tickDriver+0x66>
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 fa71 	bl	80019d8 <plannerVelocityMode>

		/* Основной таймер степпера */
		if (driver->stepTime != 0 && driver->tickUs - driver->_prevTime >= driver->stepTime)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d020      	beq.n	8001540 <tickDriver+0xb0>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	1ad2      	subs	r2, r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150c:	429a      	cmp	r2, r3
 800150e:	d317      	bcc.n	8001540 <tickDriver+0xb0>
		{
			driver->_prevTime = driver->tickUs;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	621a      	str	r2, [r3, #32]
//                    brake();
//                    return false;
//                }
//#endif
			/* Проверка достижения целевой координаты, проверка остановки для быстрого планировщика, а также работы без ускорения */
			if (driver->_curMode == POSITION_MODE && driver->_target == driver->stepper->pos)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10b      	bne.n	800153a <tickDriver+0xaa>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	429a      	cmp	r2, r3
 800152e:	d104      	bne.n	800153a <tickDriver+0xaa>
            {
				brake(driver);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f834 	bl	800159e <brake>
				return BRAKE;
 8001536:	2303      	movs	r3, #3
 8001538:	e005      	b.n	8001546 <tickDriver+0xb6>
            }

			step(driver);  // двигаем мотор
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f84a 	bl	80015d4 <step>
		}
	}

	return driver->_workState;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200001b0 	.word	0x200001b0

08001554 <enableDriver>:

/** Включить мотор (пин EN)
 */
void enableDriver(DRIVER_StructDef* driver)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	driver->_workState = BUSY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2202      	movs	r2, #2
 8001560:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	driver->_stopSpeed = 0;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	635a      	str	r2, [r3, #52]	@ 0x34

	resetTimers(driver);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff69 	bl	8001444 <resetTimers>

	enableStepper(driver->stepper);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fe8e 	bl	8001298 <enableStepper>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <disableDriver>:

/** Выключить мотор (пин EN)
 */
void disableDriver(DRIVER_StructDef* driver)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	disableStepper(driver->stepper);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fea7 	bl	80012e4 <disableStepper>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <brake>:
}

/* Резкая остановка + выключение мотора
 */
void brake(DRIVER_StructDef* driver)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
	driver->_workState = RESET;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	driver->_stopSpeed = 0;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	635a      	str	r2, [r3, #52]	@ 0x34

	resetMotor(driver);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ff5c 	bl	8001474 <resetMotor>

	if(driver->_autoPower == true) disableDriver(driver);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <brake+0x2e>
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffdc 	bl	8001584 <disableDriver>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <step>:
}

/** Сделать шаг мотором
 */
void step(DRIVER_StructDef* driver)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	doStep(driver->stepper);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fde3 	bl	80011ac <doStep>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <plannerPositionMode>:
uint16_t _plannerPrd = 15000;

/**	Планировщик скорости для POSITION_MODE с разгоном и торможением
 */
void plannerPositionMode(DRIVER_StructDef* driver)
{
 80015f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
	if (driver->tickUs - driver->_plannerTime >= _plannerPrd)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	4a90      	ldr	r2, [pc, #576]	@ (8001848 <plannerPositionMode+0x258>)
 8001606:	8812      	ldrh	r2, [r2, #0]
 8001608:	4293      	cmp	r3, r2
 800160a:	f0c0 8114 	bcc.w	8001836 <plannerPositionMode+0x246>
	{
		driver->_plannerTime += _plannerPrd; // ~110 us
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	4a8d      	ldr	r2, [pc, #564]	@ (8001848 <plannerPositionMode+0x258>)
 8001614:	8812      	ldrh	r2, [r2, #0]
 8001616:	441a      	add	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	615a      	str	r2, [r3, #20]

		int32_t err = driver->_target - driver->stepper->pos; // "ошибка"
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	60fb      	str	r3, [r7, #12]

		bool thisDir = (driver->_accelSpeed * driver->_accelSpeed * driver->_accel / 1000000.0 >= abs(err)); // пора тормозить
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164c:	ee17 0a90 	vmov	r0, s15
 8001650:	f7fe ff72 	bl	8000538 <__aeabi_f2d>
 8001654:	a37a      	add	r3, pc, #488	@ (adr r3, 8001840 <plannerPositionMode+0x250>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7ff f8ef 	bl	800083c <__aeabi_ddiv>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4690      	mov	r8, r2
 8001664:	4699      	mov	r9, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	bfb8      	it	lt
 800166c:	425b      	neglt	r3, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff50 	bl	8000514 <__aeabi_i2d>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	2101      	movs	r1, #1
 800167a:	460e      	mov	r6, r1
 800167c:	4640      	mov	r0, r8
 800167e:	4649      	mov	r1, r9
 8001680:	f7ff fa38 	bl	8000af4 <__aeabi_dcmpge>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <plannerPositionMode+0x9e>
 800168a:	2300      	movs	r3, #0
 800168c:	461e      	mov	r6, r3
 800168e:	72fe      	strb	r6, [r7, #11]

		driver->_accelSpeed += (driver->_accel * (_plannerPrd / 1000000.0) * (thisDir ? -_sign(driver->_accelSpeed) : _sign(err))); // разгон/торможение
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff4f 	bl	8000538 <__aeabi_f2d>
 800169a:	4680      	mov	r8, r0
 800169c:	4689      	mov	r9, r1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff35 	bl	8000514 <__aeabi_i2d>
 80016aa:	4682      	mov	sl, r0
 80016ac:	468b      	mov	fp, r1
 80016ae:	4b66      	ldr	r3, [pc, #408]	@ (8001848 <plannerPositionMode+0x258>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff2e 	bl	8000514 <__aeabi_i2d>
 80016b8:	a361      	add	r3, pc, #388	@ (adr r3, 8001840 <plannerPositionMode+0x250>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7ff f8bd 	bl	800083c <__aeabi_ddiv>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4650      	mov	r0, sl
 80016c8:	4659      	mov	r1, fp
 80016ca:	f7fe ff8d 	bl	80005e8 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4692      	mov	sl, r2
 80016d4:	469b      	mov	fp, r3
 80016d6:	7afb      	ldrb	r3, [r7, #11]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00f      	beq.n	80016fc <plannerPositionMode+0x10c>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80016e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	db03      	blt.n	80016f4 <plannerPositionMode+0x104>
 80016ec:	f04f 0000 	mov.w	r0, #0
 80016f0:	4956      	ldr	r1, [pc, #344]	@ (800184c <plannerPositionMode+0x25c>)
 80016f2:	e00d      	b.n	8001710 <plannerPositionMode+0x120>
 80016f4:	f04f 0000 	mov.w	r0, #0
 80016f8:	4955      	ldr	r1, [pc, #340]	@ (8001850 <plannerPositionMode+0x260>)
 80016fa:	e009      	b.n	8001710 <plannerPositionMode+0x120>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db03      	blt.n	800170a <plannerPositionMode+0x11a>
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	4952      	ldr	r1, [pc, #328]	@ (8001850 <plannerPositionMode+0x260>)
 8001708:	e002      	b.n	8001710 <plannerPositionMode+0x120>
 800170a:	f04f 0000 	mov.w	r0, #0
 800170e:	494f      	ldr	r1, [pc, #316]	@ (800184c <plannerPositionMode+0x25c>)
 8001710:	4652      	mov	r2, sl
 8001712:	465b      	mov	r3, fp
 8001714:	f7fe ff68 	bl	80005e8 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4640      	mov	r0, r8
 800171e:	4649      	mov	r1, r9
 8001720:	f7fe fdac 	bl	800027c <__adddf3>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f7ff fa16 	bl	8000b5c <__aeabi_d2f>
 8001730:	4602      	mov	r2, r0
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24

		if (driver->_stopSpeed == 0) driver->_accelSpeed = constrain(driver->_accelSpeed, -driver->_maxSpeed, driver->_maxSpeed); // ограничение
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800173c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001744:	d120      	bne.n	8001788 <plannerPositionMode+0x198>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800174c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001756:	eef1 7a67 	vneg.f32	s15, s15
 800175a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001768:	ee17 2a90 	vmov	r2, s15
 800176c:	ee16 1a90 	vmov	r1, s13
 8001770:	ee17 0a10 	vmov	r0, s14
 8001774:	f000 f9e0 	bl	8001b38 <constrain>
 8001778:	ee07 0a90 	vmov	s15, r0
 800177c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 8001786:	e01f      	b.n	80017c8 <plannerPositionMode+0x1d8>
		else driver->_accelSpeed = constrain(driver->_accelSpeed, -driver->_stopSpeed, driver->_stopSpeed);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800178e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001798:	eef1 7a67 	vneg.f32	s15, s15
 800179c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80017a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017aa:	ee17 2a90 	vmov	r2, s15
 80017ae:	ee16 1a90 	vmov	r1, s13
 80017b2:	ee17 0a10 	vmov	r0, s14
 80017b6:	f000 f9bf 	bl	8001b38 <constrain>
 80017ba:	ee07 0a90 	vmov	s15, r0
 80017be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		/* Ограничение на мин. скорость */
		if (fabs(driver->_accelSpeed) > MIN_SPEED_POS_MODE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80017ce:	eef0 7ae7 	vabs.f32	s15, s15
 80017d2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80017d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017de:	dd18      	ble.n	8001812 <plannerPositionMode+0x222>
		{
			driver->stepTime = fabs(1000000.0 / driver->_accelSpeed);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fea7 	bl	8000538 <__aeabi_f2d>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	a114      	add	r1, pc, #80	@ (adr r1, 8001840 <plannerPositionMode+0x250>)
 80017f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017f4:	f7ff f822 	bl	800083c <__aeabi_ddiv>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4614      	mov	r4, r2
 80017fe:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001802:	4620      	mov	r0, r4
 8001804:	4629      	mov	r1, r5
 8001806:	f7ff f989 	bl	8000b1c <__aeabi_d2uiz>
 800180a:	4602      	mov	r2, r0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001810:	e002      	b.n	8001818 <plannerPositionMode+0x228>
		}
		else driver->stepTime = MAX_PERIOD_POS_MODE;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a0f      	ldr	r2, [pc, #60]	@ (8001854 <plannerPositionMode+0x264>)
 8001816:	64da      	str	r2, [r3, #76]	@ 0x4c

		driver->stepper->dir = _sign(driver->_accelSpeed); /* Направление для шагов */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800181e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001826:	db01      	blt.n	800182c <plannerPositionMode+0x23c>
 8001828:	2201      	movs	r2, #1
 800182a:	e001      	b.n	8001830 <plannerPositionMode+0x240>
 800182c:	f04f 32ff 	mov.w	r2, #4294967295
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	771a      	strb	r2, [r3, #28]
	}
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001840:	00000000 	.word	0x00000000
 8001844:	412e8480 	.word	0x412e8480
 8001848:	20000000 	.word	0x20000000
 800184c:	bff00000 	.word	0xbff00000
 8001850:	3ff00000 	.word	0x3ff00000
 8001854:	00030d40 	.word	0x00030d40

08001858 <setTarget>:

/** Установка целевой позиции в шагах и градусах (для режима POSITION_MODE)
 * и движение к указанной цели с максимальной скоростью
 */
void setTarget(DRIVER_StructDef* driver, int32_t target_pos)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
	driver->_target = target_pos;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	629a      	str	r2, [r3, #40]	@ 0x28

	if(driver->_target != driver->stepper->pos)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	429a      	cmp	r2, r3
 8001874:	d034      	beq.n	80018e0 <setTarget+0x88>
	{
		if (driver->_accel == 0 || driver->_maxSpeed < MIN_SPEED_POS_MODE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800187c:	2b00      	cmp	r3, #0
 800187e:	d009      	beq.n	8001894 <setTarget+0x3c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001886:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800188a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001892:	d522      	bpl.n	80018da <setTarget+0x82>
		{
			driver->stepTime = 1000000.0 / driver->_maxSpeed;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe4d 	bl	8000538 <__aeabi_f2d>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	a111      	add	r1, pc, #68	@ (adr r1, 80018e8 <setTarget+0x90>)
 80018a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018a8:	f7fe ffc8 	bl	800083c <__aeabi_ddiv>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff f932 	bl	8000b1c <__aeabi_d2uiz>
 80018b8:	4602      	mov	r2, r0
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	64da      	str	r2, [r3, #76]	@ 0x4c
			driver->stepper->dir = (driver->_target > driver->stepper->pos) ? 1 : -1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	dd01      	ble.n	80018d0 <setTarget+0x78>
 80018cc:	2201      	movs	r2, #1
 80018ce:	e001      	b.n	80018d4 <setTarget+0x7c>
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	771a      	strb	r2, [r3, #28]
		}

		enableDriver(driver);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fe3a 	bl	8001554 <enableDriver>
	}
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	00000000 	.word	0x00000000
 80018ec:	412e8480 	.word	0x412e8480

080018f0 <setMaxSpeed>:

/** Установка максимальной скорости (по модулю) в шагах/секунду (для режима POSITION_MODE)
 *  по умолчанию 300
 */
void setMaxSpeed(DRIVER_StructDef* driver, float speed)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	ed87 0a00 	vstr	s0, [r7]
	/* Ограничения минимальной скорости - 1 шаг/час */
	driver->_maxSpeed = fmax(fabs(speed), MIN_STEP_SPEED);
 80018fc:	edd7 7a00 	vldr	s15, [r7]
 8001900:	eef0 7ae7 	vabs.f32	s15, s15
 8001904:	ee17 0a90 	vmov	r0, s15
 8001908:	f7fe fe16 	bl	8000538 <__aeabi_f2d>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 8001980 <setMaxSpeed+0x90>
 8001914:	ec43 2b10 	vmov	d0, r2, r3
 8001918:	f012 f8a6 	bl	8013a68 <fmax>
 800191c:	ec53 2b10 	vmov	r2, r3, d0
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff f91a 	bl	8000b5c <__aeabi_d2f>
 8001928:	4602      	mov	r2, r0
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Cчитаем stepTime для низких скоростей или отключенного ускорения */
	if (driver->_accel == 0 || driver->_maxSpeed < MIN_SPEED_POS_MODE) driver->stepTime = 1000000.0 / driver->_maxSpeed;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00a      	beq.n	800194e <setMaxSpeed+0x5e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800193e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194a:	d400      	bmi.n	800194e <setMaxSpeed+0x5e>
//        // период планировщка в зависимости от макс. скорости
//        _plannerPrd = map((int)_maxSpeed, 1000, 20000, 15000, 1000);
//        _plannerPrd = constrain(_plannerPrd, 15000, 1000);
//#endif

}
 800194c:	e014      	b.n	8001978 <setMaxSpeed+0x88>
	if (driver->_accel == 0 || driver->_maxSpeed < MIN_SPEED_POS_MODE) driver->stepTime = 1000000.0 / driver->_maxSpeed;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fdf0 	bl	8000538 <__aeabi_f2d>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	a10a      	add	r1, pc, #40	@ (adr r1, 8001988 <setMaxSpeed+0x98>)
 800195e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001962:	f7fe ff6b 	bl	800083c <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f8d5 	bl	8000b1c <__aeabi_d2uiz>
 8001972:	4602      	mov	r2, r0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	789abcdf 	.word	0x789abcdf
 8001984:	3f323456 	.word	0x3f323456
 8001988:	00000000 	.word	0x00000000
 800198c:	412e8480 	.word	0x412e8480

08001990 <setAcceleration>:
 * 	при значении 0 ускорение отключается и мотор работает
 * 	по профилю постоянной максимальной скорости setMaxSpeed().
 * 	по умолчанию 300
 */
void setAcceleration(DRIVER_StructDef* driver, uint16_t accel)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
	driver->_accel = abs(accel);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	if (accel != 0) driver->_accelInv = 0.5f / accel;
 80019a4:	887b      	ldrh	r3, [r7, #2]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00c      	beq.n	80019c4 <setAcceleration+0x34>
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80019b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

//#ifdef SMOOTH_ALGORITHM
//        if (_accel) _c0 = 0.676 * sqrt(2.0 / _accel) * 1000000.0;
//        plannerSmooth();
//#endif
}
 80019c2:	e003      	b.n	80019cc <setAcceleration+0x3c>
	else driver->_accelInv = 0;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <plannerVelocityMode>:
 * 	Планировщик не вызывается, если ускорение _accel = 0;
 * 	Если ускорение _accel = 0, то setSpeed(...) задает сразу скорость мотора
 * 	и старт будет резким!
 */
void plannerVelocityMode(DRIVER_StructDef* driver)
{
 80019d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
	if (driver->tickUs - driver->_speedPlannerTime >= driver->_speedPlannerPrd)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	8992      	ldrh	r2, [r2, #12]
 80019f0:	4293      	cmp	r3, r2
 80019f2:	f0c0 808e 	bcc.w	8001b12 <plannerVelocityMode+0x13a>
	{
		/* Обновляем переменную времени планировщика на величину периода планировщика */
		driver->_speedPlannerTime = driver->tickUs;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]

		/* Формула конечной скорости с учетом знака ускорения (м/с) */
		driver->_accelSpeed += (driver->_accel * (driver->_speedPlannerPrd / 1000000.0) * _sign(driver->_speed - driver->_accelSpeed));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fd98 	bl	8000538 <__aeabi_f2d>
 8001a08:	4680      	mov	r8, r0
 8001a0a:	4689      	mov	r9, r1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd7e 	bl	8000514 <__aeabi_i2d>
 8001a18:	4682      	mov	sl, r0
 8001a1a:	468b      	mov	fp, r1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	899b      	ldrh	r3, [r3, #12]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd77 	bl	8000514 <__aeabi_i2d>
 8001a26:	a33e      	add	r3, pc, #248	@ (adr r3, 8001b20 <plannerVelocityMode+0x148>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe ff06 	bl	800083c <__aeabi_ddiv>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4650      	mov	r0, sl
 8001a36:	4659      	mov	r1, fp
 8001a38:	f7fe fdd6 	bl	80005e8 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4692      	mov	sl, r2
 8001a42:	469b      	mov	fp, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001a50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5c:	db03      	blt.n	8001a66 <plannerVelocityMode+0x8e>
 8001a5e:	f04f 0000 	mov.w	r0, #0
 8001a62:	4933      	ldr	r1, [pc, #204]	@ (8001b30 <plannerVelocityMode+0x158>)
 8001a64:	e002      	b.n	8001a6c <plannerVelocityMode+0x94>
 8001a66:	f04f 0000 	mov.w	r0, #0
 8001a6a:	4932      	ldr	r1, [pc, #200]	@ (8001b34 <plannerVelocityMode+0x15c>)
 8001a6c:	4652      	mov	r2, sl
 8001a6e:	465b      	mov	r3, fp
 8001a70:	f7fe fdba 	bl	80005e8 <__aeabi_dmul>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4640      	mov	r0, r8
 8001a7a:	4649      	mov	r1, r9
 8001a7c:	f7fe fbfe 	bl	800027c <__adddf3>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7ff f868 	bl	8000b5c <__aeabi_d2f>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	625a      	str	r2, [r3, #36]	@ 0x24

		driver->stepper->dir = _sign(driver->_accelSpeed);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001a98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	db01      	blt.n	8001aa6 <plannerVelocityMode+0xce>
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	e001      	b.n	8001aaa <plannerVelocityMode+0xd2>
 8001aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	771a      	strb	r2, [r3, #28]
		driver->stepTime = fabs(1000000.0 / driver->_accelSpeed);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd3f 	bl	8000538 <__aeabi_f2d>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	a118      	add	r1, pc, #96	@ (adr r1, 8001b20 <plannerVelocityMode+0x148>)
 8001ac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ac4:	f7fe feba 	bl	800083c <__aeabi_ddiv>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4614      	mov	r4, r2
 8001ace:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	f7ff f821 	bl	8000b1c <__aeabi_d2uiz>
 8001ada:	4602      	mov	r2, r0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (driver->_stopFlag == true && fabs(driver->_accelSpeed) <= MIN_STEP_SPEED) brake(driver);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7e1b      	ldrb	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d014      	beq.n	8001b12 <plannerVelocityMode+0x13a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001aee:	eef0 7ae7 	vabs.f32	s15, s15
 8001af2:	ee17 0a90 	vmov	r0, s15
 8001af6:	f7fe fd1f 	bl	8000538 <__aeabi_f2d>
 8001afa:	a30b      	add	r3, pc, #44	@ (adr r3, 8001b28 <plannerVelocityMode+0x150>)
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	f7fe ffee 	bl	8000ae0 <__aeabi_dcmple>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d100      	bne.n	8001b0c <plannerVelocityMode+0x134>
	}
}
 8001b0a:	e002      	b.n	8001b12 <plannerVelocityMode+0x13a>
        if (driver->_stopFlag == true && fabs(driver->_accelSpeed) <= MIN_STEP_SPEED) brake(driver);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff fd46 	bl	800159e <brake>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1c:	f3af 8000 	nop.w
 8001b20:	00000000 	.word	0x00000000
 8001b24:	412e8480 	.word	0x412e8480
 8001b28:	789abcdf 	.word	0x789abcdf
 8001b2c:	3f323456 	.word	0x3f323456
 8001b30:	3ff00000 	.word	0x3ff00000
 8001b34:	bff00000 	.word	0xbff00000

08001b38 <constrain>:
/** Функция определения принадлежности значения числа указанному отрезку
 * 	отрезок [in_min, in_max], в функцие необязательно in_min < in_max
 * 	возможна и обратная ситуация
 */
int32_t constrain(int32_t x, int32_t in_min, int32_t in_max)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
	if(in_min < in_max)
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	da0b      	bge.n	8001b64 <constrain+0x2c>
	{
		return (x < in_min) ? in_min : ((x > in_max) ? in_max : x);
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	db05      	blt.n	8001b60 <constrain+0x28>
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	bfa8      	it	ge
 8001b5c:	4613      	movge	r3, r2
 8001b5e:	e00c      	b.n	8001b7a <constrain+0x42>
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	e00a      	b.n	8001b7a <constrain+0x42>
	}
	else return (x < in_max) ? in_max : ((x > in_min) ? in_min : x);
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	db05      	blt.n	8001b78 <constrain+0x40>
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	4293      	cmp	r3, r2
 8001b72:	bfa8      	it	ge
 8001b74:	4613      	movge	r3, r2
 8001b76:	e000      	b.n	8001b7a <constrain+0x42>
 8001b78:	687b      	ldr	r3, [r7, #4]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <plannerInit>:

/** Инициализация планироващика
 *
 */
void plannerInit(PLANNER_StructDef* planner)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
	planner->status = 0;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	planner->speedAxis = 0;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
	planner->shift = 0;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
	planner->readyF = true;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
	planner->changeSett = 0;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc8:	f001 f9e2 	bl	8002f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bcc:	f000 f882 	bl	8001cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd0:	f000 fb24 	bl	800221c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001bd4:	f000 f8e8 	bl	8001da8 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001bd8:	f000 f938 	bl	8001e4c <MX_CAN1_Init>
  MX_DAC_Init();
 8001bdc:	f000 f96a 	bl	8001eb4 <MX_DAC_Init>
  MX_I2C1_Init();
 8001be0:	f000 f99c 	bl	8001f1c <MX_I2C1_Init>
  MX_TIM13_Init();
 8001be4:	f000 fa4a 	bl	800207c <MX_TIM13_Init>
  MX_USART1_UART_Init();
 8001be8:	f000 fa96 	bl	8002118 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001bec:	f000 fae8 	bl	80021c0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8001bf0:	f000 f9c2 	bl	8001f78 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8001bf4:	f000 faba 	bl	800216c <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8001bf8:	f005 fecc 	bl	8007994 <MX_LWIP_Init>
  MX_TIM2_Init();
 8001bfc:	f000 f9f2 	bl	8001fe4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Инициализация таймер DWT для одного шага в библиотеке stepper.h */
  DWT_Init();
 8001c00:	f7ff fa58 	bl	80010b4 <DWT_Init>

  /* Инициализация указателей на функции HAL для работы библиотек stepper.h и driver.h */
  stepperFunctionsInit(function_pin_1);
 8001c04:	4b24      	ldr	r3, [pc, #144]	@ (8001c98 <main+0xd4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fa8f 	bl	800112c <stepperFunctionsInit>
  driverFunctionsInit(function_time_1, function_time_2, function_time_3, function_time_4);
 8001c0e:	4b23      	ldr	r3, [pc, #140]	@ (8001c9c <main+0xd8>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	4b23      	ldr	r3, [pc, #140]	@ (8001ca0 <main+0xdc>)
 8001c14:	6819      	ldr	r1, [r3, #0]
 8001c16:	4b23      	ldr	r3, [pc, #140]	@ (8001ca4 <main+0xe0>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ca8 <main+0xe4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f7ff fb87 	bl	8001330 <driverFunctionsInit>

  /* Инициализация шаговых моторов */
  stepperInit(&stepper1, &stepper1_pins);
 8001c22:	4922      	ldr	r1, [pc, #136]	@ (8001cac <main+0xe8>)
 8001c24:	4822      	ldr	r0, [pc, #136]	@ (8001cb0 <main+0xec>)
 8001c26:	f7ff fa91 	bl	800114c <stepperInit>
  stepperInit(&stepper2, &stepper2_pins);
 8001c2a:	4922      	ldr	r1, [pc, #136]	@ (8001cb4 <main+0xf0>)
 8001c2c:	4822      	ldr	r0, [pc, #136]	@ (8001cb8 <main+0xf4>)
 8001c2e:	f7ff fa8d 	bl	800114c <stepperInit>

  /* Инициализация драйверов шаговых моторов */
  driverInit(&driver1, &stepper1, &driver1_pins, 5000);
 8001c32:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001c36:	4a21      	ldr	r2, [pc, #132]	@ (8001cbc <main+0xf8>)
 8001c38:	491d      	ldr	r1, [pc, #116]	@ (8001cb0 <main+0xec>)
 8001c3a:	4821      	ldr	r0, [pc, #132]	@ (8001cc0 <main+0xfc>)
 8001c3c:	f7ff fb9a 	bl	8001374 <driverInit>
  driverInit(&driver2, &stepper2, &driver2_pins, 5000);
 8001c40:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001c44:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc4 <main+0x100>)
 8001c46:	491c      	ldr	r1, [pc, #112]	@ (8001cb8 <main+0xf4>)
 8001c48:	481f      	ldr	r0, [pc, #124]	@ (8001cc8 <main+0x104>)
 8001c4a:	f7ff fb93 	bl	8001374 <driverInit>

  /* Инициализация планировщика*/
  plannerInit(&planner);
 8001c4e:	481f      	ldr	r0, [pc, #124]	@ (8001ccc <main+0x108>)
 8001c50:	f7ff ff99 	bl	8001b86 <plannerInit>
  /* Добавить драйверы в планировщик */
//  addDriver(&planner, &driver1, 0);
//  addDriver(&planner, &driver2, 1);

  /* Инициализация UDP сокета */
  udpSocketInit();
 8001c54:	f7ff f968 	bl	8000f28 <udpSocketInit>

  /* Включение таймера TIM2 */
  startTimerTIM2();
 8001c58:	f000 fc2e 	bl	80024b8 <startTimerTIM2>

  /* Задание максимальной скорости и ускорения шаговых моторов */
  setAcceleration(&driver1, 1000);
 8001c5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c60:	4817      	ldr	r0, [pc, #92]	@ (8001cc0 <main+0xfc>)
 8001c62:	f7ff fe95 	bl	8001990 <setAcceleration>
  setMaxSpeed(&driver1, 5000);
 8001c66:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8001cd0 <main+0x10c>
 8001c6a:	4815      	ldr	r0, [pc, #84]	@ (8001cc0 <main+0xfc>)
 8001c6c:	f7ff fe40 	bl	80018f0 <setMaxSpeed>

  setAcceleration(&driver2, 1000);
 8001c70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c74:	4814      	ldr	r0, [pc, #80]	@ (8001cc8 <main+0x104>)
 8001c76:	f7ff fe8b 	bl	8001990 <setAcceleration>
  setMaxSpeed(&driver2, 5000);
 8001c7a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001cd0 <main+0x10c>
 8001c7e:	4812      	ldr	r0, [pc, #72]	@ (8001cc8 <main+0x104>)
 8001c80:	f7ff fe36 	bl	80018f0 <setMaxSpeed>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Основные функции управления драйверами */
	  tickDriver(&driver1);
 8001c84:	480e      	ldr	r0, [pc, #56]	@ (8001cc0 <main+0xfc>)
 8001c86:	f7ff fc03 	bl	8001490 <tickDriver>
	  tickDriver(&driver2);
 8001c8a:	480f      	ldr	r0, [pc, #60]	@ (8001cc8 <main+0x104>)
 8001c8c:	f7ff fc00 	bl	8001490 <tickDriver>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Ethernet */
	  MX_LWIP_Process();
 8001c90:	f005 ffc0 	bl	8007c14 <MX_LWIP_Process>
	  tickDriver(&driver1);
 8001c94:	bf00      	nop
 8001c96:	e7f5      	b.n	8001c84 <main+0xc0>
 8001c98:	20000004 	.word	0x20000004
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	2000000c 	.word	0x2000000c
 8001ca4:	20000010 	.word	0x20000010
 8001ca8:	20000014 	.word	0x20000014
 8001cac:	20000018 	.word	0x20000018
 8001cb0:	200008ec 	.word	0x200008ec
 8001cb4:	20000030 	.word	0x20000030
 8001cb8:	2000090c 	.word	0x2000090c
 8001cbc:	20000048 	.word	0x20000048
 8001cc0:	2000092c 	.word	0x2000092c
 8001cc4:	20000060 	.word	0x20000060
 8001cc8:	2000097c 	.word	0x2000097c
 8001ccc:	200009cc 	.word	0x200009cc
 8001cd0:	459c4000 	.word	0x459c4000

08001cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b094      	sub	sp, #80	@ 0x50
 8001cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cda:	f107 0320 	add.w	r3, r7, #32
 8001cde:	2230      	movs	r2, #48	@ 0x30
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f010 fe77 	bl	80129d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	4b28      	ldr	r3, [pc, #160]	@ (8001da0 <SystemClock_Config+0xcc>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	4a27      	ldr	r2, [pc, #156]	@ (8001da0 <SystemClock_Config+0xcc>)
 8001d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d08:	4b25      	ldr	r3, [pc, #148]	@ (8001da0 <SystemClock_Config+0xcc>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d14:	2300      	movs	r3, #0
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	4b22      	ldr	r3, [pc, #136]	@ (8001da4 <SystemClock_Config+0xd0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a21      	ldr	r2, [pc, #132]	@ (8001da4 <SystemClock_Config+0xd0>)
 8001d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b1f      	ldr	r3, [pc, #124]	@ (8001da4 <SystemClock_Config+0xd0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d30:	2301      	movs	r3, #1
 8001d32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d44:	2304      	movs	r3, #4
 8001d46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d48:	23a8      	movs	r3, #168	@ 0xa8
 8001d4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d50:	2307      	movs	r3, #7
 8001d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d54:	f107 0320 	add.w	r3, r7, #32
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fcf3 	bl	8005744 <HAL_RCC_OscConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d64:	f000 fc04 	bl	8002570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d68:	230f      	movs	r3, #15
 8001d6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d74:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	2105      	movs	r1, #5
 8001d86:	4618      	mov	r0, r3
 8001d88:	f003 ff54 	bl	8005c34 <HAL_RCC_ClockConfig>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d92:	f000 fbed 	bl	8002570 <Error_Handler>
  }
}
 8001d96:	bf00      	nop
 8001d98:	3750      	adds	r7, #80	@ 0x50
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40007000 	.word	0x40007000

08001da8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dae:	463b      	mov	r3, r7
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dba:	4b21      	ldr	r3, [pc, #132]	@ (8001e40 <MX_ADC1_Init+0x98>)
 8001dbc:	4a21      	ldr	r2, [pc, #132]	@ (8001e44 <MX_ADC1_Init+0x9c>)
 8001dbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e40 <MX_ADC1_Init+0x98>)
 8001dc2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <MX_ADC1_Init+0x98>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	@ (8001e40 <MX_ADC1_Init+0x98>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <MX_ADC1_Init+0x98>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dda:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <MX_ADC1_Init+0x98>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001de2:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <MX_ADC1_Init+0x98>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001de8:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <MX_ADC1_Init+0x98>)
 8001dea:	4a17      	ldr	r2, [pc, #92]	@ (8001e48 <MX_ADC1_Init+0xa0>)
 8001dec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <MX_ADC1_Init+0x98>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <MX_ADC1_Init+0x98>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <MX_ADC1_Init+0x98>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e02:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <MX_ADC1_Init+0x98>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e08:	480d      	ldr	r0, [pc, #52]	@ (8001e40 <MX_ADC1_Init+0x98>)
 8001e0a:	f001 f957 	bl	80030bc <HAL_ADC_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e14:	f000 fbac 	bl	8002570 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e24:	463b      	mov	r3, r7
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <MX_ADC1_Init+0x98>)
 8001e2a:	f001 f98b 	bl	8003144 <HAL_ADC_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e34:	f000 fb9c 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200001b8 	.word	0x200001b8
 8001e44:	40012000 	.word	0x40012000
 8001e48:	0f000001 	.word	0x0f000001

08001e4c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e50:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <MX_CAN1_Init+0x60>)
 8001e52:	4a17      	ldr	r2, [pc, #92]	@ (8001eb0 <MX_CAN1_Init+0x64>)
 8001e54:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001e56:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <MX_CAN1_Init+0x60>)
 8001e58:	2210      	movs	r2, #16
 8001e5a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <MX_CAN1_Init+0x60>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e62:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <MX_CAN1_Init+0x60>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001e68:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <MX_CAN1_Init+0x60>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <MX_CAN1_Init+0x60>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e74:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <MX_CAN1_Init+0x60>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <MX_CAN1_Init+0x60>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <MX_CAN1_Init+0x60>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001e86:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <MX_CAN1_Init+0x60>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <MX_CAN1_Init+0x60>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <MX_CAN1_Init+0x60>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e98:	4804      	ldr	r0, [pc, #16]	@ (8001eac <MX_CAN1_Init+0x60>)
 8001e9a:	f001 fb71 	bl	8003580 <HAL_CAN_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001ea4:	f000 fb64 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000200 	.word	0x20000200
 8001eb0:	40006400 	.word	0x40006400

08001eb4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001eba:	463b      	mov	r3, r7
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001ec2:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <MX_DAC_Init+0x60>)
 8001ec4:	4a14      	ldr	r2, [pc, #80]	@ (8001f18 <MX_DAC_Init+0x64>)
 8001ec6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001ec8:	4812      	ldr	r0, [pc, #72]	@ (8001f14 <MX_DAC_Init+0x60>)
 8001eca:	f001 fd66 	bl	800399a <HAL_DAC_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001ed4:	f000 fb4c 	bl	8002570 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	480b      	ldr	r0, [pc, #44]	@ (8001f14 <MX_DAC_Init+0x60>)
 8001ee8:	f001 fd79 	bl	80039de <HAL_DAC_ConfigChannel>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001ef2:	f000 fb3d 	bl	8002570 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001ef6:	463b      	mov	r3, r7
 8001ef8:	2210      	movs	r2, #16
 8001efa:	4619      	mov	r1, r3
 8001efc:	4805      	ldr	r0, [pc, #20]	@ (8001f14 <MX_DAC_Init+0x60>)
 8001efe:	f001 fd6e 	bl	80039de <HAL_DAC_ConfigChannel>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001f08:	f000 fb32 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000228 	.word	0x20000228
 8001f18:	40007400 	.word	0x40007400

08001f1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f20:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f22:	4a13      	ldr	r2, [pc, #76]	@ (8001f70 <MX_I2C1_Init+0x54>)
 8001f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f28:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <MX_I2C1_Init+0x58>)
 8001f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f40:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f52:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f58:	4804      	ldr	r0, [pc, #16]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f5a:	f003 f99f 	bl	800529c <HAL_I2C_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f64:	f000 fb04 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	2000023c 	.word	0x2000023c
 8001f70:	40005400 	.word	0x40005400
 8001f74:	000186a0 	.word	0x000186a0

08001f78 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001f7c:	4b17      	ldr	r3, [pc, #92]	@ (8001fdc <MX_SPI3_Init+0x64>)
 8001f7e:	4a18      	ldr	r2, [pc, #96]	@ (8001fe0 <MX_SPI3_Init+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f82:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <MX_SPI3_Init+0x64>)
 8001f84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f88:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <MX_SPI3_Init+0x64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f90:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <MX_SPI3_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <MX_SPI3_Init+0x64>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <MX_SPI3_Init+0x64>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <MX_SPI3_Init+0x64>)
 8001fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fa8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001faa:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <MX_SPI3_Init+0x64>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fdc <MX_SPI3_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb6:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <MX_SPI3_Init+0x64>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fbc:	4b07      	ldr	r3, [pc, #28]	@ (8001fdc <MX_SPI3_Init+0x64>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <MX_SPI3_Init+0x64>)
 8001fc4:	220a      	movs	r2, #10
 8001fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001fc8:	4804      	ldr	r0, [pc, #16]	@ (8001fdc <MX_SPI3_Init+0x64>)
 8001fca:	f004 f853 	bl	8006074 <HAL_SPI_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001fd4:	f000 facc 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000290 	.word	0x20000290
 8001fe0:	40003c00 	.word	0x40003c00

08001fe4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002000:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <MX_TIM2_Init+0x94>)
 8002002:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002006:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002008:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <MX_TIM2_Init+0x94>)
 800200a:	2253      	movs	r2, #83	@ 0x53
 800200c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200e:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <MX_TIM2_Init+0x94>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002014:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <MX_TIM2_Init+0x94>)
 8002016:	f04f 32ff 	mov.w	r2, #4294967295
 800201a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201c:	4b16      	ldr	r3, [pc, #88]	@ (8002078 <MX_TIM2_Init+0x94>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <MX_TIM2_Init+0x94>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002028:	4813      	ldr	r0, [pc, #76]	@ (8002078 <MX_TIM2_Init+0x94>)
 800202a:	f004 f8ac 	bl	8006186 <HAL_TIM_Base_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002034:	f000 fa9c 	bl	8002570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002038:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800203c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800203e:	f107 0308 	add.w	r3, r7, #8
 8002042:	4619      	mov	r1, r3
 8002044:	480c      	ldr	r0, [pc, #48]	@ (8002078 <MX_TIM2_Init+0x94>)
 8002046:	f004 faa7 	bl	8006598 <HAL_TIM_ConfigClockSource>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002050:	f000 fa8e 	bl	8002570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800205c:	463b      	mov	r3, r7
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_TIM2_Init+0x94>)
 8002062:	f004 fe57 	bl	8006d14 <HAL_TIMEx_MasterConfigSynchronization>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800206c:	f000 fa80 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200002e8 	.word	0x200002e8

0800207c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
 8002090:	615a      	str	r2, [r3, #20]
 8002092:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002094:	4b1e      	ldr	r3, [pc, #120]	@ (8002110 <MX_TIM13_Init+0x94>)
 8002096:	4a1f      	ldr	r2, [pc, #124]	@ (8002114 <MX_TIM13_Init+0x98>)
 8002098:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800209a:	4b1d      	ldr	r3, [pc, #116]	@ (8002110 <MX_TIM13_Init+0x94>)
 800209c:	2200      	movs	r2, #0
 800209e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <MX_TIM13_Init+0x94>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80020a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002110 <MX_TIM13_Init+0x94>)
 80020a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020ac:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ae:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <MX_TIM13_Init+0x94>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b4:	4b16      	ldr	r3, [pc, #88]	@ (8002110 <MX_TIM13_Init+0x94>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80020ba:	4815      	ldr	r0, [pc, #84]	@ (8002110 <MX_TIM13_Init+0x94>)
 80020bc:	f004 f863 	bl	8006186 <HAL_TIM_Base_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80020c6:	f000 fa53 	bl	8002570 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80020ca:	4811      	ldr	r0, [pc, #68]	@ (8002110 <MX_TIM13_Init+0x94>)
 80020cc:	f004 f949 	bl	8006362 <HAL_TIM_PWM_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80020d6:	f000 fa4b 	bl	8002570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020da:	2360      	movs	r3, #96	@ 0x60
 80020dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2200      	movs	r2, #0
 80020ee:	4619      	mov	r1, r3
 80020f0:	4807      	ldr	r0, [pc, #28]	@ (8002110 <MX_TIM13_Init+0x94>)
 80020f2:	f004 f98f 	bl	8006414 <HAL_TIM_PWM_ConfigChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80020fc:	f000 fa38 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002100:	4803      	ldr	r0, [pc, #12]	@ (8002110 <MX_TIM13_Init+0x94>)
 8002102:	f000 fbf9 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 8002106:	bf00      	nop
 8002108:	3720      	adds	r7, #32
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000330 	.word	0x20000330
 8002114:	40001c00 	.word	0x40001c00

08002118 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <MX_USART1_UART_Init+0x4c>)
 800211e:	4a12      	ldr	r2, [pc, #72]	@ (8002168 <MX_USART1_UART_Init+0x50>)
 8002120:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <MX_USART1_UART_Init+0x4c>)
 8002124:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002128:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <MX_USART1_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <MX_USART1_UART_Init+0x4c>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002136:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <MX_USART1_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <MX_USART1_UART_Init+0x4c>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <MX_USART1_UART_Init+0x4c>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <MX_USART1_UART_Init+0x4c>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800214e:	4805      	ldr	r0, [pc, #20]	@ (8002164 <MX_USART1_UART_Init+0x4c>)
 8002150:	f004 fe5c 	bl	8006e0c <HAL_UART_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800215a:	f000 fa09 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000378 	.word	0x20000378
 8002168:	40011000 	.word	0x40011000

0800216c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002170:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <MX_USART3_UART_Init+0x4c>)
 8002172:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <MX_USART3_UART_Init+0x50>)
 8002174:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <MX_USART3_UART_Init+0x4c>)
 8002178:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800217c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b0e      	ldr	r3, [pc, #56]	@ (80021b8 <MX_USART3_UART_Init+0x4c>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002184:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <MX_USART3_UART_Init+0x4c>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800218a:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <MX_USART3_UART_Init+0x4c>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002190:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <MX_USART3_UART_Init+0x4c>)
 8002192:	220c      	movs	r2, #12
 8002194:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <MX_USART3_UART_Init+0x4c>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <MX_USART3_UART_Init+0x4c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021a2:	4805      	ldr	r0, [pc, #20]	@ (80021b8 <MX_USART3_UART_Init+0x4c>)
 80021a4:	f004 fe32 	bl	8006e0c <HAL_UART_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021ae:	f000 f9df 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200003c0 	.word	0x200003c0
 80021bc:	40004800 	.word	0x40004800

080021c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80021c4:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80021ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ce:	2204      	movs	r2, #4
 80021d0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021d4:	2202      	movs	r2, #2
 80021d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021da:	2200      	movs	r2, #0
 80021dc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021e0:	2202      	movs	r2, #2
 80021e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021f0:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80021f6:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021fe:	2200      	movs	r2, #0
 8002200:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002202:	4805      	ldr	r0, [pc, #20]	@ (8002218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002204:	f003 f98e 	bl	8005524 <HAL_PCD_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800220e:	f000 f9af 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000408 	.word	0x20000408

0800221c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08c      	sub	sp, #48	@ 0x30
 8002220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
 8002230:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	4b9a      	ldr	r3, [pc, #616]	@ (80024a0 <MX_GPIO_Init+0x284>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	4a99      	ldr	r2, [pc, #612]	@ (80024a0 <MX_GPIO_Init+0x284>)
 800223c:	f043 0310 	orr.w	r3, r3, #16
 8002240:	6313      	str	r3, [r2, #48]	@ 0x30
 8002242:	4b97      	ldr	r3, [pc, #604]	@ (80024a0 <MX_GPIO_Init+0x284>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	4b93      	ldr	r3, [pc, #588]	@ (80024a0 <MX_GPIO_Init+0x284>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	4a92      	ldr	r2, [pc, #584]	@ (80024a0 <MX_GPIO_Init+0x284>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6313      	str	r3, [r2, #48]	@ 0x30
 800225e:	4b90      	ldr	r3, [pc, #576]	@ (80024a0 <MX_GPIO_Init+0x284>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b8c      	ldr	r3, [pc, #560]	@ (80024a0 <MX_GPIO_Init+0x284>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4a8b      	ldr	r2, [pc, #556]	@ (80024a0 <MX_GPIO_Init+0x284>)
 8002274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4b89      	ldr	r3, [pc, #548]	@ (80024a0 <MX_GPIO_Init+0x284>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b85      	ldr	r3, [pc, #532]	@ (80024a0 <MX_GPIO_Init+0x284>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	4a84      	ldr	r2, [pc, #528]	@ (80024a0 <MX_GPIO_Init+0x284>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6313      	str	r3, [r2, #48]	@ 0x30
 8002296:	4b82      	ldr	r3, [pc, #520]	@ (80024a0 <MX_GPIO_Init+0x284>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	4b7e      	ldr	r3, [pc, #504]	@ (80024a0 <MX_GPIO_Init+0x284>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4a7d      	ldr	r2, [pc, #500]	@ (80024a0 <MX_GPIO_Init+0x284>)
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4b7b      	ldr	r3, [pc, #492]	@ (80024a0 <MX_GPIO_Init+0x284>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	4b77      	ldr	r3, [pc, #476]	@ (80024a0 <MX_GPIO_Init+0x284>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	4a76      	ldr	r2, [pc, #472]	@ (80024a0 <MX_GPIO_Init+0x284>)
 80022c8:	f043 0308 	orr.w	r3, r3, #8
 80022cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ce:	4b74      	ldr	r3, [pc, #464]	@ (80024a0 <MX_GPIO_Init+0x284>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ZERO_POS2_Pin|DIR1_Pin|DIR2_Pin|STEP1_Pin
 80022da:	2200      	movs	r2, #0
 80022dc:	f64f 7188 	movw	r1, #65416	@ 0xff88
 80022e0:	4870      	ldr	r0, [pc, #448]	@ (80024a4 <MX_GPIO_Init+0x288>)
 80022e2:	f002 ffc1 	bl	8005268 <HAL_GPIO_WritePin>
                          |DIR3_Pin|STEP2_Pin|DIR4_Pin|STEP3_Pin
                          |STEP4_Pin|DIR5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ACK_LINE0_Pin|ACK_LINE1_Pin|ACK_LINE2_Pin|STEP6_Pin, GPIO_PIN_RESET);
 80022e6:	2200      	movs	r2, #0
 80022e8:	f24e 0180 	movw	r1, #57472	@ 0xe080
 80022ec:	486e      	ldr	r0, [pc, #440]	@ (80024a8 <MX_GPIO_Init+0x28c>)
 80022ee:	f002 ffbb 	bl	8005268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP7_Pin|STEP8_Pin|DIR6_Pin|DIR7_Pin
 80022f2:	2200      	movs	r2, #0
 80022f4:	f24c 7113 	movw	r1, #50963	@ 0xc713
 80022f8:	486c      	ldr	r0, [pc, #432]	@ (80024ac <MX_GPIO_Init+0x290>)
 80022fa:	f002 ffb5 	bl	8005268 <HAL_GPIO_WritePin>
                          |DIR8_Pin|STEP5_Pin|SPI3_NSS1_Pin|SPI3_NSS0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATE_Pin|SPI3_NSS2_Pin, GPIO_PIN_RESET);
 80022fe:	2200      	movs	r2, #0
 8002300:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8002304:	486a      	ldr	r0, [pc, #424]	@ (80024b0 <MX_GPIO_Init+0x294>)
 8002306:	f002 ffaf 	bl	8005268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(READY_GPIO_Port, READY_Pin, GPIO_PIN_RESET);
 800230a:	2200      	movs	r2, #0
 800230c:	2108      	movs	r1, #8
 800230e:	4869      	ldr	r0, [pc, #420]	@ (80024b4 <MX_GPIO_Init+0x298>)
 8002310:	f002 ffaa 	bl	8005268 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ZERO_POS3_Pin ZERO_POS1_Pin ZERO_POS4_Pin */
  GPIO_InitStruct.Pin = ZERO_POS3_Pin|ZERO_POS1_Pin|ZERO_POS4_Pin;
 8002314:	2345      	movs	r3, #69	@ 0x45
 8002316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002320:	f107 031c 	add.w	r3, r7, #28
 8002324:	4619      	mov	r1, r3
 8002326:	485f      	ldr	r0, [pc, #380]	@ (80024a4 <MX_GPIO_Init+0x288>)
 8002328:	f002 fe02 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZERO_POS2_Pin */
  GPIO_InitStruct.Pin = ZERO_POS2_Pin;
 800232c:	2308      	movs	r3, #8
 800232e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002330:	2301      	movs	r3, #1
 8002332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ZERO_POS2_GPIO_Port, &GPIO_InitStruct);
 800233c:	f107 031c 	add.w	r3, r7, #28
 8002340:	4619      	mov	r1, r3
 8002342:	4858      	ldr	r0, [pc, #352]	@ (80024a4 <MX_GPIO_Init+0x288>)
 8002344:	f002 fdf4 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_4_LS3_P_Pin EXTI_5_LS3_N_Pin EXTI_1_LS1_N_Pin */
  GPIO_InitStruct.Pin = EXTI_4_LS3_P_Pin|EXTI_5_LS3_N_Pin|EXTI_1_LS1_N_Pin;
 8002348:	2332      	movs	r3, #50	@ 0x32
 800234a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800234c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	4619      	mov	r1, r3
 800235c:	4851      	ldr	r0, [pc, #324]	@ (80024a4 <MX_GPIO_Init+0x288>)
 800235e:	f002 fde7 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACK_LINE0_Pin ACK_LINE1_Pin ACK_LINE2_Pin */
  GPIO_InitStruct.Pin = ACK_LINE0_Pin|ACK_LINE1_Pin|ACK_LINE2_Pin;
 8002362:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	4619      	mov	r1, r3
 800237a:	484b      	ldr	r0, [pc, #300]	@ (80024a8 <MX_GPIO_Init+0x28c>)
 800237c:	f002 fdd8 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_0_LS1_P_Pin EXTI_2_LS2_P_Pin EXTI_3_LS2_N_Pin EXTI_6_LS4_P_Pin
                           EXTI_8_LS5_P_Pin EXTI_9_LS5_N_Pin */
  GPIO_InitStruct.Pin = EXTI_0_LS1_P_Pin|EXTI_2_LS2_P_Pin|EXTI_3_LS2_N_Pin|EXTI_6_LS4_P_Pin
 8002380:	f240 334d 	movw	r3, #845	@ 0x34d
 8002384:	61fb      	str	r3, [r7, #28]
                          |EXTI_8_LS5_P_Pin|EXTI_9_LS5_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002386:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800238a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002390:	f107 031c 	add.w	r3, r7, #28
 8002394:	4619      	mov	r1, r3
 8002396:	4844      	ldr	r0, [pc, #272]	@ (80024a8 <MX_GPIO_Init+0x28c>)
 8002398:	f002 fdca 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP7_Pin STEP8_Pin DIR6_Pin DIR7_Pin
                           DIR8_Pin STEP5_Pin */
  GPIO_InitStruct.Pin = STEP7_Pin|STEP8_Pin|DIR6_Pin|DIR7_Pin
 800239c:	f24c 4313 	movw	r3, #50195	@ 0xc413
 80023a0:	61fb      	str	r3, [r7, #28]
                          |DIR8_Pin|STEP5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a2:	2301      	movs	r3, #1
 80023a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ae:	f107 031c 	add.w	r3, r7, #28
 80023b2:	4619      	mov	r1, r3
 80023b4:	483d      	ldr	r0, [pc, #244]	@ (80024ac <MX_GPIO_Init+0x290>)
 80023b6:	f002 fdbb 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_Pin DIR2_Pin STEP1_Pin DIR3_Pin
                           STEP2_Pin DIR4_Pin STEP3_Pin STEP4_Pin
                           DIR5_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|STEP1_Pin|DIR3_Pin
 80023ba:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80023be:	61fb      	str	r3, [r7, #28]
                          |STEP2_Pin|DIR4_Pin|STEP3_Pin|STEP4_Pin
                          |DIR5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c0:	2301      	movs	r3, #1
 80023c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c8:	2303      	movs	r3, #3
 80023ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023cc:	f107 031c 	add.w	r3, r7, #28
 80023d0:	4619      	mov	r1, r3
 80023d2:	4834      	ldr	r0, [pc, #208]	@ (80024a4 <MX_GPIO_Init+0x288>)
 80023d4:	f002 fdac 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_10_LS6_P_Pin EXTI_11_LS6_N_Pin EXTI_12_LS7_P_Pin EXTI_13_LS7_N_Pin
                           EXTI_14_LS8_P_Pin EXTI_15_LS8_N_Pin EXTI_7_LS4_N_Pin */
  GPIO_InitStruct.Pin = EXTI_10_LS6_P_Pin|EXTI_11_LS6_N_Pin|EXTI_12_LS7_P_Pin|EXTI_13_LS7_N_Pin
 80023d8:	f64f 4380 	movw	r3, #64640	@ 0xfc80
 80023dc:	61fb      	str	r3, [r7, #28]
                          |EXTI_14_LS8_P_Pin|EXTI_15_LS8_N_Pin|EXTI_7_LS4_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023e8:	f107 031c 	add.w	r3, r7, #28
 80023ec:	4619      	mov	r1, r3
 80023ee:	4831      	ldr	r0, [pc, #196]	@ (80024b4 <MX_GPIO_Init+0x298>)
 80023f0:	f002 fd9e 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP6_Pin */
  GPIO_InitStruct.Pin = STEP6_Pin;
 80023f4:	2380      	movs	r3, #128	@ 0x80
 80023f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f8:	2301      	movs	r3, #1
 80023fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002400:	2303      	movs	r3, #3
 8002402:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP6_GPIO_Port, &GPIO_InitStruct);
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	4619      	mov	r1, r3
 800240a:	4827      	ldr	r0, [pc, #156]	@ (80024a8 <MX_GPIO_Init+0x28c>)
 800240c:	f002 fd90 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATE_Pin SPI3_NSS2_Pin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|SPI3_NSS2_Pin;
 8002410:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8002414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002416:	2301      	movs	r3, #1
 8002418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2300      	movs	r3, #0
 8002420:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	f107 031c 	add.w	r3, r7, #28
 8002426:	4619      	mov	r1, r3
 8002428:	4821      	ldr	r0, [pc, #132]	@ (80024b0 <MX_GPIO_Init+0x294>)
 800242a:	f002 fd81 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : STARTUP_OPTION1_Pin ZERO_POS8_Pin ZERO_POS7_Pin ZERO_POS6_Pin */
  GPIO_InitStruct.Pin = STARTUP_OPTION1_Pin|ZERO_POS8_Pin|ZERO_POS7_Pin|ZERO_POS6_Pin;
 800242e:	2374      	movs	r3, #116	@ 0x74
 8002430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800243a:	f107 031c 	add.w	r3, r7, #28
 800243e:	4619      	mov	r1, r3
 8002440:	481c      	ldr	r0, [pc, #112]	@ (80024b4 <MX_GPIO_Init+0x298>)
 8002442:	f002 fd75 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_Pin */
  GPIO_InitStruct.Pin = READY_Pin;
 8002446:	2308      	movs	r3, #8
 8002448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244a:	2301      	movs	r3, #1
 800244c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(READY_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 031c 	add.w	r3, r7, #28
 800245a:	4619      	mov	r1, r3
 800245c:	4815      	ldr	r0, [pc, #84]	@ (80024b4 <MX_GPIO_Init+0x298>)
 800245e:	f002 fd67 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZERO_POS5_Pin */
  GPIO_InitStruct.Pin = ZERO_POS5_Pin;
 8002462:	2320      	movs	r3, #32
 8002464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ZERO_POS5_GPIO_Port, &GPIO_InitStruct);
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	4619      	mov	r1, r3
 8002474:	480d      	ldr	r0, [pc, #52]	@ (80024ac <MX_GPIO_Init+0x290>)
 8002476:	f002 fd5b 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_NSS1_Pin SPI3_NSS0_Pin */
  GPIO_InitStruct.Pin = SPI3_NSS1_Pin|SPI3_NSS0_Pin;
 800247a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800247e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002480:	2301      	movs	r3, #1
 8002482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2300      	movs	r3, #0
 800248a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 031c 	add.w	r3, r7, #28
 8002490:	4619      	mov	r1, r3
 8002492:	4806      	ldr	r0, [pc, #24]	@ (80024ac <MX_GPIO_Init+0x290>)
 8002494:	f002 fd4c 	bl	8004f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002498:	bf00      	nop
 800249a:	3730      	adds	r7, #48	@ 0x30
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40020800 	.word	0x40020800
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40020c00 	.word	0x40020c00

080024b8 <startTimerTIM2>:

/** Запуск таймера для отсчета времени в микросекундах
 * 	Используется таймер TIM2
 */
void startTimerTIM2(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80024bc:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <startTimerTIM2+0x10>)
 80024be:	f003 feb1 	bl	8006224 <HAL_TIM_Base_Start_IT>
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200002e8 	.word	0x200002e8

080024cc <stopTimerTIM2>:

/** Остановка таймера для отсчета времени в микросекундах
 * 	Используется таймер TIM2
 */
void stopTimerTIM2(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <stopTimerTIM2+0x10>)
 80024d2:	f003 ff17 	bl	8006304 <HAL_TIM_Base_Stop_IT>
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200002e8 	.word	0x200002e8

080024e0 <resetTimerTIM2>:

/** Функция сброса счетчика таймера в 0
 * 	Используется таймер TIM2
 */
void resetTimerTIM2(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 80024e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024e8:	2200      	movs	r2, #0
 80024ea:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <getMicrosecondsTIM2>:
 * Используется таймер TIM2
 * Частота работы таймера 1МГц
 * 1 тик таймера = 1 мкс
 */
uint32_t getMicrosecondsTIM2(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0
	return TIM2->CNT;
 80024fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <udpReceiveHandler>:

/**
 *
 */
void udpReceiveHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b0c2      	sub	sp, #264	@ 0x108
 8002510:	af00      	add	r7, sp, #0
	char data[256];

	int target_pos = strtol(rxBuf, NULL, 10);
 8002512:	220a      	movs	r2, #10
 8002514:	2100      	movs	r1, #0
 8002516:	4812      	ldr	r0, [pc, #72]	@ (8002560 <udpReceiveHandler+0x54>)
 8002518:	f010 f8f0 	bl	80126fc <strtol>
 800251c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	memset(rxBuf, 0, 128);
 8002520:	2280      	movs	r2, #128	@ 0x80
 8002522:	2100      	movs	r1, #0
 8002524:	480e      	ldr	r0, [pc, #56]	@ (8002560 <udpReceiveHandler+0x54>)
 8002526:	f010 fa56 	bl	80129d6 <memset>

	setTarget(&driver1, target_pos);
 800252a:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 800252e:	480d      	ldr	r0, [pc, #52]	@ (8002564 <udpReceiveHandler+0x58>)
 8002530:	f7ff f992 	bl	8001858 <setTarget>
	setTarget(&driver2, target_pos);
 8002534:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8002538:	480b      	ldr	r0, [pc, #44]	@ (8002568 <udpReceiveHandler+0x5c>)
 800253a:	f7ff f98d 	bl	8001858 <setTarget>

	sprintf(data, "target = %d;\n", target_pos);
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8002544:	4909      	ldr	r1, [pc, #36]	@ (800256c <udpReceiveHandler+0x60>)
 8002546:	4618      	mov	r0, r3
 8002548:	f010 f9b6 	bl	80128b8 <siprintf>
	udpClientSend(data);
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fd6e 	bl	8001030 <udpClientSend>
}
 8002554:	bf00      	nop
 8002556:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000120 	.word	0x20000120
 8002564:	2000092c 	.word	0x2000092c
 8002568:	2000097c 	.word	0x2000097c
 800256c:	08013b48 	.word	0x08013b48

08002570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002574:	b672      	cpsid	i
}
 8002576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <Error_Handler+0x8>

0800257c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <HAL_MspInit+0x4c>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258a:	4a0f      	ldr	r2, [pc, #60]	@ (80025c8 <HAL_MspInit+0x4c>)
 800258c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002590:	6453      	str	r3, [r2, #68]	@ 0x44
 8002592:	4b0d      	ldr	r3, [pc, #52]	@ (80025c8 <HAL_MspInit+0x4c>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <HAL_MspInit+0x4c>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	4a08      	ldr	r2, [pc, #32]	@ (80025c8 <HAL_MspInit+0x4c>)
 80025a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_MspInit+0x4c>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800

080025cc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	@ 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a17      	ldr	r2, [pc, #92]	@ (8002648 <HAL_ADC_MspInit+0x7c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d127      	bne.n	800263e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	4b16      	ldr	r3, [pc, #88]	@ (800264c <HAL_ADC_MspInit+0x80>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f6:	4a15      	ldr	r2, [pc, #84]	@ (800264c <HAL_ADC_MspInit+0x80>)
 80025f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025fe:	4b13      	ldr	r3, [pc, #76]	@ (800264c <HAL_ADC_MspInit+0x80>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <HAL_ADC_MspInit+0x80>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	4a0e      	ldr	r2, [pc, #56]	@ (800264c <HAL_ADC_MspInit+0x80>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6313      	str	r3, [r2, #48]	@ 0x30
 800261a:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <HAL_ADC_MspInit+0x80>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002626:	2309      	movs	r3, #9
 8002628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800262a:	2303      	movs	r3, #3
 800262c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	4805      	ldr	r0, [pc, #20]	@ (8002650 <HAL_ADC_MspInit+0x84>)
 800263a:	f002 fc79 	bl	8004f30 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800263e:	bf00      	nop
 8002640:	3728      	adds	r7, #40	@ 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40012000 	.word	0x40012000
 800264c:	40023800 	.word	0x40023800
 8002650:	40020000 	.word	0x40020000

08002654 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	@ 0x28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a19      	ldr	r2, [pc, #100]	@ (80026d8 <HAL_CAN_MspInit+0x84>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d12b      	bne.n	80026ce <HAL_CAN_MspInit+0x7a>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	4b18      	ldr	r3, [pc, #96]	@ (80026dc <HAL_CAN_MspInit+0x88>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	4a17      	ldr	r2, [pc, #92]	@ (80026dc <HAL_CAN_MspInit+0x88>)
 8002680:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002684:	6413      	str	r3, [r2, #64]	@ 0x40
 8002686:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <HAL_CAN_MspInit+0x88>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <HAL_CAN_MspInit+0x88>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	4a10      	ldr	r2, [pc, #64]	@ (80026dc <HAL_CAN_MspInit+0x88>)
 800269c:	f043 0308 	orr.w	r3, r3, #8
 80026a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a2:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <HAL_CAN_MspInit+0x88>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026ae:	2303      	movs	r3, #3
 80026b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ba:	2303      	movs	r3, #3
 80026bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80026be:	2309      	movs	r3, #9
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4619      	mov	r1, r3
 80026c8:	4805      	ldr	r0, [pc, #20]	@ (80026e0 <HAL_CAN_MspInit+0x8c>)
 80026ca:	f002 fc31 	bl	8004f30 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80026ce:	bf00      	nop
 80026d0:	3728      	adds	r7, #40	@ 0x28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40006400 	.word	0x40006400
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40020c00 	.word	0x40020c00

080026e4 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	@ 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a17      	ldr	r2, [pc, #92]	@ (8002760 <HAL_DAC_MspInit+0x7c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d127      	bne.n	8002756 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	4b16      	ldr	r3, [pc, #88]	@ (8002764 <HAL_DAC_MspInit+0x80>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	4a15      	ldr	r2, [pc, #84]	@ (8002764 <HAL_DAC_MspInit+0x80>)
 8002710:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002714:	6413      	str	r3, [r2, #64]	@ 0x40
 8002716:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <HAL_DAC_MspInit+0x80>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b0f      	ldr	r3, [pc, #60]	@ (8002764 <HAL_DAC_MspInit+0x80>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	4a0e      	ldr	r2, [pc, #56]	@ (8002764 <HAL_DAC_MspInit+0x80>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6313      	str	r3, [r2, #48]	@ 0x30
 8002732:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <HAL_DAC_MspInit+0x80>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800273e:	2330      	movs	r3, #48	@ 0x30
 8002740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002742:	2303      	movs	r3, #3
 8002744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4619      	mov	r1, r3
 8002750:	4805      	ldr	r0, [pc, #20]	@ (8002768 <HAL_DAC_MspInit+0x84>)
 8002752:	f002 fbed 	bl	8004f30 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8002756:	bf00      	nop
 8002758:	3728      	adds	r7, #40	@ 0x28
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40007400 	.word	0x40007400
 8002764:	40023800 	.word	0x40023800
 8002768:	40020000 	.word	0x40020000

0800276c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	@ 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a19      	ldr	r2, [pc, #100]	@ (80027f0 <HAL_I2C_MspInit+0x84>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d12b      	bne.n	80027e6 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	4b18      	ldr	r3, [pc, #96]	@ (80027f4 <HAL_I2C_MspInit+0x88>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	4a17      	ldr	r2, [pc, #92]	@ (80027f4 <HAL_I2C_MspInit+0x88>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	6313      	str	r3, [r2, #48]	@ 0x30
 800279e:	4b15      	ldr	r3, [pc, #84]	@ (80027f4 <HAL_I2C_MspInit+0x88>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027aa:	23c0      	movs	r3, #192	@ 0xc0
 80027ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ae:	2312      	movs	r3, #18
 80027b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b6:	2303      	movs	r3, #3
 80027b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027ba:	2304      	movs	r3, #4
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4619      	mov	r1, r3
 80027c4:	480c      	ldr	r0, [pc, #48]	@ (80027f8 <HAL_I2C_MspInit+0x8c>)
 80027c6:	f002 fbb3 	bl	8004f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <HAL_I2C_MspInit+0x88>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	4a08      	ldr	r2, [pc, #32]	@ (80027f4 <HAL_I2C_MspInit+0x88>)
 80027d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027da:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_I2C_MspInit+0x88>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80027e6:	bf00      	nop
 80027e8:	3728      	adds	r7, #40	@ 0x28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40005400 	.word	0x40005400
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40020400 	.word	0x40020400

080027fc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	@ 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a19      	ldr	r2, [pc, #100]	@ (8002880 <HAL_SPI_MspInit+0x84>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d12c      	bne.n	8002878 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <HAL_SPI_MspInit+0x88>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	4a17      	ldr	r2, [pc, #92]	@ (8002884 <HAL_SPI_MspInit+0x88>)
 8002828:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800282c:	6413      	str	r3, [r2, #64]	@ 0x40
 800282e:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <HAL_SPI_MspInit+0x88>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <HAL_SPI_MspInit+0x88>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	4a10      	ldr	r2, [pc, #64]	@ (8002884 <HAL_SPI_MspInit+0x88>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6313      	str	r3, [r2, #48]	@ 0x30
 800284a:	4b0e      	ldr	r3, [pc, #56]	@ (8002884 <HAL_SPI_MspInit+0x88>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002856:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800285a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002864:	2303      	movs	r3, #3
 8002866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002868:	2306      	movs	r3, #6
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	4619      	mov	r1, r3
 8002872:	4805      	ldr	r0, [pc, #20]	@ (8002888 <HAL_SPI_MspInit+0x8c>)
 8002874:	f002 fb5c 	bl	8004f30 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002878:	bf00      	nop
 800287a:	3728      	adds	r7, #40	@ 0x28
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40003c00 	.word	0x40003c00
 8002884:	40023800 	.word	0x40023800
 8002888:	40020800 	.word	0x40020800

0800288c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800289c:	d10e      	bne.n	80028bc <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	4b13      	ldr	r3, [pc, #76]	@ (80028f0 <HAL_TIM_Base_MspInit+0x64>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	4a12      	ldr	r2, [pc, #72]	@ (80028f0 <HAL_TIM_Base_MspInit+0x64>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ae:	4b10      	ldr	r3, [pc, #64]	@ (80028f0 <HAL_TIM_Base_MspInit+0x64>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 80028ba:	e012      	b.n	80028e2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM13)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0c      	ldr	r2, [pc, #48]	@ (80028f4 <HAL_TIM_Base_MspInit+0x68>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10d      	bne.n	80028e2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <HAL_TIM_Base_MspInit+0x64>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	4a08      	ldr	r2, [pc, #32]	@ (80028f0 <HAL_TIM_Base_MspInit+0x64>)
 80028d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d6:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_TIM_Base_MspInit+0x64>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40001c00 	.word	0x40001c00

080028f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a12      	ldr	r2, [pc, #72]	@ (8002960 <HAL_TIM_MspPostInit+0x68>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d11d      	bne.n	8002956 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM13_MspPostInit 0 */

    /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <HAL_TIM_MspPostInit+0x6c>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	4a10      	ldr	r2, [pc, #64]	@ (8002964 <HAL_TIM_MspPostInit+0x6c>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6313      	str	r3, [r2, #48]	@ 0x30
 800292a:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <HAL_TIM_MspPostInit+0x6c>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GATE_LASER_TIM13_CH1_Pin;
 8002936:	2340      	movs	r3, #64	@ 0x40
 8002938:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002946:	2309      	movs	r3, #9
 8002948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GATE_LASER_TIM13_CH1_GPIO_Port, &GPIO_InitStruct);
 800294a:	f107 030c 	add.w	r3, r7, #12
 800294e:	4619      	mov	r1, r3
 8002950:	4805      	ldr	r0, [pc, #20]	@ (8002968 <HAL_TIM_MspPostInit+0x70>)
 8002952:	f002 faed 	bl	8004f30 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002956:	bf00      	nop
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40001c00 	.word	0x40001c00
 8002964:	40023800 	.word	0x40023800
 8002968:	40020000 	.word	0x40020000

0800296c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	@ 0x30
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a33      	ldr	r2, [pc, #204]	@ (8002a58 <HAL_UART_MspInit+0xec>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d12d      	bne.n	80029ea <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	4b32      	ldr	r3, [pc, #200]	@ (8002a5c <HAL_UART_MspInit+0xf0>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	4a31      	ldr	r2, [pc, #196]	@ (8002a5c <HAL_UART_MspInit+0xf0>)
 8002998:	f043 0310 	orr.w	r3, r3, #16
 800299c:	6453      	str	r3, [r2, #68]	@ 0x44
 800299e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a5c <HAL_UART_MspInit+0xf0>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	4b2b      	ldr	r3, [pc, #172]	@ (8002a5c <HAL_UART_MspInit+0xf0>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	4a2a      	ldr	r2, [pc, #168]	@ (8002a5c <HAL_UART_MspInit+0xf0>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ba:	4b28      	ldr	r3, [pc, #160]	@ (8002a5c <HAL_UART_MspInit+0xf0>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80029ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d4:	2303      	movs	r3, #3
 80029d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029d8:	2307      	movs	r3, #7
 80029da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	4619      	mov	r1, r3
 80029e2:	481f      	ldr	r0, [pc, #124]	@ (8002a60 <HAL_UART_MspInit+0xf4>)
 80029e4:	f002 faa4 	bl	8004f30 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80029e8:	e031      	b.n	8002a4e <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002a64 <HAL_UART_MspInit+0xf8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d12c      	bne.n	8002a4e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	4b18      	ldr	r3, [pc, #96]	@ (8002a5c <HAL_UART_MspInit+0xf0>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fc:	4a17      	ldr	r2, [pc, #92]	@ (8002a5c <HAL_UART_MspInit+0xf0>)
 80029fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a02:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a04:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <HAL_UART_MspInit+0xf0>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <HAL_UART_MspInit+0xf0>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a18:	4a10      	ldr	r2, [pc, #64]	@ (8002a5c <HAL_UART_MspInit+0xf0>)
 8002a1a:	f043 0308 	orr.w	r3, r3, #8
 8002a1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a20:	4b0e      	ldr	r3, [pc, #56]	@ (8002a5c <HAL_UART_MspInit+0xf0>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a2c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a3e:	2307      	movs	r3, #7
 8002a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a42:	f107 031c 	add.w	r3, r7, #28
 8002a46:	4619      	mov	r1, r3
 8002a48:	4807      	ldr	r0, [pc, #28]	@ (8002a68 <HAL_UART_MspInit+0xfc>)
 8002a4a:	f002 fa71 	bl	8004f30 <HAL_GPIO_Init>
}
 8002a4e:	bf00      	nop
 8002a50:	3730      	adds	r7, #48	@ 0x30
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40004800 	.word	0x40004800
 8002a68:	40020c00 	.word	0x40020c00

08002a6c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	@ 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a8c:	d132      	bne.n	8002af4 <HAL_PCD_MspInit+0x88>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	4b1a      	ldr	r3, [pc, #104]	@ (8002afc <HAL_PCD_MspInit+0x90>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	4a19      	ldr	r2, [pc, #100]	@ (8002afc <HAL_PCD_MspInit+0x90>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9e:	4b17      	ldr	r3, [pc, #92]	@ (8002afc <HAL_PCD_MspInit+0x90>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002aaa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002abc:	230a      	movs	r3, #10
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	480e      	ldr	r0, [pc, #56]	@ (8002b00 <HAL_PCD_MspInit+0x94>)
 8002ac8:	f002 fa32 	bl	8004f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002acc:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <HAL_PCD_MspInit+0x90>)
 8002ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <HAL_PCD_MspInit+0x90>)
 8002ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ad6:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <HAL_PCD_MspInit+0x90>)
 8002ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae0:	4a06      	ldr	r2, [pc, #24]	@ (8002afc <HAL_PCD_MspInit+0x90>)
 8002ae2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ae6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ae8:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <HAL_PCD_MspInit+0x90>)
 8002aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002af4:	bf00      	nop
 8002af6:	3728      	adds	r7, #40	@ 0x28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40020000 	.word	0x40020000

08002b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b08:	bf00      	nop
 8002b0a:	e7fd      	b.n	8002b08 <NMI_Handler+0x4>

08002b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b10:	bf00      	nop
 8002b12:	e7fd      	b.n	8002b10 <HardFault_Handler+0x4>

08002b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <MemManage_Handler+0x4>

08002b1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b20:	bf00      	nop
 8002b22:	e7fd      	b.n	8002b20 <BusFault_Handler+0x4>

08002b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <UsageFault_Handler+0x4>

08002b2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b5a:	f000 fa6b 	bl	8003034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002b68:	4802      	ldr	r0, [pc, #8]	@ (8002b74 <ETH_IRQHandler+0x10>)
 8002b6a:	f001 faf3 	bl	8004154 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20005564 	.word	0x20005564

08002b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return 1;
 8002b7c:	2301      	movs	r3, #1
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <_kill>:

int _kill(int pid, int sig)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b92:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <_kill+0x20>)
 8002b94:	2216      	movs	r2, #22
 8002b96:	601a      	str	r2, [r3, #0]
  return -1;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	20008c34 	.word	0x20008c34

08002bac <_exit>:

void _exit (int status)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ffe5 	bl	8002b88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bbe:	bf00      	nop
 8002bc0:	e7fd      	b.n	8002bbe <_exit+0x12>

08002bc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	e00a      	b.n	8002bea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bd4:	f3af 8000 	nop.w
 8002bd8:	4601      	mov	r1, r0
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	60ba      	str	r2, [r7, #8]
 8002be0:	b2ca      	uxtb	r2, r1
 8002be2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	3301      	adds	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	dbf0      	blt.n	8002bd4 <_read+0x12>
  }

  return len;
 8002bf2:	687b      	ldr	r3, [r7, #4]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e009      	b.n	8002c22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	60ba      	str	r2, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	dbf1      	blt.n	8002c0e <_write+0x12>
  }
  return len;
 8002c2a:	687b      	ldr	r3, [r7, #4]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <_close>:

int _close(int file)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c5c:	605a      	str	r2, [r3, #4]
  return 0;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <_isatty>:

int _isatty(int file)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c74:	2301      	movs	r3, #1
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b085      	sub	sp, #20
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ca4:	4a14      	ldr	r2, [pc, #80]	@ (8002cf8 <_sbrk+0x5c>)
 8002ca6:	4b15      	ldr	r3, [pc, #84]	@ (8002cfc <_sbrk+0x60>)
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cb0:	4b13      	ldr	r3, [pc, #76]	@ (8002d00 <_sbrk+0x64>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb8:	4b11      	ldr	r3, [pc, #68]	@ (8002d00 <_sbrk+0x64>)
 8002cba:	4a12      	ldr	r2, [pc, #72]	@ (8002d04 <_sbrk+0x68>)
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cbe:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <_sbrk+0x64>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d205      	bcs.n	8002cd8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <_sbrk+0x6c>)
 8002cce:	220c      	movs	r2, #12
 8002cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd6:	e009      	b.n	8002cec <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd8:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <_sbrk+0x64>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cde:	4b08      	ldr	r3, [pc, #32]	@ (8002d00 <_sbrk+0x64>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	4a06      	ldr	r2, [pc, #24]	@ (8002d00 <_sbrk+0x64>)
 8002ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	20020000 	.word	0x20020000
 8002cfc:	00004000 	.word	0x00004000
 8002d00:	20000a40 	.word	0x20000a40
 8002d04:	20008c48 	.word	0x20008c48
 8002d08:	20008c34 	.word	0x20008c34

08002d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <SystemInit+0x20>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d16:	4a05      	ldr	r2, [pc, #20]	@ (8002d2c <SystemInit+0x20>)
 8002d18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d34:	f7ff ffea 	bl	8002d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d38:	480c      	ldr	r0, [pc, #48]	@ (8002d6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d3a:	490d      	ldr	r1, [pc, #52]	@ (8002d70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d40:	e002      	b.n	8002d48 <LoopCopyDataInit>

08002d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d46:	3304      	adds	r3, #4

08002d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d4c:	d3f9      	bcc.n	8002d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d50:	4c0a      	ldr	r4, [pc, #40]	@ (8002d7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d54:	e001      	b.n	8002d5a <LoopFillZerobss>

08002d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d58:	3204      	adds	r2, #4

08002d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d5c:	d3fb      	bcc.n	8002d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d5e:	f00f fea1 	bl	8012aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d62:	f7fe ff2f 	bl	8001bc4 <main>
  bx  lr    
 8002d66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d70:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002d74:	08016830 	.word	0x08016830
  ldr r2, =_sbss
 8002d78:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002d7c:	20008c44 	.word	0x20008c44

08002d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d80:	e7fe      	b.n	8002d80 <ADC_IRQHandler>

08002d82 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <LAN8742_RegisterBusIO+0x28>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <LAN8742_RegisterBusIO+0x28>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <LAN8742_RegisterBusIO+0x28>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d102      	bne.n	8002db0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dae:	e014      	b.n	8002dda <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d139      	bne.n	8002e76 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	e01c      	b.n	8002e56 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	f107 020c 	add.w	r2, r7, #12
 8002e24:	2112      	movs	r1, #18
 8002e26:	6978      	ldr	r0, [r7, #20]
 8002e28:	4798      	blx	r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	da03      	bge.n	8002e38 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002e30:	f06f 0304 	mvn.w	r3, #4
 8002e34:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002e36:	e00b      	b.n	8002e50 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d105      	bne.n	8002e50 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
         break;
 8002e4e:	e005      	b.n	8002e5c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	3301      	adds	r3, #1
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b1f      	cmp	r3, #31
 8002e5a:	d9df      	bls.n	8002e1c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b1f      	cmp	r3, #31
 8002e62:	d902      	bls.n	8002e6a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002e64:	f06f 0302 	mvn.w	r3, #2
 8002e68:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d102      	bne.n	8002e76 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002e76:	693b      	ldr	r3, [r7, #16]
 }
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6810      	ldr	r0, [r2, #0]
 8002e94:	f107 020c 	add.w	r2, r7, #12
 8002e98:	2101      	movs	r1, #1
 8002e9a:	4798      	blx	r3
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	da02      	bge.n	8002ea8 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002ea2:	f06f 0304 	mvn.w	r3, #4
 8002ea6:	e06e      	b.n	8002f86 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6810      	ldr	r0, [r2, #0]
 8002eb0:	f107 020c 	add.w	r2, r7, #12
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	4798      	blx	r3
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	da02      	bge.n	8002ec4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002ebe:	f06f 0304 	mvn.w	r3, #4
 8002ec2:	e060      	b.n	8002f86 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e059      	b.n	8002f86 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6810      	ldr	r0, [r2, #0]
 8002eda:	f107 020c 	add.w	r2, r7, #12
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4798      	blx	r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	da02      	bge.n	8002eee <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002ee8:	f06f 0304 	mvn.w	r3, #4
 8002eec:	e04b      	b.n	8002f86 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d11b      	bne.n	8002f30 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d006      	beq.n	8002f10 <LAN8742_GetLinkState+0x90>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e03a      	b.n	8002f86 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e033      	b.n	8002f86 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002f28:	2304      	movs	r3, #4
 8002f2a:	e02c      	b.n	8002f86 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002f2c:	2305      	movs	r3, #5
 8002f2e:	e02a      	b.n	8002f86 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6810      	ldr	r0, [r2, #0]
 8002f38:	f107 020c 	add.w	r2, r7, #12
 8002f3c:	211f      	movs	r1, #31
 8002f3e:	4798      	blx	r3
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	da02      	bge.n	8002f4c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002f46:	f06f 0304 	mvn.w	r3, #4
 8002f4a:	e01c      	b.n	8002f86 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002f56:	2306      	movs	r3, #6
 8002f58:	e015      	b.n	8002f86 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 031c 	and.w	r3, r3, #28
 8002f60:	2b18      	cmp	r3, #24
 8002f62:	d101      	bne.n	8002f68 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002f64:	2302      	movs	r3, #2
 8002f66:	e00e      	b.n	8002f86 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 031c 	and.w	r3, r3, #28
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d101      	bne.n	8002f76 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e007      	b.n	8002f86 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 031c 	and.w	r3, r3, #28
 8002f7c:	2b14      	cmp	r3, #20
 8002f7e:	d101      	bne.n	8002f84 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002f80:	2304      	movs	r3, #4
 8002f82:	e000      	b.n	8002f86 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002f84:	2305      	movs	r3, #5
    }
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f94:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd0 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd0 <HAL_Init+0x40>)
 8002f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <HAL_Init+0x40>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <HAL_Init+0x40>)
 8002fa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fac:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <HAL_Init+0x40>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a07      	ldr	r2, [pc, #28]	@ (8002fd0 <HAL_Init+0x40>)
 8002fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fb8:	2003      	movs	r0, #3
 8002fba:	f000 fcad 	bl	8003918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fbe:	200f      	movs	r0, #15
 8002fc0:	f000 f808 	bl	8002fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc4:	f7ff fada 	bl	800257c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023c00 	.word	0x40023c00

08002fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fdc:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <HAL_InitTick+0x54>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b12      	ldr	r3, [pc, #72]	@ (800302c <HAL_InitTick+0x58>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fcc5 	bl	8003982 <HAL_SYSTICK_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00e      	b.n	8003020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b0f      	cmp	r3, #15
 8003006:	d80a      	bhi.n	800301e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003008:	2200      	movs	r2, #0
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	f000 fc8d 	bl	800392e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003014:	4a06      	ldr	r2, [pc, #24]	@ (8003030 <HAL_InitTick+0x5c>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000078 	.word	0x20000078
 800302c:	20000080 	.word	0x20000080
 8003030:	2000007c 	.word	0x2000007c

08003034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <HAL_IncTick+0x20>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <HAL_IncTick+0x24>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4413      	add	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	@ (8003058 <HAL_IncTick+0x24>)
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000080 	.word	0x20000080
 8003058:	20000a44 	.word	0x20000a44

0800305c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return uwTick;
 8003060:	4b03      	ldr	r3, [pc, #12]	@ (8003070 <HAL_GetTick+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000a44 	.word	0x20000a44

08003074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff ffee 	bl	800305c <HAL_GetTick>
 8003080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d005      	beq.n	800309a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800308e:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <HAL_Delay+0x44>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800309a:	bf00      	nop
 800309c:	f7ff ffde 	bl	800305c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d8f7      	bhi.n	800309c <HAL_Delay+0x28>
  {
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000080 	.word	0x20000080

080030bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e033      	b.n	800313a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fa76 	bl	80025cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d118      	bne.n	800312c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003102:	f023 0302 	bic.w	r3, r3, #2
 8003106:	f043 0202 	orr.w	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f93a 	bl	8003388 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40
 800312a:	e001      	b.n	8003130 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x1c>
 800315c:	2302      	movs	r3, #2
 800315e:	e105      	b.n	800336c <HAL_ADC_ConfigChannel+0x228>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b09      	cmp	r3, #9
 800316e:	d925      	bls.n	80031bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68d9      	ldr	r1, [r3, #12]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	4613      	mov	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	3b1e      	subs	r3, #30
 8003186:	2207      	movs	r2, #7
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43da      	mvns	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	400a      	ands	r2, r1
 8003194:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68d9      	ldr	r1, [r3, #12]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4618      	mov	r0, r3
 80031a8:	4603      	mov	r3, r0
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4403      	add	r3, r0
 80031ae:	3b1e      	subs	r3, #30
 80031b0:	409a      	lsls	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	e022      	b.n	8003202 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6919      	ldr	r1, [r3, #16]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	2207      	movs	r2, #7
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	400a      	ands	r2, r1
 80031de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6919      	ldr	r1, [r3, #16]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	4618      	mov	r0, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4403      	add	r3, r0
 80031f8:	409a      	lsls	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b06      	cmp	r3, #6
 8003208:	d824      	bhi.n	8003254 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	3b05      	subs	r3, #5
 800321c:	221f      	movs	r2, #31
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	400a      	ands	r2, r1
 800322a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	4618      	mov	r0, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	3b05      	subs	r3, #5
 8003246:	fa00 f203 	lsl.w	r2, r0, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	635a      	str	r2, [r3, #52]	@ 0x34
 8003252:	e04c      	b.n	80032ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b0c      	cmp	r3, #12
 800325a:	d824      	bhi.n	80032a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	3b23      	subs	r3, #35	@ 0x23
 800326e:	221f      	movs	r2, #31
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43da      	mvns	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	400a      	ands	r2, r1
 800327c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	4618      	mov	r0, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	3b23      	subs	r3, #35	@ 0x23
 8003298:	fa00 f203 	lsl.w	r2, r0, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80032a4:	e023      	b.n	80032ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	3b41      	subs	r3, #65	@ 0x41
 80032b8:	221f      	movs	r2, #31
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	400a      	ands	r2, r1
 80032c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	4618      	mov	r0, r3
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	3b41      	subs	r3, #65	@ 0x41
 80032e2:	fa00 f203 	lsl.w	r2, r0, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ee:	4b22      	ldr	r3, [pc, #136]	@ (8003378 <HAL_ADC_ConfigChannel+0x234>)
 80032f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a21      	ldr	r2, [pc, #132]	@ (800337c <HAL_ADC_ConfigChannel+0x238>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d109      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1cc>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b12      	cmp	r3, #18
 8003302:	d105      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a19      	ldr	r2, [pc, #100]	@ (800337c <HAL_ADC_ConfigChannel+0x238>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d123      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x21e>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b10      	cmp	r3, #16
 8003320:	d003      	beq.n	800332a <HAL_ADC_ConfigChannel+0x1e6>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b11      	cmp	r3, #17
 8003328:	d11b      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b10      	cmp	r3, #16
 800333c:	d111      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800333e:	4b10      	ldr	r3, [pc, #64]	@ (8003380 <HAL_ADC_ConfigChannel+0x23c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a10      	ldr	r2, [pc, #64]	@ (8003384 <HAL_ADC_ConfigChannel+0x240>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	0c9a      	lsrs	r2, r3, #18
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003354:	e002      	b.n	800335c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	3b01      	subs	r3, #1
 800335a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f9      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	40012300 	.word	0x40012300
 800337c:	40012000 	.word	0x40012000
 8003380:	20000078 	.word	0x20000078
 8003384:	431bde83 	.word	0x431bde83

08003388 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003390:	4b79      	ldr	r3, [pc, #484]	@ (8003578 <ADC_Init+0x1f0>)
 8003392:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	021a      	lsls	r2, r3, #8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80033e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6899      	ldr	r1, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341a:	4a58      	ldr	r2, [pc, #352]	@ (800357c <ADC_Init+0x1f4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d022      	beq.n	8003466 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800342e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6899      	ldr	r1, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003450:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6899      	ldr	r1, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	e00f      	b.n	8003486 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003474:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003484:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0202 	bic.w	r2, r2, #2
 8003494:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6899      	ldr	r1, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	7e1b      	ldrb	r3, [r3, #24]
 80034a0:	005a      	lsls	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01b      	beq.n	80034ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80034d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	3b01      	subs	r3, #1
 80034e0:	035a      	lsls	r2, r3, #13
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	e007      	b.n	80034fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800350a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	3b01      	subs	r3, #1
 8003518:	051a      	lsls	r2, r3, #20
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6899      	ldr	r1, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800353e:	025a      	lsls	r2, r3, #9
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003556:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6899      	ldr	r1, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	029a      	lsls	r2, r3, #10
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	609a      	str	r2, [r3, #8]
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40012300 	.word	0x40012300
 800357c:	0f000001 	.word	0x0f000001

08003580 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e0ed      	b.n	800376e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff f858 	bl	8002654 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035b4:	f7ff fd52 	bl	800305c <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035ba:	e012      	b.n	80035e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035bc:	f7ff fd4e 	bl	800305c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b0a      	cmp	r3, #10
 80035c8:	d90b      	bls.n	80035e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2205      	movs	r2, #5
 80035da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0c5      	b.n	800376e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0e5      	beq.n	80035bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0202 	bic.w	r2, r2, #2
 80035fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003600:	f7ff fd2c 	bl	800305c <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003606:	e012      	b.n	800362e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003608:	f7ff fd28 	bl	800305c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b0a      	cmp	r3, #10
 8003614:	d90b      	bls.n	800362e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2205      	movs	r2, #5
 8003626:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e09f      	b.n	800376e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1e5      	bne.n	8003608 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	7e1b      	ldrb	r3, [r3, #24]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d108      	bne.n	8003656 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e007      	b.n	8003666 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003664:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	7e5b      	ldrb	r3, [r3, #25]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d108      	bne.n	8003680 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e007      	b.n	8003690 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800368e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	7e9b      	ldrb	r3, [r3, #26]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d108      	bne.n	80036aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0220 	orr.w	r2, r2, #32
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e007      	b.n	80036ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0220 	bic.w	r2, r2, #32
 80036b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	7edb      	ldrb	r3, [r3, #27]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d108      	bne.n	80036d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0210 	bic.w	r2, r2, #16
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	e007      	b.n	80036e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0210 	orr.w	r2, r2, #16
 80036e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	7f1b      	ldrb	r3, [r3, #28]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d108      	bne.n	80036fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0208 	orr.w	r2, r2, #8
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	e007      	b.n	800370e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0208 	bic.w	r2, r2, #8
 800370c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	7f5b      	ldrb	r3, [r3, #29]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d108      	bne.n	8003728 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0204 	orr.w	r2, r2, #4
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e007      	b.n	8003738 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0204 	bic.w	r2, r2, #4
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	ea42 0103 	orr.w	r1, r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	1e5a      	subs	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003788:	4b0c      	ldr	r3, [pc, #48]	@ (80037bc <__NVIC_SetPriorityGrouping+0x44>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003794:	4013      	ands	r3, r2
 8003796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037aa:	4a04      	ldr	r2, [pc, #16]	@ (80037bc <__NVIC_SetPriorityGrouping+0x44>)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	60d3      	str	r3, [r2, #12]
}
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c4:	4b04      	ldr	r3, [pc, #16]	@ (80037d8 <__NVIC_GetPriorityGrouping+0x18>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	0a1b      	lsrs	r3, r3, #8
 80037ca:	f003 0307 	and.w	r3, r3, #7
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	db0b      	blt.n	8003806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	f003 021f 	and.w	r2, r3, #31
 80037f4:	4907      	ldr	r1, [pc, #28]	@ (8003814 <__NVIC_EnableIRQ+0x38>)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	2001      	movs	r0, #1
 80037fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	e000e100 	.word	0xe000e100

08003818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	6039      	str	r1, [r7, #0]
 8003822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003828:	2b00      	cmp	r3, #0
 800382a:	db0a      	blt.n	8003842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	490c      	ldr	r1, [pc, #48]	@ (8003864 <__NVIC_SetPriority+0x4c>)
 8003832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003836:	0112      	lsls	r2, r2, #4
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	440b      	add	r3, r1
 800383c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003840:	e00a      	b.n	8003858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4908      	ldr	r1, [pc, #32]	@ (8003868 <__NVIC_SetPriority+0x50>)
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	3b04      	subs	r3, #4
 8003850:	0112      	lsls	r2, r2, #4
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	440b      	add	r3, r1
 8003856:	761a      	strb	r2, [r3, #24]
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000e100 	.word	0xe000e100
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800386c:	b480      	push	{r7}
 800386e:	b089      	sub	sp, #36	@ 0x24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f1c3 0307 	rsb	r3, r3, #7
 8003886:	2b04      	cmp	r3, #4
 8003888:	bf28      	it	cs
 800388a:	2304      	movcs	r3, #4
 800388c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3304      	adds	r3, #4
 8003892:	2b06      	cmp	r3, #6
 8003894:	d902      	bls.n	800389c <NVIC_EncodePriority+0x30>
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3b03      	subs	r3, #3
 800389a:	e000      	b.n	800389e <NVIC_EncodePriority+0x32>
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a0:	f04f 32ff 	mov.w	r2, #4294967295
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43da      	mvns	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	401a      	ands	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b4:	f04f 31ff 	mov.w	r1, #4294967295
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	fa01 f303 	lsl.w	r3, r1, r3
 80038be:	43d9      	mvns	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c4:	4313      	orrs	r3, r2
         );
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3724      	adds	r7, #36	@ 0x24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3b01      	subs	r3, #1
 80038e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038e4:	d301      	bcc.n	80038ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038e6:	2301      	movs	r3, #1
 80038e8:	e00f      	b.n	800390a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003914 <SysTick_Config+0x40>)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038f2:	210f      	movs	r1, #15
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	f7ff ff8e 	bl	8003818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038fc:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <SysTick_Config+0x40>)
 80038fe:	2200      	movs	r2, #0
 8003900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003902:	4b04      	ldr	r3, [pc, #16]	@ (8003914 <SysTick_Config+0x40>)
 8003904:	2207      	movs	r2, #7
 8003906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	e000e010 	.word	0xe000e010

08003918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ff29 	bl	8003778 <__NVIC_SetPriorityGrouping>
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800392e:	b580      	push	{r7, lr}
 8003930:	b086      	sub	sp, #24
 8003932:	af00      	add	r7, sp, #0
 8003934:	4603      	mov	r3, r0
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003940:	f7ff ff3e 	bl	80037c0 <__NVIC_GetPriorityGrouping>
 8003944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	6978      	ldr	r0, [r7, #20]
 800394c:	f7ff ff8e 	bl	800386c <NVIC_EncodePriority>
 8003950:	4602      	mov	r2, r0
 8003952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003956:	4611      	mov	r1, r2
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff5d 	bl	8003818 <__NVIC_SetPriority>
}
 800395e:	bf00      	nop
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	4603      	mov	r3, r0
 800396e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff31 	bl	80037dc <__NVIC_EnableIRQ>
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff ffa2 	bl	80038d4 <SysTick_Config>
 8003990:	4603      	mov	r3, r0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e014      	b.n	80039d6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	791b      	ldrb	r3, [r3, #4]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d105      	bne.n	80039c2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7fe fe91 	bl	80026e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80039de:	b480      	push	{r7}
 80039e0:	b089      	sub	sp, #36	@ 0x24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_DAC_ConfigChannel+0x1c>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e042      	b.n	8003a84 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	795b      	ldrb	r3, [r3, #5]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_DAC_ConfigChannel+0x2c>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e03c      	b.n	8003a84 <HAL_DAC_ConfigChannel+0xa6>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2202      	movs	r2, #2
 8003a14:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	22c0      	movs	r2, #192	@ 0xc0
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43da      	mvns	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	400a      	ands	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003a82:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3724      	adds	r7, #36	@ 0x24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e08a      	b.n	8003bb8 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d106      	bne.n	8003aba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2223      	movs	r2, #35	@ 0x23
 8003ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f004 fa71 	bl	8007f9c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	4b40      	ldr	r3, [pc, #256]	@ (8003bc0 <HAL_ETH_Init+0x130>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac2:	4a3f      	ldr	r2, [pc, #252]	@ (8003bc0 <HAL_ETH_Init+0x130>)
 8003ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003aca:	4b3d      	ldr	r3, [pc, #244]	@ (8003bc0 <HAL_ETH_Init+0x130>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc4 <HAL_ETH_Init+0x134>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4a3a      	ldr	r2, [pc, #232]	@ (8003bc4 <HAL_ETH_Init+0x134>)
 8003adc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003ae0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003ae2:	4b38      	ldr	r3, [pc, #224]	@ (8003bc4 <HAL_ETH_Init+0x134>)
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	4936      	ldr	r1, [pc, #216]	@ (8003bc4 <HAL_ETH_Init+0x134>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003af0:	4b34      	ldr	r3, [pc, #208]	@ (8003bc4 <HAL_ETH_Init+0x134>)
 8003af2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6812      	ldr	r2, [r2, #0]
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b0c:	f7ff faa6 	bl	800305c <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003b12:	e011      	b.n	8003b38 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003b14:	f7ff faa2 	bl	800305c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003b22:	d909      	bls.n	8003b38 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2204      	movs	r2, #4
 8003b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	22e0      	movs	r2, #224	@ 0xe0
 8003b30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e03f      	b.n	8003bb8 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e4      	bne.n	8003b14 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 ff32 	bl	80049b4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 ffdd 	bl	8004b10 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f001 f833 	bl	8004bc2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	461a      	mov	r2, r3
 8003b62:	2100      	movs	r1, #0
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 ff9b 	bl	8004aa0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003b78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b8a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003b8e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003ba2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2210      	movs	r2, #16
 8003bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	40013800 	.word	0x40013800

08003bc8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	d161      	bne.n	8003c9e <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2223      	movs	r2, #35	@ 0x23
 8003bde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2204      	movs	r2, #4
 8003bec:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fa2c 	bl	800404c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f7ff fa39 	bl	8003074 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c20:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	f043 0302 	orr.w	r3, r3, #2
 8003c34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c38:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fd56 	bl	80046ec <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0208 	orr.w	r2, r2, #8
 8003c4e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f7ff fa0b 	bl	8003074 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0204 	orr.w	r2, r2, #4
 8003c74:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8003c88:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8003c8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c90:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2223      	movs	r2, #35	@ 0x23
 8003c96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e000      	b.n	8003ca0 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
  }
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cb6:	2b23      	cmp	r3, #35	@ 0x23
 8003cb8:	d170      	bne.n	8003d9c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2223      	movs	r2, #35	@ 0x23
 8003cbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8003cd4:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8003cd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003cdc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cf0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003cf4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	f023 0302 	bic.w	r3, r3, #2
 8003d08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d0c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0204 	bic.w	r2, r2, #4
 8003d1c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d26:	2001      	movs	r0, #1
 8003d28:	f7ff f9a4 	bl	8003074 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fcd9 	bl	80046ec <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0208 	bic.w	r2, r2, #8
 8003d48:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d52:	2001      	movs	r0, #1
 8003d54:	f7ff f98e 	bl	8003074 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e00e      	b.n	8003d84 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	3212      	adds	r2, #18
 8003d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d70:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	3301      	adds	r3, #1
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d9ed      	bls.n	8003d66 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2210      	movs	r2, #16
 8003d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e000      	b.n	8003d9e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
  }
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dbe:	f043 0201 	orr.w	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e07c      	b.n	8003ec6 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd2:	2b23      	cmp	r3, #35	@ 0x23
 8003dd4:	d176      	bne.n	8003ec4 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 ff60 	bl	8004ca0 <ETH_Prepare_Tx_Descriptors>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dec:	f043 0202 	orr.w	r2, r3, #2
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e065      	b.n	8003ec6 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8003dfa:	f3bf 8f4f 	dsb	sy
}
 8003dfe:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	3206      	adds	r2, #6
 8003e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e0c:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d904      	bls.n	8003e2a <HAL_ETH_Transmit+0x84>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	1f1a      	subs	r2, r3, #4
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3106      	adds	r1, #6
 8003e36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e3e:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003e40:	f7ff f90c 	bl	800305c <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003e46:	e037      	b.n	8003eb8 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d011      	beq.n	8003e7e <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e60:	f043 0208 	orr.w	r2, r3, #8
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e72:	695a      	ldr	r2, [r3, #20]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e023      	b.n	8003ec6 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d018      	beq.n	8003eb8 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e86:	f7ff f8e9 	bl	800305c <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d302      	bcc.n	8003e9c <HAL_ETH_Transmit+0xf6>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10d      	bne.n	8003eb8 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea2:	f043 0204 	orr.w	r2, r3, #4
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8003eb2:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e006      	b.n	8003ec6 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	dbc3      	blt.n	8003e48 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b088      	sub	sp, #32
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eec:	f043 0201 	orr.w	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e0a4      	b.n	8004044 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f00:	2b23      	cmp	r3, #35	@ 0x23
 8003f02:	d001      	beq.n	8003f08 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e09d      	b.n	8004044 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	3212      	adds	r2, #18
 8003f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f18:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f1e:	f1c3 0304 	rsb	r3, r3, #4
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003f24:	e066      	b.n	8003ff4 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d007      	beq.n	8003f42 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d103      	bne.n	8003f56 <HAL_ETH_ReadData+0x88>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d03c      	beq.n	8003fd0 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	0c1b      	lsrs	r3, r3, #16
 8003f74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003f78:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003faa:	461a      	mov	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	f004 f9ac 	bl	800830c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	441a      	add	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d902      	bls.n	8003fe2 <HAL_ETH_ReadData+0x114>
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	3b04      	subs	r3, #4
 8003fe0:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	3212      	adds	r2, #18
 8003fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fec:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	db06      	blt.n	800400a <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	429a      	cmp	r2, r3
 8004002:	d202      	bcs.n	800400a <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004004:	7cfb      	ldrb	r3, [r7, #19]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d08d      	beq.n	8003f26 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	441a      	add	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f814 	bl	800404c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69fa      	ldr	r2, [r7, #28]
 8004028:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d108      	bne.n	8004042 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	e000      	b.n	8004044 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
}
 8004044:	4618      	mov	r0, r3
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004054:	2300      	movs	r3, #0
 8004056:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004058:	2301      	movs	r3, #1
 800405a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004060:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	3212      	adds	r2, #18
 8004068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800406c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004072:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004074:	e044      	b.n	8004100 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d112      	bne.n	80040a4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800407e:	f107 0308 	add.w	r3, r7, #8
 8004082:	4618      	mov	r0, r3
 8004084:	f004 f912 	bl	80082ac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d102      	bne.n	8004094 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	74fb      	strb	r3, [r7, #19]
 8004092:	e007      	b.n	80040a4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	461a      	mov	r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	461a      	mov	r2, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80040a4:	7cfb      	ldrb	r3, [r7, #19]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d02a      	beq.n	8004100 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d108      	bne.n	80040c4 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	6053      	str	r3, [r2, #4]
 80040c2:	e005      	b.n	80040d0 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	3301      	adds	r3, #1
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d902      	bls.n	80040ee <ETH_UpdateDescriptor+0xa2>
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	3b04      	subs	r3, #4
 80040ec:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	3212      	adds	r2, #18
 80040f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f8:	617b      	str	r3, [r7, #20]
      desccount--;
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <ETH_UpdateDescriptor+0xc0>
 8004106:	7cfb      	ldrb	r3, [r7, #19]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1b4      	bne.n	8004076 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	429a      	cmp	r2, r3
 8004114:	d01a      	beq.n	800414c <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3301      	adds	r3, #1
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004120:	f3bf 8f5f 	dmb	sy
}
 8004124:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6919      	ldr	r1, [r3, #16]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	18ca      	adds	r2, r1, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800413e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800414c:	bf00      	nop
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004162:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800417c:	4b4b      	ldr	r3, [pc, #300]	@ (80042ac <HAL_ETH_IRQHandler+0x158>)
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00e      	beq.n	80041aa <HAL_ETH_IRQHandler+0x56>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800419e:	461a      	mov	r2, r3
 80041a0:	4b43      	ldr	r3, [pc, #268]	@ (80042b0 <HAL_ETH_IRQHandler+0x15c>)
 80041a2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f891 	bl	80042cc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00f      	beq.n	80041d4 <HAL_ETH_IRQHandler+0x80>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041c6:	461a      	mov	r2, r3
 80041c8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80041cc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f872 	bl	80042b8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d042      	beq.n	8004264 <HAL_ETH_IRQHandler+0x110>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d03d      	beq.n	8004264 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ee:	f043 0208 	orr.w	r2, r3, #8
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d01a      	beq.n	8004238 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800420a:	695a      	ldr	r2, [r3, #20]
 800420c:	4b29      	ldr	r3, [pc, #164]	@ (80042b4 <HAL_ETH_IRQHandler+0x160>)
 800420e:	4013      	ands	r3, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004228:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800422c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	22e0      	movs	r2, #224	@ 0xe0
 8004232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004236:	e012      	b.n	800425e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004246:	4013      	ands	r3, r2
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004256:	461a      	mov	r2, r3
 8004258:	f248 6380 	movw	r3, #34432	@ 0x8680
 800425c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f83e 	bl	80042e0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00e      	beq.n	800428c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004274:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f838 	bl	80042f4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d006      	beq.n	80042a4 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004296:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <HAL_ETH_IRQHandler+0x158>)
 8004298:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800429c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f832 	bl	8004308 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80042a4:	bf00      	nop
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40013c00 	.word	0x40013c00
 80042b0:	00010040 	.word	0x00010040
 80042b4:	007e2000 	.word	0x007e2000

080042b8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f003 031c 	and.w	r3, r3, #28
 8004338:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	02db      	lsls	r3, r3, #11
 800433e:	b29b      	uxth	r3, r3
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	019b      	lsls	r3, r3, #6
 800434a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4313      	orrs	r3, r2
 8004352:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0302 	bic.w	r3, r3, #2
 800435a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800436c:	f7fe fe76 	bl	800305c <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004372:	e00d      	b.n	8004390 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004374:	f7fe fe72 	bl	800305c <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004382:	d301      	bcc.n	8004388 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e010      	b.n	80043aa <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1ec      	bne.n	8004374 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b086      	sub	sp, #24
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f003 031c 	and.w	r3, r3, #28
 80043ce:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	02db      	lsls	r3, r3, #11
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	019b      	lsls	r3, r3, #6
 80043e0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f043 0302 	orr.w	r3, r3, #2
 80043f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800440c:	f7fe fe26 	bl	800305c <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004412:	e00d      	b.n	8004430 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004414:	f7fe fe22 	bl	800305c <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004422:	d301      	bcc.n	8004428 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e009      	b.n	800443c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1ec      	bne.n	8004414 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0e6      	b.n	8004626 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	bf14      	ite	ne
 8004466:	2301      	movne	r3, #1
 8004468:	2300      	moveq	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800448c:	2b00      	cmp	r3, #0
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf14      	ite	ne
 80044ac:	2301      	movne	r3, #1
 80044ae:	2300      	moveq	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bf0c      	ite	eq
 80044c6:	2301      	moveq	r3, #1
 80044c8:	2300      	movne	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	bf14      	ite	ne
 80044e0:	2301      	movne	r3, #1
 80044e2:	2300      	moveq	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004512:	2b00      	cmp	r3, #0
 8004514:	bf0c      	ite	eq
 8004516:	2301      	moveq	r3, #1
 8004518:	2300      	movne	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	461a      	mov	r2, r3
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004546:	2b00      	cmp	r3, #0
 8004548:	bf14      	ite	ne
 800454a:	2301      	movne	r3, #1
 800454c:	2300      	moveq	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800456e:	2b00      	cmp	r3, #0
 8004570:	bf14      	ite	ne
 8004572:	2301      	movne	r3, #1
 8004574:	2300      	moveq	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bf14      	ite	ne
 80045a6:	2301      	movne	r3, #1
 80045a8:	2300      	moveq	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bf0c      	ite	eq
 80045c2:	2301      	moveq	r3, #1
 80045c4:	2300      	movne	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	0c1b      	lsrs	r3, r3, #16
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	bf14      	ite	ne
 80045fa:	2301      	movne	r3, #1
 80045fc:	2300      	moveq	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004612:	2b00      	cmp	r3, #0
 8004614:	bf14      	ite	ne
 8004616:	2301      	movne	r3, #1
 8004618:	2300      	moveq	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e00b      	b.n	800465e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800464c:	2b10      	cmp	r3, #16
 800464e:	d105      	bne.n	800465c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f870 	bl	8004738 <ETH_SetMACConfig>

    return HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	e000      	b.n	800465e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
  }
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 031c 	bic.w	r3, r3, #28
 800467e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004680:	f001 fcc4 	bl	800600c <HAL_RCC_GetHCLKFreq>
 8004684:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4a14      	ldr	r2, [pc, #80]	@ (80046dc <HAL_ETH_SetMDIOClockRange+0x74>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d804      	bhi.n	8004698 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f043 0308 	orr.w	r3, r3, #8
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e019      	b.n	80046cc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4a11      	ldr	r2, [pc, #68]	@ (80046e0 <HAL_ETH_SetMDIOClockRange+0x78>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d204      	bcs.n	80046aa <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f043 030c 	orr.w	r3, r3, #12
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e010      	b.n	80046cc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4a0d      	ldr	r2, [pc, #52]	@ (80046e4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d90c      	bls.n	80046cc <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	4a0c      	ldr	r2, [pc, #48]	@ (80046e8 <HAL_ETH_SetMDIOClockRange+0x80>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d804      	bhi.n	80046c4 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f043 0304 	orr.w	r3, r3, #4
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	e003      	b.n	80046cc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f043 0310 	orr.w	r3, r3, #16
 80046ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	611a      	str	r2, [r3, #16]
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	02160ebf 	.word	0x02160ebf
 80046e0:	03938700 	.word	0x03938700
 80046e4:	05f5e0ff 	.word	0x05f5e0ff
 80046e8:	08f0d17f 	.word	0x08f0d17f

080046ec <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800470a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800470e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800471c:	2001      	movs	r0, #1
 800471e:	f7fe fca9 	bl	8003074 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800472c:	6193      	str	r3, [r2, #24]
}
 800472e:	bf00      	nop
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4b53      	ldr	r3, [pc, #332]	@ (800489c <ETH_SetMACConfig+0x164>)
 800474e:	4013      	ands	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	7b9b      	ldrb	r3, [r3, #14]
 8004756:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	7c12      	ldrb	r2, [r2, #16]
 800475c:	2a00      	cmp	r2, #0
 800475e:	d102      	bne.n	8004766 <ETH_SetMACConfig+0x2e>
 8004760:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004764:	e000      	b.n	8004768 <ETH_SetMACConfig+0x30>
 8004766:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004768:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	7c52      	ldrb	r2, [r2, #17]
 800476e:	2a00      	cmp	r2, #0
 8004770:	d102      	bne.n	8004778 <ETH_SetMACConfig+0x40>
 8004772:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004776:	e000      	b.n	800477a <ETH_SetMACConfig+0x42>
 8004778:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800477a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004780:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	7fdb      	ldrb	r3, [r3, #31]
 8004786:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004788:	431a      	orrs	r2, r3
                        macconf->Speed |
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800478e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	7f92      	ldrb	r2, [r2, #30]
 8004794:	2a00      	cmp	r2, #0
 8004796:	d102      	bne.n	800479e <ETH_SetMACConfig+0x66>
 8004798:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800479c:	e000      	b.n	80047a0 <ETH_SetMACConfig+0x68>
 800479e:	2200      	movs	r2, #0
                        macconf->Speed |
 80047a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	7f1b      	ldrb	r3, [r3, #28]
 80047a6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80047a8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80047ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	791b      	ldrb	r3, [r3, #4]
 80047b4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80047b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	f892 2020 	ldrb.w	r2, [r2, #32]
 80047be:	2a00      	cmp	r2, #0
 80047c0:	d102      	bne.n	80047c8 <ETH_SetMACConfig+0x90>
 80047c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047c6:	e000      	b.n	80047ca <ETH_SetMACConfig+0x92>
 80047c8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80047ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	7bdb      	ldrb	r3, [r3, #15]
 80047d0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80047d2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80047d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047e0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80047e2:	4313      	orrs	r3, r2
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80047fa:	2001      	movs	r0, #1
 80047fc:	f7fe fc3a 	bl	8003074 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004816:	4013      	ands	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800481e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004826:	2a00      	cmp	r2, #0
 8004828:	d101      	bne.n	800482e <ETH_SetMACConfig+0xf6>
 800482a:	2280      	movs	r2, #128	@ 0x80
 800482c:	e000      	b.n	8004830 <ETH_SetMACConfig+0xf8>
 800482e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004830:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004836:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800483e:	2a01      	cmp	r2, #1
 8004840:	d101      	bne.n	8004846 <ETH_SetMACConfig+0x10e>
 8004842:	2208      	movs	r2, #8
 8004844:	e000      	b.n	8004848 <ETH_SetMACConfig+0x110>
 8004846:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004848:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004850:	2a01      	cmp	r2, #1
 8004852:	d101      	bne.n	8004858 <ETH_SetMACConfig+0x120>
 8004854:	2204      	movs	r2, #4
 8004856:	e000      	b.n	800485a <ETH_SetMACConfig+0x122>
 8004858:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800485a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004862:	2a01      	cmp	r2, #1
 8004864:	d101      	bne.n	800486a <ETH_SetMACConfig+0x132>
 8004866:	2202      	movs	r2, #2
 8004868:	e000      	b.n	800486c <ETH_SetMACConfig+0x134>
 800486a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800486c:	4313      	orrs	r3, r2
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004884:	2001      	movs	r0, #1
 8004886:	f7fe fbf5 	bl	8003074 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	619a      	str	r2, [r3, #24]
}
 8004892:	bf00      	nop
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	fd20810f 	.word	0xfd20810f

080048a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4b3d      	ldr	r3, [pc, #244]	@ (80049b0 <ETH_SetDMAConfig+0x110>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	7b1b      	ldrb	r3, [r3, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <ETH_SetDMAConfig+0x2c>
 80048c6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80048ca:	e000      	b.n	80048ce <ETH_SetDMAConfig+0x2e>
 80048cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	7b5b      	ldrb	r3, [r3, #13]
 80048d2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80048d4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	7f52      	ldrb	r2, [r2, #29]
 80048da:	2a00      	cmp	r2, #0
 80048dc:	d102      	bne.n	80048e4 <ETH_SetDMAConfig+0x44>
 80048de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80048e2:	e000      	b.n	80048e6 <ETH_SetDMAConfig+0x46>
 80048e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80048e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	7b9b      	ldrb	r3, [r3, #14]
 80048ec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80048ee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80048f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	7f1b      	ldrb	r3, [r3, #28]
 80048fa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80048fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	7f9b      	ldrb	r3, [r3, #30]
 8004902:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004904:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800490a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004912:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004914:	4313      	orrs	r3, r2
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004924:	461a      	mov	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004936:	2001      	movs	r0, #1
 8004938:	f7fe fb9c 	bl	8003074 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004944:	461a      	mov	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	791b      	ldrb	r3, [r3, #4]
 800494e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004954:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800495a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004960:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004968:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800496a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004970:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004972:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004978:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004982:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004986:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004994:	2001      	movs	r0, #1
 8004996:	f7fe fb6d 	bl	8003074 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049a2:	461a      	mov	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6013      	str	r3, [r2, #0]
}
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	f8de3f23 	.word	0xf8de3f23

080049b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b0a6      	sub	sp, #152	@ 0x98
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80049bc:	2301      	movs	r3, #1
 80049be:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80049c8:	2300      	movs	r3, #0
 80049ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80049d8:	2300      	movs	r3, #0
 80049da:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80049f6:	2300      	movs	r3, #0
 80049f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80049fa:	2300      	movs	r3, #0
 80049fc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004a04:	2300      	movs	r3, #0
 8004a06:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004a10:	2300      	movs	r3, #0
 8004a12:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004a1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004a20:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004a22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004a2e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004a32:	4619      	mov	r1, r3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff fe7f 	bl	8004738 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004a66:	2301      	movs	r3, #1
 8004a68:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004a6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a6e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004a70:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004a74:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004a76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a7a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004a8a:	f107 0308 	add.w	r3, r7, #8
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff ff05 	bl	80048a0 <ETH_SetDMAConfig>
}
 8004a96:	bf00      	nop
 8004a98:	3798      	adds	r7, #152	@ 0x98
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3305      	adds	r3, #5
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	021b      	lsls	r3, r3, #8
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	3204      	adds	r2, #4
 8004ab8:	7812      	ldrb	r2, [r2, #0]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	4b11      	ldr	r3, [pc, #68]	@ (8004b08 <ETH_MACAddressConfig+0x68>)
 8004ac2:	4413      	add	r3, r2
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3303      	adds	r3, #3
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	061a      	lsls	r2, r3, #24
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3302      	adds	r3, #2
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	041b      	lsls	r3, r3, #16
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	7812      	ldrb	r2, [r2, #0]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <ETH_MACAddressConfig+0x6c>)
 8004af2:	4413      	add	r3, r2
 8004af4:	461a      	mov	r2, r3
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	6013      	str	r3, [r2, #0]
}
 8004afa:	bf00      	nop
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40028040 	.word	0x40028040
 8004b0c:	40028044 	.word	0x40028044

08004b10 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	e03e      	b.n	8004b9c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68d9      	ldr	r1, [r3, #12]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	440b      	add	r3, r1
 8004b2e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2200      	movs	r2, #0
 8004b46:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	3206      	adds	r2, #6
 8004b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d80c      	bhi.n	8004b80 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68d9      	ldr	r1, [r3, #12]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	440b      	add	r3, r1
 8004b78:	461a      	mov	r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	60da      	str	r2, [r3, #12]
 8004b7e:	e004      	b.n	8004b8a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	461a      	mov	r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d9bd      	bls.n	8004b1e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bb4:	611a      	str	r2, [r3, #16]
}
 8004bb6:	bf00      	nop
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b085      	sub	sp, #20
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	e048      	b.n	8004c62 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6919      	ldr	r1, [r3, #16]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	440b      	add	r3, r1
 8004be0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2200      	movs	r2, #0
 8004bec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2200      	movs	r2, #0
 8004c04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004c0c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	3212      	adds	r2, #18
 8004c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d80c      	bhi.n	8004c52 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6919      	ldr	r1, [r3, #16]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	440b      	add	r3, r1
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	60da      	str	r2, [r3, #12]
 8004c50:	e004      	b.n	8004c5c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	461a      	mov	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d9b3      	bls.n	8004bd0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c92:	60da      	str	r2, [r3, #12]
}
 8004c94:	bf00      	nop
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b091      	sub	sp, #68	@ 0x44
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3318      	adds	r3, #24
 8004cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cca:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ce2:	d007      	beq.n	8004cf4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ce8:	3304      	adds	r3, #4
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e115      	b.n	8004f24 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d06:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8004d10:	f023 031f 	bic.w	r3, r3, #31
 8004d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d16:	6852      	ldr	r2, [r2, #4]
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d008      	beq.n	8004d3c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d008      	beq.n	8004d5a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	431a      	orrs	r2, r3
 8004d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d58:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d005      	beq.n	8004d72 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004d7e:	e084      	b.n	8004e8a <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d006      	beq.n	8004da0 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	e005      	b.n	8004dac <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dae:	3301      	adds	r3, #1
 8004db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d902      	bls.n	8004dbe <ETH_Prepare_Tx_Descriptors+0x11e>
 8004db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dba:	3b04      	subs	r3, #4
 8004dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dd4:	d007      	beq.n	8004de6 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dda:	3304      	adds	r3, #4
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d029      	beq.n	8004e3a <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004df4:	2300      	movs	r3, #0
 8004df6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004df8:	e019      	b.n	8004e2e <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8004dfa:	f3bf 8f5f 	dmb	sy
}
 8004dfe:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e0e:	3301      	adds	r3, #1
 8004e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d902      	bls.n	8004e1e <ETH_Prepare_Tx_Descriptors+0x17e>
 8004e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e1a:	3b04      	subs	r3, #4
 8004e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e26:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d3e1      	bcc.n	8004dfa <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8004e36:	2302      	movs	r3, #2
 8004e38:	e074      	b.n	8004f24 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e44:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e48:	3301      	adds	r3, #1
 8004e4a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8004e64:	f023 031f 	bic.w	r3, r3, #31
 8004e68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e6a:	6852      	ldr	r2, [r2, #4]
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e74:	3301      	adds	r3, #1
 8004e76:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004e78:	f3bf 8f5f 	dmb	sy
}
 8004e7c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e88:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f47f af76 	bne.w	8004d80 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d006      	beq.n	8004ea8 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	e005      	b.n	8004eb4 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb2:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	6a3a      	ldr	r2, [r7, #32]
 8004ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8004eca:	f3bf 8f5f 	dmb	sy
}
 8004ece:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eda:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ede:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ee0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ef0:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef6:	613b      	str	r3, [r7, #16]
  return(result);
 8004ef8:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	2301      	movs	r3, #1
 8004efe:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f383 8810 	msr	PRIMASK, r3
}
 8004f06:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0e:	4413      	add	r3, r2
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	f383 8810 	msr	PRIMASK, r3
}
 8004f20:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3744      	adds	r7, #68	@ 0x44
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b089      	sub	sp, #36	@ 0x24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	e16b      	b.n	8005224 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	f040 815a 	bne.w	800521e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d005      	beq.n	8004f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d130      	bne.n	8004fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43db      	mvns	r3, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4013      	ands	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fb8:	2201      	movs	r2, #1
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	091b      	lsrs	r3, r3, #4
 8004fce:	f003 0201 	and.w	r2, r3, #1
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f003 0303 	and.w	r3, r3, #3
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d017      	beq.n	8005020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	43db      	mvns	r3, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4013      	ands	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d123      	bne.n	8005074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	08da      	lsrs	r2, r3, #3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3208      	adds	r2, #8
 8005034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	220f      	movs	r2, #15
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	43db      	mvns	r3, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4013      	ands	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	fa02 f303 	lsl.w	r3, r2, r3
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	4313      	orrs	r3, r2
 8005064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	08da      	lsrs	r2, r3, #3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3208      	adds	r2, #8
 800506e:	69b9      	ldr	r1, [r7, #24]
 8005070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	2203      	movs	r2, #3
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	43db      	mvns	r3, r3
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4013      	ands	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 0203 	and.w	r2, r3, #3
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80b4 	beq.w	800521e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	4b60      	ldr	r3, [pc, #384]	@ (800523c <HAL_GPIO_Init+0x30c>)
 80050bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050be:	4a5f      	ldr	r2, [pc, #380]	@ (800523c <HAL_GPIO_Init+0x30c>)
 80050c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80050c6:	4b5d      	ldr	r3, [pc, #372]	@ (800523c <HAL_GPIO_Init+0x30c>)
 80050c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050d2:	4a5b      	ldr	r2, [pc, #364]	@ (8005240 <HAL_GPIO_Init+0x310>)
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	089b      	lsrs	r3, r3, #2
 80050d8:	3302      	adds	r3, #2
 80050da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	220f      	movs	r2, #15
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	43db      	mvns	r3, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	4013      	ands	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a52      	ldr	r2, [pc, #328]	@ (8005244 <HAL_GPIO_Init+0x314>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d02b      	beq.n	8005156 <HAL_GPIO_Init+0x226>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a51      	ldr	r2, [pc, #324]	@ (8005248 <HAL_GPIO_Init+0x318>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d025      	beq.n	8005152 <HAL_GPIO_Init+0x222>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a50      	ldr	r2, [pc, #320]	@ (800524c <HAL_GPIO_Init+0x31c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01f      	beq.n	800514e <HAL_GPIO_Init+0x21e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a4f      	ldr	r2, [pc, #316]	@ (8005250 <HAL_GPIO_Init+0x320>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d019      	beq.n	800514a <HAL_GPIO_Init+0x21a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a4e      	ldr	r2, [pc, #312]	@ (8005254 <HAL_GPIO_Init+0x324>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d013      	beq.n	8005146 <HAL_GPIO_Init+0x216>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a4d      	ldr	r2, [pc, #308]	@ (8005258 <HAL_GPIO_Init+0x328>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00d      	beq.n	8005142 <HAL_GPIO_Init+0x212>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a4c      	ldr	r2, [pc, #304]	@ (800525c <HAL_GPIO_Init+0x32c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d007      	beq.n	800513e <HAL_GPIO_Init+0x20e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a4b      	ldr	r2, [pc, #300]	@ (8005260 <HAL_GPIO_Init+0x330>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d101      	bne.n	800513a <HAL_GPIO_Init+0x20a>
 8005136:	2307      	movs	r3, #7
 8005138:	e00e      	b.n	8005158 <HAL_GPIO_Init+0x228>
 800513a:	2308      	movs	r3, #8
 800513c:	e00c      	b.n	8005158 <HAL_GPIO_Init+0x228>
 800513e:	2306      	movs	r3, #6
 8005140:	e00a      	b.n	8005158 <HAL_GPIO_Init+0x228>
 8005142:	2305      	movs	r3, #5
 8005144:	e008      	b.n	8005158 <HAL_GPIO_Init+0x228>
 8005146:	2304      	movs	r3, #4
 8005148:	e006      	b.n	8005158 <HAL_GPIO_Init+0x228>
 800514a:	2303      	movs	r3, #3
 800514c:	e004      	b.n	8005158 <HAL_GPIO_Init+0x228>
 800514e:	2302      	movs	r3, #2
 8005150:	e002      	b.n	8005158 <HAL_GPIO_Init+0x228>
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <HAL_GPIO_Init+0x228>
 8005156:	2300      	movs	r3, #0
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	f002 0203 	and.w	r2, r2, #3
 800515e:	0092      	lsls	r2, r2, #2
 8005160:	4093      	lsls	r3, r2
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4313      	orrs	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005168:	4935      	ldr	r1, [pc, #212]	@ (8005240 <HAL_GPIO_Init+0x310>)
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	089b      	lsrs	r3, r3, #2
 800516e:	3302      	adds	r3, #2
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005176:	4b3b      	ldr	r3, [pc, #236]	@ (8005264 <HAL_GPIO_Init+0x334>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	43db      	mvns	r3, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4013      	ands	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800519a:	4a32      	ldr	r2, [pc, #200]	@ (8005264 <HAL_GPIO_Init+0x334>)
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051a0:	4b30      	ldr	r3, [pc, #192]	@ (8005264 <HAL_GPIO_Init+0x334>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	43db      	mvns	r3, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4013      	ands	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051c4:	4a27      	ldr	r2, [pc, #156]	@ (8005264 <HAL_GPIO_Init+0x334>)
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051ca:	4b26      	ldr	r3, [pc, #152]	@ (8005264 <HAL_GPIO_Init+0x334>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	43db      	mvns	r3, r3
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	4013      	ands	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005264 <HAL_GPIO_Init+0x334>)
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005264 <HAL_GPIO_Init+0x334>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	43db      	mvns	r3, r3
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4013      	ands	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005218:	4a12      	ldr	r2, [pc, #72]	@ (8005264 <HAL_GPIO_Init+0x334>)
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	3301      	adds	r3, #1
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b0f      	cmp	r3, #15
 8005228:	f67f ae90 	bls.w	8004f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	3724      	adds	r7, #36	@ 0x24
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40023800 	.word	0x40023800
 8005240:	40013800 	.word	0x40013800
 8005244:	40020000 	.word	0x40020000
 8005248:	40020400 	.word	0x40020400
 800524c:	40020800 	.word	0x40020800
 8005250:	40020c00 	.word	0x40020c00
 8005254:	40021000 	.word	0x40021000
 8005258:	40021400 	.word	0x40021400
 800525c:	40021800 	.word	0x40021800
 8005260:	40021c00 	.word	0x40021c00
 8005264:	40013c00 	.word	0x40013c00

08005268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	807b      	strh	r3, [r7, #2]
 8005274:	4613      	mov	r3, r2
 8005276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005278:	787b      	ldrb	r3, [r7, #1]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800527e:	887a      	ldrh	r2, [r7, #2]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005284:	e003      	b.n	800528e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005286:	887b      	ldrh	r3, [r7, #2]
 8005288:	041a      	lsls	r2, r3, #16
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	619a      	str	r2, [r3, #24]
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
	...

0800529c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e12b      	b.n	8005506 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fd fa52 	bl	800276c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2224      	movs	r2, #36	@ 0x24
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0201 	bic.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005300:	f000 fe90 	bl	8006024 <HAL_RCC_GetPCLK1Freq>
 8005304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	4a81      	ldr	r2, [pc, #516]	@ (8005510 <HAL_I2C_Init+0x274>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d807      	bhi.n	8005320 <HAL_I2C_Init+0x84>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4a80      	ldr	r2, [pc, #512]	@ (8005514 <HAL_I2C_Init+0x278>)
 8005314:	4293      	cmp	r3, r2
 8005316:	bf94      	ite	ls
 8005318:	2301      	movls	r3, #1
 800531a:	2300      	movhi	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	e006      	b.n	800532e <HAL_I2C_Init+0x92>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a7d      	ldr	r2, [pc, #500]	@ (8005518 <HAL_I2C_Init+0x27c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	bf94      	ite	ls
 8005328:	2301      	movls	r3, #1
 800532a:	2300      	movhi	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e0e7      	b.n	8005506 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4a78      	ldr	r2, [pc, #480]	@ (800551c <HAL_I2C_Init+0x280>)
 800533a:	fba2 2303 	umull	r2, r3, r2, r3
 800533e:	0c9b      	lsrs	r3, r3, #18
 8005340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4a6a      	ldr	r2, [pc, #424]	@ (8005510 <HAL_I2C_Init+0x274>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d802      	bhi.n	8005370 <HAL_I2C_Init+0xd4>
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	3301      	adds	r3, #1
 800536e:	e009      	b.n	8005384 <HAL_I2C_Init+0xe8>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005376:	fb02 f303 	mul.w	r3, r2, r3
 800537a:	4a69      	ldr	r2, [pc, #420]	@ (8005520 <HAL_I2C_Init+0x284>)
 800537c:	fba2 2303 	umull	r2, r3, r2, r3
 8005380:	099b      	lsrs	r3, r3, #6
 8005382:	3301      	adds	r3, #1
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	430b      	orrs	r3, r1
 800538a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005396:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	495c      	ldr	r1, [pc, #368]	@ (8005510 <HAL_I2C_Init+0x274>)
 80053a0:	428b      	cmp	r3, r1
 80053a2:	d819      	bhi.n	80053d8 <HAL_I2C_Init+0x13c>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	1e59      	subs	r1, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80053b2:	1c59      	adds	r1, r3, #1
 80053b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80053b8:	400b      	ands	r3, r1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <HAL_I2C_Init+0x138>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1e59      	subs	r1, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80053cc:	3301      	adds	r3, #1
 80053ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d2:	e051      	b.n	8005478 <HAL_I2C_Init+0x1dc>
 80053d4:	2304      	movs	r3, #4
 80053d6:	e04f      	b.n	8005478 <HAL_I2C_Init+0x1dc>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d111      	bne.n	8005404 <HAL_I2C_Init+0x168>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	1e58      	subs	r0, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6859      	ldr	r1, [r3, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	440b      	add	r3, r1
 80053ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80053f2:	3301      	adds	r3, #1
 80053f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bf0c      	ite	eq
 80053fc:	2301      	moveq	r3, #1
 80053fe:	2300      	movne	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	e012      	b.n	800542a <HAL_I2C_Init+0x18e>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	1e58      	subs	r0, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6859      	ldr	r1, [r3, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	0099      	lsls	r1, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	fbb0 f3f3 	udiv	r3, r0, r3
 800541a:	3301      	adds	r3, #1
 800541c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005420:	2b00      	cmp	r3, #0
 8005422:	bf0c      	ite	eq
 8005424:	2301      	moveq	r3, #1
 8005426:	2300      	movne	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_I2C_Init+0x196>
 800542e:	2301      	movs	r3, #1
 8005430:	e022      	b.n	8005478 <HAL_I2C_Init+0x1dc>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10e      	bne.n	8005458 <HAL_I2C_Init+0x1bc>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	1e58      	subs	r0, r3, #1
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6859      	ldr	r1, [r3, #4]
 8005442:	460b      	mov	r3, r1
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	440b      	add	r3, r1
 8005448:	fbb0 f3f3 	udiv	r3, r0, r3
 800544c:	3301      	adds	r3, #1
 800544e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005456:	e00f      	b.n	8005478 <HAL_I2C_Init+0x1dc>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	1e58      	subs	r0, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6859      	ldr	r1, [r3, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	0099      	lsls	r1, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	fbb0 f3f3 	udiv	r3, r0, r3
 800546e:	3301      	adds	r3, #1
 8005470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005474:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	6809      	ldr	r1, [r1, #0]
 800547c:	4313      	orrs	r3, r2
 800547e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69da      	ldr	r2, [r3, #28]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80054a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6911      	ldr	r1, [r2, #16]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	68d2      	ldr	r2, [r2, #12]
 80054b2:	4311      	orrs	r1, r2
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	430b      	orrs	r3, r1
 80054ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695a      	ldr	r2, [r3, #20]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	000186a0 	.word	0x000186a0
 8005514:	001e847f 	.word	0x001e847f
 8005518:	003d08ff 	.word	0x003d08ff
 800551c:	431bde83 	.word	0x431bde83
 8005520:	10624dd3 	.word	0x10624dd3

08005524 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af02      	add	r7, sp, #8
 800552a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e101      	b.n	800573a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7fd fa8b 	bl	8002a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2203      	movs	r2, #3
 800555a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005564:	d102      	bne.n	800556c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f001 ff73 	bl	800745c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6818      	ldr	r0, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	7c1a      	ldrb	r2, [r3, #16]
 800557e:	f88d 2000 	strb.w	r2, [sp]
 8005582:	3304      	adds	r3, #4
 8005584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005586:	f001 ff05 	bl	8007394 <USB_CoreInit>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0ce      	b.n	800573a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2100      	movs	r1, #0
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 ff6b 	bl	800747e <USB_SetCurrentMode>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2202      	movs	r2, #2
 80055b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e0bf      	b.n	800573a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]
 80055be:	e04a      	b.n	8005656 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80055c0:	7bfa      	ldrb	r2, [r7, #15]
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	4613      	mov	r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	3315      	adds	r3, #21
 80055d0:	2201      	movs	r2, #1
 80055d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80055d4:	7bfa      	ldrb	r2, [r7, #15]
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	3314      	adds	r3, #20
 80055e4:	7bfa      	ldrb	r2, [r7, #15]
 80055e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80055e8:	7bfa      	ldrb	r2, [r7, #15]
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
 80055ec:	b298      	uxth	r0, r3
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	332e      	adds	r3, #46	@ 0x2e
 80055fc:	4602      	mov	r2, r0
 80055fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005600:	7bfa      	ldrb	r2, [r7, #15]
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	3318      	adds	r3, #24
 8005610:	2200      	movs	r2, #0
 8005612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005614:	7bfa      	ldrb	r2, [r7, #15]
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	331c      	adds	r3, #28
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005628:	7bfa      	ldrb	r2, [r7, #15]
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	4613      	mov	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	3320      	adds	r3, #32
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800563c:	7bfa      	ldrb	r2, [r7, #15]
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	4613      	mov	r3, r2
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	4413      	add	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	3324      	adds	r3, #36	@ 0x24
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	3301      	adds	r3, #1
 8005654:	73fb      	strb	r3, [r7, #15]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	791b      	ldrb	r3, [r3, #4]
 800565a:	7bfa      	ldrb	r2, [r7, #15]
 800565c:	429a      	cmp	r2, r3
 800565e:	d3af      	bcc.n	80055c0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005660:	2300      	movs	r3, #0
 8005662:	73fb      	strb	r3, [r7, #15]
 8005664:	e044      	b.n	80056f0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005666:	7bfa      	ldrb	r2, [r7, #15]
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005678:	2200      	movs	r2, #0
 800567a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800567c:	7bfa      	ldrb	r2, [r7, #15]
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800568e:	7bfa      	ldrb	r2, [r7, #15]
 8005690:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005692:	7bfa      	ldrb	r2, [r7, #15]
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	4613      	mov	r3, r2
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	440b      	add	r3, r1
 80056a0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80056a4:	2200      	movs	r2, #0
 80056a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80056a8:	7bfa      	ldrb	r2, [r7, #15]
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80056be:	7bfa      	ldrb	r2, [r7, #15]
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	440b      	add	r3, r1
 80056cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80056d4:	7bfa      	ldrb	r2, [r7, #15]
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	4613      	mov	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	3301      	adds	r3, #1
 80056ee:	73fb      	strb	r3, [r7, #15]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	791b      	ldrb	r3, [r3, #4]
 80056f4:	7bfa      	ldrb	r2, [r7, #15]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d3b5      	bcc.n	8005666 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	7c1a      	ldrb	r2, [r3, #16]
 8005702:	f88d 2000 	strb.w	r2, [sp]
 8005706:	3304      	adds	r3, #4
 8005708:	cb0e      	ldmia	r3, {r1, r2, r3}
 800570a:	f001 ff05 	bl	8007518 <USB_DevInit>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e00c      	b.n	800573a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f002 f8cd 	bl	80078d2 <USB_DevDisconnect>

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e267      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d075      	beq.n	800584e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005762:	4b88      	ldr	r3, [pc, #544]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 030c 	and.w	r3, r3, #12
 800576a:	2b04      	cmp	r3, #4
 800576c:	d00c      	beq.n	8005788 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800576e:	4b85      	ldr	r3, [pc, #532]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005776:	2b08      	cmp	r3, #8
 8005778:	d112      	bne.n	80057a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800577a:	4b82      	ldr	r3, [pc, #520]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005782:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005786:	d10b      	bne.n	80057a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005788:	4b7e      	ldr	r3, [pc, #504]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d05b      	beq.n	800584c <HAL_RCC_OscConfig+0x108>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d157      	bne.n	800584c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e242      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a8:	d106      	bne.n	80057b8 <HAL_RCC_OscConfig+0x74>
 80057aa:	4b76      	ldr	r3, [pc, #472]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a75      	ldr	r2, [pc, #468]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	e01d      	b.n	80057f4 <HAL_RCC_OscConfig+0xb0>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057c0:	d10c      	bne.n	80057dc <HAL_RCC_OscConfig+0x98>
 80057c2:	4b70      	ldr	r3, [pc, #448]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a6f      	ldr	r2, [pc, #444]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a6c      	ldr	r2, [pc, #432]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	e00b      	b.n	80057f4 <HAL_RCC_OscConfig+0xb0>
 80057dc:	4b69      	ldr	r3, [pc, #420]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a68      	ldr	r2, [pc, #416]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	4b66      	ldr	r3, [pc, #408]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a65      	ldr	r2, [pc, #404]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d013      	beq.n	8005824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fc:	f7fd fc2e 	bl	800305c <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005804:	f7fd fc2a 	bl	800305c <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b64      	cmp	r3, #100	@ 0x64
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e207      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005816:	4b5b      	ldr	r3, [pc, #364]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0f0      	beq.n	8005804 <HAL_RCC_OscConfig+0xc0>
 8005822:	e014      	b.n	800584e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005824:	f7fd fc1a 	bl	800305c <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800582c:	f7fd fc16 	bl	800305c <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b64      	cmp	r3, #100	@ 0x64
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e1f3      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800583e:	4b51      	ldr	r3, [pc, #324]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1f0      	bne.n	800582c <HAL_RCC_OscConfig+0xe8>
 800584a:	e000      	b.n	800584e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800584c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d063      	beq.n	8005922 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800585a:	4b4a      	ldr	r3, [pc, #296]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 030c 	and.w	r3, r3, #12
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00b      	beq.n	800587e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005866:	4b47      	ldr	r3, [pc, #284]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800586e:	2b08      	cmp	r3, #8
 8005870:	d11c      	bne.n	80058ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005872:	4b44      	ldr	r3, [pc, #272]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d116      	bne.n	80058ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800587e:	4b41      	ldr	r3, [pc, #260]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <HAL_RCC_OscConfig+0x152>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d001      	beq.n	8005896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e1c7      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005896:	4b3b      	ldr	r3, [pc, #236]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	4937      	ldr	r1, [pc, #220]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058aa:	e03a      	b.n	8005922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d020      	beq.n	80058f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058b4:	4b34      	ldr	r3, [pc, #208]	@ (8005988 <HAL_RCC_OscConfig+0x244>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ba:	f7fd fbcf 	bl	800305c <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058c2:	f7fd fbcb 	bl	800305c <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e1a8      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0f0      	beq.n	80058c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e0:	4b28      	ldr	r3, [pc, #160]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	4925      	ldr	r1, [pc, #148]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	600b      	str	r3, [r1, #0]
 80058f4:	e015      	b.n	8005922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058f6:	4b24      	ldr	r3, [pc, #144]	@ (8005988 <HAL_RCC_OscConfig+0x244>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fd fbae 	bl	800305c <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005904:	f7fd fbaa 	bl	800305c <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e187      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005916:	4b1b      	ldr	r3, [pc, #108]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d036      	beq.n	800599c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d016      	beq.n	8005964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005936:	4b15      	ldr	r3, [pc, #84]	@ (800598c <HAL_RCC_OscConfig+0x248>)
 8005938:	2201      	movs	r2, #1
 800593a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593c:	f7fd fb8e 	bl	800305c <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005944:	f7fd fb8a 	bl	800305c <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e167      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005956:	4b0b      	ldr	r3, [pc, #44]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCC_OscConfig+0x200>
 8005962:	e01b      	b.n	800599c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005964:	4b09      	ldr	r3, [pc, #36]	@ (800598c <HAL_RCC_OscConfig+0x248>)
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800596a:	f7fd fb77 	bl	800305c <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005970:	e00e      	b.n	8005990 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005972:	f7fd fb73 	bl	800305c <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d907      	bls.n	8005990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e150      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
 8005984:	40023800 	.word	0x40023800
 8005988:	42470000 	.word	0x42470000
 800598c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005990:	4b88      	ldr	r3, [pc, #544]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1ea      	bne.n	8005972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8097 	beq.w	8005ad8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ae:	4b81      	ldr	r3, [pc, #516]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10f      	bne.n	80059da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ba:	2300      	movs	r3, #0
 80059bc:	60bb      	str	r3, [r7, #8]
 80059be:	4b7d      	ldr	r3, [pc, #500]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 80059c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c2:	4a7c      	ldr	r2, [pc, #496]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 80059c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80059ca:	4b7a      	ldr	r3, [pc, #488]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 80059cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059d2:	60bb      	str	r3, [r7, #8]
 80059d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059d6:	2301      	movs	r3, #1
 80059d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059da:	4b77      	ldr	r3, [pc, #476]	@ (8005bb8 <HAL_RCC_OscConfig+0x474>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d118      	bne.n	8005a18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059e6:	4b74      	ldr	r3, [pc, #464]	@ (8005bb8 <HAL_RCC_OscConfig+0x474>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a73      	ldr	r2, [pc, #460]	@ (8005bb8 <HAL_RCC_OscConfig+0x474>)
 80059ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059f2:	f7fd fb33 	bl	800305c <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059fa:	f7fd fb2f 	bl	800305c <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e10c      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0c:	4b6a      	ldr	r3, [pc, #424]	@ (8005bb8 <HAL_RCC_OscConfig+0x474>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0f0      	beq.n	80059fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d106      	bne.n	8005a2e <HAL_RCC_OscConfig+0x2ea>
 8005a20:	4b64      	ldr	r3, [pc, #400]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a24:	4a63      	ldr	r2, [pc, #396]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a26:	f043 0301 	orr.w	r3, r3, #1
 8005a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a2c:	e01c      	b.n	8005a68 <HAL_RCC_OscConfig+0x324>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	2b05      	cmp	r3, #5
 8005a34:	d10c      	bne.n	8005a50 <HAL_RCC_OscConfig+0x30c>
 8005a36:	4b5f      	ldr	r3, [pc, #380]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a3a:	4a5e      	ldr	r2, [pc, #376]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a3c:	f043 0304 	orr.w	r3, r3, #4
 8005a40:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a42:	4b5c      	ldr	r3, [pc, #368]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a46:	4a5b      	ldr	r2, [pc, #364]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a48:	f043 0301 	orr.w	r3, r3, #1
 8005a4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a4e:	e00b      	b.n	8005a68 <HAL_RCC_OscConfig+0x324>
 8005a50:	4b58      	ldr	r3, [pc, #352]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a54:	4a57      	ldr	r2, [pc, #348]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a56:	f023 0301 	bic.w	r3, r3, #1
 8005a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a5c:	4b55      	ldr	r3, [pc, #340]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a60:	4a54      	ldr	r2, [pc, #336]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a62:	f023 0304 	bic.w	r3, r3, #4
 8005a66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d015      	beq.n	8005a9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a70:	f7fd faf4 	bl	800305c <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a76:	e00a      	b.n	8005a8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a78:	f7fd faf0 	bl	800305c <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e0cb      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a8e:	4b49      	ldr	r3, [pc, #292]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0ee      	beq.n	8005a78 <HAL_RCC_OscConfig+0x334>
 8005a9a:	e014      	b.n	8005ac6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a9c:	f7fd fade 	bl	800305c <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aa2:	e00a      	b.n	8005aba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa4:	f7fd fada 	bl	800305c <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e0b5      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aba:	4b3e      	ldr	r3, [pc, #248]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1ee      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d105      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005acc:	4b39      	ldr	r3, [pc, #228]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad0:	4a38      	ldr	r2, [pc, #224]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ad6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 80a1 	beq.w	8005c24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ae2:	4b34      	ldr	r3, [pc, #208]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 030c 	and.w	r3, r3, #12
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d05c      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d141      	bne.n	8005b7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af6:	4b31      	ldr	r3, [pc, #196]	@ (8005bbc <HAL_RCC_OscConfig+0x478>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afc:	f7fd faae 	bl	800305c <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b04:	f7fd faaa 	bl	800305c <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e087      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b16:	4b27      	ldr	r3, [pc, #156]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69da      	ldr	r2, [r3, #28]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b30:	019b      	lsls	r3, r3, #6
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b38:	085b      	lsrs	r3, r3, #1
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	041b      	lsls	r3, r3, #16
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b44:	061b      	lsls	r3, r3, #24
 8005b46:	491b      	ldr	r1, [pc, #108]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005bbc <HAL_RCC_OscConfig+0x478>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b52:	f7fd fa83 	bl	800305c <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b5a:	f7fd fa7f 	bl	800305c <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e05c      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b6c:	4b11      	ldr	r3, [pc, #68]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0f0      	beq.n	8005b5a <HAL_RCC_OscConfig+0x416>
 8005b78:	e054      	b.n	8005c24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b7a:	4b10      	ldr	r3, [pc, #64]	@ (8005bbc <HAL_RCC_OscConfig+0x478>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b80:	f7fd fa6c 	bl	800305c <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b88:	f7fd fa68 	bl	800305c <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e045      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9a:	4b06      	ldr	r3, [pc, #24]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0x444>
 8005ba6:	e03d      	b.n	8005c24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d107      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e038      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	40007000 	.word	0x40007000
 8005bbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c30 <HAL_RCC_OscConfig+0x4ec>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d028      	beq.n	8005c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d121      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d11a      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005bf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d111      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c06:	085b      	lsrs	r3, r3, #1
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d107      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d001      	beq.n	8005c24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40023800 	.word	0x40023800

08005c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0cc      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c48:	4b68      	ldr	r3, [pc, #416]	@ (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d90c      	bls.n	8005c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c56:	4b65      	ldr	r3, [pc, #404]	@ (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5e:	4b63      	ldr	r3, [pc, #396]	@ (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d001      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0b8      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d020      	beq.n	8005cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c88:	4b59      	ldr	r3, [pc, #356]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	4a58      	ldr	r2, [pc, #352]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ca0:	4b53      	ldr	r3, [pc, #332]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	4a52      	ldr	r2, [pc, #328]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cac:	4b50      	ldr	r3, [pc, #320]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	494d      	ldr	r1, [pc, #308]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d044      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d107      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd2:	4b47      	ldr	r3, [pc, #284]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d119      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e07f      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d003      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d107      	bne.n	8005d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e06f      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d02:	4b3b      	ldr	r3, [pc, #236]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e067      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d12:	4b37      	ldr	r3, [pc, #220]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f023 0203 	bic.w	r2, r3, #3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	4934      	ldr	r1, [pc, #208]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d24:	f7fd f99a 	bl	800305c <HAL_GetTick>
 8005d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d2a:	e00a      	b.n	8005d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d2c:	f7fd f996 	bl	800305c <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e04f      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d42:	4b2b      	ldr	r3, [pc, #172]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 020c 	and.w	r2, r3, #12
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d1eb      	bne.n	8005d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d54:	4b25      	ldr	r3, [pc, #148]	@ (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d20c      	bcs.n	8005d7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d62:	4b22      	ldr	r3, [pc, #136]	@ (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d6a:	4b20      	ldr	r3, [pc, #128]	@ (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d001      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e032      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d88:	4b19      	ldr	r3, [pc, #100]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	4916      	ldr	r1, [pc, #88]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d009      	beq.n	8005dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005da6:	4b12      	ldr	r3, [pc, #72]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	490e      	ldr	r1, [pc, #56]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005dba:	f000 f821 	bl	8005e00 <HAL_RCC_GetSysClockFreq>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	091b      	lsrs	r3, r3, #4
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	490a      	ldr	r1, [pc, #40]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c0>)
 8005dcc:	5ccb      	ldrb	r3, [r1, r3]
 8005dce:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd2:	4a09      	ldr	r2, [pc, #36]	@ (8005df8 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005dd6:	4b09      	ldr	r3, [pc, #36]	@ (8005dfc <HAL_RCC_ClockConfig+0x1c8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fd f8fa 	bl	8002fd4 <HAL_InitTick>

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40023c00 	.word	0x40023c00
 8005df0:	40023800 	.word	0x40023800
 8005df4:	08016538 	.word	0x08016538
 8005df8:	20000078 	.word	0x20000078
 8005dfc:	2000007c 	.word	0x2000007c

08005e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e04:	b094      	sub	sp, #80	@ 0x50
 8005e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e18:	4b79      	ldr	r3, [pc, #484]	@ (8006000 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 030c 	and.w	r3, r3, #12
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d00d      	beq.n	8005e40 <HAL_RCC_GetSysClockFreq+0x40>
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	f200 80e1 	bhi.w	8005fec <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <HAL_RCC_GetSysClockFreq+0x34>
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d003      	beq.n	8005e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8005e32:	e0db      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e34:	4b73      	ldr	r3, [pc, #460]	@ (8006004 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e38:	e0db      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e3a:	4b73      	ldr	r3, [pc, #460]	@ (8006008 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e3e:	e0d8      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e40:	4b6f      	ldr	r3, [pc, #444]	@ (8006000 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e48:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e4a:	4b6d      	ldr	r3, [pc, #436]	@ (8006000 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d063      	beq.n	8005f1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e56:	4b6a      	ldr	r3, [pc, #424]	@ (8006000 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	099b      	lsrs	r3, r3, #6
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e68:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e72:	4622      	mov	r2, r4
 8005e74:	462b      	mov	r3, r5
 8005e76:	f04f 0000 	mov.w	r0, #0
 8005e7a:	f04f 0100 	mov.w	r1, #0
 8005e7e:	0159      	lsls	r1, r3, #5
 8005e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e84:	0150      	lsls	r0, r2, #5
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	1a51      	subs	r1, r2, r1
 8005e8e:	6139      	str	r1, [r7, #16]
 8005e90:	4629      	mov	r1, r5
 8005e92:	eb63 0301 	sbc.w	r3, r3, r1
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ea4:	4659      	mov	r1, fp
 8005ea6:	018b      	lsls	r3, r1, #6
 8005ea8:	4651      	mov	r1, sl
 8005eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005eae:	4651      	mov	r1, sl
 8005eb0:	018a      	lsls	r2, r1, #6
 8005eb2:	4651      	mov	r1, sl
 8005eb4:	ebb2 0801 	subs.w	r8, r2, r1
 8005eb8:	4659      	mov	r1, fp
 8005eba:	eb63 0901 	sbc.w	r9, r3, r1
 8005ebe:	f04f 0200 	mov.w	r2, #0
 8005ec2:	f04f 0300 	mov.w	r3, #0
 8005ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ed2:	4690      	mov	r8, r2
 8005ed4:	4699      	mov	r9, r3
 8005ed6:	4623      	mov	r3, r4
 8005ed8:	eb18 0303 	adds.w	r3, r8, r3
 8005edc:	60bb      	str	r3, [r7, #8]
 8005ede:	462b      	mov	r3, r5
 8005ee0:	eb49 0303 	adc.w	r3, r9, r3
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	f04f 0200 	mov.w	r2, #0
 8005eea:	f04f 0300 	mov.w	r3, #0
 8005eee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	024b      	lsls	r3, r1, #9
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005efc:	4621      	mov	r1, r4
 8005efe:	024a      	lsls	r2, r1, #9
 8005f00:	4610      	mov	r0, r2
 8005f02:	4619      	mov	r1, r3
 8005f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f06:	2200      	movs	r2, #0
 8005f08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f10:	f7fa fe74 	bl	8000bfc <__aeabi_uldivmod>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4613      	mov	r3, r2
 8005f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f1c:	e058      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f1e:	4b38      	ldr	r3, [pc, #224]	@ (8006000 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	099b      	lsrs	r3, r3, #6
 8005f24:	2200      	movs	r2, #0
 8005f26:	4618      	mov	r0, r3
 8005f28:	4611      	mov	r1, r2
 8005f2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f2e:	623b      	str	r3, [r7, #32]
 8005f30:	2300      	movs	r3, #0
 8005f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f38:	4642      	mov	r2, r8
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	f04f 0000 	mov.w	r0, #0
 8005f40:	f04f 0100 	mov.w	r1, #0
 8005f44:	0159      	lsls	r1, r3, #5
 8005f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f4a:	0150      	lsls	r0, r2, #5
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4641      	mov	r1, r8
 8005f52:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f56:	4649      	mov	r1, r9
 8005f58:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f70:	ebb2 040a 	subs.w	r4, r2, sl
 8005f74:	eb63 050b 	sbc.w	r5, r3, fp
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	00eb      	lsls	r3, r5, #3
 8005f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f86:	00e2      	lsls	r2, r4, #3
 8005f88:	4614      	mov	r4, r2
 8005f8a:	461d      	mov	r5, r3
 8005f8c:	4643      	mov	r3, r8
 8005f8e:	18e3      	adds	r3, r4, r3
 8005f90:	603b      	str	r3, [r7, #0]
 8005f92:	464b      	mov	r3, r9
 8005f94:	eb45 0303 	adc.w	r3, r5, r3
 8005f98:	607b      	str	r3, [r7, #4]
 8005f9a:	f04f 0200 	mov.w	r2, #0
 8005f9e:	f04f 0300 	mov.w	r3, #0
 8005fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	028b      	lsls	r3, r1, #10
 8005faa:	4621      	mov	r1, r4
 8005fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fb0:	4621      	mov	r1, r4
 8005fb2:	028a      	lsls	r2, r1, #10
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fba:	2200      	movs	r2, #0
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	61fa      	str	r2, [r7, #28]
 8005fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fc4:	f7fa fe1a 	bl	8000bfc <__aeabi_uldivmod>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4613      	mov	r3, r2
 8005fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006000 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	0c1b      	lsrs	r3, r3, #16
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	3301      	adds	r3, #1
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005fe0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fea:	e002      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fec:	4b05      	ldr	r3, [pc, #20]	@ (8006004 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3750      	adds	r7, #80	@ 0x50
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ffe:	bf00      	nop
 8006000:	40023800 	.word	0x40023800
 8006004:	00f42400 	.word	0x00f42400
 8006008:	007a1200 	.word	0x007a1200

0800600c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006010:	4b03      	ldr	r3, [pc, #12]	@ (8006020 <HAL_RCC_GetHCLKFreq+0x14>)
 8006012:	681b      	ldr	r3, [r3, #0]
}
 8006014:	4618      	mov	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	20000078 	.word	0x20000078

08006024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006028:	f7ff fff0 	bl	800600c <HAL_RCC_GetHCLKFreq>
 800602c:	4602      	mov	r2, r0
 800602e:	4b05      	ldr	r3, [pc, #20]	@ (8006044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	0a9b      	lsrs	r3, r3, #10
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	4903      	ldr	r1, [pc, #12]	@ (8006048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800603a:	5ccb      	ldrb	r3, [r1, r3]
 800603c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006040:	4618      	mov	r0, r3
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40023800 	.word	0x40023800
 8006048:	08016548 	.word	0x08016548

0800604c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006050:	f7ff ffdc 	bl	800600c <HAL_RCC_GetHCLKFreq>
 8006054:	4602      	mov	r2, r0
 8006056:	4b05      	ldr	r3, [pc, #20]	@ (800606c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	0b5b      	lsrs	r3, r3, #13
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	4903      	ldr	r1, [pc, #12]	@ (8006070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006062:	5ccb      	ldrb	r3, [r1, r3]
 8006064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006068:	4618      	mov	r0, r3
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40023800 	.word	0x40023800
 8006070:	08016548 	.word	0x08016548

08006074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e07b      	b.n	800617e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608a:	2b00      	cmp	r3, #0
 800608c:	d108      	bne.n	80060a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006096:	d009      	beq.n	80060ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	61da      	str	r2, [r3, #28]
 800609e:	e005      	b.n	80060ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7fc fb98 	bl	80027fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006130:	ea42 0103 	orr.w	r1, r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006138:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	0c1b      	lsrs	r3, r3, #16
 800614a:	f003 0104 	and.w	r1, r3, #4
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006152:	f003 0210 	and.w	r2, r3, #16
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69da      	ldr	r2, [r3, #28]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800616c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e041      	b.n	800621c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d106      	bne.n	80061b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7fc fb6d 	bl	800288c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4619      	mov	r1, r3
 80061c4:	4610      	mov	r0, r2
 80061c6:	f000 faaf 	bl	8006728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	d001      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e04e      	b.n	80062da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0201 	orr.w	r2, r2, #1
 8006252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a23      	ldr	r2, [pc, #140]	@ (80062e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d022      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006266:	d01d      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1f      	ldr	r2, [pc, #124]	@ (80062ec <HAL_TIM_Base_Start_IT+0xc8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d018      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1e      	ldr	r2, [pc, #120]	@ (80062f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d013      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a1c      	ldr	r2, [pc, #112]	@ (80062f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00e      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1b      	ldr	r2, [pc, #108]	@ (80062f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d009      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a19      	ldr	r2, [pc, #100]	@ (80062fc <HAL_TIM_Base_Start_IT+0xd8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d004      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a18      	ldr	r2, [pc, #96]	@ (8006300 <HAL_TIM_Base_Start_IT+0xdc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d111      	bne.n	80062c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b06      	cmp	r3, #6
 80062b4:	d010      	beq.n	80062d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0201 	orr.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c6:	e007      	b.n	80062d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0201 	orr.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40010000 	.word	0x40010000
 80062ec:	40000400 	.word	0x40000400
 80062f0:	40000800 	.word	0x40000800
 80062f4:	40000c00 	.word	0x40000c00
 80062f8:	40010400 	.word	0x40010400
 80062fc:	40014000 	.word	0x40014000
 8006300:	40001800 	.word	0x40001800

08006304 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0201 	bic.w	r2, r2, #1
 800631a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6a1a      	ldr	r2, [r3, #32]
 8006322:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006326:	4013      	ands	r3, r2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10f      	bne.n	800634c <HAL_TIM_Base_Stop_IT+0x48>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6a1a      	ldr	r2, [r3, #32]
 8006332:	f240 4344 	movw	r3, #1092	@ 0x444
 8006336:	4013      	ands	r3, r2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d107      	bne.n	800634c <HAL_TIM_Base_Stop_IT+0x48>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0201 	bic.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e041      	b.n	80063f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d106      	bne.n	800638e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f839 	bl	8006400 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2202      	movs	r2, #2
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f000 f9c1 	bl	8006728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800642e:	2302      	movs	r3, #2
 8006430:	e0ae      	b.n	8006590 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b0c      	cmp	r3, #12
 800643e:	f200 809f 	bhi.w	8006580 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006442:	a201      	add	r2, pc, #4	@ (adr r2, 8006448 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	0800647d 	.word	0x0800647d
 800644c:	08006581 	.word	0x08006581
 8006450:	08006581 	.word	0x08006581
 8006454:	08006581 	.word	0x08006581
 8006458:	080064bd 	.word	0x080064bd
 800645c:	08006581 	.word	0x08006581
 8006460:	08006581 	.word	0x08006581
 8006464:	08006581 	.word	0x08006581
 8006468:	080064ff 	.word	0x080064ff
 800646c:	08006581 	.word	0x08006581
 8006470:	08006581 	.word	0x08006581
 8006474:	08006581 	.word	0x08006581
 8006478:	0800653f 	.word	0x0800653f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f9fc 	bl	8006880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0208 	orr.w	r2, r2, #8
 8006496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0204 	bic.w	r2, r2, #4
 80064a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6999      	ldr	r1, [r3, #24]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	691a      	ldr	r2, [r3, #16]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	619a      	str	r2, [r3, #24]
      break;
 80064ba:	e064      	b.n	8006586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fa4c 	bl	8006960 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699a      	ldr	r2, [r3, #24]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6999      	ldr	r1, [r3, #24]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	021a      	lsls	r2, r3, #8
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	619a      	str	r2, [r3, #24]
      break;
 80064fc:	e043      	b.n	8006586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	4618      	mov	r0, r3
 8006506:	f000 faa1 	bl	8006a4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69da      	ldr	r2, [r3, #28]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0208 	orr.w	r2, r2, #8
 8006518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0204 	bic.w	r2, r2, #4
 8006528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69d9      	ldr	r1, [r3, #28]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	691a      	ldr	r2, [r3, #16]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	61da      	str	r2, [r3, #28]
      break;
 800653c:	e023      	b.n	8006586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	4618      	mov	r0, r3
 8006546:	f000 faf5 	bl	8006b34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69da      	ldr	r2, [r3, #28]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69da      	ldr	r2, [r3, #28]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69d9      	ldr	r1, [r3, #28]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	021a      	lsls	r2, r3, #8
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	61da      	str	r2, [r3, #28]
      break;
 800657e:	e002      	b.n	8006586 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	75fb      	strb	r3, [r7, #23]
      break;
 8006584:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800658e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d101      	bne.n	80065b4 <HAL_TIM_ConfigClockSource+0x1c>
 80065b0:	2302      	movs	r3, #2
 80065b2:	e0b4      	b.n	800671e <HAL_TIM_ConfigClockSource+0x186>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80065d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ec:	d03e      	beq.n	800666c <HAL_TIM_ConfigClockSource+0xd4>
 80065ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065f2:	f200 8087 	bhi.w	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 80065f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065fa:	f000 8086 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x172>
 80065fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006602:	d87f      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 8006604:	2b70      	cmp	r3, #112	@ 0x70
 8006606:	d01a      	beq.n	800663e <HAL_TIM_ConfigClockSource+0xa6>
 8006608:	2b70      	cmp	r3, #112	@ 0x70
 800660a:	d87b      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 800660c:	2b60      	cmp	r3, #96	@ 0x60
 800660e:	d050      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0x11a>
 8006610:	2b60      	cmp	r3, #96	@ 0x60
 8006612:	d877      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 8006614:	2b50      	cmp	r3, #80	@ 0x50
 8006616:	d03c      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0xfa>
 8006618:	2b50      	cmp	r3, #80	@ 0x50
 800661a:	d873      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 800661c:	2b40      	cmp	r3, #64	@ 0x40
 800661e:	d058      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0x13a>
 8006620:	2b40      	cmp	r3, #64	@ 0x40
 8006622:	d86f      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 8006624:	2b30      	cmp	r3, #48	@ 0x30
 8006626:	d064      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006628:	2b30      	cmp	r3, #48	@ 0x30
 800662a:	d86b      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 800662c:	2b20      	cmp	r3, #32
 800662e:	d060      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006630:	2b20      	cmp	r3, #32
 8006632:	d867      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d05c      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006638:	2b10      	cmp	r3, #16
 800663a:	d05a      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x15a>
 800663c:	e062      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800664e:	f000 fb41 	bl	8006cd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006660:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	609a      	str	r2, [r3, #8]
      break;
 800666a:	e04f      	b.n	800670c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800667c:	f000 fb2a 	bl	8006cd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800668e:	609a      	str	r2, [r3, #8]
      break;
 8006690:	e03c      	b.n	800670c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800669e:	461a      	mov	r2, r3
 80066a0:	f000 fa9e 	bl	8006be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2150      	movs	r1, #80	@ 0x50
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 faf7 	bl	8006c9e <TIM_ITRx_SetConfig>
      break;
 80066b0:	e02c      	b.n	800670c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066be:	461a      	mov	r2, r3
 80066c0:	f000 fabd 	bl	8006c3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2160      	movs	r1, #96	@ 0x60
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fae7 	bl	8006c9e <TIM_ITRx_SetConfig>
      break;
 80066d0:	e01c      	b.n	800670c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066de:	461a      	mov	r2, r3
 80066e0:	f000 fa7e 	bl	8006be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2140      	movs	r1, #64	@ 0x40
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fad7 	bl	8006c9e <TIM_ITRx_SetConfig>
      break;
 80066f0:	e00c      	b.n	800670c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4619      	mov	r1, r3
 80066fc:	4610      	mov	r0, r2
 80066fe:	f000 face 	bl	8006c9e <TIM_ITRx_SetConfig>
      break;
 8006702:	e003      	b.n	800670c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	73fb      	strb	r3, [r7, #15]
      break;
 8006708:	e000      	b.n	800670c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800670a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800671c:	7bfb      	ldrb	r3, [r7, #15]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a46      	ldr	r2, [pc, #280]	@ (8006854 <TIM_Base_SetConfig+0x12c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d013      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006746:	d00f      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a43      	ldr	r2, [pc, #268]	@ (8006858 <TIM_Base_SetConfig+0x130>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00b      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a42      	ldr	r2, [pc, #264]	@ (800685c <TIM_Base_SetConfig+0x134>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d007      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a41      	ldr	r2, [pc, #260]	@ (8006860 <TIM_Base_SetConfig+0x138>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d003      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a40      	ldr	r2, [pc, #256]	@ (8006864 <TIM_Base_SetConfig+0x13c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d108      	bne.n	800677a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800676e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a35      	ldr	r2, [pc, #212]	@ (8006854 <TIM_Base_SetConfig+0x12c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d02b      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006788:	d027      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a32      	ldr	r2, [pc, #200]	@ (8006858 <TIM_Base_SetConfig+0x130>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d023      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a31      	ldr	r2, [pc, #196]	@ (800685c <TIM_Base_SetConfig+0x134>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d01f      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a30      	ldr	r2, [pc, #192]	@ (8006860 <TIM_Base_SetConfig+0x138>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d01b      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a2f      	ldr	r2, [pc, #188]	@ (8006864 <TIM_Base_SetConfig+0x13c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d017      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a2e      	ldr	r2, [pc, #184]	@ (8006868 <TIM_Base_SetConfig+0x140>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d013      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a2d      	ldr	r2, [pc, #180]	@ (800686c <TIM_Base_SetConfig+0x144>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00f      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006870 <TIM_Base_SetConfig+0x148>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00b      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a2b      	ldr	r2, [pc, #172]	@ (8006874 <TIM_Base_SetConfig+0x14c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d007      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006878 <TIM_Base_SetConfig+0x150>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a29      	ldr	r2, [pc, #164]	@ (800687c <TIM_Base_SetConfig+0x154>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d108      	bne.n	80067ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a10      	ldr	r2, [pc, #64]	@ (8006854 <TIM_Base_SetConfig+0x12c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_Base_SetConfig+0xf8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a12      	ldr	r2, [pc, #72]	@ (8006864 <TIM_Base_SetConfig+0x13c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d103      	bne.n	8006828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b01      	cmp	r3, #1
 8006838:	d105      	bne.n	8006846 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f023 0201 	bic.w	r2, r3, #1
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	611a      	str	r2, [r3, #16]
  }
}
 8006846:	bf00      	nop
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	40010000 	.word	0x40010000
 8006858:	40000400 	.word	0x40000400
 800685c:	40000800 	.word	0x40000800
 8006860:	40000c00 	.word	0x40000c00
 8006864:	40010400 	.word	0x40010400
 8006868:	40014000 	.word	0x40014000
 800686c:	40014400 	.word	0x40014400
 8006870:	40014800 	.word	0x40014800
 8006874:	40001800 	.word	0x40001800
 8006878:	40001c00 	.word	0x40001c00
 800687c:	40002000 	.word	0x40002000

08006880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	f023 0201 	bic.w	r2, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 0303 	bic.w	r3, r3, #3
 80068b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	4313      	orrs	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f023 0302 	bic.w	r3, r3, #2
 80068c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a20      	ldr	r2, [pc, #128]	@ (8006958 <TIM_OC1_SetConfig+0xd8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d003      	beq.n	80068e4 <TIM_OC1_SetConfig+0x64>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a1f      	ldr	r2, [pc, #124]	@ (800695c <TIM_OC1_SetConfig+0xdc>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d10c      	bne.n	80068fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f023 0308 	bic.w	r3, r3, #8
 80068ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f023 0304 	bic.w	r3, r3, #4
 80068fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a15      	ldr	r2, [pc, #84]	@ (8006958 <TIM_OC1_SetConfig+0xd8>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d003      	beq.n	800690e <TIM_OC1_SetConfig+0x8e>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a14      	ldr	r2, [pc, #80]	@ (800695c <TIM_OC1_SetConfig+0xdc>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d111      	bne.n	8006932 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800691c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	621a      	str	r2, [r3, #32]
}
 800694c:	bf00      	nop
 800694e:	371c      	adds	r7, #28
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	40010000 	.word	0x40010000
 800695c:	40010400 	.word	0x40010400

08006960 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	f023 0210 	bic.w	r2, r3, #16
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800698e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f023 0320 	bic.w	r3, r3, #32
 80069aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	011b      	lsls	r3, r3, #4
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a22      	ldr	r2, [pc, #136]	@ (8006a44 <TIM_OC2_SetConfig+0xe4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_OC2_SetConfig+0x68>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a21      	ldr	r2, [pc, #132]	@ (8006a48 <TIM_OC2_SetConfig+0xe8>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d10d      	bne.n	80069e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a17      	ldr	r2, [pc, #92]	@ (8006a44 <TIM_OC2_SetConfig+0xe4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d003      	beq.n	80069f4 <TIM_OC2_SetConfig+0x94>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a16      	ldr	r2, [pc, #88]	@ (8006a48 <TIM_OC2_SetConfig+0xe8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d113      	bne.n	8006a1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	621a      	str	r2, [r3, #32]
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	40010000 	.word	0x40010000
 8006a48:	40010400 	.word	0x40010400

08006a4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 0303 	bic.w	r3, r3, #3
 8006a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	021b      	lsls	r3, r3, #8
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a21      	ldr	r2, [pc, #132]	@ (8006b2c <TIM_OC3_SetConfig+0xe0>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d003      	beq.n	8006ab2 <TIM_OC3_SetConfig+0x66>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a20      	ldr	r2, [pc, #128]	@ (8006b30 <TIM_OC3_SetConfig+0xe4>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d10d      	bne.n	8006ace <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	021b      	lsls	r3, r3, #8
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a16      	ldr	r2, [pc, #88]	@ (8006b2c <TIM_OC3_SetConfig+0xe0>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d003      	beq.n	8006ade <TIM_OC3_SetConfig+0x92>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a15      	ldr	r2, [pc, #84]	@ (8006b30 <TIM_OC3_SetConfig+0xe4>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d113      	bne.n	8006b06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	621a      	str	r2, [r3, #32]
}
 8006b20:	bf00      	nop
 8006b22:	371c      	adds	r7, #28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	40010000 	.word	0x40010000
 8006b30:	40010400 	.word	0x40010400

08006b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	021b      	lsls	r3, r3, #8
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	031b      	lsls	r3, r3, #12
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a12      	ldr	r2, [pc, #72]	@ (8006bd8 <TIM_OC4_SetConfig+0xa4>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d003      	beq.n	8006b9c <TIM_OC4_SetConfig+0x68>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a11      	ldr	r2, [pc, #68]	@ (8006bdc <TIM_OC4_SetConfig+0xa8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d109      	bne.n	8006bb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ba2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	019b      	lsls	r3, r3, #6
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	621a      	str	r2, [r3, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	40010400 	.word	0x40010400

08006be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	f023 0201 	bic.w	r2, r3, #1
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f023 030a 	bic.w	r3, r3, #10
 8006c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	621a      	str	r2, [r3, #32]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b087      	sub	sp, #28
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	f023 0210 	bic.w	r2, r3, #16
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	031b      	lsls	r3, r3, #12
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	621a      	str	r2, [r3, #32]
}
 8006c92:	bf00      	nop
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b085      	sub	sp, #20
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	f043 0307 	orr.w	r3, r3, #7
 8006cc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	609a      	str	r2, [r3, #8]
}
 8006cc8:	bf00      	nop
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	021a      	lsls	r2, r3, #8
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	609a      	str	r2, [r3, #8]
}
 8006d08:	bf00      	nop
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e05a      	b.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a21      	ldr	r2, [pc, #132]	@ (8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d022      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d78:	d01d      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8006df4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d018      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a1b      	ldr	r2, [pc, #108]	@ (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d013      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1a      	ldr	r2, [pc, #104]	@ (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00e      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a18      	ldr	r2, [pc, #96]	@ (8006e00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d009      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a17      	ldr	r2, [pc, #92]	@ (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d004      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a15      	ldr	r2, [pc, #84]	@ (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d10c      	bne.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	40010000 	.word	0x40010000
 8006df4:	40000400 	.word	0x40000400
 8006df8:	40000800 	.word	0x40000800
 8006dfc:	40000c00 	.word	0x40000c00
 8006e00:	40010400 	.word	0x40010400
 8006e04:	40014000 	.word	0x40014000
 8006e08:	40001800 	.word	0x40001800

08006e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e042      	b.n	8006ea4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fb fd9a 	bl	800296c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2224      	movs	r2, #36	@ 0x24
 8006e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f82b 	bl	8006eac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691a      	ldr	r2, [r3, #16]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	695a      	ldr	r2, [r3, #20]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2220      	movs	r2, #32
 8006e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb0:	b0c0      	sub	sp, #256	@ 0x100
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec8:	68d9      	ldr	r1, [r3, #12]
 8006eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	ea40 0301 	orr.w	r3, r0, r1
 8006ed4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	431a      	orrs	r2, r3
 8006eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f04:	f021 010c 	bic.w	r1, r1, #12
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f12:	430b      	orrs	r3, r1
 8006f14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f26:	6999      	ldr	r1, [r3, #24]
 8006f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	ea40 0301 	orr.w	r3, r0, r1
 8006f32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	4b8f      	ldr	r3, [pc, #572]	@ (8007178 <UART_SetConfig+0x2cc>)
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d005      	beq.n	8006f4c <UART_SetConfig+0xa0>
 8006f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	4b8d      	ldr	r3, [pc, #564]	@ (800717c <UART_SetConfig+0x2d0>)
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d104      	bne.n	8006f56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f4c:	f7ff f87e 	bl	800604c <HAL_RCC_GetPCLK2Freq>
 8006f50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f54:	e003      	b.n	8006f5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f56:	f7ff f865 	bl	8006024 <HAL_RCC_GetPCLK1Freq>
 8006f5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f68:	f040 810c 	bne.w	8007184 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f70:	2200      	movs	r2, #0
 8006f72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f7e:	4622      	mov	r2, r4
 8006f80:	462b      	mov	r3, r5
 8006f82:	1891      	adds	r1, r2, r2
 8006f84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f86:	415b      	adcs	r3, r3
 8006f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f8e:	4621      	mov	r1, r4
 8006f90:	eb12 0801 	adds.w	r8, r2, r1
 8006f94:	4629      	mov	r1, r5
 8006f96:	eb43 0901 	adc.w	r9, r3, r1
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	f04f 0300 	mov.w	r3, #0
 8006fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fae:	4690      	mov	r8, r2
 8006fb0:	4699      	mov	r9, r3
 8006fb2:	4623      	mov	r3, r4
 8006fb4:	eb18 0303 	adds.w	r3, r8, r3
 8006fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fbc:	462b      	mov	r3, r5
 8006fbe:	eb49 0303 	adc.w	r3, r9, r3
 8006fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006fd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fda:	460b      	mov	r3, r1
 8006fdc:	18db      	adds	r3, r3, r3
 8006fde:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	eb42 0303 	adc.w	r3, r2, r3
 8006fe6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fe8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006fec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ff0:	f7f9 fe04 	bl	8000bfc <__aeabi_uldivmod>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4b61      	ldr	r3, [pc, #388]	@ (8007180 <UART_SetConfig+0x2d4>)
 8006ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8006ffe:	095b      	lsrs	r3, r3, #5
 8007000:	011c      	lsls	r4, r3, #4
 8007002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007006:	2200      	movs	r2, #0
 8007008:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800700c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007010:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007014:	4642      	mov	r2, r8
 8007016:	464b      	mov	r3, r9
 8007018:	1891      	adds	r1, r2, r2
 800701a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800701c:	415b      	adcs	r3, r3
 800701e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007020:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007024:	4641      	mov	r1, r8
 8007026:	eb12 0a01 	adds.w	sl, r2, r1
 800702a:	4649      	mov	r1, r9
 800702c:	eb43 0b01 	adc.w	fp, r3, r1
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800703c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007040:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007044:	4692      	mov	sl, r2
 8007046:	469b      	mov	fp, r3
 8007048:	4643      	mov	r3, r8
 800704a:	eb1a 0303 	adds.w	r3, sl, r3
 800704e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007052:	464b      	mov	r3, r9
 8007054:	eb4b 0303 	adc.w	r3, fp, r3
 8007058:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800705c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007068:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800706c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007070:	460b      	mov	r3, r1
 8007072:	18db      	adds	r3, r3, r3
 8007074:	643b      	str	r3, [r7, #64]	@ 0x40
 8007076:	4613      	mov	r3, r2
 8007078:	eb42 0303 	adc.w	r3, r2, r3
 800707c:	647b      	str	r3, [r7, #68]	@ 0x44
 800707e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007082:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007086:	f7f9 fdb9 	bl	8000bfc <__aeabi_uldivmod>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	4611      	mov	r1, r2
 8007090:	4b3b      	ldr	r3, [pc, #236]	@ (8007180 <UART_SetConfig+0x2d4>)
 8007092:	fba3 2301 	umull	r2, r3, r3, r1
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	2264      	movs	r2, #100	@ 0x64
 800709a:	fb02 f303 	mul.w	r3, r2, r3
 800709e:	1acb      	subs	r3, r1, r3
 80070a0:	00db      	lsls	r3, r3, #3
 80070a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80070a6:	4b36      	ldr	r3, [pc, #216]	@ (8007180 <UART_SetConfig+0x2d4>)
 80070a8:	fba3 2302 	umull	r2, r3, r3, r2
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80070b4:	441c      	add	r4, r3
 80070b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070c8:	4642      	mov	r2, r8
 80070ca:	464b      	mov	r3, r9
 80070cc:	1891      	adds	r1, r2, r2
 80070ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070d0:	415b      	adcs	r3, r3
 80070d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070d8:	4641      	mov	r1, r8
 80070da:	1851      	adds	r1, r2, r1
 80070dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80070de:	4649      	mov	r1, r9
 80070e0:	414b      	adcs	r3, r1
 80070e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	f04f 0300 	mov.w	r3, #0
 80070ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80070f0:	4659      	mov	r1, fp
 80070f2:	00cb      	lsls	r3, r1, #3
 80070f4:	4651      	mov	r1, sl
 80070f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070fa:	4651      	mov	r1, sl
 80070fc:	00ca      	lsls	r2, r1, #3
 80070fe:	4610      	mov	r0, r2
 8007100:	4619      	mov	r1, r3
 8007102:	4603      	mov	r3, r0
 8007104:	4642      	mov	r2, r8
 8007106:	189b      	adds	r3, r3, r2
 8007108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800710c:	464b      	mov	r3, r9
 800710e:	460a      	mov	r2, r1
 8007110:	eb42 0303 	adc.w	r3, r2, r3
 8007114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007124:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007128:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800712c:	460b      	mov	r3, r1
 800712e:	18db      	adds	r3, r3, r3
 8007130:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007132:	4613      	mov	r3, r2
 8007134:	eb42 0303 	adc.w	r3, r2, r3
 8007138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800713a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800713e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007142:	f7f9 fd5b 	bl	8000bfc <__aeabi_uldivmod>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	4b0d      	ldr	r3, [pc, #52]	@ (8007180 <UART_SetConfig+0x2d4>)
 800714c:	fba3 1302 	umull	r1, r3, r3, r2
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	2164      	movs	r1, #100	@ 0x64
 8007154:	fb01 f303 	mul.w	r3, r1, r3
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	3332      	adds	r3, #50	@ 0x32
 800715e:	4a08      	ldr	r2, [pc, #32]	@ (8007180 <UART_SetConfig+0x2d4>)
 8007160:	fba2 2303 	umull	r2, r3, r2, r3
 8007164:	095b      	lsrs	r3, r3, #5
 8007166:	f003 0207 	and.w	r2, r3, #7
 800716a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4422      	add	r2, r4
 8007172:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007174:	e106      	b.n	8007384 <UART_SetConfig+0x4d8>
 8007176:	bf00      	nop
 8007178:	40011000 	.word	0x40011000
 800717c:	40011400 	.word	0x40011400
 8007180:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007188:	2200      	movs	r2, #0
 800718a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800718e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007192:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007196:	4642      	mov	r2, r8
 8007198:	464b      	mov	r3, r9
 800719a:	1891      	adds	r1, r2, r2
 800719c:	6239      	str	r1, [r7, #32]
 800719e:	415b      	adcs	r3, r3
 80071a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80071a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071a6:	4641      	mov	r1, r8
 80071a8:	1854      	adds	r4, r2, r1
 80071aa:	4649      	mov	r1, r9
 80071ac:	eb43 0501 	adc.w	r5, r3, r1
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	00eb      	lsls	r3, r5, #3
 80071ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071be:	00e2      	lsls	r2, r4, #3
 80071c0:	4614      	mov	r4, r2
 80071c2:	461d      	mov	r5, r3
 80071c4:	4643      	mov	r3, r8
 80071c6:	18e3      	adds	r3, r4, r3
 80071c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071cc:	464b      	mov	r3, r9
 80071ce:	eb45 0303 	adc.w	r3, r5, r3
 80071d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071e6:	f04f 0200 	mov.w	r2, #0
 80071ea:	f04f 0300 	mov.w	r3, #0
 80071ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80071f2:	4629      	mov	r1, r5
 80071f4:	008b      	lsls	r3, r1, #2
 80071f6:	4621      	mov	r1, r4
 80071f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071fc:	4621      	mov	r1, r4
 80071fe:	008a      	lsls	r2, r1, #2
 8007200:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007204:	f7f9 fcfa 	bl	8000bfc <__aeabi_uldivmod>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4b60      	ldr	r3, [pc, #384]	@ (8007390 <UART_SetConfig+0x4e4>)
 800720e:	fba3 2302 	umull	r2, r3, r3, r2
 8007212:	095b      	lsrs	r3, r3, #5
 8007214:	011c      	lsls	r4, r3, #4
 8007216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800721a:	2200      	movs	r2, #0
 800721c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007220:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007224:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007228:	4642      	mov	r2, r8
 800722a:	464b      	mov	r3, r9
 800722c:	1891      	adds	r1, r2, r2
 800722e:	61b9      	str	r1, [r7, #24]
 8007230:	415b      	adcs	r3, r3
 8007232:	61fb      	str	r3, [r7, #28]
 8007234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007238:	4641      	mov	r1, r8
 800723a:	1851      	adds	r1, r2, r1
 800723c:	6139      	str	r1, [r7, #16]
 800723e:	4649      	mov	r1, r9
 8007240:	414b      	adcs	r3, r1
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	f04f 0200 	mov.w	r2, #0
 8007248:	f04f 0300 	mov.w	r3, #0
 800724c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007250:	4659      	mov	r1, fp
 8007252:	00cb      	lsls	r3, r1, #3
 8007254:	4651      	mov	r1, sl
 8007256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800725a:	4651      	mov	r1, sl
 800725c:	00ca      	lsls	r2, r1, #3
 800725e:	4610      	mov	r0, r2
 8007260:	4619      	mov	r1, r3
 8007262:	4603      	mov	r3, r0
 8007264:	4642      	mov	r2, r8
 8007266:	189b      	adds	r3, r3, r2
 8007268:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800726c:	464b      	mov	r3, r9
 800726e:	460a      	mov	r2, r1
 8007270:	eb42 0303 	adc.w	r3, r2, r3
 8007274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007282:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007290:	4649      	mov	r1, r9
 8007292:	008b      	lsls	r3, r1, #2
 8007294:	4641      	mov	r1, r8
 8007296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800729a:	4641      	mov	r1, r8
 800729c:	008a      	lsls	r2, r1, #2
 800729e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80072a2:	f7f9 fcab 	bl	8000bfc <__aeabi_uldivmod>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4611      	mov	r1, r2
 80072ac:	4b38      	ldr	r3, [pc, #224]	@ (8007390 <UART_SetConfig+0x4e4>)
 80072ae:	fba3 2301 	umull	r2, r3, r3, r1
 80072b2:	095b      	lsrs	r3, r3, #5
 80072b4:	2264      	movs	r2, #100	@ 0x64
 80072b6:	fb02 f303 	mul.w	r3, r2, r3
 80072ba:	1acb      	subs	r3, r1, r3
 80072bc:	011b      	lsls	r3, r3, #4
 80072be:	3332      	adds	r3, #50	@ 0x32
 80072c0:	4a33      	ldr	r2, [pc, #204]	@ (8007390 <UART_SetConfig+0x4e4>)
 80072c2:	fba2 2303 	umull	r2, r3, r2, r3
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072cc:	441c      	add	r4, r3
 80072ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072d2:	2200      	movs	r2, #0
 80072d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80072d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80072d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80072dc:	4642      	mov	r2, r8
 80072de:	464b      	mov	r3, r9
 80072e0:	1891      	adds	r1, r2, r2
 80072e2:	60b9      	str	r1, [r7, #8]
 80072e4:	415b      	adcs	r3, r3
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072ec:	4641      	mov	r1, r8
 80072ee:	1851      	adds	r1, r2, r1
 80072f0:	6039      	str	r1, [r7, #0]
 80072f2:	4649      	mov	r1, r9
 80072f4:	414b      	adcs	r3, r1
 80072f6:	607b      	str	r3, [r7, #4]
 80072f8:	f04f 0200 	mov.w	r2, #0
 80072fc:	f04f 0300 	mov.w	r3, #0
 8007300:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007304:	4659      	mov	r1, fp
 8007306:	00cb      	lsls	r3, r1, #3
 8007308:	4651      	mov	r1, sl
 800730a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800730e:	4651      	mov	r1, sl
 8007310:	00ca      	lsls	r2, r1, #3
 8007312:	4610      	mov	r0, r2
 8007314:	4619      	mov	r1, r3
 8007316:	4603      	mov	r3, r0
 8007318:	4642      	mov	r2, r8
 800731a:	189b      	adds	r3, r3, r2
 800731c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800731e:	464b      	mov	r3, r9
 8007320:	460a      	mov	r2, r1
 8007322:	eb42 0303 	adc.w	r3, r2, r3
 8007326:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	663b      	str	r3, [r7, #96]	@ 0x60
 8007332:	667a      	str	r2, [r7, #100]	@ 0x64
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	f04f 0300 	mov.w	r3, #0
 800733c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007340:	4649      	mov	r1, r9
 8007342:	008b      	lsls	r3, r1, #2
 8007344:	4641      	mov	r1, r8
 8007346:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800734a:	4641      	mov	r1, r8
 800734c:	008a      	lsls	r2, r1, #2
 800734e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007352:	f7f9 fc53 	bl	8000bfc <__aeabi_uldivmod>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	4b0d      	ldr	r3, [pc, #52]	@ (8007390 <UART_SetConfig+0x4e4>)
 800735c:	fba3 1302 	umull	r1, r3, r3, r2
 8007360:	095b      	lsrs	r3, r3, #5
 8007362:	2164      	movs	r1, #100	@ 0x64
 8007364:	fb01 f303 	mul.w	r3, r1, r3
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	011b      	lsls	r3, r3, #4
 800736c:	3332      	adds	r3, #50	@ 0x32
 800736e:	4a08      	ldr	r2, [pc, #32]	@ (8007390 <UART_SetConfig+0x4e4>)
 8007370:	fba2 2303 	umull	r2, r3, r2, r3
 8007374:	095b      	lsrs	r3, r3, #5
 8007376:	f003 020f 	and.w	r2, r3, #15
 800737a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4422      	add	r2, r4
 8007382:	609a      	str	r2, [r3, #8]
}
 8007384:	bf00      	nop
 8007386:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800738a:	46bd      	mov	sp, r7
 800738c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007390:	51eb851f 	.word	0x51eb851f

08007394 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007394:	b084      	sub	sp, #16
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	f107 001c 	add.w	r0, r7, #28
 80073a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d123      	bne.n	80073f6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80073c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d105      	bne.n	80073ea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 faa0 	bl	8007930 <USB_CoreReset>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73fb      	strb	r3, [r7, #15]
 80073f4:	e01b      	b.n	800742e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fa94 	bl	8007930 <USB_CoreReset>
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800740c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007410:	2b00      	cmp	r3, #0
 8007412:	d106      	bne.n	8007422 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007418:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007420:	e005      	b.n	800742e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007426:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800742e:	7fbb      	ldrb	r3, [r7, #30]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d10b      	bne.n	800744c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f043 0206 	orr.w	r2, r3, #6
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f043 0220 	orr.w	r2, r3, #32
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007458:	b004      	add	sp, #16
 800745a:	4770      	bx	lr

0800745c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f023 0201 	bic.w	r2, r3, #1
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800749a:	78fb      	ldrb	r3, [r7, #3]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d115      	bne.n	80074cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074ac:	200a      	movs	r0, #10
 80074ae:	f7fb fde1 	bl	8003074 <HAL_Delay>
      ms += 10U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	330a      	adds	r3, #10
 80074b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fa2b 	bl	8007914 <USB_GetMode>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d01e      	beq.n	8007502 <USB_SetCurrentMode+0x84>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80074c8:	d9f0      	bls.n	80074ac <USB_SetCurrentMode+0x2e>
 80074ca:	e01a      	b.n	8007502 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074cc:	78fb      	ldrb	r3, [r7, #3]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d115      	bne.n	80074fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074de:	200a      	movs	r0, #10
 80074e0:	f7fb fdc8 	bl	8003074 <HAL_Delay>
      ms += 10U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	330a      	adds	r3, #10
 80074e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fa12 	bl	8007914 <USB_GetMode>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d005      	beq.n	8007502 <USB_SetCurrentMode+0x84>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80074fa:	d9f0      	bls.n	80074de <USB_SetCurrentMode+0x60>
 80074fc:	e001      	b.n	8007502 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e005      	b.n	800750e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2bc8      	cmp	r3, #200	@ 0xc8
 8007506:	d101      	bne.n	800750c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e000      	b.n	800750e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007518:	b084      	sub	sp, #16
 800751a:	b580      	push	{r7, lr}
 800751c:	b086      	sub	sp, #24
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007532:	2300      	movs	r3, #0
 8007534:	613b      	str	r3, [r7, #16]
 8007536:	e009      	b.n	800754c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	3340      	adds	r3, #64	@ 0x40
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	2200      	movs	r2, #0
 8007544:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	3301      	adds	r3, #1
 800754a:	613b      	str	r3, [r7, #16]
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	2b0e      	cmp	r3, #14
 8007550:	d9f2      	bls.n	8007538 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007552:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007556:	2b00      	cmp	r3, #0
 8007558:	d11c      	bne.n	8007594 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007568:	f043 0302 	orr.w	r3, r3, #2
 800756c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007572:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800757e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	639a      	str	r2, [r3, #56]	@ 0x38
 8007592:	e00b      	b.n	80075ac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007598:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075b2:	461a      	mov	r2, r3
 80075b4:	2300      	movs	r3, #0
 80075b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d10d      	bne.n	80075dc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d104      	bne.n	80075d2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075c8:	2100      	movs	r1, #0
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f968 	bl	80078a0 <USB_SetDevSpeed>
 80075d0:	e008      	b.n	80075e4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075d2:	2101      	movs	r1, #1
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f963 	bl	80078a0 <USB_SetDevSpeed>
 80075da:	e003      	b.n	80075e4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075dc:	2103      	movs	r1, #3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f95e 	bl	80078a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075e4:	2110      	movs	r1, #16
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f8fa 	bl	80077e0 <USB_FlushTxFifo>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f924 	bl	8007844 <USB_FlushRxFifo>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800760c:	461a      	mov	r2, r3
 800760e:	2300      	movs	r3, #0
 8007610:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007618:	461a      	mov	r2, r3
 800761a:	2300      	movs	r3, #0
 800761c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007624:	461a      	mov	r2, r3
 8007626:	2300      	movs	r3, #0
 8007628:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800762a:	2300      	movs	r3, #0
 800762c:	613b      	str	r3, [r7, #16]
 800762e:	e043      	b.n	80076b8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007642:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007646:	d118      	bne.n	800767a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10a      	bne.n	8007664 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800765a:	461a      	mov	r2, r3
 800765c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	e013      	b.n	800768c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007670:	461a      	mov	r2, r3
 8007672:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	e008      	b.n	800768c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007686:	461a      	mov	r2, r3
 8007688:	2300      	movs	r3, #0
 800768a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	015a      	lsls	r2, r3, #5
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4413      	add	r3, r2
 8007694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007698:	461a      	mov	r2, r3
 800769a:	2300      	movs	r3, #0
 800769c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076aa:	461a      	mov	r2, r3
 80076ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80076b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	3301      	adds	r3, #1
 80076b6:	613b      	str	r3, [r7, #16]
 80076b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80076bc:	461a      	mov	r2, r3
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d3b5      	bcc.n	8007630 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076c4:	2300      	movs	r3, #0
 80076c6:	613b      	str	r3, [r7, #16]
 80076c8:	e043      	b.n	8007752 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076e0:	d118      	bne.n	8007714 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10a      	bne.n	80076fe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f4:	461a      	mov	r2, r3
 80076f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	e013      	b.n	8007726 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800770a:	461a      	mov	r2, r3
 800770c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007710:	6013      	str	r3, [r2, #0]
 8007712:	e008      	b.n	8007726 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007720:	461a      	mov	r2, r3
 8007722:	2300      	movs	r3, #0
 8007724:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007732:	461a      	mov	r2, r3
 8007734:	2300      	movs	r3, #0
 8007736:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007744:	461a      	mov	r2, r3
 8007746:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800774a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	3301      	adds	r3, #1
 8007750:	613b      	str	r3, [r7, #16]
 8007752:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007756:	461a      	mov	r2, r3
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	4293      	cmp	r3, r2
 800775c:	d3b5      	bcc.n	80076ca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800776c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007770:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800777e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007780:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007784:	2b00      	cmp	r3, #0
 8007786:	d105      	bne.n	8007794 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	f043 0210 	orr.w	r2, r3, #16
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699a      	ldr	r2, [r3, #24]
 8007798:	4b10      	ldr	r3, [pc, #64]	@ (80077dc <USB_DevInit+0x2c4>)
 800779a:	4313      	orrs	r3, r2
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80077a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d005      	beq.n	80077b4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	f043 0208 	orr.w	r2, r3, #8
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d107      	bne.n	80077cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077c4:	f043 0304 	orr.w	r3, r3, #4
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077d8:	b004      	add	sp, #16
 80077da:	4770      	bx	lr
 80077dc:	803c3800 	.word	0x803c3800

080077e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3301      	adds	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077fa:	d901      	bls.n	8007800 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e01b      	b.n	8007838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	daf2      	bge.n	80077ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	019b      	lsls	r3, r3, #6
 8007810:	f043 0220 	orr.w	r2, r3, #32
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3301      	adds	r3, #1
 800781c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007824:	d901      	bls.n	800782a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e006      	b.n	8007838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b20      	cmp	r3, #32
 8007834:	d0f0      	beq.n	8007818 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3301      	adds	r3, #1
 8007854:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800785c:	d901      	bls.n	8007862 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e018      	b.n	8007894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	daf2      	bge.n	8007850 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2210      	movs	r2, #16
 8007872:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3301      	adds	r3, #1
 8007878:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007880:	d901      	bls.n	8007886 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e006      	b.n	8007894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	f003 0310 	and.w	r3, r3, #16
 800788e:	2b10      	cmp	r3, #16
 8007890:	d0f0      	beq.n	8007874 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	78fb      	ldrb	r3, [r7, #3]
 80078ba:	68f9      	ldr	r1, [r7, #12]
 80078bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078c0:	4313      	orrs	r3, r2
 80078c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b085      	sub	sp, #20
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80078ec:	f023 0303 	bic.w	r3, r3, #3
 80078f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007900:	f043 0302 	orr.w	r3, r3, #2
 8007904:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	f003 0301 	and.w	r3, r3, #1
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3301      	adds	r3, #1
 8007940:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007948:	d901      	bls.n	800794e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e01b      	b.n	8007986 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	daf2      	bge.n	800793c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	f043 0201 	orr.w	r2, r3, #1
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3301      	adds	r3, #1
 800796a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007972:	d901      	bls.n	8007978 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e006      	b.n	8007986 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	2b01      	cmp	r3, #1
 8007982:	d0f0      	beq.n	8007966 <USB_CoreReset+0x36>

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
	...

08007994 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800799a:	4b87      	ldr	r3, [pc, #540]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 800799c:	22c0      	movs	r2, #192	@ 0xc0
 800799e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80079a0:	4b85      	ldr	r3, [pc, #532]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 80079a2:	22a8      	movs	r2, #168	@ 0xa8
 80079a4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80079a6:	4b84      	ldr	r3, [pc, #528]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 80079a8:	2201      	movs	r2, #1
 80079aa:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 156;
 80079ac:	4b82      	ldr	r3, [pc, #520]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 80079ae:	229c      	movs	r2, #156	@ 0x9c
 80079b0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80079b2:	4b82      	ldr	r3, [pc, #520]	@ (8007bbc <MX_LWIP_Init+0x228>)
 80079b4:	22ff      	movs	r2, #255	@ 0xff
 80079b6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80079b8:	4b80      	ldr	r3, [pc, #512]	@ (8007bbc <MX_LWIP_Init+0x228>)
 80079ba:	22ff      	movs	r2, #255	@ 0xff
 80079bc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80079be:	4b7f      	ldr	r3, [pc, #508]	@ (8007bbc <MX_LWIP_Init+0x228>)
 80079c0:	22ff      	movs	r2, #255	@ 0xff
 80079c2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80079c4:	4b7d      	ldr	r3, [pc, #500]	@ (8007bbc <MX_LWIP_Init+0x228>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80079ca:	4b7d      	ldr	r3, [pc, #500]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 80079cc:	22c0      	movs	r2, #192	@ 0xc0
 80079ce:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80079d0:	4b7b      	ldr	r3, [pc, #492]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 80079d2:	22a8      	movs	r2, #168	@ 0xa8
 80079d4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80079d6:	4b7a      	ldr	r3, [pc, #488]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 80079d8:	2201      	movs	r2, #1
 80079da:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80079dc:	4b78      	ldr	r3, [pc, #480]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 80079de:	2201      	movs	r2, #1
 80079e0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80079e2:	f000 fd02 	bl	80083ea <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80079e6:	4b74      	ldr	r3, [pc, #464]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	061a      	lsls	r2, r3, #24
 80079ec:	4b72      	ldr	r3, [pc, #456]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 80079ee:	785b      	ldrb	r3, [r3, #1]
 80079f0:	041b      	lsls	r3, r3, #16
 80079f2:	431a      	orrs	r2, r3
 80079f4:	4b70      	ldr	r3, [pc, #448]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 80079f6:	789b      	ldrb	r3, [r3, #2]
 80079f8:	021b      	lsls	r3, r3, #8
 80079fa:	4313      	orrs	r3, r2
 80079fc:	4a6e      	ldr	r2, [pc, #440]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 80079fe:	78d2      	ldrb	r2, [r2, #3]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	061a      	lsls	r2, r3, #24
 8007a04:	4b6c      	ldr	r3, [pc, #432]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	0619      	lsls	r1, r3, #24
 8007a0a:	4b6b      	ldr	r3, [pc, #428]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	041b      	lsls	r3, r3, #16
 8007a10:	4319      	orrs	r1, r3
 8007a12:	4b69      	ldr	r3, [pc, #420]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 8007a14:	789b      	ldrb	r3, [r3, #2]
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	4967      	ldr	r1, [pc, #412]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 8007a1c:	78c9      	ldrb	r1, [r1, #3]
 8007a1e:	430b      	orrs	r3, r1
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a26:	431a      	orrs	r2, r3
 8007a28:	4b63      	ldr	r3, [pc, #396]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	0619      	lsls	r1, r3, #24
 8007a2e:	4b62      	ldr	r3, [pc, #392]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 8007a30:	785b      	ldrb	r3, [r3, #1]
 8007a32:	041b      	lsls	r3, r3, #16
 8007a34:	4319      	orrs	r1, r3
 8007a36:	4b60      	ldr	r3, [pc, #384]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 8007a38:	789b      	ldrb	r3, [r3, #2]
 8007a3a:	021b      	lsls	r3, r3, #8
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	495e      	ldr	r1, [pc, #376]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 8007a40:	78c9      	ldrb	r1, [r1, #3]
 8007a42:	430b      	orrs	r3, r1
 8007a44:	0a1b      	lsrs	r3, r3, #8
 8007a46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	0619      	lsls	r1, r3, #24
 8007a52:	4b59      	ldr	r3, [pc, #356]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 8007a54:	785b      	ldrb	r3, [r3, #1]
 8007a56:	041b      	lsls	r3, r3, #16
 8007a58:	4319      	orrs	r1, r3
 8007a5a:	4b57      	ldr	r3, [pc, #348]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 8007a5c:	789b      	ldrb	r3, [r3, #2]
 8007a5e:	021b      	lsls	r3, r3, #8
 8007a60:	430b      	orrs	r3, r1
 8007a62:	4955      	ldr	r1, [pc, #340]	@ (8007bb8 <MX_LWIP_Init+0x224>)
 8007a64:	78c9      	ldrb	r1, [r1, #3]
 8007a66:	430b      	orrs	r3, r1
 8007a68:	0e1b      	lsrs	r3, r3, #24
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	4a55      	ldr	r2, [pc, #340]	@ (8007bc4 <MX_LWIP_Init+0x230>)
 8007a6e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007a70:	4b52      	ldr	r3, [pc, #328]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	061a      	lsls	r2, r3, #24
 8007a76:	4b51      	ldr	r3, [pc, #324]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007a78:	785b      	ldrb	r3, [r3, #1]
 8007a7a:	041b      	lsls	r3, r3, #16
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	4b4f      	ldr	r3, [pc, #316]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007a80:	789b      	ldrb	r3, [r3, #2]
 8007a82:	021b      	lsls	r3, r3, #8
 8007a84:	4313      	orrs	r3, r2
 8007a86:	4a4d      	ldr	r2, [pc, #308]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007a88:	78d2      	ldrb	r2, [r2, #3]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	061a      	lsls	r2, r3, #24
 8007a8e:	4b4b      	ldr	r3, [pc, #300]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	0619      	lsls	r1, r3, #24
 8007a94:	4b49      	ldr	r3, [pc, #292]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007a96:	785b      	ldrb	r3, [r3, #1]
 8007a98:	041b      	lsls	r3, r3, #16
 8007a9a:	4319      	orrs	r1, r3
 8007a9c:	4b47      	ldr	r3, [pc, #284]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007a9e:	789b      	ldrb	r3, [r3, #2]
 8007aa0:	021b      	lsls	r3, r3, #8
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	4945      	ldr	r1, [pc, #276]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007aa6:	78c9      	ldrb	r1, [r1, #3]
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	021b      	lsls	r3, r3, #8
 8007aac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	4b42      	ldr	r3, [pc, #264]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	0619      	lsls	r1, r3, #24
 8007ab8:	4b40      	ldr	r3, [pc, #256]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	041b      	lsls	r3, r3, #16
 8007abe:	4319      	orrs	r1, r3
 8007ac0:	4b3e      	ldr	r3, [pc, #248]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007ac2:	789b      	ldrb	r3, [r3, #2]
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	430b      	orrs	r3, r1
 8007ac8:	493c      	ldr	r1, [pc, #240]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007aca:	78c9      	ldrb	r1, [r1, #3]
 8007acc:	430b      	orrs	r3, r1
 8007ace:	0a1b      	lsrs	r3, r3, #8
 8007ad0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	4b39      	ldr	r3, [pc, #228]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	0619      	lsls	r1, r3, #24
 8007adc:	4b37      	ldr	r3, [pc, #220]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007ade:	785b      	ldrb	r3, [r3, #1]
 8007ae0:	041b      	lsls	r3, r3, #16
 8007ae2:	4319      	orrs	r1, r3
 8007ae4:	4b35      	ldr	r3, [pc, #212]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007ae6:	789b      	ldrb	r3, [r3, #2]
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	430b      	orrs	r3, r1
 8007aec:	4933      	ldr	r1, [pc, #204]	@ (8007bbc <MX_LWIP_Init+0x228>)
 8007aee:	78c9      	ldrb	r1, [r1, #3]
 8007af0:	430b      	orrs	r3, r1
 8007af2:	0e1b      	lsrs	r3, r3, #24
 8007af4:	4313      	orrs	r3, r2
 8007af6:	4a34      	ldr	r2, [pc, #208]	@ (8007bc8 <MX_LWIP_Init+0x234>)
 8007af8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007afa:	4b31      	ldr	r3, [pc, #196]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	061a      	lsls	r2, r3, #24
 8007b00:	4b2f      	ldr	r3, [pc, #188]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007b02:	785b      	ldrb	r3, [r3, #1]
 8007b04:	041b      	lsls	r3, r3, #16
 8007b06:	431a      	orrs	r2, r3
 8007b08:	4b2d      	ldr	r3, [pc, #180]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007b0a:	789b      	ldrb	r3, [r3, #2]
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	4a2b      	ldr	r2, [pc, #172]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007b12:	78d2      	ldrb	r2, [r2, #3]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	061a      	lsls	r2, r3, #24
 8007b18:	4b29      	ldr	r3, [pc, #164]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	0619      	lsls	r1, r3, #24
 8007b1e:	4b28      	ldr	r3, [pc, #160]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007b20:	785b      	ldrb	r3, [r3, #1]
 8007b22:	041b      	lsls	r3, r3, #16
 8007b24:	4319      	orrs	r1, r3
 8007b26:	4b26      	ldr	r3, [pc, #152]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007b28:	789b      	ldrb	r3, [r3, #2]
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	430b      	orrs	r3, r1
 8007b2e:	4924      	ldr	r1, [pc, #144]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007b30:	78c9      	ldrb	r1, [r1, #3]
 8007b32:	430b      	orrs	r3, r1
 8007b34:	021b      	lsls	r3, r3, #8
 8007b36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	4b20      	ldr	r3, [pc, #128]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	0619      	lsls	r1, r3, #24
 8007b42:	4b1f      	ldr	r3, [pc, #124]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007b44:	785b      	ldrb	r3, [r3, #1]
 8007b46:	041b      	lsls	r3, r3, #16
 8007b48:	4319      	orrs	r1, r3
 8007b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007b4c:	789b      	ldrb	r3, [r3, #2]
 8007b4e:	021b      	lsls	r3, r3, #8
 8007b50:	430b      	orrs	r3, r1
 8007b52:	491b      	ldr	r1, [pc, #108]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007b54:	78c9      	ldrb	r1, [r1, #3]
 8007b56:	430b      	orrs	r3, r1
 8007b58:	0a1b      	lsrs	r3, r3, #8
 8007b5a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	4b17      	ldr	r3, [pc, #92]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	0619      	lsls	r1, r3, #24
 8007b66:	4b16      	ldr	r3, [pc, #88]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007b68:	785b      	ldrb	r3, [r3, #1]
 8007b6a:	041b      	lsls	r3, r3, #16
 8007b6c:	4319      	orrs	r1, r3
 8007b6e:	4b14      	ldr	r3, [pc, #80]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007b70:	789b      	ldrb	r3, [r3, #2]
 8007b72:	021b      	lsls	r3, r3, #8
 8007b74:	430b      	orrs	r3, r1
 8007b76:	4912      	ldr	r1, [pc, #72]	@ (8007bc0 <MX_LWIP_Init+0x22c>)
 8007b78:	78c9      	ldrb	r1, [r1, #3]
 8007b7a:	430b      	orrs	r3, r1
 8007b7c:	0e1b      	lsrs	r3, r3, #24
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	4a12      	ldr	r2, [pc, #72]	@ (8007bcc <MX_LWIP_Init+0x238>)
 8007b82:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007b84:	4b12      	ldr	r3, [pc, #72]	@ (8007bd0 <MX_LWIP_Init+0x23c>)
 8007b86:	9302      	str	r3, [sp, #8]
 8007b88:	4b12      	ldr	r3, [pc, #72]	@ (8007bd4 <MX_LWIP_Init+0x240>)
 8007b8a:	9301      	str	r3, [sp, #4]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	4b0e      	ldr	r3, [pc, #56]	@ (8007bcc <MX_LWIP_Init+0x238>)
 8007b92:	4a0d      	ldr	r2, [pc, #52]	@ (8007bc8 <MX_LWIP_Init+0x234>)
 8007b94:	490b      	ldr	r1, [pc, #44]	@ (8007bc4 <MX_LWIP_Init+0x230>)
 8007b96:	4810      	ldr	r0, [pc, #64]	@ (8007bd8 <MX_LWIP_Init+0x244>)
 8007b98:	f001 f912 	bl	8008dc0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007b9c:	480e      	ldr	r0, [pc, #56]	@ (8007bd8 <MX_LWIP_Init+0x244>)
 8007b9e:	f001 fac1 	bl	8009124 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007ba2:	480d      	ldr	r0, [pc, #52]	@ (8007bd8 <MX_LWIP_Init+0x244>)
 8007ba4:	f001 face 	bl	8009144 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007ba8:	490c      	ldr	r1, [pc, #48]	@ (8007bdc <MX_LWIP_Init+0x248>)
 8007baa:	480b      	ldr	r0, [pc, #44]	@ (8007bd8 <MX_LWIP_Init+0x244>)
 8007bac:	f001 fbcc 	bl	8009348 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007bb0:	bf00      	nop
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20000a8c 	.word	0x20000a8c
 8007bbc:	20000a90 	.word	0x20000a90
 8007bc0:	20000a94 	.word	0x20000a94
 8007bc4:	20000a80 	.word	0x20000a80
 8007bc8:	20000a84 	.word	0x20000a84
 8007bcc:	20000a88 	.word	0x20000a88
 8007bd0:	080123e1 	.word	0x080123e1
 8007bd4:	08007efd 	.word	0x08007efd
 8007bd8:	20000a4c 	.word	0x20000a4c
 8007bdc:	08007c31 	.word	0x08007c31

08007be0 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8007be8:	f7fb fa38 	bl	800305c <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	4b08      	ldr	r3, [pc, #32]	@ (8007c10 <Ethernet_Link_Periodic_Handle+0x30>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b63      	cmp	r3, #99	@ 0x63
 8007bf6:	d907      	bls.n	8007c08 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8007bf8:	f7fb fa30 	bl	800305c <HAL_GetTick>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	4a04      	ldr	r2, [pc, #16]	@ (8007c10 <Ethernet_Link_Periodic_Handle+0x30>)
 8007c00:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fac6 	bl	8008194 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8007c08:	bf00      	nop
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	20000a48 	.word	0x20000a48

08007c14 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8007c18:	4804      	ldr	r0, [pc, #16]	@ (8007c2c <MX_LWIP_Process+0x18>)
 8007c1a:	f000 f94f 	bl	8007ebc <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8007c1e:	f007 fca3 	bl	800f568 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8007c22:	4802      	ldr	r0, [pc, #8]	@ (8007c2c <MX_LWIP_Process+0x18>)
 8007c24:	f7ff ffdc 	bl	8007be0 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8007c28:	bf00      	nop
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	20000a4c 	.word	0x20000a4c

08007c30 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007c50:	4b44      	ldr	r3, [pc, #272]	@ (8007d64 <low_level_init+0x120>)
 8007c52:	4a45      	ldr	r2, [pc, #276]	@ (8007d68 <low_level_init+0x124>)
 8007c54:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x50;
 8007c56:	2350      	movs	r3, #80	@ 0x50
 8007c58:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x39;
 8007c5a:	2339      	movs	r3, #57	@ 0x39
 8007c5c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x64;
 8007c5e:	2364      	movs	r3, #100	@ 0x64
 8007c60:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xFD;
 8007c62:	23fd      	movs	r3, #253	@ 0xfd
 8007c64:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x60;
 8007c66:	2360      	movs	r3, #96	@ 0x60
 8007c68:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007c6e:	4a3d      	ldr	r2, [pc, #244]	@ (8007d64 <low_level_init+0x120>)
 8007c70:	f107 0308 	add.w	r3, r7, #8
 8007c74:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007c76:	4b3b      	ldr	r3, [pc, #236]	@ (8007d64 <low_level_init+0x120>)
 8007c78:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007c7c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007c7e:	4b39      	ldr	r3, [pc, #228]	@ (8007d64 <low_level_init+0x120>)
 8007c80:	4a3a      	ldr	r2, [pc, #232]	@ (8007d6c <low_level_init+0x128>)
 8007c82:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007c84:	4b37      	ldr	r3, [pc, #220]	@ (8007d64 <low_level_init+0x120>)
 8007c86:	4a3a      	ldr	r2, [pc, #232]	@ (8007d70 <low_level_init+0x12c>)
 8007c88:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007c8a:	4b36      	ldr	r3, [pc, #216]	@ (8007d64 <low_level_init+0x120>)
 8007c8c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007c90:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007c92:	4834      	ldr	r0, [pc, #208]	@ (8007d64 <low_level_init+0x120>)
 8007c94:	f7fb fefc 	bl	8003a90 <HAL_ETH_Init>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007c9c:	2238      	movs	r2, #56	@ 0x38
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	4834      	ldr	r0, [pc, #208]	@ (8007d74 <low_level_init+0x130>)
 8007ca2:	f00a fe98 	bl	80129d6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007ca6:	4b33      	ldr	r3, [pc, #204]	@ (8007d74 <low_level_init+0x130>)
 8007ca8:	2221      	movs	r2, #33	@ 0x21
 8007caa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007cac:	4b31      	ldr	r3, [pc, #196]	@ (8007d74 <low_level_init+0x130>)
 8007cae:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8007cb2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8007d74 <low_level_init+0x130>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007cba:	482f      	ldr	r0, [pc, #188]	@ (8007d78 <low_level_init+0x134>)
 8007cbc:	f000 ff48 	bl	8008b50 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2206      	movs	r2, #6
 8007cc4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007cc8:	4b26      	ldr	r3, [pc, #152]	@ (8007d64 <low_level_init+0x120>)
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	781a      	ldrb	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007cd4:	4b23      	ldr	r3, [pc, #140]	@ (8007d64 <low_level_init+0x120>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	785a      	ldrb	r2, [r3, #1]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007ce0:	4b20      	ldr	r3, [pc, #128]	@ (8007d64 <low_level_init+0x120>)
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	789a      	ldrb	r2, [r3, #2]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007cec:	4b1d      	ldr	r3, [pc, #116]	@ (8007d64 <low_level_init+0x120>)
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	78da      	ldrb	r2, [r3, #3]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8007d64 <low_level_init+0x120>)
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	791a      	ldrb	r2, [r3, #4]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007d04:	4b17      	ldr	r3, [pc, #92]	@ (8007d64 <low_level_init+0x120>)
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	795a      	ldrb	r2, [r3, #5]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8007d16:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007d1e:	f043 030a 	orr.w	r3, r3, #10
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007d2a:	4914      	ldr	r1, [pc, #80]	@ (8007d7c <low_level_init+0x138>)
 8007d2c:	4814      	ldr	r0, [pc, #80]	@ (8007d80 <low_level_init+0x13c>)
 8007d2e:	f7fb f828 	bl	8002d82 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8007d32:	4813      	ldr	r0, [pc, #76]	@ (8007d80 <low_level_init+0x13c>)
 8007d34:	f7fb f857 	bl	8002de6 <LAN8742_Init>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d006      	beq.n	8007d4c <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f001 fad2 	bl	80092e8 <netif_set_link_down>
    netif_set_down(netif);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 fa69 	bl	800921c <netif_set_down>
 8007d4a:	e008      	b.n	8007d5e <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d103      	bne.n	8007d5a <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa1e 	bl	8008194 <ethernet_link_check_state>
 8007d58:	e001      	b.n	8007d5e <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8007d5a:	f7fa fc09 	bl	8002570 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	20005564 	.word	0x20005564
 8007d68:	40028000 	.word	0x40028000
 8007d6c:	200054c4 	.word	0x200054c4
 8007d70:	20005424 	.word	0x20005424
 8007d74:	20005614 	.word	0x20005614
 8007d78:	08016550 	.word	0x08016550
 8007d7c:	20000084 	.word	0x20000084
 8007d80:	2000564c 	.word	0x2000564c

08007d84 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b092      	sub	sp, #72	@ 0x48
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007d9c:	f107 030c 	add.w	r3, r7, #12
 8007da0:	2230      	movs	r2, #48	@ 0x30
 8007da2:	2100      	movs	r1, #0
 8007da4:	4618      	mov	r0, r3
 8007da6:	f00a fe16 	bl	80129d6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007daa:	f107 030c 	add.w	r3, r7, #12
 8007dae:	2230      	movs	r2, #48	@ 0x30
 8007db0:	2100      	movs	r1, #0
 8007db2:	4618      	mov	r0, r3
 8007db4:	f00a fe0f 	bl	80129d6 <memset>

  for(q = p; q != NULL; q = q->next)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dbc:	e045      	b.n	8007e4a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007dbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d902      	bls.n	8007dca <low_level_output+0x46>
      return ERR_IF;
 8007dc4:	f06f 030b 	mvn.w	r3, #11
 8007dc8:	e055      	b.n	8007e76 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8007dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dcc:	6859      	ldr	r1, [r3, #4]
 8007dce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	3348      	adds	r3, #72	@ 0x48
 8007dda:	443b      	add	r3, r7
 8007ddc:	3b3c      	subs	r3, #60	@ 0x3c
 8007dde:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007de2:	895b      	ldrh	r3, [r3, #10]
 8007de4:	4619      	mov	r1, r3
 8007de6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007de8:	4613      	mov	r3, r2
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	4413      	add	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	3348      	adds	r3, #72	@ 0x48
 8007df2:	443b      	add	r3, r7
 8007df4:	3b38      	subs	r3, #56	@ 0x38
 8007df6:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d011      	beq.n	8007e22 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007dfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e00:	1e5a      	subs	r2, r3, #1
 8007e02:	f107 000c 	add.w	r0, r7, #12
 8007e06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e08:	460b      	mov	r3, r1
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	440b      	add	r3, r1
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	18c1      	adds	r1, r0, r3
 8007e12:	4613      	mov	r3, r2
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	4413      	add	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	3348      	adds	r3, #72	@ 0x48
 8007e1c:	443b      	add	r3, r7
 8007e1e:	3b34      	subs	r3, #52	@ 0x34
 8007e20:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d109      	bne.n	8007e3e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007e2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	4413      	add	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	3348      	adds	r3, #72	@ 0x48
 8007e36:	443b      	add	r3, r7
 8007e38:	3b34      	subs	r3, #52	@ 0x34
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e40:	3301      	adds	r3, #1
 8007e42:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8007e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1b6      	bne.n	8007dbe <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	891b      	ldrh	r3, [r3, #8]
 8007e54:	461a      	mov	r2, r3
 8007e56:	4b0a      	ldr	r3, [pc, #40]	@ (8007e80 <low_level_output+0xfc>)
 8007e58:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007e5a:	4a09      	ldr	r2, [pc, #36]	@ (8007e80 <low_level_output+0xfc>)
 8007e5c:	f107 030c 	add.w	r3, r7, #12
 8007e60:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007e62:	4a07      	ldr	r2, [pc, #28]	@ (8007e80 <low_level_output+0xfc>)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007e68:	2214      	movs	r2, #20
 8007e6a:	4905      	ldr	r1, [pc, #20]	@ (8007e80 <low_level_output+0xfc>)
 8007e6c:	4805      	ldr	r0, [pc, #20]	@ (8007e84 <low_level_output+0x100>)
 8007e6e:	f7fb ff9a 	bl	8003da6 <HAL_ETH_Transmit>

  return errval;
 8007e72:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3748      	adds	r7, #72	@ 0x48
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20005614 	.word	0x20005614
 8007e84:	20005564 	.word	0x20005564

08007e88 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007e94:	4b07      	ldr	r3, [pc, #28]	@ (8007eb4 <low_level_input+0x2c>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d105      	bne.n	8007ea8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007e9c:	f107 030c 	add.w	r3, r7, #12
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4805      	ldr	r0, [pc, #20]	@ (8007eb8 <low_level_input+0x30>)
 8007ea4:	f7fc f813 	bl	8003ece <HAL_ETH_ReadData>
  }

  return p;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20005420 	.word	0x20005420
 8007eb8:	20005564 	.word	0x20005564

08007ebc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff ffdd 	bl	8007e88 <low_level_input>
 8007ece:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00a      	beq.n	8007eec <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	6879      	ldr	r1, [r7, #4]
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	4798      	blx	r3
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f001 fdae 	bl	8009a48 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1ea      	bne.n	8007ec8 <ethernetif_input+0xc>
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d106      	bne.n	8007f18 <ethernetif_init+0x1c>
 8007f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8007f44 <ethernetif_init+0x48>)
 8007f0c:	f240 126f 	movw	r2, #367	@ 0x16f
 8007f10:	490d      	ldr	r1, [pc, #52]	@ (8007f48 <ethernetif_init+0x4c>)
 8007f12:	480e      	ldr	r0, [pc, #56]	@ (8007f4c <ethernetif_init+0x50>)
 8007f14:	f00a fcbe 	bl	8012894 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2273      	movs	r2, #115	@ 0x73
 8007f1c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2274      	movs	r2, #116	@ 0x74
 8007f24:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a09      	ldr	r2, [pc, #36]	@ (8007f50 <ethernetif_init+0x54>)
 8007f2c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a08      	ldr	r2, [pc, #32]	@ (8007f54 <ethernetif_init+0x58>)
 8007f32:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7ff fe85 	bl	8007c44 <low_level_init>

  return ERR_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	08013b58 	.word	0x08013b58
 8007f48:	08013b74 	.word	0x08013b74
 8007f4c:	08013b84 	.word	0x08013b84
 8007f50:	08010899 	.word	0x08010899
 8007f54:	08007d85 	.word	0x08007d85

08007f58 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007f64:	68f9      	ldr	r1, [r7, #12]
 8007f66:	4807      	ldr	r0, [pc, #28]	@ (8007f84 <pbuf_free_custom+0x2c>)
 8007f68:	f000 fed4 	bl	8008d14 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007f6c:	4b06      	ldr	r3, [pc, #24]	@ (8007f88 <pbuf_free_custom+0x30>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d102      	bne.n	8007f7a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007f74:	4b04      	ldr	r3, [pc, #16]	@ (8007f88 <pbuf_free_custom+0x30>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	701a      	strb	r2, [r3, #0]
  }
}
 8007f7a:	bf00      	nop
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	08016550 	.word	0x08016550
 8007f88:	20005420 	.word	0x20005420

08007f8c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007f90:	f7fb f864 	bl	800305c <HAL_GetTick>
 8007f94:	4603      	mov	r3, r0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08e      	sub	sp, #56	@ 0x38
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	605a      	str	r2, [r3, #4]
 8007fae:	609a      	str	r2, [r3, #8]
 8007fb0:	60da      	str	r2, [r3, #12]
 8007fb2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80080e4 <HAL_ETH_MspInit+0x148>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	f040 808d 	bne.w	80080da <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	623b      	str	r3, [r7, #32]
 8007fc4:	4b48      	ldr	r3, [pc, #288]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 8007fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc8:	4a47      	ldr	r2, [pc, #284]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 8007fca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007fce:	6313      	str	r3, [r2, #48]	@ 0x30
 8007fd0:	4b45      	ldr	r3, [pc, #276]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 8007fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fd8:	623b      	str	r3, [r7, #32]
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	61fb      	str	r3, [r7, #28]
 8007fe0:	4b41      	ldr	r3, [pc, #260]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe4:	4a40      	ldr	r2, [pc, #256]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 8007fe6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007fea:	6313      	str	r3, [r2, #48]	@ 0x30
 8007fec:	4b3e      	ldr	r3, [pc, #248]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 8007fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007ff4:	61fb      	str	r3, [r7, #28]
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	61bb      	str	r3, [r7, #24]
 8007ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 8007ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008000:	4a39      	ldr	r2, [pc, #228]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 8008002:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008006:	6313      	str	r3, [r2, #48]	@ 0x30
 8008008:	4b37      	ldr	r3, [pc, #220]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 800800a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800800c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008010:	61bb      	str	r3, [r7, #24]
 8008012:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008014:	2300      	movs	r3, #0
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	4b33      	ldr	r3, [pc, #204]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 800801a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800801c:	4a32      	ldr	r2, [pc, #200]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 800801e:	f043 0304 	orr.w	r3, r3, #4
 8008022:	6313      	str	r3, [r2, #48]	@ 0x30
 8008024:	4b30      	ldr	r3, [pc, #192]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 8008026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	617b      	str	r3, [r7, #20]
 800802e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008030:	2300      	movs	r3, #0
 8008032:	613b      	str	r3, [r7, #16]
 8008034:	4b2c      	ldr	r3, [pc, #176]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 8008036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008038:	4a2b      	ldr	r2, [pc, #172]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 800803a:	f043 0301 	orr.w	r3, r3, #1
 800803e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008040:	4b29      	ldr	r3, [pc, #164]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 8008042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	613b      	str	r3, [r7, #16]
 800804a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]
 8008050:	4b25      	ldr	r3, [pc, #148]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 8008052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008054:	4a24      	ldr	r2, [pc, #144]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 8008056:	f043 0302 	orr.w	r3, r3, #2
 800805a:	6313      	str	r3, [r2, #48]	@ 0x30
 800805c:	4b22      	ldr	r3, [pc, #136]	@ (80080e8 <HAL_ETH_MspInit+0x14c>)
 800805e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008060:	f003 0302 	and.w	r3, r3, #2
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008068:	2332      	movs	r3, #50	@ 0x32
 800806a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800806c:	2302      	movs	r3, #2
 800806e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008070:	2300      	movs	r3, #0
 8008072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008074:	2303      	movs	r3, #3
 8008076:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008078:	230b      	movs	r3, #11
 800807a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800807c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008080:	4619      	mov	r1, r3
 8008082:	481a      	ldr	r0, [pc, #104]	@ (80080ec <HAL_ETH_MspInit+0x150>)
 8008084:	f7fc ff54 	bl	8004f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008088:	2386      	movs	r3, #134	@ 0x86
 800808a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800808c:	2302      	movs	r3, #2
 800808e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008090:	2300      	movs	r3, #0
 8008092:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008094:	2303      	movs	r3, #3
 8008096:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008098:	230b      	movs	r3, #11
 800809a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800809c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080a0:	4619      	mov	r1, r3
 80080a2:	4813      	ldr	r0, [pc, #76]	@ (80080f0 <HAL_ETH_MspInit+0x154>)
 80080a4:	f7fc ff44 	bl	8004f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80080a8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80080ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ae:	2302      	movs	r3, #2
 80080b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b2:	2300      	movs	r3, #0
 80080b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080b6:	2303      	movs	r3, #3
 80080b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080ba:	230b      	movs	r3, #11
 80080bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080c2:	4619      	mov	r1, r3
 80080c4:	480b      	ldr	r0, [pc, #44]	@ (80080f4 <HAL_ETH_MspInit+0x158>)
 80080c6:	f7fc ff33 	bl	8004f30 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80080ca:	2200      	movs	r2, #0
 80080cc:	2100      	movs	r1, #0
 80080ce:	203d      	movs	r0, #61	@ 0x3d
 80080d0:	f7fb fc2d 	bl	800392e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80080d4:	203d      	movs	r0, #61	@ 0x3d
 80080d6:	f7fb fc46 	bl	8003966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80080da:	bf00      	nop
 80080dc:	3738      	adds	r7, #56	@ 0x38
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	40028000 	.word	0x40028000
 80080e8:	40023800 	.word	0x40023800
 80080ec:	40020800 	.word	0x40020800
 80080f0:	40020000 	.word	0x40020000
 80080f4:	40020400 	.word	0x40020400

080080f8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80080fc:	4802      	ldr	r0, [pc, #8]	@ (8008108 <ETH_PHY_IO_Init+0x10>)
 80080fe:	f7fc fab3 	bl	8004668 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	bd80      	pop	{r7, pc}
 8008108:	20005564 	.word	0x20005564

0800810c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800810c:	b480      	push	{r7}
 800810e:	af00      	add	r7, sp, #0
  return 0;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	68f9      	ldr	r1, [r7, #12]
 800812e:	4807      	ldr	r0, [pc, #28]	@ (800814c <ETH_PHY_IO_ReadReg+0x30>)
 8008130:	f7fc f8f4 	bl	800431c <HAL_ETH_ReadPHYRegister>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800813a:	f04f 33ff 	mov.w	r3, #4294967295
 800813e:	e000      	b.n	8008142 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	20005564 	.word	0x20005564

08008150 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	68f9      	ldr	r1, [r7, #12]
 8008162:	4807      	ldr	r0, [pc, #28]	@ (8008180 <ETH_PHY_IO_WriteReg+0x30>)
 8008164:	f7fc f925 	bl	80043b2 <HAL_ETH_WritePHYRegister>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d002      	beq.n	8008174 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800816e:	f04f 33ff 	mov.w	r3, #4294967295
 8008172:	e000      	b.n	8008176 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20005564 	.word	0x20005564

08008184 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008188:	f7fa ff68 	bl	800305c <HAL_GetTick>
 800818c:	4603      	mov	r3, r0
}
 800818e:	4618      	mov	r0, r3
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b0a0      	sub	sp, #128	@ 0x80
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800819c:	f107 030c 	add.w	r3, r7, #12
 80081a0:	2264      	movs	r2, #100	@ 0x64
 80081a2:	2100      	movs	r1, #0
 80081a4:	4618      	mov	r0, r3
 80081a6:	f00a fc16 	bl	80129d6 <memset>
  int32_t PHYLinkState = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80081ae:	2300      	movs	r3, #0
 80081b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081b2:	2300      	movs	r3, #0
 80081b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081b6:	2300      	movs	r3, #0
 80081b8:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80081ba:	483a      	ldr	r0, [pc, #232]	@ (80082a4 <ethernet_link_check_state+0x110>)
 80081bc:	f7fa fe60 	bl	8002e80 <LAN8742_GetLinkState>
 80081c0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80081c8:	089b      	lsrs	r3, r3, #2
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00c      	beq.n	80081ee <ethernet_link_check_state+0x5a>
 80081d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	dc09      	bgt.n	80081ee <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 80081da:	4833      	ldr	r0, [pc, #204]	@ (80082a8 <ethernet_link_check_state+0x114>)
 80081dc:	f7fb fd64 	bl	8003ca8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 f81b 	bl	800921c <netif_set_down>
    netif_set_link_down(netif);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f001 f87e 	bl	80092e8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80081ec:	e055      	b.n	800829a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d14e      	bne.n	800829a <ethernet_link_check_state+0x106>
 80081fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081fe:	2b01      	cmp	r3, #1
 8008200:	dd4b      	ble.n	800829a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8008202:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008204:	3b02      	subs	r3, #2
 8008206:	2b03      	cmp	r3, #3
 8008208:	d82a      	bhi.n	8008260 <ethernet_link_check_state+0xcc>
 800820a:	a201      	add	r2, pc, #4	@ (adr r2, 8008210 <ethernet_link_check_state+0x7c>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	08008221 	.word	0x08008221
 8008214:	08008233 	.word	0x08008233
 8008218:	08008243 	.word	0x08008243
 800821c:	08008253 	.word	0x08008253
      duplex = ETH_FULLDUPLEX_MODE;
 8008220:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008224:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008226:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800822a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800822c:	2301      	movs	r3, #1
 800822e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008230:	e017      	b.n	8008262 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008232:	2300      	movs	r3, #0
 8008234:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008236:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800823a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800823c:	2301      	movs	r3, #1
 800823e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008240:	e00f      	b.n	8008262 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8008242:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008246:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8008248:	2300      	movs	r3, #0
 800824a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800824c:	2301      	movs	r3, #1
 800824e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008250:	e007      	b.n	8008262 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008252:	2300      	movs	r3, #0
 8008254:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8008256:	2300      	movs	r3, #0
 8008258:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800825a:	2301      	movs	r3, #1
 800825c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800825e:	e000      	b.n	8008262 <ethernet_link_check_state+0xce>
      break;
 8008260:	bf00      	nop
    if(linkchanged)
 8008262:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008264:	2b00      	cmp	r3, #0
 8008266:	d018      	beq.n	800829a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008268:	f107 030c 	add.w	r3, r7, #12
 800826c:	4619      	mov	r1, r3
 800826e:	480e      	ldr	r0, [pc, #56]	@ (80082a8 <ethernet_link_check_state+0x114>)
 8008270:	f7fc f8e8 	bl	8004444 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008274:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008276:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8008278:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800827a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800827c:	f107 030c 	add.w	r3, r7, #12
 8008280:	4619      	mov	r1, r3
 8008282:	4809      	ldr	r0, [pc, #36]	@ (80082a8 <ethernet_link_check_state+0x114>)
 8008284:	f7fc f9d5 	bl	8004632 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8008288:	4807      	ldr	r0, [pc, #28]	@ (80082a8 <ethernet_link_check_state+0x114>)
 800828a:	f7fb fc9d 	bl	8003bc8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 ff58 	bl	8009144 <netif_set_up>
      netif_set_link_up(netif);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fff3 	bl	8009280 <netif_set_link_up>
}
 800829a:	bf00      	nop
 800829c:	3780      	adds	r7, #128	@ 0x80
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	2000564c 	.word	0x2000564c
 80082a8:	20005564 	.word	0x20005564

080082ac <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80082b4:	4812      	ldr	r0, [pc, #72]	@ (8008300 <HAL_ETH_RxAllocateCallback+0x54>)
 80082b6:	f000 fcbf 	bl	8008c38 <memp_malloc_pool>
 80082ba:	60f8      	str	r0, [r7, #12]
  if (p)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d014      	beq.n	80082ec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f103 0220 	add.w	r2, r3, #32
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4a0d      	ldr	r2, [pc, #52]	@ (8008304 <HAL_ETH_RxAllocateCallback+0x58>)
 80082d0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80082da:	9201      	str	r2, [sp, #4]
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2241      	movs	r2, #65	@ 0x41
 80082e2:	2100      	movs	r1, #0
 80082e4:	2000      	movs	r0, #0
 80082e6:	f001 f9f5 	bl	80096d4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80082ea:	e005      	b.n	80082f8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80082ec:	4b06      	ldr	r3, [pc, #24]	@ (8008308 <HAL_ETH_RxAllocateCallback+0x5c>)
 80082ee:	2201      	movs	r2, #1
 80082f0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]
}
 80082f8:	bf00      	nop
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	08016550 	.word	0x08016550
 8008304:	08007f59 	.word	0x08007f59
 8008308:	20005420 	.word	0x20005420

0800830c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800830c:	b480      	push	{r7}
 800830e:	b089      	sub	sp, #36	@ 0x24
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
 8008318:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008322:	2300      	movs	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	3b20      	subs	r3, #32
 800832a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	2200      	movs	r2, #0
 8008330:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	2200      	movs	r2, #0
 8008336:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	887a      	ldrh	r2, [r7, #2]
 800833c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d103      	bne.n	800834e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	69fa      	ldr	r2, [r7, #28]
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	e003      	b.n	8008356 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69fa      	ldr	r2, [r7, #28]
 8008354:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	61fb      	str	r3, [r7, #28]
 8008362:	e009      	b.n	8008378 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	891a      	ldrh	r2, [r3, #8]
 8008368:	887b      	ldrh	r3, [r7, #2]
 800836a:	4413      	add	r3, r2
 800836c:	b29a      	uxth	r2, r3
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	61fb      	str	r3, [r7, #28]
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1f2      	bne.n	8008364 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800837e:	bf00      	nop
 8008380:	bf00      	nop
 8008382:	3724      	adds	r7, #36	@ 0x24
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800839a:	021b      	lsls	r3, r3, #8
 800839c:	b21a      	sxth	r2, r3
 800839e:	88fb      	ldrh	r3, [r7, #6]
 80083a0:	0a1b      	lsrs	r3, r3, #8
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	b21b      	sxth	r3, r3
 80083a6:	4313      	orrs	r3, r2
 80083a8:	b21b      	sxth	r3, r3
 80083aa:	b29b      	uxth	r3, r3
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	061a      	lsls	r2, r3, #24
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	021b      	lsls	r3, r3, #8
 80083c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80083cc:	431a      	orrs	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	0a1b      	lsrs	r3, r3, #8
 80083d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80083d6:	431a      	orrs	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	0e1b      	lsrs	r3, r3, #24
 80083dc:	4313      	orrs	r3, r2
}
 80083de:	4618      	mov	r0, r3
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b082      	sub	sp, #8
 80083ee:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80083f0:	2300      	movs	r3, #0
 80083f2:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80083f4:	f000 f8d4 	bl	80085a0 <mem_init>
  memp_init();
 80083f8:	f000 fbda 	bl	8008bb0 <memp_init>
  pbuf_init();
  netif_init();
 80083fc:	f000 fcd8 	bl	8008db0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008400:	f007 f8f4 	bl	800f5ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008404:	f001 fe50 	bl	800a0a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008408:	f007 f866 	bl	800f4d8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800841e:	4b05      	ldr	r3, [pc, #20]	@ (8008434 <ptr_to_mem+0x20>)
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	88fb      	ldrh	r3, [r7, #6]
 8008424:	4413      	add	r3, r2
}
 8008426:	4618      	mov	r0, r3
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	20005a98 	.word	0x20005a98

08008438 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008440:	4b05      	ldr	r3, [pc, #20]	@ (8008458 <mem_to_ptr+0x20>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	b29b      	uxth	r3, r3
}
 800844a:	4618      	mov	r0, r3
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	20005a98 	.word	0x20005a98

0800845c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800845c:	b590      	push	{r4, r7, lr}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008464:	4b45      	ldr	r3, [pc, #276]	@ (800857c <plug_holes+0x120>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	429a      	cmp	r2, r3
 800846c:	d206      	bcs.n	800847c <plug_holes+0x20>
 800846e:	4b44      	ldr	r3, [pc, #272]	@ (8008580 <plug_holes+0x124>)
 8008470:	f240 12df 	movw	r2, #479	@ 0x1df
 8008474:	4943      	ldr	r1, [pc, #268]	@ (8008584 <plug_holes+0x128>)
 8008476:	4844      	ldr	r0, [pc, #272]	@ (8008588 <plug_holes+0x12c>)
 8008478:	f00a fa0c 	bl	8012894 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800847c:	4b43      	ldr	r3, [pc, #268]	@ (800858c <plug_holes+0x130>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	429a      	cmp	r2, r3
 8008484:	d306      	bcc.n	8008494 <plug_holes+0x38>
 8008486:	4b3e      	ldr	r3, [pc, #248]	@ (8008580 <plug_holes+0x124>)
 8008488:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800848c:	4940      	ldr	r1, [pc, #256]	@ (8008590 <plug_holes+0x134>)
 800848e:	483e      	ldr	r0, [pc, #248]	@ (8008588 <plug_holes+0x12c>)
 8008490:	f00a fa00 	bl	8012894 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	791b      	ldrb	r3, [r3, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d006      	beq.n	80084aa <plug_holes+0x4e>
 800849c:	4b38      	ldr	r3, [pc, #224]	@ (8008580 <plug_holes+0x124>)
 800849e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80084a2:	493c      	ldr	r1, [pc, #240]	@ (8008594 <plug_holes+0x138>)
 80084a4:	4838      	ldr	r0, [pc, #224]	@ (8008588 <plug_holes+0x12c>)
 80084a6:	f00a f9f5 	bl	8012894 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	881b      	ldrh	r3, [r3, #0]
 80084ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084b2:	d906      	bls.n	80084c2 <plug_holes+0x66>
 80084b4:	4b32      	ldr	r3, [pc, #200]	@ (8008580 <plug_holes+0x124>)
 80084b6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80084ba:	4937      	ldr	r1, [pc, #220]	@ (8008598 <plug_holes+0x13c>)
 80084bc:	4832      	ldr	r0, [pc, #200]	@ (8008588 <plug_holes+0x12c>)
 80084be:	f00a f9e9 	bl	8012894 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7ff ffa4 	bl	8008414 <ptr_to_mem>
 80084cc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d024      	beq.n	8008520 <plug_holes+0xc4>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	791b      	ldrb	r3, [r3, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d120      	bne.n	8008520 <plug_holes+0xc4>
 80084de:	4b2b      	ldr	r3, [pc, #172]	@ (800858c <plug_holes+0x130>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d01b      	beq.n	8008520 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80084e8:	4b2c      	ldr	r3, [pc, #176]	@ (800859c <plug_holes+0x140>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d102      	bne.n	80084f8 <plug_holes+0x9c>
      lfree = mem;
 80084f2:	4a2a      	ldr	r2, [pc, #168]	@ (800859c <plug_holes+0x140>)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	881a      	ldrh	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008508:	d00a      	beq.n	8008520 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff ff80 	bl	8008414 <ptr_to_mem>
 8008514:	4604      	mov	r4, r0
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7ff ff8e 	bl	8008438 <mem_to_ptr>
 800851c:	4603      	mov	r3, r0
 800851e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	885b      	ldrh	r3, [r3, #2]
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff ff75 	bl	8008414 <ptr_to_mem>
 800852a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	429a      	cmp	r2, r3
 8008532:	d01f      	beq.n	8008574 <plug_holes+0x118>
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	791b      	ldrb	r3, [r3, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d11b      	bne.n	8008574 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800853c:	4b17      	ldr	r3, [pc, #92]	@ (800859c <plug_holes+0x140>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	429a      	cmp	r2, r3
 8008544:	d102      	bne.n	800854c <plug_holes+0xf0>
      lfree = pmem;
 8008546:	4a15      	ldr	r2, [pc, #84]	@ (800859c <plug_holes+0x140>)
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	881a      	ldrh	r2, [r3, #0]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800855c:	d00a      	beq.n	8008574 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff ff56 	bl	8008414 <ptr_to_mem>
 8008568:	4604      	mov	r4, r0
 800856a:	68b8      	ldr	r0, [r7, #8]
 800856c:	f7ff ff64 	bl	8008438 <mem_to_ptr>
 8008570:	4603      	mov	r3, r0
 8008572:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008574:	bf00      	nop
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	bd90      	pop	{r4, r7, pc}
 800857c:	20005a98 	.word	0x20005a98
 8008580:	08013bac 	.word	0x08013bac
 8008584:	08013bdc 	.word	0x08013bdc
 8008588:	08013bf4 	.word	0x08013bf4
 800858c:	20005a9c 	.word	0x20005a9c
 8008590:	08013c1c 	.word	0x08013c1c
 8008594:	08013c38 	.word	0x08013c38
 8008598:	08013c54 	.word	0x08013c54
 800859c:	20005aa0 	.word	0x20005aa0

080085a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80085a6:	4b18      	ldr	r3, [pc, #96]	@ (8008608 <mem_init+0x68>)
 80085a8:	3303      	adds	r3, #3
 80085aa:	f023 0303 	bic.w	r3, r3, #3
 80085ae:	461a      	mov	r2, r3
 80085b0:	4b16      	ldr	r3, [pc, #88]	@ (800860c <mem_init+0x6c>)
 80085b2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80085b4:	4b15      	ldr	r3, [pc, #84]	@ (800860c <mem_init+0x6c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80085c0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80085ce:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80085d2:	f7ff ff1f 	bl	8008414 <ptr_to_mem>
 80085d6:	4603      	mov	r3, r0
 80085d8:	4a0d      	ldr	r2, [pc, #52]	@ (8008610 <mem_init+0x70>)
 80085da:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80085dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008610 <mem_init+0x70>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2201      	movs	r2, #1
 80085e2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80085e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008610 <mem_init+0x70>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80085ec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80085ee:	4b08      	ldr	r3, [pc, #32]	@ (8008610 <mem_init+0x70>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80085f6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80085f8:	4b04      	ldr	r3, [pc, #16]	@ (800860c <mem_init+0x6c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a05      	ldr	r2, [pc, #20]	@ (8008614 <mem_init+0x74>)
 80085fe:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	20005684 	.word	0x20005684
 800860c:	20005a98 	.word	0x20005a98
 8008610:	20005a9c 	.word	0x20005a9c
 8008614:	20005aa0 	.word	0x20005aa0

08008618 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff ff09 	bl	8008438 <mem_to_ptr>
 8008626:	4603      	mov	r3, r0
 8008628:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff fef0 	bl	8008414 <ptr_to_mem>
 8008634:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	885b      	ldrh	r3, [r3, #2]
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff feea 	bl	8008414 <ptr_to_mem>
 8008640:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800864a:	d818      	bhi.n	800867e <mem_link_valid+0x66>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	885b      	ldrh	r3, [r3, #2]
 8008650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008654:	d813      	bhi.n	800867e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800865a:	8afa      	ldrh	r2, [r7, #22]
 800865c:	429a      	cmp	r2, r3
 800865e:	d004      	beq.n	800866a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	8afa      	ldrh	r2, [r7, #22]
 8008666:	429a      	cmp	r2, r3
 8008668:	d109      	bne.n	800867e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800866a:	4b08      	ldr	r3, [pc, #32]	@ (800868c <mem_link_valid+0x74>)
 800866c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	429a      	cmp	r2, r3
 8008672:	d006      	beq.n	8008682 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	885b      	ldrh	r3, [r3, #2]
 8008678:	8afa      	ldrh	r2, [r7, #22]
 800867a:	429a      	cmp	r2, r3
 800867c:	d001      	beq.n	8008682 <mem_link_valid+0x6a>
    return 0;
 800867e:	2300      	movs	r3, #0
 8008680:	e000      	b.n	8008684 <mem_link_valid+0x6c>
  }
  return 1;
 8008682:	2301      	movs	r3, #1
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20005a9c 	.word	0x20005a9c

08008690 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d04c      	beq.n	8008738 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f003 0303 	and.w	r3, r3, #3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d007      	beq.n	80086b8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80086a8:	4b25      	ldr	r3, [pc, #148]	@ (8008740 <mem_free+0xb0>)
 80086aa:	f240 2273 	movw	r2, #627	@ 0x273
 80086ae:	4925      	ldr	r1, [pc, #148]	@ (8008744 <mem_free+0xb4>)
 80086b0:	4825      	ldr	r0, [pc, #148]	@ (8008748 <mem_free+0xb8>)
 80086b2:	f00a f8ef 	bl	8012894 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80086b6:	e040      	b.n	800873a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3b08      	subs	r3, #8
 80086bc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80086be:	4b23      	ldr	r3, [pc, #140]	@ (800874c <mem_free+0xbc>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d306      	bcc.n	80086d6 <mem_free+0x46>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f103 020c 	add.w	r2, r3, #12
 80086ce:	4b20      	ldr	r3, [pc, #128]	@ (8008750 <mem_free+0xc0>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d907      	bls.n	80086e6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80086d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008740 <mem_free+0xb0>)
 80086d8:	f240 227f 	movw	r2, #639	@ 0x27f
 80086dc:	491d      	ldr	r1, [pc, #116]	@ (8008754 <mem_free+0xc4>)
 80086de:	481a      	ldr	r0, [pc, #104]	@ (8008748 <mem_free+0xb8>)
 80086e0:	f00a f8d8 	bl	8012894 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80086e4:	e029      	b.n	800873a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	791b      	ldrb	r3, [r3, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d107      	bne.n	80086fe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80086ee:	4b14      	ldr	r3, [pc, #80]	@ (8008740 <mem_free+0xb0>)
 80086f0:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80086f4:	4918      	ldr	r1, [pc, #96]	@ (8008758 <mem_free+0xc8>)
 80086f6:	4814      	ldr	r0, [pc, #80]	@ (8008748 <mem_free+0xb8>)
 80086f8:	f00a f8cc 	bl	8012894 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80086fc:	e01d      	b.n	800873a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f7ff ff8a 	bl	8008618 <mem_link_valid>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d107      	bne.n	800871a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800870a:	4b0d      	ldr	r3, [pc, #52]	@ (8008740 <mem_free+0xb0>)
 800870c:	f240 2295 	movw	r2, #661	@ 0x295
 8008710:	4912      	ldr	r1, [pc, #72]	@ (800875c <mem_free+0xcc>)
 8008712:	480d      	ldr	r0, [pc, #52]	@ (8008748 <mem_free+0xb8>)
 8008714:	f00a f8be 	bl	8012894 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008718:	e00f      	b.n	800873a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008720:	4b0f      	ldr	r3, [pc, #60]	@ (8008760 <mem_free+0xd0>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	429a      	cmp	r2, r3
 8008728:	d202      	bcs.n	8008730 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800872a:	4a0d      	ldr	r2, [pc, #52]	@ (8008760 <mem_free+0xd0>)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7ff fe93 	bl	800845c <plug_holes>
 8008736:	e000      	b.n	800873a <mem_free+0xaa>
    return;
 8008738:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	08013bac 	.word	0x08013bac
 8008744:	08013c80 	.word	0x08013c80
 8008748:	08013bf4 	.word	0x08013bf4
 800874c:	20005a98 	.word	0x20005a98
 8008750:	20005a9c 	.word	0x20005a9c
 8008754:	08013ca4 	.word	0x08013ca4
 8008758:	08013cc0 	.word	0x08013cc0
 800875c:	08013ce8 	.word	0x08013ce8
 8008760:	20005aa0 	.word	0x20005aa0

08008764 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008770:	887b      	ldrh	r3, [r7, #2]
 8008772:	3303      	adds	r3, #3
 8008774:	b29b      	uxth	r3, r3
 8008776:	f023 0303 	bic.w	r3, r3, #3
 800877a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800877c:	8bfb      	ldrh	r3, [r7, #30]
 800877e:	2b0b      	cmp	r3, #11
 8008780:	d801      	bhi.n	8008786 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008782:	230c      	movs	r3, #12
 8008784:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008786:	8bfb      	ldrh	r3, [r7, #30]
 8008788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800878c:	d803      	bhi.n	8008796 <mem_trim+0x32>
 800878e:	8bfa      	ldrh	r2, [r7, #30]
 8008790:	887b      	ldrh	r3, [r7, #2]
 8008792:	429a      	cmp	r2, r3
 8008794:	d201      	bcs.n	800879a <mem_trim+0x36>
    return NULL;
 8008796:	2300      	movs	r3, #0
 8008798:	e0cc      	b.n	8008934 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800879a:	4b68      	ldr	r3, [pc, #416]	@ (800893c <mem_trim+0x1d8>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d304      	bcc.n	80087ae <mem_trim+0x4a>
 80087a4:	4b66      	ldr	r3, [pc, #408]	@ (8008940 <mem_trim+0x1dc>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d306      	bcc.n	80087bc <mem_trim+0x58>
 80087ae:	4b65      	ldr	r3, [pc, #404]	@ (8008944 <mem_trim+0x1e0>)
 80087b0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80087b4:	4964      	ldr	r1, [pc, #400]	@ (8008948 <mem_trim+0x1e4>)
 80087b6:	4865      	ldr	r0, [pc, #404]	@ (800894c <mem_trim+0x1e8>)
 80087b8:	f00a f86c 	bl	8012894 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80087bc:	4b5f      	ldr	r3, [pc, #380]	@ (800893c <mem_trim+0x1d8>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d304      	bcc.n	80087d0 <mem_trim+0x6c>
 80087c6:	4b5e      	ldr	r3, [pc, #376]	@ (8008940 <mem_trim+0x1dc>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d301      	bcc.n	80087d4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	e0af      	b.n	8008934 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3b08      	subs	r3, #8
 80087d8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80087da:	69b8      	ldr	r0, [r7, #24]
 80087dc:	f7ff fe2c 	bl	8008438 <mem_to_ptr>
 80087e0:	4603      	mov	r3, r0
 80087e2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	881a      	ldrh	r2, [r3, #0]
 80087e8:	8afb      	ldrh	r3, [r7, #22]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	3b08      	subs	r3, #8
 80087f0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80087f2:	8bfa      	ldrh	r2, [r7, #30]
 80087f4:	8abb      	ldrh	r3, [r7, #20]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d906      	bls.n	8008808 <mem_trim+0xa4>
 80087fa:	4b52      	ldr	r3, [pc, #328]	@ (8008944 <mem_trim+0x1e0>)
 80087fc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8008800:	4953      	ldr	r1, [pc, #332]	@ (8008950 <mem_trim+0x1ec>)
 8008802:	4852      	ldr	r0, [pc, #328]	@ (800894c <mem_trim+0x1e8>)
 8008804:	f00a f846 	bl	8012894 <iprintf>
  if (newsize > size) {
 8008808:	8bfa      	ldrh	r2, [r7, #30]
 800880a:	8abb      	ldrh	r3, [r7, #20]
 800880c:	429a      	cmp	r2, r3
 800880e:	d901      	bls.n	8008814 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008810:	2300      	movs	r3, #0
 8008812:	e08f      	b.n	8008934 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008814:	8bfa      	ldrh	r2, [r7, #30]
 8008816:	8abb      	ldrh	r3, [r7, #20]
 8008818:	429a      	cmp	r2, r3
 800881a:	d101      	bne.n	8008820 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	e089      	b.n	8008934 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff fdf5 	bl	8008414 <ptr_to_mem>
 800882a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	791b      	ldrb	r3, [r3, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d13f      	bne.n	80088b4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800883c:	d106      	bne.n	800884c <mem_trim+0xe8>
 800883e:	4b41      	ldr	r3, [pc, #260]	@ (8008944 <mem_trim+0x1e0>)
 8008840:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8008844:	4943      	ldr	r1, [pc, #268]	@ (8008954 <mem_trim+0x1f0>)
 8008846:	4841      	ldr	r0, [pc, #260]	@ (800894c <mem_trim+0x1e8>)
 8008848:	f00a f824 	bl	8012894 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008852:	8afa      	ldrh	r2, [r7, #22]
 8008854:	8bfb      	ldrh	r3, [r7, #30]
 8008856:	4413      	add	r3, r2
 8008858:	b29b      	uxth	r3, r3
 800885a:	3308      	adds	r3, #8
 800885c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800885e:	4b3e      	ldr	r3, [pc, #248]	@ (8008958 <mem_trim+0x1f4>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	429a      	cmp	r2, r3
 8008866:	d106      	bne.n	8008876 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8008868:	89fb      	ldrh	r3, [r7, #14]
 800886a:	4618      	mov	r0, r3
 800886c:	f7ff fdd2 	bl	8008414 <ptr_to_mem>
 8008870:	4603      	mov	r3, r0
 8008872:	4a39      	ldr	r2, [pc, #228]	@ (8008958 <mem_trim+0x1f4>)
 8008874:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008876:	89fb      	ldrh	r3, [r7, #14]
 8008878:	4618      	mov	r0, r3
 800887a:	f7ff fdcb 	bl	8008414 <ptr_to_mem>
 800887e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	2200      	movs	r2, #0
 8008884:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	89ba      	ldrh	r2, [r7, #12]
 800888a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	8afa      	ldrh	r2, [r7, #22]
 8008890:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	89fa      	ldrh	r2, [r7, #14]
 8008896:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	881b      	ldrh	r3, [r3, #0]
 800889c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088a0:	d047      	beq.n	8008932 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7ff fdb4 	bl	8008414 <ptr_to_mem>
 80088ac:	4602      	mov	r2, r0
 80088ae:	89fb      	ldrh	r3, [r7, #14]
 80088b0:	8053      	strh	r3, [r2, #2]
 80088b2:	e03e      	b.n	8008932 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80088b4:	8bfb      	ldrh	r3, [r7, #30]
 80088b6:	f103 0214 	add.w	r2, r3, #20
 80088ba:	8abb      	ldrh	r3, [r7, #20]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d838      	bhi.n	8008932 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80088c0:	8afa      	ldrh	r2, [r7, #22]
 80088c2:	8bfb      	ldrh	r3, [r7, #30]
 80088c4:	4413      	add	r3, r2
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	3308      	adds	r3, #8
 80088ca:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	881b      	ldrh	r3, [r3, #0]
 80088d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088d4:	d106      	bne.n	80088e4 <mem_trim+0x180>
 80088d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008944 <mem_trim+0x1e0>)
 80088d8:	f240 3216 	movw	r2, #790	@ 0x316
 80088dc:	491d      	ldr	r1, [pc, #116]	@ (8008954 <mem_trim+0x1f0>)
 80088de:	481b      	ldr	r0, [pc, #108]	@ (800894c <mem_trim+0x1e8>)
 80088e0:	f009 ffd8 	bl	8012894 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80088e4:	89fb      	ldrh	r3, [r7, #14]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7ff fd94 	bl	8008414 <ptr_to_mem>
 80088ec:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80088ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008958 <mem_trim+0x1f4>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d202      	bcs.n	80088fe <mem_trim+0x19a>
      lfree = mem2;
 80088f8:	4a17      	ldr	r2, [pc, #92]	@ (8008958 <mem_trim+0x1f4>)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2200      	movs	r2, #0
 8008902:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	881a      	ldrh	r2, [r3, #0]
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	8afa      	ldrh	r2, [r7, #22]
 8008910:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	89fa      	ldrh	r2, [r7, #14]
 8008916:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	881b      	ldrh	r3, [r3, #0]
 800891c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008920:	d007      	beq.n	8008932 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	4618      	mov	r0, r3
 8008928:	f7ff fd74 	bl	8008414 <ptr_to_mem>
 800892c:	4602      	mov	r2, r0
 800892e:	89fb      	ldrh	r3, [r7, #14]
 8008930:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008932:	687b      	ldr	r3, [r7, #4]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3720      	adds	r7, #32
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	20005a98 	.word	0x20005a98
 8008940:	20005a9c 	.word	0x20005a9c
 8008944:	08013bac 	.word	0x08013bac
 8008948:	08013d1c 	.word	0x08013d1c
 800894c:	08013bf4 	.word	0x08013bf4
 8008950:	08013d34 	.word	0x08013d34
 8008954:	08013d54 	.word	0x08013d54
 8008958:	20005aa0 	.word	0x20005aa0

0800895c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b088      	sub	sp, #32
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <mem_malloc+0x14>
    return NULL;
 800896c:	2300      	movs	r3, #0
 800896e:	e0d9      	b.n	8008b24 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008970:	88fb      	ldrh	r3, [r7, #6]
 8008972:	3303      	adds	r3, #3
 8008974:	b29b      	uxth	r3, r3
 8008976:	f023 0303 	bic.w	r3, r3, #3
 800897a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800897c:	8bbb      	ldrh	r3, [r7, #28]
 800897e:	2b0b      	cmp	r3, #11
 8008980:	d801      	bhi.n	8008986 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008982:	230c      	movs	r3, #12
 8008984:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008986:	8bbb      	ldrh	r3, [r7, #28]
 8008988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800898c:	d803      	bhi.n	8008996 <mem_malloc+0x3a>
 800898e:	8bba      	ldrh	r2, [r7, #28]
 8008990:	88fb      	ldrh	r3, [r7, #6]
 8008992:	429a      	cmp	r2, r3
 8008994:	d201      	bcs.n	800899a <mem_malloc+0x3e>
    return NULL;
 8008996:	2300      	movs	r3, #0
 8008998:	e0c4      	b.n	8008b24 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800899a:	4b64      	ldr	r3, [pc, #400]	@ (8008b2c <mem_malloc+0x1d0>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff fd4a 	bl	8008438 <mem_to_ptr>
 80089a4:	4603      	mov	r3, r0
 80089a6:	83fb      	strh	r3, [r7, #30]
 80089a8:	e0b4      	b.n	8008b14 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80089aa:	8bfb      	ldrh	r3, [r7, #30]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7ff fd31 	bl	8008414 <ptr_to_mem>
 80089b2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	791b      	ldrb	r3, [r3, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f040 80a4 	bne.w	8008b06 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	881b      	ldrh	r3, [r3, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	8bfb      	ldrh	r3, [r7, #30]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	f1a3 0208 	sub.w	r2, r3, #8
 80089cc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80089ce:	429a      	cmp	r2, r3
 80089d0:	f0c0 8099 	bcc.w	8008b06 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	881b      	ldrh	r3, [r3, #0]
 80089d8:	461a      	mov	r2, r3
 80089da:	8bfb      	ldrh	r3, [r7, #30]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	f1a3 0208 	sub.w	r2, r3, #8
 80089e2:	8bbb      	ldrh	r3, [r7, #28]
 80089e4:	3314      	adds	r3, #20
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d333      	bcc.n	8008a52 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80089ea:	8bfa      	ldrh	r2, [r7, #30]
 80089ec:	8bbb      	ldrh	r3, [r7, #28]
 80089ee:	4413      	add	r3, r2
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	3308      	adds	r3, #8
 80089f4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80089f6:	8a7b      	ldrh	r3, [r7, #18]
 80089f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089fc:	d106      	bne.n	8008a0c <mem_malloc+0xb0>
 80089fe:	4b4c      	ldr	r3, [pc, #304]	@ (8008b30 <mem_malloc+0x1d4>)
 8008a00:	f240 3287 	movw	r2, #903	@ 0x387
 8008a04:	494b      	ldr	r1, [pc, #300]	@ (8008b34 <mem_malloc+0x1d8>)
 8008a06:	484c      	ldr	r0, [pc, #304]	@ (8008b38 <mem_malloc+0x1dc>)
 8008a08:	f009 ff44 	bl	8012894 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008a0c:	8a7b      	ldrh	r3, [r7, #18]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7ff fd00 	bl	8008414 <ptr_to_mem>
 8008a14:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	881a      	ldrh	r2, [r3, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8bfa      	ldrh	r2, [r7, #30]
 8008a28:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	8a7a      	ldrh	r2, [r7, #18]
 8008a2e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	2201      	movs	r2, #1
 8008a34:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a3e:	d00b      	beq.n	8008a58 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	881b      	ldrh	r3, [r3, #0]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7ff fce5 	bl	8008414 <ptr_to_mem>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	8a7b      	ldrh	r3, [r7, #18]
 8008a4e:	8053      	strh	r3, [r2, #2]
 8008a50:	e002      	b.n	8008a58 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2201      	movs	r2, #1
 8008a56:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008a58:	4b34      	ldr	r3, [pc, #208]	@ (8008b2c <mem_malloc+0x1d0>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d127      	bne.n	8008ab2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8008a62:	4b32      	ldr	r3, [pc, #200]	@ (8008b2c <mem_malloc+0x1d0>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008a68:	e005      	b.n	8008a76 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7ff fcd0 	bl	8008414 <ptr_to_mem>
 8008a74:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	791b      	ldrb	r3, [r3, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d004      	beq.n	8008a88 <mem_malloc+0x12c>
 8008a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8008b3c <mem_malloc+0x1e0>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d1f0      	bne.n	8008a6a <mem_malloc+0x10e>
          }
          lfree = cur;
 8008a88:	4a28      	ldr	r2, [pc, #160]	@ (8008b2c <mem_malloc+0x1d0>)
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008a8e:	4b27      	ldr	r3, [pc, #156]	@ (8008b2c <mem_malloc+0x1d0>)
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	4b2a      	ldr	r3, [pc, #168]	@ (8008b3c <mem_malloc+0x1e0>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d00b      	beq.n	8008ab2 <mem_malloc+0x156>
 8008a9a:	4b24      	ldr	r3, [pc, #144]	@ (8008b2c <mem_malloc+0x1d0>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	791b      	ldrb	r3, [r3, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d006      	beq.n	8008ab2 <mem_malloc+0x156>
 8008aa4:	4b22      	ldr	r3, [pc, #136]	@ (8008b30 <mem_malloc+0x1d4>)
 8008aa6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8008aaa:	4925      	ldr	r1, [pc, #148]	@ (8008b40 <mem_malloc+0x1e4>)
 8008aac:	4822      	ldr	r0, [pc, #136]	@ (8008b38 <mem_malloc+0x1dc>)
 8008aae:	f009 fef1 	bl	8012894 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008ab2:	8bba      	ldrh	r2, [r7, #28]
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	3308      	adds	r3, #8
 8008aba:	4a20      	ldr	r2, [pc, #128]	@ (8008b3c <mem_malloc+0x1e0>)
 8008abc:	6812      	ldr	r2, [r2, #0]
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d906      	bls.n	8008ad0 <mem_malloc+0x174>
 8008ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b30 <mem_malloc+0x1d4>)
 8008ac4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8008ac8:	491e      	ldr	r1, [pc, #120]	@ (8008b44 <mem_malloc+0x1e8>)
 8008aca:	481b      	ldr	r0, [pc, #108]	@ (8008b38 <mem_malloc+0x1dc>)
 8008acc:	f009 fee2 	bl	8012894 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f003 0303 	and.w	r3, r3, #3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d006      	beq.n	8008ae8 <mem_malloc+0x18c>
 8008ada:	4b15      	ldr	r3, [pc, #84]	@ (8008b30 <mem_malloc+0x1d4>)
 8008adc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8008ae0:	4919      	ldr	r1, [pc, #100]	@ (8008b48 <mem_malloc+0x1ec>)
 8008ae2:	4815      	ldr	r0, [pc, #84]	@ (8008b38 <mem_malloc+0x1dc>)
 8008ae4:	f009 fed6 	bl	8012894 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	f003 0303 	and.w	r3, r3, #3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d006      	beq.n	8008b00 <mem_malloc+0x1a4>
 8008af2:	4b0f      	ldr	r3, [pc, #60]	@ (8008b30 <mem_malloc+0x1d4>)
 8008af4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8008af8:	4914      	ldr	r1, [pc, #80]	@ (8008b4c <mem_malloc+0x1f0>)
 8008afa:	480f      	ldr	r0, [pc, #60]	@ (8008b38 <mem_malloc+0x1dc>)
 8008afc:	f009 feca 	bl	8012894 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	3308      	adds	r3, #8
 8008b04:	e00e      	b.n	8008b24 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008b06:	8bfb      	ldrh	r3, [r7, #30]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7ff fc83 	bl	8008414 <ptr_to_mem>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	881b      	ldrh	r3, [r3, #0]
 8008b12:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008b14:	8bfa      	ldrh	r2, [r7, #30]
 8008b16:	8bbb      	ldrh	r3, [r7, #28]
 8008b18:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	f4ff af44 	bcc.w	80089aa <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3720      	adds	r7, #32
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	20005aa0 	.word	0x20005aa0
 8008b30:	08013bac 	.word	0x08013bac
 8008b34:	08013d54 	.word	0x08013d54
 8008b38:	08013bf4 	.word	0x08013bf4
 8008b3c:	20005a9c 	.word	0x20005a9c
 8008b40:	08013d68 	.word	0x08013d68
 8008b44:	08013d84 	.word	0x08013d84
 8008b48:	08013db4 	.word	0x08013db4
 8008b4c:	08013de4 	.word	0x08013de4

08008b50 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	3303      	adds	r3, #3
 8008b66:	f023 0303 	bic.w	r3, r3, #3
 8008b6a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60fb      	str	r3, [r7, #12]
 8008b70:	e011      	b.n	8008b96 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	3301      	adds	r3, #1
 8008b94:	60fb      	str	r3, [r7, #12]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	885b      	ldrh	r3, [r3, #2]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	dbe7      	blt.n	8008b72 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008ba2:	bf00      	nop
 8008ba4:	bf00      	nop
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	80fb      	strh	r3, [r7, #6]
 8008bba:	e009      	b.n	8008bd0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008bbc:	88fb      	ldrh	r3, [r7, #6]
 8008bbe:	4a08      	ldr	r2, [pc, #32]	@ (8008be0 <memp_init+0x30>)
 8008bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff ffc3 	bl	8008b50 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008bca:	88fb      	ldrh	r3, [r7, #6]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	80fb      	strh	r3, [r7, #6]
 8008bd0:	88fb      	ldrh	r3, [r7, #6]
 8008bd2:	2b08      	cmp	r3, #8
 8008bd4:	d9f2      	bls.n	8008bbc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008bd6:	bf00      	nop
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	080165c8 	.word	0x080165c8

08008be4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d012      	beq.n	8008c20 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	6812      	ldr	r2, [r2, #0]
 8008c02:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f003 0303 	and.w	r3, r3, #3
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d006      	beq.n	8008c1c <do_memp_malloc_pool+0x38>
 8008c0e:	4b07      	ldr	r3, [pc, #28]	@ (8008c2c <do_memp_malloc_pool+0x48>)
 8008c10:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8008c14:	4906      	ldr	r1, [pc, #24]	@ (8008c30 <do_memp_malloc_pool+0x4c>)
 8008c16:	4807      	ldr	r0, [pc, #28]	@ (8008c34 <do_memp_malloc_pool+0x50>)
 8008c18:	f009 fe3c 	bl	8012894 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	e000      	b.n	8008c22 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	08013e08 	.word	0x08013e08
 8008c30:	08013e38 	.word	0x08013e38
 8008c34:	08013e5c 	.word	0x08013e5c

08008c38 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d106      	bne.n	8008c54 <memp_malloc_pool+0x1c>
 8008c46:	4b0a      	ldr	r3, [pc, #40]	@ (8008c70 <memp_malloc_pool+0x38>)
 8008c48:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8008c4c:	4909      	ldr	r1, [pc, #36]	@ (8008c74 <memp_malloc_pool+0x3c>)
 8008c4e:	480a      	ldr	r0, [pc, #40]	@ (8008c78 <memp_malloc_pool+0x40>)
 8008c50:	f009 fe20 	bl	8012894 <iprintf>
  if (desc == NULL) {
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <memp_malloc_pool+0x26>
    return NULL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	e003      	b.n	8008c66 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7ff ffc0 	bl	8008be4 <do_memp_malloc_pool>
 8008c64:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	08013e08 	.word	0x08013e08
 8008c74:	08013e84 	.word	0x08013e84
 8008c78:	08013e5c 	.word	0x08013e5c

08008c7c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	4603      	mov	r3, r0
 8008c84:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008c86:	79fb      	ldrb	r3, [r7, #7]
 8008c88:	2b08      	cmp	r3, #8
 8008c8a:	d908      	bls.n	8008c9e <memp_malloc+0x22>
 8008c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb8 <memp_malloc+0x3c>)
 8008c8e:	f240 1257 	movw	r2, #343	@ 0x157
 8008c92:	490a      	ldr	r1, [pc, #40]	@ (8008cbc <memp_malloc+0x40>)
 8008c94:	480a      	ldr	r0, [pc, #40]	@ (8008cc0 <memp_malloc+0x44>)
 8008c96:	f009 fdfd 	bl	8012894 <iprintf>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	e008      	b.n	8008cb0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008c9e:	79fb      	ldrb	r3, [r7, #7]
 8008ca0:	4a08      	ldr	r2, [pc, #32]	@ (8008cc4 <memp_malloc+0x48>)
 8008ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7ff ff9c 	bl	8008be4 <do_memp_malloc_pool>
 8008cac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008cae:	68fb      	ldr	r3, [r7, #12]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	08013e08 	.word	0x08013e08
 8008cbc:	08013e98 	.word	0x08013e98
 8008cc0:	08013e5c 	.word	0x08013e5c
 8008cc4:	080165c8 	.word	0x080165c8

08008cc8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	f003 0303 	and.w	r3, r3, #3
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d006      	beq.n	8008cea <do_memp_free_pool+0x22>
 8008cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8008d08 <do_memp_free_pool+0x40>)
 8008cde:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8008ce2:	490a      	ldr	r1, [pc, #40]	@ (8008d0c <do_memp_free_pool+0x44>)
 8008ce4:	480a      	ldr	r0, [pc, #40]	@ (8008d10 <do_memp_free_pool+0x48>)
 8008ce6:	f009 fdd5 	bl	8012894 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	08013e08 	.word	0x08013e08
 8008d0c:	08013eb8 	.word	0x08013eb8
 8008d10:	08013e5c 	.word	0x08013e5c

08008d14 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d106      	bne.n	8008d32 <memp_free_pool+0x1e>
 8008d24:	4b0a      	ldr	r3, [pc, #40]	@ (8008d50 <memp_free_pool+0x3c>)
 8008d26:	f240 1295 	movw	r2, #405	@ 0x195
 8008d2a:	490a      	ldr	r1, [pc, #40]	@ (8008d54 <memp_free_pool+0x40>)
 8008d2c:	480a      	ldr	r0, [pc, #40]	@ (8008d58 <memp_free_pool+0x44>)
 8008d2e:	f009 fdb1 	bl	8012894 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d007      	beq.n	8008d48 <memp_free_pool+0x34>
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d004      	beq.n	8008d48 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff ffc1 	bl	8008cc8 <do_memp_free_pool>
 8008d46:	e000      	b.n	8008d4a <memp_free_pool+0x36>
    return;
 8008d48:	bf00      	nop
}
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	08013e08 	.word	0x08013e08
 8008d54:	08013e84 	.word	0x08013e84
 8008d58:	08013e5c 	.word	0x08013e5c

08008d5c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	6039      	str	r1, [r7, #0]
 8008d66:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008d68:	79fb      	ldrb	r3, [r7, #7]
 8008d6a:	2b08      	cmp	r3, #8
 8008d6c:	d907      	bls.n	8008d7e <memp_free+0x22>
 8008d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008da0 <memp_free+0x44>)
 8008d70:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8008d74:	490b      	ldr	r1, [pc, #44]	@ (8008da4 <memp_free+0x48>)
 8008d76:	480c      	ldr	r0, [pc, #48]	@ (8008da8 <memp_free+0x4c>)
 8008d78:	f009 fd8c 	bl	8012894 <iprintf>
 8008d7c:	e00c      	b.n	8008d98 <memp_free+0x3c>

  if (mem == NULL) {
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d008      	beq.n	8008d96 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008d84:	79fb      	ldrb	r3, [r7, #7]
 8008d86:	4a09      	ldr	r2, [pc, #36]	@ (8008dac <memp_free+0x50>)
 8008d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff ff9a 	bl	8008cc8 <do_memp_free_pool>
 8008d94:	e000      	b.n	8008d98 <memp_free+0x3c>
    return;
 8008d96:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	08013e08 	.word	0x08013e08
 8008da4:	08013ed8 	.word	0x08013ed8
 8008da8:	08013e5c 	.word	0x08013e5c
 8008dac:	080165c8 	.word	0x080165c8

08008db0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008db0:	b480      	push	{r7}
 8008db2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008db4:	bf00      	nop
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
	...

08008dc0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d108      	bne.n	8008de6 <netif_add+0x26>
 8008dd4:	4b57      	ldr	r3, [pc, #348]	@ (8008f34 <netif_add+0x174>)
 8008dd6:	f240 1227 	movw	r2, #295	@ 0x127
 8008dda:	4957      	ldr	r1, [pc, #348]	@ (8008f38 <netif_add+0x178>)
 8008ddc:	4857      	ldr	r0, [pc, #348]	@ (8008f3c <netif_add+0x17c>)
 8008dde:	f009 fd59 	bl	8012894 <iprintf>
 8008de2:	2300      	movs	r3, #0
 8008de4:	e0a2      	b.n	8008f2c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d108      	bne.n	8008dfe <netif_add+0x3e>
 8008dec:	4b51      	ldr	r3, [pc, #324]	@ (8008f34 <netif_add+0x174>)
 8008dee:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008df2:	4953      	ldr	r1, [pc, #332]	@ (8008f40 <netif_add+0x180>)
 8008df4:	4851      	ldr	r0, [pc, #324]	@ (8008f3c <netif_add+0x17c>)
 8008df6:	f009 fd4d 	bl	8012894 <iprintf>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e096      	b.n	8008f2c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008e04:	4b4f      	ldr	r3, [pc, #316]	@ (8008f44 <netif_add+0x184>)
 8008e06:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008e0e:	4b4d      	ldr	r3, [pc, #308]	@ (8008f44 <netif_add+0x184>)
 8008e10:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008e18:	4b4a      	ldr	r3, [pc, #296]	@ (8008f44 <netif_add+0x184>)
 8008e1a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	4a45      	ldr	r2, [pc, #276]	@ (8008f48 <netif_add+0x188>)
 8008e32:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6a3a      	ldr	r2, [r7, #32]
 8008e4c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8008f4c <netif_add+0x18c>)
 8008e50:	781a      	ldrb	r2, [r3, #0]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e5c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	68b9      	ldr	r1, [r7, #8]
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f000 f913 	bl	8009090 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	4798      	blx	r3
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <netif_add+0xba>
    return NULL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	e058      	b.n	8008f2c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e80:	2bff      	cmp	r3, #255	@ 0xff
 8008e82:	d103      	bne.n	8008e8c <netif_add+0xcc>
        netif->num = 0;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008e90:	4b2f      	ldr	r3, [pc, #188]	@ (8008f50 <netif_add+0x190>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	617b      	str	r3, [r7, #20]
 8008e96:	e02b      	b.n	8008ef0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d106      	bne.n	8008eae <netif_add+0xee>
 8008ea0:	4b24      	ldr	r3, [pc, #144]	@ (8008f34 <netif_add+0x174>)
 8008ea2:	f240 128b 	movw	r2, #395	@ 0x18b
 8008ea6:	492b      	ldr	r1, [pc, #172]	@ (8008f54 <netif_add+0x194>)
 8008ea8:	4824      	ldr	r0, [pc, #144]	@ (8008f3c <netif_add+0x17c>)
 8008eaa:	f009 fcf3 	bl	8012894 <iprintf>
        num_netifs++;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	2bff      	cmp	r3, #255	@ 0xff
 8008eb8:	dd06      	ble.n	8008ec8 <netif_add+0x108>
 8008eba:	4b1e      	ldr	r3, [pc, #120]	@ (8008f34 <netif_add+0x174>)
 8008ebc:	f240 128d 	movw	r2, #397	@ 0x18d
 8008ec0:	4925      	ldr	r1, [pc, #148]	@ (8008f58 <netif_add+0x198>)
 8008ec2:	481e      	ldr	r0, [pc, #120]	@ (8008f3c <netif_add+0x17c>)
 8008ec4:	f009 fce6 	bl	8012894 <iprintf>
        if (netif2->num == netif->num) {
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d108      	bne.n	8008eea <netif_add+0x12a>
          netif->num++;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008ede:	3301      	adds	r3, #1
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8008ee8:	e005      	b.n	8008ef6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	617b      	str	r3, [r7, #20]
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1d0      	bne.n	8008e98 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1be      	bne.n	8008e7a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008f02:	2bfe      	cmp	r3, #254	@ 0xfe
 8008f04:	d103      	bne.n	8008f0e <netif_add+0x14e>
    netif_num = 0;
 8008f06:	4b11      	ldr	r3, [pc, #68]	@ (8008f4c <netif_add+0x18c>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	701a      	strb	r2, [r3, #0]
 8008f0c:	e006      	b.n	8008f1c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008f14:	3301      	adds	r3, #1
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	4b0c      	ldr	r3, [pc, #48]	@ (8008f4c <netif_add+0x18c>)
 8008f1a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f50 <netif_add+0x190>)
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008f24:	4a0a      	ldr	r2, [pc, #40]	@ (8008f50 <netif_add+0x190>)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	08013ef4 	.word	0x08013ef4
 8008f38:	08013f88 	.word	0x08013f88
 8008f3c:	08013f44 	.word	0x08013f44
 8008f40:	08013fa4 	.word	0x08013fa4
 8008f44:	0801662c 	.word	0x0801662c
 8008f48:	0800936b 	.word	0x0800936b
 8008f4c:	20008998 	.word	0x20008998
 8008f50:	20008990 	.word	0x20008990
 8008f54:	08013fc8 	.word	0x08013fc8
 8008f58:	08013fdc 	.word	0x08013fdc

08008f5c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f002 fbe7 	bl	800b73c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008f6e:	6839      	ldr	r1, [r7, #0]
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f007 f815 	bl	800ffa0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008f76:	bf00      	nop
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d106      	bne.n	8008fa0 <netif_do_set_ipaddr+0x20>
 8008f92:	4b1d      	ldr	r3, [pc, #116]	@ (8009008 <netif_do_set_ipaddr+0x88>)
 8008f94:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8008f98:	491c      	ldr	r1, [pc, #112]	@ (800900c <netif_do_set_ipaddr+0x8c>)
 8008f9a:	481d      	ldr	r0, [pc, #116]	@ (8009010 <netif_do_set_ipaddr+0x90>)
 8008f9c:	f009 fc7a 	bl	8012894 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d106      	bne.n	8008fb4 <netif_do_set_ipaddr+0x34>
 8008fa6:	4b18      	ldr	r3, [pc, #96]	@ (8009008 <netif_do_set_ipaddr+0x88>)
 8008fa8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8008fac:	4917      	ldr	r1, [pc, #92]	@ (800900c <netif_do_set_ipaddr+0x8c>)
 8008fae:	4818      	ldr	r0, [pc, #96]	@ (8009010 <netif_do_set_ipaddr+0x90>)
 8008fb0:	f009 fc70 	bl	8012894 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d01c      	beq.n	8008ffc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	3304      	adds	r3, #4
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008fd2:	f107 0314 	add.w	r3, r7, #20
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff ffbf 	bl	8008f5c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <netif_do_set_ipaddr+0x6a>
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	e000      	b.n	8008fec <netif_do_set_ipaddr+0x6c>
 8008fea:	2300      	movs	r3, #0
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 f8d2 	bl	800919c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e000      	b.n	8008ffe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	08013ef4 	.word	0x08013ef4
 800900c:	0801400c 	.word	0x0801400c
 8009010:	08013f44 	.word	0x08013f44

08009014 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3308      	adds	r3, #8
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	429a      	cmp	r2, r3
 800902c:	d00a      	beq.n	8009044 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <netif_do_set_netmask+0x26>
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	e000      	b.n	800903c <netif_do_set_netmask+0x28>
 800903a:	2300      	movs	r3, #0
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009040:	2301      	movs	r3, #1
 8009042:	e000      	b.n	8009046 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009052:	b480      	push	{r7}
 8009054:	b085      	sub	sp, #20
 8009056:	af00      	add	r7, sp, #0
 8009058:	60f8      	str	r0, [r7, #12]
 800905a:	60b9      	str	r1, [r7, #8]
 800905c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	330c      	adds	r3, #12
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	429a      	cmp	r2, r3
 800906a:	d00a      	beq.n	8009082 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <netif_do_set_gw+0x26>
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	e000      	b.n	800907a <netif_do_set_gw+0x28>
 8009078:	2300      	movs	r3, #0
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800907e:	2301      	movs	r3, #1
 8009080:	e000      	b.n	8009084 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b088      	sub	sp, #32
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
 800909c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800909e:	2300      	movs	r3, #0
 80090a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80090ac:	4b1c      	ldr	r3, [pc, #112]	@ (8009120 <netif_set_addr+0x90>)
 80090ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80090b6:	4b1a      	ldr	r3, [pc, #104]	@ (8009120 <netif_set_addr+0x90>)
 80090b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80090c0:	4b17      	ldr	r3, [pc, #92]	@ (8009120 <netif_set_addr+0x90>)
 80090c2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d003      	beq.n	80090d2 <netif_set_addr+0x42>
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <netif_set_addr+0x46>
 80090d2:	2301      	movs	r3, #1
 80090d4:	e000      	b.n	80090d8 <netif_set_addr+0x48>
 80090d6:	2300      	movs	r3, #0
 80090d8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d006      	beq.n	80090ee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80090e0:	f107 0310 	add.w	r3, r7, #16
 80090e4:	461a      	mov	r2, r3
 80090e6:	68b9      	ldr	r1, [r7, #8]
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f7ff ff49 	bl	8008f80 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80090ee:	69fa      	ldr	r2, [r7, #28]
 80090f0:	6879      	ldr	r1, [r7, #4]
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f7ff ff8e 	bl	8009014 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f7ff ffa8 	bl	8009052 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d106      	bne.n	8009116 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009108:	f107 0310 	add.w	r3, r7, #16
 800910c:	461a      	mov	r2, r3
 800910e:	68b9      	ldr	r1, [r7, #8]
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f7ff ff35 	bl	8008f80 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009116:	bf00      	nop
 8009118:	3720      	adds	r7, #32
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	0801662c 	.word	0x0801662c

08009124 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800912c:	4a04      	ldr	r2, [pc, #16]	@ (8009140 <netif_set_default+0x1c>)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009132:	bf00      	nop
 8009134:	370c      	adds	r7, #12
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	20008994 	.word	0x20008994

08009144 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d107      	bne.n	8009162 <netif_set_up+0x1e>
 8009152:	4b0f      	ldr	r3, [pc, #60]	@ (8009190 <netif_set_up+0x4c>)
 8009154:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8009158:	490e      	ldr	r1, [pc, #56]	@ (8009194 <netif_set_up+0x50>)
 800915a:	480f      	ldr	r0, [pc, #60]	@ (8009198 <netif_set_up+0x54>)
 800915c:	f009 fb9a 	bl	8012894 <iprintf>
 8009160:	e013      	b.n	800918a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009168:	f003 0301 	and.w	r3, r3, #1
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10c      	bne.n	800918a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009176:	f043 0301 	orr.w	r3, r3, #1
 800917a:	b2da      	uxtb	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009182:	2103      	movs	r1, #3
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f809 	bl	800919c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	08013ef4 	.word	0x08013ef4
 8009194:	0801407c 	.word	0x0801407c
 8009198:	08013f44 	.word	0x08013f44

0800919c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d106      	bne.n	80091bc <netif_issue_reports+0x20>
 80091ae:	4b18      	ldr	r3, [pc, #96]	@ (8009210 <netif_issue_reports+0x74>)
 80091b0:	f240 326d 	movw	r2, #877	@ 0x36d
 80091b4:	4917      	ldr	r1, [pc, #92]	@ (8009214 <netif_issue_reports+0x78>)
 80091b6:	4818      	ldr	r0, [pc, #96]	@ (8009218 <netif_issue_reports+0x7c>)
 80091b8:	f009 fb6c 	bl	8012894 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80091c2:	f003 0304 	and.w	r3, r3, #4
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d01e      	beq.n	8009208 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80091d0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d017      	beq.n	8009208 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80091d8:	78fb      	ldrb	r3, [r7, #3]
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d013      	beq.n	800920a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	3304      	adds	r3, #4
 80091e6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00e      	beq.n	800920a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80091f2:	f003 0308 	and.w	r3, r3, #8
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d007      	beq.n	800920a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	3304      	adds	r3, #4
 80091fe:	4619      	mov	r1, r3
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f007 fe37 	bl	8010e74 <etharp_request>
 8009206:	e000      	b.n	800920a <netif_issue_reports+0x6e>
    return;
 8009208:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	08013ef4 	.word	0x08013ef4
 8009214:	08014098 	.word	0x08014098
 8009218:	08013f44 	.word	0x08013f44

0800921c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d107      	bne.n	800923a <netif_set_down+0x1e>
 800922a:	4b12      	ldr	r3, [pc, #72]	@ (8009274 <netif_set_down+0x58>)
 800922c:	f240 329b 	movw	r2, #923	@ 0x39b
 8009230:	4911      	ldr	r1, [pc, #68]	@ (8009278 <netif_set_down+0x5c>)
 8009232:	4812      	ldr	r0, [pc, #72]	@ (800927c <netif_set_down+0x60>)
 8009234:	f009 fb2e 	bl	8012894 <iprintf>
 8009238:	e019      	b.n	800926e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	2b00      	cmp	r3, #0
 8009246:	d012      	beq.n	800926e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800924e:	f023 0301 	bic.w	r3, r3, #1
 8009252:	b2da      	uxtb	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009260:	f003 0308 	and.w	r3, r3, #8
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f007 f9c1 	bl	80105f0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	08013ef4 	.word	0x08013ef4
 8009278:	080140bc 	.word	0x080140bc
 800927c:	08013f44 	.word	0x08013f44

08009280 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d107      	bne.n	800929e <netif_set_link_up+0x1e>
 800928e:	4b13      	ldr	r3, [pc, #76]	@ (80092dc <netif_set_link_up+0x5c>)
 8009290:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8009294:	4912      	ldr	r1, [pc, #72]	@ (80092e0 <netif_set_link_up+0x60>)
 8009296:	4813      	ldr	r0, [pc, #76]	@ (80092e4 <netif_set_link_up+0x64>)
 8009298:	f009 fafc 	bl	8012894 <iprintf>
 800929c:	e01b      	b.n	80092d6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80092a4:	f003 0304 	and.w	r3, r3, #4
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d114      	bne.n	80092d6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80092b2:	f043 0304 	orr.w	r3, r3, #4
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80092be:	2103      	movs	r1, #3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff ff6b 	bl	800919c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <netif_set_link_up+0x56>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	08013ef4 	.word	0x08013ef4
 80092e0:	080140dc 	.word	0x080140dc
 80092e4:	08013f44 	.word	0x08013f44

080092e8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d107      	bne.n	8009306 <netif_set_link_down+0x1e>
 80092f6:	4b11      	ldr	r3, [pc, #68]	@ (800933c <netif_set_link_down+0x54>)
 80092f8:	f240 4206 	movw	r2, #1030	@ 0x406
 80092fc:	4910      	ldr	r1, [pc, #64]	@ (8009340 <netif_set_link_down+0x58>)
 80092fe:	4811      	ldr	r0, [pc, #68]	@ (8009344 <netif_set_link_down+0x5c>)
 8009300:	f009 fac8 	bl	8012894 <iprintf>
 8009304:	e017      	b.n	8009336 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800930c:	f003 0304 	and.w	r3, r3, #4
 8009310:	2b00      	cmp	r3, #0
 8009312:	d010      	beq.n	8009336 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800931a:	f023 0304 	bic.w	r3, r3, #4
 800931e:	b2da      	uxtb	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d003      	beq.n	8009336 <netif_set_link_down+0x4e>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	69db      	ldr	r3, [r3, #28]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	08013ef4 	.word	0x08013ef4
 8009340:	08014100 	.word	0x08014100
 8009344:	08013f44 	.word	0x08013f44

08009348 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	61da      	str	r2, [r3, #28]
  }
}
 800935e:	bf00      	nop
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800936a:	b480      	push	{r7}
 800936c:	b085      	sub	sp, #20
 800936e:	af00      	add	r7, sp, #0
 8009370:	60f8      	str	r0, [r7, #12]
 8009372:	60b9      	str	r1, [r7, #8]
 8009374:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009376:	f06f 030b 	mvn.w	r3, #11
}
 800937a:	4618      	mov	r0, r3
 800937c:	3714      	adds	r7, #20
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
	...

08009388 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009392:	79fb      	ldrb	r3, [r7, #7]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d013      	beq.n	80093c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009398:	4b0d      	ldr	r3, [pc, #52]	@ (80093d0 <netif_get_by_index+0x48>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	60fb      	str	r3, [r7, #12]
 800939e:	e00c      	b.n	80093ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80093a6:	3301      	adds	r3, #1
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	79fa      	ldrb	r2, [r7, #7]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d101      	bne.n	80093b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	e006      	b.n	80093c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	60fb      	str	r3, [r7, #12]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1ef      	bne.n	80093a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3714      	adds	r7, #20
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	20008990 	.word	0x20008990

080093d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80093da:	4b0c      	ldr	r3, [pc, #48]	@ (800940c <pbuf_free_ooseq+0x38>)
 80093dc:	2200      	movs	r2, #0
 80093de:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80093e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009410 <pbuf_free_ooseq+0x3c>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	607b      	str	r3, [r7, #4]
 80093e6:	e00a      	b.n	80093fe <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d003      	beq.n	80093f8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f002 f9e1 	bl	800b7b8 <tcp_free_ooseq>
      return;
 80093f6:	e005      	b.n	8009404 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	607b      	str	r3, [r7, #4]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1f1      	bne.n	80093e8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	20008999 	.word	0x20008999
 8009410:	200089a8 	.word	0x200089a8

08009414 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009414:	b480      	push	{r7}
 8009416:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009418:	4b03      	ldr	r3, [pc, #12]	@ (8009428 <pbuf_pool_is_empty+0x14>)
 800941a:	2201      	movs	r2, #1
 800941c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800941e:	bf00      	nop
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	20008999 	.word	0x20008999

0800942c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	4611      	mov	r1, r2
 8009438:	461a      	mov	r2, r3
 800943a:	460b      	mov	r3, r1
 800943c:	80fb      	strh	r3, [r7, #6]
 800943e:	4613      	mov	r3, r2
 8009440:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	88fa      	ldrh	r2, [r7, #6]
 8009452:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	88ba      	ldrh	r2, [r7, #4]
 8009458:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800945a:	8b3b      	ldrh	r3, [r7, #24]
 800945c:	b2da      	uxtb	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	7f3a      	ldrb	r2, [r7, #28]
 8009466:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2201      	movs	r2, #1
 800946c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	73da      	strb	r2, [r3, #15]
}
 8009474:	bf00      	nop
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b08c      	sub	sp, #48	@ 0x30
 8009484:	af02      	add	r7, sp, #8
 8009486:	4603      	mov	r3, r0
 8009488:	71fb      	strb	r3, [r7, #7]
 800948a:	460b      	mov	r3, r1
 800948c:	80bb      	strh	r3, [r7, #4]
 800948e:	4613      	mov	r3, r2
 8009490:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009492:	79fb      	ldrb	r3, [r7, #7]
 8009494:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009496:	887b      	ldrh	r3, [r7, #2]
 8009498:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800949c:	d07f      	beq.n	800959e <pbuf_alloc+0x11e>
 800949e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80094a2:	f300 80c8 	bgt.w	8009636 <pbuf_alloc+0x1b6>
 80094a6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80094aa:	d010      	beq.n	80094ce <pbuf_alloc+0x4e>
 80094ac:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80094b0:	f300 80c1 	bgt.w	8009636 <pbuf_alloc+0x1b6>
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d002      	beq.n	80094be <pbuf_alloc+0x3e>
 80094b8:	2b41      	cmp	r3, #65	@ 0x41
 80094ba:	f040 80bc 	bne.w	8009636 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80094be:	887a      	ldrh	r2, [r7, #2]
 80094c0:	88bb      	ldrh	r3, [r7, #4]
 80094c2:	4619      	mov	r1, r3
 80094c4:	2000      	movs	r0, #0
 80094c6:	f000 f8d1 	bl	800966c <pbuf_alloc_reference>
 80094ca:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80094cc:	e0bd      	b.n	800964a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80094ce:	2300      	movs	r3, #0
 80094d0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80094d2:	2300      	movs	r3, #0
 80094d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80094d6:	88bb      	ldrh	r3, [r7, #4]
 80094d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80094da:	2008      	movs	r0, #8
 80094dc:	f7ff fbce 	bl	8008c7c <memp_malloc>
 80094e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d109      	bne.n	80094fc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80094e8:	f7ff ff94 	bl	8009414 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80094ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80094f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094f4:	f000 faa8 	bl	8009a48 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80094f8:	2300      	movs	r3, #0
 80094fa:	e0a7      	b.n	800964c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80094fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80094fe:	3303      	adds	r3, #3
 8009500:	b29b      	uxth	r3, r3
 8009502:	f023 0303 	bic.w	r3, r3, #3
 8009506:	b29b      	uxth	r3, r3
 8009508:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800950c:	b29b      	uxth	r3, r3
 800950e:	8b7a      	ldrh	r2, [r7, #26]
 8009510:	4293      	cmp	r3, r2
 8009512:	bf28      	it	cs
 8009514:	4613      	movcs	r3, r2
 8009516:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009518:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800951a:	3310      	adds	r3, #16
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	4413      	add	r3, r2
 8009520:	3303      	adds	r3, #3
 8009522:	f023 0303 	bic.w	r3, r3, #3
 8009526:	4618      	mov	r0, r3
 8009528:	89f9      	ldrh	r1, [r7, #14]
 800952a:	8b7a      	ldrh	r2, [r7, #26]
 800952c:	2300      	movs	r3, #0
 800952e:	9301      	str	r3, [sp, #4]
 8009530:	887b      	ldrh	r3, [r7, #2]
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	460b      	mov	r3, r1
 8009536:	4601      	mov	r1, r0
 8009538:	6938      	ldr	r0, [r7, #16]
 800953a:	f7ff ff77 	bl	800942c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f003 0303 	and.w	r3, r3, #3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d006      	beq.n	8009558 <pbuf_alloc+0xd8>
 800954a:	4b42      	ldr	r3, [pc, #264]	@ (8009654 <pbuf_alloc+0x1d4>)
 800954c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009550:	4941      	ldr	r1, [pc, #260]	@ (8009658 <pbuf_alloc+0x1d8>)
 8009552:	4842      	ldr	r0, [pc, #264]	@ (800965c <pbuf_alloc+0x1dc>)
 8009554:	f009 f99e 	bl	8012894 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009558:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800955a:	3303      	adds	r3, #3
 800955c:	f023 0303 	bic.w	r3, r3, #3
 8009560:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8009564:	d106      	bne.n	8009574 <pbuf_alloc+0xf4>
 8009566:	4b3b      	ldr	r3, [pc, #236]	@ (8009654 <pbuf_alloc+0x1d4>)
 8009568:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800956c:	493c      	ldr	r1, [pc, #240]	@ (8009660 <pbuf_alloc+0x1e0>)
 800956e:	483b      	ldr	r0, [pc, #236]	@ (800965c <pbuf_alloc+0x1dc>)
 8009570:	f009 f990 	bl	8012894 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009576:	2b00      	cmp	r3, #0
 8009578:	d102      	bne.n	8009580 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	627b      	str	r3, [r7, #36]	@ 0x24
 800957e:	e002      	b.n	8009586 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800958a:	8b7a      	ldrh	r2, [r7, #26]
 800958c:	89fb      	ldrh	r3, [r7, #14]
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8009596:	8b7b      	ldrh	r3, [r7, #26]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d19e      	bne.n	80094da <pbuf_alloc+0x5a>
      break;
 800959c:	e055      	b.n	800964a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800959e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80095a0:	3303      	adds	r3, #3
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	f023 0303 	bic.w	r3, r3, #3
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	88bb      	ldrh	r3, [r7, #4]
 80095ac:	3303      	adds	r3, #3
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	f023 0303 	bic.w	r3, r3, #3
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	4413      	add	r3, r2
 80095b8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80095ba:	8b3b      	ldrh	r3, [r7, #24]
 80095bc:	3310      	adds	r3, #16
 80095be:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80095c0:	8b3a      	ldrh	r2, [r7, #24]
 80095c2:	88bb      	ldrh	r3, [r7, #4]
 80095c4:	3303      	adds	r3, #3
 80095c6:	f023 0303 	bic.w	r3, r3, #3
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d306      	bcc.n	80095dc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80095ce:	8afa      	ldrh	r2, [r7, #22]
 80095d0:	88bb      	ldrh	r3, [r7, #4]
 80095d2:	3303      	adds	r3, #3
 80095d4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80095d8:	429a      	cmp	r2, r3
 80095da:	d201      	bcs.n	80095e0 <pbuf_alloc+0x160>
        return NULL;
 80095dc:	2300      	movs	r3, #0
 80095de:	e035      	b.n	800964c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80095e0:	8afb      	ldrh	r3, [r7, #22]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7ff f9ba 	bl	800895c <mem_malloc>
 80095e8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80095ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <pbuf_alloc+0x174>
        return NULL;
 80095f0:	2300      	movs	r3, #0
 80095f2:	e02b      	b.n	800964c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80095f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80095f6:	3310      	adds	r3, #16
 80095f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095fa:	4413      	add	r3, r2
 80095fc:	3303      	adds	r3, #3
 80095fe:	f023 0303 	bic.w	r3, r3, #3
 8009602:	4618      	mov	r0, r3
 8009604:	88b9      	ldrh	r1, [r7, #4]
 8009606:	88ba      	ldrh	r2, [r7, #4]
 8009608:	2300      	movs	r3, #0
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	887b      	ldrh	r3, [r7, #2]
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	460b      	mov	r3, r1
 8009612:	4601      	mov	r1, r0
 8009614:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009616:	f7ff ff09 	bl	800942c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800961a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f003 0303 	and.w	r3, r3, #3
 8009622:	2b00      	cmp	r3, #0
 8009624:	d010      	beq.n	8009648 <pbuf_alloc+0x1c8>
 8009626:	4b0b      	ldr	r3, [pc, #44]	@ (8009654 <pbuf_alloc+0x1d4>)
 8009628:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800962c:	490d      	ldr	r1, [pc, #52]	@ (8009664 <pbuf_alloc+0x1e4>)
 800962e:	480b      	ldr	r0, [pc, #44]	@ (800965c <pbuf_alloc+0x1dc>)
 8009630:	f009 f930 	bl	8012894 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009634:	e008      	b.n	8009648 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009636:	4b07      	ldr	r3, [pc, #28]	@ (8009654 <pbuf_alloc+0x1d4>)
 8009638:	f240 1227 	movw	r2, #295	@ 0x127
 800963c:	490a      	ldr	r1, [pc, #40]	@ (8009668 <pbuf_alloc+0x1e8>)
 800963e:	4807      	ldr	r0, [pc, #28]	@ (800965c <pbuf_alloc+0x1dc>)
 8009640:	f009 f928 	bl	8012894 <iprintf>
      return NULL;
 8009644:	2300      	movs	r3, #0
 8009646:	e001      	b.n	800964c <pbuf_alloc+0x1cc>
      break;
 8009648:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800964a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800964c:	4618      	mov	r0, r3
 800964e:	3728      	adds	r7, #40	@ 0x28
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	08014124 	.word	0x08014124
 8009658:	08014154 	.word	0x08014154
 800965c:	08014184 	.word	0x08014184
 8009660:	080141ac 	.word	0x080141ac
 8009664:	080141e0 	.word	0x080141e0
 8009668:	0801420c 	.word	0x0801420c

0800966c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af02      	add	r7, sp, #8
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	807b      	strh	r3, [r7, #2]
 8009678:	4613      	mov	r3, r2
 800967a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800967c:	883b      	ldrh	r3, [r7, #0]
 800967e:	2b41      	cmp	r3, #65	@ 0x41
 8009680:	d009      	beq.n	8009696 <pbuf_alloc_reference+0x2a>
 8009682:	883b      	ldrh	r3, [r7, #0]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d006      	beq.n	8009696 <pbuf_alloc_reference+0x2a>
 8009688:	4b0f      	ldr	r3, [pc, #60]	@ (80096c8 <pbuf_alloc_reference+0x5c>)
 800968a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800968e:	490f      	ldr	r1, [pc, #60]	@ (80096cc <pbuf_alloc_reference+0x60>)
 8009690:	480f      	ldr	r0, [pc, #60]	@ (80096d0 <pbuf_alloc_reference+0x64>)
 8009692:	f009 f8ff 	bl	8012894 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009696:	2007      	movs	r0, #7
 8009698:	f7ff faf0 	bl	8008c7c <memp_malloc>
 800969c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d101      	bne.n	80096a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80096a4:	2300      	movs	r3, #0
 80096a6:	e00b      	b.n	80096c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80096a8:	8879      	ldrh	r1, [r7, #2]
 80096aa:	887a      	ldrh	r2, [r7, #2]
 80096ac:	2300      	movs	r3, #0
 80096ae:	9301      	str	r3, [sp, #4]
 80096b0:	883b      	ldrh	r3, [r7, #0]
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	460b      	mov	r3, r1
 80096b6:	6879      	ldr	r1, [r7, #4]
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f7ff feb7 	bl	800942c <pbuf_init_alloced_pbuf>
  return p;
 80096be:	68fb      	ldr	r3, [r7, #12]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	08014124 	.word	0x08014124
 80096cc:	08014228 	.word	0x08014228
 80096d0:	08014184 	.word	0x08014184

080096d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b088      	sub	sp, #32
 80096d8:	af02      	add	r7, sp, #8
 80096da:	607b      	str	r3, [r7, #4]
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]
 80096e0:	460b      	mov	r3, r1
 80096e2:	81bb      	strh	r3, [r7, #12]
 80096e4:	4613      	mov	r3, r2
 80096e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80096ec:	8a7b      	ldrh	r3, [r7, #18]
 80096ee:	3303      	adds	r3, #3
 80096f0:	f023 0203 	bic.w	r2, r3, #3
 80096f4:	89bb      	ldrh	r3, [r7, #12]
 80096f6:	441a      	add	r2, r3
 80096f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d901      	bls.n	8009702 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80096fe:	2300      	movs	r3, #0
 8009700:	e018      	b.n	8009734 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009702:	6a3b      	ldr	r3, [r7, #32]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d007      	beq.n	8009718 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009708:	8a7b      	ldrh	r3, [r7, #18]
 800970a:	3303      	adds	r3, #3
 800970c:	f023 0303 	bic.w	r3, r3, #3
 8009710:	6a3a      	ldr	r2, [r7, #32]
 8009712:	4413      	add	r3, r2
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	e001      	b.n	800971c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	89b9      	ldrh	r1, [r7, #12]
 8009720:	89ba      	ldrh	r2, [r7, #12]
 8009722:	2302      	movs	r3, #2
 8009724:	9301      	str	r3, [sp, #4]
 8009726:	897b      	ldrh	r3, [r7, #10]
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	460b      	mov	r3, r1
 800972c:	6979      	ldr	r1, [r7, #20]
 800972e:	f7ff fe7d 	bl	800942c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009732:	687b      	ldr	r3, [r7, #4]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3718      	adds	r7, #24
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d106      	bne.n	800975c <pbuf_realloc+0x20>
 800974e:	4b3a      	ldr	r3, [pc, #232]	@ (8009838 <pbuf_realloc+0xfc>)
 8009750:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8009754:	4939      	ldr	r1, [pc, #228]	@ (800983c <pbuf_realloc+0x100>)
 8009756:	483a      	ldr	r0, [pc, #232]	@ (8009840 <pbuf_realloc+0x104>)
 8009758:	f009 f89c 	bl	8012894 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	891b      	ldrh	r3, [r3, #8]
 8009760:	887a      	ldrh	r2, [r7, #2]
 8009762:	429a      	cmp	r2, r3
 8009764:	d263      	bcs.n	800982e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	891a      	ldrh	r2, [r3, #8]
 800976a:	887b      	ldrh	r3, [r7, #2]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009770:	887b      	ldrh	r3, [r7, #2]
 8009772:	817b      	strh	r3, [r7, #10]
  q = p;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009778:	e018      	b.n	80097ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	895b      	ldrh	r3, [r3, #10]
 800977e:	897a      	ldrh	r2, [r7, #10]
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	891a      	ldrh	r2, [r3, #8]
 8009788:	893b      	ldrh	r3, [r7, #8]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	b29a      	uxth	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d106      	bne.n	80097ac <pbuf_realloc+0x70>
 800979e:	4b26      	ldr	r3, [pc, #152]	@ (8009838 <pbuf_realloc+0xfc>)
 80097a0:	f240 12af 	movw	r2, #431	@ 0x1af
 80097a4:	4927      	ldr	r1, [pc, #156]	@ (8009844 <pbuf_realloc+0x108>)
 80097a6:	4826      	ldr	r0, [pc, #152]	@ (8009840 <pbuf_realloc+0x104>)
 80097a8:	f009 f874 	bl	8012894 <iprintf>
  while (rem_len > q->len) {
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	895b      	ldrh	r3, [r3, #10]
 80097b0:	897a      	ldrh	r2, [r7, #10]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d8e1      	bhi.n	800977a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	7b1b      	ldrb	r3, [r3, #12]
 80097ba:	f003 030f 	and.w	r3, r3, #15
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d121      	bne.n	8009806 <pbuf_realloc+0xca>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	895b      	ldrh	r3, [r3, #10]
 80097c6:	897a      	ldrh	r2, [r7, #10]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d01c      	beq.n	8009806 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	7b5b      	ldrb	r3, [r3, #13]
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d116      	bne.n	8009806 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	897b      	ldrh	r3, [r7, #10]
 80097e4:	4413      	add	r3, r2
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	4619      	mov	r1, r3
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f7fe ffba 	bl	8008764 <mem_trim>
 80097f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d106      	bne.n	8009806 <pbuf_realloc+0xca>
 80097f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009838 <pbuf_realloc+0xfc>)
 80097fa:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80097fe:	4912      	ldr	r1, [pc, #72]	@ (8009848 <pbuf_realloc+0x10c>)
 8009800:	480f      	ldr	r0, [pc, #60]	@ (8009840 <pbuf_realloc+0x104>)
 8009802:	f009 f847 	bl	8012894 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	897a      	ldrh	r2, [r7, #10]
 800980a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	895a      	ldrh	r2, [r3, #10]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d004      	beq.n	8009826 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4618      	mov	r0, r3
 8009822:	f000 f911 	bl	8009a48 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	e000      	b.n	8009830 <pbuf_realloc+0xf4>
    return;
 800982e:	bf00      	nop

}
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	08014124 	.word	0x08014124
 800983c:	0801423c 	.word	0x0801423c
 8009840:	08014184 	.word	0x08014184
 8009844:	08014254 	.word	0x08014254
 8009848:	0801426c 	.word	0x0801426c

0800984c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	4613      	mov	r3, r2
 8009858:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d106      	bne.n	800986e <pbuf_add_header_impl+0x22>
 8009860:	4b2b      	ldr	r3, [pc, #172]	@ (8009910 <pbuf_add_header_impl+0xc4>)
 8009862:	f240 12df 	movw	r2, #479	@ 0x1df
 8009866:	492b      	ldr	r1, [pc, #172]	@ (8009914 <pbuf_add_header_impl+0xc8>)
 8009868:	482b      	ldr	r0, [pc, #172]	@ (8009918 <pbuf_add_header_impl+0xcc>)
 800986a:	f009 f813 	bl	8012894 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d003      	beq.n	800987c <pbuf_add_header_impl+0x30>
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800987a:	d301      	bcc.n	8009880 <pbuf_add_header_impl+0x34>
    return 1;
 800987c:	2301      	movs	r3, #1
 800987e:	e043      	b.n	8009908 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <pbuf_add_header_impl+0x3e>
    return 0;
 8009886:	2300      	movs	r3, #0
 8009888:	e03e      	b.n	8009908 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	891a      	ldrh	r2, [r3, #8]
 8009892:	8a7b      	ldrh	r3, [r7, #18]
 8009894:	4413      	add	r3, r2
 8009896:	b29b      	uxth	r3, r3
 8009898:	8a7a      	ldrh	r2, [r7, #18]
 800989a:	429a      	cmp	r2, r3
 800989c:	d901      	bls.n	80098a2 <pbuf_add_header_impl+0x56>
    return 1;
 800989e:	2301      	movs	r3, #1
 80098a0:	e032      	b.n	8009908 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	7b1b      	ldrb	r3, [r3, #12]
 80098a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80098a8:	8a3b      	ldrh	r3, [r7, #16]
 80098aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00c      	beq.n	80098cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	425b      	negs	r3, r3
 80098ba:	4413      	add	r3, r2
 80098bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	3310      	adds	r3, #16
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d20d      	bcs.n	80098e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e01d      	b.n	8009908 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80098cc:	79fb      	ldrb	r3, [r7, #7]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d006      	beq.n	80098e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	685a      	ldr	r2, [r3, #4]
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	425b      	negs	r3, r3
 80098da:	4413      	add	r3, r2
 80098dc:	617b      	str	r3, [r7, #20]
 80098de:	e001      	b.n	80098e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e011      	b.n	8009908 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	895a      	ldrh	r2, [r3, #10]
 80098ee:	8a7b      	ldrh	r3, [r7, #18]
 80098f0:	4413      	add	r3, r2
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	891a      	ldrh	r2, [r3, #8]
 80098fc:	8a7b      	ldrh	r3, [r7, #18]
 80098fe:	4413      	add	r3, r2
 8009900:	b29a      	uxth	r2, r3
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	811a      	strh	r2, [r3, #8]


  return 0;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	08014124 	.word	0x08014124
 8009914:	08014288 	.word	0x08014288
 8009918:	08014184 	.word	0x08014184

0800991c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009926:	2200      	movs	r2, #0
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7ff ff8e 	bl	800984c <pbuf_add_header_impl>
 8009930:	4603      	mov	r3, r0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
	...

0800993c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d106      	bne.n	800995a <pbuf_remove_header+0x1e>
 800994c:	4b20      	ldr	r3, [pc, #128]	@ (80099d0 <pbuf_remove_header+0x94>)
 800994e:	f240 224b 	movw	r2, #587	@ 0x24b
 8009952:	4920      	ldr	r1, [pc, #128]	@ (80099d4 <pbuf_remove_header+0x98>)
 8009954:	4820      	ldr	r0, [pc, #128]	@ (80099d8 <pbuf_remove_header+0x9c>)
 8009956:	f008 ff9d 	bl	8012894 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <pbuf_remove_header+0x2c>
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009966:	d301      	bcc.n	800996c <pbuf_remove_header+0x30>
    return 1;
 8009968:	2301      	movs	r3, #1
 800996a:	e02c      	b.n	80099c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d101      	bne.n	8009976 <pbuf_remove_header+0x3a>
    return 0;
 8009972:	2300      	movs	r3, #0
 8009974:	e027      	b.n	80099c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	895b      	ldrh	r3, [r3, #10]
 800997e:	89fa      	ldrh	r2, [r7, #14]
 8009980:	429a      	cmp	r2, r3
 8009982:	d908      	bls.n	8009996 <pbuf_remove_header+0x5a>
 8009984:	4b12      	ldr	r3, [pc, #72]	@ (80099d0 <pbuf_remove_header+0x94>)
 8009986:	f240 2255 	movw	r2, #597	@ 0x255
 800998a:	4914      	ldr	r1, [pc, #80]	@ (80099dc <pbuf_remove_header+0xa0>)
 800998c:	4812      	ldr	r0, [pc, #72]	@ (80099d8 <pbuf_remove_header+0x9c>)
 800998e:	f008 ff81 	bl	8012894 <iprintf>
 8009992:	2301      	movs	r3, #1
 8009994:	e017      	b.n	80099c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685a      	ldr	r2, [r3, #4]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	441a      	add	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	895a      	ldrh	r2, [r3, #10]
 80099ac:	89fb      	ldrh	r3, [r7, #14]
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	891a      	ldrh	r2, [r3, #8]
 80099ba:	89fb      	ldrh	r3, [r7, #14]
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	b29a      	uxth	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	08014124 	.word	0x08014124
 80099d4:	08014288 	.word	0x08014288
 80099d8:	08014184 	.word	0x08014184
 80099dc:	08014294 	.word	0x08014294

080099e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	460b      	mov	r3, r1
 80099ea:	807b      	strh	r3, [r7, #2]
 80099ec:	4613      	mov	r3, r2
 80099ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80099f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	da08      	bge.n	8009a0a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80099f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80099fc:	425b      	negs	r3, r3
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7ff ff9b 	bl	800993c <pbuf_remove_header>
 8009a06:	4603      	mov	r3, r0
 8009a08:	e007      	b.n	8009a1a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009a0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009a0e:	787a      	ldrb	r2, [r7, #1]
 8009a10:	4619      	mov	r1, r3
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7ff ff1a 	bl	800984c <pbuf_add_header_impl>
 8009a18:	4603      	mov	r3, r0
  }
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b082      	sub	sp, #8
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009a2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009a32:	2201      	movs	r2, #1
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7ff ffd2 	bl	80099e0 <pbuf_header_impl>
 8009a3c:	4603      	mov	r3, r0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10b      	bne.n	8009a6e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d106      	bne.n	8009a6a <pbuf_free+0x22>
 8009a5c:	4b38      	ldr	r3, [pc, #224]	@ (8009b40 <pbuf_free+0xf8>)
 8009a5e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8009a62:	4938      	ldr	r1, [pc, #224]	@ (8009b44 <pbuf_free+0xfc>)
 8009a64:	4838      	ldr	r0, [pc, #224]	@ (8009b48 <pbuf_free+0x100>)
 8009a66:	f008 ff15 	bl	8012894 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	e063      	b.n	8009b36 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009a72:	e05c      	b.n	8009b2e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	7b9b      	ldrb	r3, [r3, #14]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d106      	bne.n	8009a8a <pbuf_free+0x42>
 8009a7c:	4b30      	ldr	r3, [pc, #192]	@ (8009b40 <pbuf_free+0xf8>)
 8009a7e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8009a82:	4932      	ldr	r1, [pc, #200]	@ (8009b4c <pbuf_free+0x104>)
 8009a84:	4830      	ldr	r0, [pc, #192]	@ (8009b48 <pbuf_free+0x100>)
 8009a86:	f008 ff05 	bl	8012894 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	7b9b      	ldrb	r3, [r3, #14]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	739a      	strb	r2, [r3, #14]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	7b9b      	ldrb	r3, [r3, #14]
 8009a9a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009a9c:	7dbb      	ldrb	r3, [r7, #22]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d143      	bne.n	8009b2a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	7b1b      	ldrb	r3, [r3, #12]
 8009aac:	f003 030f 	and.w	r3, r3, #15
 8009ab0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	7b5b      	ldrb	r3, [r3, #13]
 8009ab6:	f003 0302 	and.w	r3, r3, #2
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d011      	beq.n	8009ae2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d106      	bne.n	8009ad8 <pbuf_free+0x90>
 8009aca:	4b1d      	ldr	r3, [pc, #116]	@ (8009b40 <pbuf_free+0xf8>)
 8009acc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8009ad0:	491f      	ldr	r1, [pc, #124]	@ (8009b50 <pbuf_free+0x108>)
 8009ad2:	481d      	ldr	r0, [pc, #116]	@ (8009b48 <pbuf_free+0x100>)
 8009ad4:	f008 fede 	bl	8012894 <iprintf>
        pc->custom_free_function(p);
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	4798      	blx	r3
 8009ae0:	e01d      	b.n	8009b1e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d104      	bne.n	8009af2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009ae8:	6879      	ldr	r1, [r7, #4]
 8009aea:	2008      	movs	r0, #8
 8009aec:	f7ff f936 	bl	8008d5c <memp_free>
 8009af0:	e015      	b.n	8009b1e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d104      	bne.n	8009b02 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009af8:	6879      	ldr	r1, [r7, #4]
 8009afa:	2007      	movs	r0, #7
 8009afc:	f7ff f92e 	bl	8008d5c <memp_free>
 8009b00:	e00d      	b.n	8009b1e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d103      	bne.n	8009b10 <pbuf_free+0xc8>
          mem_free(p);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7fe fdc1 	bl	8008690 <mem_free>
 8009b0e:	e006      	b.n	8009b1e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009b10:	4b0b      	ldr	r3, [pc, #44]	@ (8009b40 <pbuf_free+0xf8>)
 8009b12:	f240 320f 	movw	r2, #783	@ 0x30f
 8009b16:	490f      	ldr	r1, [pc, #60]	@ (8009b54 <pbuf_free+0x10c>)
 8009b18:	480b      	ldr	r0, [pc, #44]	@ (8009b48 <pbuf_free+0x100>)
 8009b1a:	f008 febb 	bl	8012894 <iprintf>
        }
      }
      count++;
 8009b1e:	7dfb      	ldrb	r3, [r7, #23]
 8009b20:	3301      	adds	r3, #1
 8009b22:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	607b      	str	r3, [r7, #4]
 8009b28:	e001      	b.n	8009b2e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d19f      	bne.n	8009a74 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	08014124 	.word	0x08014124
 8009b44:	08014288 	.word	0x08014288
 8009b48:	08014184 	.word	0x08014184
 8009b4c:	080142b4 	.word	0x080142b4
 8009b50:	080142cc 	.word	0x080142cc
 8009b54:	080142f0 	.word	0x080142f0

08009b58 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009b60:	2300      	movs	r3, #0
 8009b62:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009b64:	e005      	b.n	8009b72 <pbuf_clen+0x1a>
    ++len;
 8009b66:	89fb      	ldrh	r3, [r7, #14]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1f6      	bne.n	8009b66 <pbuf_clen+0xe>
  }
  return len;
 8009b78:	89fb      	ldrh	r3, [r7, #14]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3714      	adds	r7, #20
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
	...

08009b88 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d010      	beq.n	8009bb8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	7b9b      	ldrb	r3, [r3, #14]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	7b9b      	ldrb	r3, [r3, #14]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d106      	bne.n	8009bb8 <pbuf_ref+0x30>
 8009baa:	4b05      	ldr	r3, [pc, #20]	@ (8009bc0 <pbuf_ref+0x38>)
 8009bac:	f240 3242 	movw	r2, #834	@ 0x342
 8009bb0:	4904      	ldr	r1, [pc, #16]	@ (8009bc4 <pbuf_ref+0x3c>)
 8009bb2:	4805      	ldr	r0, [pc, #20]	@ (8009bc8 <pbuf_ref+0x40>)
 8009bb4:	f008 fe6e 	bl	8012894 <iprintf>
  }
}
 8009bb8:	bf00      	nop
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	08014124 	.word	0x08014124
 8009bc4:	08014304 	.word	0x08014304
 8009bc8:	08014184 	.word	0x08014184

08009bcc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <pbuf_cat+0x16>
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d107      	bne.n	8009bf2 <pbuf_cat+0x26>
 8009be2:	4b20      	ldr	r3, [pc, #128]	@ (8009c64 <pbuf_cat+0x98>)
 8009be4:	f240 3259 	movw	r2, #857	@ 0x359
 8009be8:	491f      	ldr	r1, [pc, #124]	@ (8009c68 <pbuf_cat+0x9c>)
 8009bea:	4820      	ldr	r0, [pc, #128]	@ (8009c6c <pbuf_cat+0xa0>)
 8009bec:	f008 fe52 	bl	8012894 <iprintf>
 8009bf0:	e034      	b.n	8009c5c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	60fb      	str	r3, [r7, #12]
 8009bf6:	e00a      	b.n	8009c0e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	891a      	ldrh	r2, [r3, #8]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	891b      	ldrh	r3, [r3, #8]
 8009c00:	4413      	add	r3, r2
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	60fb      	str	r3, [r7, #12]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1f0      	bne.n	8009bf8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	891a      	ldrh	r2, [r3, #8]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	895b      	ldrh	r3, [r3, #10]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d006      	beq.n	8009c30 <pbuf_cat+0x64>
 8009c22:	4b10      	ldr	r3, [pc, #64]	@ (8009c64 <pbuf_cat+0x98>)
 8009c24:	f240 3262 	movw	r2, #866	@ 0x362
 8009c28:	4911      	ldr	r1, [pc, #68]	@ (8009c70 <pbuf_cat+0xa4>)
 8009c2a:	4810      	ldr	r0, [pc, #64]	@ (8009c6c <pbuf_cat+0xa0>)
 8009c2c:	f008 fe32 	bl	8012894 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d006      	beq.n	8009c46 <pbuf_cat+0x7a>
 8009c38:	4b0a      	ldr	r3, [pc, #40]	@ (8009c64 <pbuf_cat+0x98>)
 8009c3a:	f240 3263 	movw	r2, #867	@ 0x363
 8009c3e:	490d      	ldr	r1, [pc, #52]	@ (8009c74 <pbuf_cat+0xa8>)
 8009c40:	480a      	ldr	r0, [pc, #40]	@ (8009c6c <pbuf_cat+0xa0>)
 8009c42:	f008 fe27 	bl	8012894 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	891a      	ldrh	r2, [r3, #8]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	891b      	ldrh	r3, [r3, #8]
 8009c4e:	4413      	add	r3, r2
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	08014124 	.word	0x08014124
 8009c68:	08014318 	.word	0x08014318
 8009c6c:	08014184 	.word	0x08014184
 8009c70:	08014350 	.word	0x08014350
 8009c74:	08014380 	.word	0x08014380

08009c78 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff ffa1 	bl	8009bcc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009c8a:	6838      	ldr	r0, [r7, #0]
 8009c8c:	f7ff ff7c 	bl	8009b88 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	617b      	str	r3, [r7, #20]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d008      	beq.n	8009cc2 <pbuf_copy+0x2a>
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d005      	beq.n	8009cc2 <pbuf_copy+0x2a>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	891a      	ldrh	r2, [r3, #8]
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	891b      	ldrh	r3, [r3, #8]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d209      	bcs.n	8009cd6 <pbuf_copy+0x3e>
 8009cc2:	4b57      	ldr	r3, [pc, #348]	@ (8009e20 <pbuf_copy+0x188>)
 8009cc4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8009cc8:	4956      	ldr	r1, [pc, #344]	@ (8009e24 <pbuf_copy+0x18c>)
 8009cca:	4857      	ldr	r0, [pc, #348]	@ (8009e28 <pbuf_copy+0x190>)
 8009ccc:	f008 fde2 	bl	8012894 <iprintf>
 8009cd0:	f06f 030f 	mvn.w	r3, #15
 8009cd4:	e09f      	b.n	8009e16 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	895b      	ldrh	r3, [r3, #10]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	1ad2      	subs	r2, r2, r3
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	895b      	ldrh	r3, [r3, #10]
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	1acb      	subs	r3, r1, r3
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d306      	bcc.n	8009cfc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	895b      	ldrh	r3, [r3, #10]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	60fb      	str	r3, [r7, #12]
 8009cfa:	e005      	b.n	8009d08 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	895b      	ldrh	r3, [r3, #10]
 8009d00:	461a      	mov	r2, r3
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	18d0      	adds	r0, r2, r3
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	4413      	add	r3, r2
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	f008 fee9 	bl	8012af2 <memcpy>
    offset_to += len;
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	4413      	add	r3, r2
 8009d26:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	895b      	ldrh	r3, [r3, #10]
 8009d34:	461a      	mov	r2, r3
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d906      	bls.n	8009d4a <pbuf_copy+0xb2>
 8009d3c:	4b38      	ldr	r3, [pc, #224]	@ (8009e20 <pbuf_copy+0x188>)
 8009d3e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8009d42:	493a      	ldr	r1, [pc, #232]	@ (8009e2c <pbuf_copy+0x194>)
 8009d44:	4838      	ldr	r0, [pc, #224]	@ (8009e28 <pbuf_copy+0x190>)
 8009d46:	f008 fda5 	bl	8012894 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	895b      	ldrh	r3, [r3, #10]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d906      	bls.n	8009d64 <pbuf_copy+0xcc>
 8009d56:	4b32      	ldr	r3, [pc, #200]	@ (8009e20 <pbuf_copy+0x188>)
 8009d58:	f240 32da 	movw	r2, #986	@ 0x3da
 8009d5c:	4934      	ldr	r1, [pc, #208]	@ (8009e30 <pbuf_copy+0x198>)
 8009d5e:	4832      	ldr	r0, [pc, #200]	@ (8009e28 <pbuf_copy+0x190>)
 8009d60:	f008 fd98 	bl	8012894 <iprintf>
    if (offset_from >= p_from->len) {
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	895b      	ldrh	r3, [r3, #10]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d304      	bcc.n	8009d7a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009d70:	2300      	movs	r3, #0
 8009d72:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	895b      	ldrh	r3, [r3, #10]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d114      	bne.n	8009db0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009d86:	2300      	movs	r3, #0
 8009d88:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10c      	bne.n	8009db0 <pbuf_copy+0x118>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d009      	beq.n	8009db0 <pbuf_copy+0x118>
 8009d9c:	4b20      	ldr	r3, [pc, #128]	@ (8009e20 <pbuf_copy+0x188>)
 8009d9e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8009da2:	4924      	ldr	r1, [pc, #144]	@ (8009e34 <pbuf_copy+0x19c>)
 8009da4:	4820      	ldr	r0, [pc, #128]	@ (8009e28 <pbuf_copy+0x190>)
 8009da6:	f008 fd75 	bl	8012894 <iprintf>
 8009daa:	f06f 030f 	mvn.w	r3, #15
 8009dae:	e032      	b.n	8009e16 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d013      	beq.n	8009dde <pbuf_copy+0x146>
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	895a      	ldrh	r2, [r3, #10]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	891b      	ldrh	r3, [r3, #8]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d10d      	bne.n	8009dde <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d009      	beq.n	8009dde <pbuf_copy+0x146>
 8009dca:	4b15      	ldr	r3, [pc, #84]	@ (8009e20 <pbuf_copy+0x188>)
 8009dcc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8009dd0:	4919      	ldr	r1, [pc, #100]	@ (8009e38 <pbuf_copy+0x1a0>)
 8009dd2:	4815      	ldr	r0, [pc, #84]	@ (8009e28 <pbuf_copy+0x190>)
 8009dd4:	f008 fd5e 	bl	8012894 <iprintf>
 8009dd8:	f06f 0305 	mvn.w	r3, #5
 8009ddc:	e01b      	b.n	8009e16 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d013      	beq.n	8009e0c <pbuf_copy+0x174>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	895a      	ldrh	r2, [r3, #10]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	891b      	ldrh	r3, [r3, #8]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d10d      	bne.n	8009e0c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d009      	beq.n	8009e0c <pbuf_copy+0x174>
 8009df8:	4b09      	ldr	r3, [pc, #36]	@ (8009e20 <pbuf_copy+0x188>)
 8009dfa:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009dfe:	490e      	ldr	r1, [pc, #56]	@ (8009e38 <pbuf_copy+0x1a0>)
 8009e00:	4809      	ldr	r0, [pc, #36]	@ (8009e28 <pbuf_copy+0x190>)
 8009e02:	f008 fd47 	bl	8012894 <iprintf>
 8009e06:	f06f 0305 	mvn.w	r3, #5
 8009e0a:	e004      	b.n	8009e16 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f47f af61 	bne.w	8009cd6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	08014124 	.word	0x08014124
 8009e24:	080143cc 	.word	0x080143cc
 8009e28:	08014184 	.word	0x08014184
 8009e2c:	080143fc 	.word	0x080143fc
 8009e30:	08014414 	.word	0x08014414
 8009e34:	08014430 	.word	0x08014430
 8009e38:	08014440 	.word	0x08014440

08009e3c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b088      	sub	sp, #32
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	4611      	mov	r1, r2
 8009e48:	461a      	mov	r2, r3
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	80fb      	strh	r3, [r7, #6]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009e52:	2300      	movs	r3, #0
 8009e54:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009e56:	2300      	movs	r3, #0
 8009e58:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d108      	bne.n	8009e72 <pbuf_copy_partial+0x36>
 8009e60:	4b2b      	ldr	r3, [pc, #172]	@ (8009f10 <pbuf_copy_partial+0xd4>)
 8009e62:	f240 420a 	movw	r2, #1034	@ 0x40a
 8009e66:	492b      	ldr	r1, [pc, #172]	@ (8009f14 <pbuf_copy_partial+0xd8>)
 8009e68:	482b      	ldr	r0, [pc, #172]	@ (8009f18 <pbuf_copy_partial+0xdc>)
 8009e6a:	f008 fd13 	bl	8012894 <iprintf>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e04a      	b.n	8009f08 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d108      	bne.n	8009e8a <pbuf_copy_partial+0x4e>
 8009e78:	4b25      	ldr	r3, [pc, #148]	@ (8009f10 <pbuf_copy_partial+0xd4>)
 8009e7a:	f240 420b 	movw	r2, #1035	@ 0x40b
 8009e7e:	4927      	ldr	r1, [pc, #156]	@ (8009f1c <pbuf_copy_partial+0xe0>)
 8009e80:	4825      	ldr	r0, [pc, #148]	@ (8009f18 <pbuf_copy_partial+0xdc>)
 8009e82:	f008 fd07 	bl	8012894 <iprintf>
 8009e86:	2300      	movs	r3, #0
 8009e88:	e03e      	b.n	8009f08 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	61fb      	str	r3, [r7, #28]
 8009e8e:	e034      	b.n	8009efa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009e90:	88bb      	ldrh	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00a      	beq.n	8009eac <pbuf_copy_partial+0x70>
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	895b      	ldrh	r3, [r3, #10]
 8009e9a:	88ba      	ldrh	r2, [r7, #4]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d305      	bcc.n	8009eac <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	895b      	ldrh	r3, [r3, #10]
 8009ea4:	88ba      	ldrh	r2, [r7, #4]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	80bb      	strh	r3, [r7, #4]
 8009eaa:	e023      	b.n	8009ef4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	895a      	ldrh	r2, [r3, #10]
 8009eb0:	88bb      	ldrh	r3, [r7, #4]
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009eb6:	8b3a      	ldrh	r2, [r7, #24]
 8009eb8:	88fb      	ldrh	r3, [r7, #6]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d901      	bls.n	8009ec2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009ebe:	88fb      	ldrh	r3, [r7, #6]
 8009ec0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009ec2:	8b7b      	ldrh	r3, [r7, #26]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	18d0      	adds	r0, r2, r3
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	88bb      	ldrh	r3, [r7, #4]
 8009ece:	4413      	add	r3, r2
 8009ed0:	8b3a      	ldrh	r2, [r7, #24]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	f008 fe0d 	bl	8012af2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009ed8:	8afa      	ldrh	r2, [r7, #22]
 8009eda:	8b3b      	ldrh	r3, [r7, #24]
 8009edc:	4413      	add	r3, r2
 8009ede:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009ee0:	8b7a      	ldrh	r2, [r7, #26]
 8009ee2:	8b3b      	ldrh	r3, [r7, #24]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009ee8:	88fa      	ldrh	r2, [r7, #6]
 8009eea:	8b3b      	ldrh	r3, [r7, #24]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	61fb      	str	r3, [r7, #28]
 8009efa:	88fb      	ldrh	r3, [r7, #6]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d002      	beq.n	8009f06 <pbuf_copy_partial+0xca>
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1c4      	bne.n	8009e90 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009f06:	8afb      	ldrh	r3, [r7, #22]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3720      	adds	r7, #32
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	08014124 	.word	0x08014124
 8009f14:	0801446c 	.word	0x0801446c
 8009f18:	08014184 	.word	0x08014184
 8009f1c:	0801448c 	.word	0x0801448c

08009f20 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8009f2e:	88fb      	ldrh	r3, [r7, #6]
 8009f30:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8009f32:	2300      	movs	r3, #0
 8009f34:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d109      	bne.n	8009f50 <pbuf_take+0x30>
 8009f3c:	4b3a      	ldr	r3, [pc, #232]	@ (800a028 <pbuf_take+0x108>)
 8009f3e:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8009f42:	493a      	ldr	r1, [pc, #232]	@ (800a02c <pbuf_take+0x10c>)
 8009f44:	483a      	ldr	r0, [pc, #232]	@ (800a030 <pbuf_take+0x110>)
 8009f46:	f008 fca5 	bl	8012894 <iprintf>
 8009f4a:	f06f 030f 	mvn.w	r3, #15
 8009f4e:	e067      	b.n	800a020 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d109      	bne.n	8009f6a <pbuf_take+0x4a>
 8009f56:	4b34      	ldr	r3, [pc, #208]	@ (800a028 <pbuf_take+0x108>)
 8009f58:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8009f5c:	4935      	ldr	r1, [pc, #212]	@ (800a034 <pbuf_take+0x114>)
 8009f5e:	4834      	ldr	r0, [pc, #208]	@ (800a030 <pbuf_take+0x110>)
 8009f60:	f008 fc98 	bl	8012894 <iprintf>
 8009f64:	f06f 030f 	mvn.w	r3, #15
 8009f68:	e05a      	b.n	800a020 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	891b      	ldrh	r3, [r3, #8]
 8009f6e:	88fa      	ldrh	r2, [r7, #6]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d909      	bls.n	8009f88 <pbuf_take+0x68>
 8009f74:	4b2c      	ldr	r3, [pc, #176]	@ (800a028 <pbuf_take+0x108>)
 8009f76:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 8009f7a:	492f      	ldr	r1, [pc, #188]	@ (800a038 <pbuf_take+0x118>)
 8009f7c:	482c      	ldr	r0, [pc, #176]	@ (800a030 <pbuf_take+0x110>)
 8009f7e:	f008 fc89 	bl	8012894 <iprintf>
 8009f82:	f04f 33ff 	mov.w	r3, #4294967295
 8009f86:	e04b      	b.n	800a020 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d007      	beq.n	8009f9e <pbuf_take+0x7e>
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d004      	beq.n	8009f9e <pbuf_take+0x7e>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	891b      	ldrh	r3, [r3, #8]
 8009f98:	88fa      	ldrh	r2, [r7, #6]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d902      	bls.n	8009fa4 <pbuf_take+0x84>
    return ERR_ARG;
 8009f9e:	f06f 030f 	mvn.w	r3, #15
 8009fa2:	e03d      	b.n	800a020 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	61fb      	str	r3, [r7, #28]
 8009fa8:	e028      	b.n	8009ffc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d106      	bne.n	8009fbe <pbuf_take+0x9e>
 8009fb0:	4b1d      	ldr	r3, [pc, #116]	@ (800a028 <pbuf_take+0x108>)
 8009fb2:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8009fb6:	4921      	ldr	r1, [pc, #132]	@ (800a03c <pbuf_take+0x11c>)
 8009fb8:	481d      	ldr	r0, [pc, #116]	@ (800a030 <pbuf_take+0x110>)
 8009fba:	f008 fc6b 	bl	8012894 <iprintf>
    buf_copy_len = total_copy_len;
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	895b      	ldrh	r3, [r3, #10]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d902      	bls.n	8009fd4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	895b      	ldrh	r3, [r3, #10]
 8009fd2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	6858      	ldr	r0, [r3, #4]
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	4413      	add	r3, r2
 8009fde:	69ba      	ldr	r2, [r7, #24]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	f008 fd86 	bl	8012af2 <memcpy>
    total_copy_len -= buf_copy_len;
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	61fb      	str	r3, [r7, #28]
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1d3      	bne.n	8009faa <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d103      	bne.n	800a010 <pbuf_take+0xf0>
 800a008:	88fb      	ldrh	r3, [r7, #6]
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d006      	beq.n	800a01e <pbuf_take+0xfe>
 800a010:	4b05      	ldr	r3, [pc, #20]	@ (800a028 <pbuf_take+0x108>)
 800a012:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800a016:	490a      	ldr	r1, [pc, #40]	@ (800a040 <pbuf_take+0x120>)
 800a018:	4805      	ldr	r0, [pc, #20]	@ (800a030 <pbuf_take+0x110>)
 800a01a:	f008 fc3b 	bl	8012894 <iprintf>
  return ERR_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3720      	adds	r7, #32
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	08014124 	.word	0x08014124
 800a02c:	080144fc 	.word	0x080144fc
 800a030:	08014184 	.word	0x08014184
 800a034:	08014514 	.word	0x08014514
 800a038:	08014530 	.word	0x08014530
 800a03c:	08014550 	.word	0x08014550
 800a040:	08014568 	.word	0x08014568

0800a044 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	4603      	mov	r3, r0
 800a04c:	603a      	str	r2, [r7, #0]
 800a04e:	71fb      	strb	r3, [r7, #7]
 800a050:	460b      	mov	r3, r1
 800a052:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	8919      	ldrh	r1, [r3, #8]
 800a058:	88ba      	ldrh	r2, [r7, #4]
 800a05a:	79fb      	ldrb	r3, [r7, #7]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7ff fa0f 	bl	8009480 <pbuf_alloc>
 800a062:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <pbuf_clone+0x2a>
    return NULL;
 800a06a:	2300      	movs	r3, #0
 800a06c:	e011      	b.n	800a092 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f7ff fe11 	bl	8009c98 <pbuf_copy>
 800a076:	4603      	mov	r3, r0
 800a078:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a07a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d006      	beq.n	800a090 <pbuf_clone+0x4c>
 800a082:	4b06      	ldr	r3, [pc, #24]	@ (800a09c <pbuf_clone+0x58>)
 800a084:	f240 5224 	movw	r2, #1316	@ 0x524
 800a088:	4905      	ldr	r1, [pc, #20]	@ (800a0a0 <pbuf_clone+0x5c>)
 800a08a:	4806      	ldr	r0, [pc, #24]	@ (800a0a4 <pbuf_clone+0x60>)
 800a08c:	f008 fc02 	bl	8012894 <iprintf>
  return q;
 800a090:	68fb      	ldr	r3, [r7, #12]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	08014124 	.word	0x08014124
 800a0a0:	08014598 	.word	0x08014598
 800a0a4:	08014184 	.word	0x08014184

0800a0a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a0ac:	f008 fa6e 	bl	801258c <rand>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	4b01      	ldr	r3, [pc, #4]	@ (800a0c8 <tcp_init+0x20>)
 800a0c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a0c4:	bf00      	nop
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	20000098 	.word	0x20000098

0800a0cc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	7d1b      	ldrb	r3, [r3, #20]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d105      	bne.n	800a0e8 <tcp_free+0x1c>
 800a0dc:	4b06      	ldr	r3, [pc, #24]	@ (800a0f8 <tcp_free+0x2c>)
 800a0de:	22d4      	movs	r2, #212	@ 0xd4
 800a0e0:	4906      	ldr	r1, [pc, #24]	@ (800a0fc <tcp_free+0x30>)
 800a0e2:	4807      	ldr	r0, [pc, #28]	@ (800a100 <tcp_free+0x34>)
 800a0e4:	f008 fbd6 	bl	8012894 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a0e8:	6879      	ldr	r1, [r7, #4]
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	f7fe fe36 	bl	8008d5c <memp_free>
}
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	08014624 	.word	0x08014624
 800a0fc:	08014654 	.word	0x08014654
 800a100:	08014668 	.word	0x08014668

0800a104 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	7d1b      	ldrb	r3, [r3, #20]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d105      	bne.n	800a120 <tcp_free_listen+0x1c>
 800a114:	4b06      	ldr	r3, [pc, #24]	@ (800a130 <tcp_free_listen+0x2c>)
 800a116:	22df      	movs	r2, #223	@ 0xdf
 800a118:	4906      	ldr	r1, [pc, #24]	@ (800a134 <tcp_free_listen+0x30>)
 800a11a:	4807      	ldr	r0, [pc, #28]	@ (800a138 <tcp_free_listen+0x34>)
 800a11c:	f008 fbba 	bl	8012894 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a120:	6879      	ldr	r1, [r7, #4]
 800a122:	2002      	movs	r0, #2
 800a124:	f7fe fe1a 	bl	8008d5c <memp_free>
}
 800a128:	bf00      	nop
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	08014624 	.word	0x08014624
 800a134:	08014690 	.word	0x08014690
 800a138:	08014668 	.word	0x08014668

0800a13c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a140:	f000 fea4 	bl	800ae8c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a144:	4b07      	ldr	r3, [pc, #28]	@ (800a164 <tcp_tmr+0x28>)
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	3301      	adds	r3, #1
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	4b05      	ldr	r3, [pc, #20]	@ (800a164 <tcp_tmr+0x28>)
 800a14e:	701a      	strb	r2, [r3, #0]
 800a150:	4b04      	ldr	r3, [pc, #16]	@ (800a164 <tcp_tmr+0x28>)
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	f003 0301 	and.w	r3, r3, #1
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a15c:	f000 fb54 	bl	800a808 <tcp_slowtmr>
  }
}
 800a160:	bf00      	nop
 800a162:	bd80      	pop	{r7, pc}
 800a164:	200089b1 	.word	0x200089b1

0800a168 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d105      	bne.n	800a184 <tcp_remove_listener+0x1c>
 800a178:	4b0d      	ldr	r3, [pc, #52]	@ (800a1b0 <tcp_remove_listener+0x48>)
 800a17a:	22ff      	movs	r2, #255	@ 0xff
 800a17c:	490d      	ldr	r1, [pc, #52]	@ (800a1b4 <tcp_remove_listener+0x4c>)
 800a17e:	480e      	ldr	r0, [pc, #56]	@ (800a1b8 <tcp_remove_listener+0x50>)
 800a180:	f008 fb88 	bl	8012894 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	60fb      	str	r3, [r7, #12]
 800a188:	e00a      	b.n	800a1a0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	429a      	cmp	r2, r3
 800a192:	d102      	bne.n	800a19a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	60fb      	str	r3, [r7, #12]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1f1      	bne.n	800a18a <tcp_remove_listener+0x22>
    }
  }
}
 800a1a6:	bf00      	nop
 800a1a8:	bf00      	nop
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	08014624 	.word	0x08014624
 800a1b4:	080146ac 	.word	0x080146ac
 800a1b8:	08014668 	.word	0x08014668

0800a1bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d106      	bne.n	800a1d8 <tcp_listen_closed+0x1c>
 800a1ca:	4b14      	ldr	r3, [pc, #80]	@ (800a21c <tcp_listen_closed+0x60>)
 800a1cc:	f240 1211 	movw	r2, #273	@ 0x111
 800a1d0:	4913      	ldr	r1, [pc, #76]	@ (800a220 <tcp_listen_closed+0x64>)
 800a1d2:	4814      	ldr	r0, [pc, #80]	@ (800a224 <tcp_listen_closed+0x68>)
 800a1d4:	f008 fb5e 	bl	8012894 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	7d1b      	ldrb	r3, [r3, #20]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d006      	beq.n	800a1ee <tcp_listen_closed+0x32>
 800a1e0:	4b0e      	ldr	r3, [pc, #56]	@ (800a21c <tcp_listen_closed+0x60>)
 800a1e2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800a1e6:	4910      	ldr	r1, [pc, #64]	@ (800a228 <tcp_listen_closed+0x6c>)
 800a1e8:	480e      	ldr	r0, [pc, #56]	@ (800a224 <tcp_listen_closed+0x68>)
 800a1ea:	f008 fb53 	bl	8012894 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	e00b      	b.n	800a20c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a1f4:	4a0d      	ldr	r2, [pc, #52]	@ (800a22c <tcp_listen_closed+0x70>)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	4618      	mov	r0, r3
 800a202:	f7ff ffb1 	bl	800a168 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3301      	adds	r3, #1
 800a20a:	60fb      	str	r3, [r7, #12]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2b03      	cmp	r3, #3
 800a210:	d9f0      	bls.n	800a1f4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a212:	bf00      	nop
 800a214:	bf00      	nop
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	08014624 	.word	0x08014624
 800a220:	080146d4 	.word	0x080146d4
 800a224:	08014668 	.word	0x08014668
 800a228:	080146e0 	.word	0x080146e0
 800a22c:	08016604 	.word	0x08016604

0800a230 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a230:	b5b0      	push	{r4, r5, r7, lr}
 800a232:	b088      	sub	sp, #32
 800a234:	af04      	add	r7, sp, #16
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	460b      	mov	r3, r1
 800a23a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d106      	bne.n	800a250 <tcp_close_shutdown+0x20>
 800a242:	4b63      	ldr	r3, [pc, #396]	@ (800a3d0 <tcp_close_shutdown+0x1a0>)
 800a244:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800a248:	4962      	ldr	r1, [pc, #392]	@ (800a3d4 <tcp_close_shutdown+0x1a4>)
 800a24a:	4863      	ldr	r0, [pc, #396]	@ (800a3d8 <tcp_close_shutdown+0x1a8>)
 800a24c:	f008 fb22 	bl	8012894 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a250:	78fb      	ldrb	r3, [r7, #3]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d066      	beq.n	800a324 <tcp_close_shutdown+0xf4>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	7d1b      	ldrb	r3, [r3, #20]
 800a25a:	2b04      	cmp	r3, #4
 800a25c:	d003      	beq.n	800a266 <tcp_close_shutdown+0x36>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	7d1b      	ldrb	r3, [r3, #20]
 800a262:	2b07      	cmp	r3, #7
 800a264:	d15e      	bne.n	800a324 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d104      	bne.n	800a278 <tcp_close_shutdown+0x48>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a272:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a276:	d055      	beq.n	800a324 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	8b5b      	ldrh	r3, [r3, #26]
 800a27c:	f003 0310 	and.w	r3, r3, #16
 800a280:	2b00      	cmp	r3, #0
 800a282:	d106      	bne.n	800a292 <tcp_close_shutdown+0x62>
 800a284:	4b52      	ldr	r3, [pc, #328]	@ (800a3d0 <tcp_close_shutdown+0x1a0>)
 800a286:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800a28a:	4954      	ldr	r1, [pc, #336]	@ (800a3dc <tcp_close_shutdown+0x1ac>)
 800a28c:	4852      	ldr	r0, [pc, #328]	@ (800a3d8 <tcp_close_shutdown+0x1a8>)
 800a28e:	f008 fb01 	bl	8012894 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a29a:	687d      	ldr	r5, [r7, #4]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	3304      	adds	r3, #4
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	8ad2      	ldrh	r2, [r2, #22]
 800a2a4:	6879      	ldr	r1, [r7, #4]
 800a2a6:	8b09      	ldrh	r1, [r1, #24]
 800a2a8:	9102      	str	r1, [sp, #8]
 800a2aa:	9201      	str	r2, [sp, #4]
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	462b      	mov	r3, r5
 800a2b0:	4622      	mov	r2, r4
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f004 fe8d 	bl	800efd4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f001 f8c8 	bl	800b450 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a2c0:	4b47      	ldr	r3, [pc, #284]	@ (800a3e0 <tcp_close_shutdown+0x1b0>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d105      	bne.n	800a2d6 <tcp_close_shutdown+0xa6>
 800a2ca:	4b45      	ldr	r3, [pc, #276]	@ (800a3e0 <tcp_close_shutdown+0x1b0>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	4a43      	ldr	r2, [pc, #268]	@ (800a3e0 <tcp_close_shutdown+0x1b0>)
 800a2d2:	6013      	str	r3, [r2, #0]
 800a2d4:	e013      	b.n	800a2fe <tcp_close_shutdown+0xce>
 800a2d6:	4b42      	ldr	r3, [pc, #264]	@ (800a3e0 <tcp_close_shutdown+0x1b0>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]
 800a2dc:	e00c      	b.n	800a2f8 <tcp_close_shutdown+0xc8>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d104      	bne.n	800a2f2 <tcp_close_shutdown+0xc2>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68da      	ldr	r2, [r3, #12]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	60da      	str	r2, [r3, #12]
 800a2f0:	e005      	b.n	800a2fe <tcp_close_shutdown+0xce>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1ef      	bne.n	800a2de <tcp_close_shutdown+0xae>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	60da      	str	r2, [r3, #12]
 800a304:	4b37      	ldr	r3, [pc, #220]	@ (800a3e4 <tcp_close_shutdown+0x1b4>)
 800a306:	2201      	movs	r2, #1
 800a308:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a30a:	4b37      	ldr	r3, [pc, #220]	@ (800a3e8 <tcp_close_shutdown+0x1b8>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	429a      	cmp	r2, r3
 800a312:	d102      	bne.n	800a31a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a314:	f003 fd5c 	bl	800ddd0 <tcp_trigger_input_pcb_close>
 800a318:	e002      	b.n	800a320 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7ff fed6 	bl	800a0cc <tcp_free>
      }
      return ERR_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	e050      	b.n	800a3c6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	7d1b      	ldrb	r3, [r3, #20]
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d03b      	beq.n	800a3a4 <tcp_close_shutdown+0x174>
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	dc44      	bgt.n	800a3ba <tcp_close_shutdown+0x18a>
 800a330:	2b00      	cmp	r3, #0
 800a332:	d002      	beq.n	800a33a <tcp_close_shutdown+0x10a>
 800a334:	2b01      	cmp	r3, #1
 800a336:	d02a      	beq.n	800a38e <tcp_close_shutdown+0x15e>
 800a338:	e03f      	b.n	800a3ba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	8adb      	ldrh	r3, [r3, #22]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d021      	beq.n	800a386 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a342:	4b2a      	ldr	r3, [pc, #168]	@ (800a3ec <tcp_close_shutdown+0x1bc>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d105      	bne.n	800a358 <tcp_close_shutdown+0x128>
 800a34c:	4b27      	ldr	r3, [pc, #156]	@ (800a3ec <tcp_close_shutdown+0x1bc>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	4a26      	ldr	r2, [pc, #152]	@ (800a3ec <tcp_close_shutdown+0x1bc>)
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	e013      	b.n	800a380 <tcp_close_shutdown+0x150>
 800a358:	4b24      	ldr	r3, [pc, #144]	@ (800a3ec <tcp_close_shutdown+0x1bc>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	60bb      	str	r3, [r7, #8]
 800a35e:	e00c      	b.n	800a37a <tcp_close_shutdown+0x14a>
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	429a      	cmp	r2, r3
 800a368:	d104      	bne.n	800a374 <tcp_close_shutdown+0x144>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68da      	ldr	r2, [r3, #12]
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	60da      	str	r2, [r3, #12]
 800a372:	e005      	b.n	800a380 <tcp_close_shutdown+0x150>
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	60bb      	str	r3, [r7, #8]
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d1ef      	bne.n	800a360 <tcp_close_shutdown+0x130>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7ff fea0 	bl	800a0cc <tcp_free>
      break;
 800a38c:	e01a      	b.n	800a3c4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7ff ff14 	bl	800a1bc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a394:	6879      	ldr	r1, [r7, #4]
 800a396:	4816      	ldr	r0, [pc, #88]	@ (800a3f0 <tcp_close_shutdown+0x1c0>)
 800a398:	f001 f8aa 	bl	800b4f0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f7ff feb1 	bl	800a104 <tcp_free_listen>
      break;
 800a3a2:	e00f      	b.n	800a3c4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a3a4:	6879      	ldr	r1, [r7, #4]
 800a3a6:	480e      	ldr	r0, [pc, #56]	@ (800a3e0 <tcp_close_shutdown+0x1b0>)
 800a3a8:	f001 f8a2 	bl	800b4f0 <tcp_pcb_remove>
 800a3ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e4 <tcp_close_shutdown+0x1b4>)
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7ff fe8a 	bl	800a0cc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a3b8:	e004      	b.n	800a3c4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f81a 	bl	800a3f4 <tcp_close_shutdown_fin>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	e000      	b.n	800a3c6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	08014624 	.word	0x08014624
 800a3d4:	080146f8 	.word	0x080146f8
 800a3d8:	08014668 	.word	0x08014668
 800a3dc:	08014718 	.word	0x08014718
 800a3e0:	200089a8 	.word	0x200089a8
 800a3e4:	200089b0 	.word	0x200089b0
 800a3e8:	200089e8 	.word	0x200089e8
 800a3ec:	200089a0 	.word	0x200089a0
 800a3f0:	200089a4 	.word	0x200089a4

0800a3f4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d106      	bne.n	800a410 <tcp_close_shutdown_fin+0x1c>
 800a402:	4b2e      	ldr	r3, [pc, #184]	@ (800a4bc <tcp_close_shutdown_fin+0xc8>)
 800a404:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800a408:	492d      	ldr	r1, [pc, #180]	@ (800a4c0 <tcp_close_shutdown_fin+0xcc>)
 800a40a:	482e      	ldr	r0, [pc, #184]	@ (800a4c4 <tcp_close_shutdown_fin+0xd0>)
 800a40c:	f008 fa42 	bl	8012894 <iprintf>

  switch (pcb->state) {
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	7d1b      	ldrb	r3, [r3, #20]
 800a414:	2b07      	cmp	r3, #7
 800a416:	d020      	beq.n	800a45a <tcp_close_shutdown_fin+0x66>
 800a418:	2b07      	cmp	r3, #7
 800a41a:	dc2b      	bgt.n	800a474 <tcp_close_shutdown_fin+0x80>
 800a41c:	2b03      	cmp	r3, #3
 800a41e:	d002      	beq.n	800a426 <tcp_close_shutdown_fin+0x32>
 800a420:	2b04      	cmp	r3, #4
 800a422:	d00d      	beq.n	800a440 <tcp_close_shutdown_fin+0x4c>
 800a424:	e026      	b.n	800a474 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f003 fee2 	bl	800e1f0 <tcp_send_fin>
 800a42c:	4603      	mov	r3, r0
 800a42e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d11f      	bne.n	800a478 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2205      	movs	r2, #5
 800a43c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a43e:	e01b      	b.n	800a478 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f003 fed5 	bl	800e1f0 <tcp_send_fin>
 800a446:	4603      	mov	r3, r0
 800a448:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a44a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d114      	bne.n	800a47c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2205      	movs	r2, #5
 800a456:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a458:	e010      	b.n	800a47c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f003 fec8 	bl	800e1f0 <tcp_send_fin>
 800a460:	4603      	mov	r3, r0
 800a462:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d109      	bne.n	800a480 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2209      	movs	r2, #9
 800a470:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a472:	e005      	b.n	800a480 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a474:	2300      	movs	r3, #0
 800a476:	e01c      	b.n	800a4b2 <tcp_close_shutdown_fin+0xbe>
      break;
 800a478:	bf00      	nop
 800a47a:	e002      	b.n	800a482 <tcp_close_shutdown_fin+0x8e>
      break;
 800a47c:	bf00      	nop
 800a47e:	e000      	b.n	800a482 <tcp_close_shutdown_fin+0x8e>
      break;
 800a480:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d103      	bne.n	800a492 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f003 ffee 	bl	800e46c <tcp_output>
 800a490:	e00d      	b.n	800a4ae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a49a:	d108      	bne.n	800a4ae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	8b5b      	ldrh	r3, [r3, #26]
 800a4a0:	f043 0308 	orr.w	r3, r3, #8
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	e001      	b.n	800a4b2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a4ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	08014624 	.word	0x08014624
 800a4c0:	080146d4 	.word	0x080146d4
 800a4c4:	08014668 	.word	0x08014668

0800a4c8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d109      	bne.n	800a4ea <tcp_close+0x22>
 800a4d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a514 <tcp_close+0x4c>)
 800a4d8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800a4dc:	490e      	ldr	r1, [pc, #56]	@ (800a518 <tcp_close+0x50>)
 800a4de:	480f      	ldr	r0, [pc, #60]	@ (800a51c <tcp_close+0x54>)
 800a4e0:	f008 f9d8 	bl	8012894 <iprintf>
 800a4e4:	f06f 030f 	mvn.w	r3, #15
 800a4e8:	e00f      	b.n	800a50a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	7d1b      	ldrb	r3, [r3, #20]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d006      	beq.n	800a500 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	8b5b      	ldrh	r3, [r3, #26]
 800a4f6:	f043 0310 	orr.w	r3, r3, #16
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a500:	2101      	movs	r1, #1
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7ff fe94 	bl	800a230 <tcp_close_shutdown>
 800a508:	4603      	mov	r3, r0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	08014624 	.word	0x08014624
 800a518:	08014734 	.word	0x08014734
 800a51c:	08014668 	.word	0x08014668

0800a520 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b08e      	sub	sp, #56	@ 0x38
 800a524:	af04      	add	r7, sp, #16
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d107      	bne.n	800a540 <tcp_abandon+0x20>
 800a530:	4b52      	ldr	r3, [pc, #328]	@ (800a67c <tcp_abandon+0x15c>)
 800a532:	f240 223d 	movw	r2, #573	@ 0x23d
 800a536:	4952      	ldr	r1, [pc, #328]	@ (800a680 <tcp_abandon+0x160>)
 800a538:	4852      	ldr	r0, [pc, #328]	@ (800a684 <tcp_abandon+0x164>)
 800a53a:	f008 f9ab 	bl	8012894 <iprintf>
 800a53e:	e099      	b.n	800a674 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	7d1b      	ldrb	r3, [r3, #20]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d106      	bne.n	800a556 <tcp_abandon+0x36>
 800a548:	4b4c      	ldr	r3, [pc, #304]	@ (800a67c <tcp_abandon+0x15c>)
 800a54a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800a54e:	494e      	ldr	r1, [pc, #312]	@ (800a688 <tcp_abandon+0x168>)
 800a550:	484c      	ldr	r0, [pc, #304]	@ (800a684 <tcp_abandon+0x164>)
 800a552:	f008 f99f 	bl	8012894 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	7d1b      	ldrb	r3, [r3, #20]
 800a55a:	2b0a      	cmp	r3, #10
 800a55c:	d107      	bne.n	800a56e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a55e:	6879      	ldr	r1, [r7, #4]
 800a560:	484a      	ldr	r0, [pc, #296]	@ (800a68c <tcp_abandon+0x16c>)
 800a562:	f000 ffc5 	bl	800b4f0 <tcp_pcb_remove>
    tcp_free(pcb);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7ff fdb0 	bl	800a0cc <tcp_free>
 800a56c:	e082      	b.n	800a674 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a57a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a580:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a588:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	7d1b      	ldrb	r3, [r3, #20]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d126      	bne.n	800a5e6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	8adb      	ldrh	r3, [r3, #22]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d02e      	beq.n	800a5fe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a5a0:	4b3b      	ldr	r3, [pc, #236]	@ (800a690 <tcp_abandon+0x170>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d105      	bne.n	800a5b6 <tcp_abandon+0x96>
 800a5aa:	4b39      	ldr	r3, [pc, #228]	@ (800a690 <tcp_abandon+0x170>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	4a37      	ldr	r2, [pc, #220]	@ (800a690 <tcp_abandon+0x170>)
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	e013      	b.n	800a5de <tcp_abandon+0xbe>
 800a5b6:	4b36      	ldr	r3, [pc, #216]	@ (800a690 <tcp_abandon+0x170>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	61fb      	str	r3, [r7, #28]
 800a5bc:	e00c      	b.n	800a5d8 <tcp_abandon+0xb8>
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d104      	bne.n	800a5d2 <tcp_abandon+0xb2>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	68da      	ldr	r2, [r3, #12]
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	60da      	str	r2, [r3, #12]
 800a5d0:	e005      	b.n	800a5de <tcp_abandon+0xbe>
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	61fb      	str	r3, [r7, #28]
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1ef      	bne.n	800a5be <tcp_abandon+0x9e>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	60da      	str	r2, [r3, #12]
 800a5e4:	e00b      	b.n	800a5fe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	8adb      	ldrh	r3, [r3, #22]
 800a5ee:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a5f0:	6879      	ldr	r1, [r7, #4]
 800a5f2:	4828      	ldr	r0, [pc, #160]	@ (800a694 <tcp_abandon+0x174>)
 800a5f4:	f000 ff7c 	bl	800b4f0 <tcp_pcb_remove>
 800a5f8:	4b27      	ldr	r3, [pc, #156]	@ (800a698 <tcp_abandon+0x178>)
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a602:	2b00      	cmp	r3, #0
 800a604:	d004      	beq.n	800a610 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 fd1e 	bl	800b04c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a614:	2b00      	cmp	r3, #0
 800a616:	d004      	beq.n	800a622 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 fd15 	bl	800b04c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a626:	2b00      	cmp	r3, #0
 800a628:	d004      	beq.n	800a634 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 fd0c 	bl	800b04c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00e      	beq.n	800a658 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a63a:	6879      	ldr	r1, [r7, #4]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	3304      	adds	r3, #4
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	8b12      	ldrh	r2, [r2, #24]
 800a644:	9202      	str	r2, [sp, #8]
 800a646:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a648:	9201      	str	r2, [sp, #4]
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	460b      	mov	r3, r1
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	69b9      	ldr	r1, [r7, #24]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f004 fcbe 	bl	800efd4 <tcp_rst>
    }
    last_state = pcb->state;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	7d1b      	ldrb	r3, [r3, #20]
 800a65c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7ff fd34 	bl	800a0cc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d004      	beq.n	800a674 <tcp_abandon+0x154>
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	f06f 010c 	mvn.w	r1, #12
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	4798      	blx	r3
  }
}
 800a674:	3728      	adds	r7, #40	@ 0x28
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	08014624 	.word	0x08014624
 800a680:	08014768 	.word	0x08014768
 800a684:	08014668 	.word	0x08014668
 800a688:	08014784 	.word	0x08014784
 800a68c:	200089ac 	.word	0x200089ac
 800a690:	200089a0 	.word	0x200089a0
 800a694:	200089a8 	.word	0x200089a8
 800a698:	200089b0 	.word	0x200089b0

0800a69c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a6a4:	2101      	movs	r1, #1
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7ff ff3a 	bl	800a520 <tcp_abandon>
}
 800a6ac:	bf00      	nop
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d106      	bne.n	800a6d0 <tcp_update_rcv_ann_wnd+0x1c>
 800a6c2:	4b25      	ldr	r3, [pc, #148]	@ (800a758 <tcp_update_rcv_ann_wnd+0xa4>)
 800a6c4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a6c8:	4924      	ldr	r1, [pc, #144]	@ (800a75c <tcp_update_rcv_ann_wnd+0xa8>)
 800a6ca:	4825      	ldr	r0, [pc, #148]	@ (800a760 <tcp_update_rcv_ann_wnd+0xac>)
 800a6cc:	f008 f8e2 	bl	8012894 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a6d8:	4413      	add	r3, r2
 800a6da:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800a6e4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800a6e8:	bf28      	it	cs
 800a6ea:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800a6ee:	b292      	uxth	r2, r2
 800a6f0:	4413      	add	r3, r2
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	db08      	blt.n	800a70c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	e020      	b.n	800a74e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	2b00      	cmp	r3, #0
 800a718:	dd03      	ble.n	800a722 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a720:	e014      	b.n	800a74c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a72a:	1ad3      	subs	r3, r2, r3
 800a72c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a734:	d306      	bcc.n	800a744 <tcp_update_rcv_ann_wnd+0x90>
 800a736:	4b08      	ldr	r3, [pc, #32]	@ (800a758 <tcp_update_rcv_ann_wnd+0xa4>)
 800a738:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800a73c:	4909      	ldr	r1, [pc, #36]	@ (800a764 <tcp_update_rcv_ann_wnd+0xb0>)
 800a73e:	4808      	ldr	r0, [pc, #32]	@ (800a760 <tcp_update_rcv_ann_wnd+0xac>)
 800a740:	f008 f8a8 	bl	8012894 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	b29a      	uxth	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800a74c:	2300      	movs	r3, #0
  }
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	08014624 	.word	0x08014624
 800a75c:	08014880 	.word	0x08014880
 800a760:	08014668 	.word	0x08014668
 800a764:	080148a4 	.word	0x080148a4

0800a768 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	460b      	mov	r3, r1
 800a772:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d107      	bne.n	800a78a <tcp_recved+0x22>
 800a77a:	4b1f      	ldr	r3, [pc, #124]	@ (800a7f8 <tcp_recved+0x90>)
 800a77c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800a780:	491e      	ldr	r1, [pc, #120]	@ (800a7fc <tcp_recved+0x94>)
 800a782:	481f      	ldr	r0, [pc, #124]	@ (800a800 <tcp_recved+0x98>)
 800a784:	f008 f886 	bl	8012894 <iprintf>
 800a788:	e032      	b.n	800a7f0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	7d1b      	ldrb	r3, [r3, #20]
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d106      	bne.n	800a7a0 <tcp_recved+0x38>
 800a792:	4b19      	ldr	r3, [pc, #100]	@ (800a7f8 <tcp_recved+0x90>)
 800a794:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800a798:	491a      	ldr	r1, [pc, #104]	@ (800a804 <tcp_recved+0x9c>)
 800a79a:	4819      	ldr	r0, [pc, #100]	@ (800a800 <tcp_recved+0x98>)
 800a79c:	f008 f87a 	bl	8012894 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a7a4:	887b      	ldrh	r3, [r7, #2]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a7aa:	89fb      	ldrh	r3, [r7, #14]
 800a7ac:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a7b0:	d804      	bhi.n	800a7bc <tcp_recved+0x54>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7b6:	89fa      	ldrh	r2, [r7, #14]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d204      	bcs.n	800a7c6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800a7c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a7c4:	e002      	b.n	800a7cc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	89fa      	ldrh	r2, [r7, #14]
 800a7ca:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff ff71 	bl	800a6b4 <tcp_update_rcv_ann_wnd>
 800a7d2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800a7da:	d309      	bcc.n	800a7f0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	8b5b      	ldrh	r3, [r3, #26]
 800a7e0:	f043 0302 	orr.w	r3, r3, #2
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f003 fe3e 	bl	800e46c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	08014624 	.word	0x08014624
 800a7fc:	080148c0 	.word	0x080148c0
 800a800:	08014668 	.word	0x08014668
 800a804:	080148d8 	.word	0x080148d8

0800a808 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a808:	b5b0      	push	{r4, r5, r7, lr}
 800a80a:	b090      	sub	sp, #64	@ 0x40
 800a80c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800a814:	4b95      	ldr	r3, [pc, #596]	@ (800aa6c <tcp_slowtmr+0x264>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	3301      	adds	r3, #1
 800a81a:	4a94      	ldr	r2, [pc, #592]	@ (800aa6c <tcp_slowtmr+0x264>)
 800a81c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a81e:	4b94      	ldr	r3, [pc, #592]	@ (800aa70 <tcp_slowtmr+0x268>)
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	3301      	adds	r3, #1
 800a824:	b2da      	uxtb	r2, r3
 800a826:	4b92      	ldr	r3, [pc, #584]	@ (800aa70 <tcp_slowtmr+0x268>)
 800a828:	701a      	strb	r2, [r3, #0]
 800a82a:	e000      	b.n	800a82e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800a82c:	bf00      	nop
  prev = NULL;
 800a82e:	2300      	movs	r3, #0
 800a830:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800a832:	4b90      	ldr	r3, [pc, #576]	@ (800aa74 <tcp_slowtmr+0x26c>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800a838:	e29f      	b.n	800ad7a <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a83c:	7d1b      	ldrb	r3, [r3, #20]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d106      	bne.n	800a850 <tcp_slowtmr+0x48>
 800a842:	4b8d      	ldr	r3, [pc, #564]	@ (800aa78 <tcp_slowtmr+0x270>)
 800a844:	f240 42be 	movw	r2, #1214	@ 0x4be
 800a848:	498c      	ldr	r1, [pc, #560]	@ (800aa7c <tcp_slowtmr+0x274>)
 800a84a:	488d      	ldr	r0, [pc, #564]	@ (800aa80 <tcp_slowtmr+0x278>)
 800a84c:	f008 f822 	bl	8012894 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a852:	7d1b      	ldrb	r3, [r3, #20]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d106      	bne.n	800a866 <tcp_slowtmr+0x5e>
 800a858:	4b87      	ldr	r3, [pc, #540]	@ (800aa78 <tcp_slowtmr+0x270>)
 800a85a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800a85e:	4989      	ldr	r1, [pc, #548]	@ (800aa84 <tcp_slowtmr+0x27c>)
 800a860:	4887      	ldr	r0, [pc, #540]	@ (800aa80 <tcp_slowtmr+0x278>)
 800a862:	f008 f817 	bl	8012894 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a868:	7d1b      	ldrb	r3, [r3, #20]
 800a86a:	2b0a      	cmp	r3, #10
 800a86c:	d106      	bne.n	800a87c <tcp_slowtmr+0x74>
 800a86e:	4b82      	ldr	r3, [pc, #520]	@ (800aa78 <tcp_slowtmr+0x270>)
 800a870:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800a874:	4984      	ldr	r1, [pc, #528]	@ (800aa88 <tcp_slowtmr+0x280>)
 800a876:	4882      	ldr	r0, [pc, #520]	@ (800aa80 <tcp_slowtmr+0x278>)
 800a878:	f008 f80c 	bl	8012894 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a87e:	7f9a      	ldrb	r2, [r3, #30]
 800a880:	4b7b      	ldr	r3, [pc, #492]	@ (800aa70 <tcp_slowtmr+0x268>)
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	429a      	cmp	r2, r3
 800a886:	d105      	bne.n	800a894 <tcp_slowtmr+0x8c>
      prev = pcb;
 800a888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a88a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800a88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800a892:	e272      	b.n	800ad7a <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800a894:	4b76      	ldr	r3, [pc, #472]	@ (800aa70 <tcp_slowtmr+0x268>)
 800a896:	781a      	ldrb	r2, [r3, #0]
 800a898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a89a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800a89c:	2300      	movs	r3, #0
 800a89e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8aa:	7d1b      	ldrb	r3, [r3, #20]
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d10a      	bne.n	800a8c6 <tcp_slowtmr+0xbe>
 800a8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a8b6:	2b05      	cmp	r3, #5
 800a8b8:	d905      	bls.n	800a8c6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800a8ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8be:	3301      	adds	r3, #1
 800a8c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a8c4:	e11e      	b.n	800ab04 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a8cc:	2b0b      	cmp	r3, #11
 800a8ce:	d905      	bls.n	800a8dc <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800a8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a8da:	e113      	b.n	800ab04 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800a8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8de:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d075      	beq.n	800a9d2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d006      	beq.n	800a8fc <tcp_slowtmr+0xf4>
 800a8ee:	4b62      	ldr	r3, [pc, #392]	@ (800aa78 <tcp_slowtmr+0x270>)
 800a8f0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800a8f4:	4965      	ldr	r1, [pc, #404]	@ (800aa8c <tcp_slowtmr+0x284>)
 800a8f6:	4862      	ldr	r0, [pc, #392]	@ (800aa80 <tcp_slowtmr+0x278>)
 800a8f8:	f007 ffcc 	bl	8012894 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a900:	2b00      	cmp	r3, #0
 800a902:	d106      	bne.n	800a912 <tcp_slowtmr+0x10a>
 800a904:	4b5c      	ldr	r3, [pc, #368]	@ (800aa78 <tcp_slowtmr+0x270>)
 800a906:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800a90a:	4961      	ldr	r1, [pc, #388]	@ (800aa90 <tcp_slowtmr+0x288>)
 800a90c:	485c      	ldr	r0, [pc, #368]	@ (800aa80 <tcp_slowtmr+0x278>)
 800a90e:	f007 ffc1 	bl	8012894 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a914:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800a918:	2b0b      	cmp	r3, #11
 800a91a:	d905      	bls.n	800a928 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800a91c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a920:	3301      	adds	r3, #1
 800a922:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a926:	e0ed      	b.n	800ab04 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a92a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a92e:	3b01      	subs	r3, #1
 800a930:	4a58      	ldr	r2, [pc, #352]	@ (800aa94 <tcp_slowtmr+0x28c>)
 800a932:	5cd3      	ldrb	r3, [r2, r3]
 800a934:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a938:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a93c:	7c7a      	ldrb	r2, [r7, #17]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d907      	bls.n	800a952 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800a942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a944:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a948:	3301      	adds	r3, #1
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a94e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800a952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a954:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a958:	7c7a      	ldrb	r2, [r7, #17]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	f200 80d2 	bhi.w	800ab04 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800a960:	2301      	movs	r3, #1
 800a962:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800a964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d108      	bne.n	800a980 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a96e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a970:	f004 fc24 	bl	800f1bc <tcp_zero_window_probe>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d014      	beq.n	800a9a4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800a97a:	2300      	movs	r3, #0
 800a97c:	623b      	str	r3, [r7, #32]
 800a97e:	e011      	b.n	800a9a4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a982:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a986:	4619      	mov	r1, r3
 800a988:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a98a:	f003 fae9 	bl	800df60 <tcp_split_unsent_seg>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d107      	bne.n	800a9a4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800a994:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a996:	f003 fd69 	bl	800e46c <tcp_output>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d101      	bne.n	800a9a4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800a9a4:	6a3b      	ldr	r3, [r7, #32]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 80ac 	beq.w	800ab04 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800a9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a9ba:	2b06      	cmp	r3, #6
 800a9bc:	f200 80a2 	bhi.w	800ab04 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800a9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9cc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800a9d0:	e098      	b.n	800ab04 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	db0f      	blt.n	800a9fc <tcp_slowtmr+0x1f4>
 800a9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a9e2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d008      	beq.n	800a9fc <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800a9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	b21a      	sxth	r2, r3
 800a9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9fa:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800a9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9fe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800aa02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa04:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	db7b      	blt.n	800ab04 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800aa0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa0e:	f004 f821 	bl	800ea54 <tcp_rexmit_rto_prepare>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d007      	beq.n	800aa28 <tcp_slowtmr+0x220>
 800aa18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d171      	bne.n	800ab04 <tcp_slowtmr+0x2fc>
 800aa20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d06d      	beq.n	800ab04 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800aa28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2a:	7d1b      	ldrb	r3, [r3, #20]
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d03a      	beq.n	800aaa6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800aa30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aa36:	2b0c      	cmp	r3, #12
 800aa38:	bf28      	it	cs
 800aa3a:	230c      	movcs	r3, #12
 800aa3c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800aa3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800aa44:	10db      	asrs	r3, r3, #3
 800aa46:	b21b      	sxth	r3, r3
 800aa48:	461a      	mov	r2, r3
 800aa4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800aa50:	4413      	add	r3, r2
 800aa52:	7efa      	ldrb	r2, [r7, #27]
 800aa54:	4910      	ldr	r1, [pc, #64]	@ (800aa98 <tcp_slowtmr+0x290>)
 800aa56:	5c8a      	ldrb	r2, [r1, r2]
 800aa58:	4093      	lsls	r3, r2
 800aa5a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800aa62:	4293      	cmp	r3, r2
 800aa64:	dc1a      	bgt.n	800aa9c <tcp_slowtmr+0x294>
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	b21a      	sxth	r2, r3
 800aa6a:	e019      	b.n	800aaa0 <tcp_slowtmr+0x298>
 800aa6c:	2000899c 	.word	0x2000899c
 800aa70:	200089b2 	.word	0x200089b2
 800aa74:	200089a8 	.word	0x200089a8
 800aa78:	08014624 	.word	0x08014624
 800aa7c:	08014968 	.word	0x08014968
 800aa80:	08014668 	.word	0x08014668
 800aa84:	08014994 	.word	0x08014994
 800aa88:	080149c0 	.word	0x080149c0
 800aa8c:	080149f0 	.word	0x080149f0
 800aa90:	08014a24 	.word	0x08014a24
 800aa94:	080165fc 	.word	0x080165fc
 800aa98:	080165ec 	.word	0x080165ec
 800aa9c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800aaa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800aaa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800aaac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800aab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800aab8:	4293      	cmp	r3, r2
 800aaba:	bf28      	it	cs
 800aabc:	4613      	movcs	r3, r2
 800aabe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800aac0:	8a7b      	ldrh	r3, [r7, #18]
 800aac2:	085b      	lsrs	r3, r3, #1
 800aac4:	b29a      	uxth	r2, r3
 800aac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800aacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aace:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800aad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aad4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	b29b      	uxth	r3, r3
 800aada:	429a      	cmp	r2, r3
 800aadc:	d206      	bcs.n	800aaec <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800aade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aae2:	005b      	lsls	r3, r3, #1
 800aae4:	b29a      	uxth	r2, r3
 800aae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800aaec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaee:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800aaf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800aaf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800aafe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab00:	f004 f818 	bl	800eb34 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800ab04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab06:	7d1b      	ldrb	r3, [r3, #20]
 800ab08:	2b06      	cmp	r3, #6
 800ab0a:	d111      	bne.n	800ab30 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800ab0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab0e:	8b5b      	ldrh	r3, [r3, #26]
 800ab10:	f003 0310 	and.w	r3, r3, #16
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00b      	beq.n	800ab30 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab18:	4b9d      	ldr	r3, [pc, #628]	@ (800ad90 <tcp_slowtmr+0x588>)
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab1e:	6a1b      	ldr	r3, [r3, #32]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	2b28      	cmp	r3, #40	@ 0x28
 800ab24:	d904      	bls.n	800ab30 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800ab26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ab30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab32:	7a5b      	ldrb	r3, [r3, #9]
 800ab34:	f003 0308 	and.w	r3, r3, #8
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d04c      	beq.n	800abd6 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800ab3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab3e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ab40:	2b04      	cmp	r3, #4
 800ab42:	d003      	beq.n	800ab4c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800ab44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab46:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ab48:	2b07      	cmp	r3, #7
 800ab4a:	d144      	bne.n	800abd6 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab4c:	4b90      	ldr	r3, [pc, #576]	@ (800ad90 <tcp_slowtmr+0x588>)
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab52:	6a1b      	ldr	r3, [r3, #32]
 800ab54:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ab56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab5c:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800ab60:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800ab64:	498b      	ldr	r1, [pc, #556]	@ (800ad94 <tcp_slowtmr+0x58c>)
 800ab66:	fba1 1303 	umull	r1, r3, r1, r3
 800ab6a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d90a      	bls.n	800ab86 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800ab70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab74:	3301      	adds	r3, #1
 800ab76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800ab7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab7e:	3301      	adds	r3, #1
 800ab80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ab84:	e027      	b.n	800abd6 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab86:	4b82      	ldr	r3, [pc, #520]	@ (800ad90 <tcp_slowtmr+0x588>)
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ab90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab92:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800ab96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab98:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	4b7e      	ldr	r3, [pc, #504]	@ (800ad98 <tcp_slowtmr+0x590>)
 800aba0:	fb00 f303 	mul.w	r3, r0, r3
 800aba4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800aba6:	497b      	ldr	r1, [pc, #492]	@ (800ad94 <tcp_slowtmr+0x58c>)
 800aba8:	fba1 1303 	umull	r1, r3, r1, r3
 800abac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800abae:	429a      	cmp	r2, r3
 800abb0:	d911      	bls.n	800abd6 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800abb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800abb4:	f004 fac2 	bl	800f13c <tcp_keepalive>
 800abb8:	4603      	mov	r3, r0
 800abba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800abbe:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d107      	bne.n	800abd6 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800abc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800abcc:	3301      	adds	r3, #1
 800abce:	b2da      	uxtb	r2, r3
 800abd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abd2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800abd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d011      	beq.n	800ac02 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800abde:	4b6c      	ldr	r3, [pc, #432]	@ (800ad90 <tcp_slowtmr+0x588>)
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	1ad2      	subs	r2, r2, r3
 800abe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800abee:	4619      	mov	r1, r3
 800abf0:	460b      	mov	r3, r1
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	440b      	add	r3, r1
 800abf6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d302      	bcc.n	800ac02 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800abfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800abfe:	f000 fddb 	bl	800b7b8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800ac02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac04:	7d1b      	ldrb	r3, [r3, #20]
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	d10b      	bne.n	800ac22 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac0a:	4b61      	ldr	r3, [pc, #388]	@ (800ad90 <tcp_slowtmr+0x588>)
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	2b28      	cmp	r3, #40	@ 0x28
 800ac16:	d904      	bls.n	800ac22 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800ac18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800ac22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac24:	7d1b      	ldrb	r3, [r3, #20]
 800ac26:	2b09      	cmp	r3, #9
 800ac28:	d10b      	bne.n	800ac42 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ac2a:	4b59      	ldr	r3, [pc, #356]	@ (800ad90 <tcp_slowtmr+0x588>)
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac30:	6a1b      	ldr	r3, [r3, #32]
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	2bf0      	cmp	r3, #240	@ 0xf0
 800ac36:	d904      	bls.n	800ac42 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800ac38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800ac42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d060      	beq.n	800ad0c <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800ac4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac50:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800ac52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ac54:	f000 fbfc 	bl	800b450 <tcp_pcb_purge>
      if (prev != NULL) {
 800ac58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d010      	beq.n	800ac80 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ac5e:	4b4f      	ldr	r3, [pc, #316]	@ (800ad9c <tcp_slowtmr+0x594>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d106      	bne.n	800ac76 <tcp_slowtmr+0x46e>
 800ac68:	4b4d      	ldr	r3, [pc, #308]	@ (800ada0 <tcp_slowtmr+0x598>)
 800ac6a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800ac6e:	494d      	ldr	r1, [pc, #308]	@ (800ada4 <tcp_slowtmr+0x59c>)
 800ac70:	484d      	ldr	r0, [pc, #308]	@ (800ada8 <tcp_slowtmr+0x5a0>)
 800ac72:	f007 fe0f 	bl	8012894 <iprintf>
        prev->next = pcb->next;
 800ac76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac78:	68da      	ldr	r2, [r3, #12]
 800ac7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7c:	60da      	str	r2, [r3, #12]
 800ac7e:	e00f      	b.n	800aca0 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ac80:	4b46      	ldr	r3, [pc, #280]	@ (800ad9c <tcp_slowtmr+0x594>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d006      	beq.n	800ac98 <tcp_slowtmr+0x490>
 800ac8a:	4b45      	ldr	r3, [pc, #276]	@ (800ada0 <tcp_slowtmr+0x598>)
 800ac8c:	f240 5271 	movw	r2, #1393	@ 0x571
 800ac90:	4946      	ldr	r1, [pc, #280]	@ (800adac <tcp_slowtmr+0x5a4>)
 800ac92:	4845      	ldr	r0, [pc, #276]	@ (800ada8 <tcp_slowtmr+0x5a0>)
 800ac94:	f007 fdfe 	bl	8012894 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ac98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	4a3f      	ldr	r2, [pc, #252]	@ (800ad9c <tcp_slowtmr+0x594>)
 800ac9e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800aca0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d013      	beq.n	800acd0 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acaa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800acac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acae:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800acb0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800acb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acb4:	3304      	adds	r3, #4
 800acb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acb8:	8ad2      	ldrh	r2, [r2, #22]
 800acba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acbc:	8b09      	ldrh	r1, [r1, #24]
 800acbe:	9102      	str	r1, [sp, #8]
 800acc0:	9201      	str	r2, [sp, #4]
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	462b      	mov	r3, r5
 800acc6:	4622      	mov	r2, r4
 800acc8:	4601      	mov	r1, r0
 800acca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800accc:	f004 f982 	bl	800efd4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800acd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800acd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd8:	7d1b      	ldrb	r3, [r3, #20]
 800acda:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800acdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acde:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ace0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ace6:	6838      	ldr	r0, [r7, #0]
 800ace8:	f7ff f9f0 	bl	800a0cc <tcp_free>
      tcp_active_pcbs_changed = 0;
 800acec:	4b30      	ldr	r3, [pc, #192]	@ (800adb0 <tcp_slowtmr+0x5a8>)
 800acee:	2200      	movs	r2, #0
 800acf0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d004      	beq.n	800ad02 <tcp_slowtmr+0x4fa>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f06f 010c 	mvn.w	r1, #12
 800acfe:	68b8      	ldr	r0, [r7, #8]
 800ad00:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ad02:	4b2b      	ldr	r3, [pc, #172]	@ (800adb0 <tcp_slowtmr+0x5a8>)
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d037      	beq.n	800ad7a <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800ad0a:	e590      	b.n	800a82e <tcp_slowtmr+0x26>
      prev = pcb;
 800ad0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ad10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800ad16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad18:	7f1b      	ldrb	r3, [r3, #28]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad20:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ad22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad24:	7f1a      	ldrb	r2, [r3, #28]
 800ad26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad28:	7f5b      	ldrb	r3, [r3, #29]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d325      	bcc.n	800ad7a <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800ad2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad30:	2200      	movs	r2, #0
 800ad32:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800ad34:	4b1e      	ldr	r3, [pc, #120]	@ (800adb0 <tcp_slowtmr+0x5a8>)
 800ad36:	2200      	movs	r2, #0
 800ad38:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ad3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00b      	beq.n	800ad5c <tcp_slowtmr+0x554>
 800ad44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad4c:	6912      	ldr	r2, [r2, #16]
 800ad4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad50:	4610      	mov	r0, r2
 800ad52:	4798      	blx	r3
 800ad54:	4603      	mov	r3, r0
 800ad56:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800ad5a:	e002      	b.n	800ad62 <tcp_slowtmr+0x55a>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800ad62:	4b13      	ldr	r3, [pc, #76]	@ (800adb0 <tcp_slowtmr+0x5a8>)
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f47f ad60 	bne.w	800a82c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ad6c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d102      	bne.n	800ad7a <tcp_slowtmr+0x572>
          tcp_output(prev);
 800ad74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad76:	f003 fb79 	bl	800e46c <tcp_output>
  while (pcb != NULL) {
 800ad7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f47f ad5c 	bne.w	800a83a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ad82:	2300      	movs	r3, #0
 800ad84:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800ad86:	4b0b      	ldr	r3, [pc, #44]	@ (800adb4 <tcp_slowtmr+0x5ac>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ad8c:	e067      	b.n	800ae5e <tcp_slowtmr+0x656>
 800ad8e:	bf00      	nop
 800ad90:	2000899c 	.word	0x2000899c
 800ad94:	10624dd3 	.word	0x10624dd3
 800ad98:	000124f8 	.word	0x000124f8
 800ad9c:	200089a8 	.word	0x200089a8
 800ada0:	08014624 	.word	0x08014624
 800ada4:	08014a5c 	.word	0x08014a5c
 800ada8:	08014668 	.word	0x08014668
 800adac:	08014a88 	.word	0x08014a88
 800adb0:	200089b0 	.word	0x200089b0
 800adb4:	200089ac 	.word	0x200089ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800adb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adba:	7d1b      	ldrb	r3, [r3, #20]
 800adbc:	2b0a      	cmp	r3, #10
 800adbe:	d006      	beq.n	800adce <tcp_slowtmr+0x5c6>
 800adc0:	4b2b      	ldr	r3, [pc, #172]	@ (800ae70 <tcp_slowtmr+0x668>)
 800adc2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800adc6:	492b      	ldr	r1, [pc, #172]	@ (800ae74 <tcp_slowtmr+0x66c>)
 800adc8:	482b      	ldr	r0, [pc, #172]	@ (800ae78 <tcp_slowtmr+0x670>)
 800adca:	f007 fd63 	bl	8012894 <iprintf>
    pcb_remove = 0;
 800adce:	2300      	movs	r3, #0
 800add0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800add4:	4b29      	ldr	r3, [pc, #164]	@ (800ae7c <tcp_slowtmr+0x674>)
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adda:	6a1b      	ldr	r3, [r3, #32]
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	2bf0      	cmp	r3, #240	@ 0xf0
 800ade0:	d904      	bls.n	800adec <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800ade2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ade6:	3301      	adds	r3, #1
 800ade8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800adec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d02f      	beq.n	800ae54 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800adf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800adf6:	f000 fb2b 	bl	800b450 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800adfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d010      	beq.n	800ae22 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ae00:	4b1f      	ldr	r3, [pc, #124]	@ (800ae80 <tcp_slowtmr+0x678>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d106      	bne.n	800ae18 <tcp_slowtmr+0x610>
 800ae0a:	4b19      	ldr	r3, [pc, #100]	@ (800ae70 <tcp_slowtmr+0x668>)
 800ae0c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800ae10:	491c      	ldr	r1, [pc, #112]	@ (800ae84 <tcp_slowtmr+0x67c>)
 800ae12:	4819      	ldr	r0, [pc, #100]	@ (800ae78 <tcp_slowtmr+0x670>)
 800ae14:	f007 fd3e 	bl	8012894 <iprintf>
        prev->next = pcb->next;
 800ae18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1a:	68da      	ldr	r2, [r3, #12]
 800ae1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae1e:	60da      	str	r2, [r3, #12]
 800ae20:	e00f      	b.n	800ae42 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ae22:	4b17      	ldr	r3, [pc, #92]	@ (800ae80 <tcp_slowtmr+0x678>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d006      	beq.n	800ae3a <tcp_slowtmr+0x632>
 800ae2c:	4b10      	ldr	r3, [pc, #64]	@ (800ae70 <tcp_slowtmr+0x668>)
 800ae2e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800ae32:	4915      	ldr	r1, [pc, #84]	@ (800ae88 <tcp_slowtmr+0x680>)
 800ae34:	4810      	ldr	r0, [pc, #64]	@ (800ae78 <tcp_slowtmr+0x670>)
 800ae36:	f007 fd2d 	bl	8012894 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ae3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	4a10      	ldr	r2, [pc, #64]	@ (800ae80 <tcp_slowtmr+0x678>)
 800ae40:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ae42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae44:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ae46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ae4c:	69f8      	ldr	r0, [r7, #28]
 800ae4e:	f7ff f93d 	bl	800a0cc <tcp_free>
 800ae52:	e004      	b.n	800ae5e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800ae54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae56:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ae58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ae5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1a9      	bne.n	800adb8 <tcp_slowtmr+0x5b0>
    }
  }
}
 800ae64:	bf00      	nop
 800ae66:	bf00      	nop
 800ae68:	3730      	adds	r7, #48	@ 0x30
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bdb0      	pop	{r4, r5, r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	08014624 	.word	0x08014624
 800ae74:	08014ab4 	.word	0x08014ab4
 800ae78:	08014668 	.word	0x08014668
 800ae7c:	2000899c 	.word	0x2000899c
 800ae80:	200089ac 	.word	0x200089ac
 800ae84:	08014ae4 	.word	0x08014ae4
 800ae88:	08014b0c 	.word	0x08014b0c

0800ae8c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ae92:	4b2d      	ldr	r3, [pc, #180]	@ (800af48 <tcp_fasttmr+0xbc>)
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	3301      	adds	r3, #1
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	4b2b      	ldr	r3, [pc, #172]	@ (800af48 <tcp_fasttmr+0xbc>)
 800ae9c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ae9e:	4b2b      	ldr	r3, [pc, #172]	@ (800af4c <tcp_fasttmr+0xc0>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800aea4:	e048      	b.n	800af38 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	7f9a      	ldrb	r2, [r3, #30]
 800aeaa:	4b27      	ldr	r3, [pc, #156]	@ (800af48 <tcp_fasttmr+0xbc>)
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d03f      	beq.n	800af32 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800aeb2:	4b25      	ldr	r3, [pc, #148]	@ (800af48 <tcp_fasttmr+0xbc>)
 800aeb4:	781a      	ldrb	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	8b5b      	ldrh	r3, [r3, #26]
 800aebe:	f003 0301 	and.w	r3, r3, #1
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d010      	beq.n	800aee8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	8b5b      	ldrh	r3, [r3, #26]
 800aeca:	f043 0302 	orr.w	r3, r3, #2
 800aece:	b29a      	uxth	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f003 fac9 	bl	800e46c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	8b5b      	ldrh	r3, [r3, #26]
 800aede:	f023 0303 	bic.w	r3, r3, #3
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	8b5b      	ldrh	r3, [r3, #26]
 800aeec:	f003 0308 	and.w	r3, r3, #8
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d009      	beq.n	800af08 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	8b5b      	ldrh	r3, [r3, #26]
 800aef8:	f023 0308 	bic.w	r3, r3, #8
 800aefc:	b29a      	uxth	r2, r3
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7ff fa76 	bl	800a3f4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00a      	beq.n	800af2c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800af16:	4b0e      	ldr	r3, [pc, #56]	@ (800af50 <tcp_fasttmr+0xc4>)
 800af18:	2200      	movs	r2, #0
 800af1a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 f819 	bl	800af54 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800af22:	4b0b      	ldr	r3, [pc, #44]	@ (800af50 <tcp_fasttmr+0xc4>)
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d000      	beq.n	800af2c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800af2a:	e7b8      	b.n	800ae9e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	607b      	str	r3, [r7, #4]
 800af30:	e002      	b.n	800af38 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1b3      	bne.n	800aea6 <tcp_fasttmr+0x1a>
    }
  }
}
 800af3e:	bf00      	nop
 800af40:	bf00      	nop
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	200089b2 	.word	0x200089b2
 800af4c:	200089a8 	.word	0x200089a8
 800af50:	200089b0 	.word	0x200089b0

0800af54 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800af54:	b590      	push	{r4, r7, lr}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d109      	bne.n	800af76 <tcp_process_refused_data+0x22>
 800af62:	4b37      	ldr	r3, [pc, #220]	@ (800b040 <tcp_process_refused_data+0xec>)
 800af64:	f240 6209 	movw	r2, #1545	@ 0x609
 800af68:	4936      	ldr	r1, [pc, #216]	@ (800b044 <tcp_process_refused_data+0xf0>)
 800af6a:	4837      	ldr	r0, [pc, #220]	@ (800b048 <tcp_process_refused_data+0xf4>)
 800af6c:	f007 fc92 	bl	8012894 <iprintf>
 800af70:	f06f 030f 	mvn.w	r3, #15
 800af74:	e060      	b.n	800b038 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af7a:	7b5b      	ldrb	r3, [r3, #13]
 800af7c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af82:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00b      	beq.n	800afac <tcp_process_refused_data+0x58>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6918      	ldr	r0, [r3, #16]
 800af9e:	2300      	movs	r3, #0
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	6879      	ldr	r1, [r7, #4]
 800afa4:	47a0      	blx	r4
 800afa6:	4603      	mov	r3, r0
 800afa8:	73fb      	strb	r3, [r7, #15]
 800afaa:	e007      	b.n	800afbc <tcp_process_refused_data+0x68>
 800afac:	2300      	movs	r3, #0
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	6879      	ldr	r1, [r7, #4]
 800afb2:	2000      	movs	r0, #0
 800afb4:	f000 f8a4 	bl	800b100 <tcp_recv_null>
 800afb8:	4603      	mov	r3, r0
 800afba:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800afbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d12a      	bne.n	800b01a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800afc4:	7bbb      	ldrb	r3, [r7, #14]
 800afc6:	f003 0320 	and.w	r3, r3, #32
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d033      	beq.n	800b036 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afd2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800afd6:	d005      	beq.n	800afe4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afdc:	3301      	adds	r3, #1
 800afde:	b29a      	uxth	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00b      	beq.n	800b006 <tcp_process_refused_data+0xb2>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6918      	ldr	r0, [r3, #16]
 800aff8:	2300      	movs	r3, #0
 800affa:	2200      	movs	r2, #0
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	47a0      	blx	r4
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]
 800b004:	e001      	b.n	800b00a <tcp_process_refused_data+0xb6>
 800b006:	2300      	movs	r3, #0
 800b008:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b00a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b00e:	f113 0f0d 	cmn.w	r3, #13
 800b012:	d110      	bne.n	800b036 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b014:	f06f 030c 	mvn.w	r3, #12
 800b018:	e00e      	b.n	800b038 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b01a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b01e:	f113 0f0d 	cmn.w	r3, #13
 800b022:	d102      	bne.n	800b02a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b024:	f06f 030c 	mvn.w	r3, #12
 800b028:	e006      	b.n	800b038 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	68ba      	ldr	r2, [r7, #8]
 800b02e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800b030:	f06f 0304 	mvn.w	r3, #4
 800b034:	e000      	b.n	800b038 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3714      	adds	r7, #20
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd90      	pop	{r4, r7, pc}
 800b040:	08014624 	.word	0x08014624
 800b044:	08014b34 	.word	0x08014b34
 800b048:	08014668 	.word	0x08014668

0800b04c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b054:	e007      	b.n	800b066 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f80a 	bl	800b076 <tcp_seg_free>
    seg = next;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d1f4      	bne.n	800b056 <tcp_segs_free+0xa>
  }
}
 800b06c:	bf00      	nop
 800b06e:	bf00      	nop
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b082      	sub	sp, #8
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00c      	beq.n	800b09e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d004      	beq.n	800b096 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	4618      	mov	r0, r3
 800b092:	f7fe fcd9 	bl	8009a48 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b096:	6879      	ldr	r1, [r7, #4]
 800b098:	2003      	movs	r0, #3
 800b09a:	f7fd fe5f 	bl	8008d5c <memp_free>
  }
}
 800b09e:	bf00      	nop
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
	...

0800b0a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d106      	bne.n	800b0c4 <tcp_seg_copy+0x1c>
 800b0b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b0f4 <tcp_seg_copy+0x4c>)
 800b0b8:	f240 6282 	movw	r2, #1666	@ 0x682
 800b0bc:	490e      	ldr	r1, [pc, #56]	@ (800b0f8 <tcp_seg_copy+0x50>)
 800b0be:	480f      	ldr	r0, [pc, #60]	@ (800b0fc <tcp_seg_copy+0x54>)
 800b0c0:	f007 fbe8 	bl	8012894 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b0c4:	2003      	movs	r0, #3
 800b0c6:	f7fd fdd9 	bl	8008c7c <memp_malloc>
 800b0ca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <tcp_seg_copy+0x2e>
    return NULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	e00a      	b.n	800b0ec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b0d6:	2210      	movs	r2, #16
 800b0d8:	6879      	ldr	r1, [r7, #4]
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	f007 fd09 	bl	8012af2 <memcpy>
  pbuf_ref(cseg->p);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7fe fd4f 	bl	8009b88 <pbuf_ref>
  return cseg;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	08014624 	.word	0x08014624
 800b0f8:	08014b78 	.word	0x08014b78
 800b0fc:	08014668 	.word	0x08014668

0800b100 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
 800b10c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d109      	bne.n	800b128 <tcp_recv_null+0x28>
 800b114:	4b12      	ldr	r3, [pc, #72]	@ (800b160 <tcp_recv_null+0x60>)
 800b116:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800b11a:	4912      	ldr	r1, [pc, #72]	@ (800b164 <tcp_recv_null+0x64>)
 800b11c:	4812      	ldr	r0, [pc, #72]	@ (800b168 <tcp_recv_null+0x68>)
 800b11e:	f007 fbb9 	bl	8012894 <iprintf>
 800b122:	f06f 030f 	mvn.w	r3, #15
 800b126:	e016      	b.n	800b156 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d009      	beq.n	800b142 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	891b      	ldrh	r3, [r3, #8]
 800b132:	4619      	mov	r1, r3
 800b134:	68b8      	ldr	r0, [r7, #8]
 800b136:	f7ff fb17 	bl	800a768 <tcp_recved>
    pbuf_free(p);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7fe fc84 	bl	8009a48 <pbuf_free>
 800b140:	e008      	b.n	800b154 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d104      	bne.n	800b154 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b14a:	68b8      	ldr	r0, [r7, #8]
 800b14c:	f7ff f9bc 	bl	800a4c8 <tcp_close>
 800b150:	4603      	mov	r3, r0
 800b152:	e000      	b.n	800b156 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	08014624 	.word	0x08014624
 800b164:	08014b94 	.word	0x08014b94
 800b168:	08014668 	.word	0x08014668

0800b16c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	4603      	mov	r3, r0
 800b174:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	db01      	blt.n	800b182 <tcp_kill_prio+0x16>
 800b17e:	79fb      	ldrb	r3, [r7, #7]
 800b180:	e000      	b.n	800b184 <tcp_kill_prio+0x18>
 800b182:	237f      	movs	r3, #127	@ 0x7f
 800b184:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b186:	7afb      	ldrb	r3, [r7, #11]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d034      	beq.n	800b1f6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b18c:	7afb      	ldrb	r3, [r7, #11]
 800b18e:	3b01      	subs	r3, #1
 800b190:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b196:	2300      	movs	r3, #0
 800b198:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b19a:	4b19      	ldr	r3, [pc, #100]	@ (800b200 <tcp_kill_prio+0x94>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	617b      	str	r3, [r7, #20]
 800b1a0:	e01f      	b.n	800b1e2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	7d5b      	ldrb	r3, [r3, #21]
 800b1a6:	7afa      	ldrb	r2, [r7, #11]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d80c      	bhi.n	800b1c6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b1b0:	7afa      	ldrb	r2, [r7, #11]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d112      	bne.n	800b1dc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b1b6:	4b13      	ldr	r3, [pc, #76]	@ (800b204 <tcp_kill_prio+0x98>)
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	6a1b      	ldr	r3, [r3, #32]
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d80a      	bhi.n	800b1dc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b1c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b204 <tcp_kill_prio+0x98>)
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	6a1b      	ldr	r3, [r3, #32]
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	7d5b      	ldrb	r3, [r3, #21]
 800b1da:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	617b      	str	r3, [r7, #20]
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1dc      	bne.n	800b1a2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d004      	beq.n	800b1f8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b1ee:	6938      	ldr	r0, [r7, #16]
 800b1f0:	f7ff fa54 	bl	800a69c <tcp_abort>
 800b1f4:	e000      	b.n	800b1f8 <tcp_kill_prio+0x8c>
    return;
 800b1f6:	bf00      	nop
  }
}
 800b1f8:	3718      	adds	r7, #24
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	200089a8 	.word	0x200089a8
 800b204:	2000899c 	.word	0x2000899c

0800b208 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	4603      	mov	r3, r0
 800b210:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b212:	79fb      	ldrb	r3, [r7, #7]
 800b214:	2b08      	cmp	r3, #8
 800b216:	d009      	beq.n	800b22c <tcp_kill_state+0x24>
 800b218:	79fb      	ldrb	r3, [r7, #7]
 800b21a:	2b09      	cmp	r3, #9
 800b21c:	d006      	beq.n	800b22c <tcp_kill_state+0x24>
 800b21e:	4b1a      	ldr	r3, [pc, #104]	@ (800b288 <tcp_kill_state+0x80>)
 800b220:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800b224:	4919      	ldr	r1, [pc, #100]	@ (800b28c <tcp_kill_state+0x84>)
 800b226:	481a      	ldr	r0, [pc, #104]	@ (800b290 <tcp_kill_state+0x88>)
 800b228:	f007 fb34 	bl	8012894 <iprintf>

  inactivity = 0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b230:	2300      	movs	r3, #0
 800b232:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b234:	4b17      	ldr	r3, [pc, #92]	@ (800b294 <tcp_kill_state+0x8c>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	617b      	str	r3, [r7, #20]
 800b23a:	e017      	b.n	800b26c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	7d1b      	ldrb	r3, [r3, #20]
 800b240:	79fa      	ldrb	r2, [r7, #7]
 800b242:	429a      	cmp	r2, r3
 800b244:	d10f      	bne.n	800b266 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b246:	4b14      	ldr	r3, [pc, #80]	@ (800b298 <tcp_kill_state+0x90>)
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	6a1b      	ldr	r3, [r3, #32]
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	429a      	cmp	r2, r3
 800b254:	d807      	bhi.n	800b266 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b256:	4b10      	ldr	r3, [pc, #64]	@ (800b298 <tcp_kill_state+0x90>)
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	6a1b      	ldr	r3, [r3, #32]
 800b25e:	1ad3      	subs	r3, r2, r3
 800b260:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	617b      	str	r3, [r7, #20]
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1e4      	bne.n	800b23c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d003      	beq.n	800b280 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b278:	2100      	movs	r1, #0
 800b27a:	6938      	ldr	r0, [r7, #16]
 800b27c:	f7ff f950 	bl	800a520 <tcp_abandon>
  }
}
 800b280:	bf00      	nop
 800b282:	3718      	adds	r7, #24
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	08014624 	.word	0x08014624
 800b28c:	08014bb0 	.word	0x08014bb0
 800b290:	08014668 	.word	0x08014668
 800b294:	200089a8 	.word	0x200089a8
 800b298:	2000899c 	.word	0x2000899c

0800b29c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2aa:	4b12      	ldr	r3, [pc, #72]	@ (800b2f4 <tcp_kill_timewait+0x58>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	60fb      	str	r3, [r7, #12]
 800b2b0:	e012      	b.n	800b2d8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b2b2:	4b11      	ldr	r3, [pc, #68]	@ (800b2f8 <tcp_kill_timewait+0x5c>)
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d807      	bhi.n	800b2d2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b2f8 <tcp_kill_timewait+0x5c>)
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6a1b      	ldr	r3, [r3, #32]
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1e9      	bne.n	800b2b2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b2e4:	68b8      	ldr	r0, [r7, #8]
 800b2e6:	f7ff f9d9 	bl	800a69c <tcp_abort>
  }
}
 800b2ea:	bf00      	nop
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	200089ac 	.word	0x200089ac
 800b2f8:	2000899c 	.word	0x2000899c

0800b2fc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b302:	4b10      	ldr	r3, [pc, #64]	@ (800b344 <tcp_handle_closepend+0x48>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b308:	e014      	b.n	800b334 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	8b5b      	ldrh	r3, [r3, #26]
 800b314:	f003 0308 	and.w	r3, r3, #8
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d009      	beq.n	800b330 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	8b5b      	ldrh	r3, [r3, #26]
 800b320:	f023 0308 	bic.w	r3, r3, #8
 800b324:	b29a      	uxth	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff f862 	bl	800a3f4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1e7      	bne.n	800b30a <tcp_handle_closepend+0xe>
  }
}
 800b33a:	bf00      	nop
 800b33c:	bf00      	nop
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	200089a8 	.word	0x200089a8

0800b348 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	4603      	mov	r3, r0
 800b350:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b352:	2001      	movs	r0, #1
 800b354:	f7fd fc92 	bl	8008c7c <memp_malloc>
 800b358:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d126      	bne.n	800b3ae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b360:	f7ff ffcc 	bl	800b2fc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b364:	f7ff ff9a 	bl	800b29c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b368:	2001      	movs	r0, #1
 800b36a:	f7fd fc87 	bl	8008c7c <memp_malloc>
 800b36e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d11b      	bne.n	800b3ae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b376:	2009      	movs	r0, #9
 800b378:	f7ff ff46 	bl	800b208 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b37c:	2001      	movs	r0, #1
 800b37e:	f7fd fc7d 	bl	8008c7c <memp_malloc>
 800b382:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d111      	bne.n	800b3ae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b38a:	2008      	movs	r0, #8
 800b38c:	f7ff ff3c 	bl	800b208 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b390:	2001      	movs	r0, #1
 800b392:	f7fd fc73 	bl	8008c7c <memp_malloc>
 800b396:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d107      	bne.n	800b3ae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b39e:	79fb      	ldrb	r3, [r7, #7]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7ff fee3 	bl	800b16c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b3a6:	2001      	movs	r0, #1
 800b3a8:	f7fd fc68 	bl	8008c7c <memp_malloc>
 800b3ac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d03f      	beq.n	800b434 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b3b4:	229c      	movs	r2, #156	@ 0x9c
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f007 fb0c 	bl	80129d6 <memset>
    pcb->prio = prio;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	79fa      	ldrb	r2, [r7, #7]
 800b3c2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800b3ca:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800b3d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	22ff      	movs	r2, #255	@ 0xff
 800b3e2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800b3ea:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2206      	movs	r2, #6
 800b3f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2206      	movs	r2, #6
 800b3f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b400:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2201      	movs	r2, #1
 800b406:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800b40a:	4b0d      	ldr	r3, [pc, #52]	@ (800b440 <tcp_alloc+0xf8>)
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b412:	4b0c      	ldr	r3, [pc, #48]	@ (800b444 <tcp_alloc+0xfc>)
 800b414:	781a      	ldrb	r2, [r3, #0]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800b420:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	4a08      	ldr	r2, [pc, #32]	@ (800b448 <tcp_alloc+0x100>)
 800b428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	4a07      	ldr	r2, [pc, #28]	@ (800b44c <tcp_alloc+0x104>)
 800b430:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b434:	68fb      	ldr	r3, [r7, #12]
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	2000899c 	.word	0x2000899c
 800b444:	200089b2 	.word	0x200089b2
 800b448:	0800b101 	.word	0x0800b101
 800b44c:	006ddd00 	.word	0x006ddd00

0800b450 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d107      	bne.n	800b46e <tcp_pcb_purge+0x1e>
 800b45e:	4b21      	ldr	r3, [pc, #132]	@ (800b4e4 <tcp_pcb_purge+0x94>)
 800b460:	f640 0251 	movw	r2, #2129	@ 0x851
 800b464:	4920      	ldr	r1, [pc, #128]	@ (800b4e8 <tcp_pcb_purge+0x98>)
 800b466:	4821      	ldr	r0, [pc, #132]	@ (800b4ec <tcp_pcb_purge+0x9c>)
 800b468:	f007 fa14 	bl	8012894 <iprintf>
 800b46c:	e037      	b.n	800b4de <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	7d1b      	ldrb	r3, [r3, #20]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d033      	beq.n	800b4de <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b47a:	2b0a      	cmp	r3, #10
 800b47c:	d02f      	beq.n	800b4de <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b482:	2b01      	cmp	r3, #1
 800b484:	d02b      	beq.n	800b4de <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d007      	beq.n	800b49e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b492:	4618      	mov	r0, r3
 800b494:	f7fe fad8 	bl	8009a48 <pbuf_free>
      pcb->refused_data = NULL;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d002      	beq.n	800b4ac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 f986 	bl	800b7b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b4b2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff fdc7 	bl	800b04c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7ff fdc2 	bl	800b04c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b4de:	3708      	adds	r7, #8
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	08014624 	.word	0x08014624
 800b4e8:	08014c70 	.word	0x08014c70
 800b4ec:	08014668 	.word	0x08014668

0800b4f0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d106      	bne.n	800b50e <tcp_pcb_remove+0x1e>
 800b500:	4b3e      	ldr	r3, [pc, #248]	@ (800b5fc <tcp_pcb_remove+0x10c>)
 800b502:	f640 0283 	movw	r2, #2179	@ 0x883
 800b506:	493e      	ldr	r1, [pc, #248]	@ (800b600 <tcp_pcb_remove+0x110>)
 800b508:	483e      	ldr	r0, [pc, #248]	@ (800b604 <tcp_pcb_remove+0x114>)
 800b50a:	f007 f9c3 	bl	8012894 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d106      	bne.n	800b522 <tcp_pcb_remove+0x32>
 800b514:	4b39      	ldr	r3, [pc, #228]	@ (800b5fc <tcp_pcb_remove+0x10c>)
 800b516:	f640 0284 	movw	r2, #2180	@ 0x884
 800b51a:	493b      	ldr	r1, [pc, #236]	@ (800b608 <tcp_pcb_remove+0x118>)
 800b51c:	4839      	ldr	r0, [pc, #228]	@ (800b604 <tcp_pcb_remove+0x114>)
 800b51e:	f007 f9b9 	bl	8012894 <iprintf>

  TCP_RMV(pcblist, pcb);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d105      	bne.n	800b538 <tcp_pcb_remove+0x48>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68da      	ldr	r2, [r3, #12]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	601a      	str	r2, [r3, #0]
 800b536:	e013      	b.n	800b560 <tcp_pcb_remove+0x70>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	60fb      	str	r3, [r7, #12]
 800b53e:	e00c      	b.n	800b55a <tcp_pcb_remove+0x6a>
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	683a      	ldr	r2, [r7, #0]
 800b546:	429a      	cmp	r2, r3
 800b548:	d104      	bne.n	800b554 <tcp_pcb_remove+0x64>
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	68da      	ldr	r2, [r3, #12]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	60da      	str	r2, [r3, #12]
 800b552:	e005      	b.n	800b560 <tcp_pcb_remove+0x70>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	60fb      	str	r3, [r7, #12]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1ef      	bne.n	800b540 <tcp_pcb_remove+0x50>
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	2200      	movs	r2, #0
 800b564:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b566:	6838      	ldr	r0, [r7, #0]
 800b568:	f7ff ff72 	bl	800b450 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	7d1b      	ldrb	r3, [r3, #20]
 800b570:	2b0a      	cmp	r3, #10
 800b572:	d013      	beq.n	800b59c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d00f      	beq.n	800b59c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	8b5b      	ldrh	r3, [r3, #26]
 800b580:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b584:	2b00      	cmp	r3, #0
 800b586:	d009      	beq.n	800b59c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	8b5b      	ldrh	r3, [r3, #26]
 800b58c:	f043 0302 	orr.w	r3, r3, #2
 800b590:	b29a      	uxth	r2, r3
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b596:	6838      	ldr	r0, [r7, #0]
 800b598:	f002 ff68 	bl	800e46c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	7d1b      	ldrb	r3, [r3, #20]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d020      	beq.n	800b5e6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d006      	beq.n	800b5ba <tcp_pcb_remove+0xca>
 800b5ac:	4b13      	ldr	r3, [pc, #76]	@ (800b5fc <tcp_pcb_remove+0x10c>)
 800b5ae:	f640 0293 	movw	r2, #2195	@ 0x893
 800b5b2:	4916      	ldr	r1, [pc, #88]	@ (800b60c <tcp_pcb_remove+0x11c>)
 800b5b4:	4813      	ldr	r0, [pc, #76]	@ (800b604 <tcp_pcb_remove+0x114>)
 800b5b6:	f007 f96d 	bl	8012894 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d006      	beq.n	800b5d0 <tcp_pcb_remove+0xe0>
 800b5c2:	4b0e      	ldr	r3, [pc, #56]	@ (800b5fc <tcp_pcb_remove+0x10c>)
 800b5c4:	f640 0294 	movw	r2, #2196	@ 0x894
 800b5c8:	4911      	ldr	r1, [pc, #68]	@ (800b610 <tcp_pcb_remove+0x120>)
 800b5ca:	480e      	ldr	r0, [pc, #56]	@ (800b604 <tcp_pcb_remove+0x114>)
 800b5cc:	f007 f962 	bl	8012894 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d006      	beq.n	800b5e6 <tcp_pcb_remove+0xf6>
 800b5d8:	4b08      	ldr	r3, [pc, #32]	@ (800b5fc <tcp_pcb_remove+0x10c>)
 800b5da:	f640 0296 	movw	r2, #2198	@ 0x896
 800b5de:	490d      	ldr	r1, [pc, #52]	@ (800b614 <tcp_pcb_remove+0x124>)
 800b5e0:	4808      	ldr	r0, [pc, #32]	@ (800b604 <tcp_pcb_remove+0x114>)
 800b5e2:	f007 f957 	bl	8012894 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b5f2:	bf00      	nop
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	08014624 	.word	0x08014624
 800b600:	08014c8c 	.word	0x08014c8c
 800b604:	08014668 	.word	0x08014668
 800b608:	08014ca8 	.word	0x08014ca8
 800b60c:	08014cc8 	.word	0x08014cc8
 800b610:	08014ce0 	.word	0x08014ce0
 800b614:	08014cfc 	.word	0x08014cfc

0800b618 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d106      	bne.n	800b634 <tcp_next_iss+0x1c>
 800b626:	4b0a      	ldr	r3, [pc, #40]	@ (800b650 <tcp_next_iss+0x38>)
 800b628:	f640 02af 	movw	r2, #2223	@ 0x8af
 800b62c:	4909      	ldr	r1, [pc, #36]	@ (800b654 <tcp_next_iss+0x3c>)
 800b62e:	480a      	ldr	r0, [pc, #40]	@ (800b658 <tcp_next_iss+0x40>)
 800b630:	f007 f930 	bl	8012894 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b634:	4b09      	ldr	r3, [pc, #36]	@ (800b65c <tcp_next_iss+0x44>)
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	4b09      	ldr	r3, [pc, #36]	@ (800b660 <tcp_next_iss+0x48>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4413      	add	r3, r2
 800b63e:	4a07      	ldr	r2, [pc, #28]	@ (800b65c <tcp_next_iss+0x44>)
 800b640:	6013      	str	r3, [r2, #0]
  return iss;
 800b642:	4b06      	ldr	r3, [pc, #24]	@ (800b65c <tcp_next_iss+0x44>)
 800b644:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b646:	4618      	mov	r0, r3
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	08014624 	.word	0x08014624
 800b654:	08014d14 	.word	0x08014d14
 800b658:	08014668 	.word	0x08014668
 800b65c:	2000009c 	.word	0x2000009c
 800b660:	2000899c 	.word	0x2000899c

0800b664 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
 800b66a:	4603      	mov	r3, r0
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	607a      	str	r2, [r7, #4]
 800b670:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d106      	bne.n	800b686 <tcp_eff_send_mss_netif+0x22>
 800b678:	4b14      	ldr	r3, [pc, #80]	@ (800b6cc <tcp_eff_send_mss_netif+0x68>)
 800b67a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800b67e:	4914      	ldr	r1, [pc, #80]	@ (800b6d0 <tcp_eff_send_mss_netif+0x6c>)
 800b680:	4814      	ldr	r0, [pc, #80]	@ (800b6d4 <tcp_eff_send_mss_netif+0x70>)
 800b682:	f007 f907 	bl	8012894 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d101      	bne.n	800b690 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b68c:	89fb      	ldrh	r3, [r7, #14]
 800b68e:	e019      	b.n	800b6c4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b694:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b696:	8afb      	ldrh	r3, [r7, #22]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d012      	beq.n	800b6c2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b69c:	2328      	movs	r3, #40	@ 0x28
 800b69e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b6a0:	8afa      	ldrh	r2, [r7, #22]
 800b6a2:	8abb      	ldrh	r3, [r7, #20]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d904      	bls.n	800b6b2 <tcp_eff_send_mss_netif+0x4e>
 800b6a8:	8afa      	ldrh	r2, [r7, #22]
 800b6aa:	8abb      	ldrh	r3, [r7, #20]
 800b6ac:	1ad3      	subs	r3, r2, r3
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	e000      	b.n	800b6b4 <tcp_eff_send_mss_netif+0x50>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b6b6:	8a7a      	ldrh	r2, [r7, #18]
 800b6b8:	89fb      	ldrh	r3, [r7, #14]
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	bf28      	it	cs
 800b6be:	4613      	movcs	r3, r2
 800b6c0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b6c2:	89fb      	ldrh	r3, [r7, #14]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3718      	adds	r7, #24
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	08014624 	.word	0x08014624
 800b6d0:	08014d30 	.word	0x08014d30
 800b6d4:	08014668 	.word	0x08014668

0800b6d8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d119      	bne.n	800b720 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b6ec:	4b10      	ldr	r3, [pc, #64]	@ (800b730 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b6ee:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800b6f2:	4910      	ldr	r1, [pc, #64]	@ (800b734 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b6f4:	4810      	ldr	r0, [pc, #64]	@ (800b738 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b6f6:	f007 f8cd 	bl	8012894 <iprintf>

  while (pcb != NULL) {
 800b6fa:	e011      	b.n	800b720 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	429a      	cmp	r2, r3
 800b706:	d108      	bne.n	800b71a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f7fe ffc4 	bl	800a69c <tcp_abort>
      pcb = next;
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	60fb      	str	r3, [r7, #12]
 800b718:	e002      	b.n	800b720 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1ea      	bne.n	800b6fc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b726:	bf00      	nop
 800b728:	bf00      	nop
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	08014624 	.word	0x08014624
 800b734:	08014d58 	.word	0x08014d58
 800b738:	08014668 	.word	0x08014668

0800b73c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d02a      	beq.n	800b7a2 <tcp_netif_ip_addr_changed+0x66>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d026      	beq.n	800b7a2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b754:	4b15      	ldr	r3, [pc, #84]	@ (800b7ac <tcp_netif_ip_addr_changed+0x70>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4619      	mov	r1, r3
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7ff ffbc 	bl	800b6d8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b760:	4b13      	ldr	r3, [pc, #76]	@ (800b7b0 <tcp_netif_ip_addr_changed+0x74>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4619      	mov	r1, r3
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7ff ffb6 	bl	800b6d8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d017      	beq.n	800b7a2 <tcp_netif_ip_addr_changed+0x66>
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d013      	beq.n	800b7a2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b77a:	4b0e      	ldr	r3, [pc, #56]	@ (800b7b4 <tcp_netif_ip_addr_changed+0x78>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	60fb      	str	r3, [r7, #12]
 800b780:	e00c      	b.n	800b79c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d103      	bne.n	800b796 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	60fb      	str	r3, [r7, #12]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1ef      	bne.n	800b782 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b7a2:	bf00      	nop
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	200089a8 	.word	0x200089a8
 800b7b0:	200089a0 	.word	0x200089a0
 800b7b4:	200089a4 	.word	0x200089a4

0800b7b8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d007      	beq.n	800b7d8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff fc3d 	bl	800b04c <tcp_segs_free>
    pcb->ooseq = NULL;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b7d8:	bf00      	nop
 800b7da:	3708      	adds	r7, #8
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b7e0:	b590      	push	{r4, r7, lr}
 800b7e2:	b08d      	sub	sp, #52	@ 0x34
 800b7e4:	af04      	add	r7, sp, #16
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d105      	bne.n	800b7fc <tcp_input+0x1c>
 800b7f0:	4b9b      	ldr	r3, [pc, #620]	@ (800ba60 <tcp_input+0x280>)
 800b7f2:	2283      	movs	r2, #131	@ 0x83
 800b7f4:	499b      	ldr	r1, [pc, #620]	@ (800ba64 <tcp_input+0x284>)
 800b7f6:	489c      	ldr	r0, [pc, #624]	@ (800ba68 <tcp_input+0x288>)
 800b7f8:	f007 f84c 	bl	8012894 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	4a9a      	ldr	r2, [pc, #616]	@ (800ba6c <tcp_input+0x28c>)
 800b802:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	895b      	ldrh	r3, [r3, #10]
 800b808:	2b13      	cmp	r3, #19
 800b80a:	f240 83d1 	bls.w	800bfb0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b80e:	4b98      	ldr	r3, [pc, #608]	@ (800ba70 <tcp_input+0x290>)
 800b810:	695b      	ldr	r3, [r3, #20]
 800b812:	4a97      	ldr	r2, [pc, #604]	@ (800ba70 <tcp_input+0x290>)
 800b814:	6812      	ldr	r2, [r2, #0]
 800b816:	4611      	mov	r1, r2
 800b818:	4618      	mov	r0, r3
 800b81a:	f005 ff61 	bl	80116e0 <ip4_addr_isbroadcast_u32>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	f040 83c7 	bne.w	800bfb4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b826:	4b92      	ldr	r3, [pc, #584]	@ (800ba70 <tcp_input+0x290>)
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b82e:	2be0      	cmp	r3, #224	@ 0xe0
 800b830:	f000 83c0 	beq.w	800bfb4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b834:	4b8d      	ldr	r3, [pc, #564]	@ (800ba6c <tcp_input+0x28c>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	899b      	ldrh	r3, [r3, #12]
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fc fda5 	bl	800838c <lwip_htons>
 800b842:	4603      	mov	r3, r0
 800b844:	0b1b      	lsrs	r3, r3, #12
 800b846:	b29b      	uxth	r3, r3
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b84e:	7cbb      	ldrb	r3, [r7, #18]
 800b850:	2b13      	cmp	r3, #19
 800b852:	f240 83b1 	bls.w	800bfb8 <tcp_input+0x7d8>
 800b856:	7cbb      	ldrb	r3, [r7, #18]
 800b858:	b29a      	uxth	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	891b      	ldrh	r3, [r3, #8]
 800b85e:	429a      	cmp	r2, r3
 800b860:	f200 83aa 	bhi.w	800bfb8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b864:	7cbb      	ldrb	r3, [r7, #18]
 800b866:	b29b      	uxth	r3, r3
 800b868:	3b14      	subs	r3, #20
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	4b81      	ldr	r3, [pc, #516]	@ (800ba74 <tcp_input+0x294>)
 800b86e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b870:	4b81      	ldr	r3, [pc, #516]	@ (800ba78 <tcp_input+0x298>)
 800b872:	2200      	movs	r2, #0
 800b874:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	895a      	ldrh	r2, [r3, #10]
 800b87a:	7cbb      	ldrb	r3, [r7, #18]
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	429a      	cmp	r2, r3
 800b880:	d309      	bcc.n	800b896 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b882:	4b7c      	ldr	r3, [pc, #496]	@ (800ba74 <tcp_input+0x294>)
 800b884:	881a      	ldrh	r2, [r3, #0]
 800b886:	4b7d      	ldr	r3, [pc, #500]	@ (800ba7c <tcp_input+0x29c>)
 800b888:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b88a:	7cbb      	ldrb	r3, [r7, #18]
 800b88c:	4619      	mov	r1, r3
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f7fe f854 	bl	800993c <pbuf_remove_header>
 800b894:	e04e      	b.n	800b934 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d105      	bne.n	800b8aa <tcp_input+0xca>
 800b89e:	4b70      	ldr	r3, [pc, #448]	@ (800ba60 <tcp_input+0x280>)
 800b8a0:	22c2      	movs	r2, #194	@ 0xc2
 800b8a2:	4977      	ldr	r1, [pc, #476]	@ (800ba80 <tcp_input+0x2a0>)
 800b8a4:	4870      	ldr	r0, [pc, #448]	@ (800ba68 <tcp_input+0x288>)
 800b8a6:	f006 fff5 	bl	8012894 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b8aa:	2114      	movs	r1, #20
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f7fe f845 	bl	800993c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	895a      	ldrh	r2, [r3, #10]
 800b8b6:	4b71      	ldr	r3, [pc, #452]	@ (800ba7c <tcp_input+0x29c>)
 800b8b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b8ba:	4b6e      	ldr	r3, [pc, #440]	@ (800ba74 <tcp_input+0x294>)
 800b8bc:	881a      	ldrh	r2, [r3, #0]
 800b8be:	4b6f      	ldr	r3, [pc, #444]	@ (800ba7c <tcp_input+0x29c>)
 800b8c0:	881b      	ldrh	r3, [r3, #0]
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b8c6:	4b6d      	ldr	r3, [pc, #436]	@ (800ba7c <tcp_input+0x29c>)
 800b8c8:	881b      	ldrh	r3, [r3, #0]
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f7fe f835 	bl	800993c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	895b      	ldrh	r3, [r3, #10]
 800b8d8:	8a3a      	ldrh	r2, [r7, #16]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	f200 836e 	bhi.w	800bfbc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	4a64      	ldr	r2, [pc, #400]	@ (800ba78 <tcp_input+0x298>)
 800b8e8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	8a3a      	ldrh	r2, [r7, #16]
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe f822 	bl	800993c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	891a      	ldrh	r2, [r3, #8]
 800b8fc:	8a3b      	ldrh	r3, [r7, #16]
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	b29a      	uxth	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	895b      	ldrh	r3, [r3, #10]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d005      	beq.n	800b91a <tcp_input+0x13a>
 800b90e:	4b54      	ldr	r3, [pc, #336]	@ (800ba60 <tcp_input+0x280>)
 800b910:	22df      	movs	r2, #223	@ 0xdf
 800b912:	495c      	ldr	r1, [pc, #368]	@ (800ba84 <tcp_input+0x2a4>)
 800b914:	4854      	ldr	r0, [pc, #336]	@ (800ba68 <tcp_input+0x288>)
 800b916:	f006 ffbd 	bl	8012894 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	891a      	ldrh	r2, [r3, #8]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	891b      	ldrh	r3, [r3, #8]
 800b924:	429a      	cmp	r2, r3
 800b926:	d005      	beq.n	800b934 <tcp_input+0x154>
 800b928:	4b4d      	ldr	r3, [pc, #308]	@ (800ba60 <tcp_input+0x280>)
 800b92a:	22e0      	movs	r2, #224	@ 0xe0
 800b92c:	4956      	ldr	r1, [pc, #344]	@ (800ba88 <tcp_input+0x2a8>)
 800b92e:	484e      	ldr	r0, [pc, #312]	@ (800ba68 <tcp_input+0x288>)
 800b930:	f006 ffb0 	bl	8012894 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b934:	4b4d      	ldr	r3, [pc, #308]	@ (800ba6c <tcp_input+0x28c>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	881b      	ldrh	r3, [r3, #0]
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	4a4b      	ldr	r2, [pc, #300]	@ (800ba6c <tcp_input+0x28c>)
 800b93e:	6814      	ldr	r4, [r2, #0]
 800b940:	4618      	mov	r0, r3
 800b942:	f7fc fd23 	bl	800838c <lwip_htons>
 800b946:	4603      	mov	r3, r0
 800b948:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b94a:	4b48      	ldr	r3, [pc, #288]	@ (800ba6c <tcp_input+0x28c>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	885b      	ldrh	r3, [r3, #2]
 800b950:	b29b      	uxth	r3, r3
 800b952:	4a46      	ldr	r2, [pc, #280]	@ (800ba6c <tcp_input+0x28c>)
 800b954:	6814      	ldr	r4, [r2, #0]
 800b956:	4618      	mov	r0, r3
 800b958:	f7fc fd18 	bl	800838c <lwip_htons>
 800b95c:	4603      	mov	r3, r0
 800b95e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b960:	4b42      	ldr	r3, [pc, #264]	@ (800ba6c <tcp_input+0x28c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	4a41      	ldr	r2, [pc, #260]	@ (800ba6c <tcp_input+0x28c>)
 800b968:	6814      	ldr	r4, [r2, #0]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fc fd24 	bl	80083b8 <lwip_htonl>
 800b970:	4603      	mov	r3, r0
 800b972:	6063      	str	r3, [r4, #4]
 800b974:	6863      	ldr	r3, [r4, #4]
 800b976:	4a45      	ldr	r2, [pc, #276]	@ (800ba8c <tcp_input+0x2ac>)
 800b978:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b97a:	4b3c      	ldr	r3, [pc, #240]	@ (800ba6c <tcp_input+0x28c>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	4a3a      	ldr	r2, [pc, #232]	@ (800ba6c <tcp_input+0x28c>)
 800b982:	6814      	ldr	r4, [r2, #0]
 800b984:	4618      	mov	r0, r3
 800b986:	f7fc fd17 	bl	80083b8 <lwip_htonl>
 800b98a:	4603      	mov	r3, r0
 800b98c:	60a3      	str	r3, [r4, #8]
 800b98e:	68a3      	ldr	r3, [r4, #8]
 800b990:	4a3f      	ldr	r2, [pc, #252]	@ (800ba90 <tcp_input+0x2b0>)
 800b992:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b994:	4b35      	ldr	r3, [pc, #212]	@ (800ba6c <tcp_input+0x28c>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	89db      	ldrh	r3, [r3, #14]
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	4a33      	ldr	r2, [pc, #204]	@ (800ba6c <tcp_input+0x28c>)
 800b99e:	6814      	ldr	r4, [r2, #0]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fc fcf3 	bl	800838c <lwip_htons>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b9aa:	4b30      	ldr	r3, [pc, #192]	@ (800ba6c <tcp_input+0x28c>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	899b      	ldrh	r3, [r3, #12]
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fc fcea 	bl	800838c <lwip_htons>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	4b34      	ldr	r3, [pc, #208]	@ (800ba94 <tcp_input+0x2b4>)
 800b9c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	891a      	ldrh	r2, [r3, #8]
 800b9ca:	4b33      	ldr	r3, [pc, #204]	@ (800ba98 <tcp_input+0x2b8>)
 800b9cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b9ce:	4b31      	ldr	r3, [pc, #196]	@ (800ba94 <tcp_input+0x2b4>)
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	f003 0303 	and.w	r3, r3, #3
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00c      	beq.n	800b9f4 <tcp_input+0x214>
    tcplen++;
 800b9da:	4b2f      	ldr	r3, [pc, #188]	@ (800ba98 <tcp_input+0x2b8>)
 800b9dc:	881b      	ldrh	r3, [r3, #0]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	4b2d      	ldr	r3, [pc, #180]	@ (800ba98 <tcp_input+0x2b8>)
 800b9e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	891a      	ldrh	r2, [r3, #8]
 800b9ea:	4b2b      	ldr	r3, [pc, #172]	@ (800ba98 <tcp_input+0x2b8>)
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	f200 82e6 	bhi.w	800bfc0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9f8:	4b28      	ldr	r3, [pc, #160]	@ (800ba9c <tcp_input+0x2bc>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	61fb      	str	r3, [r7, #28]
 800b9fe:	e09d      	b.n	800bb3c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	7d1b      	ldrb	r3, [r3, #20]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d105      	bne.n	800ba14 <tcp_input+0x234>
 800ba08:	4b15      	ldr	r3, [pc, #84]	@ (800ba60 <tcp_input+0x280>)
 800ba0a:	22fb      	movs	r2, #251	@ 0xfb
 800ba0c:	4924      	ldr	r1, [pc, #144]	@ (800baa0 <tcp_input+0x2c0>)
 800ba0e:	4816      	ldr	r0, [pc, #88]	@ (800ba68 <tcp_input+0x288>)
 800ba10:	f006 ff40 	bl	8012894 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	7d1b      	ldrb	r3, [r3, #20]
 800ba18:	2b0a      	cmp	r3, #10
 800ba1a:	d105      	bne.n	800ba28 <tcp_input+0x248>
 800ba1c:	4b10      	ldr	r3, [pc, #64]	@ (800ba60 <tcp_input+0x280>)
 800ba1e:	22fc      	movs	r2, #252	@ 0xfc
 800ba20:	4920      	ldr	r1, [pc, #128]	@ (800baa4 <tcp_input+0x2c4>)
 800ba22:	4811      	ldr	r0, [pc, #68]	@ (800ba68 <tcp_input+0x288>)
 800ba24:	f006 ff36 	bl	8012894 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	7d1b      	ldrb	r3, [r3, #20]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d105      	bne.n	800ba3c <tcp_input+0x25c>
 800ba30:	4b0b      	ldr	r3, [pc, #44]	@ (800ba60 <tcp_input+0x280>)
 800ba32:	22fd      	movs	r2, #253	@ 0xfd
 800ba34:	491c      	ldr	r1, [pc, #112]	@ (800baa8 <tcp_input+0x2c8>)
 800ba36:	480c      	ldr	r0, [pc, #48]	@ (800ba68 <tcp_input+0x288>)
 800ba38:	f006 ff2c 	bl	8012894 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	7a1b      	ldrb	r3, [r3, #8]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d033      	beq.n	800baac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	7a1a      	ldrb	r2, [r3, #8]
 800ba48:	4b09      	ldr	r3, [pc, #36]	@ (800ba70 <tcp_input+0x290>)
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba50:	3301      	adds	r3, #1
 800ba52:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d029      	beq.n	800baac <tcp_input+0x2cc>
      prev = pcb;
 800ba58:	69fb      	ldr	r3, [r7, #28]
 800ba5a:	61bb      	str	r3, [r7, #24]
      continue;
 800ba5c:	e06b      	b.n	800bb36 <tcp_input+0x356>
 800ba5e:	bf00      	nop
 800ba60:	08014d8c 	.word	0x08014d8c
 800ba64:	08014dc0 	.word	0x08014dc0
 800ba68:	08014dd8 	.word	0x08014dd8
 800ba6c:	200089c4 	.word	0x200089c4
 800ba70:	2000566c 	.word	0x2000566c
 800ba74:	200089c8 	.word	0x200089c8
 800ba78:	200089cc 	.word	0x200089cc
 800ba7c:	200089ca 	.word	0x200089ca
 800ba80:	08014e00 	.word	0x08014e00
 800ba84:	08014e10 	.word	0x08014e10
 800ba88:	08014e1c 	.word	0x08014e1c
 800ba8c:	200089d4 	.word	0x200089d4
 800ba90:	200089d8 	.word	0x200089d8
 800ba94:	200089e0 	.word	0x200089e0
 800ba98:	200089de 	.word	0x200089de
 800ba9c:	200089a8 	.word	0x200089a8
 800baa0:	08014e3c 	.word	0x08014e3c
 800baa4:	08014e64 	.word	0x08014e64
 800baa8:	08014e90 	.word	0x08014e90
    }

    if (pcb->remote_port == tcphdr->src &&
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	8b1a      	ldrh	r2, [r3, #24]
 800bab0:	4b72      	ldr	r3, [pc, #456]	@ (800bc7c <tcp_input+0x49c>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	881b      	ldrh	r3, [r3, #0]
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	429a      	cmp	r2, r3
 800baba:	d13a      	bne.n	800bb32 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	8ada      	ldrh	r2, [r3, #22]
 800bac0:	4b6e      	ldr	r3, [pc, #440]	@ (800bc7c <tcp_input+0x49c>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	885b      	ldrh	r3, [r3, #2]
 800bac6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bac8:	429a      	cmp	r2, r3
 800baca:	d132      	bne.n	800bb32 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	685a      	ldr	r2, [r3, #4]
 800bad0:	4b6b      	ldr	r3, [pc, #428]	@ (800bc80 <tcp_input+0x4a0>)
 800bad2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d12c      	bne.n	800bb32 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	4b68      	ldr	r3, [pc, #416]	@ (800bc80 <tcp_input+0x4a0>)
 800bade:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d126      	bne.n	800bb32 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	69fa      	ldr	r2, [r7, #28]
 800baea:	429a      	cmp	r2, r3
 800baec:	d106      	bne.n	800bafc <tcp_input+0x31c>
 800baee:	4b65      	ldr	r3, [pc, #404]	@ (800bc84 <tcp_input+0x4a4>)
 800baf0:	f240 120d 	movw	r2, #269	@ 0x10d
 800baf4:	4964      	ldr	r1, [pc, #400]	@ (800bc88 <tcp_input+0x4a8>)
 800baf6:	4865      	ldr	r0, [pc, #404]	@ (800bc8c <tcp_input+0x4ac>)
 800baf8:	f006 fecc 	bl	8012894 <iprintf>
      if (prev != NULL) {
 800bafc:	69bb      	ldr	r3, [r7, #24]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00a      	beq.n	800bb18 <tcp_input+0x338>
        prev->next = pcb->next;
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	68da      	ldr	r2, [r3, #12]
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800bb0a:	4b61      	ldr	r3, [pc, #388]	@ (800bc90 <tcp_input+0x4b0>)
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800bb12:	4a5f      	ldr	r2, [pc, #380]	@ (800bc90 <tcp_input+0x4b0>)
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	69fa      	ldr	r2, [r7, #28]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d111      	bne.n	800bb46 <tcp_input+0x366>
 800bb22:	4b58      	ldr	r3, [pc, #352]	@ (800bc84 <tcp_input+0x4a4>)
 800bb24:	f240 1215 	movw	r2, #277	@ 0x115
 800bb28:	495a      	ldr	r1, [pc, #360]	@ (800bc94 <tcp_input+0x4b4>)
 800bb2a:	4858      	ldr	r0, [pc, #352]	@ (800bc8c <tcp_input+0x4ac>)
 800bb2c:	f006 feb2 	bl	8012894 <iprintf>
      break;
 800bb30:	e009      	b.n	800bb46 <tcp_input+0x366>
    }
    prev = pcb;
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	61fb      	str	r3, [r7, #28]
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f47f af5e 	bne.w	800ba00 <tcp_input+0x220>
 800bb44:	e000      	b.n	800bb48 <tcp_input+0x368>
      break;
 800bb46:	bf00      	nop
  }

  if (pcb == NULL) {
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	f040 80aa 	bne.w	800bca4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb50:	4b51      	ldr	r3, [pc, #324]	@ (800bc98 <tcp_input+0x4b8>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	61fb      	str	r3, [r7, #28]
 800bb56:	e03f      	b.n	800bbd8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	7d1b      	ldrb	r3, [r3, #20]
 800bb5c:	2b0a      	cmp	r3, #10
 800bb5e:	d006      	beq.n	800bb6e <tcp_input+0x38e>
 800bb60:	4b48      	ldr	r3, [pc, #288]	@ (800bc84 <tcp_input+0x4a4>)
 800bb62:	f240 121f 	movw	r2, #287	@ 0x11f
 800bb66:	494d      	ldr	r1, [pc, #308]	@ (800bc9c <tcp_input+0x4bc>)
 800bb68:	4848      	ldr	r0, [pc, #288]	@ (800bc8c <tcp_input+0x4ac>)
 800bb6a:	f006 fe93 	bl	8012894 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	7a1b      	ldrb	r3, [r3, #8]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d009      	beq.n	800bb8a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	7a1a      	ldrb	r2, [r3, #8]
 800bb7a:	4b41      	ldr	r3, [pc, #260]	@ (800bc80 <tcp_input+0x4a0>)
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb82:	3301      	adds	r3, #1
 800bb84:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d122      	bne.n	800bbd0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	8b1a      	ldrh	r2, [r3, #24]
 800bb8e:	4b3b      	ldr	r3, [pc, #236]	@ (800bc7c <tcp_input+0x49c>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	881b      	ldrh	r3, [r3, #0]
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d11b      	bne.n	800bbd2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	8ada      	ldrh	r2, [r3, #22]
 800bb9e:	4b37      	ldr	r3, [pc, #220]	@ (800bc7c <tcp_input+0x49c>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	885b      	ldrh	r3, [r3, #2]
 800bba4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d113      	bne.n	800bbd2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	685a      	ldr	r2, [r3, #4]
 800bbae:	4b34      	ldr	r3, [pc, #208]	@ (800bc80 <tcp_input+0x4a0>)
 800bbb0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d10d      	bne.n	800bbd2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	4b31      	ldr	r3, [pc, #196]	@ (800bc80 <tcp_input+0x4a0>)
 800bbbc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d107      	bne.n	800bbd2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800bbc2:	69f8      	ldr	r0, [r7, #28]
 800bbc4:	f000 fb56 	bl	800c274 <tcp_timewait_input>
        }
        pbuf_free(p);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f7fd ff3d 	bl	8009a48 <pbuf_free>
        return;
 800bbce:	e1fd      	b.n	800bfcc <tcp_input+0x7ec>
        continue;
 800bbd0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	61fb      	str	r3, [r7, #28]
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1bc      	bne.n	800bb58 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bbe2:	4b2f      	ldr	r3, [pc, #188]	@ (800bca0 <tcp_input+0x4c0>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	617b      	str	r3, [r7, #20]
 800bbe8:	e02a      	b.n	800bc40 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	7a1b      	ldrb	r3, [r3, #8]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00c      	beq.n	800bc0c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	7a1a      	ldrb	r2, [r3, #8]
 800bbf6:	4b22      	ldr	r3, [pc, #136]	@ (800bc80 <tcp_input+0x4a0>)
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bbfe:	3301      	adds	r3, #1
 800bc00:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d002      	beq.n	800bc0c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	61bb      	str	r3, [r7, #24]
        continue;
 800bc0a:	e016      	b.n	800bc3a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	8ada      	ldrh	r2, [r3, #22]
 800bc10:	4b1a      	ldr	r3, [pc, #104]	@ (800bc7c <tcp_input+0x49c>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	885b      	ldrh	r3, [r3, #2]
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d10c      	bne.n	800bc36 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	4b17      	ldr	r3, [pc, #92]	@ (800bc80 <tcp_input+0x4a0>)
 800bc22:	695b      	ldr	r3, [r3, #20]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d00f      	beq.n	800bc48 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00d      	beq.n	800bc4a <tcp_input+0x46a>
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d009      	beq.n	800bc4a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	617b      	str	r3, [r7, #20]
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1d1      	bne.n	800bbea <tcp_input+0x40a>
 800bc46:	e000      	b.n	800bc4a <tcp_input+0x46a>
            break;
 800bc48:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d029      	beq.n	800bca4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00a      	beq.n	800bc6c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	68da      	ldr	r2, [r3, #12]
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bc5e:	4b10      	ldr	r3, [pc, #64]	@ (800bca0 <tcp_input+0x4c0>)
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bc66:	4a0e      	ldr	r2, [pc, #56]	@ (800bca0 <tcp_input+0x4c0>)
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800bc6c:	6978      	ldr	r0, [r7, #20]
 800bc6e:	f000 fa03 	bl	800c078 <tcp_listen_input>
      }
      pbuf_free(p);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7fd fee8 	bl	8009a48 <pbuf_free>
      return;
 800bc78:	e1a8      	b.n	800bfcc <tcp_input+0x7ec>
 800bc7a:	bf00      	nop
 800bc7c:	200089c4 	.word	0x200089c4
 800bc80:	2000566c 	.word	0x2000566c
 800bc84:	08014d8c 	.word	0x08014d8c
 800bc88:	08014eb8 	.word	0x08014eb8
 800bc8c:	08014dd8 	.word	0x08014dd8
 800bc90:	200089a8 	.word	0x200089a8
 800bc94:	08014ee4 	.word	0x08014ee4
 800bc98:	200089ac 	.word	0x200089ac
 800bc9c:	08014f10 	.word	0x08014f10
 800bca0:	200089a4 	.word	0x200089a4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f000 8158 	beq.w	800bf5c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bcac:	4b95      	ldr	r3, [pc, #596]	@ (800bf04 <tcp_input+0x724>)
 800bcae:	2200      	movs	r2, #0
 800bcb0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	891a      	ldrh	r2, [r3, #8]
 800bcb6:	4b93      	ldr	r3, [pc, #588]	@ (800bf04 <tcp_input+0x724>)
 800bcb8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bcba:	4a92      	ldr	r2, [pc, #584]	@ (800bf04 <tcp_input+0x724>)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bcc0:	4b91      	ldr	r3, [pc, #580]	@ (800bf08 <tcp_input+0x728>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a8f      	ldr	r2, [pc, #572]	@ (800bf04 <tcp_input+0x724>)
 800bcc6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bcc8:	4b90      	ldr	r3, [pc, #576]	@ (800bf0c <tcp_input+0x72c>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bcce:	4b90      	ldr	r3, [pc, #576]	@ (800bf10 <tcp_input+0x730>)
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bcd4:	4b8f      	ldr	r3, [pc, #572]	@ (800bf14 <tcp_input+0x734>)
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bcda:	4b8f      	ldr	r3, [pc, #572]	@ (800bf18 <tcp_input+0x738>)
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	f003 0308 	and.w	r3, r3, #8
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d006      	beq.n	800bcf4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	7b5b      	ldrb	r3, [r3, #13]
 800bcea:	f043 0301 	orr.w	r3, r3, #1
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d017      	beq.n	800bd2c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bcfc:	69f8      	ldr	r0, [r7, #28]
 800bcfe:	f7ff f929 	bl	800af54 <tcp_process_refused_data>
 800bd02:	4603      	mov	r3, r0
 800bd04:	f113 0f0d 	cmn.w	r3, #13
 800bd08:	d007      	beq.n	800bd1a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d00c      	beq.n	800bd2c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bd12:	4b82      	ldr	r3, [pc, #520]	@ (800bf1c <tcp_input+0x73c>)
 800bd14:	881b      	ldrh	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d008      	beq.n	800bd2c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f040 80e3 	bne.w	800beea <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800bd24:	69f8      	ldr	r0, [r7, #28]
 800bd26:	f003 f9a7 	bl	800f078 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800bd2a:	e0de      	b.n	800beea <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800bd2c:	4a7c      	ldr	r2, [pc, #496]	@ (800bf20 <tcp_input+0x740>)
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800bd32:	69f8      	ldr	r0, [r7, #28]
 800bd34:	f000 fb18 	bl	800c368 <tcp_process>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800bd3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd40:	f113 0f0d 	cmn.w	r3, #13
 800bd44:	f000 80d3 	beq.w	800beee <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800bd48:	4b71      	ldr	r3, [pc, #452]	@ (800bf10 <tcp_input+0x730>)
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	f003 0308 	and.w	r3, r3, #8
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d015      	beq.n	800bd80 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d008      	beq.n	800bd70 <tcp_input+0x590>
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd64:	69fa      	ldr	r2, [r7, #28]
 800bd66:	6912      	ldr	r2, [r2, #16]
 800bd68:	f06f 010d 	mvn.w	r1, #13
 800bd6c:	4610      	mov	r0, r2
 800bd6e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bd70:	69f9      	ldr	r1, [r7, #28]
 800bd72:	486c      	ldr	r0, [pc, #432]	@ (800bf24 <tcp_input+0x744>)
 800bd74:	f7ff fbbc 	bl	800b4f0 <tcp_pcb_remove>
        tcp_free(pcb);
 800bd78:	69f8      	ldr	r0, [r7, #28]
 800bd7a:	f7fe f9a7 	bl	800a0cc <tcp_free>
 800bd7e:	e0da      	b.n	800bf36 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800bd80:	2300      	movs	r3, #0
 800bd82:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800bd84:	4b63      	ldr	r3, [pc, #396]	@ (800bf14 <tcp_input+0x734>)
 800bd86:	881b      	ldrh	r3, [r3, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d01d      	beq.n	800bdc8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800bd8c:	4b61      	ldr	r3, [pc, #388]	@ (800bf14 <tcp_input+0x734>)
 800bd8e:	881b      	ldrh	r3, [r3, #0]
 800bd90:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00a      	beq.n	800bdb2 <tcp_input+0x5d2>
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bda2:	69fa      	ldr	r2, [r7, #28]
 800bda4:	6910      	ldr	r0, [r2, #16]
 800bda6:	89fa      	ldrh	r2, [r7, #14]
 800bda8:	69f9      	ldr	r1, [r7, #28]
 800bdaa:	4798      	blx	r3
 800bdac:	4603      	mov	r3, r0
 800bdae:	74fb      	strb	r3, [r7, #19]
 800bdb0:	e001      	b.n	800bdb6 <tcp_input+0x5d6>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bdb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bdba:	f113 0f0d 	cmn.w	r3, #13
 800bdbe:	f000 8098 	beq.w	800bef2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800bdc2:	4b54      	ldr	r3, [pc, #336]	@ (800bf14 <tcp_input+0x734>)
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800bdc8:	69f8      	ldr	r0, [r7, #28]
 800bdca:	f000 f915 	bl	800bff8 <tcp_input_delayed_close>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f040 8090 	bne.w	800bef6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800bdd6:	4b4d      	ldr	r3, [pc, #308]	@ (800bf0c <tcp_input+0x72c>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d041      	beq.n	800be62 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d006      	beq.n	800bdf4 <tcp_input+0x614>
 800bde6:	4b50      	ldr	r3, [pc, #320]	@ (800bf28 <tcp_input+0x748>)
 800bde8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800bdec:	494f      	ldr	r1, [pc, #316]	@ (800bf2c <tcp_input+0x74c>)
 800bdee:	4850      	ldr	r0, [pc, #320]	@ (800bf30 <tcp_input+0x750>)
 800bdf0:	f006 fd50 	bl	8012894 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	8b5b      	ldrh	r3, [r3, #26]
 800bdf8:	f003 0310 	and.w	r3, r3, #16
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d008      	beq.n	800be12 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800be00:	4b42      	ldr	r3, [pc, #264]	@ (800bf0c <tcp_input+0x72c>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4618      	mov	r0, r3
 800be06:	f7fd fe1f 	bl	8009a48 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800be0a:	69f8      	ldr	r0, [r7, #28]
 800be0c:	f7fe fc46 	bl	800a69c <tcp_abort>
            goto aborted;
 800be10:	e091      	b.n	800bf36 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00c      	beq.n	800be36 <tcp_input+0x656>
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	6918      	ldr	r0, [r3, #16]
 800be26:	4b39      	ldr	r3, [pc, #228]	@ (800bf0c <tcp_input+0x72c>)
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	2300      	movs	r3, #0
 800be2c:	69f9      	ldr	r1, [r7, #28]
 800be2e:	47a0      	blx	r4
 800be30:	4603      	mov	r3, r0
 800be32:	74fb      	strb	r3, [r7, #19]
 800be34:	e008      	b.n	800be48 <tcp_input+0x668>
 800be36:	4b35      	ldr	r3, [pc, #212]	@ (800bf0c <tcp_input+0x72c>)
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	2300      	movs	r3, #0
 800be3c:	69f9      	ldr	r1, [r7, #28]
 800be3e:	2000      	movs	r0, #0
 800be40:	f7ff f95e 	bl	800b100 <tcp_recv_null>
 800be44:	4603      	mov	r3, r0
 800be46:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800be48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be4c:	f113 0f0d 	cmn.w	r3, #13
 800be50:	d053      	beq.n	800befa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800be52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d003      	beq.n	800be62 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800be5a:	4b2c      	ldr	r3, [pc, #176]	@ (800bf0c <tcp_input+0x72c>)
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800be62:	4b2b      	ldr	r3, [pc, #172]	@ (800bf10 <tcp_input+0x730>)
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	f003 0320 	and.w	r3, r3, #32
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d030      	beq.n	800bed0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800be6e:	69fb      	ldr	r3, [r7, #28]
 800be70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be72:	2b00      	cmp	r3, #0
 800be74:	d009      	beq.n	800be8a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be7a:	7b5a      	ldrb	r2, [r3, #13]
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be80:	f042 0220 	orr.w	r2, r2, #32
 800be84:	b2d2      	uxtb	r2, r2
 800be86:	735a      	strb	r2, [r3, #13]
 800be88:	e022      	b.n	800bed0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be8e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800be92:	d005      	beq.n	800bea0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be98:	3301      	adds	r3, #1
 800be9a:	b29a      	uxth	r2, r3
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00b      	beq.n	800bec2 <tcp_input+0x6e2>
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	6918      	ldr	r0, [r3, #16]
 800beb4:	2300      	movs	r3, #0
 800beb6:	2200      	movs	r2, #0
 800beb8:	69f9      	ldr	r1, [r7, #28]
 800beba:	47a0      	blx	r4
 800bebc:	4603      	mov	r3, r0
 800bebe:	74fb      	strb	r3, [r7, #19]
 800bec0:	e001      	b.n	800bec6 <tcp_input+0x6e6>
 800bec2:	2300      	movs	r3, #0
 800bec4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bec6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800beca:	f113 0f0d 	cmn.w	r3, #13
 800bece:	d016      	beq.n	800befe <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800bed0:	4b13      	ldr	r3, [pc, #76]	@ (800bf20 <tcp_input+0x740>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bed6:	69f8      	ldr	r0, [r7, #28]
 800bed8:	f000 f88e 	bl	800bff8 <tcp_input_delayed_close>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d128      	bne.n	800bf34 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800bee2:	69f8      	ldr	r0, [r7, #28]
 800bee4:	f002 fac2 	bl	800e46c <tcp_output>
 800bee8:	e025      	b.n	800bf36 <tcp_input+0x756>
        goto aborted;
 800beea:	bf00      	nop
 800beec:	e023      	b.n	800bf36 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800beee:	bf00      	nop
 800bef0:	e021      	b.n	800bf36 <tcp_input+0x756>
              goto aborted;
 800bef2:	bf00      	nop
 800bef4:	e01f      	b.n	800bf36 <tcp_input+0x756>
          goto aborted;
 800bef6:	bf00      	nop
 800bef8:	e01d      	b.n	800bf36 <tcp_input+0x756>
            goto aborted;
 800befa:	bf00      	nop
 800befc:	e01b      	b.n	800bf36 <tcp_input+0x756>
              goto aborted;
 800befe:	bf00      	nop
 800bf00:	e019      	b.n	800bf36 <tcp_input+0x756>
 800bf02:	bf00      	nop
 800bf04:	200089b4 	.word	0x200089b4
 800bf08:	200089c4 	.word	0x200089c4
 800bf0c:	200089e4 	.word	0x200089e4
 800bf10:	200089e1 	.word	0x200089e1
 800bf14:	200089dc 	.word	0x200089dc
 800bf18:	200089e0 	.word	0x200089e0
 800bf1c:	200089de 	.word	0x200089de
 800bf20:	200089e8 	.word	0x200089e8
 800bf24:	200089a8 	.word	0x200089a8
 800bf28:	08014d8c 	.word	0x08014d8c
 800bf2c:	08014f40 	.word	0x08014f40
 800bf30:	08014dd8 	.word	0x08014dd8
          goto aborted;
 800bf34:	bf00      	nop
    tcp_input_pcb = NULL;
 800bf36:	4b27      	ldr	r3, [pc, #156]	@ (800bfd4 <tcp_input+0x7f4>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800bf3c:	4b26      	ldr	r3, [pc, #152]	@ (800bfd8 <tcp_input+0x7f8>)
 800bf3e:	2200      	movs	r2, #0
 800bf40:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800bf42:	4b26      	ldr	r3, [pc, #152]	@ (800bfdc <tcp_input+0x7fc>)
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d03f      	beq.n	800bfca <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800bf4a:	4b24      	ldr	r3, [pc, #144]	@ (800bfdc <tcp_input+0x7fc>)
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fd fd7a 	bl	8009a48 <pbuf_free>
      inseg.p = NULL;
 800bf54:	4b21      	ldr	r3, [pc, #132]	@ (800bfdc <tcp_input+0x7fc>)
 800bf56:	2200      	movs	r2, #0
 800bf58:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800bf5a:	e036      	b.n	800bfca <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bf5c:	4b20      	ldr	r3, [pc, #128]	@ (800bfe0 <tcp_input+0x800>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	899b      	ldrh	r3, [r3, #12]
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fc fa11 	bl	800838c <lwip_htons>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	f003 0304 	and.w	r3, r3, #4
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d118      	bne.n	800bfa8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf76:	4b1b      	ldr	r3, [pc, #108]	@ (800bfe4 <tcp_input+0x804>)
 800bf78:	6819      	ldr	r1, [r3, #0]
 800bf7a:	4b1b      	ldr	r3, [pc, #108]	@ (800bfe8 <tcp_input+0x808>)
 800bf7c:	881b      	ldrh	r3, [r3, #0]
 800bf7e:	461a      	mov	r2, r3
 800bf80:	4b1a      	ldr	r3, [pc, #104]	@ (800bfec <tcp_input+0x80c>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf86:	4b16      	ldr	r3, [pc, #88]	@ (800bfe0 <tcp_input+0x800>)
 800bf88:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf8a:	885b      	ldrh	r3, [r3, #2]
 800bf8c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf8e:	4a14      	ldr	r2, [pc, #80]	@ (800bfe0 <tcp_input+0x800>)
 800bf90:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf92:	8812      	ldrh	r2, [r2, #0]
 800bf94:	b292      	uxth	r2, r2
 800bf96:	9202      	str	r2, [sp, #8]
 800bf98:	9301      	str	r3, [sp, #4]
 800bf9a:	4b15      	ldr	r3, [pc, #84]	@ (800bff0 <tcp_input+0x810>)
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	4b15      	ldr	r3, [pc, #84]	@ (800bff4 <tcp_input+0x814>)
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	f003 f816 	bl	800efd4 <tcp_rst>
    pbuf_free(p);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7fd fd4d 	bl	8009a48 <pbuf_free>
  return;
 800bfae:	e00c      	b.n	800bfca <tcp_input+0x7ea>
    goto dropped;
 800bfb0:	bf00      	nop
 800bfb2:	e006      	b.n	800bfc2 <tcp_input+0x7e2>
    goto dropped;
 800bfb4:	bf00      	nop
 800bfb6:	e004      	b.n	800bfc2 <tcp_input+0x7e2>
    goto dropped;
 800bfb8:	bf00      	nop
 800bfba:	e002      	b.n	800bfc2 <tcp_input+0x7e2>
      goto dropped;
 800bfbc:	bf00      	nop
 800bfbe:	e000      	b.n	800bfc2 <tcp_input+0x7e2>
      goto dropped;
 800bfc0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7fd fd40 	bl	8009a48 <pbuf_free>
 800bfc8:	e000      	b.n	800bfcc <tcp_input+0x7ec>
  return;
 800bfca:	bf00      	nop
}
 800bfcc:	3724      	adds	r7, #36	@ 0x24
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd90      	pop	{r4, r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	200089e8 	.word	0x200089e8
 800bfd8:	200089e4 	.word	0x200089e4
 800bfdc:	200089b4 	.word	0x200089b4
 800bfe0:	200089c4 	.word	0x200089c4
 800bfe4:	200089d8 	.word	0x200089d8
 800bfe8:	200089de 	.word	0x200089de
 800bfec:	200089d4 	.word	0x200089d4
 800bff0:	2000567c 	.word	0x2000567c
 800bff4:	20005680 	.word	0x20005680

0800bff8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d106      	bne.n	800c014 <tcp_input_delayed_close+0x1c>
 800c006:	4b17      	ldr	r3, [pc, #92]	@ (800c064 <tcp_input_delayed_close+0x6c>)
 800c008:	f240 225a 	movw	r2, #602	@ 0x25a
 800c00c:	4916      	ldr	r1, [pc, #88]	@ (800c068 <tcp_input_delayed_close+0x70>)
 800c00e:	4817      	ldr	r0, [pc, #92]	@ (800c06c <tcp_input_delayed_close+0x74>)
 800c010:	f006 fc40 	bl	8012894 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c014:	4b16      	ldr	r3, [pc, #88]	@ (800c070 <tcp_input_delayed_close+0x78>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	f003 0310 	and.w	r3, r3, #16
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d01c      	beq.n	800c05a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	8b5b      	ldrh	r3, [r3, #26]
 800c024:	f003 0310 	and.w	r3, r3, #16
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10d      	bne.n	800c048 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c032:	2b00      	cmp	r3, #0
 800c034:	d008      	beq.n	800c048 <tcp_input_delayed_close+0x50>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	6912      	ldr	r2, [r2, #16]
 800c040:	f06f 010e 	mvn.w	r1, #14
 800c044:	4610      	mov	r0, r2
 800c046:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c048:	6879      	ldr	r1, [r7, #4]
 800c04a:	480a      	ldr	r0, [pc, #40]	@ (800c074 <tcp_input_delayed_close+0x7c>)
 800c04c:	f7ff fa50 	bl	800b4f0 <tcp_pcb_remove>
    tcp_free(pcb);
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7fe f83b 	bl	800a0cc <tcp_free>
    return 1;
 800c056:	2301      	movs	r3, #1
 800c058:	e000      	b.n	800c05c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	08014d8c 	.word	0x08014d8c
 800c068:	08014f5c 	.word	0x08014f5c
 800c06c:	08014dd8 	.word	0x08014dd8
 800c070:	200089e1 	.word	0x200089e1
 800c074:	200089a8 	.word	0x200089a8

0800c078 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c078:	b590      	push	{r4, r7, lr}
 800c07a:	b08b      	sub	sp, #44	@ 0x2c
 800c07c:	af04      	add	r7, sp, #16
 800c07e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c080:	4b6f      	ldr	r3, [pc, #444]	@ (800c240 <tcp_listen_input+0x1c8>)
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	f003 0304 	and.w	r3, r3, #4
 800c088:	2b00      	cmp	r3, #0
 800c08a:	f040 80d2 	bne.w	800c232 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d106      	bne.n	800c0a2 <tcp_listen_input+0x2a>
 800c094:	4b6b      	ldr	r3, [pc, #428]	@ (800c244 <tcp_listen_input+0x1cc>)
 800c096:	f240 2281 	movw	r2, #641	@ 0x281
 800c09a:	496b      	ldr	r1, [pc, #428]	@ (800c248 <tcp_listen_input+0x1d0>)
 800c09c:	486b      	ldr	r0, [pc, #428]	@ (800c24c <tcp_listen_input+0x1d4>)
 800c09e:	f006 fbf9 	bl	8012894 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c0a2:	4b67      	ldr	r3, [pc, #412]	@ (800c240 <tcp_listen_input+0x1c8>)
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	f003 0310 	and.w	r3, r3, #16
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d019      	beq.n	800c0e2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0ae:	4b68      	ldr	r3, [pc, #416]	@ (800c250 <tcp_listen_input+0x1d8>)
 800c0b0:	6819      	ldr	r1, [r3, #0]
 800c0b2:	4b68      	ldr	r3, [pc, #416]	@ (800c254 <tcp_listen_input+0x1dc>)
 800c0b4:	881b      	ldrh	r3, [r3, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	4b67      	ldr	r3, [pc, #412]	@ (800c258 <tcp_listen_input+0x1e0>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0be:	4b67      	ldr	r3, [pc, #412]	@ (800c25c <tcp_listen_input+0x1e4>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0c2:	885b      	ldrh	r3, [r3, #2]
 800c0c4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0c6:	4a65      	ldr	r2, [pc, #404]	@ (800c25c <tcp_listen_input+0x1e4>)
 800c0c8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0ca:	8812      	ldrh	r2, [r2, #0]
 800c0cc:	b292      	uxth	r2, r2
 800c0ce:	9202      	str	r2, [sp, #8]
 800c0d0:	9301      	str	r3, [sp, #4]
 800c0d2:	4b63      	ldr	r3, [pc, #396]	@ (800c260 <tcp_listen_input+0x1e8>)
 800c0d4:	9300      	str	r3, [sp, #0]
 800c0d6:	4b63      	ldr	r3, [pc, #396]	@ (800c264 <tcp_listen_input+0x1ec>)
 800c0d8:	4602      	mov	r2, r0
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f002 ff7a 	bl	800efd4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c0e0:	e0a9      	b.n	800c236 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c0e2:	4b57      	ldr	r3, [pc, #348]	@ (800c240 <tcp_listen_input+0x1c8>)
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	f003 0302 	and.w	r3, r3, #2
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f000 80a3 	beq.w	800c236 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	7d5b      	ldrb	r3, [r3, #21]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7ff f927 	bl	800b348 <tcp_alloc>
 800c0fa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d111      	bne.n	800c126 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	699b      	ldr	r3, [r3, #24]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00a      	beq.n	800c120 <tcp_listen_input+0xa8>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	699b      	ldr	r3, [r3, #24]
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	6910      	ldr	r0, [r2, #16]
 800c112:	f04f 32ff 	mov.w	r2, #4294967295
 800c116:	2100      	movs	r1, #0
 800c118:	4798      	blx	r3
 800c11a:	4603      	mov	r3, r0
 800c11c:	73bb      	strb	r3, [r7, #14]
      return;
 800c11e:	e08b      	b.n	800c238 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c120:	23f0      	movs	r3, #240	@ 0xf0
 800c122:	73bb      	strb	r3, [r7, #14]
      return;
 800c124:	e088      	b.n	800c238 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c126:	4b50      	ldr	r3, [pc, #320]	@ (800c268 <tcp_listen_input+0x1f0>)
 800c128:	695a      	ldr	r2, [r3, #20]
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c12e:	4b4e      	ldr	r3, [pc, #312]	@ (800c268 <tcp_listen_input+0x1f0>)
 800c130:	691a      	ldr	r2, [r3, #16]
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	8ada      	ldrh	r2, [r3, #22]
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c13e:	4b47      	ldr	r3, [pc, #284]	@ (800c25c <tcp_listen_input+0x1e4>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	881b      	ldrh	r3, [r3, #0]
 800c144:	b29a      	uxth	r2, r3
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	2203      	movs	r2, #3
 800c14e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c150:	4b41      	ldr	r3, [pc, #260]	@ (800c258 <tcp_listen_input+0x1e0>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	1c5a      	adds	r2, r3, #1
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800c162:	6978      	ldr	r0, [r7, #20]
 800c164:	f7ff fa58 	bl	800b618 <tcp_next_iss>
 800c168:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	693a      	ldr	r2, [r7, #16]
 800c16e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	693a      	ldr	r2, [r7, #16]
 800c174:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	693a      	ldr	r2, [r7, #16]
 800c17a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	693a      	ldr	r2, [r7, #16]
 800c180:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c182:	4b35      	ldr	r3, [pc, #212]	@ (800c258 <tcp_listen_input+0x1e0>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	1e5a      	subs	r2, r3, #1
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	691a      	ldr	r2, [r3, #16]
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	7a5b      	ldrb	r3, [r3, #9]
 800c19e:	f003 030c 	and.w	r3, r3, #12
 800c1a2:	b2da      	uxtb	r2, r3
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	7a1a      	ldrb	r2, [r3, #8]
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c1b0:	4b2e      	ldr	r3, [pc, #184]	@ (800c26c <tcp_listen_input+0x1f4>)
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	60da      	str	r2, [r3, #12]
 800c1b8:	4a2c      	ldr	r2, [pc, #176]	@ (800c26c <tcp_listen_input+0x1f4>)
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	6013      	str	r3, [r2, #0]
 800c1be:	f003 f8cb 	bl	800f358 <tcp_timer_needed>
 800c1c2:	4b2b      	ldr	r3, [pc, #172]	@ (800c270 <tcp_listen_input+0x1f8>)
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c1c8:	6978      	ldr	r0, [r7, #20]
 800c1ca:	f001 fd8b 	bl	800dce4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c1ce:	4b23      	ldr	r3, [pc, #140]	@ (800c25c <tcp_listen_input+0x1e4>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	89db      	ldrh	r3, [r3, #14]
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	3304      	adds	r3, #4
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f004 ffdf 	bl	80111b4 <ip4_route>
 800c1f6:	4601      	mov	r1, r0
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	4620      	mov	r0, r4
 800c200:	f7ff fa30 	bl	800b664 <tcp_eff_send_mss_netif>
 800c204:	4603      	mov	r3, r0
 800c206:	461a      	mov	r2, r3
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c20c:	2112      	movs	r1, #18
 800c20e:	6978      	ldr	r0, [r7, #20]
 800c210:	f002 f83e 	bl	800e290 <tcp_enqueue_flags>
 800c214:	4603      	mov	r3, r0
 800c216:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d004      	beq.n	800c22a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c220:	2100      	movs	r1, #0
 800c222:	6978      	ldr	r0, [r7, #20]
 800c224:	f7fe f97c 	bl	800a520 <tcp_abandon>
      return;
 800c228:	e006      	b.n	800c238 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c22a:	6978      	ldr	r0, [r7, #20]
 800c22c:	f002 f91e 	bl	800e46c <tcp_output>
  return;
 800c230:	e001      	b.n	800c236 <tcp_listen_input+0x1be>
    return;
 800c232:	bf00      	nop
 800c234:	e000      	b.n	800c238 <tcp_listen_input+0x1c0>
  return;
 800c236:	bf00      	nop
}
 800c238:	371c      	adds	r7, #28
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd90      	pop	{r4, r7, pc}
 800c23e:	bf00      	nop
 800c240:	200089e0 	.word	0x200089e0
 800c244:	08014d8c 	.word	0x08014d8c
 800c248:	08014f84 	.word	0x08014f84
 800c24c:	08014dd8 	.word	0x08014dd8
 800c250:	200089d8 	.word	0x200089d8
 800c254:	200089de 	.word	0x200089de
 800c258:	200089d4 	.word	0x200089d4
 800c25c:	200089c4 	.word	0x200089c4
 800c260:	2000567c 	.word	0x2000567c
 800c264:	20005680 	.word	0x20005680
 800c268:	2000566c 	.word	0x2000566c
 800c26c:	200089a8 	.word	0x200089a8
 800c270:	200089b0 	.word	0x200089b0

0800c274 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b086      	sub	sp, #24
 800c278:	af04      	add	r7, sp, #16
 800c27a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c27c:	4b2f      	ldr	r3, [pc, #188]	@ (800c33c <tcp_timewait_input+0xc8>)
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	f003 0304 	and.w	r3, r3, #4
 800c284:	2b00      	cmp	r3, #0
 800c286:	d153      	bne.n	800c330 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d106      	bne.n	800c29c <tcp_timewait_input+0x28>
 800c28e:	4b2c      	ldr	r3, [pc, #176]	@ (800c340 <tcp_timewait_input+0xcc>)
 800c290:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800c294:	492b      	ldr	r1, [pc, #172]	@ (800c344 <tcp_timewait_input+0xd0>)
 800c296:	482c      	ldr	r0, [pc, #176]	@ (800c348 <tcp_timewait_input+0xd4>)
 800c298:	f006 fafc 	bl	8012894 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c29c:	4b27      	ldr	r3, [pc, #156]	@ (800c33c <tcp_timewait_input+0xc8>)
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	f003 0302 	and.w	r3, r3, #2
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d02a      	beq.n	800c2fe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c2a8:	4b28      	ldr	r3, [pc, #160]	@ (800c34c <tcp_timewait_input+0xd8>)
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b0:	1ad3      	subs	r3, r2, r3
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	db2d      	blt.n	800c312 <tcp_timewait_input+0x9e>
 800c2b6:	4b25      	ldr	r3, [pc, #148]	@ (800c34c <tcp_timewait_input+0xd8>)
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2be:	6879      	ldr	r1, [r7, #4]
 800c2c0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c2c2:	440b      	add	r3, r1
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	dc23      	bgt.n	800c312 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2ca:	4b21      	ldr	r3, [pc, #132]	@ (800c350 <tcp_timewait_input+0xdc>)
 800c2cc:	6819      	ldr	r1, [r3, #0]
 800c2ce:	4b21      	ldr	r3, [pc, #132]	@ (800c354 <tcp_timewait_input+0xe0>)
 800c2d0:	881b      	ldrh	r3, [r3, #0]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	4b1d      	ldr	r3, [pc, #116]	@ (800c34c <tcp_timewait_input+0xd8>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2da:	4b1f      	ldr	r3, [pc, #124]	@ (800c358 <tcp_timewait_input+0xe4>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2de:	885b      	ldrh	r3, [r3, #2]
 800c2e0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2e2:	4a1d      	ldr	r2, [pc, #116]	@ (800c358 <tcp_timewait_input+0xe4>)
 800c2e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2e6:	8812      	ldrh	r2, [r2, #0]
 800c2e8:	b292      	uxth	r2, r2
 800c2ea:	9202      	str	r2, [sp, #8]
 800c2ec:	9301      	str	r3, [sp, #4]
 800c2ee:	4b1b      	ldr	r3, [pc, #108]	@ (800c35c <tcp_timewait_input+0xe8>)
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	4b1b      	ldr	r3, [pc, #108]	@ (800c360 <tcp_timewait_input+0xec>)
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f002 fe6c 	bl	800efd4 <tcp_rst>
      return;
 800c2fc:	e01b      	b.n	800c336 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c2fe:	4b0f      	ldr	r3, [pc, #60]	@ (800c33c <tcp_timewait_input+0xc8>)
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	f003 0301 	and.w	r3, r3, #1
 800c306:	2b00      	cmp	r3, #0
 800c308:	d003      	beq.n	800c312 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c30a:	4b16      	ldr	r3, [pc, #88]	@ (800c364 <tcp_timewait_input+0xf0>)
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c312:	4b10      	ldr	r3, [pc, #64]	@ (800c354 <tcp_timewait_input+0xe0>)
 800c314:	881b      	ldrh	r3, [r3, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00c      	beq.n	800c334 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	8b5b      	ldrh	r3, [r3, #26]
 800c31e:	f043 0302 	orr.w	r3, r3, #2
 800c322:	b29a      	uxth	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f002 f89f 	bl	800e46c <tcp_output>
  }
  return;
 800c32e:	e001      	b.n	800c334 <tcp_timewait_input+0xc0>
    return;
 800c330:	bf00      	nop
 800c332:	e000      	b.n	800c336 <tcp_timewait_input+0xc2>
  return;
 800c334:	bf00      	nop
}
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	200089e0 	.word	0x200089e0
 800c340:	08014d8c 	.word	0x08014d8c
 800c344:	08014fa4 	.word	0x08014fa4
 800c348:	08014dd8 	.word	0x08014dd8
 800c34c:	200089d4 	.word	0x200089d4
 800c350:	200089d8 	.word	0x200089d8
 800c354:	200089de 	.word	0x200089de
 800c358:	200089c4 	.word	0x200089c4
 800c35c:	2000567c 	.word	0x2000567c
 800c360:	20005680 	.word	0x20005680
 800c364:	2000899c 	.word	0x2000899c

0800c368 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c368:	b590      	push	{r4, r7, lr}
 800c36a:	b08d      	sub	sp, #52	@ 0x34
 800c36c:	af04      	add	r7, sp, #16
 800c36e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c370:	2300      	movs	r3, #0
 800c372:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c374:	2300      	movs	r3, #0
 800c376:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d106      	bne.n	800c38c <tcp_process+0x24>
 800c37e:	4b9d      	ldr	r3, [pc, #628]	@ (800c5f4 <tcp_process+0x28c>)
 800c380:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800c384:	499c      	ldr	r1, [pc, #624]	@ (800c5f8 <tcp_process+0x290>)
 800c386:	489d      	ldr	r0, [pc, #628]	@ (800c5fc <tcp_process+0x294>)
 800c388:	f006 fa84 	bl	8012894 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c38c:	4b9c      	ldr	r3, [pc, #624]	@ (800c600 <tcp_process+0x298>)
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	f003 0304 	and.w	r3, r3, #4
 800c394:	2b00      	cmp	r3, #0
 800c396:	d04e      	beq.n	800c436 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	7d1b      	ldrb	r3, [r3, #20]
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	d108      	bne.n	800c3b2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c3a4:	4b97      	ldr	r3, [pc, #604]	@ (800c604 <tcp_process+0x29c>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d123      	bne.n	800c3f4 <tcp_process+0x8c>
        acceptable = 1;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	76fb      	strb	r3, [r7, #27]
 800c3b0:	e020      	b.n	800c3f4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c3b6:	4b94      	ldr	r3, [pc, #592]	@ (800c608 <tcp_process+0x2a0>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d102      	bne.n	800c3c4 <tcp_process+0x5c>
        acceptable = 1;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	76fb      	strb	r3, [r7, #27]
 800c3c2:	e017      	b.n	800c3f4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c3c4:	4b90      	ldr	r3, [pc, #576]	@ (800c608 <tcp_process+0x2a0>)
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3cc:	1ad3      	subs	r3, r2, r3
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	db10      	blt.n	800c3f4 <tcp_process+0x8c>
 800c3d2:	4b8d      	ldr	r3, [pc, #564]	@ (800c608 <tcp_process+0x2a0>)
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3da:	6879      	ldr	r1, [r7, #4]
 800c3dc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c3de:	440b      	add	r3, r1
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	dc06      	bgt.n	800c3f4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	8b5b      	ldrh	r3, [r3, #26]
 800c3ea:	f043 0302 	orr.w	r3, r3, #2
 800c3ee:	b29a      	uxth	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c3f4:	7efb      	ldrb	r3, [r7, #27]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d01b      	beq.n	800c432 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	7d1b      	ldrb	r3, [r3, #20]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d106      	bne.n	800c410 <tcp_process+0xa8>
 800c402:	4b7c      	ldr	r3, [pc, #496]	@ (800c5f4 <tcp_process+0x28c>)
 800c404:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800c408:	4980      	ldr	r1, [pc, #512]	@ (800c60c <tcp_process+0x2a4>)
 800c40a:	487c      	ldr	r0, [pc, #496]	@ (800c5fc <tcp_process+0x294>)
 800c40c:	f006 fa42 	bl	8012894 <iprintf>
      recv_flags |= TF_RESET;
 800c410:	4b7f      	ldr	r3, [pc, #508]	@ (800c610 <tcp_process+0x2a8>)
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	f043 0308 	orr.w	r3, r3, #8
 800c418:	b2da      	uxtb	r2, r3
 800c41a:	4b7d      	ldr	r3, [pc, #500]	@ (800c610 <tcp_process+0x2a8>)
 800c41c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	8b5b      	ldrh	r3, [r3, #26]
 800c422:	f023 0301 	bic.w	r3, r3, #1
 800c426:	b29a      	uxth	r2, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c42c:	f06f 030d 	mvn.w	r3, #13
 800c430:	e37a      	b.n	800cb28 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c432:	2300      	movs	r3, #0
 800c434:	e378      	b.n	800cb28 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c436:	4b72      	ldr	r3, [pc, #456]	@ (800c600 <tcp_process+0x298>)
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	f003 0302 	and.w	r3, r3, #2
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d010      	beq.n	800c464 <tcp_process+0xfc>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	7d1b      	ldrb	r3, [r3, #20]
 800c446:	2b02      	cmp	r3, #2
 800c448:	d00c      	beq.n	800c464 <tcp_process+0xfc>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	7d1b      	ldrb	r3, [r3, #20]
 800c44e:	2b03      	cmp	r3, #3
 800c450:	d008      	beq.n	800c464 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	8b5b      	ldrh	r3, [r3, #26]
 800c456:	f043 0302 	orr.w	r3, r3, #2
 800c45a:	b29a      	uxth	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c460:	2300      	movs	r3, #0
 800c462:	e361      	b.n	800cb28 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	8b5b      	ldrh	r3, [r3, #26]
 800c468:	f003 0310 	and.w	r3, r3, #16
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d103      	bne.n	800c478 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c470:	4b68      	ldr	r3, [pc, #416]	@ (800c614 <tcp_process+0x2ac>)
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f001 fc2b 	bl	800dce4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	7d1b      	ldrb	r3, [r3, #20]
 800c492:	3b02      	subs	r3, #2
 800c494:	2b07      	cmp	r3, #7
 800c496:	f200 8337 	bhi.w	800cb08 <tcp_process+0x7a0>
 800c49a:	a201      	add	r2, pc, #4	@ (adr r2, 800c4a0 <tcp_process+0x138>)
 800c49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a0:	0800c4c1 	.word	0x0800c4c1
 800c4a4:	0800c6f1 	.word	0x0800c6f1
 800c4a8:	0800c869 	.word	0x0800c869
 800c4ac:	0800c893 	.word	0x0800c893
 800c4b0:	0800c9b7 	.word	0x0800c9b7
 800c4b4:	0800c869 	.word	0x0800c869
 800c4b8:	0800ca43 	.word	0x0800ca43
 800c4bc:	0800cad3 	.word	0x0800cad3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c4c0:	4b4f      	ldr	r3, [pc, #316]	@ (800c600 <tcp_process+0x298>)
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	f003 0310 	and.w	r3, r3, #16
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f000 80e4 	beq.w	800c696 <tcp_process+0x32e>
 800c4ce:	4b4c      	ldr	r3, [pc, #304]	@ (800c600 <tcp_process+0x298>)
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	f003 0302 	and.w	r3, r3, #2
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f000 80dd 	beq.w	800c696 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4e0:	1c5a      	adds	r2, r3, #1
 800c4e2:	4b48      	ldr	r3, [pc, #288]	@ (800c604 <tcp_process+0x29c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	f040 80d5 	bne.w	800c696 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c4ec:	4b46      	ldr	r3, [pc, #280]	@ (800c608 <tcp_process+0x2a0>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	1c5a      	adds	r2, r3, #1
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800c4fe:	4b41      	ldr	r3, [pc, #260]	@ (800c604 <tcp_process+0x29c>)
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c506:	4b44      	ldr	r3, [pc, #272]	@ (800c618 <tcp_process+0x2b0>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	89db      	ldrh	r3, [r3, #14]
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c520:	4b39      	ldr	r3, [pc, #228]	@ (800c608 <tcp_process+0x2a0>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	1e5a      	subs	r2, r3, #1
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2204      	movs	r2, #4
 800c52e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	3304      	adds	r3, #4
 800c538:	4618      	mov	r0, r3
 800c53a:	f004 fe3b 	bl	80111b4 <ip4_route>
 800c53e:	4601      	mov	r1, r0
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	3304      	adds	r3, #4
 800c544:	461a      	mov	r2, r3
 800c546:	4620      	mov	r0, r4
 800c548:	f7ff f88c 	bl	800b664 <tcp_eff_send_mss_netif>
 800c54c:	4603      	mov	r3, r0
 800c54e:	461a      	mov	r2, r3
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c558:	009a      	lsls	r2, r3, #2
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c55e:	005b      	lsls	r3, r3, #1
 800c560:	f241 111c 	movw	r1, #4380	@ 0x111c
 800c564:	428b      	cmp	r3, r1
 800c566:	bf38      	it	cc
 800c568:	460b      	movcc	r3, r1
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d204      	bcs.n	800c578 <tcp_process+0x210>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	b29b      	uxth	r3, r3
 800c576:	e00d      	b.n	800c594 <tcp_process+0x22c>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c57c:	005b      	lsls	r3, r3, #1
 800c57e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800c582:	4293      	cmp	r3, r2
 800c584:	d904      	bls.n	800c590 <tcp_process+0x228>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c58a:	005b      	lsls	r3, r3, #1
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	e001      	b.n	800c594 <tcp_process+0x22c>
 800c590:	f241 131c 	movw	r3, #4380	@ 0x111c
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d106      	bne.n	800c5b2 <tcp_process+0x24a>
 800c5a4:	4b13      	ldr	r3, [pc, #76]	@ (800c5f4 <tcp_process+0x28c>)
 800c5a6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800c5aa:	491c      	ldr	r1, [pc, #112]	@ (800c61c <tcp_process+0x2b4>)
 800c5ac:	4813      	ldr	r0, [pc, #76]	@ (800c5fc <tcp_process+0x294>)
 800c5ae:	f006 f971 	bl	8012894 <iprintf>
        --pcb->snd_queuelen;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5c6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d12a      	bne.n	800c624 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5d2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d106      	bne.n	800c5e8 <tcp_process+0x280>
 800c5da:	4b06      	ldr	r3, [pc, #24]	@ (800c5f4 <tcp_process+0x28c>)
 800c5dc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800c5e0:	490f      	ldr	r1, [pc, #60]	@ (800c620 <tcp_process+0x2b8>)
 800c5e2:	4806      	ldr	r0, [pc, #24]	@ (800c5fc <tcp_process+0x294>)
 800c5e4:	f006 f956 	bl	8012894 <iprintf>
          pcb->unsent = rseg->next;
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c5f0:	e01c      	b.n	800c62c <tcp_process+0x2c4>
 800c5f2:	bf00      	nop
 800c5f4:	08014d8c 	.word	0x08014d8c
 800c5f8:	08014fc4 	.word	0x08014fc4
 800c5fc:	08014dd8 	.word	0x08014dd8
 800c600:	200089e0 	.word	0x200089e0
 800c604:	200089d8 	.word	0x200089d8
 800c608:	200089d4 	.word	0x200089d4
 800c60c:	08014fe0 	.word	0x08014fe0
 800c610:	200089e1 	.word	0x200089e1
 800c614:	2000899c 	.word	0x2000899c
 800c618:	200089c4 	.word	0x200089c4
 800c61c:	08015000 	.word	0x08015000
 800c620:	08015018 	.word	0x08015018
        } else {
          pcb->unacked = rseg->next;
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800c62c:	69f8      	ldr	r0, [r7, #28]
 800c62e:	f7fe fd22 	bl	800b076 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c636:	2b00      	cmp	r3, #0
 800c638:	d104      	bne.n	800c644 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c640:	861a      	strh	r2, [r3, #48]	@ 0x30
 800c642:	e006      	b.n	800c652 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00a      	beq.n	800c672 <tcp_process+0x30a>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	6910      	ldr	r0, [r2, #16]
 800c666:	2200      	movs	r2, #0
 800c668:	6879      	ldr	r1, [r7, #4]
 800c66a:	4798      	blx	r3
 800c66c:	4603      	mov	r3, r0
 800c66e:	76bb      	strb	r3, [r7, #26]
 800c670:	e001      	b.n	800c676 <tcp_process+0x30e>
 800c672:	2300      	movs	r3, #0
 800c674:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c676:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c67a:	f113 0f0d 	cmn.w	r3, #13
 800c67e:	d102      	bne.n	800c686 <tcp_process+0x31e>
          return ERR_ABRT;
 800c680:	f06f 030c 	mvn.w	r3, #12
 800c684:	e250      	b.n	800cb28 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	8b5b      	ldrh	r3, [r3, #26]
 800c68a:	f043 0302 	orr.w	r3, r3, #2
 800c68e:	b29a      	uxth	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c694:	e23a      	b.n	800cb0c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c696:	4b98      	ldr	r3, [pc, #608]	@ (800c8f8 <tcp_process+0x590>)
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	f003 0310 	and.w	r3, r3, #16
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f000 8234 	beq.w	800cb0c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6a4:	4b95      	ldr	r3, [pc, #596]	@ (800c8fc <tcp_process+0x594>)
 800c6a6:	6819      	ldr	r1, [r3, #0]
 800c6a8:	4b95      	ldr	r3, [pc, #596]	@ (800c900 <tcp_process+0x598>)
 800c6aa:	881b      	ldrh	r3, [r3, #0]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	4b95      	ldr	r3, [pc, #596]	@ (800c904 <tcp_process+0x59c>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c6b4:	4b94      	ldr	r3, [pc, #592]	@ (800c908 <tcp_process+0x5a0>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6b8:	885b      	ldrh	r3, [r3, #2]
 800c6ba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c6bc:	4a92      	ldr	r2, [pc, #584]	@ (800c908 <tcp_process+0x5a0>)
 800c6be:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6c0:	8812      	ldrh	r2, [r2, #0]
 800c6c2:	b292      	uxth	r2, r2
 800c6c4:	9202      	str	r2, [sp, #8]
 800c6c6:	9301      	str	r3, [sp, #4]
 800c6c8:	4b90      	ldr	r3, [pc, #576]	@ (800c90c <tcp_process+0x5a4>)
 800c6ca:	9300      	str	r3, [sp, #0]
 800c6cc:	4b90      	ldr	r3, [pc, #576]	@ (800c910 <tcp_process+0x5a8>)
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f002 fc7f 	bl	800efd4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c6dc:	2b05      	cmp	r3, #5
 800c6de:	f200 8215 	bhi.w	800cb0c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f002 fa4b 	bl	800eb84 <tcp_rexmit_rto>
      break;
 800c6ee:	e20d      	b.n	800cb0c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c6f0:	4b81      	ldr	r3, [pc, #516]	@ (800c8f8 <tcp_process+0x590>)
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	f003 0310 	and.w	r3, r3, #16
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f000 80a1 	beq.w	800c840 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c6fe:	4b7f      	ldr	r3, [pc, #508]	@ (800c8fc <tcp_process+0x594>)
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c706:	1ad3      	subs	r3, r2, r3
 800c708:	3b01      	subs	r3, #1
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	db7e      	blt.n	800c80c <tcp_process+0x4a4>
 800c70e:	4b7b      	ldr	r3, [pc, #492]	@ (800c8fc <tcp_process+0x594>)
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	2b00      	cmp	r3, #0
 800c71a:	dc77      	bgt.n	800c80c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2204      	movs	r2, #4
 800c720:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c726:	2b00      	cmp	r3, #0
 800c728:	d102      	bne.n	800c730 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c72a:	23fa      	movs	r3, #250	@ 0xfa
 800c72c:	76bb      	strb	r3, [r7, #26]
 800c72e:	e01d      	b.n	800c76c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d106      	bne.n	800c748 <tcp_process+0x3e0>
 800c73a:	4b76      	ldr	r3, [pc, #472]	@ (800c914 <tcp_process+0x5ac>)
 800c73c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800c740:	4975      	ldr	r1, [pc, #468]	@ (800c918 <tcp_process+0x5b0>)
 800c742:	4876      	ldr	r0, [pc, #472]	@ (800c91c <tcp_process+0x5b4>)
 800c744:	f006 f8a6 	bl	8012894 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c74c:	699b      	ldr	r3, [r3, #24]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00a      	beq.n	800c768 <tcp_process+0x400>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	6910      	ldr	r0, [r2, #16]
 800c75c:	2200      	movs	r2, #0
 800c75e:	6879      	ldr	r1, [r7, #4]
 800c760:	4798      	blx	r3
 800c762:	4603      	mov	r3, r0
 800c764:	76bb      	strb	r3, [r7, #26]
 800c766:	e001      	b.n	800c76c <tcp_process+0x404>
 800c768:	23f0      	movs	r3, #240	@ 0xf0
 800c76a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c76c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00a      	beq.n	800c78a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c774:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c778:	f113 0f0d 	cmn.w	r3, #13
 800c77c:	d002      	beq.n	800c784 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7fd ff8c 	bl	800a69c <tcp_abort>
            }
            return ERR_ABRT;
 800c784:	f06f 030c 	mvn.w	r3, #12
 800c788:	e1ce      	b.n	800cb28 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 fae0 	bl	800cd50 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c790:	4b63      	ldr	r3, [pc, #396]	@ (800c920 <tcp_process+0x5b8>)
 800c792:	881b      	ldrh	r3, [r3, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d005      	beq.n	800c7a4 <tcp_process+0x43c>
            recv_acked--;
 800c798:	4b61      	ldr	r3, [pc, #388]	@ (800c920 <tcp_process+0x5b8>)
 800c79a:	881b      	ldrh	r3, [r3, #0]
 800c79c:	3b01      	subs	r3, #1
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	4b5f      	ldr	r3, [pc, #380]	@ (800c920 <tcp_process+0x5b8>)
 800c7a2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c7a8:	009a      	lsls	r2, r3, #2
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c7ae:	005b      	lsls	r3, r3, #1
 800c7b0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800c7b4:	428b      	cmp	r3, r1
 800c7b6:	bf38      	it	cc
 800c7b8:	460b      	movcc	r3, r1
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d204      	bcs.n	800c7c8 <tcp_process+0x460>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	e00d      	b.n	800c7e4 <tcp_process+0x47c>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c7cc:	005b      	lsls	r3, r3, #1
 800c7ce:	f241 121c 	movw	r2, #4380	@ 0x111c
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d904      	bls.n	800c7e0 <tcp_process+0x478>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c7da:	005b      	lsls	r3, r3, #1
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	e001      	b.n	800c7e4 <tcp_process+0x47c>
 800c7e0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c7ea:	4b4e      	ldr	r3, [pc, #312]	@ (800c924 <tcp_process+0x5bc>)
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	f003 0320 	and.w	r3, r3, #32
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d037      	beq.n	800c866 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	8b5b      	ldrh	r3, [r3, #26]
 800c7fa:	f043 0302 	orr.w	r3, r3, #2
 800c7fe:	b29a      	uxth	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2207      	movs	r2, #7
 800c808:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c80a:	e02c      	b.n	800c866 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c80c:	4b3b      	ldr	r3, [pc, #236]	@ (800c8fc <tcp_process+0x594>)
 800c80e:	6819      	ldr	r1, [r3, #0]
 800c810:	4b3b      	ldr	r3, [pc, #236]	@ (800c900 <tcp_process+0x598>)
 800c812:	881b      	ldrh	r3, [r3, #0]
 800c814:	461a      	mov	r2, r3
 800c816:	4b3b      	ldr	r3, [pc, #236]	@ (800c904 <tcp_process+0x59c>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c81c:	4b3a      	ldr	r3, [pc, #232]	@ (800c908 <tcp_process+0x5a0>)
 800c81e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c820:	885b      	ldrh	r3, [r3, #2]
 800c822:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c824:	4a38      	ldr	r2, [pc, #224]	@ (800c908 <tcp_process+0x5a0>)
 800c826:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c828:	8812      	ldrh	r2, [r2, #0]
 800c82a:	b292      	uxth	r2, r2
 800c82c:	9202      	str	r2, [sp, #8]
 800c82e:	9301      	str	r3, [sp, #4]
 800c830:	4b36      	ldr	r3, [pc, #216]	@ (800c90c <tcp_process+0x5a4>)
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	4b36      	ldr	r3, [pc, #216]	@ (800c910 <tcp_process+0x5a8>)
 800c836:	4602      	mov	r2, r0
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f002 fbcb 	bl	800efd4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c83e:	e167      	b.n	800cb10 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c840:	4b2d      	ldr	r3, [pc, #180]	@ (800c8f8 <tcp_process+0x590>)
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	f003 0302 	and.w	r3, r3, #2
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f000 8161 	beq.w	800cb10 <tcp_process+0x7a8>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c852:	1e5a      	subs	r2, r3, #1
 800c854:	4b2b      	ldr	r3, [pc, #172]	@ (800c904 <tcp_process+0x59c>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	429a      	cmp	r2, r3
 800c85a:	f040 8159 	bne.w	800cb10 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f002 f9b2 	bl	800ebc8 <tcp_rexmit>
      break;
 800c864:	e154      	b.n	800cb10 <tcp_process+0x7a8>
 800c866:	e153      	b.n	800cb10 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 fa71 	bl	800cd50 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c86e:	4b2d      	ldr	r3, [pc, #180]	@ (800c924 <tcp_process+0x5bc>)
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	f003 0320 	and.w	r3, r3, #32
 800c876:	2b00      	cmp	r3, #0
 800c878:	f000 814c 	beq.w	800cb14 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	8b5b      	ldrh	r3, [r3, #26]
 800c880:	f043 0302 	orr.w	r3, r3, #2
 800c884:	b29a      	uxth	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2207      	movs	r2, #7
 800c88e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c890:	e140      	b.n	800cb14 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 fa5c 	bl	800cd50 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c898:	4b22      	ldr	r3, [pc, #136]	@ (800c924 <tcp_process+0x5bc>)
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	f003 0320 	and.w	r3, r3, #32
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d071      	beq.n	800c988 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c8a4:	4b14      	ldr	r3, [pc, #80]	@ (800c8f8 <tcp_process+0x590>)
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	f003 0310 	and.w	r3, r3, #16
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d060      	beq.n	800c972 <tcp_process+0x60a>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c8b4:	4b11      	ldr	r3, [pc, #68]	@ (800c8fc <tcp_process+0x594>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d15a      	bne.n	800c972 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d156      	bne.n	800c972 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	8b5b      	ldrh	r3, [r3, #26]
 800c8c8:	f043 0302 	orr.w	r3, r3, #2
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f7fe fdbc 	bl	800b450 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c8d8:	4b13      	ldr	r3, [pc, #76]	@ (800c928 <tcp_process+0x5c0>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d105      	bne.n	800c8ee <tcp_process+0x586>
 800c8e2:	4b11      	ldr	r3, [pc, #68]	@ (800c928 <tcp_process+0x5c0>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	68db      	ldr	r3, [r3, #12]
 800c8e8:	4a0f      	ldr	r2, [pc, #60]	@ (800c928 <tcp_process+0x5c0>)
 800c8ea:	6013      	str	r3, [r2, #0]
 800c8ec:	e02e      	b.n	800c94c <tcp_process+0x5e4>
 800c8ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c928 <tcp_process+0x5c0>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	617b      	str	r3, [r7, #20]
 800c8f4:	e027      	b.n	800c946 <tcp_process+0x5de>
 800c8f6:	bf00      	nop
 800c8f8:	200089e0 	.word	0x200089e0
 800c8fc:	200089d8 	.word	0x200089d8
 800c900:	200089de 	.word	0x200089de
 800c904:	200089d4 	.word	0x200089d4
 800c908:	200089c4 	.word	0x200089c4
 800c90c:	2000567c 	.word	0x2000567c
 800c910:	20005680 	.word	0x20005680
 800c914:	08014d8c 	.word	0x08014d8c
 800c918:	0801502c 	.word	0x0801502c
 800c91c:	08014dd8 	.word	0x08014dd8
 800c920:	200089dc 	.word	0x200089dc
 800c924:	200089e1 	.word	0x200089e1
 800c928:	200089a8 	.word	0x200089a8
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	68db      	ldr	r3, [r3, #12]
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	429a      	cmp	r2, r3
 800c934:	d104      	bne.n	800c940 <tcp_process+0x5d8>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	68da      	ldr	r2, [r3, #12]
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	60da      	str	r2, [r3, #12]
 800c93e:	e005      	b.n	800c94c <tcp_process+0x5e4>
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	617b      	str	r3, [r7, #20]
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d1ef      	bne.n	800c92c <tcp_process+0x5c4>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	60da      	str	r2, [r3, #12]
 800c952:	4b77      	ldr	r3, [pc, #476]	@ (800cb30 <tcp_process+0x7c8>)
 800c954:	2201      	movs	r2, #1
 800c956:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	220a      	movs	r2, #10
 800c95c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c95e:	4b75      	ldr	r3, [pc, #468]	@ (800cb34 <tcp_process+0x7cc>)
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	60da      	str	r2, [r3, #12]
 800c966:	4a73      	ldr	r2, [pc, #460]	@ (800cb34 <tcp_process+0x7cc>)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6013      	str	r3, [r2, #0]
 800c96c:	f002 fcf4 	bl	800f358 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c970:	e0d2      	b.n	800cb18 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	8b5b      	ldrh	r3, [r3, #26]
 800c976:	f043 0302 	orr.w	r3, r3, #2
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2208      	movs	r2, #8
 800c984:	751a      	strb	r2, [r3, #20]
      break;
 800c986:	e0c7      	b.n	800cb18 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c988:	4b6b      	ldr	r3, [pc, #428]	@ (800cb38 <tcp_process+0x7d0>)
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	f003 0310 	and.w	r3, r3, #16
 800c990:	2b00      	cmp	r3, #0
 800c992:	f000 80c1 	beq.w	800cb18 <tcp_process+0x7b0>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c99a:	4b68      	ldr	r3, [pc, #416]	@ (800cb3c <tcp_process+0x7d4>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	f040 80ba 	bne.w	800cb18 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f040 80b5 	bne.w	800cb18 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2206      	movs	r2, #6
 800c9b2:	751a      	strb	r2, [r3, #20]
      break;
 800c9b4:	e0b0      	b.n	800cb18 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 f9ca 	bl	800cd50 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c9bc:	4b60      	ldr	r3, [pc, #384]	@ (800cb40 <tcp_process+0x7d8>)
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	f003 0320 	and.w	r3, r3, #32
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f000 80a9 	beq.w	800cb1c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	8b5b      	ldrh	r3, [r3, #26]
 800c9ce:	f043 0302 	orr.w	r3, r3, #2
 800c9d2:	b29a      	uxth	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7fe fd39 	bl	800b450 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c9de:	4b59      	ldr	r3, [pc, #356]	@ (800cb44 <tcp_process+0x7dc>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d105      	bne.n	800c9f4 <tcp_process+0x68c>
 800c9e8:	4b56      	ldr	r3, [pc, #344]	@ (800cb44 <tcp_process+0x7dc>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	4a55      	ldr	r2, [pc, #340]	@ (800cb44 <tcp_process+0x7dc>)
 800c9f0:	6013      	str	r3, [r2, #0]
 800c9f2:	e013      	b.n	800ca1c <tcp_process+0x6b4>
 800c9f4:	4b53      	ldr	r3, [pc, #332]	@ (800cb44 <tcp_process+0x7dc>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	613b      	str	r3, [r7, #16]
 800c9fa:	e00c      	b.n	800ca16 <tcp_process+0x6ae>
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d104      	bne.n	800ca10 <tcp_process+0x6a8>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	68da      	ldr	r2, [r3, #12]
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	60da      	str	r2, [r3, #12]
 800ca0e:	e005      	b.n	800ca1c <tcp_process+0x6b4>
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	613b      	str	r3, [r7, #16]
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d1ef      	bne.n	800c9fc <tcp_process+0x694>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	60da      	str	r2, [r3, #12]
 800ca22:	4b43      	ldr	r3, [pc, #268]	@ (800cb30 <tcp_process+0x7c8>)
 800ca24:	2201      	movs	r2, #1
 800ca26:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	220a      	movs	r2, #10
 800ca2c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ca2e:	4b41      	ldr	r3, [pc, #260]	@ (800cb34 <tcp_process+0x7cc>)
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	60da      	str	r2, [r3, #12]
 800ca36:	4a3f      	ldr	r2, [pc, #252]	@ (800cb34 <tcp_process+0x7cc>)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6013      	str	r3, [r2, #0]
 800ca3c:	f002 fc8c 	bl	800f358 <tcp_timer_needed>
      }
      break;
 800ca40:	e06c      	b.n	800cb1c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f984 	bl	800cd50 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ca48:	4b3b      	ldr	r3, [pc, #236]	@ (800cb38 <tcp_process+0x7d0>)
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	f003 0310 	and.w	r3, r3, #16
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d065      	beq.n	800cb20 <tcp_process+0x7b8>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ca58:	4b38      	ldr	r3, [pc, #224]	@ (800cb3c <tcp_process+0x7d4>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d15f      	bne.n	800cb20 <tcp_process+0x7b8>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d15b      	bne.n	800cb20 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f7fe fcf1 	bl	800b450 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ca6e:	4b35      	ldr	r3, [pc, #212]	@ (800cb44 <tcp_process+0x7dc>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d105      	bne.n	800ca84 <tcp_process+0x71c>
 800ca78:	4b32      	ldr	r3, [pc, #200]	@ (800cb44 <tcp_process+0x7dc>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	4a31      	ldr	r2, [pc, #196]	@ (800cb44 <tcp_process+0x7dc>)
 800ca80:	6013      	str	r3, [r2, #0]
 800ca82:	e013      	b.n	800caac <tcp_process+0x744>
 800ca84:	4b2f      	ldr	r3, [pc, #188]	@ (800cb44 <tcp_process+0x7dc>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	60fb      	str	r3, [r7, #12]
 800ca8a:	e00c      	b.n	800caa6 <tcp_process+0x73e>
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d104      	bne.n	800caa0 <tcp_process+0x738>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	68da      	ldr	r2, [r3, #12]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	60da      	str	r2, [r3, #12]
 800ca9e:	e005      	b.n	800caac <tcp_process+0x744>
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	60fb      	str	r3, [r7, #12]
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1ef      	bne.n	800ca8c <tcp_process+0x724>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	60da      	str	r2, [r3, #12]
 800cab2:	4b1f      	ldr	r3, [pc, #124]	@ (800cb30 <tcp_process+0x7c8>)
 800cab4:	2201      	movs	r2, #1
 800cab6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	220a      	movs	r2, #10
 800cabc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cabe:	4b1d      	ldr	r3, [pc, #116]	@ (800cb34 <tcp_process+0x7cc>)
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	60da      	str	r2, [r3, #12]
 800cac6:	4a1b      	ldr	r2, [pc, #108]	@ (800cb34 <tcp_process+0x7cc>)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6013      	str	r3, [r2, #0]
 800cacc:	f002 fc44 	bl	800f358 <tcp_timer_needed>
      }
      break;
 800cad0:	e026      	b.n	800cb20 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 f93c 	bl	800cd50 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cad8:	4b17      	ldr	r3, [pc, #92]	@ (800cb38 <tcp_process+0x7d0>)
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	f003 0310 	and.w	r3, r3, #16
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d01f      	beq.n	800cb24 <tcp_process+0x7bc>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cae8:	4b14      	ldr	r3, [pc, #80]	@ (800cb3c <tcp_process+0x7d4>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	429a      	cmp	r2, r3
 800caee:	d119      	bne.n	800cb24 <tcp_process+0x7bc>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d115      	bne.n	800cb24 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800caf8:	4b11      	ldr	r3, [pc, #68]	@ (800cb40 <tcp_process+0x7d8>)
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	f043 0310 	orr.w	r3, r3, #16
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	4b0f      	ldr	r3, [pc, #60]	@ (800cb40 <tcp_process+0x7d8>)
 800cb04:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cb06:	e00d      	b.n	800cb24 <tcp_process+0x7bc>
    default:
      break;
 800cb08:	bf00      	nop
 800cb0a:	e00c      	b.n	800cb26 <tcp_process+0x7be>
      break;
 800cb0c:	bf00      	nop
 800cb0e:	e00a      	b.n	800cb26 <tcp_process+0x7be>
      break;
 800cb10:	bf00      	nop
 800cb12:	e008      	b.n	800cb26 <tcp_process+0x7be>
      break;
 800cb14:	bf00      	nop
 800cb16:	e006      	b.n	800cb26 <tcp_process+0x7be>
      break;
 800cb18:	bf00      	nop
 800cb1a:	e004      	b.n	800cb26 <tcp_process+0x7be>
      break;
 800cb1c:	bf00      	nop
 800cb1e:	e002      	b.n	800cb26 <tcp_process+0x7be>
      break;
 800cb20:	bf00      	nop
 800cb22:	e000      	b.n	800cb26 <tcp_process+0x7be>
      break;
 800cb24:	bf00      	nop
  }
  return ERR_OK;
 800cb26:	2300      	movs	r3, #0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3724      	adds	r7, #36	@ 0x24
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd90      	pop	{r4, r7, pc}
 800cb30:	200089b0 	.word	0x200089b0
 800cb34:	200089ac 	.word	0x200089ac
 800cb38:	200089e0 	.word	0x200089e0
 800cb3c:	200089d8 	.word	0x200089d8
 800cb40:	200089e1 	.word	0x200089e1
 800cb44:	200089a8 	.word	0x200089a8

0800cb48 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800cb48:	b590      	push	{r4, r7, lr}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d106      	bne.n	800cb66 <tcp_oos_insert_segment+0x1e>
 800cb58:	4b3b      	ldr	r3, [pc, #236]	@ (800cc48 <tcp_oos_insert_segment+0x100>)
 800cb5a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800cb5e:	493b      	ldr	r1, [pc, #236]	@ (800cc4c <tcp_oos_insert_segment+0x104>)
 800cb60:	483b      	ldr	r0, [pc, #236]	@ (800cc50 <tcp_oos_insert_segment+0x108>)
 800cb62:	f005 fe97 	bl	8012894 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	899b      	ldrh	r3, [r3, #12]
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fb fc0c 	bl	800838c <lwip_htons>
 800cb74:	4603      	mov	r3, r0
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	f003 0301 	and.w	r3, r3, #1
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d028      	beq.n	800cbd2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800cb80:	6838      	ldr	r0, [r7, #0]
 800cb82:	f7fe fa63 	bl	800b04c <tcp_segs_free>
    next = NULL;
 800cb86:	2300      	movs	r3, #0
 800cb88:	603b      	str	r3, [r7, #0]
 800cb8a:	e056      	b.n	800cc3a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	68db      	ldr	r3, [r3, #12]
 800cb90:	899b      	ldrh	r3, [r3, #12]
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fb fbf9 	bl	800838c <lwip_htons>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00d      	beq.n	800cbc2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	899b      	ldrh	r3, [r3, #12]
 800cbac:	b29c      	uxth	r4, r3
 800cbae:	2001      	movs	r0, #1
 800cbb0:	f7fb fbec 	bl	800838c <lwip_htons>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	4322      	orrs	r2, r4
 800cbbe:	b292      	uxth	r2, r2
 800cbc0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f7fe fa52 	bl	800b076 <tcp_seg_free>
    while (next &&
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00e      	beq.n	800cbf6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	891b      	ldrh	r3, [r3, #8]
 800cbdc:	461a      	mov	r2, r3
 800cbde:	4b1d      	ldr	r3, [pc, #116]	@ (800cc54 <tcp_oos_insert_segment+0x10c>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	441a      	add	r2, r3
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	6839      	ldr	r1, [r7, #0]
 800cbec:	8909      	ldrh	r1, [r1, #8]
 800cbee:	440b      	add	r3, r1
 800cbf0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	daca      	bge.n	800cb8c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d01e      	beq.n	800cc3a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	891b      	ldrh	r3, [r3, #8]
 800cc00:	461a      	mov	r2, r3
 800cc02:	4b14      	ldr	r3, [pc, #80]	@ (800cc54 <tcp_oos_insert_segment+0x10c>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	441a      	add	r2, r3
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	dd12      	ble.n	800cc3a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	4b0d      	ldr	r3, [pc, #52]	@ (800cc54 <tcp_oos_insert_segment+0x10c>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	1ad3      	subs	r3, r2, r3
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	685a      	ldr	r2, [r3, #4]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	891b      	ldrh	r3, [r3, #8]
 800cc32:	4619      	mov	r1, r3
 800cc34:	4610      	mov	r0, r2
 800cc36:	f7fc fd81 	bl	800973c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	683a      	ldr	r2, [r7, #0]
 800cc3e:	601a      	str	r2, [r3, #0]
}
 800cc40:	bf00      	nop
 800cc42:	3714      	adds	r7, #20
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd90      	pop	{r4, r7, pc}
 800cc48:	08014d8c 	.word	0x08014d8c
 800cc4c:	0801504c 	.word	0x0801504c
 800cc50:	08014dd8 	.word	0x08014dd8
 800cc54:	200089d4 	.word	0x200089d4

0800cc58 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cc58:	b5b0      	push	{r4, r5, r7, lr}
 800cc5a:	b086      	sub	sp, #24
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
 800cc64:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800cc66:	e03e      	b.n	800cce6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7fc ff6e 	bl	8009b58 <pbuf_clen>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cc86:	8a7a      	ldrh	r2, [r7, #18]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d906      	bls.n	800cc9a <tcp_free_acked_segments+0x42>
 800cc8c:	4b2a      	ldr	r3, [pc, #168]	@ (800cd38 <tcp_free_acked_segments+0xe0>)
 800cc8e:	f240 4257 	movw	r2, #1111	@ 0x457
 800cc92:	492a      	ldr	r1, [pc, #168]	@ (800cd3c <tcp_free_acked_segments+0xe4>)
 800cc94:	482a      	ldr	r0, [pc, #168]	@ (800cd40 <tcp_free_acked_segments+0xe8>)
 800cc96:	f005 fdfd 	bl	8012894 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800cca0:	8a7b      	ldrh	r3, [r7, #18]
 800cca2:	1ad3      	subs	r3, r2, r3
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	891a      	ldrh	r2, [r3, #8]
 800ccb0:	4b24      	ldr	r3, [pc, #144]	@ (800cd44 <tcp_free_acked_segments+0xec>)
 800ccb2:	881b      	ldrh	r3, [r3, #0]
 800ccb4:	4413      	add	r3, r2
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	4b22      	ldr	r3, [pc, #136]	@ (800cd44 <tcp_free_acked_segments+0xec>)
 800ccba:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ccbc:	6978      	ldr	r0, [r7, #20]
 800ccbe:	f7fe f9da 	bl	800b076 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00c      	beq.n	800cce6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d109      	bne.n	800cce6 <tcp_free_acked_segments+0x8e>
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d106      	bne.n	800cce6 <tcp_free_acked_segments+0x8e>
 800ccd8:	4b17      	ldr	r3, [pc, #92]	@ (800cd38 <tcp_free_acked_segments+0xe0>)
 800ccda:	f240 4261 	movw	r2, #1121	@ 0x461
 800ccde:	491a      	ldr	r1, [pc, #104]	@ (800cd48 <tcp_free_acked_segments+0xf0>)
 800cce0:	4817      	ldr	r0, [pc, #92]	@ (800cd40 <tcp_free_acked_segments+0xe8>)
 800cce2:	f005 fdd7 	bl	8012894 <iprintf>
  while (seg_list != NULL &&
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d020      	beq.n	800cd2e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fb fb60 	bl	80083b8 <lwip_htonl>
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	891b      	ldrh	r3, [r3, #8]
 800ccfe:	461d      	mov	r5, r3
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	899b      	ldrh	r3, [r3, #12]
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7fb fb3f 	bl	800838c <lwip_htons>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	f003 0303 	and.w	r3, r3, #3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d001      	beq.n	800cd1e <tcp_free_acked_segments+0xc6>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e000      	b.n	800cd20 <tcp_free_acked_segments+0xc8>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	442b      	add	r3, r5
 800cd22:	18e2      	adds	r2, r4, r3
 800cd24:	4b09      	ldr	r3, [pc, #36]	@ (800cd4c <tcp_free_acked_segments+0xf4>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	dd9c      	ble.n	800cc68 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800cd2e:	68bb      	ldr	r3, [r7, #8]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3718      	adds	r7, #24
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bdb0      	pop	{r4, r5, r7, pc}
 800cd38:	08014d8c 	.word	0x08014d8c
 800cd3c:	08015074 	.word	0x08015074
 800cd40:	08014dd8 	.word	0x08014dd8
 800cd44:	200089dc 	.word	0x200089dc
 800cd48:	0801509c 	.word	0x0801509c
 800cd4c:	200089d8 	.word	0x200089d8

0800cd50 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800cd50:	b5b0      	push	{r4, r5, r7, lr}
 800cd52:	b094      	sub	sp, #80	@ 0x50
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d106      	bne.n	800cd70 <tcp_receive+0x20>
 800cd62:	4b91      	ldr	r3, [pc, #580]	@ (800cfa8 <tcp_receive+0x258>)
 800cd64:	f240 427b 	movw	r2, #1147	@ 0x47b
 800cd68:	4990      	ldr	r1, [pc, #576]	@ (800cfac <tcp_receive+0x25c>)
 800cd6a:	4891      	ldr	r0, [pc, #580]	@ (800cfb0 <tcp_receive+0x260>)
 800cd6c:	f005 fd92 	bl	8012894 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	7d1b      	ldrb	r3, [r3, #20]
 800cd74:	2b03      	cmp	r3, #3
 800cd76:	d806      	bhi.n	800cd86 <tcp_receive+0x36>
 800cd78:	4b8b      	ldr	r3, [pc, #556]	@ (800cfa8 <tcp_receive+0x258>)
 800cd7a:	f240 427c 	movw	r2, #1148	@ 0x47c
 800cd7e:	498d      	ldr	r1, [pc, #564]	@ (800cfb4 <tcp_receive+0x264>)
 800cd80:	488b      	ldr	r0, [pc, #556]	@ (800cfb0 <tcp_receive+0x260>)
 800cd82:	f005 fd87 	bl	8012894 <iprintf>

  if (flags & TCP_ACK) {
 800cd86:	4b8c      	ldr	r3, [pc, #560]	@ (800cfb8 <tcp_receive+0x268>)
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	f003 0310 	and.w	r3, r3, #16
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f000 8264 	beq.w	800d25c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cda0:	4413      	add	r3, r2
 800cda2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cda8:	4b84      	ldr	r3, [pc, #528]	@ (800cfbc <tcp_receive+0x26c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	1ad3      	subs	r3, r2, r3
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	db1b      	blt.n	800cdea <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cdb6:	4b81      	ldr	r3, [pc, #516]	@ (800cfbc <tcp_receive+0x26c>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d106      	bne.n	800cdcc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cdc2:	4b7f      	ldr	r3, [pc, #508]	@ (800cfc0 <tcp_receive+0x270>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	1ad3      	subs	r3, r2, r3
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	db0e      	blt.n	800cdea <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cdd0:	4b7b      	ldr	r3, [pc, #492]	@ (800cfc0 <tcp_receive+0x270>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d125      	bne.n	800ce24 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cdd8:	4b7a      	ldr	r3, [pc, #488]	@ (800cfc4 <tcp_receive+0x274>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	89db      	ldrh	r3, [r3, #14]
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d91c      	bls.n	800ce24 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800cdea:	4b76      	ldr	r3, [pc, #472]	@ (800cfc4 <tcp_receive+0x274>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	89db      	ldrh	r3, [r3, #14]
 800cdf0:	b29a      	uxth	r2, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d205      	bcs.n	800ce14 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800ce14:	4b69      	ldr	r3, [pc, #420]	@ (800cfbc <tcp_receive+0x26c>)
 800ce16:	681a      	ldr	r2, [r3, #0]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800ce1c:	4b68      	ldr	r3, [pc, #416]	@ (800cfc0 <tcp_receive+0x270>)
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ce24:	4b66      	ldr	r3, [pc, #408]	@ (800cfc0 <tcp_receive+0x270>)
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce2c:	1ad3      	subs	r3, r2, r3
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	dc58      	bgt.n	800cee4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ce32:	4b65      	ldr	r3, [pc, #404]	@ (800cfc8 <tcp_receive+0x278>)
 800ce34:	881b      	ldrh	r3, [r3, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d14b      	bne.n	800ced2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800ce44:	4413      	add	r3, r2
 800ce46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d142      	bne.n	800ced2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	db3d      	blt.n	800ced2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ce5a:	4b59      	ldr	r3, [pc, #356]	@ (800cfc0 <tcp_receive+0x270>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d137      	bne.n	800ced2 <tcp_receive+0x182>
              found_dupack = 1;
 800ce62:	2301      	movs	r3, #1
 800ce64:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ce6c:	2bff      	cmp	r3, #255	@ 0xff
 800ce6e:	d007      	beq.n	800ce80 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ce76:	3301      	adds	r3, #1
 800ce78:	b2da      	uxtb	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ce86:	2b03      	cmp	r3, #3
 800ce88:	d91b      	bls.n	800cec2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce94:	4413      	add	r3, r2
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d30a      	bcc.n	800ceb8 <tcp_receive+0x168>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ceac:	4413      	add	r3, r2
 800ceae:	b29a      	uxth	r2, r3
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ceb6:	e004      	b.n	800cec2 <tcp_receive+0x172>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cebe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cec8:	2b02      	cmp	r3, #2
 800ceca:	d902      	bls.n	800ced2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f001 fee7 	bl	800eca0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ced2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	f040 8161 	bne.w	800d19c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cee2:	e15b      	b.n	800d19c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cee4:	4b36      	ldr	r3, [pc, #216]	@ (800cfc0 <tcp_receive+0x270>)
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceec:	1ad3      	subs	r3, r2, r3
 800ceee:	3b01      	subs	r3, #1
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	f2c0 814e 	blt.w	800d192 <tcp_receive+0x442>
 800cef6:	4b32      	ldr	r3, [pc, #200]	@ (800cfc0 <tcp_receive+0x270>)
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	f300 8146 	bgt.w	800d192 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	8b5b      	ldrh	r3, [r3, #26]
 800cf0a:	f003 0304 	and.w	r3, r3, #4
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d010      	beq.n	800cf34 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	8b5b      	ldrh	r3, [r3, #26]
 800cf16:	f023 0304 	bic.w	r3, r3, #4
 800cf1a:	b29a      	uxth	r2, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800cf42:	10db      	asrs	r3, r3, #3
 800cf44:	b21b      	sxth	r3, r3
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	4413      	add	r3, r2
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	b21a      	sxth	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800cf5c:	4b18      	ldr	r3, [pc, #96]	@ (800cfc0 <tcp_receive+0x270>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	b29a      	uxth	r2, r3
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	1ad3      	subs	r3, r2, r3
 800cf6a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800cf74:	4b12      	ldr	r3, [pc, #72]	@ (800cfc0 <tcp_receive+0x270>)
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	7d1b      	ldrb	r3, [r3, #20]
 800cf80:	2b03      	cmp	r3, #3
 800cf82:	f240 8097 	bls.w	800d0b4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d245      	bcs.n	800d022 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	8b5b      	ldrh	r3, [r3, #26]
 800cf9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d014      	beq.n	800cfcc <tcp_receive+0x27c>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e013      	b.n	800cfce <tcp_receive+0x27e>
 800cfa6:	bf00      	nop
 800cfa8:	08014d8c 	.word	0x08014d8c
 800cfac:	080150bc 	.word	0x080150bc
 800cfb0:	08014dd8 	.word	0x08014dd8
 800cfb4:	080150d8 	.word	0x080150d8
 800cfb8:	200089e0 	.word	0x200089e0
 800cfbc:	200089d4 	.word	0x200089d4
 800cfc0:	200089d8 	.word	0x200089d8
 800cfc4:	200089c4 	.word	0x200089c4
 800cfc8:	200089de 	.word	0x200089de
 800cfcc:	2302      	movs	r3, #2
 800cfce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800cfd2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cfdc:	fb12 f303 	smulbb	r3, r2, r3
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	bf28      	it	cs
 800cfe8:	4613      	movcs	r3, r2
 800cfea:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cff2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cff4:	4413      	add	r3, r2
 800cff6:	b29a      	uxth	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cffe:	429a      	cmp	r2, r3
 800d000:	d309      	bcc.n	800d016 <tcp_receive+0x2c6>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d008:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d00a:	4413      	add	r3, r2
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d014:	e04e      	b.n	800d0b4 <tcp_receive+0x364>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d01c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d020:	e048      	b.n	800d0b4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d028:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d02a:	4413      	add	r3, r2
 800d02c:	b29a      	uxth	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d034:	429a      	cmp	r2, r3
 800d036:	d309      	bcc.n	800d04c <tcp_receive+0x2fc>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d03e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d040:	4413      	add	r3, r2
 800d042:	b29a      	uxth	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d04a:	e004      	b.n	800d056 <tcp_receive+0x306>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d052:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d062:	429a      	cmp	r2, r3
 800d064:	d326      	bcc.n	800d0b4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d072:	1ad3      	subs	r3, r2, r3
 800d074:	b29a      	uxth	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d086:	4413      	add	r3, r2
 800d088:	b29a      	uxth	r2, r3
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d090:	429a      	cmp	r2, r3
 800d092:	d30a      	bcc.n	800d0aa <tcp_receive+0x35a>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d09e:	4413      	add	r3, r2
 800d0a0:	b29a      	uxth	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d0a8:	e004      	b.n	800d0b4 <tcp_receive+0x364>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d0b0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0bc:	4a98      	ldr	r2, [pc, #608]	@ (800d320 <tcp_receive+0x5d0>)
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f7ff fdca 	bl	800cc58 <tcp_free_acked_segments>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0d2:	4a94      	ldr	r2, [pc, #592]	@ (800d324 <tcp_receive+0x5d4>)
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f7ff fdbf 	bl	800cc58 <tcp_free_acked_segments>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d104      	bne.n	800d0f2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d0ee:	861a      	strh	r2, [r3, #48]	@ 0x30
 800d0f0:	e002      	b.n	800d0f8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d102:	2b00      	cmp	r3, #0
 800d104:	d103      	bne.n	800d10e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2200      	movs	r2, #0
 800d10a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800d114:	4b84      	ldr	r3, [pc, #528]	@ (800d328 <tcp_receive+0x5d8>)
 800d116:	881b      	ldrh	r3, [r3, #0]
 800d118:	4413      	add	r3, r2
 800d11a:	b29a      	uxth	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	8b5b      	ldrh	r3, [r3, #26]
 800d126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d035      	beq.n	800d19a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d132:	2b00      	cmp	r3, #0
 800d134:	d118      	bne.n	800d168 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00c      	beq.n	800d158 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7fb f934 	bl	80083b8 <lwip_htonl>
 800d150:	4603      	mov	r3, r0
 800d152:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d154:	2b00      	cmp	r3, #0
 800d156:	dc20      	bgt.n	800d19a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	8b5b      	ldrh	r3, [r3, #26]
 800d15c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d160:	b29a      	uxth	r2, r3
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d166:	e018      	b.n	800d19a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	4618      	mov	r0, r3
 800d176:	f7fb f91f 	bl	80083b8 <lwip_htonl>
 800d17a:	4603      	mov	r3, r0
 800d17c:	1ae3      	subs	r3, r4, r3
 800d17e:	2b00      	cmp	r3, #0
 800d180:	dc0b      	bgt.n	800d19a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	8b5b      	ldrh	r3, [r3, #26]
 800d186:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d18a:	b29a      	uxth	r2, r3
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d190:	e003      	b.n	800d19a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f001 ff70 	bl	800f078 <tcp_send_empty_ack>
 800d198:	e000      	b.n	800d19c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d19a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d05b      	beq.n	800d25c <tcp_receive+0x50c>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1a8:	4b60      	ldr	r3, [pc, #384]	@ (800d32c <tcp_receive+0x5dc>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	1ad3      	subs	r3, r2, r3
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	da54      	bge.n	800d25c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d1b2:	4b5f      	ldr	r3, [pc, #380]	@ (800d330 <tcp_receive+0x5e0>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	1ad3      	subs	r3, r2, r3
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d1c6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d1d0:	10db      	asrs	r3, r3, #3
 800d1d2:	b21b      	sxth	r3, r3
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d1ea:	4413      	add	r3, r2
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	b21a      	sxth	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800d1f4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	da05      	bge.n	800d208 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800d1fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d200:	425b      	negs	r3, r3
 800d202:	b29b      	uxth	r3, r3
 800d204:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d208:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d212:	109b      	asrs	r3, r3, #2
 800d214:	b21b      	sxth	r3, r3
 800d216:	b29b      	uxth	r3, r3
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d226:	b29a      	uxth	r2, r3
 800d228:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d22c:	4413      	add	r3, r2
 800d22e:	b29b      	uxth	r3, r3
 800d230:	b21a      	sxth	r2, r3
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d23c:	10db      	asrs	r3, r3, #3
 800d23e:	b21b      	sxth	r3, r3
 800d240:	b29a      	uxth	r2, r3
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d248:	b29b      	uxth	r3, r3
 800d24a:	4413      	add	r3, r2
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	b21a      	sxth	r2, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d25c:	4b35      	ldr	r3, [pc, #212]	@ (800d334 <tcp_receive+0x5e4>)
 800d25e:	881b      	ldrh	r3, [r3, #0]
 800d260:	2b00      	cmp	r3, #0
 800d262:	f000 84df 	beq.w	800dc24 <tcp_receive+0xed4>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	7d1b      	ldrb	r3, [r3, #20]
 800d26a:	2b06      	cmp	r3, #6
 800d26c:	f200 84da 	bhi.w	800dc24 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d274:	4b30      	ldr	r3, [pc, #192]	@ (800d338 <tcp_receive+0x5e8>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	1ad3      	subs	r3, r2, r3
 800d27a:	3b01      	subs	r3, #1
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f2c0 808f 	blt.w	800d3a0 <tcp_receive+0x650>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d286:	4b2b      	ldr	r3, [pc, #172]	@ (800d334 <tcp_receive+0x5e4>)
 800d288:	881b      	ldrh	r3, [r3, #0]
 800d28a:	4619      	mov	r1, r3
 800d28c:	4b2a      	ldr	r3, [pc, #168]	@ (800d338 <tcp_receive+0x5e8>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	440b      	add	r3, r1
 800d292:	1ad3      	subs	r3, r2, r3
 800d294:	3301      	adds	r3, #1
 800d296:	2b00      	cmp	r3, #0
 800d298:	f300 8082 	bgt.w	800d3a0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d29c:	4b27      	ldr	r3, [pc, #156]	@ (800d33c <tcp_receive+0x5ec>)
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2a6:	4b24      	ldr	r3, [pc, #144]	@ (800d338 <tcp_receive+0x5e8>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d2ae:	4b23      	ldr	r3, [pc, #140]	@ (800d33c <tcp_receive+0x5ec>)
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d106      	bne.n	800d2c4 <tcp_receive+0x574>
 800d2b6:	4b22      	ldr	r3, [pc, #136]	@ (800d340 <tcp_receive+0x5f0>)
 800d2b8:	f240 5294 	movw	r2, #1428	@ 0x594
 800d2bc:	4921      	ldr	r1, [pc, #132]	@ (800d344 <tcp_receive+0x5f4>)
 800d2be:	4822      	ldr	r0, [pc, #136]	@ (800d348 <tcp_receive+0x5f8>)
 800d2c0:	f005 fae8 	bl	8012894 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d906      	bls.n	800d2dc <tcp_receive+0x58c>
 800d2ce:	4b1c      	ldr	r3, [pc, #112]	@ (800d340 <tcp_receive+0x5f0>)
 800d2d0:	f240 5295 	movw	r2, #1429	@ 0x595
 800d2d4:	491d      	ldr	r1, [pc, #116]	@ (800d34c <tcp_receive+0x5fc>)
 800d2d6:	481c      	ldr	r0, [pc, #112]	@ (800d348 <tcp_receive+0x5f8>)
 800d2d8:	f005 fadc 	bl	8012894 <iprintf>
      off = (u16_t)off32;
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2de:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d2e2:	4b16      	ldr	r3, [pc, #88]	@ (800d33c <tcp_receive+0x5ec>)
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	891b      	ldrh	r3, [r3, #8]
 800d2e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d906      	bls.n	800d2fe <tcp_receive+0x5ae>
 800d2f0:	4b13      	ldr	r3, [pc, #76]	@ (800d340 <tcp_receive+0x5f0>)
 800d2f2:	f240 5297 	movw	r2, #1431	@ 0x597
 800d2f6:	4916      	ldr	r1, [pc, #88]	@ (800d350 <tcp_receive+0x600>)
 800d2f8:	4813      	ldr	r0, [pc, #76]	@ (800d348 <tcp_receive+0x5f8>)
 800d2fa:	f005 facb 	bl	8012894 <iprintf>
      inseg.len -= off;
 800d2fe:	4b0f      	ldr	r3, [pc, #60]	@ (800d33c <tcp_receive+0x5ec>)
 800d300:	891a      	ldrh	r2, [r3, #8]
 800d302:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d306:	1ad3      	subs	r3, r2, r3
 800d308:	b29a      	uxth	r2, r3
 800d30a:	4b0c      	ldr	r3, [pc, #48]	@ (800d33c <tcp_receive+0x5ec>)
 800d30c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d30e:	4b0b      	ldr	r3, [pc, #44]	@ (800d33c <tcp_receive+0x5ec>)
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	891a      	ldrh	r2, [r3, #8]
 800d314:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d318:	1ad3      	subs	r3, r2, r3
 800d31a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800d31c:	e02a      	b.n	800d374 <tcp_receive+0x624>
 800d31e:	bf00      	nop
 800d320:	080150f4 	.word	0x080150f4
 800d324:	080150fc 	.word	0x080150fc
 800d328:	200089dc 	.word	0x200089dc
 800d32c:	200089d8 	.word	0x200089d8
 800d330:	2000899c 	.word	0x2000899c
 800d334:	200089de 	.word	0x200089de
 800d338:	200089d4 	.word	0x200089d4
 800d33c:	200089b4 	.word	0x200089b4
 800d340:	08014d8c 	.word	0x08014d8c
 800d344:	08015104 	.word	0x08015104
 800d348:	08014dd8 	.word	0x08014dd8
 800d34c:	08015114 	.word	0x08015114
 800d350:	08015124 	.word	0x08015124
        off -= p->len;
 800d354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d356:	895b      	ldrh	r3, [r3, #10]
 800d358:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d364:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d366:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d36a:	2200      	movs	r2, #0
 800d36c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d36e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800d374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d376:	895b      	ldrh	r3, [r3, #10]
 800d378:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d8e9      	bhi.n	800d354 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d380:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d384:	4619      	mov	r1, r3
 800d386:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d388:	f7fc fad8 	bl	800993c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d390:	4a90      	ldr	r2, [pc, #576]	@ (800d5d4 <tcp_receive+0x884>)
 800d392:	6013      	str	r3, [r2, #0]
 800d394:	4b90      	ldr	r3, [pc, #576]	@ (800d5d8 <tcp_receive+0x888>)
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	4a8e      	ldr	r2, [pc, #568]	@ (800d5d4 <tcp_receive+0x884>)
 800d39a:	6812      	ldr	r2, [r2, #0]
 800d39c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d39e:	e00d      	b.n	800d3bc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d3a0:	4b8c      	ldr	r3, [pc, #560]	@ (800d5d4 <tcp_receive+0x884>)
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3a8:	1ad3      	subs	r3, r2, r3
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	da06      	bge.n	800d3bc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	8b5b      	ldrh	r3, [r3, #26]
 800d3b2:	f043 0302 	orr.w	r3, r3, #2
 800d3b6:	b29a      	uxth	r2, r3
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d3bc:	4b85      	ldr	r3, [pc, #532]	@ (800d5d4 <tcp_receive+0x884>)
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3c4:	1ad3      	subs	r3, r2, r3
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f2c0 8427 	blt.w	800dc1a <tcp_receive+0xeca>
 800d3cc:	4b81      	ldr	r3, [pc, #516]	@ (800d5d4 <tcp_receive+0x884>)
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3d4:	6879      	ldr	r1, [r7, #4]
 800d3d6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d3d8:	440b      	add	r3, r1
 800d3da:	1ad3      	subs	r3, r2, r3
 800d3dc:	3301      	adds	r3, #1
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	f300 841b 	bgt.w	800dc1a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3e8:	4b7a      	ldr	r3, [pc, #488]	@ (800d5d4 <tcp_receive+0x884>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	f040 8298 	bne.w	800d922 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d3f2:	4b79      	ldr	r3, [pc, #484]	@ (800d5d8 <tcp_receive+0x888>)
 800d3f4:	891c      	ldrh	r4, [r3, #8]
 800d3f6:	4b78      	ldr	r3, [pc, #480]	@ (800d5d8 <tcp_receive+0x888>)
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	899b      	ldrh	r3, [r3, #12]
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fa ffc4 	bl	800838c <lwip_htons>
 800d404:	4603      	mov	r3, r0
 800d406:	b2db      	uxtb	r3, r3
 800d408:	f003 0303 	and.w	r3, r3, #3
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <tcp_receive+0x6c4>
 800d410:	2301      	movs	r3, #1
 800d412:	e000      	b.n	800d416 <tcp_receive+0x6c6>
 800d414:	2300      	movs	r3, #0
 800d416:	4423      	add	r3, r4
 800d418:	b29a      	uxth	r2, r3
 800d41a:	4b70      	ldr	r3, [pc, #448]	@ (800d5dc <tcp_receive+0x88c>)
 800d41c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d422:	4b6e      	ldr	r3, [pc, #440]	@ (800d5dc <tcp_receive+0x88c>)
 800d424:	881b      	ldrh	r3, [r3, #0]
 800d426:	429a      	cmp	r2, r3
 800d428:	d274      	bcs.n	800d514 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d42a:	4b6b      	ldr	r3, [pc, #428]	@ (800d5d8 <tcp_receive+0x888>)
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	899b      	ldrh	r3, [r3, #12]
 800d430:	b29b      	uxth	r3, r3
 800d432:	4618      	mov	r0, r3
 800d434:	f7fa ffaa 	bl	800838c <lwip_htons>
 800d438:	4603      	mov	r3, r0
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	f003 0301 	and.w	r3, r3, #1
 800d440:	2b00      	cmp	r3, #0
 800d442:	d01e      	beq.n	800d482 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d444:	4b64      	ldr	r3, [pc, #400]	@ (800d5d8 <tcp_receive+0x888>)
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	899b      	ldrh	r3, [r3, #12]
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	b21b      	sxth	r3, r3
 800d44e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d452:	b21c      	sxth	r4, r3
 800d454:	4b60      	ldr	r3, [pc, #384]	@ (800d5d8 <tcp_receive+0x888>)
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	899b      	ldrh	r3, [r3, #12]
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7fa ff95 	bl	800838c <lwip_htons>
 800d462:	4603      	mov	r3, r0
 800d464:	b2db      	uxtb	r3, r3
 800d466:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7fa ff8d 	bl	800838c <lwip_htons>
 800d472:	4603      	mov	r3, r0
 800d474:	b21b      	sxth	r3, r3
 800d476:	4323      	orrs	r3, r4
 800d478:	b21a      	sxth	r2, r3
 800d47a:	4b57      	ldr	r3, [pc, #348]	@ (800d5d8 <tcp_receive+0x888>)
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	b292      	uxth	r2, r2
 800d480:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d486:	4b54      	ldr	r3, [pc, #336]	@ (800d5d8 <tcp_receive+0x888>)
 800d488:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d48a:	4b53      	ldr	r3, [pc, #332]	@ (800d5d8 <tcp_receive+0x888>)
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	899b      	ldrh	r3, [r3, #12]
 800d490:	b29b      	uxth	r3, r3
 800d492:	4618      	mov	r0, r3
 800d494:	f7fa ff7a 	bl	800838c <lwip_htons>
 800d498:	4603      	mov	r3, r0
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	f003 0302 	and.w	r3, r3, #2
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d005      	beq.n	800d4b0 <tcp_receive+0x760>
            inseg.len -= 1;
 800d4a4:	4b4c      	ldr	r3, [pc, #304]	@ (800d5d8 <tcp_receive+0x888>)
 800d4a6:	891b      	ldrh	r3, [r3, #8]
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	b29a      	uxth	r2, r3
 800d4ac:	4b4a      	ldr	r3, [pc, #296]	@ (800d5d8 <tcp_receive+0x888>)
 800d4ae:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d4b0:	4b49      	ldr	r3, [pc, #292]	@ (800d5d8 <tcp_receive+0x888>)
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	4a48      	ldr	r2, [pc, #288]	@ (800d5d8 <tcp_receive+0x888>)
 800d4b6:	8912      	ldrh	r2, [r2, #8]
 800d4b8:	4611      	mov	r1, r2
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7fc f93e 	bl	800973c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d4c0:	4b45      	ldr	r3, [pc, #276]	@ (800d5d8 <tcp_receive+0x888>)
 800d4c2:	891c      	ldrh	r4, [r3, #8]
 800d4c4:	4b44      	ldr	r3, [pc, #272]	@ (800d5d8 <tcp_receive+0x888>)
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	899b      	ldrh	r3, [r3, #12]
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7fa ff5d 	bl	800838c <lwip_htons>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	f003 0303 	and.w	r3, r3, #3
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d001      	beq.n	800d4e2 <tcp_receive+0x792>
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e000      	b.n	800d4e4 <tcp_receive+0x794>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	4423      	add	r3, r4
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	4b3c      	ldr	r3, [pc, #240]	@ (800d5dc <tcp_receive+0x88c>)
 800d4ea:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d4ec:	4b3b      	ldr	r3, [pc, #236]	@ (800d5dc <tcp_receive+0x88c>)
 800d4ee:	881b      	ldrh	r3, [r3, #0]
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	4b38      	ldr	r3, [pc, #224]	@ (800d5d4 <tcp_receive+0x884>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	441a      	add	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4fc:	6879      	ldr	r1, [r7, #4]
 800d4fe:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d500:	440b      	add	r3, r1
 800d502:	429a      	cmp	r2, r3
 800d504:	d006      	beq.n	800d514 <tcp_receive+0x7c4>
 800d506:	4b36      	ldr	r3, [pc, #216]	@ (800d5e0 <tcp_receive+0x890>)
 800d508:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800d50c:	4935      	ldr	r1, [pc, #212]	@ (800d5e4 <tcp_receive+0x894>)
 800d50e:	4836      	ldr	r0, [pc, #216]	@ (800d5e8 <tcp_receive+0x898>)
 800d510:	f005 f9c0 	bl	8012894 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f000 80e6 	beq.w	800d6ea <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d51e:	4b2e      	ldr	r3, [pc, #184]	@ (800d5d8 <tcp_receive+0x888>)
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	899b      	ldrh	r3, [r3, #12]
 800d524:	b29b      	uxth	r3, r3
 800d526:	4618      	mov	r0, r3
 800d528:	f7fa ff30 	bl	800838c <lwip_htons>
 800d52c:	4603      	mov	r3, r0
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	f003 0301 	and.w	r3, r3, #1
 800d534:	2b00      	cmp	r3, #0
 800d536:	d010      	beq.n	800d55a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d538:	e00a      	b.n	800d550 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d53e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f7fd fd93 	bl	800b076 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d554:	2b00      	cmp	r3, #0
 800d556:	d1f0      	bne.n	800d53a <tcp_receive+0x7ea>
 800d558:	e0c7      	b.n	800d6ea <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d560:	e051      	b.n	800d606 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	899b      	ldrh	r3, [r3, #12]
 800d568:	b29b      	uxth	r3, r3
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7fa ff0e 	bl	800838c <lwip_htons>
 800d570:	4603      	mov	r3, r0
 800d572:	b2db      	uxtb	r3, r3
 800d574:	f003 0301 	and.w	r3, r3, #1
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d03c      	beq.n	800d5f6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d57c:	4b16      	ldr	r3, [pc, #88]	@ (800d5d8 <tcp_receive+0x888>)
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	899b      	ldrh	r3, [r3, #12]
 800d582:	b29b      	uxth	r3, r3
 800d584:	4618      	mov	r0, r3
 800d586:	f7fa ff01 	bl	800838c <lwip_htons>
 800d58a:	4603      	mov	r3, r0
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d592:	2b00      	cmp	r3, #0
 800d594:	d12f      	bne.n	800d5f6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d596:	4b10      	ldr	r3, [pc, #64]	@ (800d5d8 <tcp_receive+0x888>)
 800d598:	68db      	ldr	r3, [r3, #12]
 800d59a:	899b      	ldrh	r3, [r3, #12]
 800d59c:	b29c      	uxth	r4, r3
 800d59e:	2001      	movs	r0, #1
 800d5a0:	f7fa fef4 	bl	800838c <lwip_htons>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	4b0b      	ldr	r3, [pc, #44]	@ (800d5d8 <tcp_receive+0x888>)
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	4322      	orrs	r2, r4
 800d5ae:	b292      	uxth	r2, r2
 800d5b0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d5b2:	4b09      	ldr	r3, [pc, #36]	@ (800d5d8 <tcp_receive+0x888>)
 800d5b4:	891c      	ldrh	r4, [r3, #8]
 800d5b6:	4b08      	ldr	r3, [pc, #32]	@ (800d5d8 <tcp_receive+0x888>)
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	899b      	ldrh	r3, [r3, #12]
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fa fee4 	bl	800838c <lwip_htons>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	f003 0303 	and.w	r3, r3, #3
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00d      	beq.n	800d5ec <tcp_receive+0x89c>
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e00c      	b.n	800d5ee <tcp_receive+0x89e>
 800d5d4:	200089d4 	.word	0x200089d4
 800d5d8:	200089b4 	.word	0x200089b4
 800d5dc:	200089de 	.word	0x200089de
 800d5e0:	08014d8c 	.word	0x08014d8c
 800d5e4:	08015134 	.word	0x08015134
 800d5e8:	08014dd8 	.word	0x08014dd8
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	4423      	add	r3, r4
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	4b98      	ldr	r3, [pc, #608]	@ (800d854 <tcp_receive+0xb04>)
 800d5f4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d5f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5f8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d5fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800d600:	6938      	ldr	r0, [r7, #16]
 800d602:	f7fd fd38 	bl	800b076 <tcp_seg_free>
            while (next &&
 800d606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d00e      	beq.n	800d62a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d60c:	4b91      	ldr	r3, [pc, #580]	@ (800d854 <tcp_receive+0xb04>)
 800d60e:	881b      	ldrh	r3, [r3, #0]
 800d610:	461a      	mov	r2, r3
 800d612:	4b91      	ldr	r3, [pc, #580]	@ (800d858 <tcp_receive+0xb08>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	441a      	add	r2, r3
 800d618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d620:	8909      	ldrh	r1, [r1, #8]
 800d622:	440b      	add	r3, r1
 800d624:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d626:	2b00      	cmp	r3, #0
 800d628:	da9b      	bge.n	800d562 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d62a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d059      	beq.n	800d6e4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800d630:	4b88      	ldr	r3, [pc, #544]	@ (800d854 <tcp_receive+0xb04>)
 800d632:	881b      	ldrh	r3, [r3, #0]
 800d634:	461a      	mov	r2, r3
 800d636:	4b88      	ldr	r3, [pc, #544]	@ (800d858 <tcp_receive+0xb08>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	441a      	add	r2, r3
 800d63c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d644:	2b00      	cmp	r3, #0
 800d646:	dd4d      	ble.n	800d6e4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	b29a      	uxth	r2, r3
 800d650:	4b81      	ldr	r3, [pc, #516]	@ (800d858 <tcp_receive+0xb08>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	b29b      	uxth	r3, r3
 800d656:	1ad3      	subs	r3, r2, r3
 800d658:	b29a      	uxth	r2, r3
 800d65a:	4b80      	ldr	r3, [pc, #512]	@ (800d85c <tcp_receive+0xb0c>)
 800d65c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d65e:	4b7f      	ldr	r3, [pc, #508]	@ (800d85c <tcp_receive+0xb0c>)
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	899b      	ldrh	r3, [r3, #12]
 800d664:	b29b      	uxth	r3, r3
 800d666:	4618      	mov	r0, r3
 800d668:	f7fa fe90 	bl	800838c <lwip_htons>
 800d66c:	4603      	mov	r3, r0
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	f003 0302 	and.w	r3, r3, #2
 800d674:	2b00      	cmp	r3, #0
 800d676:	d005      	beq.n	800d684 <tcp_receive+0x934>
                inseg.len -= 1;
 800d678:	4b78      	ldr	r3, [pc, #480]	@ (800d85c <tcp_receive+0xb0c>)
 800d67a:	891b      	ldrh	r3, [r3, #8]
 800d67c:	3b01      	subs	r3, #1
 800d67e:	b29a      	uxth	r2, r3
 800d680:	4b76      	ldr	r3, [pc, #472]	@ (800d85c <tcp_receive+0xb0c>)
 800d682:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d684:	4b75      	ldr	r3, [pc, #468]	@ (800d85c <tcp_receive+0xb0c>)
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	4a74      	ldr	r2, [pc, #464]	@ (800d85c <tcp_receive+0xb0c>)
 800d68a:	8912      	ldrh	r2, [r2, #8]
 800d68c:	4611      	mov	r1, r2
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fc f854 	bl	800973c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d694:	4b71      	ldr	r3, [pc, #452]	@ (800d85c <tcp_receive+0xb0c>)
 800d696:	891c      	ldrh	r4, [r3, #8]
 800d698:	4b70      	ldr	r3, [pc, #448]	@ (800d85c <tcp_receive+0xb0c>)
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	899b      	ldrh	r3, [r3, #12]
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7fa fe73 	bl	800838c <lwip_htons>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	f003 0303 	and.w	r3, r3, #3
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d001      	beq.n	800d6b6 <tcp_receive+0x966>
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e000      	b.n	800d6b8 <tcp_receive+0x968>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	4423      	add	r3, r4
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	4b65      	ldr	r3, [pc, #404]	@ (800d854 <tcp_receive+0xb04>)
 800d6be:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d6c0:	4b64      	ldr	r3, [pc, #400]	@ (800d854 <tcp_receive+0xb04>)
 800d6c2:	881b      	ldrh	r3, [r3, #0]
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	4b64      	ldr	r3, [pc, #400]	@ (800d858 <tcp_receive+0xb08>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	441a      	add	r2, r3
 800d6cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d006      	beq.n	800d6e4 <tcp_receive+0x994>
 800d6d6:	4b62      	ldr	r3, [pc, #392]	@ (800d860 <tcp_receive+0xb10>)
 800d6d8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800d6dc:	4961      	ldr	r1, [pc, #388]	@ (800d864 <tcp_receive+0xb14>)
 800d6de:	4862      	ldr	r0, [pc, #392]	@ (800d868 <tcp_receive+0xb18>)
 800d6e0:	f005 f8d8 	bl	8012894 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d6e8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d6ea:	4b5a      	ldr	r3, [pc, #360]	@ (800d854 <tcp_receive+0xb04>)
 800d6ec:	881b      	ldrh	r3, [r3, #0]
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	4b59      	ldr	r3, [pc, #356]	@ (800d858 <tcp_receive+0xb08>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	441a      	add	r2, r3
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d6fe:	4b55      	ldr	r3, [pc, #340]	@ (800d854 <tcp_receive+0xb04>)
 800d700:	881b      	ldrh	r3, [r3, #0]
 800d702:	429a      	cmp	r2, r3
 800d704:	d206      	bcs.n	800d714 <tcp_receive+0x9c4>
 800d706:	4b56      	ldr	r3, [pc, #344]	@ (800d860 <tcp_receive+0xb10>)
 800d708:	f240 6207 	movw	r2, #1543	@ 0x607
 800d70c:	4957      	ldr	r1, [pc, #348]	@ (800d86c <tcp_receive+0xb1c>)
 800d70e:	4856      	ldr	r0, [pc, #344]	@ (800d868 <tcp_receive+0xb18>)
 800d710:	f005 f8c0 	bl	8012894 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d718:	4b4e      	ldr	r3, [pc, #312]	@ (800d854 <tcp_receive+0xb04>)
 800d71a:	881b      	ldrh	r3, [r3, #0]
 800d71c:	1ad3      	subs	r3, r2, r3
 800d71e:	b29a      	uxth	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7fc ffc5 	bl	800a6b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d72a:	4b4c      	ldr	r3, [pc, #304]	@ (800d85c <tcp_receive+0xb0c>)
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	891b      	ldrh	r3, [r3, #8]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d006      	beq.n	800d742 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800d734:	4b49      	ldr	r3, [pc, #292]	@ (800d85c <tcp_receive+0xb0c>)
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	4a4d      	ldr	r2, [pc, #308]	@ (800d870 <tcp_receive+0xb20>)
 800d73a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d73c:	4b47      	ldr	r3, [pc, #284]	@ (800d85c <tcp_receive+0xb0c>)
 800d73e:	2200      	movs	r2, #0
 800d740:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d742:	4b46      	ldr	r3, [pc, #280]	@ (800d85c <tcp_receive+0xb0c>)
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	899b      	ldrh	r3, [r3, #12]
 800d748:	b29b      	uxth	r3, r3
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fa fe1e 	bl	800838c <lwip_htons>
 800d750:	4603      	mov	r3, r0
 800d752:	b2db      	uxtb	r3, r3
 800d754:	f003 0301 	and.w	r3, r3, #1
 800d758:	2b00      	cmp	r3, #0
 800d75a:	f000 80b8 	beq.w	800d8ce <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d75e:	4b45      	ldr	r3, [pc, #276]	@ (800d874 <tcp_receive+0xb24>)
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	f043 0320 	orr.w	r3, r3, #32
 800d766:	b2da      	uxtb	r2, r3
 800d768:	4b42      	ldr	r3, [pc, #264]	@ (800d874 <tcp_receive+0xb24>)
 800d76a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d76c:	e0af      	b.n	800d8ce <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d772:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	4a36      	ldr	r2, [pc, #216]	@ (800d858 <tcp_receive+0xb08>)
 800d77e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	891b      	ldrh	r3, [r3, #8]
 800d784:	461c      	mov	r4, r3
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	899b      	ldrh	r3, [r3, #12]
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	4618      	mov	r0, r3
 800d790:	f7fa fdfc 	bl	800838c <lwip_htons>
 800d794:	4603      	mov	r3, r0
 800d796:	b2db      	uxtb	r3, r3
 800d798:	f003 0303 	and.w	r3, r3, #3
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d001      	beq.n	800d7a4 <tcp_receive+0xa54>
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e000      	b.n	800d7a6 <tcp_receive+0xa56>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	191a      	adds	r2, r3, r4
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ac:	441a      	add	r2, r3
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7b6:	461c      	mov	r4, r3
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	891b      	ldrh	r3, [r3, #8]
 800d7bc:	461d      	mov	r5, r3
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	899b      	ldrh	r3, [r3, #12]
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fa fde0 	bl	800838c <lwip_htons>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	f003 0303 	and.w	r3, r3, #3
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d001      	beq.n	800d7dc <tcp_receive+0xa8c>
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e000      	b.n	800d7de <tcp_receive+0xa8e>
 800d7dc:	2300      	movs	r3, #0
 800d7de:	442b      	add	r3, r5
 800d7e0:	429c      	cmp	r4, r3
 800d7e2:	d206      	bcs.n	800d7f2 <tcp_receive+0xaa2>
 800d7e4:	4b1e      	ldr	r3, [pc, #120]	@ (800d860 <tcp_receive+0xb10>)
 800d7e6:	f240 622b 	movw	r2, #1579	@ 0x62b
 800d7ea:	4923      	ldr	r1, [pc, #140]	@ (800d878 <tcp_receive+0xb28>)
 800d7ec:	481e      	ldr	r0, [pc, #120]	@ (800d868 <tcp_receive+0xb18>)
 800d7ee:	f005 f851 	bl	8012894 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	891b      	ldrh	r3, [r3, #8]
 800d7f6:	461c      	mov	r4, r3
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	899b      	ldrh	r3, [r3, #12]
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	4618      	mov	r0, r3
 800d802:	f7fa fdc3 	bl	800838c <lwip_htons>
 800d806:	4603      	mov	r3, r0
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	f003 0303 	and.w	r3, r3, #3
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d001      	beq.n	800d816 <tcp_receive+0xac6>
 800d812:	2301      	movs	r3, #1
 800d814:	e000      	b.n	800d818 <tcp_receive+0xac8>
 800d816:	2300      	movs	r3, #0
 800d818:	1919      	adds	r1, r3, r4
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d81e:	b28b      	uxth	r3, r1
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	b29a      	uxth	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f7fc ff43 	bl	800a6b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	891b      	ldrh	r3, [r3, #8]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d028      	beq.n	800d88a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d838:	4b0d      	ldr	r3, [pc, #52]	@ (800d870 <tcp_receive+0xb20>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d01d      	beq.n	800d87c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800d840:	4b0b      	ldr	r3, [pc, #44]	@ (800d870 <tcp_receive+0xb20>)
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	4619      	mov	r1, r3
 800d84a:	4610      	mov	r0, r2
 800d84c:	f7fc f9be 	bl	8009bcc <pbuf_cat>
 800d850:	e018      	b.n	800d884 <tcp_receive+0xb34>
 800d852:	bf00      	nop
 800d854:	200089de 	.word	0x200089de
 800d858:	200089d4 	.word	0x200089d4
 800d85c:	200089b4 	.word	0x200089b4
 800d860:	08014d8c 	.word	0x08014d8c
 800d864:	0801516c 	.word	0x0801516c
 800d868:	08014dd8 	.word	0x08014dd8
 800d86c:	080151a8 	.word	0x080151a8
 800d870:	200089e4 	.word	0x200089e4
 800d874:	200089e1 	.word	0x200089e1
 800d878:	080151c8 	.word	0x080151c8
            } else {
              recv_data = cseg->p;
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	4a70      	ldr	r2, [pc, #448]	@ (800da44 <tcp_receive+0xcf4>)
 800d882:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	2200      	movs	r2, #0
 800d888:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	899b      	ldrh	r3, [r3, #12]
 800d890:	b29b      	uxth	r3, r3
 800d892:	4618      	mov	r0, r3
 800d894:	f7fa fd7a 	bl	800838c <lwip_htons>
 800d898:	4603      	mov	r3, r0
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	f003 0301 	and.w	r3, r3, #1
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d00d      	beq.n	800d8c0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d8a4:	4b68      	ldr	r3, [pc, #416]	@ (800da48 <tcp_receive+0xcf8>)
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	f043 0320 	orr.w	r3, r3, #32
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	4b66      	ldr	r3, [pc, #408]	@ (800da48 <tcp_receive+0xcf8>)
 800d8b0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	7d1b      	ldrb	r3, [r3, #20]
 800d8b6:	2b04      	cmp	r3, #4
 800d8b8:	d102      	bne.n	800d8c0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2207      	movs	r2, #7
 800d8be:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800d8c8:	68b8      	ldr	r0, [r7, #8]
 800d8ca:	f7fd fbd4 	bl	800b076 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d008      	beq.n	800d8e8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	685a      	ldr	r2, [r3, #4]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	f43f af43 	beq.w	800d76e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	8b5b      	ldrh	r3, [r3, #26]
 800d8ec:	f003 0301 	and.w	r3, r3, #1
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d00e      	beq.n	800d912 <tcp_receive+0xbc2>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	8b5b      	ldrh	r3, [r3, #26]
 800d8f8:	f023 0301 	bic.w	r3, r3, #1
 800d8fc:	b29a      	uxth	r2, r3
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	835a      	strh	r2, [r3, #26]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	8b5b      	ldrh	r3, [r3, #26]
 800d906:	f043 0302 	orr.w	r3, r3, #2
 800d90a:	b29a      	uxth	r2, r3
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d910:	e187      	b.n	800dc22 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	8b5b      	ldrh	r3, [r3, #26]
 800d916:	f043 0301 	orr.w	r3, r3, #1
 800d91a:	b29a      	uxth	r2, r3
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d920:	e17f      	b.n	800dc22 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d926:	2b00      	cmp	r3, #0
 800d928:	d106      	bne.n	800d938 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d92a:	4848      	ldr	r0, [pc, #288]	@ (800da4c <tcp_receive+0xcfc>)
 800d92c:	f7fd fbbc 	bl	800b0a8 <tcp_seg_copy>
 800d930:	4602      	mov	r2, r0
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	675a      	str	r2, [r3, #116]	@ 0x74
 800d936:	e16c      	b.n	800dc12 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d938:	2300      	movs	r3, #0
 800d93a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d940:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d942:	e156      	b.n	800dbf2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800d944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d946:	68db      	ldr	r3, [r3, #12]
 800d948:	685a      	ldr	r2, [r3, #4]
 800d94a:	4b41      	ldr	r3, [pc, #260]	@ (800da50 <tcp_receive+0xd00>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d11d      	bne.n	800d98e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d952:	4b3e      	ldr	r3, [pc, #248]	@ (800da4c <tcp_receive+0xcfc>)
 800d954:	891a      	ldrh	r2, [r3, #8]
 800d956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d958:	891b      	ldrh	r3, [r3, #8]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	f240 814e 	bls.w	800dbfc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d960:	483a      	ldr	r0, [pc, #232]	@ (800da4c <tcp_receive+0xcfc>)
 800d962:	f7fd fba1 	bl	800b0a8 <tcp_seg_copy>
 800d966:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	f000 8148 	beq.w	800dc00 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800d970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d972:	2b00      	cmp	r3, #0
 800d974:	d003      	beq.n	800d97e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800d976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d978:	697a      	ldr	r2, [r7, #20]
 800d97a:	601a      	str	r2, [r3, #0]
 800d97c:	e002      	b.n	800d984 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	697a      	ldr	r2, [r7, #20]
 800d982:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d984:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d986:	6978      	ldr	r0, [r7, #20]
 800d988:	f7ff f8de 	bl	800cb48 <tcp_oos_insert_segment>
                }
                break;
 800d98c:	e138      	b.n	800dc00 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d98e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d990:	2b00      	cmp	r3, #0
 800d992:	d117      	bne.n	800d9c4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d994:	4b2e      	ldr	r3, [pc, #184]	@ (800da50 <tcp_receive+0xd00>)
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d99a:	68db      	ldr	r3, [r3, #12]
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	1ad3      	subs	r3, r2, r3
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	da57      	bge.n	800da54 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d9a4:	4829      	ldr	r0, [pc, #164]	@ (800da4c <tcp_receive+0xcfc>)
 800d9a6:	f7fd fb7f 	bl	800b0a8 <tcp_seg_copy>
 800d9aa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f000 8128 	beq.w	800dc04 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	69ba      	ldr	r2, [r7, #24]
 800d9b8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d9ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d9bc:	69b8      	ldr	r0, [r7, #24]
 800d9be:	f7ff f8c3 	bl	800cb48 <tcp_oos_insert_segment>
                  }
                  break;
 800d9c2:	e11f      	b.n	800dc04 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d9c4:	4b22      	ldr	r3, [pc, #136]	@ (800da50 <tcp_receive+0xd00>)
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	1ad3      	subs	r3, r2, r3
 800d9d0:	3b01      	subs	r3, #1
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	db3e      	blt.n	800da54 <tcp_receive+0xd04>
 800d9d6:	4b1e      	ldr	r3, [pc, #120]	@ (800da50 <tcp_receive+0xd00>)
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	1ad3      	subs	r3, r2, r3
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	dc35      	bgt.n	800da54 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d9e8:	4818      	ldr	r0, [pc, #96]	@ (800da4c <tcp_receive+0xcfc>)
 800d9ea:	f7fd fb5d 	bl	800b0a8 <tcp_seg_copy>
 800d9ee:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	f000 8108 	beq.w	800dc08 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da00:	8912      	ldrh	r2, [r2, #8]
 800da02:	441a      	add	r2, r3
 800da04:	4b12      	ldr	r3, [pc, #72]	@ (800da50 <tcp_receive+0xd00>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	1ad3      	subs	r3, r2, r3
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	dd12      	ble.n	800da34 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800da0e:	4b10      	ldr	r3, [pc, #64]	@ (800da50 <tcp_receive+0xd00>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	b29a      	uxth	r2, r3
 800da14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	1ad3      	subs	r3, r2, r3
 800da1e:	b29a      	uxth	r2, r3
 800da20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da22:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800da24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da26:	685a      	ldr	r2, [r3, #4]
 800da28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da2a:	891b      	ldrh	r3, [r3, #8]
 800da2c:	4619      	mov	r1, r3
 800da2e:	4610      	mov	r0, r2
 800da30:	f7fb fe84 	bl	800973c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800da34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da36:	69fa      	ldr	r2, [r7, #28]
 800da38:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800da3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800da3c:	69f8      	ldr	r0, [r7, #28]
 800da3e:	f7ff f883 	bl	800cb48 <tcp_oos_insert_segment>
                  }
                  break;
 800da42:	e0e1      	b.n	800dc08 <tcp_receive+0xeb8>
 800da44:	200089e4 	.word	0x200089e4
 800da48:	200089e1 	.word	0x200089e1
 800da4c:	200089b4 	.word	0x200089b4
 800da50:	200089d4 	.word	0x200089d4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800da54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da56:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800da58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f040 80c5 	bne.w	800dbec <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800da62:	4b7f      	ldr	r3, [pc, #508]	@ (800dc60 <tcp_receive+0xf10>)
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800da6e:	2b00      	cmp	r3, #0
 800da70:	f340 80bc 	ble.w	800dbec <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800da74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	899b      	ldrh	r3, [r3, #12]
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7fa fc85 	bl	800838c <lwip_htons>
 800da82:	4603      	mov	r3, r0
 800da84:	b2db      	uxtb	r3, r3
 800da86:	f003 0301 	and.w	r3, r3, #1
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f040 80be 	bne.w	800dc0c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800da90:	4874      	ldr	r0, [pc, #464]	@ (800dc64 <tcp_receive+0xf14>)
 800da92:	f7fd fb09 	bl	800b0a8 <tcp_seg_copy>
 800da96:	4602      	mov	r2, r0
 800da98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da9a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800da9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	f000 80b5 	beq.w	800dc10 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800daa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800daae:	8912      	ldrh	r2, [r2, #8]
 800dab0:	441a      	add	r2, r3
 800dab2:	4b6b      	ldr	r3, [pc, #428]	@ (800dc60 <tcp_receive+0xf10>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	1ad3      	subs	r3, r2, r3
 800dab8:	2b00      	cmp	r3, #0
 800daba:	dd12      	ble.n	800dae2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800dabc:	4b68      	ldr	r3, [pc, #416]	@ (800dc60 <tcp_receive+0xf10>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	b29a      	uxth	r2, r3
 800dac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	b29b      	uxth	r3, r3
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	b29a      	uxth	r2, r3
 800dace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800dad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad4:	685a      	ldr	r2, [r3, #4]
 800dad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad8:	891b      	ldrh	r3, [r3, #8]
 800dada:	4619      	mov	r1, r3
 800dadc:	4610      	mov	r0, r2
 800dade:	f7fb fe2d 	bl	800973c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800dae2:	4b61      	ldr	r3, [pc, #388]	@ (800dc68 <tcp_receive+0xf18>)
 800dae4:	881b      	ldrh	r3, [r3, #0]
 800dae6:	461a      	mov	r2, r3
 800dae8:	4b5d      	ldr	r3, [pc, #372]	@ (800dc60 <tcp_receive+0xf10>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	441a      	add	r2, r3
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daf2:	6879      	ldr	r1, [r7, #4]
 800daf4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800daf6:	440b      	add	r3, r1
 800daf8:	1ad3      	subs	r3, r2, r3
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f340 8088 	ble.w	800dc10 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800db00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	899b      	ldrh	r3, [r3, #12]
 800db08:	b29b      	uxth	r3, r3
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fa fc3e 	bl	800838c <lwip_htons>
 800db10:	4603      	mov	r3, r0
 800db12:	b2db      	uxtb	r3, r3
 800db14:	f003 0301 	and.w	r3, r3, #1
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d021      	beq.n	800db60 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800db1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	899b      	ldrh	r3, [r3, #12]
 800db24:	b29b      	uxth	r3, r3
 800db26:	b21b      	sxth	r3, r3
 800db28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800db2c:	b21c      	sxth	r4, r3
 800db2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	68db      	ldr	r3, [r3, #12]
 800db34:	899b      	ldrh	r3, [r3, #12]
 800db36:	b29b      	uxth	r3, r3
 800db38:	4618      	mov	r0, r3
 800db3a:	f7fa fc27 	bl	800838c <lwip_htons>
 800db3e:	4603      	mov	r3, r0
 800db40:	b2db      	uxtb	r3, r3
 800db42:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800db46:	b29b      	uxth	r3, r3
 800db48:	4618      	mov	r0, r3
 800db4a:	f7fa fc1f 	bl	800838c <lwip_htons>
 800db4e:	4603      	mov	r3, r0
 800db50:	b21b      	sxth	r3, r3
 800db52:	4323      	orrs	r3, r4
 800db54:	b21a      	sxth	r2, r3
 800db56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	68db      	ldr	r3, [r3, #12]
 800db5c:	b292      	uxth	r2, r2
 800db5e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db64:	b29a      	uxth	r2, r3
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db6a:	4413      	add	r3, r2
 800db6c:	b299      	uxth	r1, r3
 800db6e:	4b3c      	ldr	r3, [pc, #240]	@ (800dc60 <tcp_receive+0xf10>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	b29a      	uxth	r2, r3
 800db74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	1a8a      	subs	r2, r1, r2
 800db7a:	b292      	uxth	r2, r2
 800db7c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800db7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	685a      	ldr	r2, [r3, #4]
 800db84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	891b      	ldrh	r3, [r3, #8]
 800db8a:	4619      	mov	r1, r3
 800db8c:	4610      	mov	r0, r2
 800db8e:	f7fb fdd5 	bl	800973c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800db92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	891c      	ldrh	r4, [r3, #8]
 800db98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	899b      	ldrh	r3, [r3, #12]
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fa fbf2 	bl	800838c <lwip_htons>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	b2db      	uxtb	r3, r3
 800dbac:	f003 0303 	and.w	r3, r3, #3
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d001      	beq.n	800dbb8 <tcp_receive+0xe68>
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e000      	b.n	800dbba <tcp_receive+0xe6a>
 800dbb8:	2300      	movs	r3, #0
 800dbba:	4423      	add	r3, r4
 800dbbc:	b29a      	uxth	r2, r3
 800dbbe:	4b2a      	ldr	r3, [pc, #168]	@ (800dc68 <tcp_receive+0xf18>)
 800dbc0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dbc2:	4b29      	ldr	r3, [pc, #164]	@ (800dc68 <tcp_receive+0xf18>)
 800dbc4:	881b      	ldrh	r3, [r3, #0]
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	4b25      	ldr	r3, [pc, #148]	@ (800dc60 <tcp_receive+0xf10>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	441a      	add	r2, r3
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbd2:	6879      	ldr	r1, [r7, #4]
 800dbd4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dbd6:	440b      	add	r3, r1
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d019      	beq.n	800dc10 <tcp_receive+0xec0>
 800dbdc:	4b23      	ldr	r3, [pc, #140]	@ (800dc6c <tcp_receive+0xf1c>)
 800dbde:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800dbe2:	4923      	ldr	r1, [pc, #140]	@ (800dc70 <tcp_receive+0xf20>)
 800dbe4:	4823      	ldr	r0, [pc, #140]	@ (800dc74 <tcp_receive+0xf24>)
 800dbe6:	f004 fe55 	bl	8012894 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800dbea:	e011      	b.n	800dc10 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dbec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	f47f aea5 	bne.w	800d944 <tcp_receive+0xbf4>
 800dbfa:	e00a      	b.n	800dc12 <tcp_receive+0xec2>
                break;
 800dbfc:	bf00      	nop
 800dbfe:	e008      	b.n	800dc12 <tcp_receive+0xec2>
                break;
 800dc00:	bf00      	nop
 800dc02:	e006      	b.n	800dc12 <tcp_receive+0xec2>
                  break;
 800dc04:	bf00      	nop
 800dc06:	e004      	b.n	800dc12 <tcp_receive+0xec2>
                  break;
 800dc08:	bf00      	nop
 800dc0a:	e002      	b.n	800dc12 <tcp_receive+0xec2>
                  break;
 800dc0c:	bf00      	nop
 800dc0e:	e000      	b.n	800dc12 <tcp_receive+0xec2>
                break;
 800dc10:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f001 fa30 	bl	800f078 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800dc18:	e003      	b.n	800dc22 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f001 fa2c 	bl	800f078 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dc20:	e01a      	b.n	800dc58 <tcp_receive+0xf08>
 800dc22:	e019      	b.n	800dc58 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800dc24:	4b0e      	ldr	r3, [pc, #56]	@ (800dc60 <tcp_receive+0xf10>)
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc2c:	1ad3      	subs	r3, r2, r3
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	db0a      	blt.n	800dc48 <tcp_receive+0xef8>
 800dc32:	4b0b      	ldr	r3, [pc, #44]	@ (800dc60 <tcp_receive+0xf10>)
 800dc34:	681a      	ldr	r2, [r3, #0]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc3a:	6879      	ldr	r1, [r7, #4]
 800dc3c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dc3e:	440b      	add	r3, r1
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	3301      	adds	r3, #1
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	dd07      	ble.n	800dc58 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	8b5b      	ldrh	r3, [r3, #26]
 800dc4c:	f043 0302 	orr.w	r3, r3, #2
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800dc56:	e7ff      	b.n	800dc58 <tcp_receive+0xf08>
 800dc58:	bf00      	nop
 800dc5a:	3750      	adds	r7, #80	@ 0x50
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bdb0      	pop	{r4, r5, r7, pc}
 800dc60:	200089d4 	.word	0x200089d4
 800dc64:	200089b4 	.word	0x200089b4
 800dc68:	200089de 	.word	0x200089de
 800dc6c:	08014d8c 	.word	0x08014d8c
 800dc70:	08015134 	.word	0x08015134
 800dc74:	08014dd8 	.word	0x08014dd8

0800dc78 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b083      	sub	sp, #12
 800dc7c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800dc7e:	4b15      	ldr	r3, [pc, #84]	@ (800dcd4 <tcp_get_next_optbyte+0x5c>)
 800dc80:	881b      	ldrh	r3, [r3, #0]
 800dc82:	1c5a      	adds	r2, r3, #1
 800dc84:	b291      	uxth	r1, r2
 800dc86:	4a13      	ldr	r2, [pc, #76]	@ (800dcd4 <tcp_get_next_optbyte+0x5c>)
 800dc88:	8011      	strh	r1, [r2, #0]
 800dc8a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800dc8c:	4b12      	ldr	r3, [pc, #72]	@ (800dcd8 <tcp_get_next_optbyte+0x60>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d004      	beq.n	800dc9e <tcp_get_next_optbyte+0x26>
 800dc94:	4b11      	ldr	r3, [pc, #68]	@ (800dcdc <tcp_get_next_optbyte+0x64>)
 800dc96:	881b      	ldrh	r3, [r3, #0]
 800dc98:	88fa      	ldrh	r2, [r7, #6]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d208      	bcs.n	800dcb0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800dc9e:	4b10      	ldr	r3, [pc, #64]	@ (800dce0 <tcp_get_next_optbyte+0x68>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	3314      	adds	r3, #20
 800dca4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800dca6:	88fb      	ldrh	r3, [r7, #6]
 800dca8:	683a      	ldr	r2, [r7, #0]
 800dcaa:	4413      	add	r3, r2
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	e00b      	b.n	800dcc8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800dcb0:	88fb      	ldrh	r3, [r7, #6]
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	4b09      	ldr	r3, [pc, #36]	@ (800dcdc <tcp_get_next_optbyte+0x64>)
 800dcb6:	881b      	ldrh	r3, [r3, #0]
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	1ad3      	subs	r3, r2, r3
 800dcbc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800dcbe:	4b06      	ldr	r3, [pc, #24]	@ (800dcd8 <tcp_get_next_optbyte+0x60>)
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	797b      	ldrb	r3, [r7, #5]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	370c      	adds	r7, #12
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr
 800dcd4:	200089d0 	.word	0x200089d0
 800dcd8:	200089cc 	.word	0x200089cc
 800dcdc:	200089ca 	.word	0x200089ca
 800dce0:	200089c4 	.word	0x200089c4

0800dce4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b084      	sub	sp, #16
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d106      	bne.n	800dd00 <tcp_parseopt+0x1c>
 800dcf2:	4b32      	ldr	r3, [pc, #200]	@ (800ddbc <tcp_parseopt+0xd8>)
 800dcf4:	f240 727d 	movw	r2, #1917	@ 0x77d
 800dcf8:	4931      	ldr	r1, [pc, #196]	@ (800ddc0 <tcp_parseopt+0xdc>)
 800dcfa:	4832      	ldr	r0, [pc, #200]	@ (800ddc4 <tcp_parseopt+0xe0>)
 800dcfc:	f004 fdca 	bl	8012894 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800dd00:	4b31      	ldr	r3, [pc, #196]	@ (800ddc8 <tcp_parseopt+0xe4>)
 800dd02:	881b      	ldrh	r3, [r3, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d056      	beq.n	800ddb6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dd08:	4b30      	ldr	r3, [pc, #192]	@ (800ddcc <tcp_parseopt+0xe8>)
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	801a      	strh	r2, [r3, #0]
 800dd0e:	e046      	b.n	800dd9e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800dd10:	f7ff ffb2 	bl	800dc78 <tcp_get_next_optbyte>
 800dd14:	4603      	mov	r3, r0
 800dd16:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800dd18:	7bfb      	ldrb	r3, [r7, #15]
 800dd1a:	2b02      	cmp	r3, #2
 800dd1c:	d006      	beq.n	800dd2c <tcp_parseopt+0x48>
 800dd1e:	2b02      	cmp	r3, #2
 800dd20:	dc2a      	bgt.n	800dd78 <tcp_parseopt+0x94>
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d042      	beq.n	800ddac <tcp_parseopt+0xc8>
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d038      	beq.n	800dd9c <tcp_parseopt+0xb8>
 800dd2a:	e025      	b.n	800dd78 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800dd2c:	f7ff ffa4 	bl	800dc78 <tcp_get_next_optbyte>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b04      	cmp	r3, #4
 800dd34:	d13c      	bne.n	800ddb0 <tcp_parseopt+0xcc>
 800dd36:	4b25      	ldr	r3, [pc, #148]	@ (800ddcc <tcp_parseopt+0xe8>)
 800dd38:	881b      	ldrh	r3, [r3, #0]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	4a22      	ldr	r2, [pc, #136]	@ (800ddc8 <tcp_parseopt+0xe4>)
 800dd3e:	8812      	ldrh	r2, [r2, #0]
 800dd40:	4293      	cmp	r3, r2
 800dd42:	da35      	bge.n	800ddb0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800dd44:	f7ff ff98 	bl	800dc78 <tcp_get_next_optbyte>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	021b      	lsls	r3, r3, #8
 800dd4c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800dd4e:	f7ff ff93 	bl	800dc78 <tcp_get_next_optbyte>
 800dd52:	4603      	mov	r3, r0
 800dd54:	461a      	mov	r2, r3
 800dd56:	89bb      	ldrh	r3, [r7, #12]
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800dd5c:	89bb      	ldrh	r3, [r7, #12]
 800dd5e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800dd62:	d804      	bhi.n	800dd6e <tcp_parseopt+0x8a>
 800dd64:	89bb      	ldrh	r3, [r7, #12]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d001      	beq.n	800dd6e <tcp_parseopt+0x8a>
 800dd6a:	89ba      	ldrh	r2, [r7, #12]
 800dd6c:	e001      	b.n	800dd72 <tcp_parseopt+0x8e>
 800dd6e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800dd76:	e012      	b.n	800dd9e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800dd78:	f7ff ff7e 	bl	800dc78 <tcp_get_next_optbyte>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800dd80:	7afb      	ldrb	r3, [r7, #11]
 800dd82:	2b01      	cmp	r3, #1
 800dd84:	d916      	bls.n	800ddb4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800dd86:	7afb      	ldrb	r3, [r7, #11]
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	4b10      	ldr	r3, [pc, #64]	@ (800ddcc <tcp_parseopt+0xe8>)
 800dd8c:	881b      	ldrh	r3, [r3, #0]
 800dd8e:	4413      	add	r3, r2
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	3b02      	subs	r3, #2
 800dd94:	b29a      	uxth	r2, r3
 800dd96:	4b0d      	ldr	r3, [pc, #52]	@ (800ddcc <tcp_parseopt+0xe8>)
 800dd98:	801a      	strh	r2, [r3, #0]
 800dd9a:	e000      	b.n	800dd9e <tcp_parseopt+0xba>
          break;
 800dd9c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dd9e:	4b0b      	ldr	r3, [pc, #44]	@ (800ddcc <tcp_parseopt+0xe8>)
 800dda0:	881a      	ldrh	r2, [r3, #0]
 800dda2:	4b09      	ldr	r3, [pc, #36]	@ (800ddc8 <tcp_parseopt+0xe4>)
 800dda4:	881b      	ldrh	r3, [r3, #0]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d3b2      	bcc.n	800dd10 <tcp_parseopt+0x2c>
 800ddaa:	e004      	b.n	800ddb6 <tcp_parseopt+0xd2>
          return;
 800ddac:	bf00      	nop
 800ddae:	e002      	b.n	800ddb6 <tcp_parseopt+0xd2>
            return;
 800ddb0:	bf00      	nop
 800ddb2:	e000      	b.n	800ddb6 <tcp_parseopt+0xd2>
            return;
 800ddb4:	bf00      	nop
      }
    }
  }
}
 800ddb6:	3710      	adds	r7, #16
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	08014d8c 	.word	0x08014d8c
 800ddc0:	080151f0 	.word	0x080151f0
 800ddc4:	08014dd8 	.word	0x08014dd8
 800ddc8:	200089c8 	.word	0x200089c8
 800ddcc:	200089d0 	.word	0x200089d0

0800ddd0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ddd4:	4b05      	ldr	r3, [pc, #20]	@ (800ddec <tcp_trigger_input_pcb_close+0x1c>)
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	f043 0310 	orr.w	r3, r3, #16
 800dddc:	b2da      	uxtb	r2, r3
 800ddde:	4b03      	ldr	r3, [pc, #12]	@ (800ddec <tcp_trigger_input_pcb_close+0x1c>)
 800dde0:	701a      	strb	r2, [r3, #0]
}
 800dde2:	bf00      	nop
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr
 800ddec:	200089e1 	.word	0x200089e1

0800ddf0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d00a      	beq.n	800de18 <tcp_route+0x28>
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	7a1b      	ldrb	r3, [r3, #8]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d006      	beq.n	800de18 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	7a1b      	ldrb	r3, [r3, #8]
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fb faba 	bl	8009388 <netif_get_by_index>
 800de14:	4603      	mov	r3, r0
 800de16:	e003      	b.n	800de20 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f003 f9cb 	bl	80111b4 <ip4_route>
 800de1e:	4603      	mov	r3, r0
  }
}
 800de20:	4618      	mov	r0, r3
 800de22:	3710      	adds	r7, #16
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800de28:	b590      	push	{r4, r7, lr}
 800de2a:	b087      	sub	sp, #28
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	603b      	str	r3, [r7, #0]
 800de34:	4613      	mov	r3, r2
 800de36:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d105      	bne.n	800de4a <tcp_create_segment+0x22>
 800de3e:	4b43      	ldr	r3, [pc, #268]	@ (800df4c <tcp_create_segment+0x124>)
 800de40:	22a3      	movs	r2, #163	@ 0xa3
 800de42:	4943      	ldr	r1, [pc, #268]	@ (800df50 <tcp_create_segment+0x128>)
 800de44:	4843      	ldr	r0, [pc, #268]	@ (800df54 <tcp_create_segment+0x12c>)
 800de46:	f004 fd25 	bl	8012894 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d105      	bne.n	800de5c <tcp_create_segment+0x34>
 800de50:	4b3e      	ldr	r3, [pc, #248]	@ (800df4c <tcp_create_segment+0x124>)
 800de52:	22a4      	movs	r2, #164	@ 0xa4
 800de54:	4940      	ldr	r1, [pc, #256]	@ (800df58 <tcp_create_segment+0x130>)
 800de56:	483f      	ldr	r0, [pc, #252]	@ (800df54 <tcp_create_segment+0x12c>)
 800de58:	f004 fd1c 	bl	8012894 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800de5c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	b2db      	uxtb	r3, r3
 800de64:	f003 0304 	and.w	r3, r3, #4
 800de68:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800de6a:	2003      	movs	r0, #3
 800de6c:	f7fa ff06 	bl	8008c7c <memp_malloc>
 800de70:	6138      	str	r0, [r7, #16]
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d104      	bne.n	800de82 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800de78:	68b8      	ldr	r0, [r7, #8]
 800de7a:	f7fb fde5 	bl	8009a48 <pbuf_free>
    return NULL;
 800de7e:	2300      	movs	r3, #0
 800de80:	e060      	b.n	800df44 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800de88:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	2200      	movs	r2, #0
 800de8e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	68ba      	ldr	r2, [r7, #8]
 800de94:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	891a      	ldrh	r2, [r3, #8]
 800de9a:	7dfb      	ldrb	r3, [r7, #23]
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d205      	bcs.n	800deae <tcp_create_segment+0x86>
 800dea2:	4b2a      	ldr	r3, [pc, #168]	@ (800df4c <tcp_create_segment+0x124>)
 800dea4:	22b0      	movs	r2, #176	@ 0xb0
 800dea6:	492d      	ldr	r1, [pc, #180]	@ (800df5c <tcp_create_segment+0x134>)
 800dea8:	482a      	ldr	r0, [pc, #168]	@ (800df54 <tcp_create_segment+0x12c>)
 800deaa:	f004 fcf3 	bl	8012894 <iprintf>
  seg->len = p->tot_len - optlen;
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	891a      	ldrh	r2, [r3, #8]
 800deb2:	7dfb      	ldrb	r3, [r7, #23]
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	1ad3      	subs	r3, r2, r3
 800deb8:	b29a      	uxth	r2, r3
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800debe:	2114      	movs	r1, #20
 800dec0:	68b8      	ldr	r0, [r7, #8]
 800dec2:	f7fb fd2b 	bl	800991c <pbuf_add_header>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d004      	beq.n	800ded6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800decc:	6938      	ldr	r0, [r7, #16]
 800dece:	f7fd f8d2 	bl	800b076 <tcp_seg_free>
    return NULL;
 800ded2:	2300      	movs	r3, #0
 800ded4:	e036      	b.n	800df44 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	685b      	ldr	r3, [r3, #4]
 800deda:	685a      	ldr	r2, [r3, #4]
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	8ada      	ldrh	r2, [r3, #22]
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	68dc      	ldr	r4, [r3, #12]
 800dee8:	4610      	mov	r0, r2
 800deea:	f7fa fa4f 	bl	800838c <lwip_htons>
 800deee:	4603      	mov	r3, r0
 800def0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	8b1a      	ldrh	r2, [r3, #24]
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	68dc      	ldr	r4, [r3, #12]
 800defa:	4610      	mov	r0, r2
 800defc:	f7fa fa46 	bl	800838c <lwip_htons>
 800df00:	4603      	mov	r3, r0
 800df02:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	68dc      	ldr	r4, [r3, #12]
 800df08:	6838      	ldr	r0, [r7, #0]
 800df0a:	f7fa fa55 	bl	80083b8 <lwip_htonl>
 800df0e:	4603      	mov	r3, r0
 800df10:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800df12:	7dfb      	ldrb	r3, [r7, #23]
 800df14:	089b      	lsrs	r3, r3, #2
 800df16:	b2db      	uxtb	r3, r3
 800df18:	3305      	adds	r3, #5
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	031b      	lsls	r3, r3, #12
 800df1e:	b29a      	uxth	r2, r3
 800df20:	79fb      	ldrb	r3, [r7, #7]
 800df22:	b29b      	uxth	r3, r3
 800df24:	4313      	orrs	r3, r2
 800df26:	b29a      	uxth	r2, r3
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	68dc      	ldr	r4, [r3, #12]
 800df2c:	4610      	mov	r0, r2
 800df2e:	f7fa fa2d 	bl	800838c <lwip_htons>
 800df32:	4603      	mov	r3, r0
 800df34:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	68db      	ldr	r3, [r3, #12]
 800df3a:	2200      	movs	r2, #0
 800df3c:	749a      	strb	r2, [r3, #18]
 800df3e:	2200      	movs	r2, #0
 800df40:	74da      	strb	r2, [r3, #19]
  return seg;
 800df42:	693b      	ldr	r3, [r7, #16]
}
 800df44:	4618      	mov	r0, r3
 800df46:	371c      	adds	r7, #28
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd90      	pop	{r4, r7, pc}
 800df4c:	0801520c 	.word	0x0801520c
 800df50:	08015240 	.word	0x08015240
 800df54:	08015260 	.word	0x08015260
 800df58:	08015288 	.word	0x08015288
 800df5c:	080152ac 	.word	0x080152ac

0800df60 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800df60:	b590      	push	{r4, r7, lr}
 800df62:	b08b      	sub	sp, #44	@ 0x2c
 800df64:	af02      	add	r7, sp, #8
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	460b      	mov	r3, r1
 800df6a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800df6c:	2300      	movs	r3, #0
 800df6e:	61fb      	str	r3, [r7, #28]
 800df70:	2300      	movs	r3, #0
 800df72:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800df74:	2300      	movs	r3, #0
 800df76:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d106      	bne.n	800df8c <tcp_split_unsent_seg+0x2c>
 800df7e:	4b95      	ldr	r3, [pc, #596]	@ (800e1d4 <tcp_split_unsent_seg+0x274>)
 800df80:	f240 324b 	movw	r2, #843	@ 0x34b
 800df84:	4994      	ldr	r1, [pc, #592]	@ (800e1d8 <tcp_split_unsent_seg+0x278>)
 800df86:	4895      	ldr	r0, [pc, #596]	@ (800e1dc <tcp_split_unsent_seg+0x27c>)
 800df88:	f004 fc84 	bl	8012894 <iprintf>

  useg = pcb->unsent;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df90:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d102      	bne.n	800df9e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800df98:	f04f 33ff 	mov.w	r3, #4294967295
 800df9c:	e116      	b.n	800e1cc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800df9e:	887b      	ldrh	r3, [r7, #2]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d109      	bne.n	800dfb8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800dfa4:	4b8b      	ldr	r3, [pc, #556]	@ (800e1d4 <tcp_split_unsent_seg+0x274>)
 800dfa6:	f240 3253 	movw	r2, #851	@ 0x353
 800dfaa:	498d      	ldr	r1, [pc, #564]	@ (800e1e0 <tcp_split_unsent_seg+0x280>)
 800dfac:	488b      	ldr	r0, [pc, #556]	@ (800e1dc <tcp_split_unsent_seg+0x27c>)
 800dfae:	f004 fc71 	bl	8012894 <iprintf>
    return ERR_VAL;
 800dfb2:	f06f 0305 	mvn.w	r3, #5
 800dfb6:	e109      	b.n	800e1cc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	891b      	ldrh	r3, [r3, #8]
 800dfbc:	887a      	ldrh	r2, [r7, #2]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d301      	bcc.n	800dfc6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	e102      	b.n	800e1cc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dfca:	887a      	ldrh	r2, [r7, #2]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d906      	bls.n	800dfde <tcp_split_unsent_seg+0x7e>
 800dfd0:	4b80      	ldr	r3, [pc, #512]	@ (800e1d4 <tcp_split_unsent_seg+0x274>)
 800dfd2:	f240 325b 	movw	r2, #859	@ 0x35b
 800dfd6:	4983      	ldr	r1, [pc, #524]	@ (800e1e4 <tcp_split_unsent_seg+0x284>)
 800dfd8:	4880      	ldr	r0, [pc, #512]	@ (800e1dc <tcp_split_unsent_seg+0x27c>)
 800dfda:	f004 fc5b 	bl	8012894 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	891b      	ldrh	r3, [r3, #8]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d106      	bne.n	800dff4 <tcp_split_unsent_seg+0x94>
 800dfe6:	4b7b      	ldr	r3, [pc, #492]	@ (800e1d4 <tcp_split_unsent_seg+0x274>)
 800dfe8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800dfec:	497e      	ldr	r1, [pc, #504]	@ (800e1e8 <tcp_split_unsent_seg+0x288>)
 800dfee:	487b      	ldr	r0, [pc, #492]	@ (800e1dc <tcp_split_unsent_seg+0x27c>)
 800dff0:	f004 fc50 	bl	8012894 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	7a9b      	ldrb	r3, [r3, #10]
 800dff8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800dffa:	7bfb      	ldrb	r3, [r7, #15]
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	f003 0304 	and.w	r3, r3, #4
 800e004:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	891a      	ldrh	r2, [r3, #8]
 800e00a:	887b      	ldrh	r3, [r7, #2]
 800e00c:	1ad3      	subs	r3, r2, r3
 800e00e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e010:	7bbb      	ldrb	r3, [r7, #14]
 800e012:	b29a      	uxth	r2, r3
 800e014:	89bb      	ldrh	r3, [r7, #12]
 800e016:	4413      	add	r3, r2
 800e018:	b29b      	uxth	r3, r3
 800e01a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e01e:	4619      	mov	r1, r3
 800e020:	2036      	movs	r0, #54	@ 0x36
 800e022:	f7fb fa2d 	bl	8009480 <pbuf_alloc>
 800e026:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f000 80b7 	beq.w	800e19e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	685b      	ldr	r3, [r3, #4]
 800e034:	891a      	ldrh	r2, [r3, #8]
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	891b      	ldrh	r3, [r3, #8]
 800e03a:	1ad3      	subs	r3, r2, r3
 800e03c:	b29a      	uxth	r2, r3
 800e03e:	887b      	ldrh	r3, [r7, #2]
 800e040:	4413      	add	r3, r2
 800e042:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	6858      	ldr	r0, [r3, #4]
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	685a      	ldr	r2, [r3, #4]
 800e04c:	7bbb      	ldrb	r3, [r7, #14]
 800e04e:	18d1      	adds	r1, r2, r3
 800e050:	897b      	ldrh	r3, [r7, #10]
 800e052:	89ba      	ldrh	r2, [r7, #12]
 800e054:	f7fb fef2 	bl	8009e3c <pbuf_copy_partial>
 800e058:	4603      	mov	r3, r0
 800e05a:	461a      	mov	r2, r3
 800e05c:	89bb      	ldrh	r3, [r7, #12]
 800e05e:	4293      	cmp	r3, r2
 800e060:	f040 809f 	bne.w	800e1a2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	899b      	ldrh	r3, [r3, #12]
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7fa f98d 	bl	800838c <lwip_htons>
 800e072:	4603      	mov	r3, r0
 800e074:	b2db      	uxtb	r3, r3
 800e076:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e07a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e07c:	2300      	movs	r3, #0
 800e07e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e080:	7efb      	ldrb	r3, [r7, #27]
 800e082:	f003 0308 	and.w	r3, r3, #8
 800e086:	2b00      	cmp	r3, #0
 800e088:	d007      	beq.n	800e09a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e08a:	7efb      	ldrb	r3, [r7, #27]
 800e08c:	f023 0308 	bic.w	r3, r3, #8
 800e090:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e092:	7ebb      	ldrb	r3, [r7, #26]
 800e094:	f043 0308 	orr.w	r3, r3, #8
 800e098:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e09a:	7efb      	ldrb	r3, [r7, #27]
 800e09c:	f003 0301 	and.w	r3, r3, #1
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d007      	beq.n	800e0b4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e0a4:	7efb      	ldrb	r3, [r7, #27]
 800e0a6:	f023 0301 	bic.w	r3, r3, #1
 800e0aa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e0ac:	7ebb      	ldrb	r3, [r7, #26]
 800e0ae:	f043 0301 	orr.w	r3, r3, #1
 800e0b2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fa f97c 	bl	80083b8 <lwip_htonl>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	887b      	ldrh	r3, [r7, #2]
 800e0c4:	18d1      	adds	r1, r2, r3
 800e0c6:	7eba      	ldrb	r2, [r7, #26]
 800e0c8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ca:	9300      	str	r3, [sp, #0]
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	6939      	ldr	r1, [r7, #16]
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f7ff fea9 	bl	800de28 <tcp_create_segment>
 800e0d6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d063      	beq.n	800e1a6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7fb fd38 	bl	8009b58 <pbuf_clen>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e0f2:	1a9b      	subs	r3, r3, r2
 800e0f4:	b29a      	uxth	r2, r3
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	6858      	ldr	r0, [r3, #4]
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	891a      	ldrh	r2, [r3, #8]
 800e106:	89bb      	ldrh	r3, [r7, #12]
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	4619      	mov	r1, r3
 800e10e:	f7fb fb15 	bl	800973c <pbuf_realloc>
  useg->len -= remainder;
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	891a      	ldrh	r2, [r3, #8]
 800e116:	89bb      	ldrh	r3, [r7, #12]
 800e118:	1ad3      	subs	r3, r2, r3
 800e11a:	b29a      	uxth	r2, r3
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	899b      	ldrh	r3, [r3, #12]
 800e126:	b29c      	uxth	r4, r3
 800e128:	7efb      	ldrb	r3, [r7, #27]
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fa f92d 	bl	800838c <lwip_htons>
 800e132:	4603      	mov	r3, r0
 800e134:	461a      	mov	r2, r3
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	4322      	orrs	r2, r4
 800e13c:	b292      	uxth	r2, r2
 800e13e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	4618      	mov	r0, r3
 800e146:	f7fb fd07 	bl	8009b58 <pbuf_clen>
 800e14a:	4603      	mov	r3, r0
 800e14c:	461a      	mov	r2, r3
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e154:	4413      	add	r3, r2
 800e156:	b29a      	uxth	r2, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	4618      	mov	r0, r3
 800e164:	f7fb fcf8 	bl	8009b58 <pbuf_clen>
 800e168:	4603      	mov	r3, r0
 800e16a:	461a      	mov	r2, r3
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e172:	4413      	add	r3, r2
 800e174:	b29a      	uxth	r2, r3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	69fb      	ldr	r3, [r7, #28]
 800e182:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	69fa      	ldr	r2, [r7, #28]
 800e188:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d103      	bne.n	800e19a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2200      	movs	r2, #0
 800e196:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e19a:	2300      	movs	r3, #0
 800e19c:	e016      	b.n	800e1cc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e19e:	bf00      	nop
 800e1a0:	e002      	b.n	800e1a8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e1a2:	bf00      	nop
 800e1a4:	e000      	b.n	800e1a8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e1a6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d006      	beq.n	800e1bc <tcp_split_unsent_seg+0x25c>
 800e1ae:	4b09      	ldr	r3, [pc, #36]	@ (800e1d4 <tcp_split_unsent_seg+0x274>)
 800e1b0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800e1b4:	490d      	ldr	r1, [pc, #52]	@ (800e1ec <tcp_split_unsent_seg+0x28c>)
 800e1b6:	4809      	ldr	r0, [pc, #36]	@ (800e1dc <tcp_split_unsent_seg+0x27c>)
 800e1b8:	f004 fb6c 	bl	8012894 <iprintf>
  if (p != NULL) {
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d002      	beq.n	800e1c8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e1c2:	6938      	ldr	r0, [r7, #16]
 800e1c4:	f7fb fc40 	bl	8009a48 <pbuf_free>
  }

  return ERR_MEM;
 800e1c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3724      	adds	r7, #36	@ 0x24
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd90      	pop	{r4, r7, pc}
 800e1d4:	0801520c 	.word	0x0801520c
 800e1d8:	080155a0 	.word	0x080155a0
 800e1dc:	08015260 	.word	0x08015260
 800e1e0:	080155c4 	.word	0x080155c4
 800e1e4:	080155e8 	.word	0x080155e8
 800e1e8:	080155f8 	.word	0x080155f8
 800e1ec:	08015608 	.word	0x08015608

0800e1f0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e1f0:	b590      	push	{r4, r7, lr}
 800e1f2:	b085      	sub	sp, #20
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d106      	bne.n	800e20c <tcp_send_fin+0x1c>
 800e1fe:	4b21      	ldr	r3, [pc, #132]	@ (800e284 <tcp_send_fin+0x94>)
 800e200:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800e204:	4920      	ldr	r1, [pc, #128]	@ (800e288 <tcp_send_fin+0x98>)
 800e206:	4821      	ldr	r0, [pc, #132]	@ (800e28c <tcp_send_fin+0x9c>)
 800e208:	f004 fb44 	bl	8012894 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e210:	2b00      	cmp	r3, #0
 800e212:	d02e      	beq.n	800e272 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e218:	60fb      	str	r3, [r7, #12]
 800e21a:	e002      	b.n	800e222 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d1f8      	bne.n	800e21c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	68db      	ldr	r3, [r3, #12]
 800e22e:	899b      	ldrh	r3, [r3, #12]
 800e230:	b29b      	uxth	r3, r3
 800e232:	4618      	mov	r0, r3
 800e234:	f7fa f8aa 	bl	800838c <lwip_htons>
 800e238:	4603      	mov	r3, r0
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	f003 0307 	and.w	r3, r3, #7
 800e240:	2b00      	cmp	r3, #0
 800e242:	d116      	bne.n	800e272 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	68db      	ldr	r3, [r3, #12]
 800e248:	899b      	ldrh	r3, [r3, #12]
 800e24a:	b29c      	uxth	r4, r3
 800e24c:	2001      	movs	r0, #1
 800e24e:	f7fa f89d 	bl	800838c <lwip_htons>
 800e252:	4603      	mov	r3, r0
 800e254:	461a      	mov	r2, r3
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	68db      	ldr	r3, [r3, #12]
 800e25a:	4322      	orrs	r2, r4
 800e25c:	b292      	uxth	r2, r2
 800e25e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	8b5b      	ldrh	r3, [r3, #26]
 800e264:	f043 0320 	orr.w	r3, r3, #32
 800e268:	b29a      	uxth	r2, r3
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e26e:	2300      	movs	r3, #0
 800e270:	e004      	b.n	800e27c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e272:	2101      	movs	r1, #1
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 f80b 	bl	800e290 <tcp_enqueue_flags>
 800e27a:	4603      	mov	r3, r0
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3714      	adds	r7, #20
 800e280:	46bd      	mov	sp, r7
 800e282:	bd90      	pop	{r4, r7, pc}
 800e284:	0801520c 	.word	0x0801520c
 800e288:	08015614 	.word	0x08015614
 800e28c:	08015260 	.word	0x08015260

0800e290 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b08a      	sub	sp, #40	@ 0x28
 800e294:	af02      	add	r7, sp, #8
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	460b      	mov	r3, r1
 800e29a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e29c:	2300      	movs	r3, #0
 800e29e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e2a4:	78fb      	ldrb	r3, [r7, #3]
 800e2a6:	f003 0303 	and.w	r3, r3, #3
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d106      	bne.n	800e2bc <tcp_enqueue_flags+0x2c>
 800e2ae:	4b67      	ldr	r3, [pc, #412]	@ (800e44c <tcp_enqueue_flags+0x1bc>)
 800e2b0:	f240 4211 	movw	r2, #1041	@ 0x411
 800e2b4:	4966      	ldr	r1, [pc, #408]	@ (800e450 <tcp_enqueue_flags+0x1c0>)
 800e2b6:	4867      	ldr	r0, [pc, #412]	@ (800e454 <tcp_enqueue_flags+0x1c4>)
 800e2b8:	f004 faec 	bl	8012894 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d106      	bne.n	800e2d0 <tcp_enqueue_flags+0x40>
 800e2c2:	4b62      	ldr	r3, [pc, #392]	@ (800e44c <tcp_enqueue_flags+0x1bc>)
 800e2c4:	f240 4213 	movw	r2, #1043	@ 0x413
 800e2c8:	4963      	ldr	r1, [pc, #396]	@ (800e458 <tcp_enqueue_flags+0x1c8>)
 800e2ca:	4862      	ldr	r0, [pc, #392]	@ (800e454 <tcp_enqueue_flags+0x1c4>)
 800e2cc:	f004 fae2 	bl	8012894 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e2d0:	78fb      	ldrb	r3, [r7, #3]
 800e2d2:	f003 0302 	and.w	r3, r3, #2
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d001      	beq.n	800e2de <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e2de:	7ffb      	ldrb	r3, [r7, #31]
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	f003 0304 	and.w	r3, r3, #4
 800e2e8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e2ea:	7dfb      	ldrb	r3, [r7, #23]
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	2036      	movs	r0, #54	@ 0x36
 800e2f6:	f7fb f8c3 	bl	8009480 <pbuf_alloc>
 800e2fa:	6138      	str	r0, [r7, #16]
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d109      	bne.n	800e316 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	8b5b      	ldrh	r3, [r3, #26]
 800e306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e310:	f04f 33ff 	mov.w	r3, #4294967295
 800e314:	e095      	b.n	800e442 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	895a      	ldrh	r2, [r3, #10]
 800e31a:	7dfb      	ldrb	r3, [r7, #23]
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	429a      	cmp	r2, r3
 800e320:	d206      	bcs.n	800e330 <tcp_enqueue_flags+0xa0>
 800e322:	4b4a      	ldr	r3, [pc, #296]	@ (800e44c <tcp_enqueue_flags+0x1bc>)
 800e324:	f240 4239 	movw	r2, #1081	@ 0x439
 800e328:	494c      	ldr	r1, [pc, #304]	@ (800e45c <tcp_enqueue_flags+0x1cc>)
 800e32a:	484a      	ldr	r0, [pc, #296]	@ (800e454 <tcp_enqueue_flags+0x1c4>)
 800e32c:	f004 fab2 	bl	8012894 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800e334:	78fa      	ldrb	r2, [r7, #3]
 800e336:	7ffb      	ldrb	r3, [r7, #31]
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	460b      	mov	r3, r1
 800e33c:	6939      	ldr	r1, [r7, #16]
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7ff fd72 	bl	800de28 <tcp_create_segment>
 800e344:	60f8      	str	r0, [r7, #12]
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d109      	bne.n	800e360 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	8b5b      	ldrh	r3, [r3, #26]
 800e350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e354:	b29a      	uxth	r2, r3
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e35a:	f04f 33ff 	mov.w	r3, #4294967295
 800e35e:	e070      	b.n	800e442 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	f003 0303 	and.w	r3, r3, #3
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d006      	beq.n	800e37a <tcp_enqueue_flags+0xea>
 800e36c:	4b37      	ldr	r3, [pc, #220]	@ (800e44c <tcp_enqueue_flags+0x1bc>)
 800e36e:	f240 4242 	movw	r2, #1090	@ 0x442
 800e372:	493b      	ldr	r1, [pc, #236]	@ (800e460 <tcp_enqueue_flags+0x1d0>)
 800e374:	4837      	ldr	r0, [pc, #220]	@ (800e454 <tcp_enqueue_flags+0x1c4>)
 800e376:	f004 fa8d 	bl	8012894 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	891b      	ldrh	r3, [r3, #8]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d006      	beq.n	800e390 <tcp_enqueue_flags+0x100>
 800e382:	4b32      	ldr	r3, [pc, #200]	@ (800e44c <tcp_enqueue_flags+0x1bc>)
 800e384:	f240 4243 	movw	r2, #1091	@ 0x443
 800e388:	4936      	ldr	r1, [pc, #216]	@ (800e464 <tcp_enqueue_flags+0x1d4>)
 800e38a:	4832      	ldr	r0, [pc, #200]	@ (800e454 <tcp_enqueue_flags+0x1c4>)
 800e38c:	f004 fa82 	bl	8012894 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e394:	2b00      	cmp	r3, #0
 800e396:	d103      	bne.n	800e3a0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	68fa      	ldr	r2, [r7, #12]
 800e39c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e39e:	e00d      	b.n	800e3bc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e3a4:	61bb      	str	r3, [r7, #24]
 800e3a6:	e002      	b.n	800e3ae <tcp_enqueue_flags+0x11e>
 800e3a8:	69bb      	ldr	r3, [r7, #24]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	61bb      	str	r3, [r7, #24]
 800e3ae:	69bb      	ldr	r3, [r7, #24]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d1f8      	bne.n	800e3a8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	68fa      	ldr	r2, [r7, #12]
 800e3ba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e3c4:	78fb      	ldrb	r3, [r7, #3]
 800e3c6:	f003 0302 	and.w	r3, r3, #2
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d104      	bne.n	800e3d8 <tcp_enqueue_flags+0x148>
 800e3ce:	78fb      	ldrb	r3, [r7, #3]
 800e3d0:	f003 0301 	and.w	r3, r3, #1
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d004      	beq.n	800e3e2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e3dc:	1c5a      	adds	r2, r3, #1
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e3e2:	78fb      	ldrb	r3, [r7, #3]
 800e3e4:	f003 0301 	and.w	r3, r3, #1
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d006      	beq.n	800e3fa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	8b5b      	ldrh	r3, [r3, #26]
 800e3f0:	f043 0320 	orr.w	r3, r3, #32
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fb fbaa 	bl	8009b58 <pbuf_clen>
 800e404:	4603      	mov	r3, r0
 800e406:	461a      	mov	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e40e:	4413      	add	r3, r2
 800e410:	b29a      	uxth	r2, r3
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d00e      	beq.n	800e440 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e426:	2b00      	cmp	r3, #0
 800e428:	d10a      	bne.n	800e440 <tcp_enqueue_flags+0x1b0>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d106      	bne.n	800e440 <tcp_enqueue_flags+0x1b0>
 800e432:	4b06      	ldr	r3, [pc, #24]	@ (800e44c <tcp_enqueue_flags+0x1bc>)
 800e434:	f240 4265 	movw	r2, #1125	@ 0x465
 800e438:	490b      	ldr	r1, [pc, #44]	@ (800e468 <tcp_enqueue_flags+0x1d8>)
 800e43a:	4806      	ldr	r0, [pc, #24]	@ (800e454 <tcp_enqueue_flags+0x1c4>)
 800e43c:	f004 fa2a 	bl	8012894 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e440:	2300      	movs	r3, #0
}
 800e442:	4618      	mov	r0, r3
 800e444:	3720      	adds	r7, #32
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	0801520c 	.word	0x0801520c
 800e450:	08015630 	.word	0x08015630
 800e454:	08015260 	.word	0x08015260
 800e458:	08015688 	.word	0x08015688
 800e45c:	080156a8 	.word	0x080156a8
 800e460:	080156e4 	.word	0x080156e4
 800e464:	080156fc 	.word	0x080156fc
 800e468:	08015728 	.word	0x08015728

0800e46c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e46c:	b5b0      	push	{r4, r5, r7, lr}
 800e46e:	b08a      	sub	sp, #40	@ 0x28
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d106      	bne.n	800e488 <tcp_output+0x1c>
 800e47a:	4b8a      	ldr	r3, [pc, #552]	@ (800e6a4 <tcp_output+0x238>)
 800e47c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800e480:	4989      	ldr	r1, [pc, #548]	@ (800e6a8 <tcp_output+0x23c>)
 800e482:	488a      	ldr	r0, [pc, #552]	@ (800e6ac <tcp_output+0x240>)
 800e484:	f004 fa06 	bl	8012894 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	7d1b      	ldrb	r3, [r3, #20]
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d106      	bne.n	800e49e <tcp_output+0x32>
 800e490:	4b84      	ldr	r3, [pc, #528]	@ (800e6a4 <tcp_output+0x238>)
 800e492:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800e496:	4986      	ldr	r1, [pc, #536]	@ (800e6b0 <tcp_output+0x244>)
 800e498:	4884      	ldr	r0, [pc, #528]	@ (800e6ac <tcp_output+0x240>)
 800e49a:	f004 f9fb 	bl	8012894 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e49e:	4b85      	ldr	r3, [pc, #532]	@ (800e6b4 <tcp_output+0x248>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d101      	bne.n	800e4ac <tcp_output+0x40>
    return ERR_OK;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	e1ce      	b.n	800e84a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	bf28      	it	cs
 800e4bc:	4613      	movcs	r3, r2
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d10b      	bne.n	800e4e6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	8b5b      	ldrh	r3, [r3, #26]
 800e4d2:	f003 0302 	and.w	r3, r3, #2
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	f000 81aa 	beq.w	800e830 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 fdcb 	bl	800f078 <tcp_send_empty_ack>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	e1b1      	b.n	800e84a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e4e6:	6879      	ldr	r1, [r7, #4]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f7ff fc7e 	bl	800ddf0 <tcp_route>
 800e4f4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d102      	bne.n	800e502 <tcp_output+0x96>
    return ERR_RTE;
 800e4fc:	f06f 0303 	mvn.w	r3, #3
 800e500:	e1a3      	b.n	800e84a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d003      	beq.n	800e510 <tcp_output+0xa4>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d111      	bne.n	800e534 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d002      	beq.n	800e51c <tcp_output+0xb0>
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	3304      	adds	r3, #4
 800e51a:	e000      	b.n	800e51e <tcp_output+0xb2>
 800e51c:	2300      	movs	r3, #0
 800e51e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d102      	bne.n	800e52c <tcp_output+0xc0>
      return ERR_RTE;
 800e526:	f06f 0303 	mvn.w	r3, #3
 800e52a:	e18e      	b.n	800e84a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	685b      	ldr	r3, [r3, #4]
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7f9 ff3c 	bl	80083b8 <lwip_htonl>
 800e540:	4602      	mov	r2, r0
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e54a:	8912      	ldrh	r2, [r2, #8]
 800e54c:	4413      	add	r3, r2
 800e54e:	69ba      	ldr	r2, [r7, #24]
 800e550:	429a      	cmp	r2, r3
 800e552:	d227      	bcs.n	800e5a4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e55a:	461a      	mov	r2, r3
 800e55c:	69bb      	ldr	r3, [r7, #24]
 800e55e:	4293      	cmp	r3, r2
 800e560:	d114      	bne.n	800e58c <tcp_output+0x120>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e566:	2b00      	cmp	r3, #0
 800e568:	d110      	bne.n	800e58c <tcp_output+0x120>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e570:	2b00      	cmp	r3, #0
 800e572:	d10b      	bne.n	800e58c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2201      	movs	r2, #1
 800e580:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	8b5b      	ldrh	r3, [r3, #26]
 800e590:	f003 0302 	and.w	r3, r3, #2
 800e594:	2b00      	cmp	r3, #0
 800e596:	f000 814d 	beq.w	800e834 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f000 fd6c 	bl	800f078 <tcp_send_empty_ack>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	e152      	b.n	800e84a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e5b0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e5b2:	6a3b      	ldr	r3, [r7, #32]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f000 811c 	beq.w	800e7f2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e5ba:	e002      	b.n	800e5c2 <tcp_output+0x156>
 800e5bc:	6a3b      	ldr	r3, [r7, #32]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	623b      	str	r3, [r7, #32]
 800e5c2:	6a3b      	ldr	r3, [r7, #32]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d1f8      	bne.n	800e5bc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e5ca:	e112      	b.n	800e7f2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	899b      	ldrh	r3, [r3, #12]
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7f9 fed9 	bl	800838c <lwip_htons>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	f003 0304 	and.w	r3, r3, #4
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d006      	beq.n	800e5f4 <tcp_output+0x188>
 800e5e6:	4b2f      	ldr	r3, [pc, #188]	@ (800e6a4 <tcp_output+0x238>)
 800e5e8:	f240 5236 	movw	r2, #1334	@ 0x536
 800e5ec:	4932      	ldr	r1, [pc, #200]	@ (800e6b8 <tcp_output+0x24c>)
 800e5ee:	482f      	ldr	r0, [pc, #188]	@ (800e6ac <tcp_output+0x240>)
 800e5f0:	f004 f950 	bl	8012894 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d01f      	beq.n	800e63c <tcp_output+0x1d0>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	8b5b      	ldrh	r3, [r3, #26]
 800e600:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800e604:	2b00      	cmp	r3, #0
 800e606:	d119      	bne.n	800e63c <tcp_output+0x1d0>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d00b      	beq.n	800e628 <tcp_output+0x1bc>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d110      	bne.n	800e63c <tcp_output+0x1d0>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e61e:	891a      	ldrh	r2, [r3, #8]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e624:	429a      	cmp	r2, r3
 800e626:	d209      	bcs.n	800e63c <tcp_output+0x1d0>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d004      	beq.n	800e63c <tcp_output+0x1d0>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e638:	2b08      	cmp	r3, #8
 800e63a:	d901      	bls.n	800e640 <tcp_output+0x1d4>
 800e63c:	2301      	movs	r3, #1
 800e63e:	e000      	b.n	800e642 <tcp_output+0x1d6>
 800e640:	2300      	movs	r3, #0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d106      	bne.n	800e654 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	8b5b      	ldrh	r3, [r3, #26]
 800e64a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f000 80e4 	beq.w	800e81c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	7d1b      	ldrb	r3, [r3, #20]
 800e658:	2b02      	cmp	r3, #2
 800e65a:	d00d      	beq.n	800e678 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e65e:	68db      	ldr	r3, [r3, #12]
 800e660:	899b      	ldrh	r3, [r3, #12]
 800e662:	b29c      	uxth	r4, r3
 800e664:	2010      	movs	r0, #16
 800e666:	f7f9 fe91 	bl	800838c <lwip_htons>
 800e66a:	4603      	mov	r3, r0
 800e66c:	461a      	mov	r2, r3
 800e66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	4322      	orrs	r2, r4
 800e674:	b292      	uxth	r2, r2
 800e676:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e678:	697a      	ldr	r2, [r7, #20]
 800e67a:	6879      	ldr	r1, [r7, #4]
 800e67c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e67e:	f000 f909 	bl	800e894 <tcp_output_segment>
 800e682:	4603      	mov	r3, r0
 800e684:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d016      	beq.n	800e6bc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	8b5b      	ldrh	r3, [r3, #26]
 800e692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e696:	b29a      	uxth	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	835a      	strh	r2, [r3, #26]
      return err;
 800e69c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6a0:	e0d3      	b.n	800e84a <tcp_output+0x3de>
 800e6a2:	bf00      	nop
 800e6a4:	0801520c 	.word	0x0801520c
 800e6a8:	08015750 	.word	0x08015750
 800e6ac:	08015260 	.word	0x08015260
 800e6b0:	08015768 	.word	0x08015768
 800e6b4:	200089e8 	.word	0x200089e8
 800e6b8:	08015790 	.word	0x08015790
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	7d1b      	ldrb	r3, [r3, #20]
 800e6c8:	2b02      	cmp	r3, #2
 800e6ca:	d006      	beq.n	800e6da <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	8b5b      	ldrh	r3, [r3, #26]
 800e6d0:	f023 0303 	bic.w	r3, r3, #3
 800e6d4:	b29a      	uxth	r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6dc:	68db      	ldr	r3, [r3, #12]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7f9 fe69 	bl	80083b8 <lwip_htonl>
 800e6e6:	4604      	mov	r4, r0
 800e6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ea:	891b      	ldrh	r3, [r3, #8]
 800e6ec:	461d      	mov	r5, r3
 800e6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	899b      	ldrh	r3, [r3, #12]
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7f9 fe48 	bl	800838c <lwip_htons>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	f003 0303 	and.w	r3, r3, #3
 800e704:	2b00      	cmp	r3, #0
 800e706:	d001      	beq.n	800e70c <tcp_output+0x2a0>
 800e708:	2301      	movs	r3, #1
 800e70a:	e000      	b.n	800e70e <tcp_output+0x2a2>
 800e70c:	2300      	movs	r3, #0
 800e70e:	442b      	add	r3, r5
 800e710:	4423      	add	r3, r4
 800e712:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	1ad3      	subs	r3, r2, r3
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	da02      	bge.n	800e726 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	68ba      	ldr	r2, [r7, #8]
 800e724:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e728:	891b      	ldrh	r3, [r3, #8]
 800e72a:	461c      	mov	r4, r3
 800e72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	899b      	ldrh	r3, [r3, #12]
 800e732:	b29b      	uxth	r3, r3
 800e734:	4618      	mov	r0, r3
 800e736:	f7f9 fe29 	bl	800838c <lwip_htons>
 800e73a:	4603      	mov	r3, r0
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	f003 0303 	and.w	r3, r3, #3
 800e742:	2b00      	cmp	r3, #0
 800e744:	d001      	beq.n	800e74a <tcp_output+0x2de>
 800e746:	2301      	movs	r3, #1
 800e748:	e000      	b.n	800e74c <tcp_output+0x2e0>
 800e74a:	2300      	movs	r3, #0
 800e74c:	4423      	add	r3, r4
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d049      	beq.n	800e7e6 <tcp_output+0x37a>
      seg->next = NULL;
 800e752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e754:	2200      	movs	r2, #0
 800e756:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d105      	bne.n	800e76c <tcp_output+0x300>
        pcb->unacked = seg;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e764:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800e766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e768:	623b      	str	r3, [r7, #32]
 800e76a:	e03f      	b.n	800e7ec <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e76e:	68db      	ldr	r3, [r3, #12]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	4618      	mov	r0, r3
 800e774:	f7f9 fe20 	bl	80083b8 <lwip_htonl>
 800e778:	4604      	mov	r4, r0
 800e77a:	6a3b      	ldr	r3, [r7, #32]
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	4618      	mov	r0, r3
 800e782:	f7f9 fe19 	bl	80083b8 <lwip_htonl>
 800e786:	4603      	mov	r3, r0
 800e788:	1ae3      	subs	r3, r4, r3
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	da24      	bge.n	800e7d8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	3370      	adds	r3, #112	@ 0x70
 800e792:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e794:	e002      	b.n	800e79c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e796:	69fb      	ldr	r3, [r7, #28]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d011      	beq.n	800e7c8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	68db      	ldr	r3, [r3, #12]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7f9 fe03 	bl	80083b8 <lwip_htonl>
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7f9 fdfc 	bl	80083b8 <lwip_htonl>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	dbe6      	blt.n	800e796 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e7d0:	69fb      	ldr	r3, [r7, #28]
 800e7d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7d4:	601a      	str	r2, [r3, #0]
 800e7d6:	e009      	b.n	800e7ec <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e7d8:	6a3b      	ldr	r3, [r7, #32]
 800e7da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7dc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e7de:	6a3b      	ldr	r3, [r7, #32]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	623b      	str	r3, [r7, #32]
 800e7e4:	e002      	b.n	800e7ec <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e7e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e7e8:	f7fc fc45 	bl	800b076 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7f0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800e7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d012      	beq.n	800e81e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7f9 fdda 	bl	80083b8 <lwip_htonl>
 800e804:	4602      	mov	r2, r0
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e80a:	1ad3      	subs	r3, r2, r3
 800e80c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e80e:	8912      	ldrh	r2, [r2, #8]
 800e810:	4413      	add	r3, r2
  while (seg != NULL &&
 800e812:	69ba      	ldr	r2, [r7, #24]
 800e814:	429a      	cmp	r2, r3
 800e816:	f4bf aed9 	bcs.w	800e5cc <tcp_output+0x160>
 800e81a:	e000      	b.n	800e81e <tcp_output+0x3b2>
      break;
 800e81c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e822:	2b00      	cmp	r3, #0
 800e824:	d108      	bne.n	800e838 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2200      	movs	r2, #0
 800e82a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800e82e:	e004      	b.n	800e83a <tcp_output+0x3ce>
    goto output_done;
 800e830:	bf00      	nop
 800e832:	e002      	b.n	800e83a <tcp_output+0x3ce>
    goto output_done;
 800e834:	bf00      	nop
 800e836:	e000      	b.n	800e83a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e838:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	8b5b      	ldrh	r3, [r3, #26]
 800e83e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e842:	b29a      	uxth	r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e848:	2300      	movs	r3, #0
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3728      	adds	r7, #40	@ 0x28
 800e84e:	46bd      	mov	sp, r7
 800e850:	bdb0      	pop	{r4, r5, r7, pc}
 800e852:	bf00      	nop

0800e854 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d106      	bne.n	800e870 <tcp_output_segment_busy+0x1c>
 800e862:	4b09      	ldr	r3, [pc, #36]	@ (800e888 <tcp_output_segment_busy+0x34>)
 800e864:	f240 529a 	movw	r2, #1434	@ 0x59a
 800e868:	4908      	ldr	r1, [pc, #32]	@ (800e88c <tcp_output_segment_busy+0x38>)
 800e86a:	4809      	ldr	r0, [pc, #36]	@ (800e890 <tcp_output_segment_busy+0x3c>)
 800e86c:	f004 f812 	bl	8012894 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	7b9b      	ldrb	r3, [r3, #14]
 800e876:	2b01      	cmp	r3, #1
 800e878:	d001      	beq.n	800e87e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e87a:	2301      	movs	r3, #1
 800e87c:	e000      	b.n	800e880 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e87e:	2300      	movs	r3, #0
}
 800e880:	4618      	mov	r0, r3
 800e882:	3708      	adds	r7, #8
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	0801520c 	.word	0x0801520c
 800e88c:	080157a8 	.word	0x080157a8
 800e890:	08015260 	.word	0x08015260

0800e894 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e894:	b5b0      	push	{r4, r5, r7, lr}
 800e896:	b08c      	sub	sp, #48	@ 0x30
 800e898:	af04      	add	r7, sp, #16
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d106      	bne.n	800e8b4 <tcp_output_segment+0x20>
 800e8a6:	4b64      	ldr	r3, [pc, #400]	@ (800ea38 <tcp_output_segment+0x1a4>)
 800e8a8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800e8ac:	4963      	ldr	r1, [pc, #396]	@ (800ea3c <tcp_output_segment+0x1a8>)
 800e8ae:	4864      	ldr	r0, [pc, #400]	@ (800ea40 <tcp_output_segment+0x1ac>)
 800e8b0:	f003 fff0 	bl	8012894 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d106      	bne.n	800e8c8 <tcp_output_segment+0x34>
 800e8ba:	4b5f      	ldr	r3, [pc, #380]	@ (800ea38 <tcp_output_segment+0x1a4>)
 800e8bc:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800e8c0:	4960      	ldr	r1, [pc, #384]	@ (800ea44 <tcp_output_segment+0x1b0>)
 800e8c2:	485f      	ldr	r0, [pc, #380]	@ (800ea40 <tcp_output_segment+0x1ac>)
 800e8c4:	f003 ffe6 	bl	8012894 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d106      	bne.n	800e8dc <tcp_output_segment+0x48>
 800e8ce:	4b5a      	ldr	r3, [pc, #360]	@ (800ea38 <tcp_output_segment+0x1a4>)
 800e8d0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800e8d4:	495c      	ldr	r1, [pc, #368]	@ (800ea48 <tcp_output_segment+0x1b4>)
 800e8d6:	485a      	ldr	r0, [pc, #360]	@ (800ea40 <tcp_output_segment+0x1ac>)
 800e8d8:	f003 ffdc 	bl	8012894 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e8dc:	68f8      	ldr	r0, [r7, #12]
 800e8de:	f7ff ffb9 	bl	800e854 <tcp_output_segment_busy>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d001      	beq.n	800e8ec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	e0a1      	b.n	800ea30 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	68dc      	ldr	r4, [r3, #12]
 800e8f4:	4610      	mov	r0, r2
 800e8f6:	f7f9 fd5f 	bl	80083b8 <lwip_htonl>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	68dc      	ldr	r4, [r3, #12]
 800e906:	4610      	mov	r0, r2
 800e908:	f7f9 fd40 	bl	800838c <lwip_htons>
 800e90c:	4603      	mov	r3, r0
 800e90e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e914:	68ba      	ldr	r2, [r7, #8]
 800e916:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e918:	441a      	add	r2, r3
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	3314      	adds	r3, #20
 800e924:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	7a9b      	ldrb	r3, [r3, #10]
 800e92a:	f003 0301 	and.w	r3, r3, #1
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d015      	beq.n	800e95e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	3304      	adds	r3, #4
 800e936:	461a      	mov	r2, r3
 800e938:	6879      	ldr	r1, [r7, #4]
 800e93a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800e93e:	f7fc fe91 	bl	800b664 <tcp_eff_send_mss_netif>
 800e942:	4603      	mov	r3, r0
 800e944:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e946:	8b7b      	ldrh	r3, [r7, #26]
 800e948:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7f9 fd33 	bl	80083b8 <lwip_htonl>
 800e952:	4602      	mov	r2, r0
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	3304      	adds	r3, #4
 800e95c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e964:	2b00      	cmp	r3, #0
 800e966:	da02      	bge.n	800e96e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	2200      	movs	r2, #0
 800e96c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e972:	2b00      	cmp	r3, #0
 800e974:	d10c      	bne.n	800e990 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e976:	4b35      	ldr	r3, [pc, #212]	@ (800ea4c <tcp_output_segment+0x1b8>)
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	4618      	mov	r0, r3
 800e986:	f7f9 fd17 	bl	80083b8 <lwip_htonl>
 800e98a:	4602      	mov	r2, r0
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	68da      	ldr	r2, [r3, #12]
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	1ad3      	subs	r3, r2, r3
 800e99c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	8959      	ldrh	r1, [r3, #10]
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	8b3a      	ldrh	r2, [r7, #24]
 800e9aa:	1a8a      	subs	r2, r1, r2
 800e9ac:	b292      	uxth	r2, r2
 800e9ae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	8919      	ldrh	r1, [r3, #8]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	8b3a      	ldrh	r2, [r7, #24]
 800e9bc:	1a8a      	subs	r2, r1, r2
 800e9be:	b292      	uxth	r2, r2
 800e9c0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	68fa      	ldr	r2, [r7, #12]
 800e9c8:	68d2      	ldr	r2, [r2, #12]
 800e9ca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	741a      	strb	r2, [r3, #16]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	68da      	ldr	r2, [r3, #12]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	7a9b      	ldrb	r3, [r3, #10]
 800e9e0:	f003 0301 	and.w	r3, r3, #1
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <tcp_output_segment+0x158>
 800e9e8:	2318      	movs	r3, #24
 800e9ea:	e000      	b.n	800e9ee <tcp_output_segment+0x15a>
 800e9ec:	2314      	movs	r3, #20
 800e9ee:	4413      	add	r3, r2
 800e9f0:	69fa      	ldr	r2, [r7, #28]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d006      	beq.n	800ea04 <tcp_output_segment+0x170>
 800e9f6:	4b10      	ldr	r3, [pc, #64]	@ (800ea38 <tcp_output_segment+0x1a4>)
 800e9f8:	f240 621c 	movw	r2, #1564	@ 0x61c
 800e9fc:	4914      	ldr	r1, [pc, #80]	@ (800ea50 <tcp_output_segment+0x1bc>)
 800e9fe:	4810      	ldr	r0, [pc, #64]	@ (800ea40 <tcp_output_segment+0x1ac>)
 800ea00:	f003 ff48 	bl	8012894 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	6858      	ldr	r0, [r3, #4]
 800ea08:	68b9      	ldr	r1, [r7, #8]
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	1d1c      	adds	r4, r3, #4
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	7add      	ldrb	r5, [r3, #11]
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	7a9b      	ldrb	r3, [r3, #10]
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	9202      	str	r2, [sp, #8]
 800ea1a:	2206      	movs	r2, #6
 800ea1c:	9201      	str	r2, [sp, #4]
 800ea1e:	9300      	str	r3, [sp, #0]
 800ea20:	462b      	mov	r3, r5
 800ea22:	4622      	mov	r2, r4
 800ea24:	f002 fd84 	bl	8011530 <ip4_output_if>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ea2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3720      	adds	r7, #32
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bdb0      	pop	{r4, r5, r7, pc}
 800ea38:	0801520c 	.word	0x0801520c
 800ea3c:	080157d0 	.word	0x080157d0
 800ea40:	08015260 	.word	0x08015260
 800ea44:	080157f0 	.word	0x080157f0
 800ea48:	08015810 	.word	0x08015810
 800ea4c:	2000899c 	.word	0x2000899c
 800ea50:	08015834 	.word	0x08015834

0800ea54 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ea54:	b5b0      	push	{r4, r5, r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d106      	bne.n	800ea70 <tcp_rexmit_rto_prepare+0x1c>
 800ea62:	4b31      	ldr	r3, [pc, #196]	@ (800eb28 <tcp_rexmit_rto_prepare+0xd4>)
 800ea64:	f240 6263 	movw	r2, #1635	@ 0x663
 800ea68:	4930      	ldr	r1, [pc, #192]	@ (800eb2c <tcp_rexmit_rto_prepare+0xd8>)
 800ea6a:	4831      	ldr	r0, [pc, #196]	@ (800eb30 <tcp_rexmit_rto_prepare+0xdc>)
 800ea6c:	f003 ff12 	bl	8012894 <iprintf>

  if (pcb->unacked == NULL) {
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d102      	bne.n	800ea7e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ea78:	f06f 0305 	mvn.w	r3, #5
 800ea7c:	e050      	b.n	800eb20 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea82:	60fb      	str	r3, [r7, #12]
 800ea84:	e00b      	b.n	800ea9e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ea86:	68f8      	ldr	r0, [r7, #12]
 800ea88:	f7ff fee4 	bl	800e854 <tcp_output_segment_busy>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d002      	beq.n	800ea98 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ea92:	f06f 0305 	mvn.w	r3, #5
 800ea96:	e043      	b.n	800eb20 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	60fb      	str	r3, [r7, #12]
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d1ef      	bne.n	800ea86 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800eaa6:	68f8      	ldr	r0, [r7, #12]
 800eaa8:	f7ff fed4 	bl	800e854 <tcp_output_segment_busy>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d002      	beq.n	800eab8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800eab2:	f06f 0305 	mvn.w	r3, #5
 800eab6:	e033      	b.n	800eb20 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2200      	movs	r2, #0
 800eacc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	8b5b      	ldrh	r3, [r3, #26]
 800ead2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ead6:	b29a      	uxth	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	68db      	ldr	r3, [r3, #12]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7f9 fc68 	bl	80083b8 <lwip_htonl>
 800eae8:	4604      	mov	r4, r0
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	891b      	ldrh	r3, [r3, #8]
 800eaee:	461d      	mov	r5, r3
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	899b      	ldrh	r3, [r3, #12]
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7f9 fc47 	bl	800838c <lwip_htons>
 800eafe:	4603      	mov	r3, r0
 800eb00:	b2db      	uxtb	r3, r3
 800eb02:	f003 0303 	and.w	r3, r3, #3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d001      	beq.n	800eb0e <tcp_rexmit_rto_prepare+0xba>
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	e000      	b.n	800eb10 <tcp_rexmit_rto_prepare+0xbc>
 800eb0e:	2300      	movs	r3, #0
 800eb10:	442b      	add	r3, r5
 800eb12:	18e2      	adds	r2, r4, r3
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800eb1e:	2300      	movs	r3, #0
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3710      	adds	r7, #16
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bdb0      	pop	{r4, r5, r7, pc}
 800eb28:	0801520c 	.word	0x0801520c
 800eb2c:	08015848 	.word	0x08015848
 800eb30:	08015260 	.word	0x08015260

0800eb34 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d106      	bne.n	800eb50 <tcp_rexmit_rto_commit+0x1c>
 800eb42:	4b0d      	ldr	r3, [pc, #52]	@ (800eb78 <tcp_rexmit_rto_commit+0x44>)
 800eb44:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800eb48:	490c      	ldr	r1, [pc, #48]	@ (800eb7c <tcp_rexmit_rto_commit+0x48>)
 800eb4a:	480d      	ldr	r0, [pc, #52]	@ (800eb80 <tcp_rexmit_rto_commit+0x4c>)
 800eb4c:	f003 fea2 	bl	8012894 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eb56:	2bff      	cmp	r3, #255	@ 0xff
 800eb58:	d007      	beq.n	800eb6a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eb60:	3301      	adds	r3, #1
 800eb62:	b2da      	uxtb	r2, r3
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f7ff fc7e 	bl	800e46c <tcp_output>
}
 800eb70:	bf00      	nop
 800eb72:	3708      	adds	r7, #8
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	0801520c 	.word	0x0801520c
 800eb7c:	0801586c 	.word	0x0801586c
 800eb80:	08015260 	.word	0x08015260

0800eb84 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d106      	bne.n	800eba0 <tcp_rexmit_rto+0x1c>
 800eb92:	4b0a      	ldr	r3, [pc, #40]	@ (800ebbc <tcp_rexmit_rto+0x38>)
 800eb94:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800eb98:	4909      	ldr	r1, [pc, #36]	@ (800ebc0 <tcp_rexmit_rto+0x3c>)
 800eb9a:	480a      	ldr	r0, [pc, #40]	@ (800ebc4 <tcp_rexmit_rto+0x40>)
 800eb9c:	f003 fe7a 	bl	8012894 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f7ff ff57 	bl	800ea54 <tcp_rexmit_rto_prepare>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d102      	bne.n	800ebb2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7ff ffc1 	bl	800eb34 <tcp_rexmit_rto_commit>
  }
}
 800ebb2:	bf00      	nop
 800ebb4:	3708      	adds	r7, #8
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop
 800ebbc:	0801520c 	.word	0x0801520c
 800ebc0:	08015890 	.word	0x08015890
 800ebc4:	08015260 	.word	0x08015260

0800ebc8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ebc8:	b590      	push	{r4, r7, lr}
 800ebca:	b085      	sub	sp, #20
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d106      	bne.n	800ebe4 <tcp_rexmit+0x1c>
 800ebd6:	4b2f      	ldr	r3, [pc, #188]	@ (800ec94 <tcp_rexmit+0xcc>)
 800ebd8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800ebdc:	492e      	ldr	r1, [pc, #184]	@ (800ec98 <tcp_rexmit+0xd0>)
 800ebde:	482f      	ldr	r0, [pc, #188]	@ (800ec9c <tcp_rexmit+0xd4>)
 800ebe0:	f003 fe58 	bl	8012894 <iprintf>

  if (pcb->unacked == NULL) {
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d102      	bne.n	800ebf2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ebec:	f06f 0305 	mvn.w	r3, #5
 800ebf0:	e04c      	b.n	800ec8c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebf6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ebf8:	68b8      	ldr	r0, [r7, #8]
 800ebfa:	f7ff fe2b 	bl	800e854 <tcp_output_segment_busy>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d002      	beq.n	800ec0a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ec04:	f06f 0305 	mvn.w	r3, #5
 800ec08:	e040      	b.n	800ec8c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	681a      	ldr	r2, [r3, #0]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	336c      	adds	r3, #108	@ 0x6c
 800ec16:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ec18:	e002      	b.n	800ec20 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d011      	beq.n	800ec4c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7f9 fbc1 	bl	80083b8 <lwip_htonl>
 800ec36:	4604      	mov	r4, r0
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7f9 fbba 	bl	80083b8 <lwip_htonl>
 800ec44:	4603      	mov	r3, r0
 800ec46:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	dbe6      	blt.n	800ec1a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	68ba      	ldr	r2, [r7, #8]
 800ec58:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d103      	bne.n	800ec6a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2200      	movs	r2, #0
 800ec66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ec70:	2bff      	cmp	r3, #255	@ 0xff
 800ec72:	d007      	beq.n	800ec84 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	b2da      	uxtb	r2, r3
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ec8a:	2300      	movs	r3, #0
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3714      	adds	r7, #20
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd90      	pop	{r4, r7, pc}
 800ec94:	0801520c 	.word	0x0801520c
 800ec98:	080158ac 	.word	0x080158ac
 800ec9c:	08015260 	.word	0x08015260

0800eca0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d106      	bne.n	800ecbc <tcp_rexmit_fast+0x1c>
 800ecae:	4b2a      	ldr	r3, [pc, #168]	@ (800ed58 <tcp_rexmit_fast+0xb8>)
 800ecb0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800ecb4:	4929      	ldr	r1, [pc, #164]	@ (800ed5c <tcp_rexmit_fast+0xbc>)
 800ecb6:	482a      	ldr	r0, [pc, #168]	@ (800ed60 <tcp_rexmit_fast+0xc0>)
 800ecb8:	f003 fdec 	bl	8012894 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d044      	beq.n	800ed4e <tcp_rexmit_fast+0xae>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	8b5b      	ldrh	r3, [r3, #26]
 800ecc8:	f003 0304 	and.w	r3, r3, #4
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d13e      	bne.n	800ed4e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f7ff ff79 	bl	800ebc8 <tcp_rexmit>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d138      	bne.n	800ed4e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ece8:	4293      	cmp	r3, r2
 800ecea:	bf28      	it	cs
 800ecec:	4613      	movcs	r3, r2
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	0fda      	lsrs	r2, r3, #31
 800ecf2:	4413      	add	r3, r2
 800ecf4:	105b      	asrs	r3, r3, #1
 800ecf6:	b29a      	uxth	r2, r3
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ed04:	461a      	mov	r2, r3
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed0a:	005b      	lsls	r3, r3, #1
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d206      	bcs.n	800ed1e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed14:	005b      	lsls	r3, r3, #1
 800ed16:	b29a      	uxth	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed28:	4619      	mov	r1, r3
 800ed2a:	0049      	lsls	r1, r1, #1
 800ed2c:	440b      	add	r3, r1
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	4413      	add	r3, r2
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	8b5b      	ldrh	r3, [r3, #26]
 800ed3e:	f043 0304 	orr.w	r3, r3, #4
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800ed4e:	bf00      	nop
 800ed50:	3708      	adds	r7, #8
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	0801520c 	.word	0x0801520c
 800ed5c:	080158c4 	.word	0x080158c4
 800ed60:	08015260 	.word	0x08015260

0800ed64 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b086      	sub	sp, #24
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	607b      	str	r3, [r7, #4]
 800ed6e:	460b      	mov	r3, r1
 800ed70:	817b      	strh	r3, [r7, #10]
 800ed72:	4613      	mov	r3, r2
 800ed74:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ed76:	897a      	ldrh	r2, [r7, #10]
 800ed78:	893b      	ldrh	r3, [r7, #8]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	3314      	adds	r3, #20
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ed86:	4619      	mov	r1, r3
 800ed88:	2022      	movs	r0, #34	@ 0x22
 800ed8a:	f7fa fb79 	bl	8009480 <pbuf_alloc>
 800ed8e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d04d      	beq.n	800ee32 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ed96:	897b      	ldrh	r3, [r7, #10]
 800ed98:	3313      	adds	r3, #19
 800ed9a:	697a      	ldr	r2, [r7, #20]
 800ed9c:	8952      	ldrh	r2, [r2, #10]
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	db06      	blt.n	800edb0 <tcp_output_alloc_header_common+0x4c>
 800eda2:	4b26      	ldr	r3, [pc, #152]	@ (800ee3c <tcp_output_alloc_header_common+0xd8>)
 800eda4:	f240 7223 	movw	r2, #1827	@ 0x723
 800eda8:	4925      	ldr	r1, [pc, #148]	@ (800ee40 <tcp_output_alloc_header_common+0xdc>)
 800edaa:	4826      	ldr	r0, [pc, #152]	@ (800ee44 <tcp_output_alloc_header_common+0xe0>)
 800edac:	f003 fd72 	bl	8012894 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800edb6:	8c3b      	ldrh	r3, [r7, #32]
 800edb8:	4618      	mov	r0, r3
 800edba:	f7f9 fae7 	bl	800838c <lwip_htons>
 800edbe:	4603      	mov	r3, r0
 800edc0:	461a      	mov	r2, r3
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800edc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800edc8:	4618      	mov	r0, r3
 800edca:	f7f9 fadf 	bl	800838c <lwip_htons>
 800edce:	4603      	mov	r3, r0
 800edd0:	461a      	mov	r2, r3
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	f7f9 faeb 	bl	80083b8 <lwip_htonl>
 800ede2:	4602      	mov	r2, r0
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ede8:	897b      	ldrh	r3, [r7, #10]
 800edea:	089b      	lsrs	r3, r3, #2
 800edec:	b29b      	uxth	r3, r3
 800edee:	3305      	adds	r3, #5
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	031b      	lsls	r3, r3, #12
 800edf4:	b29a      	uxth	r2, r3
 800edf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	4313      	orrs	r3, r2
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	4618      	mov	r0, r3
 800ee02:	f7f9 fac3 	bl	800838c <lwip_htons>
 800ee06:	4603      	mov	r3, r0
 800ee08:	461a      	mov	r2, r3
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ee0e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7f9 fabb 	bl	800838c <lwip_htons>
 800ee16:	4603      	mov	r3, r0
 800ee18:	461a      	mov	r2, r3
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	2200      	movs	r2, #0
 800ee22:	741a      	strb	r2, [r3, #16]
 800ee24:	2200      	movs	r2, #0
 800ee26:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	749a      	strb	r2, [r3, #18]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ee32:	697b      	ldr	r3, [r7, #20]
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3718      	adds	r7, #24
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	0801520c 	.word	0x0801520c
 800ee40:	080158e4 	.word	0x080158e4
 800ee44:	08015260 	.word	0x08015260

0800ee48 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ee48:	b5b0      	push	{r4, r5, r7, lr}
 800ee4a:	b08a      	sub	sp, #40	@ 0x28
 800ee4c:	af04      	add	r7, sp, #16
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	607b      	str	r3, [r7, #4]
 800ee52:	460b      	mov	r3, r1
 800ee54:	817b      	strh	r3, [r7, #10]
 800ee56:	4613      	mov	r3, r2
 800ee58:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d106      	bne.n	800ee6e <tcp_output_alloc_header+0x26>
 800ee60:	4b15      	ldr	r3, [pc, #84]	@ (800eeb8 <tcp_output_alloc_header+0x70>)
 800ee62:	f240 7242 	movw	r2, #1858	@ 0x742
 800ee66:	4915      	ldr	r1, [pc, #84]	@ (800eebc <tcp_output_alloc_header+0x74>)
 800ee68:	4815      	ldr	r0, [pc, #84]	@ (800eec0 <tcp_output_alloc_header+0x78>)
 800ee6a:	f003 fd13 	bl	8012894 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	8adb      	ldrh	r3, [r3, #22]
 800ee76:	68fa      	ldr	r2, [r7, #12]
 800ee78:	8b12      	ldrh	r2, [r2, #24]
 800ee7a:	68f9      	ldr	r1, [r7, #12]
 800ee7c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800ee7e:	893d      	ldrh	r5, [r7, #8]
 800ee80:	897c      	ldrh	r4, [r7, #10]
 800ee82:	9103      	str	r1, [sp, #12]
 800ee84:	2110      	movs	r1, #16
 800ee86:	9102      	str	r1, [sp, #8]
 800ee88:	9201      	str	r2, [sp, #4]
 800ee8a:	9300      	str	r3, [sp, #0]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	462a      	mov	r2, r5
 800ee90:	4621      	mov	r1, r4
 800ee92:	f7ff ff67 	bl	800ed64 <tcp_output_alloc_header_common>
 800ee96:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d006      	beq.n	800eeac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eea2:	68fa      	ldr	r2, [r7, #12]
 800eea4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800eea6:	441a      	add	r2, r3
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800eeac:	697b      	ldr	r3, [r7, #20]
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3718      	adds	r7, #24
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bdb0      	pop	{r4, r5, r7, pc}
 800eeb6:	bf00      	nop
 800eeb8:	0801520c 	.word	0x0801520c
 800eebc:	08015914 	.word	0x08015914
 800eec0:	08015260 	.word	0x08015260

0800eec4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b088      	sub	sp, #32
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	4611      	mov	r1, r2
 800eed0:	461a      	mov	r2, r3
 800eed2:	460b      	mov	r3, r1
 800eed4:	71fb      	strb	r3, [r7, #7]
 800eed6:	4613      	mov	r3, r2
 800eed8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800eeda:	2300      	movs	r3, #0
 800eedc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d106      	bne.n	800eef2 <tcp_output_fill_options+0x2e>
 800eee4:	4b12      	ldr	r3, [pc, #72]	@ (800ef30 <tcp_output_fill_options+0x6c>)
 800eee6:	f240 7256 	movw	r2, #1878	@ 0x756
 800eeea:	4912      	ldr	r1, [pc, #72]	@ (800ef34 <tcp_output_fill_options+0x70>)
 800eeec:	4812      	ldr	r0, [pc, #72]	@ (800ef38 <tcp_output_fill_options+0x74>)
 800eeee:	f003 fcd1 	bl	8012894 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	3314      	adds	r3, #20
 800eefc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800eefe:	8bfb      	ldrh	r3, [r7, #30]
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	461a      	mov	r2, r3
 800ef04:	79fb      	ldrb	r3, [r7, #7]
 800ef06:	009b      	lsls	r3, r3, #2
 800ef08:	f003 0304 	and.w	r3, r3, #4
 800ef0c:	4413      	add	r3, r2
 800ef0e:	3314      	adds	r3, #20
 800ef10:	69ba      	ldr	r2, [r7, #24]
 800ef12:	4413      	add	r3, r2
 800ef14:	697a      	ldr	r2, [r7, #20]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d006      	beq.n	800ef28 <tcp_output_fill_options+0x64>
 800ef1a:	4b05      	ldr	r3, [pc, #20]	@ (800ef30 <tcp_output_fill_options+0x6c>)
 800ef1c:	f240 7275 	movw	r2, #1909	@ 0x775
 800ef20:	4906      	ldr	r1, [pc, #24]	@ (800ef3c <tcp_output_fill_options+0x78>)
 800ef22:	4805      	ldr	r0, [pc, #20]	@ (800ef38 <tcp_output_fill_options+0x74>)
 800ef24:	f003 fcb6 	bl	8012894 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ef28:	bf00      	nop
 800ef2a:	3720      	adds	r7, #32
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	0801520c 	.word	0x0801520c
 800ef34:	0801593c 	.word	0x0801593c
 800ef38:	08015260 	.word	0x08015260
 800ef3c:	08015834 	.word	0x08015834

0800ef40 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b08a      	sub	sp, #40	@ 0x28
 800ef44:	af04      	add	r7, sp, #16
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	607a      	str	r2, [r7, #4]
 800ef4c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d106      	bne.n	800ef62 <tcp_output_control_segment+0x22>
 800ef54:	4b1c      	ldr	r3, [pc, #112]	@ (800efc8 <tcp_output_control_segment+0x88>)
 800ef56:	f240 7287 	movw	r2, #1927	@ 0x787
 800ef5a:	491c      	ldr	r1, [pc, #112]	@ (800efcc <tcp_output_control_segment+0x8c>)
 800ef5c:	481c      	ldr	r0, [pc, #112]	@ (800efd0 <tcp_output_control_segment+0x90>)
 800ef5e:	f003 fc99 	bl	8012894 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ef62:	683a      	ldr	r2, [r7, #0]
 800ef64:	6879      	ldr	r1, [r7, #4]
 800ef66:	68f8      	ldr	r0, [r7, #12]
 800ef68:	f7fe ff42 	bl	800ddf0 <tcp_route>
 800ef6c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d102      	bne.n	800ef7a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ef74:	23fc      	movs	r3, #252	@ 0xfc
 800ef76:	75fb      	strb	r3, [r7, #23]
 800ef78:	e01c      	b.n	800efb4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d006      	beq.n	800ef8e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	7adb      	ldrb	r3, [r3, #11]
 800ef84:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	7a9b      	ldrb	r3, [r3, #10]
 800ef8a:	757b      	strb	r3, [r7, #21]
 800ef8c:	e003      	b.n	800ef96 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ef8e:	23ff      	movs	r3, #255	@ 0xff
 800ef90:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ef92:	2300      	movs	r3, #0
 800ef94:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ef96:	7dba      	ldrb	r2, [r7, #22]
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	9302      	str	r3, [sp, #8]
 800ef9c:	2306      	movs	r3, #6
 800ef9e:	9301      	str	r3, [sp, #4]
 800efa0:	7d7b      	ldrb	r3, [r7, #21]
 800efa2:	9300      	str	r3, [sp, #0]
 800efa4:	4613      	mov	r3, r2
 800efa6:	683a      	ldr	r2, [r7, #0]
 800efa8:	6879      	ldr	r1, [r7, #4]
 800efaa:	68b8      	ldr	r0, [r7, #8]
 800efac:	f002 fac0 	bl	8011530 <ip4_output_if>
 800efb0:	4603      	mov	r3, r0
 800efb2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800efb4:	68b8      	ldr	r0, [r7, #8]
 800efb6:	f7fa fd47 	bl	8009a48 <pbuf_free>
  return err;
 800efba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3718      	adds	r7, #24
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
 800efc6:	bf00      	nop
 800efc8:	0801520c 	.word	0x0801520c
 800efcc:	08015964 	.word	0x08015964
 800efd0:	08015260 	.word	0x08015260

0800efd4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800efd4:	b590      	push	{r4, r7, lr}
 800efd6:	b08b      	sub	sp, #44	@ 0x2c
 800efd8:	af04      	add	r7, sp, #16
 800efda:	60f8      	str	r0, [r7, #12]
 800efdc:	60b9      	str	r1, [r7, #8]
 800efde:	607a      	str	r2, [r7, #4]
 800efe0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d106      	bne.n	800eff6 <tcp_rst+0x22>
 800efe8:	4b1f      	ldr	r3, [pc, #124]	@ (800f068 <tcp_rst+0x94>)
 800efea:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800efee:	491f      	ldr	r1, [pc, #124]	@ (800f06c <tcp_rst+0x98>)
 800eff0:	481f      	ldr	r0, [pc, #124]	@ (800f070 <tcp_rst+0x9c>)
 800eff2:	f003 fc4f 	bl	8012894 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800eff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d106      	bne.n	800f00a <tcp_rst+0x36>
 800effc:	4b1a      	ldr	r3, [pc, #104]	@ (800f068 <tcp_rst+0x94>)
 800effe:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800f002:	491c      	ldr	r1, [pc, #112]	@ (800f074 <tcp_rst+0xa0>)
 800f004:	481a      	ldr	r0, [pc, #104]	@ (800f070 <tcp_rst+0x9c>)
 800f006:	f003 fc45 	bl	8012894 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f00a:	2300      	movs	r3, #0
 800f00c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f00e:	f246 0308 	movw	r3, #24584	@ 0x6008
 800f012:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f014:	7dfb      	ldrb	r3, [r7, #23]
 800f016:	b29c      	uxth	r4, r3
 800f018:	68b8      	ldr	r0, [r7, #8]
 800f01a:	f7f9 f9cd 	bl	80083b8 <lwip_htonl>
 800f01e:	4602      	mov	r2, r0
 800f020:	8abb      	ldrh	r3, [r7, #20]
 800f022:	9303      	str	r3, [sp, #12]
 800f024:	2314      	movs	r3, #20
 800f026:	9302      	str	r3, [sp, #8]
 800f028:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800f02a:	9301      	str	r3, [sp, #4]
 800f02c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f02e:	9300      	str	r3, [sp, #0]
 800f030:	4613      	mov	r3, r2
 800f032:	2200      	movs	r2, #0
 800f034:	4621      	mov	r1, r4
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f7ff fe94 	bl	800ed64 <tcp_output_alloc_header_common>
 800f03c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00c      	beq.n	800f05e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f044:	7dfb      	ldrb	r3, [r7, #23]
 800f046:	2200      	movs	r2, #0
 800f048:	6939      	ldr	r1, [r7, #16]
 800f04a:	68f8      	ldr	r0, [r7, #12]
 800f04c:	f7ff ff3a 	bl	800eec4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f052:	683a      	ldr	r2, [r7, #0]
 800f054:	6939      	ldr	r1, [r7, #16]
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f7ff ff72 	bl	800ef40 <tcp_output_control_segment>
 800f05c:	e000      	b.n	800f060 <tcp_rst+0x8c>
    return;
 800f05e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f060:	371c      	adds	r7, #28
 800f062:	46bd      	mov	sp, r7
 800f064:	bd90      	pop	{r4, r7, pc}
 800f066:	bf00      	nop
 800f068:	0801520c 	.word	0x0801520c
 800f06c:	08015990 	.word	0x08015990
 800f070:	08015260 	.word	0x08015260
 800f074:	080159ac 	.word	0x080159ac

0800f078 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f078:	b590      	push	{r4, r7, lr}
 800f07a:	b087      	sub	sp, #28
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f080:	2300      	movs	r3, #0
 800f082:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f084:	2300      	movs	r3, #0
 800f086:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d106      	bne.n	800f09c <tcp_send_empty_ack+0x24>
 800f08e:	4b28      	ldr	r3, [pc, #160]	@ (800f130 <tcp_send_empty_ack+0xb8>)
 800f090:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800f094:	4927      	ldr	r1, [pc, #156]	@ (800f134 <tcp_send_empty_ack+0xbc>)
 800f096:	4828      	ldr	r0, [pc, #160]	@ (800f138 <tcp_send_empty_ack+0xc0>)
 800f098:	f003 fbfc 	bl	8012894 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f09c:	7dfb      	ldrb	r3, [r7, #23]
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	b2db      	uxtb	r3, r3
 800f0a2:	f003 0304 	and.w	r3, r3, #4
 800f0a6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f0a8:	7d7b      	ldrb	r3, [r7, #21]
 800f0aa:	b29c      	uxth	r4, r3
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7f9 f981 	bl	80083b8 <lwip_htonl>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	4621      	mov	r1, r4
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f7ff fec3 	bl	800ee48 <tcp_output_alloc_header>
 800f0c2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d109      	bne.n	800f0de <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	8b5b      	ldrh	r3, [r3, #26]
 800f0ce:	f043 0303 	orr.w	r3, r3, #3
 800f0d2:	b29a      	uxth	r2, r3
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f0d8:	f06f 0301 	mvn.w	r3, #1
 800f0dc:	e023      	b.n	800f126 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f0de:	7dbb      	ldrb	r3, [r7, #22]
 800f0e0:	7dfa      	ldrb	r2, [r7, #23]
 800f0e2:	6939      	ldr	r1, [r7, #16]
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff feed 	bl	800eec4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f0ea:	687a      	ldr	r2, [r7, #4]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	3304      	adds	r3, #4
 800f0f0:	6939      	ldr	r1, [r7, #16]
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f7ff ff24 	bl	800ef40 <tcp_output_control_segment>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f0fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d007      	beq.n	800f114 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	8b5b      	ldrh	r3, [r3, #26]
 800f108:	f043 0303 	orr.w	r3, r3, #3
 800f10c:	b29a      	uxth	r2, r3
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	835a      	strh	r2, [r3, #26]
 800f112:	e006      	b.n	800f122 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	8b5b      	ldrh	r3, [r3, #26]
 800f118:	f023 0303 	bic.w	r3, r3, #3
 800f11c:	b29a      	uxth	r2, r3
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f122:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f126:	4618      	mov	r0, r3
 800f128:	371c      	adds	r7, #28
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd90      	pop	{r4, r7, pc}
 800f12e:	bf00      	nop
 800f130:	0801520c 	.word	0x0801520c
 800f134:	080159c8 	.word	0x080159c8
 800f138:	08015260 	.word	0x08015260

0800f13c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f13c:	b590      	push	{r4, r7, lr}
 800f13e:	b087      	sub	sp, #28
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f144:	2300      	movs	r3, #0
 800f146:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d106      	bne.n	800f15c <tcp_keepalive+0x20>
 800f14e:	4b18      	ldr	r3, [pc, #96]	@ (800f1b0 <tcp_keepalive+0x74>)
 800f150:	f640 0224 	movw	r2, #2084	@ 0x824
 800f154:	4917      	ldr	r1, [pc, #92]	@ (800f1b4 <tcp_keepalive+0x78>)
 800f156:	4818      	ldr	r0, [pc, #96]	@ (800f1b8 <tcp_keepalive+0x7c>)
 800f158:	f003 fb9c 	bl	8012894 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f15c:	7dfb      	ldrb	r3, [r7, #23]
 800f15e:	b29c      	uxth	r4, r3
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f164:	3b01      	subs	r3, #1
 800f166:	4618      	mov	r0, r3
 800f168:	f7f9 f926 	bl	80083b8 <lwip_htonl>
 800f16c:	4603      	mov	r3, r0
 800f16e:	2200      	movs	r2, #0
 800f170:	4621      	mov	r1, r4
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f7ff fe68 	bl	800ee48 <tcp_output_alloc_header>
 800f178:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d102      	bne.n	800f186 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f180:	f04f 33ff 	mov.w	r3, #4294967295
 800f184:	e010      	b.n	800f1a8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f186:	7dfb      	ldrb	r3, [r7, #23]
 800f188:	2200      	movs	r2, #0
 800f18a:	6939      	ldr	r1, [r7, #16]
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f7ff fe99 	bl	800eec4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f192:	687a      	ldr	r2, [r7, #4]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	3304      	adds	r3, #4
 800f198:	6939      	ldr	r1, [r7, #16]
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f7ff fed0 	bl	800ef40 <tcp_output_control_segment>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f1a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	371c      	adds	r7, #28
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd90      	pop	{r4, r7, pc}
 800f1b0:	0801520c 	.word	0x0801520c
 800f1b4:	080159e8 	.word	0x080159e8
 800f1b8:	08015260 	.word	0x08015260

0800f1bc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f1bc:	b590      	push	{r4, r7, lr}
 800f1be:	b08b      	sub	sp, #44	@ 0x2c
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d106      	bne.n	800f1de <tcp_zero_window_probe+0x22>
 800f1d0:	4b4c      	ldr	r3, [pc, #304]	@ (800f304 <tcp_zero_window_probe+0x148>)
 800f1d2:	f640 024f 	movw	r2, #2127	@ 0x84f
 800f1d6:	494c      	ldr	r1, [pc, #304]	@ (800f308 <tcp_zero_window_probe+0x14c>)
 800f1d8:	484c      	ldr	r0, [pc, #304]	@ (800f30c <tcp_zero_window_probe+0x150>)
 800f1da:	f003 fb5b 	bl	8012894 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1e2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f1e4:	6a3b      	ldr	r3, [r7, #32]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d101      	bne.n	800f1ee <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	e086      	b.n	800f2fc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f1f4:	2bff      	cmp	r3, #255	@ 0xff
 800f1f6:	d007      	beq.n	800f208 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f1fe:	3301      	adds	r3, #1
 800f200:	b2da      	uxtb	r2, r3
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f208:	6a3b      	ldr	r3, [r7, #32]
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	899b      	ldrh	r3, [r3, #12]
 800f20e:	b29b      	uxth	r3, r3
 800f210:	4618      	mov	r0, r3
 800f212:	f7f9 f8bb 	bl	800838c <lwip_htons>
 800f216:	4603      	mov	r3, r0
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	f003 0301 	and.w	r3, r3, #1
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d005      	beq.n	800f22e <tcp_zero_window_probe+0x72>
 800f222:	6a3b      	ldr	r3, [r7, #32]
 800f224:	891b      	ldrh	r3, [r3, #8]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d101      	bne.n	800f22e <tcp_zero_window_probe+0x72>
 800f22a:	2301      	movs	r3, #1
 800f22c:	e000      	b.n	800f230 <tcp_zero_window_probe+0x74>
 800f22e:	2300      	movs	r3, #0
 800f230:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f232:	7ffb      	ldrb	r3, [r7, #31]
 800f234:	2b00      	cmp	r3, #0
 800f236:	bf0c      	ite	eq
 800f238:	2301      	moveq	r3, #1
 800f23a:	2300      	movne	r3, #0
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f244:	b299      	uxth	r1, r3
 800f246:	6a3b      	ldr	r3, [r7, #32]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	8bba      	ldrh	r2, [r7, #28]
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7ff fdfa 	bl	800ee48 <tcp_output_alloc_header>
 800f254:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d102      	bne.n	800f262 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f25c:	f04f 33ff 	mov.w	r3, #4294967295
 800f260:	e04c      	b.n	800f2fc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f262:	69bb      	ldr	r3, [r7, #24]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f268:	7ffb      	ldrb	r3, [r7, #31]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d011      	beq.n	800f292 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	899b      	ldrh	r3, [r3, #12]
 800f272:	b29b      	uxth	r3, r3
 800f274:	b21b      	sxth	r3, r3
 800f276:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f27a:	b21c      	sxth	r4, r3
 800f27c:	2011      	movs	r0, #17
 800f27e:	f7f9 f885 	bl	800838c <lwip_htons>
 800f282:	4603      	mov	r3, r0
 800f284:	b21b      	sxth	r3, r3
 800f286:	4323      	orrs	r3, r4
 800f288:	b21b      	sxth	r3, r3
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	819a      	strh	r2, [r3, #12]
 800f290:	e010      	b.n	800f2b4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f292:	69bb      	ldr	r3, [r7, #24]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	3314      	adds	r3, #20
 800f298:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f29a:	6a3b      	ldr	r3, [r7, #32]
 800f29c:	6858      	ldr	r0, [r3, #4]
 800f29e:	6a3b      	ldr	r3, [r7, #32]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	891a      	ldrh	r2, [r3, #8]
 800f2a4:	6a3b      	ldr	r3, [r7, #32]
 800f2a6:	891b      	ldrh	r3, [r3, #8]
 800f2a8:	1ad3      	subs	r3, r2, r3
 800f2aa:	b29b      	uxth	r3, r3
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	6939      	ldr	r1, [r7, #16]
 800f2b0:	f7fa fdc4 	bl	8009e3c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f2b4:	6a3b      	ldr	r3, [r7, #32]
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7f9 f87c 	bl	80083b8 <lwip_htonl>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	1ad3      	subs	r3, r2, r3
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	da02      	bge.n	800f2d8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f2dc:	2200      	movs	r2, #0
 800f2de:	69b9      	ldr	r1, [r7, #24]
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f7ff fdef 	bl	800eec4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	3304      	adds	r3, #4
 800f2ec:	69b9      	ldr	r1, [r7, #24]
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f7ff fe26 	bl	800ef40 <tcp_output_control_segment>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f2f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	372c      	adds	r7, #44	@ 0x2c
 800f300:	46bd      	mov	sp, r7
 800f302:	bd90      	pop	{r4, r7, pc}
 800f304:	0801520c 	.word	0x0801520c
 800f308:	08015a04 	.word	0x08015a04
 800f30c:	08015260 	.word	0x08015260

0800f310 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f318:	f7fa ff10 	bl	800a13c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f31c:	4b0a      	ldr	r3, [pc, #40]	@ (800f348 <tcpip_tcp_timer+0x38>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d103      	bne.n	800f32c <tcpip_tcp_timer+0x1c>
 800f324:	4b09      	ldr	r3, [pc, #36]	@ (800f34c <tcpip_tcp_timer+0x3c>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d005      	beq.n	800f338 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f32c:	2200      	movs	r2, #0
 800f32e:	4908      	ldr	r1, [pc, #32]	@ (800f350 <tcpip_tcp_timer+0x40>)
 800f330:	20fa      	movs	r0, #250	@ 0xfa
 800f332:	f000 f8f3 	bl	800f51c <sys_timeout>
 800f336:	e003      	b.n	800f340 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f338:	4b06      	ldr	r3, [pc, #24]	@ (800f354 <tcpip_tcp_timer+0x44>)
 800f33a:	2200      	movs	r2, #0
 800f33c:	601a      	str	r2, [r3, #0]
  }
}
 800f33e:	bf00      	nop
 800f340:	bf00      	nop
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	200089a8 	.word	0x200089a8
 800f34c:	200089ac 	.word	0x200089ac
 800f350:	0800f311 	.word	0x0800f311
 800f354:	200089f4 	.word	0x200089f4

0800f358 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f35c:	4b0a      	ldr	r3, [pc, #40]	@ (800f388 <tcp_timer_needed+0x30>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d10f      	bne.n	800f384 <tcp_timer_needed+0x2c>
 800f364:	4b09      	ldr	r3, [pc, #36]	@ (800f38c <tcp_timer_needed+0x34>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d103      	bne.n	800f374 <tcp_timer_needed+0x1c>
 800f36c:	4b08      	ldr	r3, [pc, #32]	@ (800f390 <tcp_timer_needed+0x38>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d007      	beq.n	800f384 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f374:	4b04      	ldr	r3, [pc, #16]	@ (800f388 <tcp_timer_needed+0x30>)
 800f376:	2201      	movs	r2, #1
 800f378:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f37a:	2200      	movs	r2, #0
 800f37c:	4905      	ldr	r1, [pc, #20]	@ (800f394 <tcp_timer_needed+0x3c>)
 800f37e:	20fa      	movs	r0, #250	@ 0xfa
 800f380:	f000 f8cc 	bl	800f51c <sys_timeout>
  }
}
 800f384:	bf00      	nop
 800f386:	bd80      	pop	{r7, pc}
 800f388:	200089f4 	.word	0x200089f4
 800f38c:	200089a8 	.word	0x200089a8
 800f390:	200089ac 	.word	0x200089ac
 800f394:	0800f311 	.word	0x0800f311

0800f398 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b086      	sub	sp, #24
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	60b9      	str	r1, [r7, #8]
 800f3a2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f3a4:	2006      	movs	r0, #6
 800f3a6:	f7f9 fc69 	bl	8008c7c <memp_malloc>
 800f3aa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d109      	bne.n	800f3c6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d151      	bne.n	800f45c <sys_timeout_abs+0xc4>
 800f3b8:	4b2a      	ldr	r3, [pc, #168]	@ (800f464 <sys_timeout_abs+0xcc>)
 800f3ba:	22be      	movs	r2, #190	@ 0xbe
 800f3bc:	492a      	ldr	r1, [pc, #168]	@ (800f468 <sys_timeout_abs+0xd0>)
 800f3be:	482b      	ldr	r0, [pc, #172]	@ (800f46c <sys_timeout_abs+0xd4>)
 800f3c0:	f003 fa68 	bl	8012894 <iprintf>
    return;
 800f3c4:	e04a      	b.n	800f45c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	68ba      	ldr	r2, [r7, #8]
 800f3d0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	68fa      	ldr	r2, [r7, #12]
 800f3dc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f3de:	4b24      	ldr	r3, [pc, #144]	@ (800f470 <sys_timeout_abs+0xd8>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d103      	bne.n	800f3ee <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f3e6:	4a22      	ldr	r2, [pc, #136]	@ (800f470 <sys_timeout_abs+0xd8>)
 800f3e8:	693b      	ldr	r3, [r7, #16]
 800f3ea:	6013      	str	r3, [r2, #0]
    return;
 800f3ec:	e037      	b.n	800f45e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	685a      	ldr	r2, [r3, #4]
 800f3f2:	4b1f      	ldr	r3, [pc, #124]	@ (800f470 <sys_timeout_abs+0xd8>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	1ad3      	subs	r3, r2, r3
 800f3fa:	0fdb      	lsrs	r3, r3, #31
 800f3fc:	f003 0301 	and.w	r3, r3, #1
 800f400:	b2db      	uxtb	r3, r3
 800f402:	2b00      	cmp	r3, #0
 800f404:	d007      	beq.n	800f416 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f406:	4b1a      	ldr	r3, [pc, #104]	@ (800f470 <sys_timeout_abs+0xd8>)
 800f408:	681a      	ldr	r2, [r3, #0]
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f40e:	4a18      	ldr	r2, [pc, #96]	@ (800f470 <sys_timeout_abs+0xd8>)
 800f410:	693b      	ldr	r3, [r7, #16]
 800f412:	6013      	str	r3, [r2, #0]
 800f414:	e023      	b.n	800f45e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f416:	4b16      	ldr	r3, [pc, #88]	@ (800f470 <sys_timeout_abs+0xd8>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	617b      	str	r3, [r7, #20]
 800f41c:	e01a      	b.n	800f454 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d00b      	beq.n	800f43e <sys_timeout_abs+0xa6>
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	685a      	ldr	r2, [r3, #4]
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	1ad3      	subs	r3, r2, r3
 800f432:	0fdb      	lsrs	r3, r3, #31
 800f434:	f003 0301 	and.w	r3, r3, #1
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d007      	beq.n	800f44e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	693a      	ldr	r2, [r7, #16]
 800f44a:	601a      	str	r2, [r3, #0]
        break;
 800f44c:	e007      	b.n	800f45e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	617b      	str	r3, [r7, #20]
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d1e1      	bne.n	800f41e <sys_timeout_abs+0x86>
 800f45a:	e000      	b.n	800f45e <sys_timeout_abs+0xc6>
    return;
 800f45c:	bf00      	nop
      }
    }
  }
}
 800f45e:	3718      	adds	r7, #24
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	08015a28 	.word	0x08015a28
 800f468:	08015a5c 	.word	0x08015a5c
 800f46c:	08015a9c 	.word	0x08015a9c
 800f470:	200089ec 	.word	0x200089ec

0800f474 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b086      	sub	sp, #24
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	4798      	blx	r3

  now = sys_now();
 800f486:	f7f8 fd81 	bl	8007f8c <sys_now>
 800f48a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	681a      	ldr	r2, [r3, #0]
 800f490:	4b0f      	ldr	r3, [pc, #60]	@ (800f4d0 <lwip_cyclic_timer+0x5c>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4413      	add	r3, r2
 800f496:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f498:	68fa      	ldr	r2, [r7, #12]
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	1ad3      	subs	r3, r2, r3
 800f49e:	0fdb      	lsrs	r3, r3, #31
 800f4a0:	f003 0301 	and.w	r3, r3, #1
 800f4a4:	b2db      	uxtb	r3, r3
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d009      	beq.n	800f4be <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	681a      	ldr	r2, [r3, #0]
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	4907      	ldr	r1, [pc, #28]	@ (800f4d4 <lwip_cyclic_timer+0x60>)
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f7ff ff6e 	bl	800f398 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f4bc:	e004      	b.n	800f4c8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	4904      	ldr	r1, [pc, #16]	@ (800f4d4 <lwip_cyclic_timer+0x60>)
 800f4c2:	68f8      	ldr	r0, [r7, #12]
 800f4c4:	f7ff ff68 	bl	800f398 <sys_timeout_abs>
}
 800f4c8:	bf00      	nop
 800f4ca:	3718      	adds	r7, #24
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	200089f0 	.word	0x200089f0
 800f4d4:	0800f475 	.word	0x0800f475

0800f4d8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f4de:	2301      	movs	r3, #1
 800f4e0:	607b      	str	r3, [r7, #4]
 800f4e2:	e00e      	b.n	800f502 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f4e4:	4a0b      	ldr	r2, [pc, #44]	@ (800f514 <sys_timeouts_init+0x3c>)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	00db      	lsls	r3, r3, #3
 800f4f0:	4a08      	ldr	r2, [pc, #32]	@ (800f514 <sys_timeouts_init+0x3c>)
 800f4f2:	4413      	add	r3, r2
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	4908      	ldr	r1, [pc, #32]	@ (800f518 <sys_timeouts_init+0x40>)
 800f4f8:	f000 f810 	bl	800f51c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	3301      	adds	r3, #1
 800f500:	607b      	str	r3, [r7, #4]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2b02      	cmp	r3, #2
 800f506:	d9ed      	bls.n	800f4e4 <sys_timeouts_init+0xc>
  }
}
 800f508:	bf00      	nop
 800f50a:	bf00      	nop
 800f50c:	3708      	adds	r7, #8
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
 800f512:	bf00      	nop
 800f514:	08016614 	.word	0x08016614
 800f518:	0800f475 	.word	0x0800f475

0800f51c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b086      	sub	sp, #24
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f52e:	d306      	bcc.n	800f53e <sys_timeout+0x22>
 800f530:	4b0a      	ldr	r3, [pc, #40]	@ (800f55c <sys_timeout+0x40>)
 800f532:	f240 1229 	movw	r2, #297	@ 0x129
 800f536:	490a      	ldr	r1, [pc, #40]	@ (800f560 <sys_timeout+0x44>)
 800f538:	480a      	ldr	r0, [pc, #40]	@ (800f564 <sys_timeout+0x48>)
 800f53a:	f003 f9ab 	bl	8012894 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f53e:	f7f8 fd25 	bl	8007f8c <sys_now>
 800f542:	4602      	mov	r2, r0
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	4413      	add	r3, r2
 800f548:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	68b9      	ldr	r1, [r7, #8]
 800f54e:	6978      	ldr	r0, [r7, #20]
 800f550:	f7ff ff22 	bl	800f398 <sys_timeout_abs>
#endif
}
 800f554:	bf00      	nop
 800f556:	3718      	adds	r7, #24
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	08015a28 	.word	0x08015a28
 800f560:	08015ac4 	.word	0x08015ac4
 800f564:	08015a9c 	.word	0x08015a9c

0800f568 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b084      	sub	sp, #16
 800f56c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f56e:	f7f8 fd0d 	bl	8007f8c <sys_now>
 800f572:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f574:	4b1a      	ldr	r3, [pc, #104]	@ (800f5e0 <sys_check_timeouts+0x78>)
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d001      	beq.n	800f582 <sys_check_timeouts+0x1a>
 800f57e:	f7f9 ff29 	bl	80093d4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f582:	4b18      	ldr	r3, [pc, #96]	@ (800f5e4 <sys_check_timeouts+0x7c>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d022      	beq.n	800f5d4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	1ad3      	subs	r3, r2, r3
 800f596:	0fdb      	lsrs	r3, r3, #31
 800f598:	f003 0301 	and.w	r3, r3, #1
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d11a      	bne.n	800f5d8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	4a0f      	ldr	r2, [pc, #60]	@ (800f5e4 <sys_check_timeouts+0x7c>)
 800f5a8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	689b      	ldr	r3, [r3, #8]
 800f5ae:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	68db      	ldr	r3, [r3, #12]
 800f5b4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	4a0b      	ldr	r2, [pc, #44]	@ (800f5e8 <sys_check_timeouts+0x80>)
 800f5bc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f5be:	68b9      	ldr	r1, [r7, #8]
 800f5c0:	2006      	movs	r0, #6
 800f5c2:	f7f9 fbcb 	bl	8008d5c <memp_free>
    if (handler != NULL) {
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d0d3      	beq.n	800f574 <sys_check_timeouts+0xc>
      handler(arg);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6838      	ldr	r0, [r7, #0]
 800f5d0:	4798      	blx	r3
  do {
 800f5d2:	e7cf      	b.n	800f574 <sys_check_timeouts+0xc>
      return;
 800f5d4:	bf00      	nop
 800f5d6:	e000      	b.n	800f5da <sys_check_timeouts+0x72>
      return;
 800f5d8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f5da:	3710      	adds	r7, #16
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}
 800f5e0:	20008999 	.word	0x20008999
 800f5e4:	200089ec 	.word	0x200089ec
 800f5e8:	200089f0 	.word	0x200089f0

0800f5ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f5f0:	f002 ffcc 	bl	801258c <rand>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f5fc:	b29b      	uxth	r3, r3
 800f5fe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f602:	b29a      	uxth	r2, r3
 800f604:	4b01      	ldr	r3, [pc, #4]	@ (800f60c <udp_init+0x20>)
 800f606:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f608:	bf00      	nop
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	200000a0 	.word	0x200000a0

0800f610 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f610:	b480      	push	{r7}
 800f612:	b083      	sub	sp, #12
 800f614:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f616:	2300      	movs	r3, #0
 800f618:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f61a:	4b17      	ldr	r3, [pc, #92]	@ (800f678 <udp_new_port+0x68>)
 800f61c:	881b      	ldrh	r3, [r3, #0]
 800f61e:	1c5a      	adds	r2, r3, #1
 800f620:	b291      	uxth	r1, r2
 800f622:	4a15      	ldr	r2, [pc, #84]	@ (800f678 <udp_new_port+0x68>)
 800f624:	8011      	strh	r1, [r2, #0]
 800f626:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d103      	bne.n	800f636 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f62e:	4b12      	ldr	r3, [pc, #72]	@ (800f678 <udp_new_port+0x68>)
 800f630:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800f634:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f636:	4b11      	ldr	r3, [pc, #68]	@ (800f67c <udp_new_port+0x6c>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	603b      	str	r3, [r7, #0]
 800f63c:	e011      	b.n	800f662 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	8a5a      	ldrh	r2, [r3, #18]
 800f642:	4b0d      	ldr	r3, [pc, #52]	@ (800f678 <udp_new_port+0x68>)
 800f644:	881b      	ldrh	r3, [r3, #0]
 800f646:	429a      	cmp	r2, r3
 800f648:	d108      	bne.n	800f65c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f64a:	88fb      	ldrh	r3, [r7, #6]
 800f64c:	3301      	adds	r3, #1
 800f64e:	80fb      	strh	r3, [r7, #6]
 800f650:	88fb      	ldrh	r3, [r7, #6]
 800f652:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f656:	d3e0      	bcc.n	800f61a <udp_new_port+0xa>
        return 0;
 800f658:	2300      	movs	r3, #0
 800f65a:	e007      	b.n	800f66c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	68db      	ldr	r3, [r3, #12]
 800f660:	603b      	str	r3, [r7, #0]
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d1ea      	bne.n	800f63e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f668:	4b03      	ldr	r3, [pc, #12]	@ (800f678 <udp_new_port+0x68>)
 800f66a:	881b      	ldrh	r3, [r3, #0]
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr
 800f678:	200000a0 	.word	0x200000a0
 800f67c:	200089f8 	.word	0x200089f8

0800f680 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	60f8      	str	r0, [r7, #12]
 800f688:	60b9      	str	r1, [r7, #8]
 800f68a:	4613      	mov	r3, r2
 800f68c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d105      	bne.n	800f6a0 <udp_input_local_match+0x20>
 800f694:	4b27      	ldr	r3, [pc, #156]	@ (800f734 <udp_input_local_match+0xb4>)
 800f696:	2287      	movs	r2, #135	@ 0x87
 800f698:	4927      	ldr	r1, [pc, #156]	@ (800f738 <udp_input_local_match+0xb8>)
 800f69a:	4828      	ldr	r0, [pc, #160]	@ (800f73c <udp_input_local_match+0xbc>)
 800f69c:	f003 f8fa 	bl	8012894 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d105      	bne.n	800f6b2 <udp_input_local_match+0x32>
 800f6a6:	4b23      	ldr	r3, [pc, #140]	@ (800f734 <udp_input_local_match+0xb4>)
 800f6a8:	2288      	movs	r2, #136	@ 0x88
 800f6aa:	4925      	ldr	r1, [pc, #148]	@ (800f740 <udp_input_local_match+0xc0>)
 800f6ac:	4823      	ldr	r0, [pc, #140]	@ (800f73c <udp_input_local_match+0xbc>)
 800f6ae:	f003 f8f1 	bl	8012894 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	7a1b      	ldrb	r3, [r3, #8]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d00b      	beq.n	800f6d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	7a1a      	ldrb	r2, [r3, #8]
 800f6be:	4b21      	ldr	r3, [pc, #132]	@ (800f744 <udp_input_local_match+0xc4>)
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d001      	beq.n	800f6d2 <udp_input_local_match+0x52>
    return 0;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	e02b      	b.n	800f72a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f6d2:	79fb      	ldrb	r3, [r7, #7]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d018      	beq.n	800f70a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d013      	beq.n	800f706 <udp_input_local_match+0x86>
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d00f      	beq.n	800f706 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f6e6:	4b17      	ldr	r3, [pc, #92]	@ (800f744 <udp_input_local_match+0xc4>)
 800f6e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ee:	d00a      	beq.n	800f706 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	4b13      	ldr	r3, [pc, #76]	@ (800f744 <udp_input_local_match+0xc4>)
 800f6f6:	695b      	ldr	r3, [r3, #20]
 800f6f8:	405a      	eors	r2, r3
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	3308      	adds	r3, #8
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f702:	2b00      	cmp	r3, #0
 800f704:	d110      	bne.n	800f728 <udp_input_local_match+0xa8>
          return 1;
 800f706:	2301      	movs	r3, #1
 800f708:	e00f      	b.n	800f72a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d009      	beq.n	800f724 <udp_input_local_match+0xa4>
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d005      	beq.n	800f724 <udp_input_local_match+0xa4>
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	4b09      	ldr	r3, [pc, #36]	@ (800f744 <udp_input_local_match+0xc4>)
 800f71e:	695b      	ldr	r3, [r3, #20]
 800f720:	429a      	cmp	r2, r3
 800f722:	d101      	bne.n	800f728 <udp_input_local_match+0xa8>
        return 1;
 800f724:	2301      	movs	r3, #1
 800f726:	e000      	b.n	800f72a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f728:	2300      	movs	r3, #0
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3710      	adds	r7, #16
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	08015b10 	.word	0x08015b10
 800f738:	08015b40 	.word	0x08015b40
 800f73c:	08015b64 	.word	0x08015b64
 800f740:	08015b8c 	.word	0x08015b8c
 800f744:	2000566c 	.word	0x2000566c

0800f748 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f748:	b590      	push	{r4, r7, lr}
 800f74a:	b08d      	sub	sp, #52	@ 0x34
 800f74c:	af02      	add	r7, sp, #8
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f752:	2300      	movs	r3, #0
 800f754:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d105      	bne.n	800f768 <udp_input+0x20>
 800f75c:	4b7c      	ldr	r3, [pc, #496]	@ (800f950 <udp_input+0x208>)
 800f75e:	22cf      	movs	r2, #207	@ 0xcf
 800f760:	497c      	ldr	r1, [pc, #496]	@ (800f954 <udp_input+0x20c>)
 800f762:	487d      	ldr	r0, [pc, #500]	@ (800f958 <udp_input+0x210>)
 800f764:	f003 f896 	bl	8012894 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d105      	bne.n	800f77a <udp_input+0x32>
 800f76e:	4b78      	ldr	r3, [pc, #480]	@ (800f950 <udp_input+0x208>)
 800f770:	22d0      	movs	r2, #208	@ 0xd0
 800f772:	497a      	ldr	r1, [pc, #488]	@ (800f95c <udp_input+0x214>)
 800f774:	4878      	ldr	r0, [pc, #480]	@ (800f958 <udp_input+0x210>)
 800f776:	f003 f88d 	bl	8012894 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	895b      	ldrh	r3, [r3, #10]
 800f77e:	2b07      	cmp	r3, #7
 800f780:	d803      	bhi.n	800f78a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f7fa f960 	bl	8009a48 <pbuf_free>
    goto end;
 800f788:	e0de      	b.n	800f948 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f790:	4b73      	ldr	r3, [pc, #460]	@ (800f960 <udp_input+0x218>)
 800f792:	695b      	ldr	r3, [r3, #20]
 800f794:	4a72      	ldr	r2, [pc, #456]	@ (800f960 <udp_input+0x218>)
 800f796:	6812      	ldr	r2, [r2, #0]
 800f798:	4611      	mov	r1, r2
 800f79a:	4618      	mov	r0, r3
 800f79c:	f001 ffa0 	bl	80116e0 <ip4_addr_isbroadcast_u32>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	881b      	ldrh	r3, [r3, #0]
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7f8 fdee 	bl	800838c <lwip_htons>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	885b      	ldrh	r3, [r3, #2]
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7f8 fde6 	bl	800838c <lwip_htons>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7d0:	4b64      	ldr	r3, [pc, #400]	@ (800f964 <udp_input+0x21c>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800f7d6:	e054      	b.n	800f882 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7da:	8a5b      	ldrh	r3, [r3, #18]
 800f7dc:	89fa      	ldrh	r2, [r7, #14]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d14a      	bne.n	800f878 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f7e2:	7cfb      	ldrb	r3, [r7, #19]
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	6839      	ldr	r1, [r7, #0]
 800f7e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f7ea:	f7ff ff49 	bl	800f680 <udp_input_local_match>
 800f7ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d041      	beq.n	800f878 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f6:	7c1b      	ldrb	r3, [r3, #16]
 800f7f8:	f003 0304 	and.w	r3, r3, #4
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d11d      	bne.n	800f83c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d102      	bne.n	800f80c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f808:	61fb      	str	r3, [r7, #28]
 800f80a:	e017      	b.n	800f83c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f80c:	7cfb      	ldrb	r3, [r7, #19]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d014      	beq.n	800f83c <udp_input+0xf4>
 800f812:	4b53      	ldr	r3, [pc, #332]	@ (800f960 <udp_input+0x218>)
 800f814:	695b      	ldr	r3, [r3, #20]
 800f816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f81a:	d10f      	bne.n	800f83c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f81c:	69fb      	ldr	r3, [r7, #28]
 800f81e:	681a      	ldr	r2, [r3, #0]
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	3304      	adds	r3, #4
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	429a      	cmp	r2, r3
 800f828:	d008      	beq.n	800f83c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f82c:	681a      	ldr	r2, [r3, #0]
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	3304      	adds	r3, #4
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	429a      	cmp	r2, r3
 800f836:	d101      	bne.n	800f83c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f83a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f83e:	8a9b      	ldrh	r3, [r3, #20]
 800f840:	8a3a      	ldrh	r2, [r7, #16]
 800f842:	429a      	cmp	r2, r3
 800f844:	d118      	bne.n	800f878 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f848:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d005      	beq.n	800f85a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f850:	685a      	ldr	r2, [r3, #4]
 800f852:	4b43      	ldr	r3, [pc, #268]	@ (800f960 <udp_input+0x218>)
 800f854:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f856:	429a      	cmp	r2, r3
 800f858:	d10e      	bne.n	800f878 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f85a:	6a3b      	ldr	r3, [r7, #32]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d014      	beq.n	800f88a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f862:	68da      	ldr	r2, [r3, #12]
 800f864:	6a3b      	ldr	r3, [r7, #32]
 800f866:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f868:	4b3e      	ldr	r3, [pc, #248]	@ (800f964 <udp_input+0x21c>)
 800f86a:	681a      	ldr	r2, [r3, #0]
 800f86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f86e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f870:	4a3c      	ldr	r2, [pc, #240]	@ (800f964 <udp_input+0x21c>)
 800f872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f874:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f876:	e008      	b.n	800f88a <udp_input+0x142>
      }
    }

    prev = pcb;
 800f878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f87a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f87e:	68db      	ldr	r3, [r3, #12]
 800f880:	627b      	str	r3, [r7, #36]	@ 0x24
 800f882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f884:	2b00      	cmp	r3, #0
 800f886:	d1a7      	bne.n	800f7d8 <udp_input+0x90>
 800f888:	e000      	b.n	800f88c <udp_input+0x144>
        break;
 800f88a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d101      	bne.n	800f896 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d002      	beq.n	800f8a2 <udp_input+0x15a>
    for_us = 1;
 800f89c:	2301      	movs	r3, #1
 800f89e:	76fb      	strb	r3, [r7, #27]
 800f8a0:	e00a      	b.n	800f8b8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	3304      	adds	r3, #4
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	4b2d      	ldr	r3, [pc, #180]	@ (800f960 <udp_input+0x218>)
 800f8aa:	695b      	ldr	r3, [r3, #20]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	bf0c      	ite	eq
 800f8b0:	2301      	moveq	r3, #1
 800f8b2:	2300      	movne	r3, #0
 800f8b4:	b2db      	uxtb	r3, r3
 800f8b6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f8b8:	7efb      	ldrb	r3, [r7, #27]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d041      	beq.n	800f942 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f8be:	2108      	movs	r1, #8
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f7fa f83b 	bl	800993c <pbuf_remove_header>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d00a      	beq.n	800f8e2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f8cc:	4b20      	ldr	r3, [pc, #128]	@ (800f950 <udp_input+0x208>)
 800f8ce:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800f8d2:	4925      	ldr	r1, [pc, #148]	@ (800f968 <udp_input+0x220>)
 800f8d4:	4820      	ldr	r0, [pc, #128]	@ (800f958 <udp_input+0x210>)
 800f8d6:	f002 ffdd 	bl	8012894 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f7fa f8b4 	bl	8009a48 <pbuf_free>
      goto end;
 800f8e0:	e032      	b.n	800f948 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d012      	beq.n	800f90e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ea:	699b      	ldr	r3, [r3, #24]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d00a      	beq.n	800f906 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f2:	699c      	ldr	r4, [r3, #24]
 800f8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f6:	69d8      	ldr	r0, [r3, #28]
 800f8f8:	8a3b      	ldrh	r3, [r7, #16]
 800f8fa:	9300      	str	r3, [sp, #0]
 800f8fc:	4b1b      	ldr	r3, [pc, #108]	@ (800f96c <udp_input+0x224>)
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f902:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f904:	e021      	b.n	800f94a <udp_input+0x202>
        pbuf_free(p);
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7fa f89e 	bl	8009a48 <pbuf_free>
        goto end;
 800f90c:	e01c      	b.n	800f948 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f90e:	7cfb      	ldrb	r3, [r7, #19]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d112      	bne.n	800f93a <udp_input+0x1f2>
 800f914:	4b12      	ldr	r3, [pc, #72]	@ (800f960 <udp_input+0x218>)
 800f916:	695b      	ldr	r3, [r3, #20]
 800f918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f91c:	2be0      	cmp	r3, #224	@ 0xe0
 800f91e:	d00c      	beq.n	800f93a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f920:	4b0f      	ldr	r3, [pc, #60]	@ (800f960 <udp_input+0x218>)
 800f922:	899b      	ldrh	r3, [r3, #12]
 800f924:	3308      	adds	r3, #8
 800f926:	b29b      	uxth	r3, r3
 800f928:	b21b      	sxth	r3, r3
 800f92a:	4619      	mov	r1, r3
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f7fa f878 	bl	8009a22 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f932:	2103      	movs	r1, #3
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f001 fbb3 	bl	80110a0 <icmp_dest_unreach>
      pbuf_free(p);
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f7fa f884 	bl	8009a48 <pbuf_free>
  return;
 800f940:	e003      	b.n	800f94a <udp_input+0x202>
    pbuf_free(p);
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f7fa f880 	bl	8009a48 <pbuf_free>
  return;
 800f948:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f94a:	372c      	adds	r7, #44	@ 0x2c
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd90      	pop	{r4, r7, pc}
 800f950:	08015b10 	.word	0x08015b10
 800f954:	08015bb4 	.word	0x08015bb4
 800f958:	08015b64 	.word	0x08015b64
 800f95c:	08015bcc 	.word	0x08015bcc
 800f960:	2000566c 	.word	0x2000566c
 800f964:	200089f8 	.word	0x200089f8
 800f968:	08015be8 	.word	0x08015be8
 800f96c:	2000567c 	.word	0x2000567c

0800f970 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d109      	bne.n	800f994 <udp_send+0x24>
 800f980:	4b11      	ldr	r3, [pc, #68]	@ (800f9c8 <udp_send+0x58>)
 800f982:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800f986:	4911      	ldr	r1, [pc, #68]	@ (800f9cc <udp_send+0x5c>)
 800f988:	4811      	ldr	r0, [pc, #68]	@ (800f9d0 <udp_send+0x60>)
 800f98a:	f002 ff83 	bl	8012894 <iprintf>
 800f98e:	f06f 030f 	mvn.w	r3, #15
 800f992:	e015      	b.n	800f9c0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d109      	bne.n	800f9ae <udp_send+0x3e>
 800f99a:	4b0b      	ldr	r3, [pc, #44]	@ (800f9c8 <udp_send+0x58>)
 800f99c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 800f9a0:	490c      	ldr	r1, [pc, #48]	@ (800f9d4 <udp_send+0x64>)
 800f9a2:	480b      	ldr	r0, [pc, #44]	@ (800f9d0 <udp_send+0x60>)
 800f9a4:	f002 ff76 	bl	8012894 <iprintf>
 800f9a8:	f06f 030f 	mvn.w	r3, #15
 800f9ac:	e008      	b.n	800f9c0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	1d1a      	adds	r2, r3, #4
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	8a9b      	ldrh	r3, [r3, #20]
 800f9b6:	6839      	ldr	r1, [r7, #0]
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f000 f80d 	bl	800f9d8 <udp_sendto>
 800f9be:	4603      	mov	r3, r0
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3708      	adds	r7, #8
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	08015b10 	.word	0x08015b10
 800f9cc:	08015c04 	.word	0x08015c04
 800f9d0:	08015b64 	.word	0x08015b64
 800f9d4:	08015c1c 	.word	0x08015c1c

0800f9d8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b088      	sub	sp, #32
 800f9dc:	af02      	add	r7, sp, #8
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	607a      	str	r2, [r7, #4]
 800f9e4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d109      	bne.n	800fa00 <udp_sendto+0x28>
 800f9ec:	4b23      	ldr	r3, [pc, #140]	@ (800fa7c <udp_sendto+0xa4>)
 800f9ee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f9f2:	4923      	ldr	r1, [pc, #140]	@ (800fa80 <udp_sendto+0xa8>)
 800f9f4:	4823      	ldr	r0, [pc, #140]	@ (800fa84 <udp_sendto+0xac>)
 800f9f6:	f002 ff4d 	bl	8012894 <iprintf>
 800f9fa:	f06f 030f 	mvn.w	r3, #15
 800f9fe:	e038      	b.n	800fa72 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d109      	bne.n	800fa1a <udp_sendto+0x42>
 800fa06:	4b1d      	ldr	r3, [pc, #116]	@ (800fa7c <udp_sendto+0xa4>)
 800fa08:	f240 2219 	movw	r2, #537	@ 0x219
 800fa0c:	491e      	ldr	r1, [pc, #120]	@ (800fa88 <udp_sendto+0xb0>)
 800fa0e:	481d      	ldr	r0, [pc, #116]	@ (800fa84 <udp_sendto+0xac>)
 800fa10:	f002 ff40 	bl	8012894 <iprintf>
 800fa14:	f06f 030f 	mvn.w	r3, #15
 800fa18:	e02b      	b.n	800fa72 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d109      	bne.n	800fa34 <udp_sendto+0x5c>
 800fa20:	4b16      	ldr	r3, [pc, #88]	@ (800fa7c <udp_sendto+0xa4>)
 800fa22:	f240 221a 	movw	r2, #538	@ 0x21a
 800fa26:	4919      	ldr	r1, [pc, #100]	@ (800fa8c <udp_sendto+0xb4>)
 800fa28:	4816      	ldr	r0, [pc, #88]	@ (800fa84 <udp_sendto+0xac>)
 800fa2a:	f002 ff33 	bl	8012894 <iprintf>
 800fa2e:	f06f 030f 	mvn.w	r3, #15
 800fa32:	e01e      	b.n	800fa72 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	7a1b      	ldrb	r3, [r3, #8]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d006      	beq.n	800fa4a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	7a1b      	ldrb	r3, [r3, #8]
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7f9 fca1 	bl	8009388 <netif_get_by_index>
 800fa46:	6178      	str	r0, [r7, #20]
 800fa48:	e003      	b.n	800fa52 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f001 fbb2 	bl	80111b4 <ip4_route>
 800fa50:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d102      	bne.n	800fa5e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800fa58:	f06f 0303 	mvn.w	r3, #3
 800fa5c:	e009      	b.n	800fa72 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800fa5e:	887a      	ldrh	r2, [r7, #2]
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	9300      	str	r3, [sp, #0]
 800fa64:	4613      	mov	r3, r2
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	68b9      	ldr	r1, [r7, #8]
 800fa6a:	68f8      	ldr	r0, [r7, #12]
 800fa6c:	f000 f810 	bl	800fa90 <udp_sendto_if>
 800fa70:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3718      	adds	r7, #24
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	08015b10 	.word	0x08015b10
 800fa80:	08015c34 	.word	0x08015c34
 800fa84:	08015b64 	.word	0x08015b64
 800fa88:	08015c4c 	.word	0x08015c4c
 800fa8c:	08015c68 	.word	0x08015c68

0800fa90 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b088      	sub	sp, #32
 800fa94:	af02      	add	r7, sp, #8
 800fa96:	60f8      	str	r0, [r7, #12]
 800fa98:	60b9      	str	r1, [r7, #8]
 800fa9a:	607a      	str	r2, [r7, #4]
 800fa9c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d109      	bne.n	800fab8 <udp_sendto_if+0x28>
 800faa4:	4b2e      	ldr	r3, [pc, #184]	@ (800fb60 <udp_sendto_if+0xd0>)
 800faa6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800faaa:	492e      	ldr	r1, [pc, #184]	@ (800fb64 <udp_sendto_if+0xd4>)
 800faac:	482e      	ldr	r0, [pc, #184]	@ (800fb68 <udp_sendto_if+0xd8>)
 800faae:	f002 fef1 	bl	8012894 <iprintf>
 800fab2:	f06f 030f 	mvn.w	r3, #15
 800fab6:	e04f      	b.n	800fb58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d109      	bne.n	800fad2 <udp_sendto_if+0x42>
 800fabe:	4b28      	ldr	r3, [pc, #160]	@ (800fb60 <udp_sendto_if+0xd0>)
 800fac0:	f240 2281 	movw	r2, #641	@ 0x281
 800fac4:	4929      	ldr	r1, [pc, #164]	@ (800fb6c <udp_sendto_if+0xdc>)
 800fac6:	4828      	ldr	r0, [pc, #160]	@ (800fb68 <udp_sendto_if+0xd8>)
 800fac8:	f002 fee4 	bl	8012894 <iprintf>
 800facc:	f06f 030f 	mvn.w	r3, #15
 800fad0:	e042      	b.n	800fb58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d109      	bne.n	800faec <udp_sendto_if+0x5c>
 800fad8:	4b21      	ldr	r3, [pc, #132]	@ (800fb60 <udp_sendto_if+0xd0>)
 800fada:	f240 2282 	movw	r2, #642	@ 0x282
 800fade:	4924      	ldr	r1, [pc, #144]	@ (800fb70 <udp_sendto_if+0xe0>)
 800fae0:	4821      	ldr	r0, [pc, #132]	@ (800fb68 <udp_sendto_if+0xd8>)
 800fae2:	f002 fed7 	bl	8012894 <iprintf>
 800fae6:	f06f 030f 	mvn.w	r3, #15
 800faea:	e035      	b.n	800fb58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800faec:	6a3b      	ldr	r3, [r7, #32]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d109      	bne.n	800fb06 <udp_sendto_if+0x76>
 800faf2:	4b1b      	ldr	r3, [pc, #108]	@ (800fb60 <udp_sendto_if+0xd0>)
 800faf4:	f240 2283 	movw	r2, #643	@ 0x283
 800faf8:	491e      	ldr	r1, [pc, #120]	@ (800fb74 <udp_sendto_if+0xe4>)
 800fafa:	481b      	ldr	r0, [pc, #108]	@ (800fb68 <udp_sendto_if+0xd8>)
 800fafc:	f002 feca 	bl	8012894 <iprintf>
 800fb00:	f06f 030f 	mvn.w	r3, #15
 800fb04:	e028      	b.n	800fb58 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d009      	beq.n	800fb20 <udp_sendto_if+0x90>
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d005      	beq.n	800fb20 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fb1c:	2be0      	cmp	r3, #224	@ 0xe0
 800fb1e:	d103      	bne.n	800fb28 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800fb20:	6a3b      	ldr	r3, [r7, #32]
 800fb22:	3304      	adds	r3, #4
 800fb24:	617b      	str	r3, [r7, #20]
 800fb26:	e00b      	b.n	800fb40 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681a      	ldr	r2, [r3, #0]
 800fb2c:	6a3b      	ldr	r3, [r7, #32]
 800fb2e:	3304      	adds	r3, #4
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d002      	beq.n	800fb3c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800fb36:	f06f 0303 	mvn.w	r3, #3
 800fb3a:	e00d      	b.n	800fb58 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800fb40:	887a      	ldrh	r2, [r7, #2]
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	9301      	str	r3, [sp, #4]
 800fb46:	6a3b      	ldr	r3, [r7, #32]
 800fb48:	9300      	str	r3, [sp, #0]
 800fb4a:	4613      	mov	r3, r2
 800fb4c:	687a      	ldr	r2, [r7, #4]
 800fb4e:	68b9      	ldr	r1, [r7, #8]
 800fb50:	68f8      	ldr	r0, [r7, #12]
 800fb52:	f000 f811 	bl	800fb78 <udp_sendto_if_src>
 800fb56:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3718      	adds	r7, #24
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	08015b10 	.word	0x08015b10
 800fb64:	08015c84 	.word	0x08015c84
 800fb68:	08015b64 	.word	0x08015b64
 800fb6c:	08015ca0 	.word	0x08015ca0
 800fb70:	08015cbc 	.word	0x08015cbc
 800fb74:	08015cdc 	.word	0x08015cdc

0800fb78 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b08c      	sub	sp, #48	@ 0x30
 800fb7c:	af04      	add	r7, sp, #16
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	607a      	str	r2, [r7, #4]
 800fb84:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d109      	bne.n	800fba0 <udp_sendto_if_src+0x28>
 800fb8c:	4b65      	ldr	r3, [pc, #404]	@ (800fd24 <udp_sendto_if_src+0x1ac>)
 800fb8e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800fb92:	4965      	ldr	r1, [pc, #404]	@ (800fd28 <udp_sendto_if_src+0x1b0>)
 800fb94:	4865      	ldr	r0, [pc, #404]	@ (800fd2c <udp_sendto_if_src+0x1b4>)
 800fb96:	f002 fe7d 	bl	8012894 <iprintf>
 800fb9a:	f06f 030f 	mvn.w	r3, #15
 800fb9e:	e0bc      	b.n	800fd1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d109      	bne.n	800fbba <udp_sendto_if_src+0x42>
 800fba6:	4b5f      	ldr	r3, [pc, #380]	@ (800fd24 <udp_sendto_if_src+0x1ac>)
 800fba8:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800fbac:	4960      	ldr	r1, [pc, #384]	@ (800fd30 <udp_sendto_if_src+0x1b8>)
 800fbae:	485f      	ldr	r0, [pc, #380]	@ (800fd2c <udp_sendto_if_src+0x1b4>)
 800fbb0:	f002 fe70 	bl	8012894 <iprintf>
 800fbb4:	f06f 030f 	mvn.w	r3, #15
 800fbb8:	e0af      	b.n	800fd1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d109      	bne.n	800fbd4 <udp_sendto_if_src+0x5c>
 800fbc0:	4b58      	ldr	r3, [pc, #352]	@ (800fd24 <udp_sendto_if_src+0x1ac>)
 800fbc2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800fbc6:	495b      	ldr	r1, [pc, #364]	@ (800fd34 <udp_sendto_if_src+0x1bc>)
 800fbc8:	4858      	ldr	r0, [pc, #352]	@ (800fd2c <udp_sendto_if_src+0x1b4>)
 800fbca:	f002 fe63 	bl	8012894 <iprintf>
 800fbce:	f06f 030f 	mvn.w	r3, #15
 800fbd2:	e0a2      	b.n	800fd1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800fbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d109      	bne.n	800fbee <udp_sendto_if_src+0x76>
 800fbda:	4b52      	ldr	r3, [pc, #328]	@ (800fd24 <udp_sendto_if_src+0x1ac>)
 800fbdc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800fbe0:	4955      	ldr	r1, [pc, #340]	@ (800fd38 <udp_sendto_if_src+0x1c0>)
 800fbe2:	4852      	ldr	r0, [pc, #328]	@ (800fd2c <udp_sendto_if_src+0x1b4>)
 800fbe4:	f002 fe56 	bl	8012894 <iprintf>
 800fbe8:	f06f 030f 	mvn.w	r3, #15
 800fbec:	e095      	b.n	800fd1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800fbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d109      	bne.n	800fc08 <udp_sendto_if_src+0x90>
 800fbf4:	4b4b      	ldr	r3, [pc, #300]	@ (800fd24 <udp_sendto_if_src+0x1ac>)
 800fbf6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800fbfa:	4950      	ldr	r1, [pc, #320]	@ (800fd3c <udp_sendto_if_src+0x1c4>)
 800fbfc:	484b      	ldr	r0, [pc, #300]	@ (800fd2c <udp_sendto_if_src+0x1b4>)
 800fbfe:	f002 fe49 	bl	8012894 <iprintf>
 800fc02:	f06f 030f 	mvn.w	r3, #15
 800fc06:	e088      	b.n	800fd1a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	8a5b      	ldrh	r3, [r3, #18]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d10f      	bne.n	800fc30 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800fc10:	68f9      	ldr	r1, [r7, #12]
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	8a5b      	ldrh	r3, [r3, #18]
 800fc16:	461a      	mov	r2, r3
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	f000 f893 	bl	800fd44 <udp_bind>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800fc22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d002      	beq.n	800fc30 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800fc2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fc2e:	e074      	b.n	800fd1a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	891b      	ldrh	r3, [r3, #8]
 800fc34:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d902      	bls.n	800fc42 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800fc3c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc40:	e06b      	b.n	800fd1a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800fc42:	2108      	movs	r1, #8
 800fc44:	68b8      	ldr	r0, [r7, #8]
 800fc46:	f7f9 fe69 	bl	800991c <pbuf_add_header>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d015      	beq.n	800fc7c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800fc50:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fc54:	2108      	movs	r1, #8
 800fc56:	2022      	movs	r0, #34	@ 0x22
 800fc58:	f7f9 fc12 	bl	8009480 <pbuf_alloc>
 800fc5c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800fc5e:	69fb      	ldr	r3, [r7, #28]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d102      	bne.n	800fc6a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800fc64:	f04f 33ff 	mov.w	r3, #4294967295
 800fc68:	e057      	b.n	800fd1a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	891b      	ldrh	r3, [r3, #8]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d006      	beq.n	800fc80 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800fc72:	68b9      	ldr	r1, [r7, #8]
 800fc74:	69f8      	ldr	r0, [r7, #28]
 800fc76:	f7f9 ffff 	bl	8009c78 <pbuf_chain>
 800fc7a:	e001      	b.n	800fc80 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800fc80:	69fb      	ldr	r3, [r7, #28]
 800fc82:	895b      	ldrh	r3, [r3, #10]
 800fc84:	2b07      	cmp	r3, #7
 800fc86:	d806      	bhi.n	800fc96 <udp_sendto_if_src+0x11e>
 800fc88:	4b26      	ldr	r3, [pc, #152]	@ (800fd24 <udp_sendto_if_src+0x1ac>)
 800fc8a:	f240 320d 	movw	r2, #781	@ 0x30d
 800fc8e:	492c      	ldr	r1, [pc, #176]	@ (800fd40 <udp_sendto_if_src+0x1c8>)
 800fc90:	4826      	ldr	r0, [pc, #152]	@ (800fd2c <udp_sendto_if_src+0x1b4>)
 800fc92:	f002 fdff 	bl	8012894 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800fc96:	69fb      	ldr	r3, [r7, #28]
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	8a5b      	ldrh	r3, [r3, #18]
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7f8 fb73 	bl	800838c <lwip_htons>
 800fca6:	4603      	mov	r3, r0
 800fca8:	461a      	mov	r2, r3
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800fcae:	887b      	ldrh	r3, [r7, #2]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7f8 fb6b 	bl	800838c <lwip_htons>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	461a      	mov	r2, r3
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	719a      	strb	r2, [r3, #6]
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800fcc8:	69fb      	ldr	r3, [r7, #28]
 800fcca:	891b      	ldrh	r3, [r3, #8]
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7f8 fb5d 	bl	800838c <lwip_htons>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800fcda:	2311      	movs	r3, #17
 800fcdc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	7adb      	ldrb	r3, [r3, #11]
 800fce2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	7a9b      	ldrb	r3, [r3, #10]
 800fce8:	7cb9      	ldrb	r1, [r7, #18]
 800fcea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fcec:	9202      	str	r2, [sp, #8]
 800fcee:	7cfa      	ldrb	r2, [r7, #19]
 800fcf0:	9201      	str	r2, [sp, #4]
 800fcf2:	9300      	str	r3, [sp, #0]
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	687a      	ldr	r2, [r7, #4]
 800fcf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fcfa:	69f8      	ldr	r0, [r7, #28]
 800fcfc:	f001 fc42 	bl	8011584 <ip4_output_if_src>
 800fd00:	4603      	mov	r3, r0
 800fd02:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800fd04:	69fa      	ldr	r2, [r7, #28]
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d004      	beq.n	800fd16 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800fd0c:	69f8      	ldr	r0, [r7, #28]
 800fd0e:	f7f9 fe9b 	bl	8009a48 <pbuf_free>
    q = NULL;
 800fd12:	2300      	movs	r3, #0
 800fd14:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800fd16:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3720      	adds	r7, #32
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}
 800fd22:	bf00      	nop
 800fd24:	08015b10 	.word	0x08015b10
 800fd28:	08015cfc 	.word	0x08015cfc
 800fd2c:	08015b64 	.word	0x08015b64
 800fd30:	08015d1c 	.word	0x08015d1c
 800fd34:	08015d3c 	.word	0x08015d3c
 800fd38:	08015d60 	.word	0x08015d60
 800fd3c:	08015d84 	.word	0x08015d84
 800fd40:	08015da8 	.word	0x08015da8

0800fd44 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b086      	sub	sp, #24
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	60f8      	str	r0, [r7, #12]
 800fd4c:	60b9      	str	r1, [r7, #8]
 800fd4e:	4613      	mov	r3, r2
 800fd50:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d101      	bne.n	800fd5c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800fd58:	4b39      	ldr	r3, [pc, #228]	@ (800fe40 <udp_bind+0xfc>)
 800fd5a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d109      	bne.n	800fd76 <udp_bind+0x32>
 800fd62:	4b38      	ldr	r3, [pc, #224]	@ (800fe44 <udp_bind+0x100>)
 800fd64:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800fd68:	4937      	ldr	r1, [pc, #220]	@ (800fe48 <udp_bind+0x104>)
 800fd6a:	4838      	ldr	r0, [pc, #224]	@ (800fe4c <udp_bind+0x108>)
 800fd6c:	f002 fd92 	bl	8012894 <iprintf>
 800fd70:	f06f 030f 	mvn.w	r3, #15
 800fd74:	e060      	b.n	800fe38 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800fd76:	2300      	movs	r3, #0
 800fd78:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fd7a:	4b35      	ldr	r3, [pc, #212]	@ (800fe50 <udp_bind+0x10c>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	617b      	str	r3, [r7, #20]
 800fd80:	e009      	b.n	800fd96 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800fd82:	68fa      	ldr	r2, [r7, #12]
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d102      	bne.n	800fd90 <udp_bind+0x4c>
      rebind = 1;
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	74fb      	strb	r3, [r7, #19]
      break;
 800fd8e:	e005      	b.n	800fd9c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	68db      	ldr	r3, [r3, #12]
 800fd94:	617b      	str	r3, [r7, #20]
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d1f2      	bne.n	800fd82 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800fd9c:	88fb      	ldrh	r3, [r7, #6]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d109      	bne.n	800fdb6 <udp_bind+0x72>
    port = udp_new_port();
 800fda2:	f7ff fc35 	bl	800f610 <udp_new_port>
 800fda6:	4603      	mov	r3, r0
 800fda8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800fdaa:	88fb      	ldrh	r3, [r7, #6]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d12c      	bne.n	800fe0a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800fdb0:	f06f 0307 	mvn.w	r3, #7
 800fdb4:	e040      	b.n	800fe38 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fdb6:	4b26      	ldr	r3, [pc, #152]	@ (800fe50 <udp_bind+0x10c>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	617b      	str	r3, [r7, #20]
 800fdbc:	e022      	b.n	800fe04 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800fdbe:	68fa      	ldr	r2, [r7, #12]
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d01b      	beq.n	800fdfe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	8a5b      	ldrh	r3, [r3, #18]
 800fdca:	88fa      	ldrh	r2, [r7, #6]
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	d116      	bne.n	800fdfe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d00d      	beq.n	800fdf8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d00a      	beq.n	800fdf8 <udp_bind+0xb4>
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d006      	beq.n	800fdf8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800fdea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d003      	beq.n	800fdf8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d102      	bne.n	800fdfe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800fdf8:	f06f 0307 	mvn.w	r3, #7
 800fdfc:	e01c      	b.n	800fe38 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	617b      	str	r3, [r7, #20]
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d1d9      	bne.n	800fdbe <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d002      	beq.n	800fe16 <udp_bind+0xd2>
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	e000      	b.n	800fe18 <udp_bind+0xd4>
 800fe16:	2300      	movs	r3, #0
 800fe18:	68fa      	ldr	r2, [r7, #12]
 800fe1a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	88fa      	ldrh	r2, [r7, #6]
 800fe20:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800fe22:	7cfb      	ldrb	r3, [r7, #19]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d106      	bne.n	800fe36 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800fe28:	4b09      	ldr	r3, [pc, #36]	@ (800fe50 <udp_bind+0x10c>)
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800fe30:	4a07      	ldr	r2, [pc, #28]	@ (800fe50 <udp_bind+0x10c>)
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800fe36:	2300      	movs	r3, #0
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3718      	adds	r7, #24
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	0801662c 	.word	0x0801662c
 800fe44:	08015b10 	.word	0x08015b10
 800fe48:	08015dd8 	.word	0x08015dd8
 800fe4c:	08015b64 	.word	0x08015b64
 800fe50:	200089f8 	.word	0x200089f8

0800fe54 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b086      	sub	sp, #24
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	60f8      	str	r0, [r7, #12]
 800fe5c:	60b9      	str	r1, [r7, #8]
 800fe5e:	4613      	mov	r3, r2
 800fe60:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d109      	bne.n	800fe7c <udp_connect+0x28>
 800fe68:	4b2c      	ldr	r3, [pc, #176]	@ (800ff1c <udp_connect+0xc8>)
 800fe6a:	f240 4235 	movw	r2, #1077	@ 0x435
 800fe6e:	492c      	ldr	r1, [pc, #176]	@ (800ff20 <udp_connect+0xcc>)
 800fe70:	482c      	ldr	r0, [pc, #176]	@ (800ff24 <udp_connect+0xd0>)
 800fe72:	f002 fd0f 	bl	8012894 <iprintf>
 800fe76:	f06f 030f 	mvn.w	r3, #15
 800fe7a:	e04b      	b.n	800ff14 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d109      	bne.n	800fe96 <udp_connect+0x42>
 800fe82:	4b26      	ldr	r3, [pc, #152]	@ (800ff1c <udp_connect+0xc8>)
 800fe84:	f240 4236 	movw	r2, #1078	@ 0x436
 800fe88:	4927      	ldr	r1, [pc, #156]	@ (800ff28 <udp_connect+0xd4>)
 800fe8a:	4826      	ldr	r0, [pc, #152]	@ (800ff24 <udp_connect+0xd0>)
 800fe8c:	f002 fd02 	bl	8012894 <iprintf>
 800fe90:	f06f 030f 	mvn.w	r3, #15
 800fe94:	e03e      	b.n	800ff14 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	8a5b      	ldrh	r3, [r3, #18]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d10f      	bne.n	800febe <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800fe9e:	68f9      	ldr	r1, [r7, #12]
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	8a5b      	ldrh	r3, [r3, #18]
 800fea4:	461a      	mov	r2, r3
 800fea6:	68f8      	ldr	r0, [r7, #12]
 800fea8:	f7ff ff4c 	bl	800fd44 <udp_bind>
 800feac:	4603      	mov	r3, r0
 800feae:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800feb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d002      	beq.n	800febe <udp_connect+0x6a>
      return err;
 800feb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800febc:	e02a      	b.n	800ff14 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d002      	beq.n	800feca <udp_connect+0x76>
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	e000      	b.n	800fecc <udp_connect+0x78>
 800feca:	2300      	movs	r3, #0
 800fecc:	68fa      	ldr	r2, [r7, #12]
 800fece:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	88fa      	ldrh	r2, [r7, #6]
 800fed4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	7c1b      	ldrb	r3, [r3, #16]
 800feda:	f043 0304 	orr.w	r3, r3, #4
 800fede:	b2da      	uxtb	r2, r3
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fee4:	4b11      	ldr	r3, [pc, #68]	@ (800ff2c <udp_connect+0xd8>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	617b      	str	r3, [r7, #20]
 800feea:	e008      	b.n	800fefe <udp_connect+0xaa>
    if (pcb == ipcb) {
 800feec:	68fa      	ldr	r2, [r7, #12]
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d101      	bne.n	800fef8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800fef4:	2300      	movs	r3, #0
 800fef6:	e00d      	b.n	800ff14 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	617b      	str	r3, [r7, #20]
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d1f3      	bne.n	800feec <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800ff04:	4b09      	ldr	r3, [pc, #36]	@ (800ff2c <udp_connect+0xd8>)
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800ff0c:	4a07      	ldr	r2, [pc, #28]	@ (800ff2c <udp_connect+0xd8>)
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800ff12:	2300      	movs	r3, #0
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3718      	adds	r7, #24
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}
 800ff1c:	08015b10 	.word	0x08015b10
 800ff20:	08015df0 	.word	0x08015df0
 800ff24:	08015b64 	.word	0x08015b64
 800ff28:	08015e0c 	.word	0x08015e0c
 800ff2c:	200089f8 	.word	0x200089f8

0800ff30 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d107      	bne.n	800ff52 <udp_recv+0x22>
 800ff42:	4b08      	ldr	r3, [pc, #32]	@ (800ff64 <udp_recv+0x34>)
 800ff44:	f240 428a 	movw	r2, #1162	@ 0x48a
 800ff48:	4907      	ldr	r1, [pc, #28]	@ (800ff68 <udp_recv+0x38>)
 800ff4a:	4808      	ldr	r0, [pc, #32]	@ (800ff6c <udp_recv+0x3c>)
 800ff4c:	f002 fca2 	bl	8012894 <iprintf>
 800ff50:	e005      	b.n	800ff5e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	68ba      	ldr	r2, [r7, #8]
 800ff56:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	61da      	str	r2, [r3, #28]
}
 800ff5e:	3710      	adds	r7, #16
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}
 800ff64:	08015b10 	.word	0x08015b10
 800ff68:	08015e44 	.word	0x08015e44
 800ff6c:	08015b64 	.word	0x08015b64

0800ff70 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ff76:	2000      	movs	r0, #0
 800ff78:	f7f8 fe80 	bl	8008c7c <memp_malloc>
 800ff7c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d007      	beq.n	800ff94 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800ff84:	2220      	movs	r2, #32
 800ff86:	2100      	movs	r1, #0
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f002 fd24 	bl	80129d6 <memset>
    pcb->ttl = UDP_TTL;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	22ff      	movs	r2, #255	@ 0xff
 800ff92:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800ff94:	687b      	ldr	r3, [r7, #4]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3708      	adds	r7, #8
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
	...

0800ffa0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b085      	sub	sp, #20
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d01e      	beq.n	800ffee <udp_netif_ip_addr_changed+0x4e>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d01a      	beq.n	800ffee <udp_netif_ip_addr_changed+0x4e>
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d017      	beq.n	800ffee <udp_netif_ip_addr_changed+0x4e>
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d013      	beq.n	800ffee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ffc6:	4b0d      	ldr	r3, [pc, #52]	@ (800fffc <udp_netif_ip_addr_changed+0x5c>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	60fb      	str	r3, [r7, #12]
 800ffcc:	e00c      	b.n	800ffe8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	681a      	ldr	r2, [r3, #0]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d103      	bne.n	800ffe2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	681a      	ldr	r2, [r3, #0]
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	60fb      	str	r3, [r7, #12]
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d1ef      	bne.n	800ffce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ffee:	bf00      	nop
 800fff0:	3714      	adds	r7, #20
 800fff2:	46bd      	mov	sp, r7
 800fff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop
 800fffc:	200089f8 	.word	0x200089f8

08010000 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010008:	4915      	ldr	r1, [pc, #84]	@ (8010060 <etharp_free_entry+0x60>)
 801000a:	687a      	ldr	r2, [r7, #4]
 801000c:	4613      	mov	r3, r2
 801000e:	005b      	lsls	r3, r3, #1
 8010010:	4413      	add	r3, r2
 8010012:	00db      	lsls	r3, r3, #3
 8010014:	440b      	add	r3, r1
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d013      	beq.n	8010044 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801001c:	4910      	ldr	r1, [pc, #64]	@ (8010060 <etharp_free_entry+0x60>)
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	4613      	mov	r3, r2
 8010022:	005b      	lsls	r3, r3, #1
 8010024:	4413      	add	r3, r2
 8010026:	00db      	lsls	r3, r3, #3
 8010028:	440b      	add	r3, r1
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4618      	mov	r0, r3
 801002e:	f7f9 fd0b 	bl	8009a48 <pbuf_free>
    arp_table[i].q = NULL;
 8010032:	490b      	ldr	r1, [pc, #44]	@ (8010060 <etharp_free_entry+0x60>)
 8010034:	687a      	ldr	r2, [r7, #4]
 8010036:	4613      	mov	r3, r2
 8010038:	005b      	lsls	r3, r3, #1
 801003a:	4413      	add	r3, r2
 801003c:	00db      	lsls	r3, r3, #3
 801003e:	440b      	add	r3, r1
 8010040:	2200      	movs	r2, #0
 8010042:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010044:	4906      	ldr	r1, [pc, #24]	@ (8010060 <etharp_free_entry+0x60>)
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	4613      	mov	r3, r2
 801004a:	005b      	lsls	r3, r3, #1
 801004c:	4413      	add	r3, r2
 801004e:	00db      	lsls	r3, r3, #3
 8010050:	440b      	add	r3, r1
 8010052:	3314      	adds	r3, #20
 8010054:	2200      	movs	r2, #0
 8010056:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010058:	bf00      	nop
 801005a:	3708      	adds	r7, #8
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}
 8010060:	200089fc 	.word	0x200089fc

08010064 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801006a:	2300      	movs	r3, #0
 801006c:	607b      	str	r3, [r7, #4]
 801006e:	e096      	b.n	801019e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010070:	494f      	ldr	r1, [pc, #316]	@ (80101b0 <etharp_tmr+0x14c>)
 8010072:	687a      	ldr	r2, [r7, #4]
 8010074:	4613      	mov	r3, r2
 8010076:	005b      	lsls	r3, r3, #1
 8010078:	4413      	add	r3, r2
 801007a:	00db      	lsls	r3, r3, #3
 801007c:	440b      	add	r3, r1
 801007e:	3314      	adds	r3, #20
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010084:	78fb      	ldrb	r3, [r7, #3]
 8010086:	2b00      	cmp	r3, #0
 8010088:	f000 8086 	beq.w	8010198 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801008c:	4948      	ldr	r1, [pc, #288]	@ (80101b0 <etharp_tmr+0x14c>)
 801008e:	687a      	ldr	r2, [r7, #4]
 8010090:	4613      	mov	r3, r2
 8010092:	005b      	lsls	r3, r3, #1
 8010094:	4413      	add	r3, r2
 8010096:	00db      	lsls	r3, r3, #3
 8010098:	440b      	add	r3, r1
 801009a:	3312      	adds	r3, #18
 801009c:	881b      	ldrh	r3, [r3, #0]
 801009e:	3301      	adds	r3, #1
 80100a0:	b298      	uxth	r0, r3
 80100a2:	4943      	ldr	r1, [pc, #268]	@ (80101b0 <etharp_tmr+0x14c>)
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	4613      	mov	r3, r2
 80100a8:	005b      	lsls	r3, r3, #1
 80100aa:	4413      	add	r3, r2
 80100ac:	00db      	lsls	r3, r3, #3
 80100ae:	440b      	add	r3, r1
 80100b0:	3312      	adds	r3, #18
 80100b2:	4602      	mov	r2, r0
 80100b4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80100b6:	493e      	ldr	r1, [pc, #248]	@ (80101b0 <etharp_tmr+0x14c>)
 80100b8:	687a      	ldr	r2, [r7, #4]
 80100ba:	4613      	mov	r3, r2
 80100bc:	005b      	lsls	r3, r3, #1
 80100be:	4413      	add	r3, r2
 80100c0:	00db      	lsls	r3, r3, #3
 80100c2:	440b      	add	r3, r1
 80100c4:	3312      	adds	r3, #18
 80100c6:	881b      	ldrh	r3, [r3, #0]
 80100c8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80100cc:	d215      	bcs.n	80100fa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80100ce:	4938      	ldr	r1, [pc, #224]	@ (80101b0 <etharp_tmr+0x14c>)
 80100d0:	687a      	ldr	r2, [r7, #4]
 80100d2:	4613      	mov	r3, r2
 80100d4:	005b      	lsls	r3, r3, #1
 80100d6:	4413      	add	r3, r2
 80100d8:	00db      	lsls	r3, r3, #3
 80100da:	440b      	add	r3, r1
 80100dc:	3314      	adds	r3, #20
 80100de:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80100e0:	2b01      	cmp	r3, #1
 80100e2:	d10e      	bne.n	8010102 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80100e4:	4932      	ldr	r1, [pc, #200]	@ (80101b0 <etharp_tmr+0x14c>)
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	4613      	mov	r3, r2
 80100ea:	005b      	lsls	r3, r3, #1
 80100ec:	4413      	add	r3, r2
 80100ee:	00db      	lsls	r3, r3, #3
 80100f0:	440b      	add	r3, r1
 80100f2:	3312      	adds	r3, #18
 80100f4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80100f6:	2b04      	cmp	r3, #4
 80100f8:	d903      	bls.n	8010102 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f7ff ff80 	bl	8010000 <etharp_free_entry>
 8010100:	e04a      	b.n	8010198 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010102:	492b      	ldr	r1, [pc, #172]	@ (80101b0 <etharp_tmr+0x14c>)
 8010104:	687a      	ldr	r2, [r7, #4]
 8010106:	4613      	mov	r3, r2
 8010108:	005b      	lsls	r3, r3, #1
 801010a:	4413      	add	r3, r2
 801010c:	00db      	lsls	r3, r3, #3
 801010e:	440b      	add	r3, r1
 8010110:	3314      	adds	r3, #20
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	2b03      	cmp	r3, #3
 8010116:	d10a      	bne.n	801012e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010118:	4925      	ldr	r1, [pc, #148]	@ (80101b0 <etharp_tmr+0x14c>)
 801011a:	687a      	ldr	r2, [r7, #4]
 801011c:	4613      	mov	r3, r2
 801011e:	005b      	lsls	r3, r3, #1
 8010120:	4413      	add	r3, r2
 8010122:	00db      	lsls	r3, r3, #3
 8010124:	440b      	add	r3, r1
 8010126:	3314      	adds	r3, #20
 8010128:	2204      	movs	r2, #4
 801012a:	701a      	strb	r2, [r3, #0]
 801012c:	e034      	b.n	8010198 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801012e:	4920      	ldr	r1, [pc, #128]	@ (80101b0 <etharp_tmr+0x14c>)
 8010130:	687a      	ldr	r2, [r7, #4]
 8010132:	4613      	mov	r3, r2
 8010134:	005b      	lsls	r3, r3, #1
 8010136:	4413      	add	r3, r2
 8010138:	00db      	lsls	r3, r3, #3
 801013a:	440b      	add	r3, r1
 801013c:	3314      	adds	r3, #20
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	2b04      	cmp	r3, #4
 8010142:	d10a      	bne.n	801015a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010144:	491a      	ldr	r1, [pc, #104]	@ (80101b0 <etharp_tmr+0x14c>)
 8010146:	687a      	ldr	r2, [r7, #4]
 8010148:	4613      	mov	r3, r2
 801014a:	005b      	lsls	r3, r3, #1
 801014c:	4413      	add	r3, r2
 801014e:	00db      	lsls	r3, r3, #3
 8010150:	440b      	add	r3, r1
 8010152:	3314      	adds	r3, #20
 8010154:	2202      	movs	r2, #2
 8010156:	701a      	strb	r2, [r3, #0]
 8010158:	e01e      	b.n	8010198 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801015a:	4915      	ldr	r1, [pc, #84]	@ (80101b0 <etharp_tmr+0x14c>)
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	4613      	mov	r3, r2
 8010160:	005b      	lsls	r3, r3, #1
 8010162:	4413      	add	r3, r2
 8010164:	00db      	lsls	r3, r3, #3
 8010166:	440b      	add	r3, r1
 8010168:	3314      	adds	r3, #20
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	2b01      	cmp	r3, #1
 801016e:	d113      	bne.n	8010198 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010170:	490f      	ldr	r1, [pc, #60]	@ (80101b0 <etharp_tmr+0x14c>)
 8010172:	687a      	ldr	r2, [r7, #4]
 8010174:	4613      	mov	r3, r2
 8010176:	005b      	lsls	r3, r3, #1
 8010178:	4413      	add	r3, r2
 801017a:	00db      	lsls	r3, r3, #3
 801017c:	440b      	add	r3, r1
 801017e:	3308      	adds	r3, #8
 8010180:	6818      	ldr	r0, [r3, #0]
 8010182:	687a      	ldr	r2, [r7, #4]
 8010184:	4613      	mov	r3, r2
 8010186:	005b      	lsls	r3, r3, #1
 8010188:	4413      	add	r3, r2
 801018a:	00db      	lsls	r3, r3, #3
 801018c:	4a08      	ldr	r2, [pc, #32]	@ (80101b0 <etharp_tmr+0x14c>)
 801018e:	4413      	add	r3, r2
 8010190:	3304      	adds	r3, #4
 8010192:	4619      	mov	r1, r3
 8010194:	f000 fe6e 	bl	8010e74 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	3301      	adds	r3, #1
 801019c:	607b      	str	r3, [r7, #4]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2b09      	cmp	r3, #9
 80101a2:	f77f af65 	ble.w	8010070 <etharp_tmr+0xc>
      }
    }
  }
}
 80101a6:	bf00      	nop
 80101a8:	bf00      	nop
 80101aa:	3708      	adds	r7, #8
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}
 80101b0:	200089fc 	.word	0x200089fc

080101b4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b08a      	sub	sp, #40	@ 0x28
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	60f8      	str	r0, [r7, #12]
 80101bc:	460b      	mov	r3, r1
 80101be:	607a      	str	r2, [r7, #4]
 80101c0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80101c2:	230a      	movs	r3, #10
 80101c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80101c6:	230a      	movs	r3, #10
 80101c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80101ca:	230a      	movs	r3, #10
 80101cc:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80101ce:	2300      	movs	r3, #0
 80101d0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80101d2:	230a      	movs	r3, #10
 80101d4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80101d6:	2300      	movs	r3, #0
 80101d8:	83bb      	strh	r3, [r7, #28]
 80101da:	2300      	movs	r3, #0
 80101dc:	837b      	strh	r3, [r7, #26]
 80101de:	2300      	movs	r3, #0
 80101e0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80101e2:	2300      	movs	r3, #0
 80101e4:	843b      	strh	r3, [r7, #32]
 80101e6:	e0ae      	b.n	8010346 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80101e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101ec:	49a6      	ldr	r1, [pc, #664]	@ (8010488 <etharp_find_entry+0x2d4>)
 80101ee:	4613      	mov	r3, r2
 80101f0:	005b      	lsls	r3, r3, #1
 80101f2:	4413      	add	r3, r2
 80101f4:	00db      	lsls	r3, r3, #3
 80101f6:	440b      	add	r3, r1
 80101f8:	3314      	adds	r3, #20
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80101fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010202:	2b0a      	cmp	r3, #10
 8010204:	d105      	bne.n	8010212 <etharp_find_entry+0x5e>
 8010206:	7dfb      	ldrb	r3, [r7, #23]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d102      	bne.n	8010212 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801020c:	8c3b      	ldrh	r3, [r7, #32]
 801020e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010210:	e095      	b.n	801033e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010212:	7dfb      	ldrb	r3, [r7, #23]
 8010214:	2b00      	cmp	r3, #0
 8010216:	f000 8092 	beq.w	801033e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801021a:	7dfb      	ldrb	r3, [r7, #23]
 801021c:	2b01      	cmp	r3, #1
 801021e:	d009      	beq.n	8010234 <etharp_find_entry+0x80>
 8010220:	7dfb      	ldrb	r3, [r7, #23]
 8010222:	2b01      	cmp	r3, #1
 8010224:	d806      	bhi.n	8010234 <etharp_find_entry+0x80>
 8010226:	4b99      	ldr	r3, [pc, #612]	@ (801048c <etharp_find_entry+0x2d8>)
 8010228:	f240 1223 	movw	r2, #291	@ 0x123
 801022c:	4998      	ldr	r1, [pc, #608]	@ (8010490 <etharp_find_entry+0x2dc>)
 801022e:	4899      	ldr	r0, [pc, #612]	@ (8010494 <etharp_find_entry+0x2e0>)
 8010230:	f002 fb30 	bl	8012894 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d020      	beq.n	801027c <etharp_find_entry+0xc8>
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	6819      	ldr	r1, [r3, #0]
 801023e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010242:	4891      	ldr	r0, [pc, #580]	@ (8010488 <etharp_find_entry+0x2d4>)
 8010244:	4613      	mov	r3, r2
 8010246:	005b      	lsls	r3, r3, #1
 8010248:	4413      	add	r3, r2
 801024a:	00db      	lsls	r3, r3, #3
 801024c:	4403      	add	r3, r0
 801024e:	3304      	adds	r3, #4
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	4299      	cmp	r1, r3
 8010254:	d112      	bne.n	801027c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d00c      	beq.n	8010276 <etharp_find_entry+0xc2>
 801025c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010260:	4989      	ldr	r1, [pc, #548]	@ (8010488 <etharp_find_entry+0x2d4>)
 8010262:	4613      	mov	r3, r2
 8010264:	005b      	lsls	r3, r3, #1
 8010266:	4413      	add	r3, r2
 8010268:	00db      	lsls	r3, r3, #3
 801026a:	440b      	add	r3, r1
 801026c:	3308      	adds	r3, #8
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	687a      	ldr	r2, [r7, #4]
 8010272:	429a      	cmp	r2, r3
 8010274:	d102      	bne.n	801027c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010276:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801027a:	e100      	b.n	801047e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801027c:	7dfb      	ldrb	r3, [r7, #23]
 801027e:	2b01      	cmp	r3, #1
 8010280:	d140      	bne.n	8010304 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010282:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010286:	4980      	ldr	r1, [pc, #512]	@ (8010488 <etharp_find_entry+0x2d4>)
 8010288:	4613      	mov	r3, r2
 801028a:	005b      	lsls	r3, r3, #1
 801028c:	4413      	add	r3, r2
 801028e:	00db      	lsls	r3, r3, #3
 8010290:	440b      	add	r3, r1
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d01a      	beq.n	80102ce <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010298:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801029c:	497a      	ldr	r1, [pc, #488]	@ (8010488 <etharp_find_entry+0x2d4>)
 801029e:	4613      	mov	r3, r2
 80102a0:	005b      	lsls	r3, r3, #1
 80102a2:	4413      	add	r3, r2
 80102a4:	00db      	lsls	r3, r3, #3
 80102a6:	440b      	add	r3, r1
 80102a8:	3312      	adds	r3, #18
 80102aa:	881b      	ldrh	r3, [r3, #0]
 80102ac:	8bba      	ldrh	r2, [r7, #28]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d845      	bhi.n	801033e <etharp_find_entry+0x18a>
            old_queue = i;
 80102b2:	8c3b      	ldrh	r3, [r7, #32]
 80102b4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80102b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102ba:	4973      	ldr	r1, [pc, #460]	@ (8010488 <etharp_find_entry+0x2d4>)
 80102bc:	4613      	mov	r3, r2
 80102be:	005b      	lsls	r3, r3, #1
 80102c0:	4413      	add	r3, r2
 80102c2:	00db      	lsls	r3, r3, #3
 80102c4:	440b      	add	r3, r1
 80102c6:	3312      	adds	r3, #18
 80102c8:	881b      	ldrh	r3, [r3, #0]
 80102ca:	83bb      	strh	r3, [r7, #28]
 80102cc:	e037      	b.n	801033e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80102ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102d2:	496d      	ldr	r1, [pc, #436]	@ (8010488 <etharp_find_entry+0x2d4>)
 80102d4:	4613      	mov	r3, r2
 80102d6:	005b      	lsls	r3, r3, #1
 80102d8:	4413      	add	r3, r2
 80102da:	00db      	lsls	r3, r3, #3
 80102dc:	440b      	add	r3, r1
 80102de:	3312      	adds	r3, #18
 80102e0:	881b      	ldrh	r3, [r3, #0]
 80102e2:	8b7a      	ldrh	r2, [r7, #26]
 80102e4:	429a      	cmp	r2, r3
 80102e6:	d82a      	bhi.n	801033e <etharp_find_entry+0x18a>
            old_pending = i;
 80102e8:	8c3b      	ldrh	r3, [r7, #32]
 80102ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80102ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102f0:	4965      	ldr	r1, [pc, #404]	@ (8010488 <etharp_find_entry+0x2d4>)
 80102f2:	4613      	mov	r3, r2
 80102f4:	005b      	lsls	r3, r3, #1
 80102f6:	4413      	add	r3, r2
 80102f8:	00db      	lsls	r3, r3, #3
 80102fa:	440b      	add	r3, r1
 80102fc:	3312      	adds	r3, #18
 80102fe:	881b      	ldrh	r3, [r3, #0]
 8010300:	837b      	strh	r3, [r7, #26]
 8010302:	e01c      	b.n	801033e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010304:	7dfb      	ldrb	r3, [r7, #23]
 8010306:	2b01      	cmp	r3, #1
 8010308:	d919      	bls.n	801033e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801030a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801030e:	495e      	ldr	r1, [pc, #376]	@ (8010488 <etharp_find_entry+0x2d4>)
 8010310:	4613      	mov	r3, r2
 8010312:	005b      	lsls	r3, r3, #1
 8010314:	4413      	add	r3, r2
 8010316:	00db      	lsls	r3, r3, #3
 8010318:	440b      	add	r3, r1
 801031a:	3312      	adds	r3, #18
 801031c:	881b      	ldrh	r3, [r3, #0]
 801031e:	8b3a      	ldrh	r2, [r7, #24]
 8010320:	429a      	cmp	r2, r3
 8010322:	d80c      	bhi.n	801033e <etharp_find_entry+0x18a>
            old_stable = i;
 8010324:	8c3b      	ldrh	r3, [r7, #32]
 8010326:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8010328:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801032c:	4956      	ldr	r1, [pc, #344]	@ (8010488 <etharp_find_entry+0x2d4>)
 801032e:	4613      	mov	r3, r2
 8010330:	005b      	lsls	r3, r3, #1
 8010332:	4413      	add	r3, r2
 8010334:	00db      	lsls	r3, r3, #3
 8010336:	440b      	add	r3, r1
 8010338:	3312      	adds	r3, #18
 801033a:	881b      	ldrh	r3, [r3, #0]
 801033c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801033e:	8c3b      	ldrh	r3, [r7, #32]
 8010340:	3301      	adds	r3, #1
 8010342:	b29b      	uxth	r3, r3
 8010344:	843b      	strh	r3, [r7, #32]
 8010346:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801034a:	2b09      	cmp	r3, #9
 801034c:	f77f af4c 	ble.w	80101e8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010350:	7afb      	ldrb	r3, [r7, #11]
 8010352:	f003 0302 	and.w	r3, r3, #2
 8010356:	2b00      	cmp	r3, #0
 8010358:	d108      	bne.n	801036c <etharp_find_entry+0x1b8>
 801035a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801035e:	2b0a      	cmp	r3, #10
 8010360:	d107      	bne.n	8010372 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010362:	7afb      	ldrb	r3, [r7, #11]
 8010364:	f003 0301 	and.w	r3, r3, #1
 8010368:	2b00      	cmp	r3, #0
 801036a:	d102      	bne.n	8010372 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801036c:	f04f 33ff 	mov.w	r3, #4294967295
 8010370:	e085      	b.n	801047e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010372:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010376:	2b09      	cmp	r3, #9
 8010378:	dc02      	bgt.n	8010380 <etharp_find_entry+0x1cc>
    i = empty;
 801037a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801037c:	843b      	strh	r3, [r7, #32]
 801037e:	e039      	b.n	80103f4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010380:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8010384:	2b09      	cmp	r3, #9
 8010386:	dc14      	bgt.n	80103b2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010388:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801038a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801038c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010390:	493d      	ldr	r1, [pc, #244]	@ (8010488 <etharp_find_entry+0x2d4>)
 8010392:	4613      	mov	r3, r2
 8010394:	005b      	lsls	r3, r3, #1
 8010396:	4413      	add	r3, r2
 8010398:	00db      	lsls	r3, r3, #3
 801039a:	440b      	add	r3, r1
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d018      	beq.n	80103d4 <etharp_find_entry+0x220>
 80103a2:	4b3a      	ldr	r3, [pc, #232]	@ (801048c <etharp_find_entry+0x2d8>)
 80103a4:	f240 126d 	movw	r2, #365	@ 0x16d
 80103a8:	493b      	ldr	r1, [pc, #236]	@ (8010498 <etharp_find_entry+0x2e4>)
 80103aa:	483a      	ldr	r0, [pc, #232]	@ (8010494 <etharp_find_entry+0x2e0>)
 80103ac:	f002 fa72 	bl	8012894 <iprintf>
 80103b0:	e010      	b.n	80103d4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80103b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80103b6:	2b09      	cmp	r3, #9
 80103b8:	dc02      	bgt.n	80103c0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80103ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80103bc:	843b      	strh	r3, [r7, #32]
 80103be:	e009      	b.n	80103d4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80103c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80103c4:	2b09      	cmp	r3, #9
 80103c6:	dc02      	bgt.n	80103ce <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80103c8:	8bfb      	ldrh	r3, [r7, #30]
 80103ca:	843b      	strh	r3, [r7, #32]
 80103cc:	e002      	b.n	80103d4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80103ce:	f04f 33ff 	mov.w	r3, #4294967295
 80103d2:	e054      	b.n	801047e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80103d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80103d8:	2b09      	cmp	r3, #9
 80103da:	dd06      	ble.n	80103ea <etharp_find_entry+0x236>
 80103dc:	4b2b      	ldr	r3, [pc, #172]	@ (801048c <etharp_find_entry+0x2d8>)
 80103de:	f240 127f 	movw	r2, #383	@ 0x17f
 80103e2:	492e      	ldr	r1, [pc, #184]	@ (801049c <etharp_find_entry+0x2e8>)
 80103e4:	482b      	ldr	r0, [pc, #172]	@ (8010494 <etharp_find_entry+0x2e0>)
 80103e6:	f002 fa55 	bl	8012894 <iprintf>
    etharp_free_entry(i);
 80103ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7ff fe06 	bl	8010000 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80103f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80103f8:	2b09      	cmp	r3, #9
 80103fa:	dd06      	ble.n	801040a <etharp_find_entry+0x256>
 80103fc:	4b23      	ldr	r3, [pc, #140]	@ (801048c <etharp_find_entry+0x2d8>)
 80103fe:	f240 1283 	movw	r2, #387	@ 0x183
 8010402:	4926      	ldr	r1, [pc, #152]	@ (801049c <etharp_find_entry+0x2e8>)
 8010404:	4823      	ldr	r0, [pc, #140]	@ (8010494 <etharp_find_entry+0x2e0>)
 8010406:	f002 fa45 	bl	8012894 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801040a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801040e:	491e      	ldr	r1, [pc, #120]	@ (8010488 <etharp_find_entry+0x2d4>)
 8010410:	4613      	mov	r3, r2
 8010412:	005b      	lsls	r3, r3, #1
 8010414:	4413      	add	r3, r2
 8010416:	00db      	lsls	r3, r3, #3
 8010418:	440b      	add	r3, r1
 801041a:	3314      	adds	r3, #20
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d006      	beq.n	8010430 <etharp_find_entry+0x27c>
 8010422:	4b1a      	ldr	r3, [pc, #104]	@ (801048c <etharp_find_entry+0x2d8>)
 8010424:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8010428:	491d      	ldr	r1, [pc, #116]	@ (80104a0 <etharp_find_entry+0x2ec>)
 801042a:	481a      	ldr	r0, [pc, #104]	@ (8010494 <etharp_find_entry+0x2e0>)
 801042c:	f002 fa32 	bl	8012894 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d00b      	beq.n	801044e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010436:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	6819      	ldr	r1, [r3, #0]
 801043e:	4812      	ldr	r0, [pc, #72]	@ (8010488 <etharp_find_entry+0x2d4>)
 8010440:	4613      	mov	r3, r2
 8010442:	005b      	lsls	r3, r3, #1
 8010444:	4413      	add	r3, r2
 8010446:	00db      	lsls	r3, r3, #3
 8010448:	4403      	add	r3, r0
 801044a:	3304      	adds	r3, #4
 801044c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801044e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010452:	490d      	ldr	r1, [pc, #52]	@ (8010488 <etharp_find_entry+0x2d4>)
 8010454:	4613      	mov	r3, r2
 8010456:	005b      	lsls	r3, r3, #1
 8010458:	4413      	add	r3, r2
 801045a:	00db      	lsls	r3, r3, #3
 801045c:	440b      	add	r3, r1
 801045e:	3312      	adds	r3, #18
 8010460:	2200      	movs	r2, #0
 8010462:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010464:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010468:	4907      	ldr	r1, [pc, #28]	@ (8010488 <etharp_find_entry+0x2d4>)
 801046a:	4613      	mov	r3, r2
 801046c:	005b      	lsls	r3, r3, #1
 801046e:	4413      	add	r3, r2
 8010470:	00db      	lsls	r3, r3, #3
 8010472:	440b      	add	r3, r1
 8010474:	3308      	adds	r3, #8
 8010476:	687a      	ldr	r2, [r7, #4]
 8010478:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801047a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801047e:	4618      	mov	r0, r3
 8010480:	3728      	adds	r7, #40	@ 0x28
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	200089fc 	.word	0x200089fc
 801048c:	08015e74 	.word	0x08015e74
 8010490:	08015eac 	.word	0x08015eac
 8010494:	08015eec 	.word	0x08015eec
 8010498:	08015f14 	.word	0x08015f14
 801049c:	08015f2c 	.word	0x08015f2c
 80104a0:	08015f40 	.word	0x08015f40

080104a4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b088      	sub	sp, #32
 80104a8:	af02      	add	r7, sp, #8
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
 80104b0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80104b8:	2b06      	cmp	r3, #6
 80104ba:	d006      	beq.n	80104ca <etharp_update_arp_entry+0x26>
 80104bc:	4b48      	ldr	r3, [pc, #288]	@ (80105e0 <etharp_update_arp_entry+0x13c>)
 80104be:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80104c2:	4948      	ldr	r1, [pc, #288]	@ (80105e4 <etharp_update_arp_entry+0x140>)
 80104c4:	4848      	ldr	r0, [pc, #288]	@ (80105e8 <etharp_update_arp_entry+0x144>)
 80104c6:	f002 f9e5 	bl	8012894 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d012      	beq.n	80104f6 <etharp_update_arp_entry+0x52>
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d00e      	beq.n	80104f6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	68f9      	ldr	r1, [r7, #12]
 80104de:	4618      	mov	r0, r3
 80104e0:	f001 f8fe 	bl	80116e0 <ip4_addr_isbroadcast_u32>
 80104e4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d105      	bne.n	80104f6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80104f2:	2be0      	cmp	r3, #224	@ 0xe0
 80104f4:	d102      	bne.n	80104fc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80104f6:	f06f 030f 	mvn.w	r3, #15
 80104fa:	e06c      	b.n	80105d6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80104fc:	78fb      	ldrb	r3, [r7, #3]
 80104fe:	68fa      	ldr	r2, [r7, #12]
 8010500:	4619      	mov	r1, r3
 8010502:	68b8      	ldr	r0, [r7, #8]
 8010504:	f7ff fe56 	bl	80101b4 <etharp_find_entry>
 8010508:	4603      	mov	r3, r0
 801050a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801050c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010510:	2b00      	cmp	r3, #0
 8010512:	da02      	bge.n	801051a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010514:	8afb      	ldrh	r3, [r7, #22]
 8010516:	b25b      	sxtb	r3, r3
 8010518:	e05d      	b.n	80105d6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801051a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801051e:	4933      	ldr	r1, [pc, #204]	@ (80105ec <etharp_update_arp_entry+0x148>)
 8010520:	4613      	mov	r3, r2
 8010522:	005b      	lsls	r3, r3, #1
 8010524:	4413      	add	r3, r2
 8010526:	00db      	lsls	r3, r3, #3
 8010528:	440b      	add	r3, r1
 801052a:	3314      	adds	r3, #20
 801052c:	2202      	movs	r2, #2
 801052e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010530:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010534:	492d      	ldr	r1, [pc, #180]	@ (80105ec <etharp_update_arp_entry+0x148>)
 8010536:	4613      	mov	r3, r2
 8010538:	005b      	lsls	r3, r3, #1
 801053a:	4413      	add	r3, r2
 801053c:	00db      	lsls	r3, r3, #3
 801053e:	440b      	add	r3, r1
 8010540:	3308      	adds	r3, #8
 8010542:	68fa      	ldr	r2, [r7, #12]
 8010544:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010546:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801054a:	4613      	mov	r3, r2
 801054c:	005b      	lsls	r3, r3, #1
 801054e:	4413      	add	r3, r2
 8010550:	00db      	lsls	r3, r3, #3
 8010552:	3308      	adds	r3, #8
 8010554:	4a25      	ldr	r2, [pc, #148]	@ (80105ec <etharp_update_arp_entry+0x148>)
 8010556:	4413      	add	r3, r2
 8010558:	3304      	adds	r3, #4
 801055a:	2206      	movs	r2, #6
 801055c:	6879      	ldr	r1, [r7, #4]
 801055e:	4618      	mov	r0, r3
 8010560:	f002 fac7 	bl	8012af2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010564:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010568:	4920      	ldr	r1, [pc, #128]	@ (80105ec <etharp_update_arp_entry+0x148>)
 801056a:	4613      	mov	r3, r2
 801056c:	005b      	lsls	r3, r3, #1
 801056e:	4413      	add	r3, r2
 8010570:	00db      	lsls	r3, r3, #3
 8010572:	440b      	add	r3, r1
 8010574:	3312      	adds	r3, #18
 8010576:	2200      	movs	r2, #0
 8010578:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801057a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801057e:	491b      	ldr	r1, [pc, #108]	@ (80105ec <etharp_update_arp_entry+0x148>)
 8010580:	4613      	mov	r3, r2
 8010582:	005b      	lsls	r3, r3, #1
 8010584:	4413      	add	r3, r2
 8010586:	00db      	lsls	r3, r3, #3
 8010588:	440b      	add	r3, r1
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d021      	beq.n	80105d4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010590:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010594:	4915      	ldr	r1, [pc, #84]	@ (80105ec <etharp_update_arp_entry+0x148>)
 8010596:	4613      	mov	r3, r2
 8010598:	005b      	lsls	r3, r3, #1
 801059a:	4413      	add	r3, r2
 801059c:	00db      	lsls	r3, r3, #3
 801059e:	440b      	add	r3, r1
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80105a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105a8:	4910      	ldr	r1, [pc, #64]	@ (80105ec <etharp_update_arp_entry+0x148>)
 80105aa:	4613      	mov	r3, r2
 80105ac:	005b      	lsls	r3, r3, #1
 80105ae:	4413      	add	r3, r2
 80105b0:	00db      	lsls	r3, r3, #3
 80105b2:	440b      	add	r3, r1
 80105b4:	2200      	movs	r2, #0
 80105b6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80105be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80105c2:	9300      	str	r3, [sp, #0]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6939      	ldr	r1, [r7, #16]
 80105c8:	68f8      	ldr	r0, [r7, #12]
 80105ca:	f001 ff97 	bl	80124fc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80105ce:	6938      	ldr	r0, [r7, #16]
 80105d0:	f7f9 fa3a 	bl	8009a48 <pbuf_free>
  }
  return ERR_OK;
 80105d4:	2300      	movs	r3, #0
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3718      	adds	r7, #24
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}
 80105de:	bf00      	nop
 80105e0:	08015e74 	.word	0x08015e74
 80105e4:	08015f6c 	.word	0x08015f6c
 80105e8:	08015eec 	.word	0x08015eec
 80105ec:	200089fc 	.word	0x200089fc

080105f0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b084      	sub	sp, #16
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80105f8:	2300      	movs	r3, #0
 80105fa:	60fb      	str	r3, [r7, #12]
 80105fc:	e01e      	b.n	801063c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80105fe:	4913      	ldr	r1, [pc, #76]	@ (801064c <etharp_cleanup_netif+0x5c>)
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	4613      	mov	r3, r2
 8010604:	005b      	lsls	r3, r3, #1
 8010606:	4413      	add	r3, r2
 8010608:	00db      	lsls	r3, r3, #3
 801060a:	440b      	add	r3, r1
 801060c:	3314      	adds	r3, #20
 801060e:	781b      	ldrb	r3, [r3, #0]
 8010610:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010612:	7afb      	ldrb	r3, [r7, #11]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d00e      	beq.n	8010636 <etharp_cleanup_netif+0x46>
 8010618:	490c      	ldr	r1, [pc, #48]	@ (801064c <etharp_cleanup_netif+0x5c>)
 801061a:	68fa      	ldr	r2, [r7, #12]
 801061c:	4613      	mov	r3, r2
 801061e:	005b      	lsls	r3, r3, #1
 8010620:	4413      	add	r3, r2
 8010622:	00db      	lsls	r3, r3, #3
 8010624:	440b      	add	r3, r1
 8010626:	3308      	adds	r3, #8
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	687a      	ldr	r2, [r7, #4]
 801062c:	429a      	cmp	r2, r3
 801062e:	d102      	bne.n	8010636 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010630:	68f8      	ldr	r0, [r7, #12]
 8010632:	f7ff fce5 	bl	8010000 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	3301      	adds	r3, #1
 801063a:	60fb      	str	r3, [r7, #12]
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	2b09      	cmp	r3, #9
 8010640:	dddd      	ble.n	80105fe <etharp_cleanup_netif+0xe>
    }
  }
}
 8010642:	bf00      	nop
 8010644:	bf00      	nop
 8010646:	3710      	adds	r7, #16
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}
 801064c:	200089fc 	.word	0x200089fc

08010650 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010650:	b5b0      	push	{r4, r5, r7, lr}
 8010652:	b08a      	sub	sp, #40	@ 0x28
 8010654:	af04      	add	r7, sp, #16
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d107      	bne.n	8010670 <etharp_input+0x20>
 8010660:	4b3d      	ldr	r3, [pc, #244]	@ (8010758 <etharp_input+0x108>)
 8010662:	f240 228a 	movw	r2, #650	@ 0x28a
 8010666:	493d      	ldr	r1, [pc, #244]	@ (801075c <etharp_input+0x10c>)
 8010668:	483d      	ldr	r0, [pc, #244]	@ (8010760 <etharp_input+0x110>)
 801066a:	f002 f913 	bl	8012894 <iprintf>
 801066e:	e06f      	b.n	8010750 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	881b      	ldrh	r3, [r3, #0]
 801067a:	b29b      	uxth	r3, r3
 801067c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010680:	d10c      	bne.n	801069c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010686:	2b06      	cmp	r3, #6
 8010688:	d108      	bne.n	801069c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801068e:	2b04      	cmp	r3, #4
 8010690:	d104      	bne.n	801069c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	885b      	ldrh	r3, [r3, #2]
 8010696:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010698:	2b08      	cmp	r3, #8
 801069a:	d003      	beq.n	80106a4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f7f9 f9d3 	bl	8009a48 <pbuf_free>
    return;
 80106a2:	e055      	b.n	8010750 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	330e      	adds	r3, #14
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	3318      	adds	r3, #24
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	3304      	adds	r3, #4
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d102      	bne.n	80106c4 <etharp_input+0x74>
    for_us = 0;
 80106be:	2300      	movs	r3, #0
 80106c0:	75fb      	strb	r3, [r7, #23]
 80106c2:	e009      	b.n	80106d8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80106c4:	68ba      	ldr	r2, [r7, #8]
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	3304      	adds	r3, #4
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	429a      	cmp	r2, r3
 80106ce:	bf0c      	ite	eq
 80106d0:	2301      	moveq	r3, #1
 80106d2:	2300      	movne	r3, #0
 80106d4:	b2db      	uxtb	r3, r3
 80106d6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	f103 0208 	add.w	r2, r3, #8
 80106de:	7dfb      	ldrb	r3, [r7, #23]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d001      	beq.n	80106e8 <etharp_input+0x98>
 80106e4:	2301      	movs	r3, #1
 80106e6:	e000      	b.n	80106ea <etharp_input+0x9a>
 80106e8:	2302      	movs	r3, #2
 80106ea:	f107 010c 	add.w	r1, r7, #12
 80106ee:	6838      	ldr	r0, [r7, #0]
 80106f0:	f7ff fed8 	bl	80104a4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	88db      	ldrh	r3, [r3, #6]
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80106fe:	d003      	beq.n	8010708 <etharp_input+0xb8>
 8010700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010704:	d01e      	beq.n	8010744 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010706:	e020      	b.n	801074a <etharp_input+0xfa>
      if (for_us) {
 8010708:	7dfb      	ldrb	r3, [r7, #23]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d01c      	beq.n	8010748 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010724:	693a      	ldr	r2, [r7, #16]
 8010726:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010728:	2102      	movs	r1, #2
 801072a:	9103      	str	r1, [sp, #12]
 801072c:	f107 010c 	add.w	r1, r7, #12
 8010730:	9102      	str	r1, [sp, #8]
 8010732:	9201      	str	r2, [sp, #4]
 8010734:	9300      	str	r3, [sp, #0]
 8010736:	462b      	mov	r3, r5
 8010738:	4622      	mov	r2, r4
 801073a:	4601      	mov	r1, r0
 801073c:	6838      	ldr	r0, [r7, #0]
 801073e:	f000 faeb 	bl	8010d18 <etharp_raw>
      break;
 8010742:	e001      	b.n	8010748 <etharp_input+0xf8>
      break;
 8010744:	bf00      	nop
 8010746:	e000      	b.n	801074a <etharp_input+0xfa>
      break;
 8010748:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f7f9 f97c 	bl	8009a48 <pbuf_free>
}
 8010750:	3718      	adds	r7, #24
 8010752:	46bd      	mov	sp, r7
 8010754:	bdb0      	pop	{r4, r5, r7, pc}
 8010756:	bf00      	nop
 8010758:	08015e74 	.word	0x08015e74
 801075c:	08015fc4 	.word	0x08015fc4
 8010760:	08015eec 	.word	0x08015eec

08010764 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b086      	sub	sp, #24
 8010768:	af02      	add	r7, sp, #8
 801076a:	60f8      	str	r0, [r7, #12]
 801076c:	60b9      	str	r1, [r7, #8]
 801076e:	4613      	mov	r3, r2
 8010770:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010772:	79fa      	ldrb	r2, [r7, #7]
 8010774:	4944      	ldr	r1, [pc, #272]	@ (8010888 <etharp_output_to_arp_index+0x124>)
 8010776:	4613      	mov	r3, r2
 8010778:	005b      	lsls	r3, r3, #1
 801077a:	4413      	add	r3, r2
 801077c:	00db      	lsls	r3, r3, #3
 801077e:	440b      	add	r3, r1
 8010780:	3314      	adds	r3, #20
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	2b01      	cmp	r3, #1
 8010786:	d806      	bhi.n	8010796 <etharp_output_to_arp_index+0x32>
 8010788:	4b40      	ldr	r3, [pc, #256]	@ (801088c <etharp_output_to_arp_index+0x128>)
 801078a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801078e:	4940      	ldr	r1, [pc, #256]	@ (8010890 <etharp_output_to_arp_index+0x12c>)
 8010790:	4840      	ldr	r0, [pc, #256]	@ (8010894 <etharp_output_to_arp_index+0x130>)
 8010792:	f002 f87f 	bl	8012894 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010796:	79fa      	ldrb	r2, [r7, #7]
 8010798:	493b      	ldr	r1, [pc, #236]	@ (8010888 <etharp_output_to_arp_index+0x124>)
 801079a:	4613      	mov	r3, r2
 801079c:	005b      	lsls	r3, r3, #1
 801079e:	4413      	add	r3, r2
 80107a0:	00db      	lsls	r3, r3, #3
 80107a2:	440b      	add	r3, r1
 80107a4:	3314      	adds	r3, #20
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	2b02      	cmp	r3, #2
 80107aa:	d153      	bne.n	8010854 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80107ac:	79fa      	ldrb	r2, [r7, #7]
 80107ae:	4936      	ldr	r1, [pc, #216]	@ (8010888 <etharp_output_to_arp_index+0x124>)
 80107b0:	4613      	mov	r3, r2
 80107b2:	005b      	lsls	r3, r3, #1
 80107b4:	4413      	add	r3, r2
 80107b6:	00db      	lsls	r3, r3, #3
 80107b8:	440b      	add	r3, r1
 80107ba:	3312      	adds	r3, #18
 80107bc:	881b      	ldrh	r3, [r3, #0]
 80107be:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80107c2:	d919      	bls.n	80107f8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80107c4:	79fa      	ldrb	r2, [r7, #7]
 80107c6:	4613      	mov	r3, r2
 80107c8:	005b      	lsls	r3, r3, #1
 80107ca:	4413      	add	r3, r2
 80107cc:	00db      	lsls	r3, r3, #3
 80107ce:	4a2e      	ldr	r2, [pc, #184]	@ (8010888 <etharp_output_to_arp_index+0x124>)
 80107d0:	4413      	add	r3, r2
 80107d2:	3304      	adds	r3, #4
 80107d4:	4619      	mov	r1, r3
 80107d6:	68f8      	ldr	r0, [r7, #12]
 80107d8:	f000 fb4c 	bl	8010e74 <etharp_request>
 80107dc:	4603      	mov	r3, r0
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d138      	bne.n	8010854 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80107e2:	79fa      	ldrb	r2, [r7, #7]
 80107e4:	4928      	ldr	r1, [pc, #160]	@ (8010888 <etharp_output_to_arp_index+0x124>)
 80107e6:	4613      	mov	r3, r2
 80107e8:	005b      	lsls	r3, r3, #1
 80107ea:	4413      	add	r3, r2
 80107ec:	00db      	lsls	r3, r3, #3
 80107ee:	440b      	add	r3, r1
 80107f0:	3314      	adds	r3, #20
 80107f2:	2203      	movs	r2, #3
 80107f4:	701a      	strb	r2, [r3, #0]
 80107f6:	e02d      	b.n	8010854 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80107f8:	79fa      	ldrb	r2, [r7, #7]
 80107fa:	4923      	ldr	r1, [pc, #140]	@ (8010888 <etharp_output_to_arp_index+0x124>)
 80107fc:	4613      	mov	r3, r2
 80107fe:	005b      	lsls	r3, r3, #1
 8010800:	4413      	add	r3, r2
 8010802:	00db      	lsls	r3, r3, #3
 8010804:	440b      	add	r3, r1
 8010806:	3312      	adds	r3, #18
 8010808:	881b      	ldrh	r3, [r3, #0]
 801080a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801080e:	d321      	bcc.n	8010854 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010810:	79fa      	ldrb	r2, [r7, #7]
 8010812:	4613      	mov	r3, r2
 8010814:	005b      	lsls	r3, r3, #1
 8010816:	4413      	add	r3, r2
 8010818:	00db      	lsls	r3, r3, #3
 801081a:	4a1b      	ldr	r2, [pc, #108]	@ (8010888 <etharp_output_to_arp_index+0x124>)
 801081c:	4413      	add	r3, r2
 801081e:	1d19      	adds	r1, r3, #4
 8010820:	79fa      	ldrb	r2, [r7, #7]
 8010822:	4613      	mov	r3, r2
 8010824:	005b      	lsls	r3, r3, #1
 8010826:	4413      	add	r3, r2
 8010828:	00db      	lsls	r3, r3, #3
 801082a:	3308      	adds	r3, #8
 801082c:	4a16      	ldr	r2, [pc, #88]	@ (8010888 <etharp_output_to_arp_index+0x124>)
 801082e:	4413      	add	r3, r2
 8010830:	3304      	adds	r3, #4
 8010832:	461a      	mov	r2, r3
 8010834:	68f8      	ldr	r0, [r7, #12]
 8010836:	f000 fafb 	bl	8010e30 <etharp_request_dst>
 801083a:	4603      	mov	r3, r0
 801083c:	2b00      	cmp	r3, #0
 801083e:	d109      	bne.n	8010854 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010840:	79fa      	ldrb	r2, [r7, #7]
 8010842:	4911      	ldr	r1, [pc, #68]	@ (8010888 <etharp_output_to_arp_index+0x124>)
 8010844:	4613      	mov	r3, r2
 8010846:	005b      	lsls	r3, r3, #1
 8010848:	4413      	add	r3, r2
 801084a:	00db      	lsls	r3, r3, #3
 801084c:	440b      	add	r3, r1
 801084e:	3314      	adds	r3, #20
 8010850:	2203      	movs	r2, #3
 8010852:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801085a:	79fa      	ldrb	r2, [r7, #7]
 801085c:	4613      	mov	r3, r2
 801085e:	005b      	lsls	r3, r3, #1
 8010860:	4413      	add	r3, r2
 8010862:	00db      	lsls	r3, r3, #3
 8010864:	3308      	adds	r3, #8
 8010866:	4a08      	ldr	r2, [pc, #32]	@ (8010888 <etharp_output_to_arp_index+0x124>)
 8010868:	4413      	add	r3, r2
 801086a:	3304      	adds	r3, #4
 801086c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010870:	9200      	str	r2, [sp, #0]
 8010872:	460a      	mov	r2, r1
 8010874:	68b9      	ldr	r1, [r7, #8]
 8010876:	68f8      	ldr	r0, [r7, #12]
 8010878:	f001 fe40 	bl	80124fc <ethernet_output>
 801087c:	4603      	mov	r3, r0
}
 801087e:	4618      	mov	r0, r3
 8010880:	3710      	adds	r7, #16
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}
 8010886:	bf00      	nop
 8010888:	200089fc 	.word	0x200089fc
 801088c:	08015e74 	.word	0x08015e74
 8010890:	08015fe4 	.word	0x08015fe4
 8010894:	08015eec 	.word	0x08015eec

08010898 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b08a      	sub	sp, #40	@ 0x28
 801089c:	af02      	add	r7, sp, #8
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d106      	bne.n	80108bc <etharp_output+0x24>
 80108ae:	4b73      	ldr	r3, [pc, #460]	@ (8010a7c <etharp_output+0x1e4>)
 80108b0:	f240 321e 	movw	r2, #798	@ 0x31e
 80108b4:	4972      	ldr	r1, [pc, #456]	@ (8010a80 <etharp_output+0x1e8>)
 80108b6:	4873      	ldr	r0, [pc, #460]	@ (8010a84 <etharp_output+0x1ec>)
 80108b8:	f001 ffec 	bl	8012894 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d106      	bne.n	80108d0 <etharp_output+0x38>
 80108c2:	4b6e      	ldr	r3, [pc, #440]	@ (8010a7c <etharp_output+0x1e4>)
 80108c4:	f240 321f 	movw	r2, #799	@ 0x31f
 80108c8:	496f      	ldr	r1, [pc, #444]	@ (8010a88 <etharp_output+0x1f0>)
 80108ca:	486e      	ldr	r0, [pc, #440]	@ (8010a84 <etharp_output+0x1ec>)
 80108cc:	f001 ffe2 	bl	8012894 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d106      	bne.n	80108e4 <etharp_output+0x4c>
 80108d6:	4b69      	ldr	r3, [pc, #420]	@ (8010a7c <etharp_output+0x1e4>)
 80108d8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80108dc:	496b      	ldr	r1, [pc, #428]	@ (8010a8c <etharp_output+0x1f4>)
 80108de:	4869      	ldr	r0, [pc, #420]	@ (8010a84 <etharp_output+0x1ec>)
 80108e0:	f001 ffd8 	bl	8012894 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	68f9      	ldr	r1, [r7, #12]
 80108ea:	4618      	mov	r0, r3
 80108ec:	f000 fef8 	bl	80116e0 <ip4_addr_isbroadcast_u32>
 80108f0:	4603      	mov	r3, r0
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d002      	beq.n	80108fc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80108f6:	4b66      	ldr	r3, [pc, #408]	@ (8010a90 <etharp_output+0x1f8>)
 80108f8:	61fb      	str	r3, [r7, #28]
 80108fa:	e0af      	b.n	8010a5c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010904:	2be0      	cmp	r3, #224	@ 0xe0
 8010906:	d118      	bne.n	801093a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010908:	2301      	movs	r3, #1
 801090a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801090c:	2300      	movs	r3, #0
 801090e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010910:	235e      	movs	r3, #94	@ 0x5e
 8010912:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	3301      	adds	r3, #1
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801091e:	b2db      	uxtb	r3, r3
 8010920:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	3302      	adds	r3, #2
 8010926:	781b      	ldrb	r3, [r3, #0]
 8010928:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	3303      	adds	r3, #3
 801092e:	781b      	ldrb	r3, [r3, #0]
 8010930:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010932:	f107 0310 	add.w	r3, r7, #16
 8010936:	61fb      	str	r3, [r7, #28]
 8010938:	e090      	b.n	8010a5c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681a      	ldr	r2, [r3, #0]
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	3304      	adds	r3, #4
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	405a      	eors	r2, r3
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	3308      	adds	r3, #8
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	4013      	ands	r3, r2
 801094e:	2b00      	cmp	r3, #0
 8010950:	d012      	beq.n	8010978 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010958:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801095c:	4293      	cmp	r3, r2
 801095e:	d00b      	beq.n	8010978 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	330c      	adds	r3, #12
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d003      	beq.n	8010972 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	330c      	adds	r3, #12
 801096e:	61bb      	str	r3, [r7, #24]
 8010970:	e002      	b.n	8010978 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010972:	f06f 0303 	mvn.w	r3, #3
 8010976:	e07d      	b.n	8010a74 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010978:	4b46      	ldr	r3, [pc, #280]	@ (8010a94 <etharp_output+0x1fc>)
 801097a:	781b      	ldrb	r3, [r3, #0]
 801097c:	4619      	mov	r1, r3
 801097e:	4a46      	ldr	r2, [pc, #280]	@ (8010a98 <etharp_output+0x200>)
 8010980:	460b      	mov	r3, r1
 8010982:	005b      	lsls	r3, r3, #1
 8010984:	440b      	add	r3, r1
 8010986:	00db      	lsls	r3, r3, #3
 8010988:	4413      	add	r3, r2
 801098a:	3314      	adds	r3, #20
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	2b01      	cmp	r3, #1
 8010990:	d925      	bls.n	80109de <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010992:	4b40      	ldr	r3, [pc, #256]	@ (8010a94 <etharp_output+0x1fc>)
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	4619      	mov	r1, r3
 8010998:	4a3f      	ldr	r2, [pc, #252]	@ (8010a98 <etharp_output+0x200>)
 801099a:	460b      	mov	r3, r1
 801099c:	005b      	lsls	r3, r3, #1
 801099e:	440b      	add	r3, r1
 80109a0:	00db      	lsls	r3, r3, #3
 80109a2:	4413      	add	r3, r2
 80109a4:	3308      	adds	r3, #8
 80109a6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80109a8:	68fa      	ldr	r2, [r7, #12]
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d117      	bne.n	80109de <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80109ae:	69bb      	ldr	r3, [r7, #24]
 80109b0:	681a      	ldr	r2, [r3, #0]
 80109b2:	4b38      	ldr	r3, [pc, #224]	@ (8010a94 <etharp_output+0x1fc>)
 80109b4:	781b      	ldrb	r3, [r3, #0]
 80109b6:	4618      	mov	r0, r3
 80109b8:	4937      	ldr	r1, [pc, #220]	@ (8010a98 <etharp_output+0x200>)
 80109ba:	4603      	mov	r3, r0
 80109bc:	005b      	lsls	r3, r3, #1
 80109be:	4403      	add	r3, r0
 80109c0:	00db      	lsls	r3, r3, #3
 80109c2:	440b      	add	r3, r1
 80109c4:	3304      	adds	r3, #4
 80109c6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d108      	bne.n	80109de <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80109cc:	4b31      	ldr	r3, [pc, #196]	@ (8010a94 <etharp_output+0x1fc>)
 80109ce:	781b      	ldrb	r3, [r3, #0]
 80109d0:	461a      	mov	r2, r3
 80109d2:	68b9      	ldr	r1, [r7, #8]
 80109d4:	68f8      	ldr	r0, [r7, #12]
 80109d6:	f7ff fec5 	bl	8010764 <etharp_output_to_arp_index>
 80109da:	4603      	mov	r3, r0
 80109dc:	e04a      	b.n	8010a74 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80109de:	2300      	movs	r3, #0
 80109e0:	75fb      	strb	r3, [r7, #23]
 80109e2:	e031      	b.n	8010a48 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80109e4:	7dfa      	ldrb	r2, [r7, #23]
 80109e6:	492c      	ldr	r1, [pc, #176]	@ (8010a98 <etharp_output+0x200>)
 80109e8:	4613      	mov	r3, r2
 80109ea:	005b      	lsls	r3, r3, #1
 80109ec:	4413      	add	r3, r2
 80109ee:	00db      	lsls	r3, r3, #3
 80109f0:	440b      	add	r3, r1
 80109f2:	3314      	adds	r3, #20
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d923      	bls.n	8010a42 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80109fa:	7dfa      	ldrb	r2, [r7, #23]
 80109fc:	4926      	ldr	r1, [pc, #152]	@ (8010a98 <etharp_output+0x200>)
 80109fe:	4613      	mov	r3, r2
 8010a00:	005b      	lsls	r3, r3, #1
 8010a02:	4413      	add	r3, r2
 8010a04:	00db      	lsls	r3, r3, #3
 8010a06:	440b      	add	r3, r1
 8010a08:	3308      	adds	r3, #8
 8010a0a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010a0c:	68fa      	ldr	r2, [r7, #12]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d117      	bne.n	8010a42 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010a12:	69bb      	ldr	r3, [r7, #24]
 8010a14:	6819      	ldr	r1, [r3, #0]
 8010a16:	7dfa      	ldrb	r2, [r7, #23]
 8010a18:	481f      	ldr	r0, [pc, #124]	@ (8010a98 <etharp_output+0x200>)
 8010a1a:	4613      	mov	r3, r2
 8010a1c:	005b      	lsls	r3, r3, #1
 8010a1e:	4413      	add	r3, r2
 8010a20:	00db      	lsls	r3, r3, #3
 8010a22:	4403      	add	r3, r0
 8010a24:	3304      	adds	r3, #4
 8010a26:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010a28:	4299      	cmp	r1, r3
 8010a2a:	d10a      	bne.n	8010a42 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010a2c:	4a19      	ldr	r2, [pc, #100]	@ (8010a94 <etharp_output+0x1fc>)
 8010a2e:	7dfb      	ldrb	r3, [r7, #23]
 8010a30:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010a32:	7dfb      	ldrb	r3, [r7, #23]
 8010a34:	461a      	mov	r2, r3
 8010a36:	68b9      	ldr	r1, [r7, #8]
 8010a38:	68f8      	ldr	r0, [r7, #12]
 8010a3a:	f7ff fe93 	bl	8010764 <etharp_output_to_arp_index>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	e018      	b.n	8010a74 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010a42:	7dfb      	ldrb	r3, [r7, #23]
 8010a44:	3301      	adds	r3, #1
 8010a46:	75fb      	strb	r3, [r7, #23]
 8010a48:	7dfb      	ldrb	r3, [r7, #23]
 8010a4a:	2b09      	cmp	r3, #9
 8010a4c:	d9ca      	bls.n	80109e4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010a4e:	68ba      	ldr	r2, [r7, #8]
 8010a50:	69b9      	ldr	r1, [r7, #24]
 8010a52:	68f8      	ldr	r0, [r7, #12]
 8010a54:	f000 f822 	bl	8010a9c <etharp_query>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	e00b      	b.n	8010a74 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8010a62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010a66:	9300      	str	r3, [sp, #0]
 8010a68:	69fb      	ldr	r3, [r7, #28]
 8010a6a:	68b9      	ldr	r1, [r7, #8]
 8010a6c:	68f8      	ldr	r0, [r7, #12]
 8010a6e:	f001 fd45 	bl	80124fc <ethernet_output>
 8010a72:	4603      	mov	r3, r0
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3720      	adds	r7, #32
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}
 8010a7c:	08015e74 	.word	0x08015e74
 8010a80:	08015fc4 	.word	0x08015fc4
 8010a84:	08015eec 	.word	0x08015eec
 8010a88:	08016014 	.word	0x08016014
 8010a8c:	08015fb4 	.word	0x08015fb4
 8010a90:	08016630 	.word	0x08016630
 8010a94:	20008aec 	.word	0x20008aec
 8010a98:	200089fc 	.word	0x200089fc

08010a9c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b08c      	sub	sp, #48	@ 0x30
 8010aa0:	af02      	add	r7, sp, #8
 8010aa2:	60f8      	str	r0, [r7, #12]
 8010aa4:	60b9      	str	r1, [r7, #8]
 8010aa6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	3326      	adds	r3, #38	@ 0x26
 8010aac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010aae:	23ff      	movs	r3, #255	@ 0xff
 8010ab0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	68f9      	ldr	r1, [r7, #12]
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f000 fe0e 	bl	80116e0 <ip4_addr_isbroadcast_u32>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d10c      	bne.n	8010ae4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010ad2:	2be0      	cmp	r3, #224	@ 0xe0
 8010ad4:	d006      	beq.n	8010ae4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d003      	beq.n	8010ae4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d102      	bne.n	8010aea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010ae4:	f06f 030f 	mvn.w	r3, #15
 8010ae8:	e101      	b.n	8010cee <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010aea:	68fa      	ldr	r2, [r7, #12]
 8010aec:	2101      	movs	r1, #1
 8010aee:	68b8      	ldr	r0, [r7, #8]
 8010af0:	f7ff fb60 	bl	80101b4 <etharp_find_entry>
 8010af4:	4603      	mov	r3, r0
 8010af6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010af8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	da02      	bge.n	8010b06 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010b00:	8a7b      	ldrh	r3, [r7, #18]
 8010b02:	b25b      	sxtb	r3, r3
 8010b04:	e0f3      	b.n	8010cee <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010b06:	8a7b      	ldrh	r3, [r7, #18]
 8010b08:	2b7e      	cmp	r3, #126	@ 0x7e
 8010b0a:	d906      	bls.n	8010b1a <etharp_query+0x7e>
 8010b0c:	4b7a      	ldr	r3, [pc, #488]	@ (8010cf8 <etharp_query+0x25c>)
 8010b0e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8010b12:	497a      	ldr	r1, [pc, #488]	@ (8010cfc <etharp_query+0x260>)
 8010b14:	487a      	ldr	r0, [pc, #488]	@ (8010d00 <etharp_query+0x264>)
 8010b16:	f001 febd 	bl	8012894 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010b1a:	8a7b      	ldrh	r3, [r7, #18]
 8010b1c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010b1e:	7c7a      	ldrb	r2, [r7, #17]
 8010b20:	4978      	ldr	r1, [pc, #480]	@ (8010d04 <etharp_query+0x268>)
 8010b22:	4613      	mov	r3, r2
 8010b24:	005b      	lsls	r3, r3, #1
 8010b26:	4413      	add	r3, r2
 8010b28:	00db      	lsls	r3, r3, #3
 8010b2a:	440b      	add	r3, r1
 8010b2c:	3314      	adds	r3, #20
 8010b2e:	781b      	ldrb	r3, [r3, #0]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d115      	bne.n	8010b60 <etharp_query+0xc4>
    is_new_entry = 1;
 8010b34:	2301      	movs	r3, #1
 8010b36:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010b38:	7c7a      	ldrb	r2, [r7, #17]
 8010b3a:	4972      	ldr	r1, [pc, #456]	@ (8010d04 <etharp_query+0x268>)
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	005b      	lsls	r3, r3, #1
 8010b40:	4413      	add	r3, r2
 8010b42:	00db      	lsls	r3, r3, #3
 8010b44:	440b      	add	r3, r1
 8010b46:	3314      	adds	r3, #20
 8010b48:	2201      	movs	r2, #1
 8010b4a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010b4c:	7c7a      	ldrb	r2, [r7, #17]
 8010b4e:	496d      	ldr	r1, [pc, #436]	@ (8010d04 <etharp_query+0x268>)
 8010b50:	4613      	mov	r3, r2
 8010b52:	005b      	lsls	r3, r3, #1
 8010b54:	4413      	add	r3, r2
 8010b56:	00db      	lsls	r3, r3, #3
 8010b58:	440b      	add	r3, r1
 8010b5a:	3308      	adds	r3, #8
 8010b5c:	68fa      	ldr	r2, [r7, #12]
 8010b5e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010b60:	7c7a      	ldrb	r2, [r7, #17]
 8010b62:	4968      	ldr	r1, [pc, #416]	@ (8010d04 <etharp_query+0x268>)
 8010b64:	4613      	mov	r3, r2
 8010b66:	005b      	lsls	r3, r3, #1
 8010b68:	4413      	add	r3, r2
 8010b6a:	00db      	lsls	r3, r3, #3
 8010b6c:	440b      	add	r3, r1
 8010b6e:	3314      	adds	r3, #20
 8010b70:	781b      	ldrb	r3, [r3, #0]
 8010b72:	2b01      	cmp	r3, #1
 8010b74:	d011      	beq.n	8010b9a <etharp_query+0xfe>
 8010b76:	7c7a      	ldrb	r2, [r7, #17]
 8010b78:	4962      	ldr	r1, [pc, #392]	@ (8010d04 <etharp_query+0x268>)
 8010b7a:	4613      	mov	r3, r2
 8010b7c:	005b      	lsls	r3, r3, #1
 8010b7e:	4413      	add	r3, r2
 8010b80:	00db      	lsls	r3, r3, #3
 8010b82:	440b      	add	r3, r1
 8010b84:	3314      	adds	r3, #20
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	d806      	bhi.n	8010b9a <etharp_query+0xfe>
 8010b8c:	4b5a      	ldr	r3, [pc, #360]	@ (8010cf8 <etharp_query+0x25c>)
 8010b8e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8010b92:	495d      	ldr	r1, [pc, #372]	@ (8010d08 <etharp_query+0x26c>)
 8010b94:	485a      	ldr	r0, [pc, #360]	@ (8010d00 <etharp_query+0x264>)
 8010b96:	f001 fe7d 	bl	8012894 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010b9a:	6a3b      	ldr	r3, [r7, #32]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d102      	bne.n	8010ba6 <etharp_query+0x10a>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d10c      	bne.n	8010bc0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010ba6:	68b9      	ldr	r1, [r7, #8]
 8010ba8:	68f8      	ldr	r0, [r7, #12]
 8010baa:	f000 f963 	bl	8010e74 <etharp_request>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d102      	bne.n	8010bc0 <etharp_query+0x124>
      return result;
 8010bba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010bbe:	e096      	b.n	8010cee <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d106      	bne.n	8010bd4 <etharp_query+0x138>
 8010bc6:	4b4c      	ldr	r3, [pc, #304]	@ (8010cf8 <etharp_query+0x25c>)
 8010bc8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8010bcc:	494f      	ldr	r1, [pc, #316]	@ (8010d0c <etharp_query+0x270>)
 8010bce:	484c      	ldr	r0, [pc, #304]	@ (8010d00 <etharp_query+0x264>)
 8010bd0:	f001 fe60 	bl	8012894 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010bd4:	7c7a      	ldrb	r2, [r7, #17]
 8010bd6:	494b      	ldr	r1, [pc, #300]	@ (8010d04 <etharp_query+0x268>)
 8010bd8:	4613      	mov	r3, r2
 8010bda:	005b      	lsls	r3, r3, #1
 8010bdc:	4413      	add	r3, r2
 8010bde:	00db      	lsls	r3, r3, #3
 8010be0:	440b      	add	r3, r1
 8010be2:	3314      	adds	r3, #20
 8010be4:	781b      	ldrb	r3, [r3, #0]
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d917      	bls.n	8010c1a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010bea:	4a49      	ldr	r2, [pc, #292]	@ (8010d10 <etharp_query+0x274>)
 8010bec:	7c7b      	ldrb	r3, [r7, #17]
 8010bee:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010bf0:	7c7a      	ldrb	r2, [r7, #17]
 8010bf2:	4613      	mov	r3, r2
 8010bf4:	005b      	lsls	r3, r3, #1
 8010bf6:	4413      	add	r3, r2
 8010bf8:	00db      	lsls	r3, r3, #3
 8010bfa:	3308      	adds	r3, #8
 8010bfc:	4a41      	ldr	r2, [pc, #260]	@ (8010d04 <etharp_query+0x268>)
 8010bfe:	4413      	add	r3, r2
 8010c00:	3304      	adds	r3, #4
 8010c02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010c06:	9200      	str	r2, [sp, #0]
 8010c08:	697a      	ldr	r2, [r7, #20]
 8010c0a:	6879      	ldr	r1, [r7, #4]
 8010c0c:	68f8      	ldr	r0, [r7, #12]
 8010c0e:	f001 fc75 	bl	80124fc <ethernet_output>
 8010c12:	4603      	mov	r3, r0
 8010c14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010c18:	e067      	b.n	8010cea <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010c1a:	7c7a      	ldrb	r2, [r7, #17]
 8010c1c:	4939      	ldr	r1, [pc, #228]	@ (8010d04 <etharp_query+0x268>)
 8010c1e:	4613      	mov	r3, r2
 8010c20:	005b      	lsls	r3, r3, #1
 8010c22:	4413      	add	r3, r2
 8010c24:	00db      	lsls	r3, r3, #3
 8010c26:	440b      	add	r3, r1
 8010c28:	3314      	adds	r3, #20
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	2b01      	cmp	r3, #1
 8010c2e:	d15c      	bne.n	8010cea <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010c30:	2300      	movs	r3, #0
 8010c32:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010c38:	e01c      	b.n	8010c74 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010c3a:	69fb      	ldr	r3, [r7, #28]
 8010c3c:	895a      	ldrh	r2, [r3, #10]
 8010c3e:	69fb      	ldr	r3, [r7, #28]
 8010c40:	891b      	ldrh	r3, [r3, #8]
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d10a      	bne.n	8010c5c <etharp_query+0x1c0>
 8010c46:	69fb      	ldr	r3, [r7, #28]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d006      	beq.n	8010c5c <etharp_query+0x1c0>
 8010c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8010cf8 <etharp_query+0x25c>)
 8010c50:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8010c54:	492f      	ldr	r1, [pc, #188]	@ (8010d14 <etharp_query+0x278>)
 8010c56:	482a      	ldr	r0, [pc, #168]	@ (8010d00 <etharp_query+0x264>)
 8010c58:	f001 fe1c 	bl	8012894 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010c5c:	69fb      	ldr	r3, [r7, #28]
 8010c5e:	7b1b      	ldrb	r3, [r3, #12]
 8010c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d002      	beq.n	8010c6e <etharp_query+0x1d2>
        copy_needed = 1;
 8010c68:	2301      	movs	r3, #1
 8010c6a:	61bb      	str	r3, [r7, #24]
        break;
 8010c6c:	e005      	b.n	8010c7a <etharp_query+0x1de>
      }
      p = p->next;
 8010c6e:	69fb      	ldr	r3, [r7, #28]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010c74:	69fb      	ldr	r3, [r7, #28]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d1df      	bne.n	8010c3a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010c7a:	69bb      	ldr	r3, [r7, #24]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d007      	beq.n	8010c90 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010c80:	687a      	ldr	r2, [r7, #4]
 8010c82:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8010c86:	200e      	movs	r0, #14
 8010c88:	f7f9 f9dc 	bl	800a044 <pbuf_clone>
 8010c8c:	61f8      	str	r0, [r7, #28]
 8010c8e:	e004      	b.n	8010c9a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010c94:	69f8      	ldr	r0, [r7, #28]
 8010c96:	f7f8 ff77 	bl	8009b88 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010c9a:	69fb      	ldr	r3, [r7, #28]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d021      	beq.n	8010ce4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010ca0:	7c7a      	ldrb	r2, [r7, #17]
 8010ca2:	4918      	ldr	r1, [pc, #96]	@ (8010d04 <etharp_query+0x268>)
 8010ca4:	4613      	mov	r3, r2
 8010ca6:	005b      	lsls	r3, r3, #1
 8010ca8:	4413      	add	r3, r2
 8010caa:	00db      	lsls	r3, r3, #3
 8010cac:	440b      	add	r3, r1
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d00a      	beq.n	8010cca <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010cb4:	7c7a      	ldrb	r2, [r7, #17]
 8010cb6:	4913      	ldr	r1, [pc, #76]	@ (8010d04 <etharp_query+0x268>)
 8010cb8:	4613      	mov	r3, r2
 8010cba:	005b      	lsls	r3, r3, #1
 8010cbc:	4413      	add	r3, r2
 8010cbe:	00db      	lsls	r3, r3, #3
 8010cc0:	440b      	add	r3, r1
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7f8 febf 	bl	8009a48 <pbuf_free>
      }
      arp_table[i].q = p;
 8010cca:	7c7a      	ldrb	r2, [r7, #17]
 8010ccc:	490d      	ldr	r1, [pc, #52]	@ (8010d04 <etharp_query+0x268>)
 8010cce:	4613      	mov	r3, r2
 8010cd0:	005b      	lsls	r3, r3, #1
 8010cd2:	4413      	add	r3, r2
 8010cd4:	00db      	lsls	r3, r3, #3
 8010cd6:	440b      	add	r3, r1
 8010cd8:	69fa      	ldr	r2, [r7, #28]
 8010cda:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010ce2:	e002      	b.n	8010cea <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010ce4:	23ff      	movs	r3, #255	@ 0xff
 8010ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8010cea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3728      	adds	r7, #40	@ 0x28
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	08015e74 	.word	0x08015e74
 8010cfc:	08016020 	.word	0x08016020
 8010d00:	08015eec 	.word	0x08015eec
 8010d04:	200089fc 	.word	0x200089fc
 8010d08:	08016030 	.word	0x08016030
 8010d0c:	08016014 	.word	0x08016014
 8010d10:	20008aec 	.word	0x20008aec
 8010d14:	08016058 	.word	0x08016058

08010d18 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b08a      	sub	sp, #40	@ 0x28
 8010d1c:	af02      	add	r7, sp, #8
 8010d1e:	60f8      	str	r0, [r7, #12]
 8010d20:	60b9      	str	r1, [r7, #8]
 8010d22:	607a      	str	r2, [r7, #4]
 8010d24:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010d26:	2300      	movs	r3, #0
 8010d28:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d106      	bne.n	8010d3e <etharp_raw+0x26>
 8010d30:	4b3a      	ldr	r3, [pc, #232]	@ (8010e1c <etharp_raw+0x104>)
 8010d32:	f240 4257 	movw	r2, #1111	@ 0x457
 8010d36:	493a      	ldr	r1, [pc, #232]	@ (8010e20 <etharp_raw+0x108>)
 8010d38:	483a      	ldr	r0, [pc, #232]	@ (8010e24 <etharp_raw+0x10c>)
 8010d3a:	f001 fdab 	bl	8012894 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010d3e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010d42:	211c      	movs	r1, #28
 8010d44:	200e      	movs	r0, #14
 8010d46:	f7f8 fb9b 	bl	8009480 <pbuf_alloc>
 8010d4a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010d4c:	69bb      	ldr	r3, [r7, #24]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d102      	bne.n	8010d58 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010d52:	f04f 33ff 	mov.w	r3, #4294967295
 8010d56:	e05d      	b.n	8010e14 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010d58:	69bb      	ldr	r3, [r7, #24]
 8010d5a:	895b      	ldrh	r3, [r3, #10]
 8010d5c:	2b1b      	cmp	r3, #27
 8010d5e:	d806      	bhi.n	8010d6e <etharp_raw+0x56>
 8010d60:	4b2e      	ldr	r3, [pc, #184]	@ (8010e1c <etharp_raw+0x104>)
 8010d62:	f240 4262 	movw	r2, #1122	@ 0x462
 8010d66:	4930      	ldr	r1, [pc, #192]	@ (8010e28 <etharp_raw+0x110>)
 8010d68:	482e      	ldr	r0, [pc, #184]	@ (8010e24 <etharp_raw+0x10c>)
 8010d6a:	f001 fd93 	bl	8012894 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010d6e:	69bb      	ldr	r3, [r7, #24]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010d74:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7f7 fb08 	bl	800838c <lwip_htons>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	461a      	mov	r2, r3
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010d8a:	2b06      	cmp	r3, #6
 8010d8c:	d006      	beq.n	8010d9c <etharp_raw+0x84>
 8010d8e:	4b23      	ldr	r3, [pc, #140]	@ (8010e1c <etharp_raw+0x104>)
 8010d90:	f240 4269 	movw	r2, #1129	@ 0x469
 8010d94:	4925      	ldr	r1, [pc, #148]	@ (8010e2c <etharp_raw+0x114>)
 8010d96:	4823      	ldr	r0, [pc, #140]	@ (8010e24 <etharp_raw+0x10c>)
 8010d98:	f001 fd7c 	bl	8012894 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	3308      	adds	r3, #8
 8010da0:	2206      	movs	r2, #6
 8010da2:	6839      	ldr	r1, [r7, #0]
 8010da4:	4618      	mov	r0, r3
 8010da6:	f001 fea4 	bl	8012af2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	3312      	adds	r3, #18
 8010dae:	2206      	movs	r2, #6
 8010db0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010db2:	4618      	mov	r0, r3
 8010db4:	f001 fe9d 	bl	8012af2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	330e      	adds	r3, #14
 8010dbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010dbe:	6812      	ldr	r2, [r2, #0]
 8010dc0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	3318      	adds	r3, #24
 8010dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010dc8:	6812      	ldr	r2, [r2, #0]
 8010dca:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	701a      	strb	r2, [r3, #0]
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	f042 0201 	orr.w	r2, r2, #1
 8010dd8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	f042 0208 	orr.w	r2, r2, #8
 8010de2:	709a      	strb	r2, [r3, #2]
 8010de4:	2200      	movs	r2, #0
 8010de6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	2206      	movs	r2, #6
 8010dec:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	2204      	movs	r2, #4
 8010df2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010df4:	f640 0306 	movw	r3, #2054	@ 0x806
 8010df8:	9300      	str	r3, [sp, #0]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	68ba      	ldr	r2, [r7, #8]
 8010dfe:	69b9      	ldr	r1, [r7, #24]
 8010e00:	68f8      	ldr	r0, [r7, #12]
 8010e02:	f001 fb7b 	bl	80124fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010e06:	69b8      	ldr	r0, [r7, #24]
 8010e08:	f7f8 fe1e 	bl	8009a48 <pbuf_free>
  p = NULL;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010e10:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3720      	adds	r7, #32
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	08015e74 	.word	0x08015e74
 8010e20:	08015fc4 	.word	0x08015fc4
 8010e24:	08015eec 	.word	0x08015eec
 8010e28:	08016074 	.word	0x08016074
 8010e2c:	080160a8 	.word	0x080160a8

08010e30 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b088      	sub	sp, #32
 8010e34:	af04      	add	r7, sp, #16
 8010e36:	60f8      	str	r0, [r7, #12]
 8010e38:	60b9      	str	r1, [r7, #8]
 8010e3a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	9203      	str	r2, [sp, #12]
 8010e50:	68ba      	ldr	r2, [r7, #8]
 8010e52:	9202      	str	r2, [sp, #8]
 8010e54:	4a06      	ldr	r2, [pc, #24]	@ (8010e70 <etharp_request_dst+0x40>)
 8010e56:	9201      	str	r2, [sp, #4]
 8010e58:	9300      	str	r3, [sp, #0]
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	687a      	ldr	r2, [r7, #4]
 8010e5e:	68f8      	ldr	r0, [r7, #12]
 8010e60:	f7ff ff5a 	bl	8010d18 <etharp_raw>
 8010e64:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3710      	adds	r7, #16
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	08016638 	.word	0x08016638

08010e74 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b082      	sub	sp, #8
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010e7e:	4a05      	ldr	r2, [pc, #20]	@ (8010e94 <etharp_request+0x20>)
 8010e80:	6839      	ldr	r1, [r7, #0]
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f7ff ffd4 	bl	8010e30 <etharp_request_dst>
 8010e88:	4603      	mov	r3, r0
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	3708      	adds	r7, #8
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}
 8010e92:	bf00      	nop
 8010e94:	08016630 	.word	0x08016630

08010e98 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b08e      	sub	sp, #56	@ 0x38
 8010e9c:	af04      	add	r7, sp, #16
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010ea2:	4b79      	ldr	r3, [pc, #484]	@ (8011088 <icmp_input+0x1f0>)
 8010ea4:	689b      	ldr	r3, [r3, #8]
 8010ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eaa:	781b      	ldrb	r3, [r3, #0]
 8010eac:	f003 030f 	and.w	r3, r3, #15
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	009b      	lsls	r3, r3, #2
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8010eb8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010eba:	2b13      	cmp	r3, #19
 8010ebc:	f240 80cd 	bls.w	801105a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	895b      	ldrh	r3, [r3, #10]
 8010ec4:	2b03      	cmp	r3, #3
 8010ec6:	f240 80ca 	bls.w	801105e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	685b      	ldr	r3, [r3, #4]
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010ed4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	f000 80b7 	beq.w	801104c <icmp_input+0x1b4>
 8010ede:	2b08      	cmp	r3, #8
 8010ee0:	f040 80b7 	bne.w	8011052 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010ee4:	4b69      	ldr	r3, [pc, #420]	@ (801108c <icmp_input+0x1f4>)
 8010ee6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010ee8:	4b67      	ldr	r3, [pc, #412]	@ (8011088 <icmp_input+0x1f0>)
 8010eea:	695b      	ldr	r3, [r3, #20]
 8010eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010ef0:	2be0      	cmp	r3, #224	@ 0xe0
 8010ef2:	f000 80bb 	beq.w	801106c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010ef6:	4b64      	ldr	r3, [pc, #400]	@ (8011088 <icmp_input+0x1f0>)
 8010ef8:	695b      	ldr	r3, [r3, #20]
 8010efa:	4a63      	ldr	r2, [pc, #396]	@ (8011088 <icmp_input+0x1f0>)
 8010efc:	6812      	ldr	r2, [r2, #0]
 8010efe:	4611      	mov	r1, r2
 8010f00:	4618      	mov	r0, r3
 8010f02:	f000 fbed 	bl	80116e0 <ip4_addr_isbroadcast_u32>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	f040 80b1 	bne.w	8011070 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	891b      	ldrh	r3, [r3, #8]
 8010f12:	2b07      	cmp	r3, #7
 8010f14:	f240 80a5 	bls.w	8011062 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010f18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010f1a:	330e      	adds	r3, #14
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	f7f8 fcfc 	bl	800991c <pbuf_add_header>
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d04b      	beq.n	8010fc2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	891a      	ldrh	r2, [r3, #8]
 8010f2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010f30:	4413      	add	r3, r2
 8010f32:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	891b      	ldrh	r3, [r3, #8]
 8010f38:	8b7a      	ldrh	r2, [r7, #26]
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	f0c0 809a 	bcc.w	8011074 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010f40:	8b7b      	ldrh	r3, [r7, #26]
 8010f42:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010f46:	4619      	mov	r1, r3
 8010f48:	200e      	movs	r0, #14
 8010f4a:	f7f8 fa99 	bl	8009480 <pbuf_alloc>
 8010f4e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	f000 8090 	beq.w	8011078 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	895b      	ldrh	r3, [r3, #10]
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010f60:	3308      	adds	r3, #8
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d203      	bcs.n	8010f6e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010f66:	6978      	ldr	r0, [r7, #20]
 8010f68:	f7f8 fd6e 	bl	8009a48 <pbuf_free>
          goto icmperr;
 8010f6c:	e085      	b.n	801107a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010f74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010f76:	4618      	mov	r0, r3
 8010f78:	f001 fdbb 	bl	8012af2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010f7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010f7e:	4619      	mov	r1, r3
 8010f80:	6978      	ldr	r0, [r7, #20]
 8010f82:	f7f8 fcdb 	bl	800993c <pbuf_remove_header>
 8010f86:	4603      	mov	r3, r0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d009      	beq.n	8010fa0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010f8c:	4b40      	ldr	r3, [pc, #256]	@ (8011090 <icmp_input+0x1f8>)
 8010f8e:	22b6      	movs	r2, #182	@ 0xb6
 8010f90:	4940      	ldr	r1, [pc, #256]	@ (8011094 <icmp_input+0x1fc>)
 8010f92:	4841      	ldr	r0, [pc, #260]	@ (8011098 <icmp_input+0x200>)
 8010f94:	f001 fc7e 	bl	8012894 <iprintf>
          pbuf_free(r);
 8010f98:	6978      	ldr	r0, [r7, #20]
 8010f9a:	f7f8 fd55 	bl	8009a48 <pbuf_free>
          goto icmperr;
 8010f9e:	e06c      	b.n	801107a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010fa0:	6879      	ldr	r1, [r7, #4]
 8010fa2:	6978      	ldr	r0, [r7, #20]
 8010fa4:	f7f8 fe78 	bl	8009c98 <pbuf_copy>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d003      	beq.n	8010fb6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010fae:	6978      	ldr	r0, [r7, #20]
 8010fb0:	f7f8 fd4a 	bl	8009a48 <pbuf_free>
          goto icmperr;
 8010fb4:	e061      	b.n	801107a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f7f8 fd46 	bl	8009a48 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	607b      	str	r3, [r7, #4]
 8010fc0:	e00f      	b.n	8010fe2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010fc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010fc4:	330e      	adds	r3, #14
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f7f8 fcb7 	bl	800993c <pbuf_remove_header>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d006      	beq.n	8010fe2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8011090 <icmp_input+0x1f8>)
 8010fd6:	22c7      	movs	r2, #199	@ 0xc7
 8010fd8:	4930      	ldr	r1, [pc, #192]	@ (801109c <icmp_input+0x204>)
 8010fda:	482f      	ldr	r0, [pc, #188]	@ (8011098 <icmp_input+0x200>)
 8010fdc:	f001 fc5a 	bl	8012894 <iprintf>
          goto icmperr;
 8010fe0:	e04b      	b.n	801107a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010fe8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010fea:	4619      	mov	r1, r3
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f7f8 fc95 	bl	800991c <pbuf_add_header>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d12b      	bne.n	8011050 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	685b      	ldr	r3, [r3, #4]
 8010ffc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010ffe:	69fb      	ldr	r3, [r7, #28]
 8011000:	681a      	ldr	r2, [r3, #0]
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011006:	4b20      	ldr	r3, [pc, #128]	@ (8011088 <icmp_input+0x1f0>)
 8011008:	691a      	ldr	r2, [r3, #16]
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801100e:	693b      	ldr	r3, [r7, #16]
 8011010:	2200      	movs	r2, #0
 8011012:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	2200      	movs	r2, #0
 8011018:	709a      	strb	r2, [r3, #2]
 801101a:	2200      	movs	r2, #0
 801101c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	22ff      	movs	r2, #255	@ 0xff
 8011022:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2200      	movs	r2, #0
 8011028:	729a      	strb	r2, [r3, #10]
 801102a:	2200      	movs	r2, #0
 801102c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	9302      	str	r3, [sp, #8]
 8011032:	2301      	movs	r3, #1
 8011034:	9301      	str	r3, [sp, #4]
 8011036:	2300      	movs	r3, #0
 8011038:	9300      	str	r3, [sp, #0]
 801103a:	23ff      	movs	r3, #255	@ 0xff
 801103c:	2200      	movs	r2, #0
 801103e:	69f9      	ldr	r1, [r7, #28]
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 fa75 	bl	8011530 <ip4_output_if>
 8011046:	4603      	mov	r3, r0
 8011048:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801104a:	e001      	b.n	8011050 <icmp_input+0x1b8>
      break;
 801104c:	bf00      	nop
 801104e:	e000      	b.n	8011052 <icmp_input+0x1ba>
      break;
 8011050:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f7f8 fcf8 	bl	8009a48 <pbuf_free>
  return;
 8011058:	e013      	b.n	8011082 <icmp_input+0x1ea>
    goto lenerr;
 801105a:	bf00      	nop
 801105c:	e002      	b.n	8011064 <icmp_input+0x1cc>
    goto lenerr;
 801105e:	bf00      	nop
 8011060:	e000      	b.n	8011064 <icmp_input+0x1cc>
        goto lenerr;
 8011062:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f7f8 fcef 	bl	8009a48 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801106a:	e00a      	b.n	8011082 <icmp_input+0x1ea>
        goto icmperr;
 801106c:	bf00      	nop
 801106e:	e004      	b.n	801107a <icmp_input+0x1e2>
        goto icmperr;
 8011070:	bf00      	nop
 8011072:	e002      	b.n	801107a <icmp_input+0x1e2>
          goto icmperr;
 8011074:	bf00      	nop
 8011076:	e000      	b.n	801107a <icmp_input+0x1e2>
          goto icmperr;
 8011078:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f7f8 fce4 	bl	8009a48 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011080:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011082:	3728      	adds	r7, #40	@ 0x28
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	2000566c 	.word	0x2000566c
 801108c:	20005680 	.word	0x20005680
 8011090:	080160ec 	.word	0x080160ec
 8011094:	08016124 	.word	0x08016124
 8011098:	0801615c 	.word	0x0801615c
 801109c:	08016184 	.word	0x08016184

080110a0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b082      	sub	sp, #8
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	460b      	mov	r3, r1
 80110aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80110ac:	78fb      	ldrb	r3, [r7, #3]
 80110ae:	461a      	mov	r2, r3
 80110b0:	2103      	movs	r1, #3
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f000 f814 	bl	80110e0 <icmp_send_response>
}
 80110b8:	bf00      	nop
 80110ba:	3708      	adds	r7, #8
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}

080110c0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	460b      	mov	r3, r1
 80110ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80110cc:	78fb      	ldrb	r3, [r7, #3]
 80110ce:	461a      	mov	r2, r3
 80110d0:	210b      	movs	r1, #11
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f000 f804 	bl	80110e0 <icmp_send_response>
}
 80110d8:	bf00      	nop
 80110da:	3708      	adds	r7, #8
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}

080110e0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b08c      	sub	sp, #48	@ 0x30
 80110e4:	af04      	add	r7, sp, #16
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	460b      	mov	r3, r1
 80110ea:	70fb      	strb	r3, [r7, #3]
 80110ec:	4613      	mov	r3, r2
 80110ee:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80110f0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80110f4:	2124      	movs	r1, #36	@ 0x24
 80110f6:	2022      	movs	r0, #34	@ 0x22
 80110f8:	f7f8 f9c2 	bl	8009480 <pbuf_alloc>
 80110fc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80110fe:	69fb      	ldr	r3, [r7, #28]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d04c      	beq.n	801119e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011104:	69fb      	ldr	r3, [r7, #28]
 8011106:	895b      	ldrh	r3, [r3, #10]
 8011108:	2b23      	cmp	r3, #35	@ 0x23
 801110a:	d806      	bhi.n	801111a <icmp_send_response+0x3a>
 801110c:	4b26      	ldr	r3, [pc, #152]	@ (80111a8 <icmp_send_response+0xc8>)
 801110e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8011112:	4926      	ldr	r1, [pc, #152]	@ (80111ac <icmp_send_response+0xcc>)
 8011114:	4826      	ldr	r0, [pc, #152]	@ (80111b0 <icmp_send_response+0xd0>)
 8011116:	f001 fbbd 	bl	8012894 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	685b      	ldr	r3, [r3, #4]
 801111e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011120:	69fb      	ldr	r3, [r7, #28]
 8011122:	685b      	ldr	r3, [r3, #4]
 8011124:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	78fa      	ldrb	r2, [r7, #3]
 801112a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	78ba      	ldrb	r2, [r7, #2]
 8011130:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	2200      	movs	r2, #0
 8011136:	711a      	strb	r2, [r3, #4]
 8011138:	2200      	movs	r2, #0
 801113a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801113c:	697b      	ldr	r3, [r7, #20]
 801113e:	2200      	movs	r2, #0
 8011140:	719a      	strb	r2, [r3, #6]
 8011142:	2200      	movs	r2, #0
 8011144:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011146:	69fb      	ldr	r3, [r7, #28]
 8011148:	685b      	ldr	r3, [r3, #4]
 801114a:	f103 0008 	add.w	r0, r3, #8
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	221c      	movs	r2, #28
 8011154:	4619      	mov	r1, r3
 8011156:	f001 fccc 	bl	8012af2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801115a:	69bb      	ldr	r3, [r7, #24]
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011160:	f107 030c 	add.w	r3, r7, #12
 8011164:	4618      	mov	r0, r3
 8011166:	f000 f825 	bl	80111b4 <ip4_route>
 801116a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d011      	beq.n	8011196 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	2200      	movs	r2, #0
 8011176:	709a      	strb	r2, [r3, #2]
 8011178:	2200      	movs	r2, #0
 801117a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801117c:	f107 020c 	add.w	r2, r7, #12
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	9302      	str	r3, [sp, #8]
 8011184:	2301      	movs	r3, #1
 8011186:	9301      	str	r3, [sp, #4]
 8011188:	2300      	movs	r3, #0
 801118a:	9300      	str	r3, [sp, #0]
 801118c:	23ff      	movs	r3, #255	@ 0xff
 801118e:	2100      	movs	r1, #0
 8011190:	69f8      	ldr	r0, [r7, #28]
 8011192:	f000 f9cd 	bl	8011530 <ip4_output_if>
  }
  pbuf_free(q);
 8011196:	69f8      	ldr	r0, [r7, #28]
 8011198:	f7f8 fc56 	bl	8009a48 <pbuf_free>
 801119c:	e000      	b.n	80111a0 <icmp_send_response+0xc0>
    return;
 801119e:	bf00      	nop
}
 80111a0:	3720      	adds	r7, #32
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	080160ec 	.word	0x080160ec
 80111ac:	080161b8 	.word	0x080161b8
 80111b0:	0801615c 	.word	0x0801615c

080111b4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80111b4:	b480      	push	{r7}
 80111b6:	b085      	sub	sp, #20
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80111bc:	4b33      	ldr	r3, [pc, #204]	@ (801128c <ip4_route+0xd8>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	60fb      	str	r3, [r7, #12]
 80111c2:	e036      	b.n	8011232 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80111ca:	f003 0301 	and.w	r3, r3, #1
 80111ce:	b2db      	uxtb	r3, r3
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d02b      	beq.n	801122c <ip4_route+0x78>
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80111da:	089b      	lsrs	r3, r3, #2
 80111dc:	f003 0301 	and.w	r3, r3, #1
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d022      	beq.n	801122c <ip4_route+0x78>
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	3304      	adds	r3, #4
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d01d      	beq.n	801122c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681a      	ldr	r2, [r3, #0]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	3304      	adds	r3, #4
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	405a      	eors	r2, r3
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	3308      	adds	r3, #8
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	4013      	ands	r3, r2
 8011204:	2b00      	cmp	r3, #0
 8011206:	d101      	bne.n	801120c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	e038      	b.n	801127e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011212:	f003 0302 	and.w	r3, r3, #2
 8011216:	2b00      	cmp	r3, #0
 8011218:	d108      	bne.n	801122c <ip4_route+0x78>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681a      	ldr	r2, [r3, #0]
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	330c      	adds	r3, #12
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	429a      	cmp	r2, r3
 8011226:	d101      	bne.n	801122c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	e028      	b.n	801127e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	60fb      	str	r3, [r7, #12]
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d1c5      	bne.n	80111c4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011238:	4b15      	ldr	r3, [pc, #84]	@ (8011290 <ip4_route+0xdc>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d01a      	beq.n	8011276 <ip4_route+0xc2>
 8011240:	4b13      	ldr	r3, [pc, #76]	@ (8011290 <ip4_route+0xdc>)
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011248:	f003 0301 	and.w	r3, r3, #1
 801124c:	2b00      	cmp	r3, #0
 801124e:	d012      	beq.n	8011276 <ip4_route+0xc2>
 8011250:	4b0f      	ldr	r3, [pc, #60]	@ (8011290 <ip4_route+0xdc>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011258:	f003 0304 	and.w	r3, r3, #4
 801125c:	2b00      	cmp	r3, #0
 801125e:	d00a      	beq.n	8011276 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011260:	4b0b      	ldr	r3, [pc, #44]	@ (8011290 <ip4_route+0xdc>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	3304      	adds	r3, #4
 8011266:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011268:	2b00      	cmp	r3, #0
 801126a:	d004      	beq.n	8011276 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	b2db      	uxtb	r3, r3
 8011272:	2b7f      	cmp	r3, #127	@ 0x7f
 8011274:	d101      	bne.n	801127a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011276:	2300      	movs	r3, #0
 8011278:	e001      	b.n	801127e <ip4_route+0xca>
  }

  return netif_default;
 801127a:	4b05      	ldr	r3, [pc, #20]	@ (8011290 <ip4_route+0xdc>)
 801127c:	681b      	ldr	r3, [r3, #0]
}
 801127e:	4618      	mov	r0, r3
 8011280:	3714      	adds	r7, #20
 8011282:	46bd      	mov	sp, r7
 8011284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011288:	4770      	bx	lr
 801128a:	bf00      	nop
 801128c:	20008990 	.word	0x20008990
 8011290:	20008994 	.word	0x20008994

08011294 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80112a2:	f003 0301 	and.w	r3, r3, #1
 80112a6:	b2db      	uxtb	r3, r3
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d016      	beq.n	80112da <ip4_input_accept+0x46>
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	3304      	adds	r3, #4
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d011      	beq.n	80112da <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80112b6:	4b0b      	ldr	r3, [pc, #44]	@ (80112e4 <ip4_input_accept+0x50>)
 80112b8:	695a      	ldr	r2, [r3, #20]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	3304      	adds	r3, #4
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d008      	beq.n	80112d6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80112c4:	4b07      	ldr	r3, [pc, #28]	@ (80112e4 <ip4_input_accept+0x50>)
 80112c6:	695b      	ldr	r3, [r3, #20]
 80112c8:	6879      	ldr	r1, [r7, #4]
 80112ca:	4618      	mov	r0, r3
 80112cc:	f000 fa08 	bl	80116e0 <ip4_addr_isbroadcast_u32>
 80112d0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d001      	beq.n	80112da <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80112d6:	2301      	movs	r3, #1
 80112d8:	e000      	b.n	80112dc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80112da:	2300      	movs	r3, #0
}
 80112dc:	4618      	mov	r0, r3
 80112de:	3708      	adds	r7, #8
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}
 80112e4:	2000566c 	.word	0x2000566c

080112e8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b086      	sub	sp, #24
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	685b      	ldr	r3, [r3, #4]
 80112f6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	091b      	lsrs	r3, r3, #4
 80112fe:	b2db      	uxtb	r3, r3
 8011300:	2b04      	cmp	r3, #4
 8011302:	d004      	beq.n	801130e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f7f8 fb9f 	bl	8009a48 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801130a:	2300      	movs	r3, #0
 801130c:	e107      	b.n	801151e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	f003 030f 	and.w	r3, r3, #15
 8011316:	b2db      	uxtb	r3, r3
 8011318:	009b      	lsls	r3, r3, #2
 801131a:	b2db      	uxtb	r3, r3
 801131c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	885b      	ldrh	r3, [r3, #2]
 8011322:	b29b      	uxth	r3, r3
 8011324:	4618      	mov	r0, r3
 8011326:	f7f7 f831 	bl	800838c <lwip_htons>
 801132a:	4603      	mov	r3, r0
 801132c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	891b      	ldrh	r3, [r3, #8]
 8011332:	89ba      	ldrh	r2, [r7, #12]
 8011334:	429a      	cmp	r2, r3
 8011336:	d204      	bcs.n	8011342 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011338:	89bb      	ldrh	r3, [r7, #12]
 801133a:	4619      	mov	r1, r3
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f7f8 f9fd 	bl	800973c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	895b      	ldrh	r3, [r3, #10]
 8011346:	89fa      	ldrh	r2, [r7, #14]
 8011348:	429a      	cmp	r2, r3
 801134a:	d807      	bhi.n	801135c <ip4_input+0x74>
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	891b      	ldrh	r3, [r3, #8]
 8011350:	89ba      	ldrh	r2, [r7, #12]
 8011352:	429a      	cmp	r2, r3
 8011354:	d802      	bhi.n	801135c <ip4_input+0x74>
 8011356:	89fb      	ldrh	r3, [r7, #14]
 8011358:	2b13      	cmp	r3, #19
 801135a:	d804      	bhi.n	8011366 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f7f8 fb73 	bl	8009a48 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011362:	2300      	movs	r3, #0
 8011364:	e0db      	b.n	801151e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	691b      	ldr	r3, [r3, #16]
 801136a:	4a6f      	ldr	r2, [pc, #444]	@ (8011528 <ip4_input+0x240>)
 801136c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	68db      	ldr	r3, [r3, #12]
 8011372:	4a6d      	ldr	r2, [pc, #436]	@ (8011528 <ip4_input+0x240>)
 8011374:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011376:	4b6c      	ldr	r3, [pc, #432]	@ (8011528 <ip4_input+0x240>)
 8011378:	695b      	ldr	r3, [r3, #20]
 801137a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801137e:	2be0      	cmp	r3, #224	@ 0xe0
 8011380:	d112      	bne.n	80113a8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011388:	f003 0301 	and.w	r3, r3, #1
 801138c:	b2db      	uxtb	r3, r3
 801138e:	2b00      	cmp	r3, #0
 8011390:	d007      	beq.n	80113a2 <ip4_input+0xba>
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	3304      	adds	r3, #4
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d002      	beq.n	80113a2 <ip4_input+0xba>
      netif = inp;
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	613b      	str	r3, [r7, #16]
 80113a0:	e02a      	b.n	80113f8 <ip4_input+0x110>
    } else {
      netif = NULL;
 80113a2:	2300      	movs	r3, #0
 80113a4:	613b      	str	r3, [r7, #16]
 80113a6:	e027      	b.n	80113f8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80113a8:	6838      	ldr	r0, [r7, #0]
 80113aa:	f7ff ff73 	bl	8011294 <ip4_input_accept>
 80113ae:	4603      	mov	r3, r0
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d002      	beq.n	80113ba <ip4_input+0xd2>
      netif = inp;
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	613b      	str	r3, [r7, #16]
 80113b8:	e01e      	b.n	80113f8 <ip4_input+0x110>
    } else {
      netif = NULL;
 80113ba:	2300      	movs	r3, #0
 80113bc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80113be:	4b5a      	ldr	r3, [pc, #360]	@ (8011528 <ip4_input+0x240>)
 80113c0:	695b      	ldr	r3, [r3, #20]
 80113c2:	b2db      	uxtb	r3, r3
 80113c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80113c6:	d017      	beq.n	80113f8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80113c8:	4b58      	ldr	r3, [pc, #352]	@ (801152c <ip4_input+0x244>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	613b      	str	r3, [r7, #16]
 80113ce:	e00e      	b.n	80113ee <ip4_input+0x106>
          if (netif == inp) {
 80113d0:	693a      	ldr	r2, [r7, #16]
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	429a      	cmp	r2, r3
 80113d6:	d006      	beq.n	80113e6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80113d8:	6938      	ldr	r0, [r7, #16]
 80113da:	f7ff ff5b 	bl	8011294 <ip4_input_accept>
 80113de:	4603      	mov	r3, r0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d108      	bne.n	80113f6 <ip4_input+0x10e>
 80113e4:	e000      	b.n	80113e8 <ip4_input+0x100>
            continue;
 80113e6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	613b      	str	r3, [r7, #16]
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d1ed      	bne.n	80113d0 <ip4_input+0xe8>
 80113f4:	e000      	b.n	80113f8 <ip4_input+0x110>
            break;
 80113f6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80113f8:	4b4b      	ldr	r3, [pc, #300]	@ (8011528 <ip4_input+0x240>)
 80113fa:	691b      	ldr	r3, [r3, #16]
 80113fc:	6839      	ldr	r1, [r7, #0]
 80113fe:	4618      	mov	r0, r3
 8011400:	f000 f96e 	bl	80116e0 <ip4_addr_isbroadcast_u32>
 8011404:	4603      	mov	r3, r0
 8011406:	2b00      	cmp	r3, #0
 8011408:	d105      	bne.n	8011416 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801140a:	4b47      	ldr	r3, [pc, #284]	@ (8011528 <ip4_input+0x240>)
 801140c:	691b      	ldr	r3, [r3, #16]
 801140e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011412:	2be0      	cmp	r3, #224	@ 0xe0
 8011414:	d104      	bne.n	8011420 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f7f8 fb16 	bl	8009a48 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801141c:	2300      	movs	r3, #0
 801141e:	e07e      	b.n	801151e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011420:	693b      	ldr	r3, [r7, #16]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d104      	bne.n	8011430 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f7f8 fb0e 	bl	8009a48 <pbuf_free>
    return ERR_OK;
 801142c:	2300      	movs	r3, #0
 801142e:	e076      	b.n	801151e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	88db      	ldrh	r3, [r3, #6]
 8011434:	b29b      	uxth	r3, r3
 8011436:	461a      	mov	r2, r3
 8011438:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801143c:	4013      	ands	r3, r2
 801143e:	2b00      	cmp	r3, #0
 8011440:	d00b      	beq.n	801145a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f000 fc92 	bl	8011d6c <ip4_reass>
 8011448:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d101      	bne.n	8011454 <ip4_input+0x16c>
      return ERR_OK;
 8011450:	2300      	movs	r3, #0
 8011452:	e064      	b.n	801151e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801145a:	4a33      	ldr	r2, [pc, #204]	@ (8011528 <ip4_input+0x240>)
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011460:	4a31      	ldr	r2, [pc, #196]	@ (8011528 <ip4_input+0x240>)
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011466:	4a30      	ldr	r2, [pc, #192]	@ (8011528 <ip4_input+0x240>)
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	f003 030f 	and.w	r3, r3, #15
 8011474:	b2db      	uxtb	r3, r3
 8011476:	009b      	lsls	r3, r3, #2
 8011478:	b2db      	uxtb	r3, r3
 801147a:	461a      	mov	r2, r3
 801147c:	4b2a      	ldr	r3, [pc, #168]	@ (8011528 <ip4_input+0x240>)
 801147e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011480:	89fb      	ldrh	r3, [r7, #14]
 8011482:	4619      	mov	r1, r3
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f7f8 fa59 	bl	800993c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	7a5b      	ldrb	r3, [r3, #9]
 801148e:	2b11      	cmp	r3, #17
 8011490:	d006      	beq.n	80114a0 <ip4_input+0x1b8>
 8011492:	2b11      	cmp	r3, #17
 8011494:	dc13      	bgt.n	80114be <ip4_input+0x1d6>
 8011496:	2b01      	cmp	r3, #1
 8011498:	d00c      	beq.n	80114b4 <ip4_input+0x1cc>
 801149a:	2b06      	cmp	r3, #6
 801149c:	d005      	beq.n	80114aa <ip4_input+0x1c2>
 801149e:	e00e      	b.n	80114be <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80114a0:	6839      	ldr	r1, [r7, #0]
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f7fe f950 	bl	800f748 <udp_input>
        break;
 80114a8:	e026      	b.n	80114f8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80114aa:	6839      	ldr	r1, [r7, #0]
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f7fa f997 	bl	800b7e0 <tcp_input>
        break;
 80114b2:	e021      	b.n	80114f8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80114b4:	6839      	ldr	r1, [r7, #0]
 80114b6:	6878      	ldr	r0, [r7, #4]
 80114b8:	f7ff fcee 	bl	8010e98 <icmp_input>
        break;
 80114bc:	e01c      	b.n	80114f8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80114be:	4b1a      	ldr	r3, [pc, #104]	@ (8011528 <ip4_input+0x240>)
 80114c0:	695b      	ldr	r3, [r3, #20]
 80114c2:	6939      	ldr	r1, [r7, #16]
 80114c4:	4618      	mov	r0, r3
 80114c6:	f000 f90b 	bl	80116e0 <ip4_addr_isbroadcast_u32>
 80114ca:	4603      	mov	r3, r0
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d10f      	bne.n	80114f0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80114d0:	4b15      	ldr	r3, [pc, #84]	@ (8011528 <ip4_input+0x240>)
 80114d2:	695b      	ldr	r3, [r3, #20]
 80114d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80114d8:	2be0      	cmp	r3, #224	@ 0xe0
 80114da:	d009      	beq.n	80114f0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80114dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80114e0:	4619      	mov	r1, r3
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f7f8 fa9d 	bl	8009a22 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80114e8:	2102      	movs	r1, #2
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	f7ff fdd8 	bl	80110a0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f7f8 faa9 	bl	8009a48 <pbuf_free>
        break;
 80114f6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80114f8:	4b0b      	ldr	r3, [pc, #44]	@ (8011528 <ip4_input+0x240>)
 80114fa:	2200      	movs	r2, #0
 80114fc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80114fe:	4b0a      	ldr	r3, [pc, #40]	@ (8011528 <ip4_input+0x240>)
 8011500:	2200      	movs	r2, #0
 8011502:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011504:	4b08      	ldr	r3, [pc, #32]	@ (8011528 <ip4_input+0x240>)
 8011506:	2200      	movs	r2, #0
 8011508:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801150a:	4b07      	ldr	r3, [pc, #28]	@ (8011528 <ip4_input+0x240>)
 801150c:	2200      	movs	r2, #0
 801150e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011510:	4b05      	ldr	r3, [pc, #20]	@ (8011528 <ip4_input+0x240>)
 8011512:	2200      	movs	r2, #0
 8011514:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011516:	4b04      	ldr	r3, [pc, #16]	@ (8011528 <ip4_input+0x240>)
 8011518:	2200      	movs	r2, #0
 801151a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801151c:	2300      	movs	r3, #0
}
 801151e:	4618      	mov	r0, r3
 8011520:	3718      	adds	r7, #24
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
 8011526:	bf00      	nop
 8011528:	2000566c 	.word	0x2000566c
 801152c:	20008990 	.word	0x20008990

08011530 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b08a      	sub	sp, #40	@ 0x28
 8011534:	af04      	add	r7, sp, #16
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	60b9      	str	r1, [r7, #8]
 801153a:	607a      	str	r2, [r7, #4]
 801153c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d009      	beq.n	801155c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d003      	beq.n	8011556 <ip4_output_if+0x26>
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d102      	bne.n	801155c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011558:	3304      	adds	r3, #4
 801155a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801155c:	78fa      	ldrb	r2, [r7, #3]
 801155e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011560:	9302      	str	r3, [sp, #8]
 8011562:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011566:	9301      	str	r3, [sp, #4]
 8011568:	f897 3020 	ldrb.w	r3, [r7, #32]
 801156c:	9300      	str	r3, [sp, #0]
 801156e:	4613      	mov	r3, r2
 8011570:	687a      	ldr	r2, [r7, #4]
 8011572:	6979      	ldr	r1, [r7, #20]
 8011574:	68f8      	ldr	r0, [r7, #12]
 8011576:	f000 f805 	bl	8011584 <ip4_output_if_src>
 801157a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801157c:	4618      	mov	r0, r3
 801157e:	3718      	adds	r7, #24
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}

08011584 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b088      	sub	sp, #32
 8011588:	af00      	add	r7, sp, #0
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	60b9      	str	r1, [r7, #8]
 801158e:	607a      	str	r2, [r7, #4]
 8011590:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	7b9b      	ldrb	r3, [r3, #14]
 8011596:	2b01      	cmp	r3, #1
 8011598:	d006      	beq.n	80115a8 <ip4_output_if_src+0x24>
 801159a:	4b4b      	ldr	r3, [pc, #300]	@ (80116c8 <ip4_output_if_src+0x144>)
 801159c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80115a0:	494a      	ldr	r1, [pc, #296]	@ (80116cc <ip4_output_if_src+0x148>)
 80115a2:	484b      	ldr	r0, [pc, #300]	@ (80116d0 <ip4_output_if_src+0x14c>)
 80115a4:	f001 f976 	bl	8012894 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d060      	beq.n	8011670 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80115ae:	2314      	movs	r3, #20
 80115b0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80115b2:	2114      	movs	r1, #20
 80115b4:	68f8      	ldr	r0, [r7, #12]
 80115b6:	f7f8 f9b1 	bl	800991c <pbuf_add_header>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d002      	beq.n	80115c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80115c0:	f06f 0301 	mvn.w	r3, #1
 80115c4:	e07c      	b.n	80116c0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	685b      	ldr	r3, [r3, #4]
 80115ca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	895b      	ldrh	r3, [r3, #10]
 80115d0:	2b13      	cmp	r3, #19
 80115d2:	d806      	bhi.n	80115e2 <ip4_output_if_src+0x5e>
 80115d4:	4b3c      	ldr	r3, [pc, #240]	@ (80116c8 <ip4_output_if_src+0x144>)
 80115d6:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80115da:	493e      	ldr	r1, [pc, #248]	@ (80116d4 <ip4_output_if_src+0x150>)
 80115dc:	483c      	ldr	r0, [pc, #240]	@ (80116d0 <ip4_output_if_src+0x14c>)
 80115de:	f001 f959 	bl	8012894 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	78fa      	ldrb	r2, [r7, #3]
 80115e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80115e8:	69fb      	ldr	r3, [r7, #28]
 80115ea:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80115ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681a      	ldr	r2, [r3, #0]
 80115f4:	69fb      	ldr	r3, [r7, #28]
 80115f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80115f8:	8b7b      	ldrh	r3, [r7, #26]
 80115fa:	089b      	lsrs	r3, r3, #2
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	b2db      	uxtb	r3, r3
 8011600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011604:	b2da      	uxtb	r2, r3
 8011606:	69fb      	ldr	r3, [r7, #28]
 8011608:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801160a:	69fb      	ldr	r3, [r7, #28]
 801160c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011610:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	891b      	ldrh	r3, [r3, #8]
 8011616:	4618      	mov	r0, r3
 8011618:	f7f6 feb8 	bl	800838c <lwip_htons>
 801161c:	4603      	mov	r3, r0
 801161e:	461a      	mov	r2, r3
 8011620:	69fb      	ldr	r3, [r7, #28]
 8011622:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	2200      	movs	r2, #0
 8011628:	719a      	strb	r2, [r3, #6]
 801162a:	2200      	movs	r2, #0
 801162c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801162e:	4b2a      	ldr	r3, [pc, #168]	@ (80116d8 <ip4_output_if_src+0x154>)
 8011630:	881b      	ldrh	r3, [r3, #0]
 8011632:	4618      	mov	r0, r3
 8011634:	f7f6 feaa 	bl	800838c <lwip_htons>
 8011638:	4603      	mov	r3, r0
 801163a:	461a      	mov	r2, r3
 801163c:	69fb      	ldr	r3, [r7, #28]
 801163e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011640:	4b25      	ldr	r3, [pc, #148]	@ (80116d8 <ip4_output_if_src+0x154>)
 8011642:	881b      	ldrh	r3, [r3, #0]
 8011644:	3301      	adds	r3, #1
 8011646:	b29a      	uxth	r2, r3
 8011648:	4b23      	ldr	r3, [pc, #140]	@ (80116d8 <ip4_output_if_src+0x154>)
 801164a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d104      	bne.n	801165c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011652:	4b22      	ldr	r3, [pc, #136]	@ (80116dc <ip4_output_if_src+0x158>)
 8011654:	681a      	ldr	r2, [r3, #0]
 8011656:	69fb      	ldr	r3, [r7, #28]
 8011658:	60da      	str	r2, [r3, #12]
 801165a:	e003      	b.n	8011664 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	681a      	ldr	r2, [r3, #0]
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	2200      	movs	r2, #0
 8011668:	729a      	strb	r2, [r3, #10]
 801166a:	2200      	movs	r2, #0
 801166c:	72da      	strb	r2, [r3, #11]
 801166e:	e00f      	b.n	8011690 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	895b      	ldrh	r3, [r3, #10]
 8011674:	2b13      	cmp	r3, #19
 8011676:	d802      	bhi.n	801167e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011678:	f06f 0301 	mvn.w	r3, #1
 801167c:	e020      	b.n	80116c0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011684:	69fb      	ldr	r3, [r7, #28]
 8011686:	691b      	ldr	r3, [r3, #16]
 8011688:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801168a:	f107 0314 	add.w	r3, r7, #20
 801168e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011692:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011694:	2b00      	cmp	r3, #0
 8011696:	d00c      	beq.n	80116b2 <ip4_output_if_src+0x12e>
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	891a      	ldrh	r2, [r3, #8]
 801169c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801169e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d906      	bls.n	80116b2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80116a4:	687a      	ldr	r2, [r7, #4]
 80116a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80116a8:	68f8      	ldr	r0, [r7, #12]
 80116aa:	f000 fd53 	bl	8012154 <ip4_frag>
 80116ae:	4603      	mov	r3, r0
 80116b0:	e006      	b.n	80116c0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80116b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116b4:	695b      	ldr	r3, [r3, #20]
 80116b6:	687a      	ldr	r2, [r7, #4]
 80116b8:	68f9      	ldr	r1, [r7, #12]
 80116ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80116bc:	4798      	blx	r3
 80116be:	4603      	mov	r3, r0
}
 80116c0:	4618      	mov	r0, r3
 80116c2:	3720      	adds	r7, #32
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}
 80116c8:	080161e4 	.word	0x080161e4
 80116cc:	08016218 	.word	0x08016218
 80116d0:	08016224 	.word	0x08016224
 80116d4:	0801624c 	.word	0x0801624c
 80116d8:	20008aee 	.word	0x20008aee
 80116dc:	0801662c 	.word	0x0801662c

080116e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80116e0:	b480      	push	{r7}
 80116e2:	b085      	sub	sp, #20
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
 80116e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116f4:	d002      	beq.n	80116fc <ip4_addr_isbroadcast_u32+0x1c>
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d101      	bne.n	8011700 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80116fc:	2301      	movs	r3, #1
 80116fe:	e02a      	b.n	8011756 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011706:	f003 0302 	and.w	r3, r3, #2
 801170a:	2b00      	cmp	r3, #0
 801170c:	d101      	bne.n	8011712 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801170e:	2300      	movs	r3, #0
 8011710:	e021      	b.n	8011756 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	3304      	adds	r3, #4
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	687a      	ldr	r2, [r7, #4]
 801171a:	429a      	cmp	r2, r3
 801171c:	d101      	bne.n	8011722 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801171e:	2300      	movs	r3, #0
 8011720:	e019      	b.n	8011756 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011722:	68fa      	ldr	r2, [r7, #12]
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	3304      	adds	r3, #4
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	405a      	eors	r2, r3
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	3308      	adds	r3, #8
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	4013      	ands	r3, r2
 8011734:	2b00      	cmp	r3, #0
 8011736:	d10d      	bne.n	8011754 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	3308      	adds	r3, #8
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	43da      	mvns	r2, r3
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	3308      	adds	r3, #8
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801174c:	429a      	cmp	r2, r3
 801174e:	d101      	bne.n	8011754 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011750:	2301      	movs	r3, #1
 8011752:	e000      	b.n	8011756 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011754:	2300      	movs	r3, #0
  }
}
 8011756:	4618      	mov	r0, r3
 8011758:	3714      	adds	r7, #20
 801175a:	46bd      	mov	sp, r7
 801175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011760:	4770      	bx	lr
	...

08011764 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b084      	sub	sp, #16
 8011768:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801176a:	2300      	movs	r3, #0
 801176c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801176e:	4b12      	ldr	r3, [pc, #72]	@ (80117b8 <ip_reass_tmr+0x54>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011774:	e018      	b.n	80117a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	7fdb      	ldrb	r3, [r3, #31]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d00b      	beq.n	8011796 <ip_reass_tmr+0x32>
      r->timer--;
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	7fdb      	ldrb	r3, [r3, #31]
 8011782:	3b01      	subs	r3, #1
 8011784:	b2da      	uxtb	r2, r3
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	60fb      	str	r3, [r7, #12]
 8011794:	e008      	b.n	80117a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80117a0:	68b9      	ldr	r1, [r7, #8]
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f000 f80a 	bl	80117bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d1e3      	bne.n	8011776 <ip_reass_tmr+0x12>
    }
  }
}
 80117ae:	bf00      	nop
 80117b0:	bf00      	nop
 80117b2:	3710      	adds	r7, #16
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}
 80117b8:	20008af0 	.word	0x20008af0

080117bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b088      	sub	sp, #32
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
 80117c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80117c6:	2300      	movs	r3, #0
 80117c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80117ca:	683a      	ldr	r2, [r7, #0]
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d105      	bne.n	80117de <ip_reass_free_complete_datagram+0x22>
 80117d2:	4b45      	ldr	r3, [pc, #276]	@ (80118e8 <ip_reass_free_complete_datagram+0x12c>)
 80117d4:	22ab      	movs	r2, #171	@ 0xab
 80117d6:	4945      	ldr	r1, [pc, #276]	@ (80118ec <ip_reass_free_complete_datagram+0x130>)
 80117d8:	4845      	ldr	r0, [pc, #276]	@ (80118f0 <ip_reass_free_complete_datagram+0x134>)
 80117da:	f001 f85b 	bl	8012894 <iprintf>
  if (prev != NULL) {
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d00a      	beq.n	80117fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	687a      	ldr	r2, [r7, #4]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d005      	beq.n	80117fa <ip_reass_free_complete_datagram+0x3e>
 80117ee:	4b3e      	ldr	r3, [pc, #248]	@ (80118e8 <ip_reass_free_complete_datagram+0x12c>)
 80117f0:	22ad      	movs	r2, #173	@ 0xad
 80117f2:	4940      	ldr	r1, [pc, #256]	@ (80118f4 <ip_reass_free_complete_datagram+0x138>)
 80117f4:	483e      	ldr	r0, [pc, #248]	@ (80118f0 <ip_reass_free_complete_datagram+0x134>)
 80117f6:	f001 f84d 	bl	8012894 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	685b      	ldr	r3, [r3, #4]
 80117fe:	685b      	ldr	r3, [r3, #4]
 8011800:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	889b      	ldrh	r3, [r3, #4]
 8011806:	b29b      	uxth	r3, r3
 8011808:	2b00      	cmp	r3, #0
 801180a:	d12a      	bne.n	8011862 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	681a      	ldr	r2, [r3, #0]
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801181a:	69bb      	ldr	r3, [r7, #24]
 801181c:	6858      	ldr	r0, [r3, #4]
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	3308      	adds	r3, #8
 8011822:	2214      	movs	r2, #20
 8011824:	4619      	mov	r1, r3
 8011826:	f001 f964 	bl	8012af2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801182a:	2101      	movs	r1, #1
 801182c:	69b8      	ldr	r0, [r7, #24]
 801182e:	f7ff fc47 	bl	80110c0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011832:	69b8      	ldr	r0, [r7, #24]
 8011834:	f7f8 f990 	bl	8009b58 <pbuf_clen>
 8011838:	4603      	mov	r3, r0
 801183a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801183c:	8bfa      	ldrh	r2, [r7, #30]
 801183e:	8a7b      	ldrh	r3, [r7, #18]
 8011840:	4413      	add	r3, r2
 8011842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011846:	db05      	blt.n	8011854 <ip_reass_free_complete_datagram+0x98>
 8011848:	4b27      	ldr	r3, [pc, #156]	@ (80118e8 <ip_reass_free_complete_datagram+0x12c>)
 801184a:	22bc      	movs	r2, #188	@ 0xbc
 801184c:	492a      	ldr	r1, [pc, #168]	@ (80118f8 <ip_reass_free_complete_datagram+0x13c>)
 801184e:	4828      	ldr	r0, [pc, #160]	@ (80118f0 <ip_reass_free_complete_datagram+0x134>)
 8011850:	f001 f820 	bl	8012894 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011854:	8bfa      	ldrh	r2, [r7, #30]
 8011856:	8a7b      	ldrh	r3, [r7, #18]
 8011858:	4413      	add	r3, r2
 801185a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801185c:	69b8      	ldr	r0, [r7, #24]
 801185e:	f7f8 f8f3 	bl	8009a48 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011868:	e01f      	b.n	80118aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801186a:	69bb      	ldr	r3, [r7, #24]
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011870:	69bb      	ldr	r3, [r7, #24]
 8011872:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801187a:	68f8      	ldr	r0, [r7, #12]
 801187c:	f7f8 f96c 	bl	8009b58 <pbuf_clen>
 8011880:	4603      	mov	r3, r0
 8011882:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011884:	8bfa      	ldrh	r2, [r7, #30]
 8011886:	8a7b      	ldrh	r3, [r7, #18]
 8011888:	4413      	add	r3, r2
 801188a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801188e:	db05      	blt.n	801189c <ip_reass_free_complete_datagram+0xe0>
 8011890:	4b15      	ldr	r3, [pc, #84]	@ (80118e8 <ip_reass_free_complete_datagram+0x12c>)
 8011892:	22cc      	movs	r2, #204	@ 0xcc
 8011894:	4918      	ldr	r1, [pc, #96]	@ (80118f8 <ip_reass_free_complete_datagram+0x13c>)
 8011896:	4816      	ldr	r0, [pc, #88]	@ (80118f0 <ip_reass_free_complete_datagram+0x134>)
 8011898:	f000 fffc 	bl	8012894 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801189c:	8bfa      	ldrh	r2, [r7, #30]
 801189e:	8a7b      	ldrh	r3, [r7, #18]
 80118a0:	4413      	add	r3, r2
 80118a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80118a4:	68f8      	ldr	r0, [r7, #12]
 80118a6:	f7f8 f8cf 	bl	8009a48 <pbuf_free>
  while (p != NULL) {
 80118aa:	69bb      	ldr	r3, [r7, #24]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d1dc      	bne.n	801186a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80118b0:	6839      	ldr	r1, [r7, #0]
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f000 f8c2 	bl	8011a3c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80118b8:	4b10      	ldr	r3, [pc, #64]	@ (80118fc <ip_reass_free_complete_datagram+0x140>)
 80118ba:	881b      	ldrh	r3, [r3, #0]
 80118bc:	8bfa      	ldrh	r2, [r7, #30]
 80118be:	429a      	cmp	r2, r3
 80118c0:	d905      	bls.n	80118ce <ip_reass_free_complete_datagram+0x112>
 80118c2:	4b09      	ldr	r3, [pc, #36]	@ (80118e8 <ip_reass_free_complete_datagram+0x12c>)
 80118c4:	22d2      	movs	r2, #210	@ 0xd2
 80118c6:	490e      	ldr	r1, [pc, #56]	@ (8011900 <ip_reass_free_complete_datagram+0x144>)
 80118c8:	4809      	ldr	r0, [pc, #36]	@ (80118f0 <ip_reass_free_complete_datagram+0x134>)
 80118ca:	f000 ffe3 	bl	8012894 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80118ce:	4b0b      	ldr	r3, [pc, #44]	@ (80118fc <ip_reass_free_complete_datagram+0x140>)
 80118d0:	881a      	ldrh	r2, [r3, #0]
 80118d2:	8bfb      	ldrh	r3, [r7, #30]
 80118d4:	1ad3      	subs	r3, r2, r3
 80118d6:	b29a      	uxth	r2, r3
 80118d8:	4b08      	ldr	r3, [pc, #32]	@ (80118fc <ip_reass_free_complete_datagram+0x140>)
 80118da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80118dc:	8bfb      	ldrh	r3, [r7, #30]
}
 80118de:	4618      	mov	r0, r3
 80118e0:	3720      	adds	r7, #32
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}
 80118e6:	bf00      	nop
 80118e8:	0801627c 	.word	0x0801627c
 80118ec:	080162b8 	.word	0x080162b8
 80118f0:	080162c4 	.word	0x080162c4
 80118f4:	080162ec 	.word	0x080162ec
 80118f8:	08016300 	.word	0x08016300
 80118fc:	20008af4 	.word	0x20008af4
 8011900:	08016320 	.word	0x08016320

08011904 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b08a      	sub	sp, #40	@ 0x28
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801190e:	2300      	movs	r3, #0
 8011910:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011912:	2300      	movs	r3, #0
 8011914:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011916:	2300      	movs	r3, #0
 8011918:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801191a:	2300      	movs	r3, #0
 801191c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801191e:	2300      	movs	r3, #0
 8011920:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011922:	4b28      	ldr	r3, [pc, #160]	@ (80119c4 <ip_reass_remove_oldest_datagram+0xc0>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8011928:	e030      	b.n	801198c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801192c:	695a      	ldr	r2, [r3, #20]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	68db      	ldr	r3, [r3, #12]
 8011932:	429a      	cmp	r2, r3
 8011934:	d10c      	bne.n	8011950 <ip_reass_remove_oldest_datagram+0x4c>
 8011936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011938:	699a      	ldr	r2, [r3, #24]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	691b      	ldr	r3, [r3, #16]
 801193e:	429a      	cmp	r2, r3
 8011940:	d106      	bne.n	8011950 <ip_reass_remove_oldest_datagram+0x4c>
 8011942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011944:	899a      	ldrh	r2, [r3, #12]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	889b      	ldrh	r3, [r3, #4]
 801194a:	b29b      	uxth	r3, r3
 801194c:	429a      	cmp	r2, r3
 801194e:	d014      	beq.n	801197a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011950:	693b      	ldr	r3, [r7, #16]
 8011952:	3301      	adds	r3, #1
 8011954:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011956:	6a3b      	ldr	r3, [r7, #32]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d104      	bne.n	8011966 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801195c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801195e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011960:	69fb      	ldr	r3, [r7, #28]
 8011962:	61bb      	str	r3, [r7, #24]
 8011964:	e009      	b.n	801197a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011968:	7fda      	ldrb	r2, [r3, #31]
 801196a:	6a3b      	ldr	r3, [r7, #32]
 801196c:	7fdb      	ldrb	r3, [r3, #31]
 801196e:	429a      	cmp	r2, r3
 8011970:	d803      	bhi.n	801197a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011974:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011976:	69fb      	ldr	r3, [r7, #28]
 8011978:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d001      	beq.n	8011986 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011984:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801198e:	2b00      	cmp	r3, #0
 8011990:	d1cb      	bne.n	801192a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011992:	6a3b      	ldr	r3, [r7, #32]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d008      	beq.n	80119aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011998:	69b9      	ldr	r1, [r7, #24]
 801199a:	6a38      	ldr	r0, [r7, #32]
 801199c:	f7ff ff0e 	bl	80117bc <ip_reass_free_complete_datagram>
 80119a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80119a2:	697a      	ldr	r2, [r7, #20]
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	4413      	add	r3, r2
 80119a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80119aa:	697a      	ldr	r2, [r7, #20]
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	da02      	bge.n	80119b8 <ip_reass_remove_oldest_datagram+0xb4>
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	2b01      	cmp	r3, #1
 80119b6:	dcac      	bgt.n	8011912 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80119b8:	697b      	ldr	r3, [r7, #20]
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3728      	adds	r7, #40	@ 0x28
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop
 80119c4:	20008af0 	.word	0x20008af0

080119c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
 80119d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80119d2:	2004      	movs	r0, #4
 80119d4:	f7f7 f952 	bl	8008c7c <memp_malloc>
 80119d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d110      	bne.n	8011a02 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80119e0:	6839      	ldr	r1, [r7, #0]
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f7ff ff8e 	bl	8011904 <ip_reass_remove_oldest_datagram>
 80119e8:	4602      	mov	r2, r0
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	4293      	cmp	r3, r2
 80119ee:	dc03      	bgt.n	80119f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80119f0:	2004      	movs	r0, #4
 80119f2:	f7f7 f943 	bl	8008c7c <memp_malloc>
 80119f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d101      	bne.n	8011a02 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80119fe:	2300      	movs	r3, #0
 8011a00:	e016      	b.n	8011a30 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011a02:	2220      	movs	r2, #32
 8011a04:	2100      	movs	r1, #0
 8011a06:	68f8      	ldr	r0, [r7, #12]
 8011a08:	f000 ffe5 	bl	80129d6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	220f      	movs	r2, #15
 8011a10:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011a12:	4b09      	ldr	r3, [pc, #36]	@ (8011a38 <ip_reass_enqueue_new_datagram+0x70>)
 8011a14:	681a      	ldr	r2, [r3, #0]
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011a1a:	4a07      	ldr	r2, [pc, #28]	@ (8011a38 <ip_reass_enqueue_new_datagram+0x70>)
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	3308      	adds	r3, #8
 8011a24:	2214      	movs	r2, #20
 8011a26:	6879      	ldr	r1, [r7, #4]
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f001 f862 	bl	8012af2 <memcpy>
  return ipr;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	3710      	adds	r7, #16
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}
 8011a38:	20008af0 	.word	0x20008af0

08011a3c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011a46:	4b10      	ldr	r3, [pc, #64]	@ (8011a88 <ip_reass_dequeue_datagram+0x4c>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	687a      	ldr	r2, [r7, #4]
 8011a4c:	429a      	cmp	r2, r3
 8011a4e:	d104      	bne.n	8011a5a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	4a0c      	ldr	r2, [pc, #48]	@ (8011a88 <ip_reass_dequeue_datagram+0x4c>)
 8011a56:	6013      	str	r3, [r2, #0]
 8011a58:	e00d      	b.n	8011a76 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d106      	bne.n	8011a6e <ip_reass_dequeue_datagram+0x32>
 8011a60:	4b0a      	ldr	r3, [pc, #40]	@ (8011a8c <ip_reass_dequeue_datagram+0x50>)
 8011a62:	f240 1245 	movw	r2, #325	@ 0x145
 8011a66:	490a      	ldr	r1, [pc, #40]	@ (8011a90 <ip_reass_dequeue_datagram+0x54>)
 8011a68:	480a      	ldr	r0, [pc, #40]	@ (8011a94 <ip_reass_dequeue_datagram+0x58>)
 8011a6a:	f000 ff13 	bl	8012894 <iprintf>
    prev->next = ipr->next;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681a      	ldr	r2, [r3, #0]
 8011a72:	683b      	ldr	r3, [r7, #0]
 8011a74:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011a76:	6879      	ldr	r1, [r7, #4]
 8011a78:	2004      	movs	r0, #4
 8011a7a:	f7f7 f96f 	bl	8008d5c <memp_free>
}
 8011a7e:	bf00      	nop
 8011a80:	3708      	adds	r7, #8
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	20008af0 	.word	0x20008af0
 8011a8c:	0801627c 	.word	0x0801627c
 8011a90:	08016344 	.word	0x08016344
 8011a94:	080162c4 	.word	0x080162c4

08011a98 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b08c      	sub	sp, #48	@ 0x30
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	60f8      	str	r0, [r7, #12]
 8011aa0:	60b9      	str	r1, [r7, #8]
 8011aa2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	685b      	ldr	r3, [r3, #4]
 8011ab0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011ab2:	69fb      	ldr	r3, [r7, #28]
 8011ab4:	885b      	ldrh	r3, [r3, #2]
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7f6 fc67 	bl	800838c <lwip_htons>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011ac2:	69fb      	ldr	r3, [r7, #28]
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	f003 030f 	and.w	r3, r3, #15
 8011aca:	b2db      	uxtb	r3, r3
 8011acc:	009b      	lsls	r3, r3, #2
 8011ace:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011ad0:	7e7b      	ldrb	r3, [r7, #25]
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	8b7a      	ldrh	r2, [r7, #26]
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d202      	bcs.n	8011ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011ada:	f04f 33ff 	mov.w	r3, #4294967295
 8011ade:	e135      	b.n	8011d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011ae0:	7e7b      	ldrb	r3, [r7, #25]
 8011ae2:	b29b      	uxth	r3, r3
 8011ae4:	8b7a      	ldrh	r2, [r7, #26]
 8011ae6:	1ad3      	subs	r3, r2, r3
 8011ae8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011aea:	69fb      	ldr	r3, [r7, #28]
 8011aec:	88db      	ldrh	r3, [r3, #6]
 8011aee:	b29b      	uxth	r3, r3
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7f6 fc4b 	bl	800838c <lwip_htons>
 8011af6:	4603      	mov	r3, r0
 8011af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	00db      	lsls	r3, r3, #3
 8011b00:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	685b      	ldr	r3, [r3, #4]
 8011b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8011b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	701a      	strb	r2, [r3, #0]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	705a      	strb	r2, [r3, #1]
 8011b12:	2200      	movs	r2, #0
 8011b14:	709a      	strb	r2, [r3, #2]
 8011b16:	2200      	movs	r2, #0
 8011b18:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b1c:	8afa      	ldrh	r2, [r7, #22]
 8011b1e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011b20:	8afa      	ldrh	r2, [r7, #22]
 8011b22:	8b7b      	ldrh	r3, [r7, #26]
 8011b24:	4413      	add	r3, r2
 8011b26:	b29a      	uxth	r2, r3
 8011b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b2a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b2e:	88db      	ldrh	r3, [r3, #6]
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	8afa      	ldrh	r2, [r7, #22]
 8011b34:	429a      	cmp	r2, r3
 8011b36:	d902      	bls.n	8011b3e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011b38:	f04f 33ff 	mov.w	r3, #4294967295
 8011b3c:	e106      	b.n	8011d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b44:	e068      	b.n	8011c18 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b48:	685b      	ldr	r3, [r3, #4]
 8011b4a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b4e:	889b      	ldrh	r3, [r3, #4]
 8011b50:	b29a      	uxth	r2, r3
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	889b      	ldrh	r3, [r3, #4]
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d235      	bcs.n	8011bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b60:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d020      	beq.n	8011baa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b6a:	889b      	ldrh	r3, [r3, #4]
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b70:	88db      	ldrh	r3, [r3, #6]
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d307      	bcc.n	8011b88 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b7a:	88db      	ldrh	r3, [r3, #6]
 8011b7c:	b29a      	uxth	r2, r3
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	889b      	ldrh	r3, [r3, #4]
 8011b82:	b29b      	uxth	r3, r3
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d902      	bls.n	8011b8e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011b88:	f04f 33ff 	mov.w	r3, #4294967295
 8011b8c:	e0de      	b.n	8011d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b90:	68ba      	ldr	r2, [r7, #8]
 8011b92:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b96:	88db      	ldrh	r3, [r3, #6]
 8011b98:	b29a      	uxth	r2, r3
 8011b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b9c:	889b      	ldrh	r3, [r3, #4]
 8011b9e:	b29b      	uxth	r3, r3
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d03d      	beq.n	8011c20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011ba8:	e03a      	b.n	8011c20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bac:	88db      	ldrh	r3, [r3, #6]
 8011bae:	b29a      	uxth	r2, r3
 8011bb0:	693b      	ldr	r3, [r7, #16]
 8011bb2:	889b      	ldrh	r3, [r3, #4]
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	d902      	bls.n	8011bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011bba:	f04f 33ff 	mov.w	r3, #4294967295
 8011bbe:	e0c5      	b.n	8011d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	68ba      	ldr	r2, [r7, #8]
 8011bc4:	605a      	str	r2, [r3, #4]
      break;
 8011bc6:	e02b      	b.n	8011c20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bca:	889b      	ldrh	r3, [r3, #4]
 8011bcc:	b29a      	uxth	r2, r3
 8011bce:	693b      	ldr	r3, [r7, #16]
 8011bd0:	889b      	ldrh	r3, [r3, #4]
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d102      	bne.n	8011bde <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8011bdc:	e0b6      	b.n	8011d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011be0:	889b      	ldrh	r3, [r3, #4]
 8011be2:	b29a      	uxth	r2, r3
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	88db      	ldrh	r3, [r3, #6]
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d202      	bcs.n	8011bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011bee:	f04f 33ff 	mov.w	r3, #4294967295
 8011bf2:	e0ab      	b.n	8011d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d009      	beq.n	8011c0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bfc:	88db      	ldrh	r3, [r3, #6]
 8011bfe:	b29a      	uxth	r2, r3
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	889b      	ldrh	r3, [r3, #4]
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	429a      	cmp	r2, r3
 8011c08:	d001      	beq.n	8011c0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011c0e:	693b      	ldr	r3, [r7, #16]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8011c14:	693b      	ldr	r3, [r7, #16]
 8011c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8011c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d193      	bne.n	8011b46 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011c1e:	e000      	b.n	8011c22 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011c20:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d12d      	bne.n	8011c84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d01c      	beq.n	8011c68 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c30:	88db      	ldrh	r3, [r3, #6]
 8011c32:	b29a      	uxth	r2, r3
 8011c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c36:	889b      	ldrh	r3, [r3, #4]
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	429a      	cmp	r2, r3
 8011c3c:	d906      	bls.n	8011c4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011c3e:	4b45      	ldr	r3, [pc, #276]	@ (8011d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011c40:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8011c44:	4944      	ldr	r1, [pc, #272]	@ (8011d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011c46:	4845      	ldr	r0, [pc, #276]	@ (8011d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011c48:	f000 fe24 	bl	8012894 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c4e:	68ba      	ldr	r2, [r7, #8]
 8011c50:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c54:	88db      	ldrh	r3, [r3, #6]
 8011c56:	b29a      	uxth	r2, r3
 8011c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c5a:	889b      	ldrh	r3, [r3, #4]
 8011c5c:	b29b      	uxth	r3, r3
 8011c5e:	429a      	cmp	r2, r3
 8011c60:	d010      	beq.n	8011c84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011c62:	2300      	movs	r3, #0
 8011c64:	623b      	str	r3, [r7, #32]
 8011c66:	e00d      	b.n	8011c84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d006      	beq.n	8011c7e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011c70:	4b38      	ldr	r3, [pc, #224]	@ (8011d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011c72:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8011c76:	493a      	ldr	r1, [pc, #232]	@ (8011d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011c78:	4838      	ldr	r0, [pc, #224]	@ (8011d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011c7a:	f000 fe0b 	bl	8012894 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	68ba      	ldr	r2, [r7, #8]
 8011c82:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d105      	bne.n	8011c96 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	7f9b      	ldrb	r3, [r3, #30]
 8011c8e:	f003 0301 	and.w	r3, r3, #1
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d059      	beq.n	8011d4a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011c96:	6a3b      	ldr	r3, [r7, #32]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d04f      	beq.n	8011d3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d006      	beq.n	8011cb2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	685b      	ldr	r3, [r3, #4]
 8011caa:	889b      	ldrh	r3, [r3, #4]
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d002      	beq.n	8011cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	623b      	str	r3, [r7, #32]
 8011cb6:	e041      	b.n	8011d3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cba:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8011cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8011cc2:	e012      	b.n	8011cea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8011cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ccc:	88db      	ldrh	r3, [r3, #6]
 8011cce:	b29a      	uxth	r2, r3
 8011cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cd2:	889b      	ldrh	r3, [r3, #4]
 8011cd4:	b29b      	uxth	r3, r3
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d002      	beq.n	8011ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	623b      	str	r3, [r7, #32]
            break;
 8011cde:	e007      	b.n	8011cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8011ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8011cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d1e9      	bne.n	8011cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011cf0:	6a3b      	ldr	r3, [r7, #32]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d022      	beq.n	8011d3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	685b      	ldr	r3, [r3, #4]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d106      	bne.n	8011d0c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011cfe:	4b15      	ldr	r3, [pc, #84]	@ (8011d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011d00:	f240 12df 	movw	r2, #479	@ 0x1df
 8011d04:	4917      	ldr	r1, [pc, #92]	@ (8011d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011d06:	4815      	ldr	r0, [pc, #84]	@ (8011d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011d08:	f000 fdc4 	bl	8012894 <iprintf>
          LWIP_ASSERT("sanity check",
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	685b      	ldr	r3, [r3, #4]
 8011d12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d106      	bne.n	8011d26 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011d18:	4b0e      	ldr	r3, [pc, #56]	@ (8011d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011d1a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8011d1e:	4911      	ldr	r1, [pc, #68]	@ (8011d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011d20:	480e      	ldr	r0, [pc, #56]	@ (8011d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011d22:	f000 fdb7 	bl	8012894 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d006      	beq.n	8011d3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011d2e:	4b09      	ldr	r3, [pc, #36]	@ (8011d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011d30:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8011d34:	490c      	ldr	r1, [pc, #48]	@ (8011d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011d36:	4809      	ldr	r0, [pc, #36]	@ (8011d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011d38:	f000 fdac 	bl	8012894 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011d3c:	6a3b      	ldr	r3, [r7, #32]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	bf14      	ite	ne
 8011d42:	2301      	movne	r3, #1
 8011d44:	2300      	moveq	r3, #0
 8011d46:	b2db      	uxtb	r3, r3
 8011d48:	e000      	b.n	8011d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011d4a:	2300      	movs	r3, #0
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3730      	adds	r7, #48	@ 0x30
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}
 8011d54:	0801627c 	.word	0x0801627c
 8011d58:	08016360 	.word	0x08016360
 8011d5c:	080162c4 	.word	0x080162c4
 8011d60:	08016380 	.word	0x08016380
 8011d64:	080163b8 	.word	0x080163b8
 8011d68:	080163c8 	.word	0x080163c8

08011d6c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b08e      	sub	sp, #56	@ 0x38
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	685b      	ldr	r3, [r3, #4]
 8011d78:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	f003 030f 	and.w	r3, r3, #15
 8011d82:	b2db      	uxtb	r3, r3
 8011d84:	009b      	lsls	r3, r3, #2
 8011d86:	b2db      	uxtb	r3, r3
 8011d88:	2b14      	cmp	r3, #20
 8011d8a:	f040 8171 	bne.w	8012070 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d90:	88db      	ldrh	r3, [r3, #6]
 8011d92:	b29b      	uxth	r3, r3
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7f6 faf9 	bl	800838c <lwip_htons>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011da0:	b29b      	uxth	r3, r3
 8011da2:	00db      	lsls	r3, r3, #3
 8011da4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011da8:	885b      	ldrh	r3, [r3, #2]
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7f6 faed 	bl	800838c <lwip_htons>
 8011db2:	4603      	mov	r3, r0
 8011db4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	f003 030f 	and.w	r3, r3, #15
 8011dbe:	b2db      	uxtb	r3, r3
 8011dc0:	009b      	lsls	r3, r3, #2
 8011dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8011dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011dca:	b29b      	uxth	r3, r3
 8011dcc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	f0c0 8150 	bcc.w	8012074 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011dd8:	b29b      	uxth	r3, r3
 8011dda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011ddc:	1ad3      	subs	r3, r2, r3
 8011dde:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f7f7 feb9 	bl	8009b58 <pbuf_clen>
 8011de6:	4603      	mov	r3, r0
 8011de8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011dea:	4b8c      	ldr	r3, [pc, #560]	@ (801201c <ip4_reass+0x2b0>)
 8011dec:	881b      	ldrh	r3, [r3, #0]
 8011dee:	461a      	mov	r2, r3
 8011df0:	8c3b      	ldrh	r3, [r7, #32]
 8011df2:	4413      	add	r3, r2
 8011df4:	2b0a      	cmp	r3, #10
 8011df6:	dd10      	ble.n	8011e1a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011df8:	8c3b      	ldrh	r3, [r7, #32]
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011dfe:	f7ff fd81 	bl	8011904 <ip_reass_remove_oldest_datagram>
 8011e02:	4603      	mov	r3, r0
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	f000 8137 	beq.w	8012078 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011e0a:	4b84      	ldr	r3, [pc, #528]	@ (801201c <ip4_reass+0x2b0>)
 8011e0c:	881b      	ldrh	r3, [r3, #0]
 8011e0e:	461a      	mov	r2, r3
 8011e10:	8c3b      	ldrh	r3, [r7, #32]
 8011e12:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011e14:	2b0a      	cmp	r3, #10
 8011e16:	f300 812f 	bgt.w	8012078 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011e1a:	4b81      	ldr	r3, [pc, #516]	@ (8012020 <ip4_reass+0x2b4>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011e20:	e015      	b.n	8011e4e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e24:	695a      	ldr	r2, [r3, #20]
 8011e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e28:	68db      	ldr	r3, [r3, #12]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d10c      	bne.n	8011e48 <ip4_reass+0xdc>
 8011e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e30:	699a      	ldr	r2, [r3, #24]
 8011e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e34:	691b      	ldr	r3, [r3, #16]
 8011e36:	429a      	cmp	r2, r3
 8011e38:	d106      	bne.n	8011e48 <ip4_reass+0xdc>
 8011e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e3c:	899a      	ldrh	r2, [r3, #12]
 8011e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e40:	889b      	ldrh	r3, [r3, #4]
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d006      	beq.n	8011e56 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8011e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d1e6      	bne.n	8011e22 <ip4_reass+0xb6>
 8011e54:	e000      	b.n	8011e58 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011e56:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d109      	bne.n	8011e72 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011e5e:	8c3b      	ldrh	r3, [r7, #32]
 8011e60:	4619      	mov	r1, r3
 8011e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e64:	f7ff fdb0 	bl	80119c8 <ip_reass_enqueue_new_datagram>
 8011e68:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d11c      	bne.n	8011eaa <ip4_reass+0x13e>
      goto nullreturn;
 8011e70:	e105      	b.n	801207e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e74:	88db      	ldrh	r3, [r3, #6]
 8011e76:	b29b      	uxth	r3, r3
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f7f6 fa87 	bl	800838c <lwip_htons>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d110      	bne.n	8011eaa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e8a:	89db      	ldrh	r3, [r3, #14]
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7f6 fa7d 	bl	800838c <lwip_htons>
 8011e92:	4603      	mov	r3, r0
 8011e94:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d006      	beq.n	8011eaa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e9e:	3308      	adds	r3, #8
 8011ea0:	2214      	movs	r2, #20
 8011ea2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f000 fe24 	bl	8012af2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eac:	88db      	ldrh	r3, [r3, #6]
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	f003 0320 	and.w	r3, r3, #32
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	bf0c      	ite	eq
 8011eb8:	2301      	moveq	r3, #1
 8011eba:	2300      	movne	r3, #0
 8011ebc:	b2db      	uxtb	r3, r3
 8011ebe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011ec0:	69fb      	ldr	r3, [r7, #28]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d00e      	beq.n	8011ee4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011ec6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011ec8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011eca:	4413      	add	r3, r2
 8011ecc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011ece:	8b7a      	ldrh	r2, [r7, #26]
 8011ed0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	f0c0 80a0 	bcc.w	8012018 <ip4_reass+0x2ac>
 8011ed8:	8b7b      	ldrh	r3, [r7, #26]
 8011eda:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8011ede:	4293      	cmp	r3, r2
 8011ee0:	f200 809a 	bhi.w	8012018 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011ee4:	69fa      	ldr	r2, [r7, #28]
 8011ee6:	6879      	ldr	r1, [r7, #4]
 8011ee8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011eea:	f7ff fdd5 	bl	8011a98 <ip_reass_chain_frag_into_datagram_and_validate>
 8011eee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ef6:	f000 809b 	beq.w	8012030 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011efa:	4b48      	ldr	r3, [pc, #288]	@ (801201c <ip4_reass+0x2b0>)
 8011efc:	881a      	ldrh	r2, [r3, #0]
 8011efe:	8c3b      	ldrh	r3, [r7, #32]
 8011f00:	4413      	add	r3, r2
 8011f02:	b29a      	uxth	r2, r3
 8011f04:	4b45      	ldr	r3, [pc, #276]	@ (801201c <ip4_reass+0x2b0>)
 8011f06:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011f08:	69fb      	ldr	r3, [r7, #28]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d00d      	beq.n	8011f2a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011f0e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011f10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011f12:	4413      	add	r3, r2
 8011f14:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f18:	8a7a      	ldrh	r2, [r7, #18]
 8011f1a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f1e:	7f9b      	ldrb	r3, [r3, #30]
 8011f20:	f043 0301 	orr.w	r3, r3, #1
 8011f24:	b2da      	uxtb	r2, r3
 8011f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f28:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d171      	bne.n	8012014 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f32:	8b9b      	ldrh	r3, [r3, #28]
 8011f34:	3314      	adds	r3, #20
 8011f36:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f4c:	3308      	adds	r3, #8
 8011f4e:	2214      	movs	r2, #20
 8011f50:	4619      	mov	r1, r3
 8011f52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f54:	f000 fdcd 	bl	8012af2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011f58:	8a3b      	ldrh	r3, [r7, #16]
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7f6 fa16 	bl	800838c <lwip_htons>
 8011f60:	4603      	mov	r3, r0
 8011f62:	461a      	mov	r2, r3
 8011f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f66:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	719a      	strb	r2, [r3, #6]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f74:	2200      	movs	r2, #0
 8011f76:	729a      	strb	r2, [r3, #10]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f7e:	685b      	ldr	r3, [r3, #4]
 8011f80:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011f82:	e00d      	b.n	8011fa0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f86:	685b      	ldr	r3, [r3, #4]
 8011f88:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011f8a:	2114      	movs	r1, #20
 8011f8c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8011f8e:	f7f7 fcd5 	bl	800993c <pbuf_remove_header>
      pbuf_cat(p, r);
 8011f92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f7f7 fe19 	bl	8009bcc <pbuf_cat>
      r = iprh->next_pbuf;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8011fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d1ee      	bne.n	8011f84 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8012020 <ip4_reass+0x2b4>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011fac:	429a      	cmp	r2, r3
 8011fae:	d102      	bne.n	8011fb6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011fb4:	e010      	b.n	8011fd8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8012020 <ip4_reass+0x2b4>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011fbc:	e007      	b.n	8011fce <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d006      	beq.n	8011fd6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d1f4      	bne.n	8011fbe <ip4_reass+0x252>
 8011fd4:	e000      	b.n	8011fd8 <ip4_reass+0x26c>
          break;
 8011fd6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011fd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011fda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011fdc:	f7ff fd2e 	bl	8011a3c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f7f7 fdb9 	bl	8009b58 <pbuf_clen>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011fea:	4b0c      	ldr	r3, [pc, #48]	@ (801201c <ip4_reass+0x2b0>)
 8011fec:	881b      	ldrh	r3, [r3, #0]
 8011fee:	8c3a      	ldrh	r2, [r7, #32]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d906      	bls.n	8012002 <ip4_reass+0x296>
 8011ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8012024 <ip4_reass+0x2b8>)
 8011ff6:	f240 229b 	movw	r2, #667	@ 0x29b
 8011ffa:	490b      	ldr	r1, [pc, #44]	@ (8012028 <ip4_reass+0x2bc>)
 8011ffc:	480b      	ldr	r0, [pc, #44]	@ (801202c <ip4_reass+0x2c0>)
 8011ffe:	f000 fc49 	bl	8012894 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012002:	4b06      	ldr	r3, [pc, #24]	@ (801201c <ip4_reass+0x2b0>)
 8012004:	881a      	ldrh	r2, [r3, #0]
 8012006:	8c3b      	ldrh	r3, [r7, #32]
 8012008:	1ad3      	subs	r3, r2, r3
 801200a:	b29a      	uxth	r2, r3
 801200c:	4b03      	ldr	r3, [pc, #12]	@ (801201c <ip4_reass+0x2b0>)
 801200e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	e038      	b.n	8012086 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012014:	2300      	movs	r3, #0
 8012016:	e036      	b.n	8012086 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012018:	bf00      	nop
 801201a:	e00a      	b.n	8012032 <ip4_reass+0x2c6>
 801201c:	20008af4 	.word	0x20008af4
 8012020:	20008af0 	.word	0x20008af0
 8012024:	0801627c 	.word	0x0801627c
 8012028:	080163ec 	.word	0x080163ec
 801202c:	080162c4 	.word	0x080162c4
    goto nullreturn_ipr;
 8012030:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012034:	2b00      	cmp	r3, #0
 8012036:	d106      	bne.n	8012046 <ip4_reass+0x2da>
 8012038:	4b15      	ldr	r3, [pc, #84]	@ (8012090 <ip4_reass+0x324>)
 801203a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801203e:	4915      	ldr	r1, [pc, #84]	@ (8012094 <ip4_reass+0x328>)
 8012040:	4815      	ldr	r0, [pc, #84]	@ (8012098 <ip4_reass+0x32c>)
 8012042:	f000 fc27 	bl	8012894 <iprintf>
  if (ipr->p == NULL) {
 8012046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012048:	685b      	ldr	r3, [r3, #4]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d116      	bne.n	801207c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801204e:	4b13      	ldr	r3, [pc, #76]	@ (801209c <ip4_reass+0x330>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012054:	429a      	cmp	r2, r3
 8012056:	d006      	beq.n	8012066 <ip4_reass+0x2fa>
 8012058:	4b0d      	ldr	r3, [pc, #52]	@ (8012090 <ip4_reass+0x324>)
 801205a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801205e:	4910      	ldr	r1, [pc, #64]	@ (80120a0 <ip4_reass+0x334>)
 8012060:	480d      	ldr	r0, [pc, #52]	@ (8012098 <ip4_reass+0x32c>)
 8012062:	f000 fc17 	bl	8012894 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012066:	2100      	movs	r1, #0
 8012068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801206a:	f7ff fce7 	bl	8011a3c <ip_reass_dequeue_datagram>
 801206e:	e006      	b.n	801207e <ip4_reass+0x312>
    goto nullreturn;
 8012070:	bf00      	nop
 8012072:	e004      	b.n	801207e <ip4_reass+0x312>
    goto nullreturn;
 8012074:	bf00      	nop
 8012076:	e002      	b.n	801207e <ip4_reass+0x312>
      goto nullreturn;
 8012078:	bf00      	nop
 801207a:	e000      	b.n	801207e <ip4_reass+0x312>
  }

nullreturn:
 801207c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f7f7 fce2 	bl	8009a48 <pbuf_free>
  return NULL;
 8012084:	2300      	movs	r3, #0
}
 8012086:	4618      	mov	r0, r3
 8012088:	3738      	adds	r7, #56	@ 0x38
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}
 801208e:	bf00      	nop
 8012090:	0801627c 	.word	0x0801627c
 8012094:	08016408 	.word	0x08016408
 8012098:	080162c4 	.word	0x080162c4
 801209c:	20008af0 	.word	0x20008af0
 80120a0:	08016414 	.word	0x08016414

080120a4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80120a8:	2005      	movs	r0, #5
 80120aa:	f7f6 fde7 	bl	8008c7c <memp_malloc>
 80120ae:	4603      	mov	r3, r0
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d106      	bne.n	80120d0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80120c2:	4b07      	ldr	r3, [pc, #28]	@ (80120e0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80120c4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80120c8:	4906      	ldr	r1, [pc, #24]	@ (80120e4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80120ca:	4807      	ldr	r0, [pc, #28]	@ (80120e8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80120cc:	f000 fbe2 	bl	8012894 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80120d0:	6879      	ldr	r1, [r7, #4]
 80120d2:	2005      	movs	r0, #5
 80120d4:	f7f6 fe42 	bl	8008d5c <memp_free>
}
 80120d8:	bf00      	nop
 80120da:	3708      	adds	r7, #8
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}
 80120e0:	0801627c 	.word	0x0801627c
 80120e4:	08016434 	.word	0x08016434
 80120e8:	080162c4 	.word	0x080162c4

080120ec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b084      	sub	sp, #16
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d106      	bne.n	801210c <ipfrag_free_pbuf_custom+0x20>
 80120fe:	4b11      	ldr	r3, [pc, #68]	@ (8012144 <ipfrag_free_pbuf_custom+0x58>)
 8012100:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8012104:	4910      	ldr	r1, [pc, #64]	@ (8012148 <ipfrag_free_pbuf_custom+0x5c>)
 8012106:	4811      	ldr	r0, [pc, #68]	@ (801214c <ipfrag_free_pbuf_custom+0x60>)
 8012108:	f000 fbc4 	bl	8012894 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801210c:	68fa      	ldr	r2, [r7, #12]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	429a      	cmp	r2, r3
 8012112:	d006      	beq.n	8012122 <ipfrag_free_pbuf_custom+0x36>
 8012114:	4b0b      	ldr	r3, [pc, #44]	@ (8012144 <ipfrag_free_pbuf_custom+0x58>)
 8012116:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801211a:	490d      	ldr	r1, [pc, #52]	@ (8012150 <ipfrag_free_pbuf_custom+0x64>)
 801211c:	480b      	ldr	r0, [pc, #44]	@ (801214c <ipfrag_free_pbuf_custom+0x60>)
 801211e:	f000 fbb9 	bl	8012894 <iprintf>
  if (pcr->original != NULL) {
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	695b      	ldr	r3, [r3, #20]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d004      	beq.n	8012134 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	695b      	ldr	r3, [r3, #20]
 801212e:	4618      	mov	r0, r3
 8012130:	f7f7 fc8a 	bl	8009a48 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012134:	68f8      	ldr	r0, [r7, #12]
 8012136:	f7ff ffbd 	bl	80120b4 <ip_frag_free_pbuf_custom_ref>
}
 801213a:	bf00      	nop
 801213c:	3710      	adds	r7, #16
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}
 8012142:	bf00      	nop
 8012144:	0801627c 	.word	0x0801627c
 8012148:	08016440 	.word	0x08016440
 801214c:	080162c4 	.word	0x080162c4
 8012150:	0801644c 	.word	0x0801644c

08012154 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b094      	sub	sp, #80	@ 0x50
 8012158:	af02      	add	r7, sp, #8
 801215a:	60f8      	str	r0, [r7, #12]
 801215c:	60b9      	str	r1, [r7, #8]
 801215e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012160:	2300      	movs	r3, #0
 8012162:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801216a:	3b14      	subs	r3, #20
 801216c:	2b00      	cmp	r3, #0
 801216e:	da00      	bge.n	8012172 <ip4_frag+0x1e>
 8012170:	3307      	adds	r3, #7
 8012172:	10db      	asrs	r3, r3, #3
 8012174:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012176:	2314      	movs	r3, #20
 8012178:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	685b      	ldr	r3, [r3, #4]
 801217e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8012180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012182:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012186:	781b      	ldrb	r3, [r3, #0]
 8012188:	f003 030f 	and.w	r3, r3, #15
 801218c:	b2db      	uxtb	r3, r3
 801218e:	009b      	lsls	r3, r3, #2
 8012190:	b2db      	uxtb	r3, r3
 8012192:	2b14      	cmp	r3, #20
 8012194:	d002      	beq.n	801219c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012196:	f06f 0305 	mvn.w	r3, #5
 801219a:	e110      	b.n	80123be <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	895b      	ldrh	r3, [r3, #10]
 80121a0:	2b13      	cmp	r3, #19
 80121a2:	d809      	bhi.n	80121b8 <ip4_frag+0x64>
 80121a4:	4b88      	ldr	r3, [pc, #544]	@ (80123c8 <ip4_frag+0x274>)
 80121a6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80121aa:	4988      	ldr	r1, [pc, #544]	@ (80123cc <ip4_frag+0x278>)
 80121ac:	4888      	ldr	r0, [pc, #544]	@ (80123d0 <ip4_frag+0x27c>)
 80121ae:	f000 fb71 	bl	8012894 <iprintf>
 80121b2:	f06f 0305 	mvn.w	r3, #5
 80121b6:	e102      	b.n	80123be <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80121b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121ba:	88db      	ldrh	r3, [r3, #6]
 80121bc:	b29b      	uxth	r3, r3
 80121be:	4618      	mov	r0, r3
 80121c0:	f7f6 f8e4 	bl	800838c <lwip_htons>
 80121c4:	4603      	mov	r3, r0
 80121c6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80121c8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80121ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80121ce:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80121d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80121d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80121d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	891b      	ldrh	r3, [r3, #8]
 80121de:	3b14      	subs	r3, #20
 80121e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80121e4:	e0e1      	b.n	80123aa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80121e6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80121e8:	00db      	lsls	r3, r3, #3
 80121ea:	b29b      	uxth	r3, r3
 80121ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80121f0:	4293      	cmp	r3, r2
 80121f2:	bf28      	it	cs
 80121f4:	4613      	movcs	r3, r2
 80121f6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80121f8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80121fc:	2114      	movs	r1, #20
 80121fe:	200e      	movs	r0, #14
 8012200:	f7f7 f93e 	bl	8009480 <pbuf_alloc>
 8012204:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8012206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012208:	2b00      	cmp	r3, #0
 801220a:	f000 80d5 	beq.w	80123b8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012210:	895b      	ldrh	r3, [r3, #10]
 8012212:	2b13      	cmp	r3, #19
 8012214:	d806      	bhi.n	8012224 <ip4_frag+0xd0>
 8012216:	4b6c      	ldr	r3, [pc, #432]	@ (80123c8 <ip4_frag+0x274>)
 8012218:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801221c:	496d      	ldr	r1, [pc, #436]	@ (80123d4 <ip4_frag+0x280>)
 801221e:	486c      	ldr	r0, [pc, #432]	@ (80123d0 <ip4_frag+0x27c>)
 8012220:	f000 fb38 	bl	8012894 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012226:	685b      	ldr	r3, [r3, #4]
 8012228:	2214      	movs	r2, #20
 801222a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801222c:	4618      	mov	r0, r3
 801222e:	f000 fc60 	bl	8012af2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012234:	685b      	ldr	r3, [r3, #4]
 8012236:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8012238:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801223a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801223e:	e064      	b.n	801230a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	895a      	ldrh	r2, [r3, #10]
 8012244:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012246:	1ad3      	subs	r3, r2, r3
 8012248:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	895b      	ldrh	r3, [r3, #10]
 801224e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012250:	429a      	cmp	r2, r3
 8012252:	d906      	bls.n	8012262 <ip4_frag+0x10e>
 8012254:	4b5c      	ldr	r3, [pc, #368]	@ (80123c8 <ip4_frag+0x274>)
 8012256:	f240 322d 	movw	r2, #813	@ 0x32d
 801225a:	495f      	ldr	r1, [pc, #380]	@ (80123d8 <ip4_frag+0x284>)
 801225c:	485c      	ldr	r0, [pc, #368]	@ (80123d0 <ip4_frag+0x27c>)
 801225e:	f000 fb19 	bl	8012894 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012262:	8bfa      	ldrh	r2, [r7, #30]
 8012264:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012268:	4293      	cmp	r3, r2
 801226a:	bf28      	it	cs
 801226c:	4613      	movcs	r3, r2
 801226e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012272:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012276:	2b00      	cmp	r3, #0
 8012278:	d105      	bne.n	8012286 <ip4_frag+0x132>
        poff = 0;
 801227a:	2300      	movs	r3, #0
 801227c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	60fb      	str	r3, [r7, #12]
        continue;
 8012284:	e041      	b.n	801230a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012286:	f7ff ff0d 	bl	80120a4 <ip_frag_alloc_pbuf_custom_ref>
 801228a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801228c:	69bb      	ldr	r3, [r7, #24]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d103      	bne.n	801229a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012292:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012294:	f7f7 fbd8 	bl	8009a48 <pbuf_free>
        goto memerr;
 8012298:	e08f      	b.n	80123ba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801229a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80122a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80122a2:	4413      	add	r3, r2
 80122a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80122a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80122ac:	9201      	str	r2, [sp, #4]
 80122ae:	9300      	str	r3, [sp, #0]
 80122b0:	4603      	mov	r3, r0
 80122b2:	2241      	movs	r2, #65	@ 0x41
 80122b4:	2000      	movs	r0, #0
 80122b6:	f7f7 fa0d 	bl	80096d4 <pbuf_alloced_custom>
 80122ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d106      	bne.n	80122d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80122c2:	69b8      	ldr	r0, [r7, #24]
 80122c4:	f7ff fef6 	bl	80120b4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80122c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80122ca:	f7f7 fbbd 	bl	8009a48 <pbuf_free>
        goto memerr;
 80122ce:	e074      	b.n	80123ba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	f7f7 fc59 	bl	8009b88 <pbuf_ref>
      pcr->original = p;
 80122d6:	69bb      	ldr	r3, [r7, #24]
 80122d8:	68fa      	ldr	r2, [r7, #12]
 80122da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80122dc:	69bb      	ldr	r3, [r7, #24]
 80122de:	4a3f      	ldr	r2, [pc, #252]	@ (80123dc <ip4_frag+0x288>)
 80122e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80122e2:	6979      	ldr	r1, [r7, #20]
 80122e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80122e6:	f7f7 fc71 	bl	8009bcc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80122ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80122ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80122f2:	1ad3      	subs	r3, r2, r3
 80122f4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80122f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d004      	beq.n	801230a <ip4_frag+0x1b6>
        poff = 0;
 8012300:	2300      	movs	r3, #0
 8012302:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801230a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801230e:	2b00      	cmp	r3, #0
 8012310:	d196      	bne.n	8012240 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012312:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012314:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012318:	4413      	add	r3, r2
 801231a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012320:	f1a3 0213 	sub.w	r2, r3, #19
 8012324:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012328:	429a      	cmp	r2, r3
 801232a:	bfcc      	ite	gt
 801232c:	2301      	movgt	r3, #1
 801232e:	2300      	movle	r3, #0
 8012330:	b2db      	uxtb	r3, r3
 8012332:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012334:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801233c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801233e:	6a3b      	ldr	r3, [r7, #32]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d002      	beq.n	801234a <ip4_frag+0x1f6>
 8012344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012346:	2b00      	cmp	r3, #0
 8012348:	d003      	beq.n	8012352 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801234a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801234c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012350:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012352:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012354:	4618      	mov	r0, r3
 8012356:	f7f6 f819 	bl	800838c <lwip_htons>
 801235a:	4603      	mov	r3, r0
 801235c:	461a      	mov	r2, r3
 801235e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012360:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012362:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012364:	3314      	adds	r3, #20
 8012366:	b29b      	uxth	r3, r3
 8012368:	4618      	mov	r0, r3
 801236a:	f7f6 f80f 	bl	800838c <lwip_htons>
 801236e:	4603      	mov	r3, r0
 8012370:	461a      	mov	r2, r3
 8012372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012374:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012378:	2200      	movs	r2, #0
 801237a:	729a      	strb	r2, [r3, #10]
 801237c:	2200      	movs	r2, #0
 801237e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	695b      	ldr	r3, [r3, #20]
 8012384:	687a      	ldr	r2, [r7, #4]
 8012386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012388:	68b8      	ldr	r0, [r7, #8]
 801238a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801238c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801238e:	f7f7 fb5b 	bl	8009a48 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012392:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012396:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012398:	1ad3      	subs	r3, r2, r3
 801239a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801239e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80123a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80123a4:	4413      	add	r3, r2
 80123a6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80123aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	f47f af19 	bne.w	80121e6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80123b4:	2300      	movs	r3, #0
 80123b6:	e002      	b.n	80123be <ip4_frag+0x26a>
      goto memerr;
 80123b8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80123ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3748      	adds	r7, #72	@ 0x48
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
 80123c6:	bf00      	nop
 80123c8:	0801627c 	.word	0x0801627c
 80123cc:	08016458 	.word	0x08016458
 80123d0:	080162c4 	.word	0x080162c4
 80123d4:	08016474 	.word	0x08016474
 80123d8:	08016494 	.word	0x08016494
 80123dc:	080120ed 	.word	0x080120ed

080123e0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b086      	sub	sp, #24
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
 80123e8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80123ea:	230e      	movs	r3, #14
 80123ec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	895b      	ldrh	r3, [r3, #10]
 80123f2:	2b0e      	cmp	r3, #14
 80123f4:	d96e      	bls.n	80124d4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	7bdb      	ldrb	r3, [r3, #15]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d106      	bne.n	801240c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012404:	3301      	adds	r3, #1
 8012406:	b2da      	uxtb	r2, r3
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012412:	693b      	ldr	r3, [r7, #16]
 8012414:	7b1a      	ldrb	r2, [r3, #12]
 8012416:	7b5b      	ldrb	r3, [r3, #13]
 8012418:	021b      	lsls	r3, r3, #8
 801241a:	4313      	orrs	r3, r2
 801241c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801241e:	693b      	ldr	r3, [r7, #16]
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	f003 0301 	and.w	r3, r3, #1
 8012426:	2b00      	cmp	r3, #0
 8012428:	d023      	beq.n	8012472 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	781b      	ldrb	r3, [r3, #0]
 801242e:	2b01      	cmp	r3, #1
 8012430:	d10f      	bne.n	8012452 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	785b      	ldrb	r3, [r3, #1]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d11b      	bne.n	8012472 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801243a:	693b      	ldr	r3, [r7, #16]
 801243c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801243e:	2b5e      	cmp	r3, #94	@ 0x5e
 8012440:	d117      	bne.n	8012472 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	7b5b      	ldrb	r3, [r3, #13]
 8012446:	f043 0310 	orr.w	r3, r3, #16
 801244a:	b2da      	uxtb	r2, r3
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	735a      	strb	r2, [r3, #13]
 8012450:	e00f      	b.n	8012472 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	2206      	movs	r2, #6
 8012456:	4928      	ldr	r1, [pc, #160]	@ (80124f8 <ethernet_input+0x118>)
 8012458:	4618      	mov	r0, r3
 801245a:	f000 fa92 	bl	8012982 <memcmp>
 801245e:	4603      	mov	r3, r0
 8012460:	2b00      	cmp	r3, #0
 8012462:	d106      	bne.n	8012472 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	7b5b      	ldrb	r3, [r3, #13]
 8012468:	f043 0308 	orr.w	r3, r3, #8
 801246c:	b2da      	uxtb	r2, r3
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012472:	89fb      	ldrh	r3, [r7, #14]
 8012474:	2b08      	cmp	r3, #8
 8012476:	d003      	beq.n	8012480 <ethernet_input+0xa0>
 8012478:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801247c:	d014      	beq.n	80124a8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801247e:	e032      	b.n	80124e6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012486:	f003 0308 	and.w	r3, r3, #8
 801248a:	2b00      	cmp	r3, #0
 801248c:	d024      	beq.n	80124d8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801248e:	8afb      	ldrh	r3, [r7, #22]
 8012490:	4619      	mov	r1, r3
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f7f7 fa52 	bl	800993c <pbuf_remove_header>
 8012498:	4603      	mov	r3, r0
 801249a:	2b00      	cmp	r3, #0
 801249c:	d11e      	bne.n	80124dc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801249e:	6839      	ldr	r1, [r7, #0]
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	f7fe ff21 	bl	80112e8 <ip4_input>
      break;
 80124a6:	e013      	b.n	80124d0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80124ae:	f003 0308 	and.w	r3, r3, #8
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d014      	beq.n	80124e0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80124b6:	8afb      	ldrh	r3, [r7, #22]
 80124b8:	4619      	mov	r1, r3
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f7f7 fa3e 	bl	800993c <pbuf_remove_header>
 80124c0:	4603      	mov	r3, r0
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d10e      	bne.n	80124e4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80124c6:	6839      	ldr	r1, [r7, #0]
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f7fe f8c1 	bl	8010650 <etharp_input>
      break;
 80124ce:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80124d0:	2300      	movs	r3, #0
 80124d2:	e00c      	b.n	80124ee <ethernet_input+0x10e>
    goto free_and_return;
 80124d4:	bf00      	nop
 80124d6:	e006      	b.n	80124e6 <ethernet_input+0x106>
        goto free_and_return;
 80124d8:	bf00      	nop
 80124da:	e004      	b.n	80124e6 <ethernet_input+0x106>
        goto free_and_return;
 80124dc:	bf00      	nop
 80124de:	e002      	b.n	80124e6 <ethernet_input+0x106>
        goto free_and_return;
 80124e0:	bf00      	nop
 80124e2:	e000      	b.n	80124e6 <ethernet_input+0x106>
        goto free_and_return;
 80124e4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f7f7 faae 	bl	8009a48 <pbuf_free>
  return ERR_OK;
 80124ec:	2300      	movs	r3, #0
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3718      	adds	r7, #24
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop
 80124f8:	08016630 	.word	0x08016630

080124fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b086      	sub	sp, #24
 8012500:	af00      	add	r7, sp, #0
 8012502:	60f8      	str	r0, [r7, #12]
 8012504:	60b9      	str	r1, [r7, #8]
 8012506:	607a      	str	r2, [r7, #4]
 8012508:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801250a:	8c3b      	ldrh	r3, [r7, #32]
 801250c:	4618      	mov	r0, r3
 801250e:	f7f5 ff3d 	bl	800838c <lwip_htons>
 8012512:	4603      	mov	r3, r0
 8012514:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012516:	210e      	movs	r1, #14
 8012518:	68b8      	ldr	r0, [r7, #8]
 801251a:	f7f7 f9ff 	bl	800991c <pbuf_add_header>
 801251e:	4603      	mov	r3, r0
 8012520:	2b00      	cmp	r3, #0
 8012522:	d125      	bne.n	8012570 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	685b      	ldr	r3, [r3, #4]
 8012528:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	8afa      	ldrh	r2, [r7, #22]
 801252e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	2206      	movs	r2, #6
 8012534:	6839      	ldr	r1, [r7, #0]
 8012536:	4618      	mov	r0, r3
 8012538:	f000 fadb 	bl	8012af2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	3306      	adds	r3, #6
 8012540:	2206      	movs	r2, #6
 8012542:	6879      	ldr	r1, [r7, #4]
 8012544:	4618      	mov	r0, r3
 8012546:	f000 fad4 	bl	8012af2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012550:	2b06      	cmp	r3, #6
 8012552:	d006      	beq.n	8012562 <ethernet_output+0x66>
 8012554:	4b0a      	ldr	r3, [pc, #40]	@ (8012580 <ethernet_output+0x84>)
 8012556:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801255a:	490a      	ldr	r1, [pc, #40]	@ (8012584 <ethernet_output+0x88>)
 801255c:	480a      	ldr	r0, [pc, #40]	@ (8012588 <ethernet_output+0x8c>)
 801255e:	f000 f999 	bl	8012894 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	699b      	ldr	r3, [r3, #24]
 8012566:	68b9      	ldr	r1, [r7, #8]
 8012568:	68f8      	ldr	r0, [r7, #12]
 801256a:	4798      	blx	r3
 801256c:	4603      	mov	r3, r0
 801256e:	e002      	b.n	8012576 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012570:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012572:	f06f 0301 	mvn.w	r3, #1
}
 8012576:	4618      	mov	r0, r3
 8012578:	3718      	adds	r7, #24
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
 801257e:	bf00      	nop
 8012580:	080164a4 	.word	0x080164a4
 8012584:	080164dc 	.word	0x080164dc
 8012588:	08016510 	.word	0x08016510

0801258c <rand>:
 801258c:	4b16      	ldr	r3, [pc, #88]	@ (80125e8 <rand+0x5c>)
 801258e:	b510      	push	{r4, lr}
 8012590:	681c      	ldr	r4, [r3, #0]
 8012592:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012594:	b9b3      	cbnz	r3, 80125c4 <rand+0x38>
 8012596:	2018      	movs	r0, #24
 8012598:	f000 fb22 	bl	8012be0 <malloc>
 801259c:	4602      	mov	r2, r0
 801259e:	6320      	str	r0, [r4, #48]	@ 0x30
 80125a0:	b920      	cbnz	r0, 80125ac <rand+0x20>
 80125a2:	4b12      	ldr	r3, [pc, #72]	@ (80125ec <rand+0x60>)
 80125a4:	4812      	ldr	r0, [pc, #72]	@ (80125f0 <rand+0x64>)
 80125a6:	2152      	movs	r1, #82	@ 0x52
 80125a8:	f000 fab2 	bl	8012b10 <__assert_func>
 80125ac:	4911      	ldr	r1, [pc, #68]	@ (80125f4 <rand+0x68>)
 80125ae:	4b12      	ldr	r3, [pc, #72]	@ (80125f8 <rand+0x6c>)
 80125b0:	e9c0 1300 	strd	r1, r3, [r0]
 80125b4:	4b11      	ldr	r3, [pc, #68]	@ (80125fc <rand+0x70>)
 80125b6:	6083      	str	r3, [r0, #8]
 80125b8:	230b      	movs	r3, #11
 80125ba:	8183      	strh	r3, [r0, #12]
 80125bc:	2100      	movs	r1, #0
 80125be:	2001      	movs	r0, #1
 80125c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80125c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80125c6:	480e      	ldr	r0, [pc, #56]	@ (8012600 <rand+0x74>)
 80125c8:	690b      	ldr	r3, [r1, #16]
 80125ca:	694c      	ldr	r4, [r1, #20]
 80125cc:	4a0d      	ldr	r2, [pc, #52]	@ (8012604 <rand+0x78>)
 80125ce:	4358      	muls	r0, r3
 80125d0:	fb02 0004 	mla	r0, r2, r4, r0
 80125d4:	fba3 3202 	umull	r3, r2, r3, r2
 80125d8:	3301      	adds	r3, #1
 80125da:	eb40 0002 	adc.w	r0, r0, r2
 80125de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80125e2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80125e6:	bd10      	pop	{r4, pc}
 80125e8:	200000b0 	.word	0x200000b0
 80125ec:	0801663e 	.word	0x0801663e
 80125f0:	08016655 	.word	0x08016655
 80125f4:	abcd330e 	.word	0xabcd330e
 80125f8:	e66d1234 	.word	0xe66d1234
 80125fc:	0005deec 	.word	0x0005deec
 8012600:	5851f42d 	.word	0x5851f42d
 8012604:	4c957f2d 	.word	0x4c957f2d

08012608 <_strtol_l.isra.0>:
 8012608:	2b24      	cmp	r3, #36	@ 0x24
 801260a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801260e:	4686      	mov	lr, r0
 8012610:	4690      	mov	r8, r2
 8012612:	d801      	bhi.n	8012618 <_strtol_l.isra.0+0x10>
 8012614:	2b01      	cmp	r3, #1
 8012616:	d106      	bne.n	8012626 <_strtol_l.isra.0+0x1e>
 8012618:	f000 fa3e 	bl	8012a98 <__errno>
 801261c:	2316      	movs	r3, #22
 801261e:	6003      	str	r3, [r0, #0]
 8012620:	2000      	movs	r0, #0
 8012622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012626:	4834      	ldr	r0, [pc, #208]	@ (80126f8 <_strtol_l.isra.0+0xf0>)
 8012628:	460d      	mov	r5, r1
 801262a:	462a      	mov	r2, r5
 801262c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012630:	5d06      	ldrb	r6, [r0, r4]
 8012632:	f016 0608 	ands.w	r6, r6, #8
 8012636:	d1f8      	bne.n	801262a <_strtol_l.isra.0+0x22>
 8012638:	2c2d      	cmp	r4, #45	@ 0x2d
 801263a:	d110      	bne.n	801265e <_strtol_l.isra.0+0x56>
 801263c:	782c      	ldrb	r4, [r5, #0]
 801263e:	2601      	movs	r6, #1
 8012640:	1c95      	adds	r5, r2, #2
 8012642:	f033 0210 	bics.w	r2, r3, #16
 8012646:	d115      	bne.n	8012674 <_strtol_l.isra.0+0x6c>
 8012648:	2c30      	cmp	r4, #48	@ 0x30
 801264a:	d10d      	bne.n	8012668 <_strtol_l.isra.0+0x60>
 801264c:	782a      	ldrb	r2, [r5, #0]
 801264e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012652:	2a58      	cmp	r2, #88	@ 0x58
 8012654:	d108      	bne.n	8012668 <_strtol_l.isra.0+0x60>
 8012656:	786c      	ldrb	r4, [r5, #1]
 8012658:	3502      	adds	r5, #2
 801265a:	2310      	movs	r3, #16
 801265c:	e00a      	b.n	8012674 <_strtol_l.isra.0+0x6c>
 801265e:	2c2b      	cmp	r4, #43	@ 0x2b
 8012660:	bf04      	itt	eq
 8012662:	782c      	ldrbeq	r4, [r5, #0]
 8012664:	1c95      	addeq	r5, r2, #2
 8012666:	e7ec      	b.n	8012642 <_strtol_l.isra.0+0x3a>
 8012668:	2b00      	cmp	r3, #0
 801266a:	d1f6      	bne.n	801265a <_strtol_l.isra.0+0x52>
 801266c:	2c30      	cmp	r4, #48	@ 0x30
 801266e:	bf14      	ite	ne
 8012670:	230a      	movne	r3, #10
 8012672:	2308      	moveq	r3, #8
 8012674:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012678:	f10c 3cff 	add.w	ip, ip, #4294967295
 801267c:	2200      	movs	r2, #0
 801267e:	fbbc f9f3 	udiv	r9, ip, r3
 8012682:	4610      	mov	r0, r2
 8012684:	fb03 ca19 	mls	sl, r3, r9, ip
 8012688:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801268c:	2f09      	cmp	r7, #9
 801268e:	d80f      	bhi.n	80126b0 <_strtol_l.isra.0+0xa8>
 8012690:	463c      	mov	r4, r7
 8012692:	42a3      	cmp	r3, r4
 8012694:	dd1b      	ble.n	80126ce <_strtol_l.isra.0+0xc6>
 8012696:	1c57      	adds	r7, r2, #1
 8012698:	d007      	beq.n	80126aa <_strtol_l.isra.0+0xa2>
 801269a:	4581      	cmp	r9, r0
 801269c:	d314      	bcc.n	80126c8 <_strtol_l.isra.0+0xc0>
 801269e:	d101      	bne.n	80126a4 <_strtol_l.isra.0+0x9c>
 80126a0:	45a2      	cmp	sl, r4
 80126a2:	db11      	blt.n	80126c8 <_strtol_l.isra.0+0xc0>
 80126a4:	fb00 4003 	mla	r0, r0, r3, r4
 80126a8:	2201      	movs	r2, #1
 80126aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80126ae:	e7eb      	b.n	8012688 <_strtol_l.isra.0+0x80>
 80126b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80126b4:	2f19      	cmp	r7, #25
 80126b6:	d801      	bhi.n	80126bc <_strtol_l.isra.0+0xb4>
 80126b8:	3c37      	subs	r4, #55	@ 0x37
 80126ba:	e7ea      	b.n	8012692 <_strtol_l.isra.0+0x8a>
 80126bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80126c0:	2f19      	cmp	r7, #25
 80126c2:	d804      	bhi.n	80126ce <_strtol_l.isra.0+0xc6>
 80126c4:	3c57      	subs	r4, #87	@ 0x57
 80126c6:	e7e4      	b.n	8012692 <_strtol_l.isra.0+0x8a>
 80126c8:	f04f 32ff 	mov.w	r2, #4294967295
 80126cc:	e7ed      	b.n	80126aa <_strtol_l.isra.0+0xa2>
 80126ce:	1c53      	adds	r3, r2, #1
 80126d0:	d108      	bne.n	80126e4 <_strtol_l.isra.0+0xdc>
 80126d2:	2322      	movs	r3, #34	@ 0x22
 80126d4:	f8ce 3000 	str.w	r3, [lr]
 80126d8:	4660      	mov	r0, ip
 80126da:	f1b8 0f00 	cmp.w	r8, #0
 80126de:	d0a0      	beq.n	8012622 <_strtol_l.isra.0+0x1a>
 80126e0:	1e69      	subs	r1, r5, #1
 80126e2:	e006      	b.n	80126f2 <_strtol_l.isra.0+0xea>
 80126e4:	b106      	cbz	r6, 80126e8 <_strtol_l.isra.0+0xe0>
 80126e6:	4240      	negs	r0, r0
 80126e8:	f1b8 0f00 	cmp.w	r8, #0
 80126ec:	d099      	beq.n	8012622 <_strtol_l.isra.0+0x1a>
 80126ee:	2a00      	cmp	r2, #0
 80126f0:	d1f6      	bne.n	80126e0 <_strtol_l.isra.0+0xd8>
 80126f2:	f8c8 1000 	str.w	r1, [r8]
 80126f6:	e794      	b.n	8012622 <_strtol_l.isra.0+0x1a>
 80126f8:	0801671d 	.word	0x0801671d

080126fc <strtol>:
 80126fc:	4613      	mov	r3, r2
 80126fe:	460a      	mov	r2, r1
 8012700:	4601      	mov	r1, r0
 8012702:	4802      	ldr	r0, [pc, #8]	@ (801270c <strtol+0x10>)
 8012704:	6800      	ldr	r0, [r0, #0]
 8012706:	f7ff bf7f 	b.w	8012608 <_strtol_l.isra.0>
 801270a:	bf00      	nop
 801270c:	200000b0 	.word	0x200000b0

08012710 <std>:
 8012710:	2300      	movs	r3, #0
 8012712:	b510      	push	{r4, lr}
 8012714:	4604      	mov	r4, r0
 8012716:	e9c0 3300 	strd	r3, r3, [r0]
 801271a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801271e:	6083      	str	r3, [r0, #8]
 8012720:	8181      	strh	r1, [r0, #12]
 8012722:	6643      	str	r3, [r0, #100]	@ 0x64
 8012724:	81c2      	strh	r2, [r0, #14]
 8012726:	6183      	str	r3, [r0, #24]
 8012728:	4619      	mov	r1, r3
 801272a:	2208      	movs	r2, #8
 801272c:	305c      	adds	r0, #92	@ 0x5c
 801272e:	f000 f952 	bl	80129d6 <memset>
 8012732:	4b0d      	ldr	r3, [pc, #52]	@ (8012768 <std+0x58>)
 8012734:	6263      	str	r3, [r4, #36]	@ 0x24
 8012736:	4b0d      	ldr	r3, [pc, #52]	@ (801276c <std+0x5c>)
 8012738:	62a3      	str	r3, [r4, #40]	@ 0x28
 801273a:	4b0d      	ldr	r3, [pc, #52]	@ (8012770 <std+0x60>)
 801273c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801273e:	4b0d      	ldr	r3, [pc, #52]	@ (8012774 <std+0x64>)
 8012740:	6323      	str	r3, [r4, #48]	@ 0x30
 8012742:	4b0d      	ldr	r3, [pc, #52]	@ (8012778 <std+0x68>)
 8012744:	6224      	str	r4, [r4, #32]
 8012746:	429c      	cmp	r4, r3
 8012748:	d006      	beq.n	8012758 <std+0x48>
 801274a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801274e:	4294      	cmp	r4, r2
 8012750:	d002      	beq.n	8012758 <std+0x48>
 8012752:	33d0      	adds	r3, #208	@ 0xd0
 8012754:	429c      	cmp	r4, r3
 8012756:	d105      	bne.n	8012764 <std+0x54>
 8012758:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801275c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012760:	f000 b9c4 	b.w	8012aec <__retarget_lock_init_recursive>
 8012764:	bd10      	pop	{r4, pc}
 8012766:	bf00      	nop
 8012768:	080128fd 	.word	0x080128fd
 801276c:	0801291f 	.word	0x0801291f
 8012770:	08012957 	.word	0x08012957
 8012774:	0801297b 	.word	0x0801297b
 8012778:	20008af8 	.word	0x20008af8

0801277c <stdio_exit_handler>:
 801277c:	4a02      	ldr	r2, [pc, #8]	@ (8012788 <stdio_exit_handler+0xc>)
 801277e:	4903      	ldr	r1, [pc, #12]	@ (801278c <stdio_exit_handler+0x10>)
 8012780:	4803      	ldr	r0, [pc, #12]	@ (8012790 <stdio_exit_handler+0x14>)
 8012782:	f000 b869 	b.w	8012858 <_fwalk_sglue>
 8012786:	bf00      	nop
 8012788:	200000a4 	.word	0x200000a4
 801278c:	080136a1 	.word	0x080136a1
 8012790:	200000b4 	.word	0x200000b4

08012794 <cleanup_stdio>:
 8012794:	6841      	ldr	r1, [r0, #4]
 8012796:	4b0c      	ldr	r3, [pc, #48]	@ (80127c8 <cleanup_stdio+0x34>)
 8012798:	4299      	cmp	r1, r3
 801279a:	b510      	push	{r4, lr}
 801279c:	4604      	mov	r4, r0
 801279e:	d001      	beq.n	80127a4 <cleanup_stdio+0x10>
 80127a0:	f000 ff7e 	bl	80136a0 <_fflush_r>
 80127a4:	68a1      	ldr	r1, [r4, #8]
 80127a6:	4b09      	ldr	r3, [pc, #36]	@ (80127cc <cleanup_stdio+0x38>)
 80127a8:	4299      	cmp	r1, r3
 80127aa:	d002      	beq.n	80127b2 <cleanup_stdio+0x1e>
 80127ac:	4620      	mov	r0, r4
 80127ae:	f000 ff77 	bl	80136a0 <_fflush_r>
 80127b2:	68e1      	ldr	r1, [r4, #12]
 80127b4:	4b06      	ldr	r3, [pc, #24]	@ (80127d0 <cleanup_stdio+0x3c>)
 80127b6:	4299      	cmp	r1, r3
 80127b8:	d004      	beq.n	80127c4 <cleanup_stdio+0x30>
 80127ba:	4620      	mov	r0, r4
 80127bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127c0:	f000 bf6e 	b.w	80136a0 <_fflush_r>
 80127c4:	bd10      	pop	{r4, pc}
 80127c6:	bf00      	nop
 80127c8:	20008af8 	.word	0x20008af8
 80127cc:	20008b60 	.word	0x20008b60
 80127d0:	20008bc8 	.word	0x20008bc8

080127d4 <global_stdio_init.part.0>:
 80127d4:	b510      	push	{r4, lr}
 80127d6:	4b0b      	ldr	r3, [pc, #44]	@ (8012804 <global_stdio_init.part.0+0x30>)
 80127d8:	4c0b      	ldr	r4, [pc, #44]	@ (8012808 <global_stdio_init.part.0+0x34>)
 80127da:	4a0c      	ldr	r2, [pc, #48]	@ (801280c <global_stdio_init.part.0+0x38>)
 80127dc:	601a      	str	r2, [r3, #0]
 80127de:	4620      	mov	r0, r4
 80127e0:	2200      	movs	r2, #0
 80127e2:	2104      	movs	r1, #4
 80127e4:	f7ff ff94 	bl	8012710 <std>
 80127e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80127ec:	2201      	movs	r2, #1
 80127ee:	2109      	movs	r1, #9
 80127f0:	f7ff ff8e 	bl	8012710 <std>
 80127f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80127f8:	2202      	movs	r2, #2
 80127fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127fe:	2112      	movs	r1, #18
 8012800:	f7ff bf86 	b.w	8012710 <std>
 8012804:	20008c30 	.word	0x20008c30
 8012808:	20008af8 	.word	0x20008af8
 801280c:	0801277d 	.word	0x0801277d

08012810 <__sfp_lock_acquire>:
 8012810:	4801      	ldr	r0, [pc, #4]	@ (8012818 <__sfp_lock_acquire+0x8>)
 8012812:	f000 b96c 	b.w	8012aee <__retarget_lock_acquire_recursive>
 8012816:	bf00      	nop
 8012818:	20008c39 	.word	0x20008c39

0801281c <__sfp_lock_release>:
 801281c:	4801      	ldr	r0, [pc, #4]	@ (8012824 <__sfp_lock_release+0x8>)
 801281e:	f000 b967 	b.w	8012af0 <__retarget_lock_release_recursive>
 8012822:	bf00      	nop
 8012824:	20008c39 	.word	0x20008c39

08012828 <__sinit>:
 8012828:	b510      	push	{r4, lr}
 801282a:	4604      	mov	r4, r0
 801282c:	f7ff fff0 	bl	8012810 <__sfp_lock_acquire>
 8012830:	6a23      	ldr	r3, [r4, #32]
 8012832:	b11b      	cbz	r3, 801283c <__sinit+0x14>
 8012834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012838:	f7ff bff0 	b.w	801281c <__sfp_lock_release>
 801283c:	4b04      	ldr	r3, [pc, #16]	@ (8012850 <__sinit+0x28>)
 801283e:	6223      	str	r3, [r4, #32]
 8012840:	4b04      	ldr	r3, [pc, #16]	@ (8012854 <__sinit+0x2c>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d1f5      	bne.n	8012834 <__sinit+0xc>
 8012848:	f7ff ffc4 	bl	80127d4 <global_stdio_init.part.0>
 801284c:	e7f2      	b.n	8012834 <__sinit+0xc>
 801284e:	bf00      	nop
 8012850:	08012795 	.word	0x08012795
 8012854:	20008c30 	.word	0x20008c30

08012858 <_fwalk_sglue>:
 8012858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801285c:	4607      	mov	r7, r0
 801285e:	4688      	mov	r8, r1
 8012860:	4614      	mov	r4, r2
 8012862:	2600      	movs	r6, #0
 8012864:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012868:	f1b9 0901 	subs.w	r9, r9, #1
 801286c:	d505      	bpl.n	801287a <_fwalk_sglue+0x22>
 801286e:	6824      	ldr	r4, [r4, #0]
 8012870:	2c00      	cmp	r4, #0
 8012872:	d1f7      	bne.n	8012864 <_fwalk_sglue+0xc>
 8012874:	4630      	mov	r0, r6
 8012876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801287a:	89ab      	ldrh	r3, [r5, #12]
 801287c:	2b01      	cmp	r3, #1
 801287e:	d907      	bls.n	8012890 <_fwalk_sglue+0x38>
 8012880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012884:	3301      	adds	r3, #1
 8012886:	d003      	beq.n	8012890 <_fwalk_sglue+0x38>
 8012888:	4629      	mov	r1, r5
 801288a:	4638      	mov	r0, r7
 801288c:	47c0      	blx	r8
 801288e:	4306      	orrs	r6, r0
 8012890:	3568      	adds	r5, #104	@ 0x68
 8012892:	e7e9      	b.n	8012868 <_fwalk_sglue+0x10>

08012894 <iprintf>:
 8012894:	b40f      	push	{r0, r1, r2, r3}
 8012896:	b507      	push	{r0, r1, r2, lr}
 8012898:	4906      	ldr	r1, [pc, #24]	@ (80128b4 <iprintf+0x20>)
 801289a:	ab04      	add	r3, sp, #16
 801289c:	6808      	ldr	r0, [r1, #0]
 801289e:	f853 2b04 	ldr.w	r2, [r3], #4
 80128a2:	6881      	ldr	r1, [r0, #8]
 80128a4:	9301      	str	r3, [sp, #4]
 80128a6:	f000 fbd3 	bl	8013050 <_vfiprintf_r>
 80128aa:	b003      	add	sp, #12
 80128ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80128b0:	b004      	add	sp, #16
 80128b2:	4770      	bx	lr
 80128b4:	200000b0 	.word	0x200000b0

080128b8 <siprintf>:
 80128b8:	b40e      	push	{r1, r2, r3}
 80128ba:	b510      	push	{r4, lr}
 80128bc:	b09d      	sub	sp, #116	@ 0x74
 80128be:	ab1f      	add	r3, sp, #124	@ 0x7c
 80128c0:	9002      	str	r0, [sp, #8]
 80128c2:	9006      	str	r0, [sp, #24]
 80128c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80128c8:	480a      	ldr	r0, [pc, #40]	@ (80128f4 <siprintf+0x3c>)
 80128ca:	9107      	str	r1, [sp, #28]
 80128cc:	9104      	str	r1, [sp, #16]
 80128ce:	490a      	ldr	r1, [pc, #40]	@ (80128f8 <siprintf+0x40>)
 80128d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80128d4:	9105      	str	r1, [sp, #20]
 80128d6:	2400      	movs	r4, #0
 80128d8:	a902      	add	r1, sp, #8
 80128da:	6800      	ldr	r0, [r0, #0]
 80128dc:	9301      	str	r3, [sp, #4]
 80128de:	941b      	str	r4, [sp, #108]	@ 0x6c
 80128e0:	f000 fa90 	bl	8012e04 <_svfiprintf_r>
 80128e4:	9b02      	ldr	r3, [sp, #8]
 80128e6:	701c      	strb	r4, [r3, #0]
 80128e8:	b01d      	add	sp, #116	@ 0x74
 80128ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128ee:	b003      	add	sp, #12
 80128f0:	4770      	bx	lr
 80128f2:	bf00      	nop
 80128f4:	200000b0 	.word	0x200000b0
 80128f8:	ffff0208 	.word	0xffff0208

080128fc <__sread>:
 80128fc:	b510      	push	{r4, lr}
 80128fe:	460c      	mov	r4, r1
 8012900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012904:	f000 f8a4 	bl	8012a50 <_read_r>
 8012908:	2800      	cmp	r0, #0
 801290a:	bfab      	itete	ge
 801290c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801290e:	89a3      	ldrhlt	r3, [r4, #12]
 8012910:	181b      	addge	r3, r3, r0
 8012912:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012916:	bfac      	ite	ge
 8012918:	6563      	strge	r3, [r4, #84]	@ 0x54
 801291a:	81a3      	strhlt	r3, [r4, #12]
 801291c:	bd10      	pop	{r4, pc}

0801291e <__swrite>:
 801291e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012922:	461f      	mov	r7, r3
 8012924:	898b      	ldrh	r3, [r1, #12]
 8012926:	05db      	lsls	r3, r3, #23
 8012928:	4605      	mov	r5, r0
 801292a:	460c      	mov	r4, r1
 801292c:	4616      	mov	r6, r2
 801292e:	d505      	bpl.n	801293c <__swrite+0x1e>
 8012930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012934:	2302      	movs	r3, #2
 8012936:	2200      	movs	r2, #0
 8012938:	f000 f878 	bl	8012a2c <_lseek_r>
 801293c:	89a3      	ldrh	r3, [r4, #12]
 801293e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012942:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012946:	81a3      	strh	r3, [r4, #12]
 8012948:	4632      	mov	r2, r6
 801294a:	463b      	mov	r3, r7
 801294c:	4628      	mov	r0, r5
 801294e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012952:	f000 b88f 	b.w	8012a74 <_write_r>

08012956 <__sseek>:
 8012956:	b510      	push	{r4, lr}
 8012958:	460c      	mov	r4, r1
 801295a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801295e:	f000 f865 	bl	8012a2c <_lseek_r>
 8012962:	1c43      	adds	r3, r0, #1
 8012964:	89a3      	ldrh	r3, [r4, #12]
 8012966:	bf15      	itete	ne
 8012968:	6560      	strne	r0, [r4, #84]	@ 0x54
 801296a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801296e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012972:	81a3      	strheq	r3, [r4, #12]
 8012974:	bf18      	it	ne
 8012976:	81a3      	strhne	r3, [r4, #12]
 8012978:	bd10      	pop	{r4, pc}

0801297a <__sclose>:
 801297a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801297e:	f000 b845 	b.w	8012a0c <_close_r>

08012982 <memcmp>:
 8012982:	b510      	push	{r4, lr}
 8012984:	3901      	subs	r1, #1
 8012986:	4402      	add	r2, r0
 8012988:	4290      	cmp	r0, r2
 801298a:	d101      	bne.n	8012990 <memcmp+0xe>
 801298c:	2000      	movs	r0, #0
 801298e:	e005      	b.n	801299c <memcmp+0x1a>
 8012990:	7803      	ldrb	r3, [r0, #0]
 8012992:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012996:	42a3      	cmp	r3, r4
 8012998:	d001      	beq.n	801299e <memcmp+0x1c>
 801299a:	1b18      	subs	r0, r3, r4
 801299c:	bd10      	pop	{r4, pc}
 801299e:	3001      	adds	r0, #1
 80129a0:	e7f2      	b.n	8012988 <memcmp+0x6>

080129a2 <memmove>:
 80129a2:	4288      	cmp	r0, r1
 80129a4:	b510      	push	{r4, lr}
 80129a6:	eb01 0402 	add.w	r4, r1, r2
 80129aa:	d902      	bls.n	80129b2 <memmove+0x10>
 80129ac:	4284      	cmp	r4, r0
 80129ae:	4623      	mov	r3, r4
 80129b0:	d807      	bhi.n	80129c2 <memmove+0x20>
 80129b2:	1e43      	subs	r3, r0, #1
 80129b4:	42a1      	cmp	r1, r4
 80129b6:	d008      	beq.n	80129ca <memmove+0x28>
 80129b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80129c0:	e7f8      	b.n	80129b4 <memmove+0x12>
 80129c2:	4402      	add	r2, r0
 80129c4:	4601      	mov	r1, r0
 80129c6:	428a      	cmp	r2, r1
 80129c8:	d100      	bne.n	80129cc <memmove+0x2a>
 80129ca:	bd10      	pop	{r4, pc}
 80129cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80129d0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80129d4:	e7f7      	b.n	80129c6 <memmove+0x24>

080129d6 <memset>:
 80129d6:	4402      	add	r2, r0
 80129d8:	4603      	mov	r3, r0
 80129da:	4293      	cmp	r3, r2
 80129dc:	d100      	bne.n	80129e0 <memset+0xa>
 80129de:	4770      	bx	lr
 80129e0:	f803 1b01 	strb.w	r1, [r3], #1
 80129e4:	e7f9      	b.n	80129da <memset+0x4>

080129e6 <strncpy>:
 80129e6:	b510      	push	{r4, lr}
 80129e8:	3901      	subs	r1, #1
 80129ea:	4603      	mov	r3, r0
 80129ec:	b132      	cbz	r2, 80129fc <strncpy+0x16>
 80129ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80129f2:	f803 4b01 	strb.w	r4, [r3], #1
 80129f6:	3a01      	subs	r2, #1
 80129f8:	2c00      	cmp	r4, #0
 80129fa:	d1f7      	bne.n	80129ec <strncpy+0x6>
 80129fc:	441a      	add	r2, r3
 80129fe:	2100      	movs	r1, #0
 8012a00:	4293      	cmp	r3, r2
 8012a02:	d100      	bne.n	8012a06 <strncpy+0x20>
 8012a04:	bd10      	pop	{r4, pc}
 8012a06:	f803 1b01 	strb.w	r1, [r3], #1
 8012a0a:	e7f9      	b.n	8012a00 <strncpy+0x1a>

08012a0c <_close_r>:
 8012a0c:	b538      	push	{r3, r4, r5, lr}
 8012a0e:	4d06      	ldr	r5, [pc, #24]	@ (8012a28 <_close_r+0x1c>)
 8012a10:	2300      	movs	r3, #0
 8012a12:	4604      	mov	r4, r0
 8012a14:	4608      	mov	r0, r1
 8012a16:	602b      	str	r3, [r5, #0]
 8012a18:	f7f0 f90c 	bl	8002c34 <_close>
 8012a1c:	1c43      	adds	r3, r0, #1
 8012a1e:	d102      	bne.n	8012a26 <_close_r+0x1a>
 8012a20:	682b      	ldr	r3, [r5, #0]
 8012a22:	b103      	cbz	r3, 8012a26 <_close_r+0x1a>
 8012a24:	6023      	str	r3, [r4, #0]
 8012a26:	bd38      	pop	{r3, r4, r5, pc}
 8012a28:	20008c34 	.word	0x20008c34

08012a2c <_lseek_r>:
 8012a2c:	b538      	push	{r3, r4, r5, lr}
 8012a2e:	4d07      	ldr	r5, [pc, #28]	@ (8012a4c <_lseek_r+0x20>)
 8012a30:	4604      	mov	r4, r0
 8012a32:	4608      	mov	r0, r1
 8012a34:	4611      	mov	r1, r2
 8012a36:	2200      	movs	r2, #0
 8012a38:	602a      	str	r2, [r5, #0]
 8012a3a:	461a      	mov	r2, r3
 8012a3c:	f7f0 f921 	bl	8002c82 <_lseek>
 8012a40:	1c43      	adds	r3, r0, #1
 8012a42:	d102      	bne.n	8012a4a <_lseek_r+0x1e>
 8012a44:	682b      	ldr	r3, [r5, #0]
 8012a46:	b103      	cbz	r3, 8012a4a <_lseek_r+0x1e>
 8012a48:	6023      	str	r3, [r4, #0]
 8012a4a:	bd38      	pop	{r3, r4, r5, pc}
 8012a4c:	20008c34 	.word	0x20008c34

08012a50 <_read_r>:
 8012a50:	b538      	push	{r3, r4, r5, lr}
 8012a52:	4d07      	ldr	r5, [pc, #28]	@ (8012a70 <_read_r+0x20>)
 8012a54:	4604      	mov	r4, r0
 8012a56:	4608      	mov	r0, r1
 8012a58:	4611      	mov	r1, r2
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	602a      	str	r2, [r5, #0]
 8012a5e:	461a      	mov	r2, r3
 8012a60:	f7f0 f8af 	bl	8002bc2 <_read>
 8012a64:	1c43      	adds	r3, r0, #1
 8012a66:	d102      	bne.n	8012a6e <_read_r+0x1e>
 8012a68:	682b      	ldr	r3, [r5, #0]
 8012a6a:	b103      	cbz	r3, 8012a6e <_read_r+0x1e>
 8012a6c:	6023      	str	r3, [r4, #0]
 8012a6e:	bd38      	pop	{r3, r4, r5, pc}
 8012a70:	20008c34 	.word	0x20008c34

08012a74 <_write_r>:
 8012a74:	b538      	push	{r3, r4, r5, lr}
 8012a76:	4d07      	ldr	r5, [pc, #28]	@ (8012a94 <_write_r+0x20>)
 8012a78:	4604      	mov	r4, r0
 8012a7a:	4608      	mov	r0, r1
 8012a7c:	4611      	mov	r1, r2
 8012a7e:	2200      	movs	r2, #0
 8012a80:	602a      	str	r2, [r5, #0]
 8012a82:	461a      	mov	r2, r3
 8012a84:	f7f0 f8ba 	bl	8002bfc <_write>
 8012a88:	1c43      	adds	r3, r0, #1
 8012a8a:	d102      	bne.n	8012a92 <_write_r+0x1e>
 8012a8c:	682b      	ldr	r3, [r5, #0]
 8012a8e:	b103      	cbz	r3, 8012a92 <_write_r+0x1e>
 8012a90:	6023      	str	r3, [r4, #0]
 8012a92:	bd38      	pop	{r3, r4, r5, pc}
 8012a94:	20008c34 	.word	0x20008c34

08012a98 <__errno>:
 8012a98:	4b01      	ldr	r3, [pc, #4]	@ (8012aa0 <__errno+0x8>)
 8012a9a:	6818      	ldr	r0, [r3, #0]
 8012a9c:	4770      	bx	lr
 8012a9e:	bf00      	nop
 8012aa0:	200000b0 	.word	0x200000b0

08012aa4 <__libc_init_array>:
 8012aa4:	b570      	push	{r4, r5, r6, lr}
 8012aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8012adc <__libc_init_array+0x38>)
 8012aa8:	4c0d      	ldr	r4, [pc, #52]	@ (8012ae0 <__libc_init_array+0x3c>)
 8012aaa:	1b64      	subs	r4, r4, r5
 8012aac:	10a4      	asrs	r4, r4, #2
 8012aae:	2600      	movs	r6, #0
 8012ab0:	42a6      	cmp	r6, r4
 8012ab2:	d109      	bne.n	8012ac8 <__libc_init_array+0x24>
 8012ab4:	4d0b      	ldr	r5, [pc, #44]	@ (8012ae4 <__libc_init_array+0x40>)
 8012ab6:	4c0c      	ldr	r4, [pc, #48]	@ (8012ae8 <__libc_init_array+0x44>)
 8012ab8:	f001 f824 	bl	8013b04 <_init>
 8012abc:	1b64      	subs	r4, r4, r5
 8012abe:	10a4      	asrs	r4, r4, #2
 8012ac0:	2600      	movs	r6, #0
 8012ac2:	42a6      	cmp	r6, r4
 8012ac4:	d105      	bne.n	8012ad2 <__libc_init_array+0x2e>
 8012ac6:	bd70      	pop	{r4, r5, r6, pc}
 8012ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012acc:	4798      	blx	r3
 8012ace:	3601      	adds	r6, #1
 8012ad0:	e7ee      	b.n	8012ab0 <__libc_init_array+0xc>
 8012ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ad6:	4798      	blx	r3
 8012ad8:	3601      	adds	r6, #1
 8012ada:	e7f2      	b.n	8012ac2 <__libc_init_array+0x1e>
 8012adc:	08016828 	.word	0x08016828
 8012ae0:	08016828 	.word	0x08016828
 8012ae4:	08016828 	.word	0x08016828
 8012ae8:	0801682c 	.word	0x0801682c

08012aec <__retarget_lock_init_recursive>:
 8012aec:	4770      	bx	lr

08012aee <__retarget_lock_acquire_recursive>:
 8012aee:	4770      	bx	lr

08012af0 <__retarget_lock_release_recursive>:
 8012af0:	4770      	bx	lr

08012af2 <memcpy>:
 8012af2:	440a      	add	r2, r1
 8012af4:	4291      	cmp	r1, r2
 8012af6:	f100 33ff 	add.w	r3, r0, #4294967295
 8012afa:	d100      	bne.n	8012afe <memcpy+0xc>
 8012afc:	4770      	bx	lr
 8012afe:	b510      	push	{r4, lr}
 8012b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b08:	4291      	cmp	r1, r2
 8012b0a:	d1f9      	bne.n	8012b00 <memcpy+0xe>
 8012b0c:	bd10      	pop	{r4, pc}
	...

08012b10 <__assert_func>:
 8012b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b12:	4614      	mov	r4, r2
 8012b14:	461a      	mov	r2, r3
 8012b16:	4b09      	ldr	r3, [pc, #36]	@ (8012b3c <__assert_func+0x2c>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	4605      	mov	r5, r0
 8012b1c:	68d8      	ldr	r0, [r3, #12]
 8012b1e:	b14c      	cbz	r4, 8012b34 <__assert_func+0x24>
 8012b20:	4b07      	ldr	r3, [pc, #28]	@ (8012b40 <__assert_func+0x30>)
 8012b22:	9100      	str	r1, [sp, #0]
 8012b24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012b28:	4906      	ldr	r1, [pc, #24]	@ (8012b44 <__assert_func+0x34>)
 8012b2a:	462b      	mov	r3, r5
 8012b2c:	f000 fde0 	bl	80136f0 <fiprintf>
 8012b30:	f000 fe94 	bl	801385c <abort>
 8012b34:	4b04      	ldr	r3, [pc, #16]	@ (8012b48 <__assert_func+0x38>)
 8012b36:	461c      	mov	r4, r3
 8012b38:	e7f3      	b.n	8012b22 <__assert_func+0x12>
 8012b3a:	bf00      	nop
 8012b3c:	200000b0 	.word	0x200000b0
 8012b40:	080166ad 	.word	0x080166ad
 8012b44:	080166ba 	.word	0x080166ba
 8012b48:	080166e8 	.word	0x080166e8

08012b4c <_free_r>:
 8012b4c:	b538      	push	{r3, r4, r5, lr}
 8012b4e:	4605      	mov	r5, r0
 8012b50:	2900      	cmp	r1, #0
 8012b52:	d041      	beq.n	8012bd8 <_free_r+0x8c>
 8012b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b58:	1f0c      	subs	r4, r1, #4
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	bfb8      	it	lt
 8012b5e:	18e4      	addlt	r4, r4, r3
 8012b60:	f000 f8e8 	bl	8012d34 <__malloc_lock>
 8012b64:	4a1d      	ldr	r2, [pc, #116]	@ (8012bdc <_free_r+0x90>)
 8012b66:	6813      	ldr	r3, [r2, #0]
 8012b68:	b933      	cbnz	r3, 8012b78 <_free_r+0x2c>
 8012b6a:	6063      	str	r3, [r4, #4]
 8012b6c:	6014      	str	r4, [r2, #0]
 8012b6e:	4628      	mov	r0, r5
 8012b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b74:	f000 b8e4 	b.w	8012d40 <__malloc_unlock>
 8012b78:	42a3      	cmp	r3, r4
 8012b7a:	d908      	bls.n	8012b8e <_free_r+0x42>
 8012b7c:	6820      	ldr	r0, [r4, #0]
 8012b7e:	1821      	adds	r1, r4, r0
 8012b80:	428b      	cmp	r3, r1
 8012b82:	bf01      	itttt	eq
 8012b84:	6819      	ldreq	r1, [r3, #0]
 8012b86:	685b      	ldreq	r3, [r3, #4]
 8012b88:	1809      	addeq	r1, r1, r0
 8012b8a:	6021      	streq	r1, [r4, #0]
 8012b8c:	e7ed      	b.n	8012b6a <_free_r+0x1e>
 8012b8e:	461a      	mov	r2, r3
 8012b90:	685b      	ldr	r3, [r3, #4]
 8012b92:	b10b      	cbz	r3, 8012b98 <_free_r+0x4c>
 8012b94:	42a3      	cmp	r3, r4
 8012b96:	d9fa      	bls.n	8012b8e <_free_r+0x42>
 8012b98:	6811      	ldr	r1, [r2, #0]
 8012b9a:	1850      	adds	r0, r2, r1
 8012b9c:	42a0      	cmp	r0, r4
 8012b9e:	d10b      	bne.n	8012bb8 <_free_r+0x6c>
 8012ba0:	6820      	ldr	r0, [r4, #0]
 8012ba2:	4401      	add	r1, r0
 8012ba4:	1850      	adds	r0, r2, r1
 8012ba6:	4283      	cmp	r3, r0
 8012ba8:	6011      	str	r1, [r2, #0]
 8012baa:	d1e0      	bne.n	8012b6e <_free_r+0x22>
 8012bac:	6818      	ldr	r0, [r3, #0]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	6053      	str	r3, [r2, #4]
 8012bb2:	4408      	add	r0, r1
 8012bb4:	6010      	str	r0, [r2, #0]
 8012bb6:	e7da      	b.n	8012b6e <_free_r+0x22>
 8012bb8:	d902      	bls.n	8012bc0 <_free_r+0x74>
 8012bba:	230c      	movs	r3, #12
 8012bbc:	602b      	str	r3, [r5, #0]
 8012bbe:	e7d6      	b.n	8012b6e <_free_r+0x22>
 8012bc0:	6820      	ldr	r0, [r4, #0]
 8012bc2:	1821      	adds	r1, r4, r0
 8012bc4:	428b      	cmp	r3, r1
 8012bc6:	bf04      	itt	eq
 8012bc8:	6819      	ldreq	r1, [r3, #0]
 8012bca:	685b      	ldreq	r3, [r3, #4]
 8012bcc:	6063      	str	r3, [r4, #4]
 8012bce:	bf04      	itt	eq
 8012bd0:	1809      	addeq	r1, r1, r0
 8012bd2:	6021      	streq	r1, [r4, #0]
 8012bd4:	6054      	str	r4, [r2, #4]
 8012bd6:	e7ca      	b.n	8012b6e <_free_r+0x22>
 8012bd8:	bd38      	pop	{r3, r4, r5, pc}
 8012bda:	bf00      	nop
 8012bdc:	20008c40 	.word	0x20008c40

08012be0 <malloc>:
 8012be0:	4b02      	ldr	r3, [pc, #8]	@ (8012bec <malloc+0xc>)
 8012be2:	4601      	mov	r1, r0
 8012be4:	6818      	ldr	r0, [r3, #0]
 8012be6:	f000 b825 	b.w	8012c34 <_malloc_r>
 8012bea:	bf00      	nop
 8012bec:	200000b0 	.word	0x200000b0

08012bf0 <sbrk_aligned>:
 8012bf0:	b570      	push	{r4, r5, r6, lr}
 8012bf2:	4e0f      	ldr	r6, [pc, #60]	@ (8012c30 <sbrk_aligned+0x40>)
 8012bf4:	460c      	mov	r4, r1
 8012bf6:	6831      	ldr	r1, [r6, #0]
 8012bf8:	4605      	mov	r5, r0
 8012bfa:	b911      	cbnz	r1, 8012c02 <sbrk_aligned+0x12>
 8012bfc:	f000 fe1e 	bl	801383c <_sbrk_r>
 8012c00:	6030      	str	r0, [r6, #0]
 8012c02:	4621      	mov	r1, r4
 8012c04:	4628      	mov	r0, r5
 8012c06:	f000 fe19 	bl	801383c <_sbrk_r>
 8012c0a:	1c43      	adds	r3, r0, #1
 8012c0c:	d103      	bne.n	8012c16 <sbrk_aligned+0x26>
 8012c0e:	f04f 34ff 	mov.w	r4, #4294967295
 8012c12:	4620      	mov	r0, r4
 8012c14:	bd70      	pop	{r4, r5, r6, pc}
 8012c16:	1cc4      	adds	r4, r0, #3
 8012c18:	f024 0403 	bic.w	r4, r4, #3
 8012c1c:	42a0      	cmp	r0, r4
 8012c1e:	d0f8      	beq.n	8012c12 <sbrk_aligned+0x22>
 8012c20:	1a21      	subs	r1, r4, r0
 8012c22:	4628      	mov	r0, r5
 8012c24:	f000 fe0a 	bl	801383c <_sbrk_r>
 8012c28:	3001      	adds	r0, #1
 8012c2a:	d1f2      	bne.n	8012c12 <sbrk_aligned+0x22>
 8012c2c:	e7ef      	b.n	8012c0e <sbrk_aligned+0x1e>
 8012c2e:	bf00      	nop
 8012c30:	20008c3c 	.word	0x20008c3c

08012c34 <_malloc_r>:
 8012c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c38:	1ccd      	adds	r5, r1, #3
 8012c3a:	f025 0503 	bic.w	r5, r5, #3
 8012c3e:	3508      	adds	r5, #8
 8012c40:	2d0c      	cmp	r5, #12
 8012c42:	bf38      	it	cc
 8012c44:	250c      	movcc	r5, #12
 8012c46:	2d00      	cmp	r5, #0
 8012c48:	4606      	mov	r6, r0
 8012c4a:	db01      	blt.n	8012c50 <_malloc_r+0x1c>
 8012c4c:	42a9      	cmp	r1, r5
 8012c4e:	d904      	bls.n	8012c5a <_malloc_r+0x26>
 8012c50:	230c      	movs	r3, #12
 8012c52:	6033      	str	r3, [r6, #0]
 8012c54:	2000      	movs	r0, #0
 8012c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d30 <_malloc_r+0xfc>
 8012c5e:	f000 f869 	bl	8012d34 <__malloc_lock>
 8012c62:	f8d8 3000 	ldr.w	r3, [r8]
 8012c66:	461c      	mov	r4, r3
 8012c68:	bb44      	cbnz	r4, 8012cbc <_malloc_r+0x88>
 8012c6a:	4629      	mov	r1, r5
 8012c6c:	4630      	mov	r0, r6
 8012c6e:	f7ff ffbf 	bl	8012bf0 <sbrk_aligned>
 8012c72:	1c43      	adds	r3, r0, #1
 8012c74:	4604      	mov	r4, r0
 8012c76:	d158      	bne.n	8012d2a <_malloc_r+0xf6>
 8012c78:	f8d8 4000 	ldr.w	r4, [r8]
 8012c7c:	4627      	mov	r7, r4
 8012c7e:	2f00      	cmp	r7, #0
 8012c80:	d143      	bne.n	8012d0a <_malloc_r+0xd6>
 8012c82:	2c00      	cmp	r4, #0
 8012c84:	d04b      	beq.n	8012d1e <_malloc_r+0xea>
 8012c86:	6823      	ldr	r3, [r4, #0]
 8012c88:	4639      	mov	r1, r7
 8012c8a:	4630      	mov	r0, r6
 8012c8c:	eb04 0903 	add.w	r9, r4, r3
 8012c90:	f000 fdd4 	bl	801383c <_sbrk_r>
 8012c94:	4581      	cmp	r9, r0
 8012c96:	d142      	bne.n	8012d1e <_malloc_r+0xea>
 8012c98:	6821      	ldr	r1, [r4, #0]
 8012c9a:	1a6d      	subs	r5, r5, r1
 8012c9c:	4629      	mov	r1, r5
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	f7ff ffa6 	bl	8012bf0 <sbrk_aligned>
 8012ca4:	3001      	adds	r0, #1
 8012ca6:	d03a      	beq.n	8012d1e <_malloc_r+0xea>
 8012ca8:	6823      	ldr	r3, [r4, #0]
 8012caa:	442b      	add	r3, r5
 8012cac:	6023      	str	r3, [r4, #0]
 8012cae:	f8d8 3000 	ldr.w	r3, [r8]
 8012cb2:	685a      	ldr	r2, [r3, #4]
 8012cb4:	bb62      	cbnz	r2, 8012d10 <_malloc_r+0xdc>
 8012cb6:	f8c8 7000 	str.w	r7, [r8]
 8012cba:	e00f      	b.n	8012cdc <_malloc_r+0xa8>
 8012cbc:	6822      	ldr	r2, [r4, #0]
 8012cbe:	1b52      	subs	r2, r2, r5
 8012cc0:	d420      	bmi.n	8012d04 <_malloc_r+0xd0>
 8012cc2:	2a0b      	cmp	r2, #11
 8012cc4:	d917      	bls.n	8012cf6 <_malloc_r+0xc2>
 8012cc6:	1961      	adds	r1, r4, r5
 8012cc8:	42a3      	cmp	r3, r4
 8012cca:	6025      	str	r5, [r4, #0]
 8012ccc:	bf18      	it	ne
 8012cce:	6059      	strne	r1, [r3, #4]
 8012cd0:	6863      	ldr	r3, [r4, #4]
 8012cd2:	bf08      	it	eq
 8012cd4:	f8c8 1000 	streq.w	r1, [r8]
 8012cd8:	5162      	str	r2, [r4, r5]
 8012cda:	604b      	str	r3, [r1, #4]
 8012cdc:	4630      	mov	r0, r6
 8012cde:	f000 f82f 	bl	8012d40 <__malloc_unlock>
 8012ce2:	f104 000b 	add.w	r0, r4, #11
 8012ce6:	1d23      	adds	r3, r4, #4
 8012ce8:	f020 0007 	bic.w	r0, r0, #7
 8012cec:	1ac2      	subs	r2, r0, r3
 8012cee:	bf1c      	itt	ne
 8012cf0:	1a1b      	subne	r3, r3, r0
 8012cf2:	50a3      	strne	r3, [r4, r2]
 8012cf4:	e7af      	b.n	8012c56 <_malloc_r+0x22>
 8012cf6:	6862      	ldr	r2, [r4, #4]
 8012cf8:	42a3      	cmp	r3, r4
 8012cfa:	bf0c      	ite	eq
 8012cfc:	f8c8 2000 	streq.w	r2, [r8]
 8012d00:	605a      	strne	r2, [r3, #4]
 8012d02:	e7eb      	b.n	8012cdc <_malloc_r+0xa8>
 8012d04:	4623      	mov	r3, r4
 8012d06:	6864      	ldr	r4, [r4, #4]
 8012d08:	e7ae      	b.n	8012c68 <_malloc_r+0x34>
 8012d0a:	463c      	mov	r4, r7
 8012d0c:	687f      	ldr	r7, [r7, #4]
 8012d0e:	e7b6      	b.n	8012c7e <_malloc_r+0x4a>
 8012d10:	461a      	mov	r2, r3
 8012d12:	685b      	ldr	r3, [r3, #4]
 8012d14:	42a3      	cmp	r3, r4
 8012d16:	d1fb      	bne.n	8012d10 <_malloc_r+0xdc>
 8012d18:	2300      	movs	r3, #0
 8012d1a:	6053      	str	r3, [r2, #4]
 8012d1c:	e7de      	b.n	8012cdc <_malloc_r+0xa8>
 8012d1e:	230c      	movs	r3, #12
 8012d20:	6033      	str	r3, [r6, #0]
 8012d22:	4630      	mov	r0, r6
 8012d24:	f000 f80c 	bl	8012d40 <__malloc_unlock>
 8012d28:	e794      	b.n	8012c54 <_malloc_r+0x20>
 8012d2a:	6005      	str	r5, [r0, #0]
 8012d2c:	e7d6      	b.n	8012cdc <_malloc_r+0xa8>
 8012d2e:	bf00      	nop
 8012d30:	20008c40 	.word	0x20008c40

08012d34 <__malloc_lock>:
 8012d34:	4801      	ldr	r0, [pc, #4]	@ (8012d3c <__malloc_lock+0x8>)
 8012d36:	f7ff beda 	b.w	8012aee <__retarget_lock_acquire_recursive>
 8012d3a:	bf00      	nop
 8012d3c:	20008c38 	.word	0x20008c38

08012d40 <__malloc_unlock>:
 8012d40:	4801      	ldr	r0, [pc, #4]	@ (8012d48 <__malloc_unlock+0x8>)
 8012d42:	f7ff bed5 	b.w	8012af0 <__retarget_lock_release_recursive>
 8012d46:	bf00      	nop
 8012d48:	20008c38 	.word	0x20008c38

08012d4c <__ssputs_r>:
 8012d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d50:	688e      	ldr	r6, [r1, #8]
 8012d52:	461f      	mov	r7, r3
 8012d54:	42be      	cmp	r6, r7
 8012d56:	680b      	ldr	r3, [r1, #0]
 8012d58:	4682      	mov	sl, r0
 8012d5a:	460c      	mov	r4, r1
 8012d5c:	4690      	mov	r8, r2
 8012d5e:	d82d      	bhi.n	8012dbc <__ssputs_r+0x70>
 8012d60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012d64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012d68:	d026      	beq.n	8012db8 <__ssputs_r+0x6c>
 8012d6a:	6965      	ldr	r5, [r4, #20]
 8012d6c:	6909      	ldr	r1, [r1, #16]
 8012d6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d72:	eba3 0901 	sub.w	r9, r3, r1
 8012d76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012d7a:	1c7b      	adds	r3, r7, #1
 8012d7c:	444b      	add	r3, r9
 8012d7e:	106d      	asrs	r5, r5, #1
 8012d80:	429d      	cmp	r5, r3
 8012d82:	bf38      	it	cc
 8012d84:	461d      	movcc	r5, r3
 8012d86:	0553      	lsls	r3, r2, #21
 8012d88:	d527      	bpl.n	8012dda <__ssputs_r+0x8e>
 8012d8a:	4629      	mov	r1, r5
 8012d8c:	f7ff ff52 	bl	8012c34 <_malloc_r>
 8012d90:	4606      	mov	r6, r0
 8012d92:	b360      	cbz	r0, 8012dee <__ssputs_r+0xa2>
 8012d94:	6921      	ldr	r1, [r4, #16]
 8012d96:	464a      	mov	r2, r9
 8012d98:	f7ff feab 	bl	8012af2 <memcpy>
 8012d9c:	89a3      	ldrh	r3, [r4, #12]
 8012d9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012da6:	81a3      	strh	r3, [r4, #12]
 8012da8:	6126      	str	r6, [r4, #16]
 8012daa:	6165      	str	r5, [r4, #20]
 8012dac:	444e      	add	r6, r9
 8012dae:	eba5 0509 	sub.w	r5, r5, r9
 8012db2:	6026      	str	r6, [r4, #0]
 8012db4:	60a5      	str	r5, [r4, #8]
 8012db6:	463e      	mov	r6, r7
 8012db8:	42be      	cmp	r6, r7
 8012dba:	d900      	bls.n	8012dbe <__ssputs_r+0x72>
 8012dbc:	463e      	mov	r6, r7
 8012dbe:	6820      	ldr	r0, [r4, #0]
 8012dc0:	4632      	mov	r2, r6
 8012dc2:	4641      	mov	r1, r8
 8012dc4:	f7ff fded 	bl	80129a2 <memmove>
 8012dc8:	68a3      	ldr	r3, [r4, #8]
 8012dca:	1b9b      	subs	r3, r3, r6
 8012dcc:	60a3      	str	r3, [r4, #8]
 8012dce:	6823      	ldr	r3, [r4, #0]
 8012dd0:	4433      	add	r3, r6
 8012dd2:	6023      	str	r3, [r4, #0]
 8012dd4:	2000      	movs	r0, #0
 8012dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dda:	462a      	mov	r2, r5
 8012ddc:	f000 fd45 	bl	801386a <_realloc_r>
 8012de0:	4606      	mov	r6, r0
 8012de2:	2800      	cmp	r0, #0
 8012de4:	d1e0      	bne.n	8012da8 <__ssputs_r+0x5c>
 8012de6:	6921      	ldr	r1, [r4, #16]
 8012de8:	4650      	mov	r0, sl
 8012dea:	f7ff feaf 	bl	8012b4c <_free_r>
 8012dee:	230c      	movs	r3, #12
 8012df0:	f8ca 3000 	str.w	r3, [sl]
 8012df4:	89a3      	ldrh	r3, [r4, #12]
 8012df6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012dfa:	81a3      	strh	r3, [r4, #12]
 8012dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8012e00:	e7e9      	b.n	8012dd6 <__ssputs_r+0x8a>
	...

08012e04 <_svfiprintf_r>:
 8012e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e08:	4698      	mov	r8, r3
 8012e0a:	898b      	ldrh	r3, [r1, #12]
 8012e0c:	061b      	lsls	r3, r3, #24
 8012e0e:	b09d      	sub	sp, #116	@ 0x74
 8012e10:	4607      	mov	r7, r0
 8012e12:	460d      	mov	r5, r1
 8012e14:	4614      	mov	r4, r2
 8012e16:	d510      	bpl.n	8012e3a <_svfiprintf_r+0x36>
 8012e18:	690b      	ldr	r3, [r1, #16]
 8012e1a:	b973      	cbnz	r3, 8012e3a <_svfiprintf_r+0x36>
 8012e1c:	2140      	movs	r1, #64	@ 0x40
 8012e1e:	f7ff ff09 	bl	8012c34 <_malloc_r>
 8012e22:	6028      	str	r0, [r5, #0]
 8012e24:	6128      	str	r0, [r5, #16]
 8012e26:	b930      	cbnz	r0, 8012e36 <_svfiprintf_r+0x32>
 8012e28:	230c      	movs	r3, #12
 8012e2a:	603b      	str	r3, [r7, #0]
 8012e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8012e30:	b01d      	add	sp, #116	@ 0x74
 8012e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e36:	2340      	movs	r3, #64	@ 0x40
 8012e38:	616b      	str	r3, [r5, #20]
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e3e:	2320      	movs	r3, #32
 8012e40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012e44:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e48:	2330      	movs	r3, #48	@ 0x30
 8012e4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012fe8 <_svfiprintf_r+0x1e4>
 8012e4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012e52:	f04f 0901 	mov.w	r9, #1
 8012e56:	4623      	mov	r3, r4
 8012e58:	469a      	mov	sl, r3
 8012e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e5e:	b10a      	cbz	r2, 8012e64 <_svfiprintf_r+0x60>
 8012e60:	2a25      	cmp	r2, #37	@ 0x25
 8012e62:	d1f9      	bne.n	8012e58 <_svfiprintf_r+0x54>
 8012e64:	ebba 0b04 	subs.w	fp, sl, r4
 8012e68:	d00b      	beq.n	8012e82 <_svfiprintf_r+0x7e>
 8012e6a:	465b      	mov	r3, fp
 8012e6c:	4622      	mov	r2, r4
 8012e6e:	4629      	mov	r1, r5
 8012e70:	4638      	mov	r0, r7
 8012e72:	f7ff ff6b 	bl	8012d4c <__ssputs_r>
 8012e76:	3001      	adds	r0, #1
 8012e78:	f000 80a7 	beq.w	8012fca <_svfiprintf_r+0x1c6>
 8012e7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e7e:	445a      	add	r2, fp
 8012e80:	9209      	str	r2, [sp, #36]	@ 0x24
 8012e82:	f89a 3000 	ldrb.w	r3, [sl]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	f000 809f 	beq.w	8012fca <_svfiprintf_r+0x1c6>
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8012e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e96:	f10a 0a01 	add.w	sl, sl, #1
 8012e9a:	9304      	str	r3, [sp, #16]
 8012e9c:	9307      	str	r3, [sp, #28]
 8012e9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012ea2:	931a      	str	r3, [sp, #104]	@ 0x68
 8012ea4:	4654      	mov	r4, sl
 8012ea6:	2205      	movs	r2, #5
 8012ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012eac:	484e      	ldr	r0, [pc, #312]	@ (8012fe8 <_svfiprintf_r+0x1e4>)
 8012eae:	f7ed f98f 	bl	80001d0 <memchr>
 8012eb2:	9a04      	ldr	r2, [sp, #16]
 8012eb4:	b9d8      	cbnz	r0, 8012eee <_svfiprintf_r+0xea>
 8012eb6:	06d0      	lsls	r0, r2, #27
 8012eb8:	bf44      	itt	mi
 8012eba:	2320      	movmi	r3, #32
 8012ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ec0:	0711      	lsls	r1, r2, #28
 8012ec2:	bf44      	itt	mi
 8012ec4:	232b      	movmi	r3, #43	@ 0x2b
 8012ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012eca:	f89a 3000 	ldrb.w	r3, [sl]
 8012ece:	2b2a      	cmp	r3, #42	@ 0x2a
 8012ed0:	d015      	beq.n	8012efe <_svfiprintf_r+0xfa>
 8012ed2:	9a07      	ldr	r2, [sp, #28]
 8012ed4:	4654      	mov	r4, sl
 8012ed6:	2000      	movs	r0, #0
 8012ed8:	f04f 0c0a 	mov.w	ip, #10
 8012edc:	4621      	mov	r1, r4
 8012ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ee2:	3b30      	subs	r3, #48	@ 0x30
 8012ee4:	2b09      	cmp	r3, #9
 8012ee6:	d94b      	bls.n	8012f80 <_svfiprintf_r+0x17c>
 8012ee8:	b1b0      	cbz	r0, 8012f18 <_svfiprintf_r+0x114>
 8012eea:	9207      	str	r2, [sp, #28]
 8012eec:	e014      	b.n	8012f18 <_svfiprintf_r+0x114>
 8012eee:	eba0 0308 	sub.w	r3, r0, r8
 8012ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8012ef6:	4313      	orrs	r3, r2
 8012ef8:	9304      	str	r3, [sp, #16]
 8012efa:	46a2      	mov	sl, r4
 8012efc:	e7d2      	b.n	8012ea4 <_svfiprintf_r+0xa0>
 8012efe:	9b03      	ldr	r3, [sp, #12]
 8012f00:	1d19      	adds	r1, r3, #4
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	9103      	str	r1, [sp, #12]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	bfbb      	ittet	lt
 8012f0a:	425b      	neglt	r3, r3
 8012f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8012f10:	9307      	strge	r3, [sp, #28]
 8012f12:	9307      	strlt	r3, [sp, #28]
 8012f14:	bfb8      	it	lt
 8012f16:	9204      	strlt	r2, [sp, #16]
 8012f18:	7823      	ldrb	r3, [r4, #0]
 8012f1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f1c:	d10a      	bne.n	8012f34 <_svfiprintf_r+0x130>
 8012f1e:	7863      	ldrb	r3, [r4, #1]
 8012f20:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f22:	d132      	bne.n	8012f8a <_svfiprintf_r+0x186>
 8012f24:	9b03      	ldr	r3, [sp, #12]
 8012f26:	1d1a      	adds	r2, r3, #4
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	9203      	str	r2, [sp, #12]
 8012f2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012f30:	3402      	adds	r4, #2
 8012f32:	9305      	str	r3, [sp, #20]
 8012f34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012ff8 <_svfiprintf_r+0x1f4>
 8012f38:	7821      	ldrb	r1, [r4, #0]
 8012f3a:	2203      	movs	r2, #3
 8012f3c:	4650      	mov	r0, sl
 8012f3e:	f7ed f947 	bl	80001d0 <memchr>
 8012f42:	b138      	cbz	r0, 8012f54 <_svfiprintf_r+0x150>
 8012f44:	9b04      	ldr	r3, [sp, #16]
 8012f46:	eba0 000a 	sub.w	r0, r0, sl
 8012f4a:	2240      	movs	r2, #64	@ 0x40
 8012f4c:	4082      	lsls	r2, r0
 8012f4e:	4313      	orrs	r3, r2
 8012f50:	3401      	adds	r4, #1
 8012f52:	9304      	str	r3, [sp, #16]
 8012f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f58:	4824      	ldr	r0, [pc, #144]	@ (8012fec <_svfiprintf_r+0x1e8>)
 8012f5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012f5e:	2206      	movs	r2, #6
 8012f60:	f7ed f936 	bl	80001d0 <memchr>
 8012f64:	2800      	cmp	r0, #0
 8012f66:	d036      	beq.n	8012fd6 <_svfiprintf_r+0x1d2>
 8012f68:	4b21      	ldr	r3, [pc, #132]	@ (8012ff0 <_svfiprintf_r+0x1ec>)
 8012f6a:	bb1b      	cbnz	r3, 8012fb4 <_svfiprintf_r+0x1b0>
 8012f6c:	9b03      	ldr	r3, [sp, #12]
 8012f6e:	3307      	adds	r3, #7
 8012f70:	f023 0307 	bic.w	r3, r3, #7
 8012f74:	3308      	adds	r3, #8
 8012f76:	9303      	str	r3, [sp, #12]
 8012f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f7a:	4433      	add	r3, r6
 8012f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f7e:	e76a      	b.n	8012e56 <_svfiprintf_r+0x52>
 8012f80:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f84:	460c      	mov	r4, r1
 8012f86:	2001      	movs	r0, #1
 8012f88:	e7a8      	b.n	8012edc <_svfiprintf_r+0xd8>
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	3401      	adds	r4, #1
 8012f8e:	9305      	str	r3, [sp, #20]
 8012f90:	4619      	mov	r1, r3
 8012f92:	f04f 0c0a 	mov.w	ip, #10
 8012f96:	4620      	mov	r0, r4
 8012f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f9c:	3a30      	subs	r2, #48	@ 0x30
 8012f9e:	2a09      	cmp	r2, #9
 8012fa0:	d903      	bls.n	8012faa <_svfiprintf_r+0x1a6>
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d0c6      	beq.n	8012f34 <_svfiprintf_r+0x130>
 8012fa6:	9105      	str	r1, [sp, #20]
 8012fa8:	e7c4      	b.n	8012f34 <_svfiprintf_r+0x130>
 8012faa:	fb0c 2101 	mla	r1, ip, r1, r2
 8012fae:	4604      	mov	r4, r0
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	e7f0      	b.n	8012f96 <_svfiprintf_r+0x192>
 8012fb4:	ab03      	add	r3, sp, #12
 8012fb6:	9300      	str	r3, [sp, #0]
 8012fb8:	462a      	mov	r2, r5
 8012fba:	4b0e      	ldr	r3, [pc, #56]	@ (8012ff4 <_svfiprintf_r+0x1f0>)
 8012fbc:	a904      	add	r1, sp, #16
 8012fbe:	4638      	mov	r0, r7
 8012fc0:	f3af 8000 	nop.w
 8012fc4:	1c42      	adds	r2, r0, #1
 8012fc6:	4606      	mov	r6, r0
 8012fc8:	d1d6      	bne.n	8012f78 <_svfiprintf_r+0x174>
 8012fca:	89ab      	ldrh	r3, [r5, #12]
 8012fcc:	065b      	lsls	r3, r3, #25
 8012fce:	f53f af2d 	bmi.w	8012e2c <_svfiprintf_r+0x28>
 8012fd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012fd4:	e72c      	b.n	8012e30 <_svfiprintf_r+0x2c>
 8012fd6:	ab03      	add	r3, sp, #12
 8012fd8:	9300      	str	r3, [sp, #0]
 8012fda:	462a      	mov	r2, r5
 8012fdc:	4b05      	ldr	r3, [pc, #20]	@ (8012ff4 <_svfiprintf_r+0x1f0>)
 8012fde:	a904      	add	r1, sp, #16
 8012fe0:	4638      	mov	r0, r7
 8012fe2:	f000 f9bb 	bl	801335c <_printf_i>
 8012fe6:	e7ed      	b.n	8012fc4 <_svfiprintf_r+0x1c0>
 8012fe8:	080166e9 	.word	0x080166e9
 8012fec:	080166f3 	.word	0x080166f3
 8012ff0:	00000000 	.word	0x00000000
 8012ff4:	08012d4d 	.word	0x08012d4d
 8012ff8:	080166ef 	.word	0x080166ef

08012ffc <__sfputc_r>:
 8012ffc:	6893      	ldr	r3, [r2, #8]
 8012ffe:	3b01      	subs	r3, #1
 8013000:	2b00      	cmp	r3, #0
 8013002:	b410      	push	{r4}
 8013004:	6093      	str	r3, [r2, #8]
 8013006:	da08      	bge.n	801301a <__sfputc_r+0x1e>
 8013008:	6994      	ldr	r4, [r2, #24]
 801300a:	42a3      	cmp	r3, r4
 801300c:	db01      	blt.n	8013012 <__sfputc_r+0x16>
 801300e:	290a      	cmp	r1, #10
 8013010:	d103      	bne.n	801301a <__sfputc_r+0x1e>
 8013012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013016:	f000 bb7d 	b.w	8013714 <__swbuf_r>
 801301a:	6813      	ldr	r3, [r2, #0]
 801301c:	1c58      	adds	r0, r3, #1
 801301e:	6010      	str	r0, [r2, #0]
 8013020:	7019      	strb	r1, [r3, #0]
 8013022:	4608      	mov	r0, r1
 8013024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013028:	4770      	bx	lr

0801302a <__sfputs_r>:
 801302a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801302c:	4606      	mov	r6, r0
 801302e:	460f      	mov	r7, r1
 8013030:	4614      	mov	r4, r2
 8013032:	18d5      	adds	r5, r2, r3
 8013034:	42ac      	cmp	r4, r5
 8013036:	d101      	bne.n	801303c <__sfputs_r+0x12>
 8013038:	2000      	movs	r0, #0
 801303a:	e007      	b.n	801304c <__sfputs_r+0x22>
 801303c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013040:	463a      	mov	r2, r7
 8013042:	4630      	mov	r0, r6
 8013044:	f7ff ffda 	bl	8012ffc <__sfputc_r>
 8013048:	1c43      	adds	r3, r0, #1
 801304a:	d1f3      	bne.n	8013034 <__sfputs_r+0xa>
 801304c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013050 <_vfiprintf_r>:
 8013050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013054:	460d      	mov	r5, r1
 8013056:	b09d      	sub	sp, #116	@ 0x74
 8013058:	4614      	mov	r4, r2
 801305a:	4698      	mov	r8, r3
 801305c:	4606      	mov	r6, r0
 801305e:	b118      	cbz	r0, 8013068 <_vfiprintf_r+0x18>
 8013060:	6a03      	ldr	r3, [r0, #32]
 8013062:	b90b      	cbnz	r3, 8013068 <_vfiprintf_r+0x18>
 8013064:	f7ff fbe0 	bl	8012828 <__sinit>
 8013068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801306a:	07d9      	lsls	r1, r3, #31
 801306c:	d405      	bmi.n	801307a <_vfiprintf_r+0x2a>
 801306e:	89ab      	ldrh	r3, [r5, #12]
 8013070:	059a      	lsls	r2, r3, #22
 8013072:	d402      	bmi.n	801307a <_vfiprintf_r+0x2a>
 8013074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013076:	f7ff fd3a 	bl	8012aee <__retarget_lock_acquire_recursive>
 801307a:	89ab      	ldrh	r3, [r5, #12]
 801307c:	071b      	lsls	r3, r3, #28
 801307e:	d501      	bpl.n	8013084 <_vfiprintf_r+0x34>
 8013080:	692b      	ldr	r3, [r5, #16]
 8013082:	b99b      	cbnz	r3, 80130ac <_vfiprintf_r+0x5c>
 8013084:	4629      	mov	r1, r5
 8013086:	4630      	mov	r0, r6
 8013088:	f000 fb82 	bl	8013790 <__swsetup_r>
 801308c:	b170      	cbz	r0, 80130ac <_vfiprintf_r+0x5c>
 801308e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013090:	07dc      	lsls	r4, r3, #31
 8013092:	d504      	bpl.n	801309e <_vfiprintf_r+0x4e>
 8013094:	f04f 30ff 	mov.w	r0, #4294967295
 8013098:	b01d      	add	sp, #116	@ 0x74
 801309a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801309e:	89ab      	ldrh	r3, [r5, #12]
 80130a0:	0598      	lsls	r0, r3, #22
 80130a2:	d4f7      	bmi.n	8013094 <_vfiprintf_r+0x44>
 80130a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80130a6:	f7ff fd23 	bl	8012af0 <__retarget_lock_release_recursive>
 80130aa:	e7f3      	b.n	8013094 <_vfiprintf_r+0x44>
 80130ac:	2300      	movs	r3, #0
 80130ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80130b0:	2320      	movs	r3, #32
 80130b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80130b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80130ba:	2330      	movs	r3, #48	@ 0x30
 80130bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801326c <_vfiprintf_r+0x21c>
 80130c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80130c4:	f04f 0901 	mov.w	r9, #1
 80130c8:	4623      	mov	r3, r4
 80130ca:	469a      	mov	sl, r3
 80130cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130d0:	b10a      	cbz	r2, 80130d6 <_vfiprintf_r+0x86>
 80130d2:	2a25      	cmp	r2, #37	@ 0x25
 80130d4:	d1f9      	bne.n	80130ca <_vfiprintf_r+0x7a>
 80130d6:	ebba 0b04 	subs.w	fp, sl, r4
 80130da:	d00b      	beq.n	80130f4 <_vfiprintf_r+0xa4>
 80130dc:	465b      	mov	r3, fp
 80130de:	4622      	mov	r2, r4
 80130e0:	4629      	mov	r1, r5
 80130e2:	4630      	mov	r0, r6
 80130e4:	f7ff ffa1 	bl	801302a <__sfputs_r>
 80130e8:	3001      	adds	r0, #1
 80130ea:	f000 80a7 	beq.w	801323c <_vfiprintf_r+0x1ec>
 80130ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80130f0:	445a      	add	r2, fp
 80130f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80130f4:	f89a 3000 	ldrb.w	r3, [sl]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	f000 809f 	beq.w	801323c <_vfiprintf_r+0x1ec>
 80130fe:	2300      	movs	r3, #0
 8013100:	f04f 32ff 	mov.w	r2, #4294967295
 8013104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013108:	f10a 0a01 	add.w	sl, sl, #1
 801310c:	9304      	str	r3, [sp, #16]
 801310e:	9307      	str	r3, [sp, #28]
 8013110:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013114:	931a      	str	r3, [sp, #104]	@ 0x68
 8013116:	4654      	mov	r4, sl
 8013118:	2205      	movs	r2, #5
 801311a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801311e:	4853      	ldr	r0, [pc, #332]	@ (801326c <_vfiprintf_r+0x21c>)
 8013120:	f7ed f856 	bl	80001d0 <memchr>
 8013124:	9a04      	ldr	r2, [sp, #16]
 8013126:	b9d8      	cbnz	r0, 8013160 <_vfiprintf_r+0x110>
 8013128:	06d1      	lsls	r1, r2, #27
 801312a:	bf44      	itt	mi
 801312c:	2320      	movmi	r3, #32
 801312e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013132:	0713      	lsls	r3, r2, #28
 8013134:	bf44      	itt	mi
 8013136:	232b      	movmi	r3, #43	@ 0x2b
 8013138:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801313c:	f89a 3000 	ldrb.w	r3, [sl]
 8013140:	2b2a      	cmp	r3, #42	@ 0x2a
 8013142:	d015      	beq.n	8013170 <_vfiprintf_r+0x120>
 8013144:	9a07      	ldr	r2, [sp, #28]
 8013146:	4654      	mov	r4, sl
 8013148:	2000      	movs	r0, #0
 801314a:	f04f 0c0a 	mov.w	ip, #10
 801314e:	4621      	mov	r1, r4
 8013150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013154:	3b30      	subs	r3, #48	@ 0x30
 8013156:	2b09      	cmp	r3, #9
 8013158:	d94b      	bls.n	80131f2 <_vfiprintf_r+0x1a2>
 801315a:	b1b0      	cbz	r0, 801318a <_vfiprintf_r+0x13a>
 801315c:	9207      	str	r2, [sp, #28]
 801315e:	e014      	b.n	801318a <_vfiprintf_r+0x13a>
 8013160:	eba0 0308 	sub.w	r3, r0, r8
 8013164:	fa09 f303 	lsl.w	r3, r9, r3
 8013168:	4313      	orrs	r3, r2
 801316a:	9304      	str	r3, [sp, #16]
 801316c:	46a2      	mov	sl, r4
 801316e:	e7d2      	b.n	8013116 <_vfiprintf_r+0xc6>
 8013170:	9b03      	ldr	r3, [sp, #12]
 8013172:	1d19      	adds	r1, r3, #4
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	9103      	str	r1, [sp, #12]
 8013178:	2b00      	cmp	r3, #0
 801317a:	bfbb      	ittet	lt
 801317c:	425b      	neglt	r3, r3
 801317e:	f042 0202 	orrlt.w	r2, r2, #2
 8013182:	9307      	strge	r3, [sp, #28]
 8013184:	9307      	strlt	r3, [sp, #28]
 8013186:	bfb8      	it	lt
 8013188:	9204      	strlt	r2, [sp, #16]
 801318a:	7823      	ldrb	r3, [r4, #0]
 801318c:	2b2e      	cmp	r3, #46	@ 0x2e
 801318e:	d10a      	bne.n	80131a6 <_vfiprintf_r+0x156>
 8013190:	7863      	ldrb	r3, [r4, #1]
 8013192:	2b2a      	cmp	r3, #42	@ 0x2a
 8013194:	d132      	bne.n	80131fc <_vfiprintf_r+0x1ac>
 8013196:	9b03      	ldr	r3, [sp, #12]
 8013198:	1d1a      	adds	r2, r3, #4
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	9203      	str	r2, [sp, #12]
 801319e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80131a2:	3402      	adds	r4, #2
 80131a4:	9305      	str	r3, [sp, #20]
 80131a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801327c <_vfiprintf_r+0x22c>
 80131aa:	7821      	ldrb	r1, [r4, #0]
 80131ac:	2203      	movs	r2, #3
 80131ae:	4650      	mov	r0, sl
 80131b0:	f7ed f80e 	bl	80001d0 <memchr>
 80131b4:	b138      	cbz	r0, 80131c6 <_vfiprintf_r+0x176>
 80131b6:	9b04      	ldr	r3, [sp, #16]
 80131b8:	eba0 000a 	sub.w	r0, r0, sl
 80131bc:	2240      	movs	r2, #64	@ 0x40
 80131be:	4082      	lsls	r2, r0
 80131c0:	4313      	orrs	r3, r2
 80131c2:	3401      	adds	r4, #1
 80131c4:	9304      	str	r3, [sp, #16]
 80131c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131ca:	4829      	ldr	r0, [pc, #164]	@ (8013270 <_vfiprintf_r+0x220>)
 80131cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80131d0:	2206      	movs	r2, #6
 80131d2:	f7ec fffd 	bl	80001d0 <memchr>
 80131d6:	2800      	cmp	r0, #0
 80131d8:	d03f      	beq.n	801325a <_vfiprintf_r+0x20a>
 80131da:	4b26      	ldr	r3, [pc, #152]	@ (8013274 <_vfiprintf_r+0x224>)
 80131dc:	bb1b      	cbnz	r3, 8013226 <_vfiprintf_r+0x1d6>
 80131de:	9b03      	ldr	r3, [sp, #12]
 80131e0:	3307      	adds	r3, #7
 80131e2:	f023 0307 	bic.w	r3, r3, #7
 80131e6:	3308      	adds	r3, #8
 80131e8:	9303      	str	r3, [sp, #12]
 80131ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131ec:	443b      	add	r3, r7
 80131ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80131f0:	e76a      	b.n	80130c8 <_vfiprintf_r+0x78>
 80131f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80131f6:	460c      	mov	r4, r1
 80131f8:	2001      	movs	r0, #1
 80131fa:	e7a8      	b.n	801314e <_vfiprintf_r+0xfe>
 80131fc:	2300      	movs	r3, #0
 80131fe:	3401      	adds	r4, #1
 8013200:	9305      	str	r3, [sp, #20]
 8013202:	4619      	mov	r1, r3
 8013204:	f04f 0c0a 	mov.w	ip, #10
 8013208:	4620      	mov	r0, r4
 801320a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801320e:	3a30      	subs	r2, #48	@ 0x30
 8013210:	2a09      	cmp	r2, #9
 8013212:	d903      	bls.n	801321c <_vfiprintf_r+0x1cc>
 8013214:	2b00      	cmp	r3, #0
 8013216:	d0c6      	beq.n	80131a6 <_vfiprintf_r+0x156>
 8013218:	9105      	str	r1, [sp, #20]
 801321a:	e7c4      	b.n	80131a6 <_vfiprintf_r+0x156>
 801321c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013220:	4604      	mov	r4, r0
 8013222:	2301      	movs	r3, #1
 8013224:	e7f0      	b.n	8013208 <_vfiprintf_r+0x1b8>
 8013226:	ab03      	add	r3, sp, #12
 8013228:	9300      	str	r3, [sp, #0]
 801322a:	462a      	mov	r2, r5
 801322c:	4b12      	ldr	r3, [pc, #72]	@ (8013278 <_vfiprintf_r+0x228>)
 801322e:	a904      	add	r1, sp, #16
 8013230:	4630      	mov	r0, r6
 8013232:	f3af 8000 	nop.w
 8013236:	4607      	mov	r7, r0
 8013238:	1c78      	adds	r0, r7, #1
 801323a:	d1d6      	bne.n	80131ea <_vfiprintf_r+0x19a>
 801323c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801323e:	07d9      	lsls	r1, r3, #31
 8013240:	d405      	bmi.n	801324e <_vfiprintf_r+0x1fe>
 8013242:	89ab      	ldrh	r3, [r5, #12]
 8013244:	059a      	lsls	r2, r3, #22
 8013246:	d402      	bmi.n	801324e <_vfiprintf_r+0x1fe>
 8013248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801324a:	f7ff fc51 	bl	8012af0 <__retarget_lock_release_recursive>
 801324e:	89ab      	ldrh	r3, [r5, #12]
 8013250:	065b      	lsls	r3, r3, #25
 8013252:	f53f af1f 	bmi.w	8013094 <_vfiprintf_r+0x44>
 8013256:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013258:	e71e      	b.n	8013098 <_vfiprintf_r+0x48>
 801325a:	ab03      	add	r3, sp, #12
 801325c:	9300      	str	r3, [sp, #0]
 801325e:	462a      	mov	r2, r5
 8013260:	4b05      	ldr	r3, [pc, #20]	@ (8013278 <_vfiprintf_r+0x228>)
 8013262:	a904      	add	r1, sp, #16
 8013264:	4630      	mov	r0, r6
 8013266:	f000 f879 	bl	801335c <_printf_i>
 801326a:	e7e4      	b.n	8013236 <_vfiprintf_r+0x1e6>
 801326c:	080166e9 	.word	0x080166e9
 8013270:	080166f3 	.word	0x080166f3
 8013274:	00000000 	.word	0x00000000
 8013278:	0801302b 	.word	0x0801302b
 801327c:	080166ef 	.word	0x080166ef

08013280 <_printf_common>:
 8013280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013284:	4616      	mov	r6, r2
 8013286:	4698      	mov	r8, r3
 8013288:	688a      	ldr	r2, [r1, #8]
 801328a:	690b      	ldr	r3, [r1, #16]
 801328c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013290:	4293      	cmp	r3, r2
 8013292:	bfb8      	it	lt
 8013294:	4613      	movlt	r3, r2
 8013296:	6033      	str	r3, [r6, #0]
 8013298:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801329c:	4607      	mov	r7, r0
 801329e:	460c      	mov	r4, r1
 80132a0:	b10a      	cbz	r2, 80132a6 <_printf_common+0x26>
 80132a2:	3301      	adds	r3, #1
 80132a4:	6033      	str	r3, [r6, #0]
 80132a6:	6823      	ldr	r3, [r4, #0]
 80132a8:	0699      	lsls	r1, r3, #26
 80132aa:	bf42      	ittt	mi
 80132ac:	6833      	ldrmi	r3, [r6, #0]
 80132ae:	3302      	addmi	r3, #2
 80132b0:	6033      	strmi	r3, [r6, #0]
 80132b2:	6825      	ldr	r5, [r4, #0]
 80132b4:	f015 0506 	ands.w	r5, r5, #6
 80132b8:	d106      	bne.n	80132c8 <_printf_common+0x48>
 80132ba:	f104 0a19 	add.w	sl, r4, #25
 80132be:	68e3      	ldr	r3, [r4, #12]
 80132c0:	6832      	ldr	r2, [r6, #0]
 80132c2:	1a9b      	subs	r3, r3, r2
 80132c4:	42ab      	cmp	r3, r5
 80132c6:	dc26      	bgt.n	8013316 <_printf_common+0x96>
 80132c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80132cc:	6822      	ldr	r2, [r4, #0]
 80132ce:	3b00      	subs	r3, #0
 80132d0:	bf18      	it	ne
 80132d2:	2301      	movne	r3, #1
 80132d4:	0692      	lsls	r2, r2, #26
 80132d6:	d42b      	bmi.n	8013330 <_printf_common+0xb0>
 80132d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80132dc:	4641      	mov	r1, r8
 80132de:	4638      	mov	r0, r7
 80132e0:	47c8      	blx	r9
 80132e2:	3001      	adds	r0, #1
 80132e4:	d01e      	beq.n	8013324 <_printf_common+0xa4>
 80132e6:	6823      	ldr	r3, [r4, #0]
 80132e8:	6922      	ldr	r2, [r4, #16]
 80132ea:	f003 0306 	and.w	r3, r3, #6
 80132ee:	2b04      	cmp	r3, #4
 80132f0:	bf02      	ittt	eq
 80132f2:	68e5      	ldreq	r5, [r4, #12]
 80132f4:	6833      	ldreq	r3, [r6, #0]
 80132f6:	1aed      	subeq	r5, r5, r3
 80132f8:	68a3      	ldr	r3, [r4, #8]
 80132fa:	bf0c      	ite	eq
 80132fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013300:	2500      	movne	r5, #0
 8013302:	4293      	cmp	r3, r2
 8013304:	bfc4      	itt	gt
 8013306:	1a9b      	subgt	r3, r3, r2
 8013308:	18ed      	addgt	r5, r5, r3
 801330a:	2600      	movs	r6, #0
 801330c:	341a      	adds	r4, #26
 801330e:	42b5      	cmp	r5, r6
 8013310:	d11a      	bne.n	8013348 <_printf_common+0xc8>
 8013312:	2000      	movs	r0, #0
 8013314:	e008      	b.n	8013328 <_printf_common+0xa8>
 8013316:	2301      	movs	r3, #1
 8013318:	4652      	mov	r2, sl
 801331a:	4641      	mov	r1, r8
 801331c:	4638      	mov	r0, r7
 801331e:	47c8      	blx	r9
 8013320:	3001      	adds	r0, #1
 8013322:	d103      	bne.n	801332c <_printf_common+0xac>
 8013324:	f04f 30ff 	mov.w	r0, #4294967295
 8013328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801332c:	3501      	adds	r5, #1
 801332e:	e7c6      	b.n	80132be <_printf_common+0x3e>
 8013330:	18e1      	adds	r1, r4, r3
 8013332:	1c5a      	adds	r2, r3, #1
 8013334:	2030      	movs	r0, #48	@ 0x30
 8013336:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801333a:	4422      	add	r2, r4
 801333c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013340:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013344:	3302      	adds	r3, #2
 8013346:	e7c7      	b.n	80132d8 <_printf_common+0x58>
 8013348:	2301      	movs	r3, #1
 801334a:	4622      	mov	r2, r4
 801334c:	4641      	mov	r1, r8
 801334e:	4638      	mov	r0, r7
 8013350:	47c8      	blx	r9
 8013352:	3001      	adds	r0, #1
 8013354:	d0e6      	beq.n	8013324 <_printf_common+0xa4>
 8013356:	3601      	adds	r6, #1
 8013358:	e7d9      	b.n	801330e <_printf_common+0x8e>
	...

0801335c <_printf_i>:
 801335c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013360:	7e0f      	ldrb	r7, [r1, #24]
 8013362:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013364:	2f78      	cmp	r7, #120	@ 0x78
 8013366:	4691      	mov	r9, r2
 8013368:	4680      	mov	r8, r0
 801336a:	460c      	mov	r4, r1
 801336c:	469a      	mov	sl, r3
 801336e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013372:	d807      	bhi.n	8013384 <_printf_i+0x28>
 8013374:	2f62      	cmp	r7, #98	@ 0x62
 8013376:	d80a      	bhi.n	801338e <_printf_i+0x32>
 8013378:	2f00      	cmp	r7, #0
 801337a:	f000 80d1 	beq.w	8013520 <_printf_i+0x1c4>
 801337e:	2f58      	cmp	r7, #88	@ 0x58
 8013380:	f000 80b8 	beq.w	80134f4 <_printf_i+0x198>
 8013384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013388:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801338c:	e03a      	b.n	8013404 <_printf_i+0xa8>
 801338e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013392:	2b15      	cmp	r3, #21
 8013394:	d8f6      	bhi.n	8013384 <_printf_i+0x28>
 8013396:	a101      	add	r1, pc, #4	@ (adr r1, 801339c <_printf_i+0x40>)
 8013398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801339c:	080133f5 	.word	0x080133f5
 80133a0:	08013409 	.word	0x08013409
 80133a4:	08013385 	.word	0x08013385
 80133a8:	08013385 	.word	0x08013385
 80133ac:	08013385 	.word	0x08013385
 80133b0:	08013385 	.word	0x08013385
 80133b4:	08013409 	.word	0x08013409
 80133b8:	08013385 	.word	0x08013385
 80133bc:	08013385 	.word	0x08013385
 80133c0:	08013385 	.word	0x08013385
 80133c4:	08013385 	.word	0x08013385
 80133c8:	08013507 	.word	0x08013507
 80133cc:	08013433 	.word	0x08013433
 80133d0:	080134c1 	.word	0x080134c1
 80133d4:	08013385 	.word	0x08013385
 80133d8:	08013385 	.word	0x08013385
 80133dc:	08013529 	.word	0x08013529
 80133e0:	08013385 	.word	0x08013385
 80133e4:	08013433 	.word	0x08013433
 80133e8:	08013385 	.word	0x08013385
 80133ec:	08013385 	.word	0x08013385
 80133f0:	080134c9 	.word	0x080134c9
 80133f4:	6833      	ldr	r3, [r6, #0]
 80133f6:	1d1a      	adds	r2, r3, #4
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	6032      	str	r2, [r6, #0]
 80133fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013400:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013404:	2301      	movs	r3, #1
 8013406:	e09c      	b.n	8013542 <_printf_i+0x1e6>
 8013408:	6833      	ldr	r3, [r6, #0]
 801340a:	6820      	ldr	r0, [r4, #0]
 801340c:	1d19      	adds	r1, r3, #4
 801340e:	6031      	str	r1, [r6, #0]
 8013410:	0606      	lsls	r6, r0, #24
 8013412:	d501      	bpl.n	8013418 <_printf_i+0xbc>
 8013414:	681d      	ldr	r5, [r3, #0]
 8013416:	e003      	b.n	8013420 <_printf_i+0xc4>
 8013418:	0645      	lsls	r5, r0, #25
 801341a:	d5fb      	bpl.n	8013414 <_printf_i+0xb8>
 801341c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013420:	2d00      	cmp	r5, #0
 8013422:	da03      	bge.n	801342c <_printf_i+0xd0>
 8013424:	232d      	movs	r3, #45	@ 0x2d
 8013426:	426d      	negs	r5, r5
 8013428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801342c:	4858      	ldr	r0, [pc, #352]	@ (8013590 <_printf_i+0x234>)
 801342e:	230a      	movs	r3, #10
 8013430:	e011      	b.n	8013456 <_printf_i+0xfa>
 8013432:	6821      	ldr	r1, [r4, #0]
 8013434:	6833      	ldr	r3, [r6, #0]
 8013436:	0608      	lsls	r0, r1, #24
 8013438:	f853 5b04 	ldr.w	r5, [r3], #4
 801343c:	d402      	bmi.n	8013444 <_printf_i+0xe8>
 801343e:	0649      	lsls	r1, r1, #25
 8013440:	bf48      	it	mi
 8013442:	b2ad      	uxthmi	r5, r5
 8013444:	2f6f      	cmp	r7, #111	@ 0x6f
 8013446:	4852      	ldr	r0, [pc, #328]	@ (8013590 <_printf_i+0x234>)
 8013448:	6033      	str	r3, [r6, #0]
 801344a:	bf14      	ite	ne
 801344c:	230a      	movne	r3, #10
 801344e:	2308      	moveq	r3, #8
 8013450:	2100      	movs	r1, #0
 8013452:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013456:	6866      	ldr	r6, [r4, #4]
 8013458:	60a6      	str	r6, [r4, #8]
 801345a:	2e00      	cmp	r6, #0
 801345c:	db05      	blt.n	801346a <_printf_i+0x10e>
 801345e:	6821      	ldr	r1, [r4, #0]
 8013460:	432e      	orrs	r6, r5
 8013462:	f021 0104 	bic.w	r1, r1, #4
 8013466:	6021      	str	r1, [r4, #0]
 8013468:	d04b      	beq.n	8013502 <_printf_i+0x1a6>
 801346a:	4616      	mov	r6, r2
 801346c:	fbb5 f1f3 	udiv	r1, r5, r3
 8013470:	fb03 5711 	mls	r7, r3, r1, r5
 8013474:	5dc7      	ldrb	r7, [r0, r7]
 8013476:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801347a:	462f      	mov	r7, r5
 801347c:	42bb      	cmp	r3, r7
 801347e:	460d      	mov	r5, r1
 8013480:	d9f4      	bls.n	801346c <_printf_i+0x110>
 8013482:	2b08      	cmp	r3, #8
 8013484:	d10b      	bne.n	801349e <_printf_i+0x142>
 8013486:	6823      	ldr	r3, [r4, #0]
 8013488:	07df      	lsls	r7, r3, #31
 801348a:	d508      	bpl.n	801349e <_printf_i+0x142>
 801348c:	6923      	ldr	r3, [r4, #16]
 801348e:	6861      	ldr	r1, [r4, #4]
 8013490:	4299      	cmp	r1, r3
 8013492:	bfde      	ittt	le
 8013494:	2330      	movle	r3, #48	@ 0x30
 8013496:	f806 3c01 	strble.w	r3, [r6, #-1]
 801349a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801349e:	1b92      	subs	r2, r2, r6
 80134a0:	6122      	str	r2, [r4, #16]
 80134a2:	f8cd a000 	str.w	sl, [sp]
 80134a6:	464b      	mov	r3, r9
 80134a8:	aa03      	add	r2, sp, #12
 80134aa:	4621      	mov	r1, r4
 80134ac:	4640      	mov	r0, r8
 80134ae:	f7ff fee7 	bl	8013280 <_printf_common>
 80134b2:	3001      	adds	r0, #1
 80134b4:	d14a      	bne.n	801354c <_printf_i+0x1f0>
 80134b6:	f04f 30ff 	mov.w	r0, #4294967295
 80134ba:	b004      	add	sp, #16
 80134bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134c0:	6823      	ldr	r3, [r4, #0]
 80134c2:	f043 0320 	orr.w	r3, r3, #32
 80134c6:	6023      	str	r3, [r4, #0]
 80134c8:	4832      	ldr	r0, [pc, #200]	@ (8013594 <_printf_i+0x238>)
 80134ca:	2778      	movs	r7, #120	@ 0x78
 80134cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80134d0:	6823      	ldr	r3, [r4, #0]
 80134d2:	6831      	ldr	r1, [r6, #0]
 80134d4:	061f      	lsls	r7, r3, #24
 80134d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80134da:	d402      	bmi.n	80134e2 <_printf_i+0x186>
 80134dc:	065f      	lsls	r7, r3, #25
 80134de:	bf48      	it	mi
 80134e0:	b2ad      	uxthmi	r5, r5
 80134e2:	6031      	str	r1, [r6, #0]
 80134e4:	07d9      	lsls	r1, r3, #31
 80134e6:	bf44      	itt	mi
 80134e8:	f043 0320 	orrmi.w	r3, r3, #32
 80134ec:	6023      	strmi	r3, [r4, #0]
 80134ee:	b11d      	cbz	r5, 80134f8 <_printf_i+0x19c>
 80134f0:	2310      	movs	r3, #16
 80134f2:	e7ad      	b.n	8013450 <_printf_i+0xf4>
 80134f4:	4826      	ldr	r0, [pc, #152]	@ (8013590 <_printf_i+0x234>)
 80134f6:	e7e9      	b.n	80134cc <_printf_i+0x170>
 80134f8:	6823      	ldr	r3, [r4, #0]
 80134fa:	f023 0320 	bic.w	r3, r3, #32
 80134fe:	6023      	str	r3, [r4, #0]
 8013500:	e7f6      	b.n	80134f0 <_printf_i+0x194>
 8013502:	4616      	mov	r6, r2
 8013504:	e7bd      	b.n	8013482 <_printf_i+0x126>
 8013506:	6833      	ldr	r3, [r6, #0]
 8013508:	6825      	ldr	r5, [r4, #0]
 801350a:	6961      	ldr	r1, [r4, #20]
 801350c:	1d18      	adds	r0, r3, #4
 801350e:	6030      	str	r0, [r6, #0]
 8013510:	062e      	lsls	r6, r5, #24
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	d501      	bpl.n	801351a <_printf_i+0x1be>
 8013516:	6019      	str	r1, [r3, #0]
 8013518:	e002      	b.n	8013520 <_printf_i+0x1c4>
 801351a:	0668      	lsls	r0, r5, #25
 801351c:	d5fb      	bpl.n	8013516 <_printf_i+0x1ba>
 801351e:	8019      	strh	r1, [r3, #0]
 8013520:	2300      	movs	r3, #0
 8013522:	6123      	str	r3, [r4, #16]
 8013524:	4616      	mov	r6, r2
 8013526:	e7bc      	b.n	80134a2 <_printf_i+0x146>
 8013528:	6833      	ldr	r3, [r6, #0]
 801352a:	1d1a      	adds	r2, r3, #4
 801352c:	6032      	str	r2, [r6, #0]
 801352e:	681e      	ldr	r6, [r3, #0]
 8013530:	6862      	ldr	r2, [r4, #4]
 8013532:	2100      	movs	r1, #0
 8013534:	4630      	mov	r0, r6
 8013536:	f7ec fe4b 	bl	80001d0 <memchr>
 801353a:	b108      	cbz	r0, 8013540 <_printf_i+0x1e4>
 801353c:	1b80      	subs	r0, r0, r6
 801353e:	6060      	str	r0, [r4, #4]
 8013540:	6863      	ldr	r3, [r4, #4]
 8013542:	6123      	str	r3, [r4, #16]
 8013544:	2300      	movs	r3, #0
 8013546:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801354a:	e7aa      	b.n	80134a2 <_printf_i+0x146>
 801354c:	6923      	ldr	r3, [r4, #16]
 801354e:	4632      	mov	r2, r6
 8013550:	4649      	mov	r1, r9
 8013552:	4640      	mov	r0, r8
 8013554:	47d0      	blx	sl
 8013556:	3001      	adds	r0, #1
 8013558:	d0ad      	beq.n	80134b6 <_printf_i+0x15a>
 801355a:	6823      	ldr	r3, [r4, #0]
 801355c:	079b      	lsls	r3, r3, #30
 801355e:	d413      	bmi.n	8013588 <_printf_i+0x22c>
 8013560:	68e0      	ldr	r0, [r4, #12]
 8013562:	9b03      	ldr	r3, [sp, #12]
 8013564:	4298      	cmp	r0, r3
 8013566:	bfb8      	it	lt
 8013568:	4618      	movlt	r0, r3
 801356a:	e7a6      	b.n	80134ba <_printf_i+0x15e>
 801356c:	2301      	movs	r3, #1
 801356e:	4632      	mov	r2, r6
 8013570:	4649      	mov	r1, r9
 8013572:	4640      	mov	r0, r8
 8013574:	47d0      	blx	sl
 8013576:	3001      	adds	r0, #1
 8013578:	d09d      	beq.n	80134b6 <_printf_i+0x15a>
 801357a:	3501      	adds	r5, #1
 801357c:	68e3      	ldr	r3, [r4, #12]
 801357e:	9903      	ldr	r1, [sp, #12]
 8013580:	1a5b      	subs	r3, r3, r1
 8013582:	42ab      	cmp	r3, r5
 8013584:	dcf2      	bgt.n	801356c <_printf_i+0x210>
 8013586:	e7eb      	b.n	8013560 <_printf_i+0x204>
 8013588:	2500      	movs	r5, #0
 801358a:	f104 0619 	add.w	r6, r4, #25
 801358e:	e7f5      	b.n	801357c <_printf_i+0x220>
 8013590:	080166fa 	.word	0x080166fa
 8013594:	0801670b 	.word	0x0801670b

08013598 <__sflush_r>:
 8013598:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135a0:	0716      	lsls	r6, r2, #28
 80135a2:	4605      	mov	r5, r0
 80135a4:	460c      	mov	r4, r1
 80135a6:	d454      	bmi.n	8013652 <__sflush_r+0xba>
 80135a8:	684b      	ldr	r3, [r1, #4]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	dc02      	bgt.n	80135b4 <__sflush_r+0x1c>
 80135ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	dd48      	ble.n	8013646 <__sflush_r+0xae>
 80135b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80135b6:	2e00      	cmp	r6, #0
 80135b8:	d045      	beq.n	8013646 <__sflush_r+0xae>
 80135ba:	2300      	movs	r3, #0
 80135bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80135c0:	682f      	ldr	r7, [r5, #0]
 80135c2:	6a21      	ldr	r1, [r4, #32]
 80135c4:	602b      	str	r3, [r5, #0]
 80135c6:	d030      	beq.n	801362a <__sflush_r+0x92>
 80135c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80135ca:	89a3      	ldrh	r3, [r4, #12]
 80135cc:	0759      	lsls	r1, r3, #29
 80135ce:	d505      	bpl.n	80135dc <__sflush_r+0x44>
 80135d0:	6863      	ldr	r3, [r4, #4]
 80135d2:	1ad2      	subs	r2, r2, r3
 80135d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80135d6:	b10b      	cbz	r3, 80135dc <__sflush_r+0x44>
 80135d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80135da:	1ad2      	subs	r2, r2, r3
 80135dc:	2300      	movs	r3, #0
 80135de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80135e0:	6a21      	ldr	r1, [r4, #32]
 80135e2:	4628      	mov	r0, r5
 80135e4:	47b0      	blx	r6
 80135e6:	1c43      	adds	r3, r0, #1
 80135e8:	89a3      	ldrh	r3, [r4, #12]
 80135ea:	d106      	bne.n	80135fa <__sflush_r+0x62>
 80135ec:	6829      	ldr	r1, [r5, #0]
 80135ee:	291d      	cmp	r1, #29
 80135f0:	d82b      	bhi.n	801364a <__sflush_r+0xb2>
 80135f2:	4a2a      	ldr	r2, [pc, #168]	@ (801369c <__sflush_r+0x104>)
 80135f4:	40ca      	lsrs	r2, r1
 80135f6:	07d6      	lsls	r6, r2, #31
 80135f8:	d527      	bpl.n	801364a <__sflush_r+0xb2>
 80135fa:	2200      	movs	r2, #0
 80135fc:	6062      	str	r2, [r4, #4]
 80135fe:	04d9      	lsls	r1, r3, #19
 8013600:	6922      	ldr	r2, [r4, #16]
 8013602:	6022      	str	r2, [r4, #0]
 8013604:	d504      	bpl.n	8013610 <__sflush_r+0x78>
 8013606:	1c42      	adds	r2, r0, #1
 8013608:	d101      	bne.n	801360e <__sflush_r+0x76>
 801360a:	682b      	ldr	r3, [r5, #0]
 801360c:	b903      	cbnz	r3, 8013610 <__sflush_r+0x78>
 801360e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013610:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013612:	602f      	str	r7, [r5, #0]
 8013614:	b1b9      	cbz	r1, 8013646 <__sflush_r+0xae>
 8013616:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801361a:	4299      	cmp	r1, r3
 801361c:	d002      	beq.n	8013624 <__sflush_r+0x8c>
 801361e:	4628      	mov	r0, r5
 8013620:	f7ff fa94 	bl	8012b4c <_free_r>
 8013624:	2300      	movs	r3, #0
 8013626:	6363      	str	r3, [r4, #52]	@ 0x34
 8013628:	e00d      	b.n	8013646 <__sflush_r+0xae>
 801362a:	2301      	movs	r3, #1
 801362c:	4628      	mov	r0, r5
 801362e:	47b0      	blx	r6
 8013630:	4602      	mov	r2, r0
 8013632:	1c50      	adds	r0, r2, #1
 8013634:	d1c9      	bne.n	80135ca <__sflush_r+0x32>
 8013636:	682b      	ldr	r3, [r5, #0]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d0c6      	beq.n	80135ca <__sflush_r+0x32>
 801363c:	2b1d      	cmp	r3, #29
 801363e:	d001      	beq.n	8013644 <__sflush_r+0xac>
 8013640:	2b16      	cmp	r3, #22
 8013642:	d11e      	bne.n	8013682 <__sflush_r+0xea>
 8013644:	602f      	str	r7, [r5, #0]
 8013646:	2000      	movs	r0, #0
 8013648:	e022      	b.n	8013690 <__sflush_r+0xf8>
 801364a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801364e:	b21b      	sxth	r3, r3
 8013650:	e01b      	b.n	801368a <__sflush_r+0xf2>
 8013652:	690f      	ldr	r7, [r1, #16]
 8013654:	2f00      	cmp	r7, #0
 8013656:	d0f6      	beq.n	8013646 <__sflush_r+0xae>
 8013658:	0793      	lsls	r3, r2, #30
 801365a:	680e      	ldr	r6, [r1, #0]
 801365c:	bf08      	it	eq
 801365e:	694b      	ldreq	r3, [r1, #20]
 8013660:	600f      	str	r7, [r1, #0]
 8013662:	bf18      	it	ne
 8013664:	2300      	movne	r3, #0
 8013666:	eba6 0807 	sub.w	r8, r6, r7
 801366a:	608b      	str	r3, [r1, #8]
 801366c:	f1b8 0f00 	cmp.w	r8, #0
 8013670:	dde9      	ble.n	8013646 <__sflush_r+0xae>
 8013672:	6a21      	ldr	r1, [r4, #32]
 8013674:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013676:	4643      	mov	r3, r8
 8013678:	463a      	mov	r2, r7
 801367a:	4628      	mov	r0, r5
 801367c:	47b0      	blx	r6
 801367e:	2800      	cmp	r0, #0
 8013680:	dc08      	bgt.n	8013694 <__sflush_r+0xfc>
 8013682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801368a:	81a3      	strh	r3, [r4, #12]
 801368c:	f04f 30ff 	mov.w	r0, #4294967295
 8013690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013694:	4407      	add	r7, r0
 8013696:	eba8 0800 	sub.w	r8, r8, r0
 801369a:	e7e7      	b.n	801366c <__sflush_r+0xd4>
 801369c:	20400001 	.word	0x20400001

080136a0 <_fflush_r>:
 80136a0:	b538      	push	{r3, r4, r5, lr}
 80136a2:	690b      	ldr	r3, [r1, #16]
 80136a4:	4605      	mov	r5, r0
 80136a6:	460c      	mov	r4, r1
 80136a8:	b913      	cbnz	r3, 80136b0 <_fflush_r+0x10>
 80136aa:	2500      	movs	r5, #0
 80136ac:	4628      	mov	r0, r5
 80136ae:	bd38      	pop	{r3, r4, r5, pc}
 80136b0:	b118      	cbz	r0, 80136ba <_fflush_r+0x1a>
 80136b2:	6a03      	ldr	r3, [r0, #32]
 80136b4:	b90b      	cbnz	r3, 80136ba <_fflush_r+0x1a>
 80136b6:	f7ff f8b7 	bl	8012828 <__sinit>
 80136ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d0f3      	beq.n	80136aa <_fflush_r+0xa>
 80136c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80136c4:	07d0      	lsls	r0, r2, #31
 80136c6:	d404      	bmi.n	80136d2 <_fflush_r+0x32>
 80136c8:	0599      	lsls	r1, r3, #22
 80136ca:	d402      	bmi.n	80136d2 <_fflush_r+0x32>
 80136cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80136ce:	f7ff fa0e 	bl	8012aee <__retarget_lock_acquire_recursive>
 80136d2:	4628      	mov	r0, r5
 80136d4:	4621      	mov	r1, r4
 80136d6:	f7ff ff5f 	bl	8013598 <__sflush_r>
 80136da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80136dc:	07da      	lsls	r2, r3, #31
 80136de:	4605      	mov	r5, r0
 80136e0:	d4e4      	bmi.n	80136ac <_fflush_r+0xc>
 80136e2:	89a3      	ldrh	r3, [r4, #12]
 80136e4:	059b      	lsls	r3, r3, #22
 80136e6:	d4e1      	bmi.n	80136ac <_fflush_r+0xc>
 80136e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80136ea:	f7ff fa01 	bl	8012af0 <__retarget_lock_release_recursive>
 80136ee:	e7dd      	b.n	80136ac <_fflush_r+0xc>

080136f0 <fiprintf>:
 80136f0:	b40e      	push	{r1, r2, r3}
 80136f2:	b503      	push	{r0, r1, lr}
 80136f4:	4601      	mov	r1, r0
 80136f6:	ab03      	add	r3, sp, #12
 80136f8:	4805      	ldr	r0, [pc, #20]	@ (8013710 <fiprintf+0x20>)
 80136fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80136fe:	6800      	ldr	r0, [r0, #0]
 8013700:	9301      	str	r3, [sp, #4]
 8013702:	f7ff fca5 	bl	8013050 <_vfiprintf_r>
 8013706:	b002      	add	sp, #8
 8013708:	f85d eb04 	ldr.w	lr, [sp], #4
 801370c:	b003      	add	sp, #12
 801370e:	4770      	bx	lr
 8013710:	200000b0 	.word	0x200000b0

08013714 <__swbuf_r>:
 8013714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013716:	460e      	mov	r6, r1
 8013718:	4614      	mov	r4, r2
 801371a:	4605      	mov	r5, r0
 801371c:	b118      	cbz	r0, 8013726 <__swbuf_r+0x12>
 801371e:	6a03      	ldr	r3, [r0, #32]
 8013720:	b90b      	cbnz	r3, 8013726 <__swbuf_r+0x12>
 8013722:	f7ff f881 	bl	8012828 <__sinit>
 8013726:	69a3      	ldr	r3, [r4, #24]
 8013728:	60a3      	str	r3, [r4, #8]
 801372a:	89a3      	ldrh	r3, [r4, #12]
 801372c:	071a      	lsls	r2, r3, #28
 801372e:	d501      	bpl.n	8013734 <__swbuf_r+0x20>
 8013730:	6923      	ldr	r3, [r4, #16]
 8013732:	b943      	cbnz	r3, 8013746 <__swbuf_r+0x32>
 8013734:	4621      	mov	r1, r4
 8013736:	4628      	mov	r0, r5
 8013738:	f000 f82a 	bl	8013790 <__swsetup_r>
 801373c:	b118      	cbz	r0, 8013746 <__swbuf_r+0x32>
 801373e:	f04f 37ff 	mov.w	r7, #4294967295
 8013742:	4638      	mov	r0, r7
 8013744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013746:	6823      	ldr	r3, [r4, #0]
 8013748:	6922      	ldr	r2, [r4, #16]
 801374a:	1a98      	subs	r0, r3, r2
 801374c:	6963      	ldr	r3, [r4, #20]
 801374e:	b2f6      	uxtb	r6, r6
 8013750:	4283      	cmp	r3, r0
 8013752:	4637      	mov	r7, r6
 8013754:	dc05      	bgt.n	8013762 <__swbuf_r+0x4e>
 8013756:	4621      	mov	r1, r4
 8013758:	4628      	mov	r0, r5
 801375a:	f7ff ffa1 	bl	80136a0 <_fflush_r>
 801375e:	2800      	cmp	r0, #0
 8013760:	d1ed      	bne.n	801373e <__swbuf_r+0x2a>
 8013762:	68a3      	ldr	r3, [r4, #8]
 8013764:	3b01      	subs	r3, #1
 8013766:	60a3      	str	r3, [r4, #8]
 8013768:	6823      	ldr	r3, [r4, #0]
 801376a:	1c5a      	adds	r2, r3, #1
 801376c:	6022      	str	r2, [r4, #0]
 801376e:	701e      	strb	r6, [r3, #0]
 8013770:	6962      	ldr	r2, [r4, #20]
 8013772:	1c43      	adds	r3, r0, #1
 8013774:	429a      	cmp	r2, r3
 8013776:	d004      	beq.n	8013782 <__swbuf_r+0x6e>
 8013778:	89a3      	ldrh	r3, [r4, #12]
 801377a:	07db      	lsls	r3, r3, #31
 801377c:	d5e1      	bpl.n	8013742 <__swbuf_r+0x2e>
 801377e:	2e0a      	cmp	r6, #10
 8013780:	d1df      	bne.n	8013742 <__swbuf_r+0x2e>
 8013782:	4621      	mov	r1, r4
 8013784:	4628      	mov	r0, r5
 8013786:	f7ff ff8b 	bl	80136a0 <_fflush_r>
 801378a:	2800      	cmp	r0, #0
 801378c:	d0d9      	beq.n	8013742 <__swbuf_r+0x2e>
 801378e:	e7d6      	b.n	801373e <__swbuf_r+0x2a>

08013790 <__swsetup_r>:
 8013790:	b538      	push	{r3, r4, r5, lr}
 8013792:	4b29      	ldr	r3, [pc, #164]	@ (8013838 <__swsetup_r+0xa8>)
 8013794:	4605      	mov	r5, r0
 8013796:	6818      	ldr	r0, [r3, #0]
 8013798:	460c      	mov	r4, r1
 801379a:	b118      	cbz	r0, 80137a4 <__swsetup_r+0x14>
 801379c:	6a03      	ldr	r3, [r0, #32]
 801379e:	b90b      	cbnz	r3, 80137a4 <__swsetup_r+0x14>
 80137a0:	f7ff f842 	bl	8012828 <__sinit>
 80137a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137a8:	0719      	lsls	r1, r3, #28
 80137aa:	d422      	bmi.n	80137f2 <__swsetup_r+0x62>
 80137ac:	06da      	lsls	r2, r3, #27
 80137ae:	d407      	bmi.n	80137c0 <__swsetup_r+0x30>
 80137b0:	2209      	movs	r2, #9
 80137b2:	602a      	str	r2, [r5, #0]
 80137b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137b8:	81a3      	strh	r3, [r4, #12]
 80137ba:	f04f 30ff 	mov.w	r0, #4294967295
 80137be:	e033      	b.n	8013828 <__swsetup_r+0x98>
 80137c0:	0758      	lsls	r0, r3, #29
 80137c2:	d512      	bpl.n	80137ea <__swsetup_r+0x5a>
 80137c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80137c6:	b141      	cbz	r1, 80137da <__swsetup_r+0x4a>
 80137c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80137cc:	4299      	cmp	r1, r3
 80137ce:	d002      	beq.n	80137d6 <__swsetup_r+0x46>
 80137d0:	4628      	mov	r0, r5
 80137d2:	f7ff f9bb 	bl	8012b4c <_free_r>
 80137d6:	2300      	movs	r3, #0
 80137d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80137da:	89a3      	ldrh	r3, [r4, #12]
 80137dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80137e0:	81a3      	strh	r3, [r4, #12]
 80137e2:	2300      	movs	r3, #0
 80137e4:	6063      	str	r3, [r4, #4]
 80137e6:	6923      	ldr	r3, [r4, #16]
 80137e8:	6023      	str	r3, [r4, #0]
 80137ea:	89a3      	ldrh	r3, [r4, #12]
 80137ec:	f043 0308 	orr.w	r3, r3, #8
 80137f0:	81a3      	strh	r3, [r4, #12]
 80137f2:	6923      	ldr	r3, [r4, #16]
 80137f4:	b94b      	cbnz	r3, 801380a <__swsetup_r+0x7a>
 80137f6:	89a3      	ldrh	r3, [r4, #12]
 80137f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80137fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013800:	d003      	beq.n	801380a <__swsetup_r+0x7a>
 8013802:	4621      	mov	r1, r4
 8013804:	4628      	mov	r0, r5
 8013806:	f000 f884 	bl	8013912 <__smakebuf_r>
 801380a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801380e:	f013 0201 	ands.w	r2, r3, #1
 8013812:	d00a      	beq.n	801382a <__swsetup_r+0x9a>
 8013814:	2200      	movs	r2, #0
 8013816:	60a2      	str	r2, [r4, #8]
 8013818:	6962      	ldr	r2, [r4, #20]
 801381a:	4252      	negs	r2, r2
 801381c:	61a2      	str	r2, [r4, #24]
 801381e:	6922      	ldr	r2, [r4, #16]
 8013820:	b942      	cbnz	r2, 8013834 <__swsetup_r+0xa4>
 8013822:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013826:	d1c5      	bne.n	80137b4 <__swsetup_r+0x24>
 8013828:	bd38      	pop	{r3, r4, r5, pc}
 801382a:	0799      	lsls	r1, r3, #30
 801382c:	bf58      	it	pl
 801382e:	6962      	ldrpl	r2, [r4, #20]
 8013830:	60a2      	str	r2, [r4, #8]
 8013832:	e7f4      	b.n	801381e <__swsetup_r+0x8e>
 8013834:	2000      	movs	r0, #0
 8013836:	e7f7      	b.n	8013828 <__swsetup_r+0x98>
 8013838:	200000b0 	.word	0x200000b0

0801383c <_sbrk_r>:
 801383c:	b538      	push	{r3, r4, r5, lr}
 801383e:	4d06      	ldr	r5, [pc, #24]	@ (8013858 <_sbrk_r+0x1c>)
 8013840:	2300      	movs	r3, #0
 8013842:	4604      	mov	r4, r0
 8013844:	4608      	mov	r0, r1
 8013846:	602b      	str	r3, [r5, #0]
 8013848:	f7ef fa28 	bl	8002c9c <_sbrk>
 801384c:	1c43      	adds	r3, r0, #1
 801384e:	d102      	bne.n	8013856 <_sbrk_r+0x1a>
 8013850:	682b      	ldr	r3, [r5, #0]
 8013852:	b103      	cbz	r3, 8013856 <_sbrk_r+0x1a>
 8013854:	6023      	str	r3, [r4, #0]
 8013856:	bd38      	pop	{r3, r4, r5, pc}
 8013858:	20008c34 	.word	0x20008c34

0801385c <abort>:
 801385c:	b508      	push	{r3, lr}
 801385e:	2006      	movs	r0, #6
 8013860:	f000 f8bc 	bl	80139dc <raise>
 8013864:	2001      	movs	r0, #1
 8013866:	f7ef f9a1 	bl	8002bac <_exit>

0801386a <_realloc_r>:
 801386a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801386e:	4607      	mov	r7, r0
 8013870:	4614      	mov	r4, r2
 8013872:	460d      	mov	r5, r1
 8013874:	b921      	cbnz	r1, 8013880 <_realloc_r+0x16>
 8013876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801387a:	4611      	mov	r1, r2
 801387c:	f7ff b9da 	b.w	8012c34 <_malloc_r>
 8013880:	b92a      	cbnz	r2, 801388e <_realloc_r+0x24>
 8013882:	f7ff f963 	bl	8012b4c <_free_r>
 8013886:	4625      	mov	r5, r4
 8013888:	4628      	mov	r0, r5
 801388a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801388e:	f000 f8e3 	bl	8013a58 <_malloc_usable_size_r>
 8013892:	4284      	cmp	r4, r0
 8013894:	4606      	mov	r6, r0
 8013896:	d802      	bhi.n	801389e <_realloc_r+0x34>
 8013898:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801389c:	d8f4      	bhi.n	8013888 <_realloc_r+0x1e>
 801389e:	4621      	mov	r1, r4
 80138a0:	4638      	mov	r0, r7
 80138a2:	f7ff f9c7 	bl	8012c34 <_malloc_r>
 80138a6:	4680      	mov	r8, r0
 80138a8:	b908      	cbnz	r0, 80138ae <_realloc_r+0x44>
 80138aa:	4645      	mov	r5, r8
 80138ac:	e7ec      	b.n	8013888 <_realloc_r+0x1e>
 80138ae:	42b4      	cmp	r4, r6
 80138b0:	4622      	mov	r2, r4
 80138b2:	4629      	mov	r1, r5
 80138b4:	bf28      	it	cs
 80138b6:	4632      	movcs	r2, r6
 80138b8:	f7ff f91b 	bl	8012af2 <memcpy>
 80138bc:	4629      	mov	r1, r5
 80138be:	4638      	mov	r0, r7
 80138c0:	f7ff f944 	bl	8012b4c <_free_r>
 80138c4:	e7f1      	b.n	80138aa <_realloc_r+0x40>

080138c6 <__swhatbuf_r>:
 80138c6:	b570      	push	{r4, r5, r6, lr}
 80138c8:	460c      	mov	r4, r1
 80138ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138ce:	2900      	cmp	r1, #0
 80138d0:	b096      	sub	sp, #88	@ 0x58
 80138d2:	4615      	mov	r5, r2
 80138d4:	461e      	mov	r6, r3
 80138d6:	da0d      	bge.n	80138f4 <__swhatbuf_r+0x2e>
 80138d8:	89a3      	ldrh	r3, [r4, #12]
 80138da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80138de:	f04f 0100 	mov.w	r1, #0
 80138e2:	bf14      	ite	ne
 80138e4:	2340      	movne	r3, #64	@ 0x40
 80138e6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80138ea:	2000      	movs	r0, #0
 80138ec:	6031      	str	r1, [r6, #0]
 80138ee:	602b      	str	r3, [r5, #0]
 80138f0:	b016      	add	sp, #88	@ 0x58
 80138f2:	bd70      	pop	{r4, r5, r6, pc}
 80138f4:	466a      	mov	r2, sp
 80138f6:	f000 f879 	bl	80139ec <_fstat_r>
 80138fa:	2800      	cmp	r0, #0
 80138fc:	dbec      	blt.n	80138d8 <__swhatbuf_r+0x12>
 80138fe:	9901      	ldr	r1, [sp, #4]
 8013900:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013904:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013908:	4259      	negs	r1, r3
 801390a:	4159      	adcs	r1, r3
 801390c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013910:	e7eb      	b.n	80138ea <__swhatbuf_r+0x24>

08013912 <__smakebuf_r>:
 8013912:	898b      	ldrh	r3, [r1, #12]
 8013914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013916:	079d      	lsls	r5, r3, #30
 8013918:	4606      	mov	r6, r0
 801391a:	460c      	mov	r4, r1
 801391c:	d507      	bpl.n	801392e <__smakebuf_r+0x1c>
 801391e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013922:	6023      	str	r3, [r4, #0]
 8013924:	6123      	str	r3, [r4, #16]
 8013926:	2301      	movs	r3, #1
 8013928:	6163      	str	r3, [r4, #20]
 801392a:	b003      	add	sp, #12
 801392c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801392e:	ab01      	add	r3, sp, #4
 8013930:	466a      	mov	r2, sp
 8013932:	f7ff ffc8 	bl	80138c6 <__swhatbuf_r>
 8013936:	9f00      	ldr	r7, [sp, #0]
 8013938:	4605      	mov	r5, r0
 801393a:	4639      	mov	r1, r7
 801393c:	4630      	mov	r0, r6
 801393e:	f7ff f979 	bl	8012c34 <_malloc_r>
 8013942:	b948      	cbnz	r0, 8013958 <__smakebuf_r+0x46>
 8013944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013948:	059a      	lsls	r2, r3, #22
 801394a:	d4ee      	bmi.n	801392a <__smakebuf_r+0x18>
 801394c:	f023 0303 	bic.w	r3, r3, #3
 8013950:	f043 0302 	orr.w	r3, r3, #2
 8013954:	81a3      	strh	r3, [r4, #12]
 8013956:	e7e2      	b.n	801391e <__smakebuf_r+0xc>
 8013958:	89a3      	ldrh	r3, [r4, #12]
 801395a:	6020      	str	r0, [r4, #0]
 801395c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013960:	81a3      	strh	r3, [r4, #12]
 8013962:	9b01      	ldr	r3, [sp, #4]
 8013964:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013968:	b15b      	cbz	r3, 8013982 <__smakebuf_r+0x70>
 801396a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801396e:	4630      	mov	r0, r6
 8013970:	f000 f84e 	bl	8013a10 <_isatty_r>
 8013974:	b128      	cbz	r0, 8013982 <__smakebuf_r+0x70>
 8013976:	89a3      	ldrh	r3, [r4, #12]
 8013978:	f023 0303 	bic.w	r3, r3, #3
 801397c:	f043 0301 	orr.w	r3, r3, #1
 8013980:	81a3      	strh	r3, [r4, #12]
 8013982:	89a3      	ldrh	r3, [r4, #12]
 8013984:	431d      	orrs	r5, r3
 8013986:	81a5      	strh	r5, [r4, #12]
 8013988:	e7cf      	b.n	801392a <__smakebuf_r+0x18>

0801398a <_raise_r>:
 801398a:	291f      	cmp	r1, #31
 801398c:	b538      	push	{r3, r4, r5, lr}
 801398e:	4605      	mov	r5, r0
 8013990:	460c      	mov	r4, r1
 8013992:	d904      	bls.n	801399e <_raise_r+0x14>
 8013994:	2316      	movs	r3, #22
 8013996:	6003      	str	r3, [r0, #0]
 8013998:	f04f 30ff 	mov.w	r0, #4294967295
 801399c:	bd38      	pop	{r3, r4, r5, pc}
 801399e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80139a0:	b112      	cbz	r2, 80139a8 <_raise_r+0x1e>
 80139a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80139a6:	b94b      	cbnz	r3, 80139bc <_raise_r+0x32>
 80139a8:	4628      	mov	r0, r5
 80139aa:	f000 f853 	bl	8013a54 <_getpid_r>
 80139ae:	4622      	mov	r2, r4
 80139b0:	4601      	mov	r1, r0
 80139b2:	4628      	mov	r0, r5
 80139b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80139b8:	f000 b83a 	b.w	8013a30 <_kill_r>
 80139bc:	2b01      	cmp	r3, #1
 80139be:	d00a      	beq.n	80139d6 <_raise_r+0x4c>
 80139c0:	1c59      	adds	r1, r3, #1
 80139c2:	d103      	bne.n	80139cc <_raise_r+0x42>
 80139c4:	2316      	movs	r3, #22
 80139c6:	6003      	str	r3, [r0, #0]
 80139c8:	2001      	movs	r0, #1
 80139ca:	e7e7      	b.n	801399c <_raise_r+0x12>
 80139cc:	2100      	movs	r1, #0
 80139ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80139d2:	4620      	mov	r0, r4
 80139d4:	4798      	blx	r3
 80139d6:	2000      	movs	r0, #0
 80139d8:	e7e0      	b.n	801399c <_raise_r+0x12>
	...

080139dc <raise>:
 80139dc:	4b02      	ldr	r3, [pc, #8]	@ (80139e8 <raise+0xc>)
 80139de:	4601      	mov	r1, r0
 80139e0:	6818      	ldr	r0, [r3, #0]
 80139e2:	f7ff bfd2 	b.w	801398a <_raise_r>
 80139e6:	bf00      	nop
 80139e8:	200000b0 	.word	0x200000b0

080139ec <_fstat_r>:
 80139ec:	b538      	push	{r3, r4, r5, lr}
 80139ee:	4d07      	ldr	r5, [pc, #28]	@ (8013a0c <_fstat_r+0x20>)
 80139f0:	2300      	movs	r3, #0
 80139f2:	4604      	mov	r4, r0
 80139f4:	4608      	mov	r0, r1
 80139f6:	4611      	mov	r1, r2
 80139f8:	602b      	str	r3, [r5, #0]
 80139fa:	f7ef f927 	bl	8002c4c <_fstat>
 80139fe:	1c43      	adds	r3, r0, #1
 8013a00:	d102      	bne.n	8013a08 <_fstat_r+0x1c>
 8013a02:	682b      	ldr	r3, [r5, #0]
 8013a04:	b103      	cbz	r3, 8013a08 <_fstat_r+0x1c>
 8013a06:	6023      	str	r3, [r4, #0]
 8013a08:	bd38      	pop	{r3, r4, r5, pc}
 8013a0a:	bf00      	nop
 8013a0c:	20008c34 	.word	0x20008c34

08013a10 <_isatty_r>:
 8013a10:	b538      	push	{r3, r4, r5, lr}
 8013a12:	4d06      	ldr	r5, [pc, #24]	@ (8013a2c <_isatty_r+0x1c>)
 8013a14:	2300      	movs	r3, #0
 8013a16:	4604      	mov	r4, r0
 8013a18:	4608      	mov	r0, r1
 8013a1a:	602b      	str	r3, [r5, #0]
 8013a1c:	f7ef f926 	bl	8002c6c <_isatty>
 8013a20:	1c43      	adds	r3, r0, #1
 8013a22:	d102      	bne.n	8013a2a <_isatty_r+0x1a>
 8013a24:	682b      	ldr	r3, [r5, #0]
 8013a26:	b103      	cbz	r3, 8013a2a <_isatty_r+0x1a>
 8013a28:	6023      	str	r3, [r4, #0]
 8013a2a:	bd38      	pop	{r3, r4, r5, pc}
 8013a2c:	20008c34 	.word	0x20008c34

08013a30 <_kill_r>:
 8013a30:	b538      	push	{r3, r4, r5, lr}
 8013a32:	4d07      	ldr	r5, [pc, #28]	@ (8013a50 <_kill_r+0x20>)
 8013a34:	2300      	movs	r3, #0
 8013a36:	4604      	mov	r4, r0
 8013a38:	4608      	mov	r0, r1
 8013a3a:	4611      	mov	r1, r2
 8013a3c:	602b      	str	r3, [r5, #0]
 8013a3e:	f7ef f8a3 	bl	8002b88 <_kill>
 8013a42:	1c43      	adds	r3, r0, #1
 8013a44:	d102      	bne.n	8013a4c <_kill_r+0x1c>
 8013a46:	682b      	ldr	r3, [r5, #0]
 8013a48:	b103      	cbz	r3, 8013a4c <_kill_r+0x1c>
 8013a4a:	6023      	str	r3, [r4, #0]
 8013a4c:	bd38      	pop	{r3, r4, r5, pc}
 8013a4e:	bf00      	nop
 8013a50:	20008c34 	.word	0x20008c34

08013a54 <_getpid_r>:
 8013a54:	f7ef b890 	b.w	8002b78 <_getpid>

08013a58 <_malloc_usable_size_r>:
 8013a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a5c:	1f18      	subs	r0, r3, #4
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	bfbc      	itt	lt
 8013a62:	580b      	ldrlt	r3, [r1, r0]
 8013a64:	18c0      	addlt	r0, r0, r3
 8013a66:	4770      	bx	lr

08013a68 <fmax>:
 8013a68:	b508      	push	{r3, lr}
 8013a6a:	ed2d 8b04 	vpush	{d8-d9}
 8013a6e:	eeb0 8a40 	vmov.f32	s16, s0
 8013a72:	eef0 8a60 	vmov.f32	s17, s1
 8013a76:	eeb0 9a41 	vmov.f32	s18, s2
 8013a7a:	eef0 9a61 	vmov.f32	s19, s3
 8013a7e:	f000 f81d 	bl	8013abc <__fpclassifyd>
 8013a82:	b950      	cbnz	r0, 8013a9a <fmax+0x32>
 8013a84:	eeb0 8a49 	vmov.f32	s16, s18
 8013a88:	eef0 8a69 	vmov.f32	s17, s19
 8013a8c:	eeb0 0a48 	vmov.f32	s0, s16
 8013a90:	eef0 0a68 	vmov.f32	s1, s17
 8013a94:	ecbd 8b04 	vpop	{d8-d9}
 8013a98:	bd08      	pop	{r3, pc}
 8013a9a:	eeb0 0a49 	vmov.f32	s0, s18
 8013a9e:	eef0 0a69 	vmov.f32	s1, s19
 8013aa2:	f000 f80b 	bl	8013abc <__fpclassifyd>
 8013aa6:	2800      	cmp	r0, #0
 8013aa8:	d0f0      	beq.n	8013a8c <fmax+0x24>
 8013aaa:	ec53 2b19 	vmov	r2, r3, d9
 8013aae:	ec51 0b18 	vmov	r0, r1, d8
 8013ab2:	f7ed f829 	bl	8000b08 <__aeabi_dcmpgt>
 8013ab6:	2800      	cmp	r0, #0
 8013ab8:	d0e4      	beq.n	8013a84 <fmax+0x1c>
 8013aba:	e7e7      	b.n	8013a8c <fmax+0x24>

08013abc <__fpclassifyd>:
 8013abc:	ec51 0b10 	vmov	r0, r1, d0
 8013ac0:	460b      	mov	r3, r1
 8013ac2:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8013ac6:	b510      	push	{r4, lr}
 8013ac8:	d104      	bne.n	8013ad4 <__fpclassifyd+0x18>
 8013aca:	2800      	cmp	r0, #0
 8013acc:	bf0c      	ite	eq
 8013ace:	2002      	moveq	r0, #2
 8013ad0:	2003      	movne	r0, #3
 8013ad2:	bd10      	pop	{r4, pc}
 8013ad4:	4a09      	ldr	r2, [pc, #36]	@ (8013afc <__fpclassifyd+0x40>)
 8013ad6:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8013ada:	4294      	cmp	r4, r2
 8013adc:	d908      	bls.n	8013af0 <__fpclassifyd+0x34>
 8013ade:	4a08      	ldr	r2, [pc, #32]	@ (8013b00 <__fpclassifyd+0x44>)
 8013ae0:	4213      	tst	r3, r2
 8013ae2:	d007      	beq.n	8013af4 <__fpclassifyd+0x38>
 8013ae4:	4291      	cmp	r1, r2
 8013ae6:	d107      	bne.n	8013af8 <__fpclassifyd+0x3c>
 8013ae8:	fab0 f080 	clz	r0, r0
 8013aec:	0940      	lsrs	r0, r0, #5
 8013aee:	e7f0      	b.n	8013ad2 <__fpclassifyd+0x16>
 8013af0:	2004      	movs	r0, #4
 8013af2:	e7ee      	b.n	8013ad2 <__fpclassifyd+0x16>
 8013af4:	2003      	movs	r0, #3
 8013af6:	e7ec      	b.n	8013ad2 <__fpclassifyd+0x16>
 8013af8:	2000      	movs	r0, #0
 8013afa:	e7ea      	b.n	8013ad2 <__fpclassifyd+0x16>
 8013afc:	7fdfffff 	.word	0x7fdfffff
 8013b00:	7ff00000 	.word	0x7ff00000

08013b04 <_init>:
 8013b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b06:	bf00      	nop
 8013b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b0a:	bc08      	pop	{r3}
 8013b0c:	469e      	mov	lr, r3
 8013b0e:	4770      	bx	lr

08013b10 <_fini>:
 8013b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b12:	bf00      	nop
 8013b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b16:	bc08      	pop	{r3}
 8013b18:	469e      	mov	lr, r3
 8013b1a:	4770      	bx	lr
